
TouchGFX_on_STM32H7B3LIH6QU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e648  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c58  0801e8f8  0801e8f8  0002e8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000059e  08020550  08020550  00030550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000002c  08020af0  08020af0  00030af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000724d4  08020b1c  08020b1c  00030b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000003c  08092ff0  08092ff0  000a2ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000014  0809302c  0809302c  000a302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08093040  08093040  000a3040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  24000000  08093048  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001b5a8  240000e0  08093128  000b00e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2401b688  08093128  000bb688  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000b00e0  2**0
                  CONTENTS, READONLY
 13 .comment      000000c2  00000000  00000000  000b010e  2**0
                  CONTENTS, READONLY
 14 .debug_info   00088742  00000000  00000000  000b01d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00010288  00000000  00000000  00138912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003520  00000000  00000000  00148ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000273c  00000000  00000000  0014c0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ec95  00000000  00000000  0014e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003ec55  00000000  00000000  0018d491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00170506  00000000  00000000  001cc0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000e62c  00000000  00000000  0033c5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  0034ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000e0 	.word	0x240000e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801e8e0 	.word	0x0801e8e0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000e4 	.word	0x240000e4
 80002ec:	0801e8e0 	.word	0x0801e8e0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <MX_CRC_Init+0x3c>)
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <MX_CRC_Init+0x40>)
 8000398:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_CRC_Init+0x3c>)
 800039c:	2200      	movs	r2, #0
 800039e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_CRC_Init+0x3c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_CRC_Init+0x3c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <MX_CRC_Init+0x3c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_CRC_Init+0x3c>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_CRC_Init+0x3c>)
 80003ba:	f001 fa19 	bl	80017f0 <HAL_CRC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003c4:	f000 fd7c 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	240000fc 	.word	0x240000fc
 80003d0:	40023000 	.word	0x40023000

080003d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <HAL_CRC_MspInit+0x3c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d10e      	bne.n	8000404 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_CRC_MspInit+0x40>)
 80003e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <HAL_CRC_MspInit+0x40>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_CRC_MspInit+0x40>)
 80003f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80003fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023000 	.word	0x40023000
 8000414:	58024400 	.word	0x58024400

08000418 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800041e:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <MX_DMA2D_Init+0x70>)
 8000420:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800042a:	2201      	movs	r2, #1
 800042c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000436:	2200      	movs	r2, #0
 8000438:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800043c:	2201      	movs	r2, #1
 800043e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000442:	2200      	movs	r2, #0
 8000444:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000448:	2200      	movs	r2, #0
 800044a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800044e:	2200      	movs	r2, #0
 8000450:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000454:	2200      	movs	r2, #0
 8000456:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800045a:	2200      	movs	r2, #0
 800045c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800045e:	4809      	ldr	r0, [pc, #36]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000460:	f001 fab8 	bl	80019d4 <HAL_DMA2D_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800046a:	f000 fd29 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800046e:	2101      	movs	r1, #1
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000472:	f001 fc23 	bl	8001cbc <HAL_DMA2D_ConfigLayer>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800047c:	f000 fd20 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	24000120 	.word	0x24000120
 8000488:	52001000 	.word	0x52001000

0800048c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_DMA2D_MspInit+0x48>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d116      	bne.n	80004cc <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <HAL_DMA2D_MspInit+0x4c>)
 80004a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <HAL_DMA2D_MspInit+0x4c>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_DMA2D_MspInit+0x4c>)
 80004b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2105      	movs	r1, #5
 80004c0:	205a      	movs	r0, #90	; 0x5a
 80004c2:	f001 f8f1 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80004c6:	205a      	movs	r0, #90	; 0x5a
 80004c8:	f001 f908 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	52001000 	.word	0x52001000
 80004d8:	58024400 	.word	0x58024400

080004dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_FMC_Init+0x9c>)
 80004f6:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_FMC_Init+0xa0>)
 80004f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_FMC_Init+0x9c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_FMC_Init+0x9c>)
 8000502:	2201      	movs	r2, #1
 8000504:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_FMC_Init+0x9c>)
 8000508:	2204      	movs	r2, #4
 800050a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_FMC_Init+0x9c>)
 800050e:	2210      	movs	r2, #16
 8000510:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_FMC_Init+0x9c>)
 8000514:	2240      	movs	r2, #64	; 0x40
 8000516:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_FMC_Init+0x9c>)
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_FMC_Init+0x9c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_FMC_Init+0x9c>)
 8000528:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800052c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_FMC_Init+0x9c>)
 8000530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_FMC_Init+0x9c>)
 8000538:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800053e:	2302      	movs	r3, #2
 8000540:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000542:	2307      	movs	r3, #7
 8000544:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000546:	2304      	movs	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800054a:	2307      	movs	r3, #7
 800054c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800054e:	2303      	movs	r3, #3
 8000550:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_FMC_Init+0x9c>)
 8000560:	f004 fe62 	bl	8005228 <HAL_SDRAM_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800056a:	f000 fca9 	bl	8000ec0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800056e:	bf00      	nop
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	24000188 	.word	0x24000188
 800057c:	52004140 	.word	0x52004140

08000580 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	b0b8      	sub	sp, #224	; 0xe0
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <HAL_FMC_MspInit+0x15c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	f040 8099 	bne.w	80006d2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80005a0:	4b4e      	ldr	r3, [pc, #312]	; (80006dc <HAL_FMC_MspInit+0x15c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	22c0      	movs	r2, #192	; 0xc0
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f01d fb1b 	bl	801dbea <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80005b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005b8:	f04f 0300 	mov.w	r3, #0
 80005bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fb0b 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80005d4:	f000 fc74 	bl	8000ec0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80005d8:	4b41      	ldr	r3, [pc, #260]	; (80006e0 <HAL_FMC_MspInit+0x160>)
 80005da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80005de:	4a40      	ldr	r2, [pc, #256]	; (80006e0 <HAL_FMC_MspInit+0x160>)
 80005e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <HAL_FMC_MspInit+0x160>)
 80005ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80005ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80005f6:	f248 1333 	movw	r3, #33075	; 0x8133
 80005fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000610:	230c      	movs	r3, #12
 8000612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800061a:	4619      	mov	r1, r3
 800061c:	4831      	ldr	r0, [pc, #196]	; (80006e4 <HAL_FMC_MspInit+0x164>)
 800061e:	f001 fbfb 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8000622:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063c:	230c      	movs	r3, #12
 800063e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000646:	4619      	mov	r1, r3
 8000648:	4827      	ldr	r0, [pc, #156]	; (80006e8 <HAL_FMC_MspInit+0x168>)
 800064a:	f001 fbe5 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 800064e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000668:	230c      	movs	r3, #12
 800066a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000672:	4619      	mov	r1, r3
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <HAL_FMC_MspInit+0x16c>)
 8000676:	f001 fbcf 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800067a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800067e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000694:	230c      	movs	r3, #12
 8000696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800069a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800069e:	4619      	mov	r1, r3
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <HAL_FMC_MspInit+0x170>)
 80006a2:	f001 fbb9 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80006a6:	23e0      	movs	r3, #224	; 0xe0
 80006a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006be:	230c      	movs	r3, #12
 80006c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006c8:	4619      	mov	r1, r3
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <HAL_FMC_MspInit+0x174>)
 80006cc:	f001 fba4 	bl	8001e18 <HAL_GPIO_Init>
 80006d0:	e000      	b.n	80006d4 <HAL_FMC_MspInit+0x154>
    return;
 80006d2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80006d4:	37e0      	adds	r7, #224	; 0xe0
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	240001bc 	.word	0x240001bc
 80006e0:	58024400 	.word	0x58024400
 80006e4:	58021800 	.word	0x58021800
 80006e8:	58020c00 	.word	0x58020c00
 80006ec:	58021000 	.word	0x58021000
 80006f0:	58021400 	.word	0x58021400
 80006f4:	58021c00 	.word	0x58021c00

080006f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000700:	f7ff ff3e 	bl	8000580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <MX_FREERTOS_Init+0x28>)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_FREERTOS_Init+0x2c>)
 8000726:	f005 fa81 	bl	8005c2c <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <MX_FREERTOS_Init+0x30>)
 800072e:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(StartGUI_Task, NULL, &GUI_Task_attributes);
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <MX_FREERTOS_Init+0x34>)
 8000732:	2100      	movs	r1, #0
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <MX_FREERTOS_Init+0x38>)
 8000736:	f005 fa79 	bl	8005c2c <osThreadNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <MX_FREERTOS_Init+0x3c>)
 800073e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	0801f2c8 	.word	0x0801f2c8
 8000748:	0800075d 	.word	0x0800075d
 800074c:	240001c0 	.word	0x240001c0
 8000750:	0801f2ec 	.word	0x0801f2ec
 8000754:	0800076d 	.word	0x0800076d
 8000758:	240001c4 	.word	0x240001c4

0800075c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f005 faf3 	bl	8005d50 <osDelay>
 800076a:	e7fb      	b.n	8000764 <StartDefaultTask+0x8>

0800076c <StartGUI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGUI_Task */
void StartGUI_Task(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGUI_Task */

	MX_TouchGFX_Process();
 8000774:	f008 fe13 	bl	800939e <MX_TouchGFX_Process>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f005 fae9 	bl	8005d50 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartGUI_Task+0xc>

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b80      	ldr	r3, [pc, #512]	; (8000998 <MX_GPIO_Init+0x218>)
 8000798:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079c:	4a7e      	ldr	r2, [pc, #504]	; (8000998 <MX_GPIO_Init+0x218>)
 800079e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a6:	4b7c      	ldr	r3, [pc, #496]	; (8000998 <MX_GPIO_Init+0x218>)
 80007a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007b4:	4b78      	ldr	r3, [pc, #480]	; (8000998 <MX_GPIO_Init+0x218>)
 80007b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ba:	4a77      	ldr	r2, [pc, #476]	; (8000998 <MX_GPIO_Init+0x218>)
 80007bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c4:	4b74      	ldr	r3, [pc, #464]	; (8000998 <MX_GPIO_Init+0x218>)
 80007c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b71      	ldr	r3, [pc, #452]	; (8000998 <MX_GPIO_Init+0x218>)
 80007d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d8:	4a6f      	ldr	r2, [pc, #444]	; (8000998 <MX_GPIO_Init+0x218>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e2:	4b6d      	ldr	r3, [pc, #436]	; (8000998 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f0:	4b69      	ldr	r3, [pc, #420]	; (8000998 <MX_GPIO_Init+0x218>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f6:	4a68      	ldr	r2, [pc, #416]	; (8000998 <MX_GPIO_Init+0x218>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000800:	4b65      	ldr	r3, [pc, #404]	; (8000998 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800080e:	4b62      	ldr	r3, [pc, #392]	; (8000998 <MX_GPIO_Init+0x218>)
 8000810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000814:	4a60      	ldr	r2, [pc, #384]	; (8000998 <MX_GPIO_Init+0x218>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <MX_GPIO_Init+0x218>)
 800082e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000832:	4a59      	ldr	r2, [pc, #356]	; (8000998 <MX_GPIO_Init+0x218>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b53      	ldr	r3, [pc, #332]	; (8000998 <MX_GPIO_Init+0x218>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	4a51      	ldr	r2, [pc, #324]	; (8000998 <MX_GPIO_Init+0x218>)
 8000852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000856:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085a:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <MX_GPIO_Init+0x218>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000868:	4b4b      	ldr	r3, [pc, #300]	; (8000998 <MX_GPIO_Init+0x218>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	4a4a      	ldr	r2, [pc, #296]	; (8000998 <MX_GPIO_Init+0x218>)
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000878:	4b47      	ldr	r3, [pc, #284]	; (8000998 <MX_GPIO_Init+0x218>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b44      	ldr	r3, [pc, #272]	; (8000998 <MX_GPIO_Init+0x218>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	4a42      	ldr	r2, [pc, #264]	; (8000998 <MX_GPIO_Init+0x218>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MX_GPIO_Init+0x218>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED3_Pin|USER_LED2_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f640 0104 	movw	r1, #2052	; 0x804
 80008aa:	483c      	ldr	r0, [pc, #240]	; (800099c <MX_GPIO_Init+0x21c>)
 80008ac:	f001 fc64 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80008b6:	483a      	ldr	r0, [pc, #232]	; (80009a0 <MX_GPIO_Init+0x220>)
 80008b8:	f001 fc5e 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4838      	ldr	r0, [pc, #224]	; (80009a4 <MX_GPIO_Init+0x224>)
 80008c4:	f001 fc58 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2106      	movs	r1, #6
 80008cc:	4836      	ldr	r0, [pc, #216]	; (80009a8 <MX_GPIO_Init+0x228>)
 80008ce:	f001 fc53 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED3_Pin|USER_LED2_Pin;
 80008d2:	f640 0304 	movw	r3, #2052	; 0x804
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	482c      	ldr	r0, [pc, #176]	; (800099c <MX_GPIO_Init+0x21c>)
 80008ec:	f001 fa94 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80008f0:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4825      	ldr	r0, [pc, #148]	; (80009a0 <MX_GPIO_Init+0x220>)
 800090a:	f001 fa85 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 800090e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	481f      	ldr	r0, [pc, #124]	; (80009a4 <MX_GPIO_Init+0x224>)
 8000928:	f001 fa76 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000936:	2301      	movs	r3, #1
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_GPIO_Init+0x220>)
 8000942:	f001 fa69 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000946:	2302      	movs	r3, #2
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_GPIO_Init+0x228>)
 800095e:	f001 fa5b 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000962:	2304      	movs	r3, #4
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096a:	2301      	movs	r3, #1
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0x228>)
 800097a:	f001 fa4d 	bl	8001e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2105      	movs	r1, #5
 8000982:	2008      	movs	r0, #8
 8000984:	f000 fe90 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000988:	2008      	movs	r0, #8
 800098a:	f000 fea7 	bl	80016dc <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58024400 	.word	0x58024400
 800099c:	58021800 	.word	0x58021800
 80009a0:	58021c00 	.word	0x58021c00
 80009a4:	58022000 	.word	0x58022000
 80009a8:	58020000 	.word	0x58020000

080009ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2234      	movs	r2, #52	; 0x34
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f01d f916 	bl	801dbea <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009c0:	4a3a      	ldr	r2, [pc, #232]	; (8000aac <MX_LTDC_Init+0x100>)
 80009c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009de:	2228      	movs	r2, #40	; 0x28
 80009e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009e4:	2209      	movs	r2, #9
 80009e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009ea:	222a      	movs	r2, #42	; 0x2a
 80009ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009f0:	220b      	movs	r2, #11
 80009f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009f6:	f240 220a 	movw	r2, #522	; 0x20a
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009fe:	f240 121b 	movw	r2, #283	; 0x11b
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a06:	f240 222a 	movw	r2, #554	; 0x22a
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a0e:	f240 121d 	movw	r2, #285	; 0x11d
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a2e:	f001 fbfb 	bl	8002228 <HAL_LTDC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 fa42 	bl	8000ec0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a44:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a4e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a54:	23ff      	movs	r3, #255	; 0xff
 8000a56:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a60:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a62:	2305      	movs	r3, #5
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a66:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000a6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000a72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000a78:	23ff      	movs	r3, #255	; 0xff
 8000a7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a92:	f001 fd51 	bl	8002538 <HAL_LTDC_ConfigLayer>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000a9c:	f000 fa10 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	240001c8 	.word	0x240001c8
 8000aac:	50001000 	.word	0x50001000

08000ab0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0bc      	sub	sp, #240	; 0xf0
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	22c0      	movs	r2, #192	; 0xc0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f01d f88a 	bl	801dbea <memset>
  if(ltdcHandle->Instance==LTDC)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a57      	ldr	r2, [pc, #348]	; (8000c38 <HAL_LTDC_MspInit+0x188>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	f040 80a6 	bne.w	8000c2e <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ae2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8000aee:	2318      	movs	r3, #24
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8000af2:	23c9      	movs	r3, #201	; 0xc9
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8000afe:	2315      	movs	r3, #21
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 8000b0a:	f241 5356 	movw	r3, #5462	; 0x1556
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 f865 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000b20:	f000 f9ce 	bl	8000ec0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b24:	4b45      	ldr	r3, [pc, #276]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b26:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000b2a:	4a44      	ldr	r2, [pc, #272]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b36:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8000b9c:	23ff      	movs	r3, #255	; 0xff
 8000b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb4:	230e      	movs	r3, #14
 8000bb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <HAL_LTDC_MspInit+0x190>)
 8000bc2:	f001 f929 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be0:	230e      	movs	r3, #14
 8000be2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000be6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bea:	4619      	mov	r1, r3
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <HAL_LTDC_MspInit+0x194>)
 8000bee:	f001 f913 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15;
 8000bf2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c0c:	230e      	movs	r3, #14
 8000c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c16:	4619      	mov	r1, r3
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <HAL_LTDC_MspInit+0x198>)
 8000c1a:	f001 f8fd 	bl	8001e18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2058      	movs	r0, #88	; 0x58
 8000c24:	f000 fd40 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000c28:	2058      	movs	r0, #88	; 0x58
 8000c2a:	f000 fd57 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	37f0      	adds	r7, #240	; 0xf0
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	50001000 	.word	0x50001000
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58022800 	.word	0x58022800
 8000c44:	58022400 	.word	0x58022400
 8000c48:	58022000 	.word	0x58022000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fbf2 	bl	8001438 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c54:	f000 f8f6 	bl	8000e44 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f820 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff fd90 	bl	8000780 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000c60:	f7ff fbda 	bl	8000418 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c64:	f7ff fc3a 	bl	80004dc <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 8000c68:	f000 f930 	bl	8000ecc <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 8000c6c:	f7ff fb90 	bl	8000390 <MX_CRC_Init>
  MX_LTDC_Init();
 8000c70:	f7ff fe9c 	bl	80009ac <MX_LTDC_Init>
  MX_TouchGFX_Init();
 8000c74:	f008 fb8b 	bl	800938e <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000c78:	f008 fb82 	bl	8009380 <MX_TouchGFX_PreOSInit>

  // ------------------------- Development board copied code start ----------------------------------

  // Note: When you use frame buffer by allocation (frame buffer will be located in internal memory) then in LTDC settings enter address 0.

  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000c7c:	4905      	ldr	r1, [pc, #20]	; (8000c94 <main+0x48>)
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <main+0x4c>)
 8000c80:	f000 f882 	bl	8000d88 <SDRAM_Initialization_Sequence>
  // ------------------------- Development board copied code end ------------------------------------

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c84:	f004 ff88 	bl	8005b98 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c88:	f7ff fd48 	bl	800071c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c8c:	f004 ffa8 	bl	8005be0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <main+0x44>
 8000c92:	bf00      	nop
 8000c94:	24000270 	.word	0x24000270
 8000c98:	24000188 	.word	0x24000188

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	224c      	movs	r2, #76	; 0x4c
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f01c ff9d 	bl	801dbea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f01c ff97 	bl	801dbea <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <SystemClock_Config+0xe4>)
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f001 ff48 	bl	8002b5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce8:	bf00      	nop
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf6:	d1f8      	bne.n	8000cea <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000d0e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d20:	2304      	movs	r3, #4
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff6d 	bl	8002c10 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d3c:	f000 f8c0 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	233f      	movs	r3, #63	; 0x3f
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2103      	movs	r1, #3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fb84 	bl	8003474 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000d72:	f000 f8a5 	bl	8000ec0 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3770      	adds	r7, #112	; 0x70
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58024800 	.word	0x58024800

08000d88 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */

// ------------------------- Development board copied code start ----------------------------------
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f004 fa73 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fb98 	bl	80014f0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2208      	movs	r2, #8
 8000dca:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ddc:	6839      	ldr	r1, [r7, #0]
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f004 fa5e 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2203      	movs	r2, #3
 8000de8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2208      	movs	r2, #8
 8000dee:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2208      	movs	r2, #8
 8000df4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f004 fa4c 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000e08:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e0c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2204      	movs	r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2208      	movs	r2, #8
 8000e18:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f004 fa37 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8000e32:	f240 6103 	movw	r1, #1539	; 0x603
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f004 fa67 	bl	800530a <HAL_SDRAM_ProgramRefreshRate>

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e56:	f000 fc4f 	bl	80016f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e66:	231f      	movs	r3, #31
 8000e68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e6a:	2387      	movs	r3, #135	; 0x87
 8000e6c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e72:	2300      	movs	r3, #0
 8000e74:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e86:	463b      	mov	r3, r7
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fc6d 	bl	8001768 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f000 fc4a 	bl	8001728 <HAL_MPU_Enable>

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eae:	f000 faff 	bl	80014b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40001000 	.word	0x40001000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END OCTOSPI1_Init 0 */

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <MX_OCTOSPI1_Init+0x7c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000eea:	221a      	movs	r2, #26
 8000eec:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f20:	2208      	movs	r2, #8
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f32:	f001 fd11 	bl	8002958 <HAL_OSPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000f3c:	f7ff ffc0 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	24000280 	.word	0x24000280
 8000f48:	52005000 	.word	0x52005000

08000f4c <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0b4      	sub	sp, #208	; 0xd0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	22c0      	movs	r2, #192	; 0xc0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f01c fe44 	bl	801dbea <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_OSPI_MspInit+0x88>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d12f      	bne.n	8000fcc <HAL_OSPI_MspInit+0x80>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fe2f 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_OSPI_MspInit+0x44>
    {
      Error_Handler();
 8000f8c:	f7ff ff98 	bl	8000ec0 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000f92:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fa2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fb0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000fcc:	bf00      	nop
 8000fce:	37d0      	adds	r7, #208	; 0xd0
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	52005000 	.word	0x52005000
 8000fd8:	58024400 	.word	0x58024400

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x38>)
 8000fe4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_MspInit+0x38>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_MspInit+0x38>)
 8000ff4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	210f      	movs	r1, #15
 8001004:	f06f 0001 	mvn.w	r0, #1
 8001008:	f000 fb4e 	bl	80016a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b090      	sub	sp, #64	; 0x40
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	d827      	bhi.n	8001076 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001026:	2200      	movs	r2, #0
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	2036      	movs	r0, #54	; 0x36
 800102c:	f000 fb3c 	bl	80016a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f000 fb53 	bl	80016dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001036:	4a29      	ldr	r2, [pc, #164]	; (80010dc <HAL_InitTick+0xc4>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_InitTick+0xc8>)
 800103e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001042:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <HAL_InitTick+0xc8>)
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_InitTick+0xc8>)
 800104e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105a:	f107 0210 	add.w	r2, r7, #16
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fd7b 	bl	8003b60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_InitTick+0x6a>
 8001074:	e001      	b.n	800107a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e02b      	b.n	80010d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800107a:	f002 fd5b 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800107e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001080:	e004      	b.n	800108c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001082:	f002 fd57 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 8001086:	4603      	mov	r3, r0
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_InitTick+0xcc>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	3b01      	subs	r3, #1
 8001098:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_InitTick+0xd0>)
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <HAL_InitTick+0xd4>)
 800109e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_InitTick+0xd0>)
 80010a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_InitTick+0xd0>)
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_InitTick+0xd0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_InitTick+0xd0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_InitTick+0xd0>)
 80010bc:	f004 f94d 	bl	800535a <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d104      	bne.n	80010d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <HAL_InitTick+0xd0>)
 80010c8:	f004 f9a8 	bl	800541c <HAL_TIM_Base_Start_IT>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e000      	b.n	80010d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3740      	adds	r7, #64	; 0x40
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	58024400 	.word	0x58024400
 80010e4:	431bde83 	.word	0x431bde83
 80010e8:	240002dc 	.word	0x240002dc
 80010ec:	40001000 	.word	0x40001000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8001120:	2004      	movs	r0, #4
 8001122:	f001 f85c 	bl	80021de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM6_DAC_IRQHandler+0x10>)
 8001132:	f004 f9eb 	bl	800550c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	240002dc 	.word	0x240002dc

08001140 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <LTDC_IRQHandler+0x10>)
 8001146:	f001 f93f 	bl	80023c8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	240001c8 	.word	0x240001c8

08001154 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA2D_IRQHandler+0x10>)
 800115a:	f000 fc9f 	bl	8001a9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	24000120 	.word	0x24000120

08001168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return 1;
 800116c:	2301      	movs	r3, #1
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_kill>:

int _kill(int pid, int sig)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001182:	f01c fe2b 	bl	801dddc <__errno>
 8001186:	4603      	mov	r3, r0
 8001188:	2216      	movs	r2, #22
 800118a:	601a      	str	r2, [r3, #0]
  return -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_exit>:

void _exit (int status)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffe7 	bl	8001178 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011aa:	e7fe      	b.n	80011aa <_exit+0x12>

080011ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e00a      	b.n	80011d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011be:	f3af 8000 	nop.w
 80011c2:	4601      	mov	r1, r0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	b2ca      	uxtb	r2, r1
 80011cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf0      	blt.n	80011be <_read+0x12>
  }

  return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e009      	b.n	800120c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf1      	blt.n	80011f8 <_write+0x12>
  }
  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_close>:

int _close(int file)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001246:	605a      	str	r2, [r3, #4]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_isatty>:

int _isatty(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f01c fd90 	bl	801dddc <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	24100000 	.word	0x24100000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	24000328 	.word	0x24000328
 80012f0:	2401b688 	.word	0x2401b688

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <SystemInit+0xd0>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <SystemInit+0xd0>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <SystemInit+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b02      	cmp	r3, #2
 8001312:	d807      	bhi.n	8001324 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <SystemInit+0xd4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 030f 	bic.w	r3, r3, #15
 800131c:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <SystemInit+0xd4>)
 800131e:	f043 0303 	orr.w	r3, r3, #3
 8001322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <SystemInit+0xd8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <SystemInit+0xd8>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <SystemInit+0xd8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <SystemInit+0xd8>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4924      	ldr	r1, [pc, #144]	; (80013cc <SystemInit+0xd8>)
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <SystemInit+0xdc>)
 800133e:	4013      	ands	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <SystemInit+0xd4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <SystemInit+0xd4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <SystemInit+0xd4>)
 8001358:	f043 0303 	orr.w	r3, r3, #3
 800135c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <SystemInit+0xd8>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <SystemInit+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <SystemInit+0xd8>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <SystemInit+0xd8>)
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <SystemInit+0xe0>)
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <SystemInit+0xd8>)
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <SystemInit+0xe4>)
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <SystemInit+0xd8>)
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <SystemInit+0xe8>)
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <SystemInit+0xd8>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <SystemInit+0xd8>)
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <SystemInit+0xe8>)
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <SystemInit+0xd8>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <SystemInit+0xd8>)
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <SystemInit+0xe8>)
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SystemInit+0xd8>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SystemInit+0xd8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <SystemInit+0xd8>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <SystemInit+0xd8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <SystemInit+0xec>)
 80013b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	52002000 	.word	0x52002000
 80013cc:	58024400 	.word	0x58024400
 80013d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d4:	02020200 	.word	0x02020200
 80013d8:	01ff0000 	.word	0x01ff0000
 80013dc:	01010280 	.word	0x01010280
 80013e0:	52004000 	.word	0x52004000

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e8:	f7ff ff84 	bl	80012f4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	; (8001424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	; (8001430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001412:	f01c fce9 	bl	801dde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fc19 	bl	8000c4c <main>
  bx  lr
 800141a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001420:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001424:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 8001428:	08093048 	.word	0x08093048
  ldr r2, =_sbss
 800142c:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001430:	2401b688 	.word	0x2401b688

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143e:	2003      	movs	r0, #3
 8001440:	f000 f927 	bl	8001692 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001444:	f002 f9cc 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_Init+0x68>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	4913      	ldr	r1, [pc, #76]	; (80014a4 <HAL_Init+0x6c>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_Init+0x68>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_Init+0x6c>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_Init+0x70>)
 800147a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_Init+0x74>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fdc8 	bl	8001018 <HAL_InitTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e002      	b.n	8001498 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001492:	f7ff fda3 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	58024400 	.word	0x58024400
 80014a4:	0801f310 	.word	0x0801f310
 80014a8:	24000008 	.word	0x24000008
 80014ac:	24000004 	.word	0x24000004

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	24000010 	.word	0x24000010
 80014d4:	2400032c 	.word	0x2400032c

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2400032c 	.word	0x2400032c

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24000010 	.word	0x24000010

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	4313      	orrs	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	05fa0000 	.word	0x05fa0000

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff4c 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b6:	f7ff ff63 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff ffb3 	bl	800162c <NVIC_EncodePriority>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff82 	bl	80015d8 <__NVIC_SetPriority>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff56 	bl	800159c <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016fc:	f3bf 8f5f 	dmb	sy
}
 8001700:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_MPU_Disable+0x28>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_MPU_Disable+0x28>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_MPU_Disable+0x2c>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ed90 	.word	0xe000ed90

08001728 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_MPU_Enable+0x38>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_MPU_Enable+0x3c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_MPU_Enable+0x3c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
}
 800174a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174c:	f3bf 8f6f 	isb	sy
}
 8001750:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed90 	.word	0xe000ed90
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 8001776:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d029      	beq.n	80017d4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001780:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
 800178c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7adb      	ldrb	r3, [r3, #11]
 8001792:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001794:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a9b      	ldrb	r3, [r3, #10]
 800179a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800179c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b5b      	ldrb	r3, [r3, #13]
 80017a2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7b9b      	ldrb	r3, [r3, #14]
 80017aa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7bdb      	ldrb	r3, [r3, #15]
 80017b2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7a5b      	ldrb	r3, [r3, #9]
 80017ba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7a1b      	ldrb	r3, [r3, #8]
 80017c2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017d2:	e005      	b.n	80017e0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed90 	.word	0xe000ed90

080017f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e054      	b.n	80018ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7f5b      	ldrb	r3, [r3, #29]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fdde 	bl	80003d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	791b      	ldrb	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <HAL_CRC_Init+0xc4>)
 800182c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0218 	bic.w	r2, r2, #24
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e00c      	b.n	800185a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f834 	bl	80018b8 <HAL_CRCEx_Polynomial_Set>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e028      	b.n	80018ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	795b      	ldrb	r3, [r3, #5]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	e004      	b.n	8001878 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6912      	ldr	r2, [r2, #16]
 8001876:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	04c11db7 	.word	0x04c11db7

080018b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018c8:	231f      	movs	r3, #31
 80018ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
 80018da:	e063      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018dc:	bf00      	nop
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	613a      	str	r2, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <HAL_CRCEx_Polynomial_Set+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b18      	cmp	r3, #24
 8001900:	d846      	bhi.n	8001990 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001997 	.word	0x08001997
 800190c:	08001991 	.word	0x08001991
 8001910:	08001991 	.word	0x08001991
 8001914:	08001991 	.word	0x08001991
 8001918:	08001991 	.word	0x08001991
 800191c:	08001991 	.word	0x08001991
 8001920:	08001991 	.word	0x08001991
 8001924:	08001991 	.word	0x08001991
 8001928:	08001985 	.word	0x08001985
 800192c:	08001991 	.word	0x08001991
 8001930:	08001991 	.word	0x08001991
 8001934:	08001991 	.word	0x08001991
 8001938:	08001991 	.word	0x08001991
 800193c:	08001991 	.word	0x08001991
 8001940:	08001991 	.word	0x08001991
 8001944:	08001991 	.word	0x08001991
 8001948:	08001979 	.word	0x08001979
 800194c:	08001991 	.word	0x08001991
 8001950:	08001991 	.word	0x08001991
 8001954:	08001991 	.word	0x08001991
 8001958:	08001991 	.word	0x08001991
 800195c:	08001991 	.word	0x08001991
 8001960:	08001991 	.word	0x08001991
 8001964:	08001991 	.word	0x08001991
 8001968:	0800196d 	.word	0x0800196d
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d913      	bls.n	800199a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001976:	e010      	b.n	800199a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b07      	cmp	r3, #7
 800197c:	d90f      	bls.n	800199e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001982:	e00c      	b.n	800199e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	d90b      	bls.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800198e:	e008      	b.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	75fb      	strb	r3, [r7, #23]
        break;
 8001994:	e006      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001996:	bf00      	nop
 8001998:	e004      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800199a:	bf00      	nop
 800199c:	e002      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80019a2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 0118 	bic.w	r1, r3, #24
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e04f      	b.n	8001a86 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fd46 	bl	800048c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_DMA2D_Init+0xbc>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6851      	ldr	r1, [r2, #4]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	69d2      	ldr	r2, [r2, #28]
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_DMA2D_Init+0xc0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6891      	ldr	r1, [r2, #8]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6992      	ldr	r2, [r2, #24]
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_DMA2D_Init+0xc4>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68d1      	ldr	r1, [r2, #12]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	430b      	orrs	r3, r1
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	051a      	lsls	r2, r3, #20
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	fff8ffbf 	.word	0xfff8ffbf
 8001a94:	fffffef8 	.word	0xfffffef8
 8001a98:	ffff0000 	.word	0xffff0000

08001a9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d026      	beq.n	8001b0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d021      	beq.n	8001b0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d026      	beq.n	8001b64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d021      	beq.n	8001b64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2204      	movs	r2, #4
 8001b48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d026      	beq.n	8001bbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d021      	beq.n	8001bbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2204      	movs	r2, #4
 8001be6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f853 	bl	8001c94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d024      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01f      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01f      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f80e 	bl	8001ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA2D_ConfigLayer+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e092      	b.n	8001e06 <HAL_DMA2D_ConfigLayer+0x14a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3328      	adds	r3, #40	; 0x28
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001d14:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001d20:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_DMA2D_ConfigLayer+0x158>)
 8001d22:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA2D_ConfigLayer+0x78>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e005      	b.n	8001d50 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d120      	bne.n	8001d98 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	ea02 0103 	and.w	r1, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b0a      	cmp	r3, #10
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA2D_ConfigLayer+0xcc>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d135      	bne.n	8001df4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
 8001d96:	e02d      	b.n	8001df4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d109      	bne.n	8001db4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	049b      	lsls	r3, r3, #18
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001db2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	ea02 0103 	and.w	r1, r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA2D_ConfigLayer+0x12a>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d106      	bne.n	8001df4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001df2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	ff33000f 	.word	0xff33000f

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_GPIO_Init+0x234>)
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e2a:	e194      	b.n	8002156 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8186 	beq.w	8002150 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x44>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d017      	beq.n	8001efa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	69b9      	ldr	r1, [r7, #24]
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80e0 	beq.w	8002150 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x238>)
 8001f92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <HAL_GPIO_Init+0x238>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_GPIO_Init+0x238>)
 8001fa2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_GPIO_Init+0x23c>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_GPIO_Init+0x240>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d052      	beq.n	8002080 <HAL_GPIO_Init+0x268>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <HAL_GPIO_Init+0x244>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d031      	beq.n	8002046 <HAL_GPIO_Init+0x22e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_GPIO_Init+0x248>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <HAL_GPIO_Init+0x22a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_GPIO_Init+0x24c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x226>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_GPIO_Init+0x250>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x222>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_GPIO_Init+0x254>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x21e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_GPIO_Init+0x258>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x21a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_GPIO_Init+0x25c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x216>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_GPIO_Init+0x260>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x212>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_GPIO_Init+0x264>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x20e>
 8002022:	2309      	movs	r3, #9
 8002024:	e02d      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002026:	230a      	movs	r3, #10
 8002028:	e02b      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800202a:	2308      	movs	r3, #8
 800202c:	e029      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800202e:	2307      	movs	r3, #7
 8002030:	e027      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002032:	2306      	movs	r3, #6
 8002034:	e025      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002036:	2305      	movs	r3, #5
 8002038:	e023      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800203a:	2304      	movs	r3, #4
 800203c:	e021      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800203e:	2303      	movs	r3, #3
 8002040:	e01f      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002042:	2302      	movs	r3, #2
 8002044:	e01d      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002046:	2301      	movs	r3, #1
 8002048:	e01b      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800204a:	bf00      	nop
 800204c:	58000080 	.word	0x58000080
 8002050:	58024400 	.word	0x58024400
 8002054:	58000400 	.word	0x58000400
 8002058:	58020000 	.word	0x58020000
 800205c:	58020400 	.word	0x58020400
 8002060:	58020800 	.word	0x58020800
 8002064:	58020c00 	.word	0x58020c00
 8002068:	58021000 	.word	0x58021000
 800206c:	58021400 	.word	0x58021400
 8002070:	58021800 	.word	0x58021800
 8002074:	58021c00 	.word	0x58021c00
 8002078:	58022000 	.word	0x58022000
 800207c:	58022400 	.word	0x58022400
 8002080:	2300      	movs	r3, #0
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002092:	4938      	ldr	r1, [pc, #224]	; (8002174 <HAL_GPIO_Init+0x35c>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3301      	adds	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	f47f ae63 	bne.w	8001e2c <HAL_GPIO_Init+0x14>
  }
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	58000400 	.word	0x58000400

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021bc:	887a      	ldrh	r2, [r7, #2]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f804 	bl	8002212 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0bf      	b.n	80023ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc2e 	bl	8000ab0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800226a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6999      	ldr	r1, [r3, #24]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002280:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 800229c:	400b      	ands	r3, r1
 800229e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68d9      	ldr	r1, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 80022f8:	400b      	ands	r3, r1
 80022fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6919      	ldr	r1, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6959      	ldr	r1, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 8002326:	400b      	ands	r3, r1
 8002328:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6959      	ldr	r1, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0206 	orr.w	r2, r2, #6
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	f000f800 	.word	0xf000f800

080023c8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d023      	beq.n	8002432 <HAL_LTDC_IRQHandler+0x6a>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01e      	beq.n	8002432 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0204 	bic.w	r2, r2, #4
 8002402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2204      	movs	r2, #4
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f86f 	bl	8002510 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_LTDC_IRQHandler+0xbc>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01e      	beq.n	8002484 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0202 	bic.w	r2, r2, #2
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2202      	movs	r2, #2
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002464:	f043 0202 	orr.w	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f846 	bl	8002510 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01b      	beq.n	80024c6 <HAL_LTDC_IRQHandler+0xfe>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2201      	movs	r2, #1
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f00b fc73 	bl	800ddac <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_LTDC_IRQHandler+0x140>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2208      	movs	r2, #8
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f80e 	bl	8002524 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_LTDC_ConfigLayer+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e02c      	b.n	80025ac <HAL_LTDC_ConfigLayer+0x74>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2134      	movs	r1, #52	; 0x34
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
 8002578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	682b      	ldr	r3, [r5, #0]
 8002586:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f849 	bl	8002624 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bdb0      	pop	{r4, r5, r7, pc}

080025b4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_LTDC_ProgramLineEvent+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e023      	b.n	8002614 <HAL_LTDC_ProgramLineEvent+0x60>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	50001000 	.word	0x50001000

08002624 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	4413      	add	r3, r2
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	01db      	lsls	r3, r3, #7
 8002650:	4413      	add	r3, r2
 8002652:	3384      	adds	r3, #132	; 0x84
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4611      	mov	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	01d2      	lsls	r2, r2, #7
 8002660:	440a      	add	r2, r1
 8002662:	3284      	adds	r2, #132	; 0x84
 8002664:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002668:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800267a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800267c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	440b      	add	r3, r1
 800268a:	3384      	adds	r3, #132	; 0x84
 800268c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002692:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a2:	4413      	add	r3, r2
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	4413      	add	r3, r2
 80026b4:	3384      	adds	r3, #132	; 0x84
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4611      	mov	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	01d2      	lsls	r2, r2, #7
 80026c2:	440a      	add	r2, r1
 80026c4:	3284      	adds	r2, #132	; 0x84
 80026c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80026ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026da:	4413      	add	r3, r2
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	440b      	add	r3, r1
 80026ea:	3384      	adds	r3, #132	; 0x84
 80026ec:	4619      	mov	r1, r3
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	01db      	lsls	r3, r3, #7
 80026fe:	4413      	add	r3, r2
 8002700:	3384      	adds	r3, #132	; 0x84
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4611      	mov	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	01d2      	lsls	r2, r2, #7
 800270e:	440a      	add	r2, r1
 8002710:	3284      	adds	r2, #132	; 0x84
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	01db      	lsls	r3, r3, #7
 8002722:	4413      	add	r3, r2
 8002724:	3384      	adds	r3, #132	; 0x84
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	01db      	lsls	r3, r3, #7
 8002754:	4413      	add	r3, r2
 8002756:	3384      	adds	r3, #132	; 0x84
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	01db      	lsls	r3, r3, #7
 8002764:	4413      	add	r3, r2
 8002766:	3384      	adds	r3, #132	; 0x84
 8002768:	461a      	mov	r2, r3
 800276a:	2300      	movs	r3, #0
 800276c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002774:	461a      	mov	r2, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	431a      	orrs	r2, r3
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	440b      	add	r3, r1
 800278a:	3384      	adds	r3, #132	; 0x84
 800278c:	4619      	mov	r1, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	01db      	lsls	r3, r3, #7
 800279e:	4413      	add	r3, r2
 80027a0:	3384      	adds	r3, #132	; 0x84
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	01d2      	lsls	r2, r2, #7
 80027ae:	440a      	add	r2, r1
 80027b0:	3284      	adds	r2, #132	; 0x84
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	01db      	lsls	r3, r3, #7
 80027c2:	4413      	add	r3, r2
 80027c4:	3384      	adds	r3, #132	; 0x84
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	4413      	add	r3, r2
 80027da:	3384      	adds	r3, #132	; 0x84
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	440b      	add	r3, r1
 80027ea:	3384      	adds	r3, #132	; 0x84
 80027ec:	4619      	mov	r1, r3
 80027ee:	4b58      	ldr	r3, [pc, #352]	; (8002950 <LTDC_SetConfig+0x32c>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	6809      	ldr	r1, [r1, #0]
 8002800:	4608      	mov	r0, r1
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	01c9      	lsls	r1, r1, #7
 8002806:	4401      	add	r1, r0
 8002808:	3184      	adds	r1, #132	; 0x84
 800280a:	4313      	orrs	r3, r2
 800280c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	4413      	add	r3, r2
 800281a:	3384      	adds	r3, #132	; 0x84
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	01db      	lsls	r3, r3, #7
 8002828:	4413      	add	r3, r2
 800282a:	3384      	adds	r3, #132	; 0x84
 800282c:	461a      	mov	r2, r3
 800282e:	2300      	movs	r3, #0
 8002830:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	4413      	add	r3, r2
 800283e:	3384      	adds	r3, #132	; 0x84
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002850:	2304      	movs	r3, #4
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e01b      	b.n	800288e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800285e:	2303      	movs	r3, #3
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e014      	b.n	800288e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d00b      	beq.n	8002884 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002870:	2b02      	cmp	r3, #2
 8002872:	d007      	beq.n	8002884 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002878:	2b03      	cmp	r3, #3
 800287a:	d003      	beq.n	8002884 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002880:	2b07      	cmp	r3, #7
 8002882:	d102      	bne.n	800288a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002884:	2302      	movs	r3, #2
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e001      	b.n	800288e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	01db      	lsls	r3, r3, #7
 8002898:	4413      	add	r3, r2
 800289a:	3384      	adds	r3, #132	; 0x84
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	4611      	mov	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	01d2      	lsls	r2, r2, #7
 80028a8:	440a      	add	r2, r1
 80028aa:	3284      	adds	r2, #132	; 0x84
 80028ac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80028b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1acb      	subs	r3, r1, r3
 80028c8:	69f9      	ldr	r1, [r7, #28]
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	3307      	adds	r3, #7
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	6809      	ldr	r1, [r1, #0]
 80028d4:	4608      	mov	r0, r1
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	01c9      	lsls	r1, r1, #7
 80028da:	4401      	add	r1, r0
 80028dc:	3184      	adds	r1, #132	; 0x84
 80028de:	4313      	orrs	r3, r2
 80028e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	4413      	add	r3, r2
 80028ee:	3384      	adds	r3, #132	; 0x84
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	01db      	lsls	r3, r3, #7
 80028fc:	440b      	add	r3, r1
 80028fe:	3384      	adds	r3, #132	; 0x84
 8002900:	4619      	mov	r1, r3
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <LTDC_SetConfig+0x330>)
 8002904:	4013      	ands	r3, r2
 8002906:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	01db      	lsls	r3, r3, #7
 8002912:	4413      	add	r3, r2
 8002914:	3384      	adds	r3, #132	; 0x84
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	01db      	lsls	r3, r3, #7
 8002928:	4413      	add	r3, r2
 800292a:	3384      	adds	r3, #132	; 0x84
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4611      	mov	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	01d2      	lsls	r2, r2, #7
 8002938:	440a      	add	r2, r1
 800293a:	3284      	adds	r2, #132	; 0x84
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	fffff8f8 	.word	0xfffff8f8
 8002954:	fffff800 	.word	0xfffff800

08002958 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7fe fdb8 	bl	80014d8 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e0a5      	b.n	8002ac2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 809e 	bne.w	8002ac2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fae0 	bl	8000f4c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800298c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f89d 	bl	8002ad0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_OSPI_Init+0x174>)
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68d1      	ldr	r1, [r2, #12]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6912      	ldr	r2, [r2, #16]
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0412      	lsls	r2, r2, #16
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6952      	ldr	r2, [r2, #20]
 80029b2:	3a01      	subs	r2, #1
 80029b4:	0212      	lsls	r2, r2, #8
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	69d2      	ldr	r2, [r2, #28]
 80029c2:	4311      	orrs	r1, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2120      	movs	r1, #32
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f862 	bl	8002aee <OSPI_WaitFlagStateUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d146      	bne.n	8002ac2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a6a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0202 	orr.w	r2, r2, #2
 8002aa8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab2:	d103      	bne.n	8002abc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8002aba:	e002      	b.n	8002ac2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	f8e0f8f4 	.word	0xf8e0f8f4

08002ad0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002afe:	e01a      	b.n	8002b36 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d016      	beq.n	8002b36 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe fce6 	bl	80014d8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d1d6      	bne.n	8002b00 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d00a      	beq.n	8002b86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e040      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e03e      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b8e:	491f      	ldr	r1, [pc, #124]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b96:	f7fe fc9f 	bl	80014d8 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b9c:	e009      	b.n	8002bb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b9e:	f7fe fc9b 	bl	80014d8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bac:	d901      	bls.n	8002bb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e028      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b1e      	cmp	r3, #30
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PWREx_ConfigSupply+0x7c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8002bca:	d005      	beq.n	8002bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b1d      	cmp	r3, #29
 8002bd0:	d002      	beq.n	8002bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8002bd6:	d114      	bne.n	8002c02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bd8:	f7fe fc7e 	bl	80014d8 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bde:	e009      	b.n	8002bf4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002be0:	f7fe fc7a 	bl	80014d8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bee:	d901      	bls.n	8002bf4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d1ee      	bne.n	8002be0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	58024800 	.word	0x58024800

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f000 bc1f 	b.w	8003462 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80b3 	beq.w	8002d98 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c32:	4b95      	ldr	r3, [pc, #596]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d007      	beq.n	8002c58 <HAL_RCC_OscConfig+0x48>
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	2b18      	cmp	r3, #24
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x64>
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8098 	beq.w	8002d96 <HAL_RCC_OscConfig+0x186>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8093 	bne.w	8002d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e3f6      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x7c>
 8002c7e:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a81      	ldr	r2, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e058      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d112      	bne.n	8002cba <HAL_RCC_OscConfig+0xaa>
 8002c94:	4b7c      	ldr	r3, [pc, #496]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7b      	ldr	r2, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002ca6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a75      	ldr	r2, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e041      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0xda>
 8002cc4:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6f      	ldr	r2, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6c      	ldr	r2, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e029      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x10a>
 8002cf4:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a60      	ldr	r2, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e011      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5a      	ldr	r2, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a57      	ldr	r2, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fbc7 	bl	80014d8 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fbc3 	bl	80014d8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e380      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d60:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x13e>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fbb3 	bl	80014d8 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d76:	f7fe fbaf 	bl	80014d8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e36c      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x166>
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 808c 	beq.w	8002ebe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1bc>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2b18      	cmp	r3, #24
 8002dc0:	d137      	bne.n	8002e32 <HAL_RCC_OscConfig+0x222>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d132      	bne.n	8002e32 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1d4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e33e      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 0219 	bic.w	r2, r3, #25
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fb6f 	bl	80014d8 <HAL_GetTick>
 8002dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fb6b 	bl	80014d8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e328      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4917      	ldr	r1, [pc, #92]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	e045      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0219 	bic.w	r2, r3, #25
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4910      	ldr	r1, [pc, #64]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fb44 	bl	80014d8 <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7fe fb40 	bl	80014d8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e2fd      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	4901      	ldr	r1, [pc, #4]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
 8002e86:	e01a      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ae>
 8002e88:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8c:	4b97      	ldr	r3, [pc, #604]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a96      	ldr	r2, [pc, #600]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fb1e 	bl	80014d8 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fb1a 	bl	80014d8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e2d7      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb2:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06a      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d007      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2e0>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	d11b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x30e>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d116      	bne.n	8002f1e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2f8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e2ac      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4975      	ldr	r1, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f1c:	e040      	b.n	8002fa0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d023      	beq.n	8002f6e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f26:	4b71      	ldr	r3, [pc, #452]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a70      	ldr	r2, [pc, #448]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fad1 	bl	80014d8 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f3a:	f7fe facd 	bl	80014d8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e28a      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f4c:	4b67      	ldr	r3, [pc, #412]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	4961      	ldr	r1, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60cb      	str	r3, [r1, #12]
 8002f6c:	e018      	b.n	8002fa0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5e      	ldr	r2, [pc, #376]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe faad 	bl	80014d8 <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f82:	f7fe faa9 	bl	80014d8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e266      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f94:	4b55      	ldr	r3, [pc, #340]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d036      	beq.n	800301a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d019      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fa8a 	bl	80014d8 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fa86 	bl	80014d8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e243      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3b8>
 8002fe6:	e018      	b.n	800301a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fa70 	bl	80014d8 <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7fe fa6c 	bl	80014d8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e229      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d036      	beq.n	8003094 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d019      	beq.n	8003062 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2e      	ldr	r2, [pc, #184]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003038:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800303a:	f7fe fa4d 	bl	80014d8 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003042:	f7fe fa49 	bl	80014d8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e206      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x432>
 8003060:	e018      	b.n	8003094 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800306c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800306e:	f7fe fa33 	bl	80014d8 <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003076:	f7fe fa2f 	bl	80014d8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1ec      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80af 	beq.w	8003200 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_RCC_OscConfig+0x4e0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <HAL_RCC_OscConfig+0x4e0>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ae:	f7fe fa13 	bl	80014d8 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b6:	f7fe fa0f 	bl	80014d8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	; 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1cc      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x4e0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4e4>
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a02      	ldr	r2, [pc, #8]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e05b      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	58024800 	.word	0x58024800
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d112      	bne.n	8003122 <HAL_RCC_OscConfig+0x512>
 80030fc:	4b9d      	ldr	r3, [pc, #628]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a9c      	ldr	r2, [pc, #624]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	4b9a      	ldr	r3, [pc, #616]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a99      	ldr	r2, [pc, #612]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	4b97      	ldr	r3, [pc, #604]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a96      	ldr	r2, [pc, #600]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e03f      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x540>
 800312a:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a91      	ldr	r2, [pc, #580]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a8e      	ldr	r2, [pc, #568]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800313c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	4b8c      	ldr	r3, [pc, #560]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a8b      	ldr	r2, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e028      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b85      	cmp	r3, #133	; 0x85
 8003156:	d112      	bne.n	800317e <HAL_RCC_OscConfig+0x56e>
 8003158:	4b86      	ldr	r3, [pc, #536]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a85      	ldr	r2, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b83      	ldr	r3, [pc, #524]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a82      	ldr	r2, [pc, #520]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a7f      	ldr	r2, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e011      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a7c      	ldr	r2, [pc, #496]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b7a      	ldr	r3, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a79      	ldr	r2, [pc, #484]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	4b77      	ldr	r3, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a76      	ldr	r2, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800319c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d015      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe f995 	bl	80014d8 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe f991 	bl	80014d8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e14c      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ee      	beq.n	80031b2 <HAL_RCC_OscConfig+0x5a2>
 80031d4:	e014      	b.n	8003200 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe f97f 	bl	80014d8 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f97b 	bl	80014d8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e136      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031f4:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ee      	bne.n	80031de <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 812b 	beq.w	8003460 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800320a:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003212:	2b18      	cmp	r3, #24
 8003214:	f000 80bb 	beq.w	800338e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 8095 	bne.w	800334c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a53      	ldr	r2, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe f953 	bl	80014d8 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe f94f 	bl	80014d8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e10c      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003248:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003258:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x768>)
 800325a:	4013      	ands	r3, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	430a      	orrs	r2, r1
 8003268:	4942      	ldr	r1, [pc, #264]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800326a:	4313      	orrs	r3, r2
 800326c:	628b      	str	r3, [r1, #40]	; 0x28
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	3b01      	subs	r3, #1
 8003274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	3b01      	subs	r3, #1
 800327e:	025b      	lsls	r3, r3, #9
 8003280:	b29b      	uxth	r3, r3
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	3b01      	subs	r3, #1
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800329e:	4935      	ldr	r1, [pc, #212]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b4:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_OscConfig+0x76c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032bc:	00d2      	lsls	r2, r2, #3
 80032be:	492d      	ldr	r1, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f023 020c 	bic.w	r2, r3, #12
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4928      	ldr	r1, [pc, #160]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f023 0202 	bic.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	4924      	ldr	r1, [pc, #144]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003300:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f8d8 	bl	80014d8 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe f8d4 	bl	80014d8 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e091      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x71c>
 800334a:	e089      	b.n	8003460 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe f8be 	bl	80014d8 <HAL_GetTick>
 800335c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe f8ba 	bl	80014d8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e077      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400
 8003378:	fffffc0c 	.word	0xfffffc0c
 800337c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e9      	bne.n	8003360 <HAL_RCC_OscConfig+0x750>
 800338c:	e068      	b.n	8003460 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d031      	beq.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d12a      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d122      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d11a      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	0a5b      	lsrs	r3, r3, #9
 80033d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d111      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d108      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	0e1b      	lsrs	r3, r3, #24
 80033f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e02b      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800340a:	4b18      	ldr	r3, [pc, #96]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	08db      	lsrs	r3, r3, #3
 8003410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003414:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d01f      	beq.n	8003460 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800342c:	f7fe f854 	bl	80014d8 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003432:	bf00      	nop
 8003434:	f7fe f850 	bl	80014d8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	4293      	cmp	r3, r2
 800343e:	d0f9      	beq.n	8003434 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x860>)
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	4907      	ldr	r1, [pc, #28]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	ffff0007 	.word	0xffff0007

08003474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e19c      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b8a      	ldr	r3, [pc, #552]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b87      	ldr	r3, [pc, #540]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 020f 	bic.w	r2, r3, #15
 800349e:	4985      	ldr	r1, [pc, #532]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b83      	ldr	r3, [pc, #524]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e184      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d908      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034d4:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4975      	ldr	r1, [pc, #468]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d908      	bls.n	8003514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003502:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	496a      	ldr	r1, [pc, #424]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	4b64      	ldr	r3, [pc, #400]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800352c:	429a      	cmp	r2, r3
 800352e:	d908      	bls.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	495e      	ldr	r1, [pc, #376]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800353e:	4313      	orrs	r3, r2
 8003540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355a:	429a      	cmp	r2, r3
 800355c:	d908      	bls.n	8003570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800355e:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4953      	ldr	r1, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	429a      	cmp	r2, r3
 800358a:	d908      	bls.n	800359e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f023 020f 	bic.w	r2, r3, #15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4947      	ldr	r1, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800359a:	4313      	orrs	r3, r2
 800359c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d055      	beq.n	8003656 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4940      	ldr	r1, [pc, #256]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c4:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0f6      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0ea      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035f4:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0de      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003604:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0d6      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4925      	ldr	r1, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003622:	4313      	orrs	r3, r2
 8003624:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd ff57 	bl	80014d8 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	e00a      	b.n	8003644 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fd ff53 	bl	80014d8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0be      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	429a      	cmp	r2, r3
 8003654:	d1eb      	bne.n	800362e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	429a      	cmp	r2, r3
 8003670:	d208      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003680:	4313      	orrs	r3, r2
 8003682:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d214      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 020f 	bic.w	r2, r3, #15
 800369a:	4906      	ldr	r1, [pc, #24]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e086      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
 80036b4:	52002000 	.word	0x52002000
 80036b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d208      	bcs.n	80036ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036d8:	4b3c      	ldr	r3, [pc, #240]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4939      	ldr	r1, [pc, #228]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003702:	429a      	cmp	r2, r3
 8003704:	d208      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	492e      	ldr	r1, [pc, #184]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003730:	429a      	cmp	r2, r3
 8003732:	d208      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4922      	ldr	r1, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003742:	4313      	orrs	r3, r2
 8003744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375e:	429a      	cmp	r2, r3
 8003760:	d208      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4917      	ldr	r1, [pc, #92]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003774:	f000 f834 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4912      	ldr	r1, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x35c>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_RCC_ClockConfig+0x35c>)
 800379c:	5cd3      	ldrb	r3, [r2, r3]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x360>)
 80037aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x364>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x368>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fc2e 	bl	8001018 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
 80037d0:	0801f310 	.word	0x0801f310
 80037d4:	24000008 	.word	0x24000008
 80037d8:	24000004 	.word	0x24000004
 80037dc:	2400000c 	.word	0x2400000c

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e6:	4bb3      	ldr	r3, [pc, #716]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ee:	2b18      	cmp	r3, #24
 80037f0:	f200 8155 	bhi.w	8003a9e <HAL_RCC_GetSysClockFreq+0x2be>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003861 	.word	0x08003861
 8003800:	08003a9f 	.word	0x08003a9f
 8003804:	08003a9f 	.word	0x08003a9f
 8003808:	08003a9f 	.word	0x08003a9f
 800380c:	08003a9f 	.word	0x08003a9f
 8003810:	08003a9f 	.word	0x08003a9f
 8003814:	08003a9f 	.word	0x08003a9f
 8003818:	08003a9f 	.word	0x08003a9f
 800381c:	08003887 	.word	0x08003887
 8003820:	08003a9f 	.word	0x08003a9f
 8003824:	08003a9f 	.word	0x08003a9f
 8003828:	08003a9f 	.word	0x08003a9f
 800382c:	08003a9f 	.word	0x08003a9f
 8003830:	08003a9f 	.word	0x08003a9f
 8003834:	08003a9f 	.word	0x08003a9f
 8003838:	08003a9f 	.word	0x08003a9f
 800383c:	0800388d 	.word	0x0800388d
 8003840:	08003a9f 	.word	0x08003a9f
 8003844:	08003a9f 	.word	0x08003a9f
 8003848:	08003a9f 	.word	0x08003a9f
 800384c:	08003a9f 	.word	0x08003a9f
 8003850:	08003a9f 	.word	0x08003a9f
 8003854:	08003a9f 	.word	0x08003a9f
 8003858:	08003a9f 	.word	0x08003a9f
 800385c:	08003893 	.word	0x08003893
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003860:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800386c:	4b91      	ldr	r3, [pc, #580]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	4a90      	ldr	r2, [pc, #576]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800387e:	e111      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003880:	4b8d      	ldr	r3, [pc, #564]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003882:	61bb      	str	r3, [r7, #24]
      break;
 8003884:	e10e      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003888:	61bb      	str	r3, [r7, #24]
      break;
 800388a:	e10b      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800388c:	4b8c      	ldr	r3, [pc, #560]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800388e:	61bb      	str	r3, [r7, #24]
      break;
 8003890:	e108      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003892:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800389c:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038a8:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038b2:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	08db      	lsrs	r3, r3, #3
 80038b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80e1 	beq.w	8003a98 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	f000 8083 	beq.w	80039e4 <HAL_RCC_GetSysClockFreq+0x204>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f200 80a1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x248>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x114>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d056      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038f2:	e099      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f4:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02d      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003900:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	4a6b      	ldr	r2, [pc, #428]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a02 	vldr	s12, [r7, #8]
 800393e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800395a:	e087      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ac8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800399e:	e065      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039e2:	e043      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a26:	e021      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	0a5b      	lsrs	r3, r3, #9
 8003a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a76:	3301      	adds	r3, #1
 8003a78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a90:	ee17 3a90 	vmov	r3, s15
 8003a94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
      break;
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa0:	61bb      	str	r3, [r7, #24]
      break;
 8003aa2:	bf00      	nop
  }

  return sysclockfreq;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	03d09000 	.word	0x03d09000
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	016e3600 	.word	0x016e3600
 8003ac4:	46000000 	.word	0x46000000
 8003ac8:	4c742400 	.word	0x4c742400
 8003acc:	4a742400 	.word	0x4a742400
 8003ad0:	4bb71b00 	.word	0x4bb71b00

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003ada:	f7ff fe81 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490f      	ldr	r1, [pc, #60]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58024400 	.word	0x58024400
 8003b28:	0801f310 	.word	0x0801f310
 8003b2c:	24000008 	.word	0x24000008
 8003b30:	24000004 	.word	0x24000004

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003b38:	f7ff ffcc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	0801f310 	.word	0x0801f310

08003b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0207 	and.w	r2, r3, #7
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetClockConfig+0x80>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	52002000 	.word	0x52002000

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b0c8      	sub	sp, #288	; 0x120
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003c08:	2500      	movs	r5, #0
 8003c0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003c0e:	d049      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c1a:	d02f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c20:	d828      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c26:	d01a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2c:	d822      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c38:	e01c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3a:	4ba7      	ldr	r3, [pc, #668]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4aa6      	ldr	r2, [pc, #664]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c46:	e01a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f985 	bl	8004f60 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	3328      	adds	r3, #40	; 0x28
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fa2c 	bl	80050c4 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c86:	4b94      	ldr	r3, [pc, #592]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	4a90      	ldr	r2, [pc, #576]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6513      	str	r3, [r2, #80]	; 0x50
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003cb0:	f04f 0900 	mov.w	r9, #0
 8003cb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003cb8:	d047      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d82a      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	08003cef 	.word	0x08003cef
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d23 	.word	0x08003d23
 8003cdc:	08003d23 	.word	0x08003d23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cec:	e01a      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f932 	bl	8004f60 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d02:	e00f      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d08:	3328      	adds	r3, #40	; 0x28
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 f9d9 	bl	80050c4 <RCCEx_PLL3_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d18:	e004      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	f023 0107 	bic.w	r1, r3, #7
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	4a67      	ldr	r2, [pc, #412]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d56:	f04f 0b00 	mov.w	fp, #0
 8003d5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d5e:	d054      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d6a:	d036      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d70:	d82f      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d032      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d829      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d80:	d02f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003d82:	2bc0      	cmp	r3, #192	; 0xc0
 8003d84:	d825      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d018      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d821      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d007      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003d96:	e01c      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b4f      	ldr	r3, [pc, #316]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003da4:	e01e      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003daa:	3308      	adds	r3, #8
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 f8d6 	bl	8004f60 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dba:	e013      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc0:	3328      	adds	r3, #40	; 0x28
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f97d 	bl	80050c4 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	4a37      	ldr	r2, [pc, #220]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6513      	str	r3, [r2, #80]	; 0x50
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003e16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d05c      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e34:	d03b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e36:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e3a:	d834      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e40:	d037      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e46:	d82e      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e4c:	d033      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e52:	d828      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d01a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d822      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	d007      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e78:	e01e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f86c 	bl	8004f60 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e8e:	e013      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f913 	bl	80050c4 <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eac:	e004      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	4a02      	ldr	r2, [pc, #8]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003efa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d03a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d01f      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d819      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d00c      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d815      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d019      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d111      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f22:	4bae      	ldr	r3, [pc, #696]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4aad      	ldr	r2, [pc, #692]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f2e:	e011      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f34:	3308      	adds	r3, #8
 8003f36:	2102      	movs	r1, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f811 	bl	8004f60 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f5c:	4b9f      	ldr	r3, [pc, #636]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	4a9c      	ldr	r2, [pc, #624]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f70:	e003      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d051      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d035      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d82e      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb0:	d031      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb6:	d828      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d822      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d007      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003fce:	e01c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b82      	ldr	r3, [pc, #520]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a81      	ldr	r2, [pc, #516]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e01c      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ffba 	bl	8004f60 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	3328      	adds	r3, #40	; 0x28
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f861 	bl	80050c4 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004020:	4b6e      	ldr	r3, [pc, #440]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800402e:	4a6b      	ldr	r2, [pc, #428]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6513      	str	r3, [r2, #80]	; 0x50
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800403a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004054:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d053      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004068:	d033      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800406a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406e:	d82c      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004074:	d02f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407a:	d826      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800407c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004080:	d02b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004086:	d820      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408c:	d012      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800408e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004092:	d81a      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d115      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800409e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a2:	3308      	adds	r3, #8
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 ff5a 	bl	8004f60 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b8:	3328      	adds	r3, #40	; 0x28
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f801 	bl	80050c4 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040e8:	4b3c      	ldr	r3, [pc, #240]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f6:	4a39      	ldr	r2, [pc, #228]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6513      	str	r3, [r2, #80]	; 0x50
 80040fc:	e003      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004102:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800411c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d060      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800412e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004132:	d039      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004134:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004138:	d832      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800413a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413e:	d035      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004144:	d82c      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d031      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d826      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004156:	d02d      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415c:	d820      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800415e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004162:	d012      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004168:	d81a      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d024      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800416e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004172:	d115      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 feef 	bl	8004f60 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004188:	e017      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418e:	3328      	adds	r3, #40	; 0x28
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff96 	bl	80050c4 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a8:	bf00      	nop
 80041aa:	e006      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041ac:	bf00      	nop
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041d2:	4a02      	ldr	r2, [pc, #8]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
 80041d8:	e006      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80041f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004202:	460b      	mov	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	d037      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004212:	d00e      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004218:	d816      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800421e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004222:	d111      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004224:	4bc4      	ldr	r3, [pc, #784]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4ac3      	ldr	r2, [pc, #780]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800422a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	3308      	adds	r3, #8
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fe90 	bl	8004f60 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800425a:	4bb7      	ldr	r3, [pc, #732]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800425c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004268:	4ab3      	ldr	r2, [pc, #716]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800426a:	430b      	orrs	r3, r1
 800426c:	6513      	str	r3, [r2, #80]	; 0x50
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800428e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d039      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d81c      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042e5 	.word	0x080042e5
 80042ac:	080042b9 	.word	0x080042b9
 80042b0:	080042c7 	.word	0x080042c7
 80042b4:	080042e5 	.word	0x080042e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b8:	4b9f      	ldr	r3, [pc, #636]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a9e      	ldr	r2, [pc, #632]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042c4:	e00f      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ca:	3308      	adds	r3, #8
 80042cc:	2102      	movs	r1, #2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fe46 	bl	8004f60 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042da:	e004      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042e2:	e000      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80042e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042ee:	4b92      	ldr	r3, [pc, #584]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	f023 0103 	bic.w	r1, r3, #3
 80042f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	4a8e      	ldr	r2, [pc, #568]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004302:	e003      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004308:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004322:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	f000 8099 	beq.w	8004460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432e:	4b83      	ldr	r3, [pc, #524]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a82      	ldr	r2, [pc, #520]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433a:	f7fd f8cd 	bl	80014d8 <HAL_GetTick>
 800433e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004342:	e00b      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fd f8c8 	bl	80014d8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d903      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435c:	4b77      	ldr	r3, [pc, #476]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ed      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800436c:	2b00      	cmp	r3, #0
 800436e:	d173      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004370:	4b71      	ldr	r3, [pc, #452]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004378:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800437c:	4053      	eors	r3, r2
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d015      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004386:	4b6c      	ldr	r3, [pc, #432]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004392:	4b69      	ldr	r3, [pc, #420]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a68      	ldr	r2, [pc, #416]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800439e:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043aa:	4a63      	ldr	r2, [pc, #396]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d118      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd f88a 	bl	80014d8 <HAL_GetTick>
 80043c4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043c8:	e00d      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd f885 	bl	80014d8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80043da:	429a      	cmp	r2, r3
 80043dc:	d903      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80043e4:	e005      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e6:	4b54      	ldr	r3, [pc, #336]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0eb      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80043f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d129      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440a:	d10e      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800440c:	4b4a      	ldr	r3, [pc, #296]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004418:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800441c:	091a      	lsrs	r2, r3, #4
 800441e:	4b48      	ldr	r3, [pc, #288]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004420:	4013      	ands	r3, r2
 8004422:	4a45      	ldr	r2, [pc, #276]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004424:	430b      	orrs	r3, r1
 8004426:	6113      	str	r3, [r2, #16]
 8004428:	e005      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800442a:	4b43      	ldr	r3, [pc, #268]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4a42      	ldr	r2, [pc, #264]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004430:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004434:	6113      	str	r3, [r2, #16]
 8004436:	4b40      	ldr	r3, [pc, #256]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004438:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800443a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004446:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e008      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800444e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004452:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800445c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 0301 	and.w	r3, r2, #1
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004476:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	f000 8090 	beq.w	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	2b28      	cmp	r3, #40	; 0x28
 800448c:	d870      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	08004579 	.word	0x08004579
 8004498:	08004571 	.word	0x08004571
 800449c:	08004571 	.word	0x08004571
 80044a0:	08004571 	.word	0x08004571
 80044a4:	08004571 	.word	0x08004571
 80044a8:	08004571 	.word	0x08004571
 80044ac:	08004571 	.word	0x08004571
 80044b0:	08004571 	.word	0x08004571
 80044b4:	08004545 	.word	0x08004545
 80044b8:	08004571 	.word	0x08004571
 80044bc:	08004571 	.word	0x08004571
 80044c0:	08004571 	.word	0x08004571
 80044c4:	08004571 	.word	0x08004571
 80044c8:	08004571 	.word	0x08004571
 80044cc:	08004571 	.word	0x08004571
 80044d0:	08004571 	.word	0x08004571
 80044d4:	0800455b 	.word	0x0800455b
 80044d8:	08004571 	.word	0x08004571
 80044dc:	08004571 	.word	0x08004571
 80044e0:	08004571 	.word	0x08004571
 80044e4:	08004571 	.word	0x08004571
 80044e8:	08004571 	.word	0x08004571
 80044ec:	08004571 	.word	0x08004571
 80044f0:	08004571 	.word	0x08004571
 80044f4:	08004579 	.word	0x08004579
 80044f8:	08004571 	.word	0x08004571
 80044fc:	08004571 	.word	0x08004571
 8004500:	08004571 	.word	0x08004571
 8004504:	08004571 	.word	0x08004571
 8004508:	08004571 	.word	0x08004571
 800450c:	08004571 	.word	0x08004571
 8004510:	08004571 	.word	0x08004571
 8004514:	08004579 	.word	0x08004579
 8004518:	08004571 	.word	0x08004571
 800451c:	08004571 	.word	0x08004571
 8004520:	08004571 	.word	0x08004571
 8004524:	08004571 	.word	0x08004571
 8004528:	08004571 	.word	0x08004571
 800452c:	08004571 	.word	0x08004571
 8004530:	08004571 	.word	0x08004571
 8004534:	08004579 	.word	0x08004579
 8004538:	58024400 	.word	0x58024400
 800453c:	58024800 	.word	0x58024800
 8004540:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004548:	3308      	adds	r3, #8
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fd07 	bl	8004f60 <RCCEx_PLL2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004558:	e00f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455e:	3328      	adds	r3, #40	; 0x28
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fdae 	bl	80050c4 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800456e:	e004      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004582:	4bc0      	ldr	r3, [pc, #768]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	4abc      	ldr	r2, [pc, #752]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6553      	str	r3, [r2, #84]	; 0x54
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800459e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f002 0302 	and.w	r3, r2, #2
 80045ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045b8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d043      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d824      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004621 	.word	0x08004621
 80045d8:	080045ed 	.word	0x080045ed
 80045dc:	08004603 	.word	0x08004603
 80045e0:	08004621 	.word	0x08004621
 80045e4:	08004621 	.word	0x08004621
 80045e8:	08004621 	.word	0x08004621
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f0:	3308      	adds	r3, #8
 80045f2:	2101      	movs	r1, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fcb3 	bl	8004f60 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004600:	e00f      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004606:	3328      	adds	r3, #40	; 0x28
 8004608:	2101      	movs	r1, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fd5a 	bl	80050c4 <RCCEx_PLL3_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004616:	e004      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800461e:	e000      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800462a:	4b96      	ldr	r3, [pc, #600]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f023 0107 	bic.w	r1, r3, #7
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463a:	4a92      	ldr	r2, [pc, #584]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800463c:	430b      	orrs	r3, r1
 800463e:	6553      	str	r3, [r2, #84]	; 0x54
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004646:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f002 0304 	and.w	r3, r2, #4
 8004656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004660:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d043      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004672:	2b05      	cmp	r3, #5
 8004674:	d824      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	080046c9 	.word	0x080046c9
 8004680:	08004695 	.word	0x08004695
 8004684:	080046ab 	.word	0x080046ab
 8004688:	080046c9 	.word	0x080046c9
 800468c:	080046c9 	.word	0x080046c9
 8004690:	080046c9 	.word	0x080046c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	3308      	adds	r3, #8
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fc5f 	bl	8004f60 <RCCEx_PLL2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046a8:	e00f      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ae:	3328      	adds	r3, #40	; 0x28
 80046b0:	2101      	movs	r1, #1
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fd06 	bl	80050c4 <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046be:	e004      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046c6:	e000      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80046c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d2:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	f023 0107 	bic.w	r1, r3, #7
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e2:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6593      	str	r3, [r2, #88]	; 0x58
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f002 0320 	and.w	r3, r2, #32
 80046fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d055      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800471e:	d033      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004724:	d82c      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472a:	d02f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d826      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004732:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004736:	d02b      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800473c:	d820      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800473e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004742:	d012      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004748:	d81a      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d022      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004752:	d115      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	3308      	adds	r3, #8
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fbff 	bl	8004f60 <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004768:	e015      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476e:	3328      	adds	r3, #40	; 0x28
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fca6 	bl	80050c4 <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800477e:	e00a      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004786:	e006      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004788:	bf00      	nop
 800478a:	e004      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800478c:	bf00      	nop
 800478e:	e002      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004790:	bf00      	nop
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004796:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479e:	4b39      	ldr	r3, [pc, #228]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ae:	4a35      	ldr	r2, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6553      	str	r3, [r2, #84]	; 0x54
 80047b4:	e003      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d058      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047ea:	d033      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80047ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047f0:	d82c      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d02f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fc:	d826      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004802:	d02b      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004808:	d820      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d012      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004814:	d81a      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d022      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d115      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	3308      	adds	r3, #8
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fb99 	bl	8004f60 <RCCEx_PLL2_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004834:	e015      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483a:	3328      	adds	r3, #40	; 0x28
 800483c:	2102      	movs	r1, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fc40 	bl	80050c4 <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800484a:	e00a      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004852:	e006      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004854:	bf00      	nop
 8004856:	e004      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004858:	bf00      	nop
 800485a:	e002      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004862:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800487a:	4a02      	ldr	r2, [pc, #8]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800487c:	430b      	orrs	r3, r1
 800487e:	6593      	str	r3, [r2, #88]	; 0x58
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048a0:	2300      	movs	r3, #0
 80048a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048aa:	460b      	mov	r3, r1
 80048ac:	4313      	orrs	r3, r2
 80048ae:	d055      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048bc:	d033      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048c2:	d82c      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	d02f      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d826      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048d4:	d02b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048da:	d820      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e0:	d012      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80048e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e6:	d81a      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d022      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80048ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f0:	d115      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f6:	3308      	adds	r3, #8
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb30 	bl	8004f60 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004906:	e015      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490c:	3328      	adds	r3, #40	; 0x28
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fbd7 	bl	80050c4 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800491c:	e00a      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004924:	e006      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004926:	bf00      	nop
 8004928:	e004      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800492a:	bf00      	nop
 800492c:	e002      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800493c:	4ba1      	ldr	r3, [pc, #644]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800494c:	4a9d      	ldr	r2, [pc, #628]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800494e:	430b      	orrs	r3, r1
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
 8004952:	e003      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004958:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f002 0308 	and.w	r3, r2, #8
 8004968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004972:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004976:	460b      	mov	r3, r1
 8004978:	4313      	orrs	r3, r2
 800497a:	d01e      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498e:	3328      	adds	r3, #40	; 0x28
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb96 	bl	80050c4 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049a4:	4b87      	ldr	r3, [pc, #540]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b6:	430b      	orrs	r3, r1
 80049b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f002 0310 	and.w	r3, r2, #16
 80049c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80049d4:	460b      	mov	r3, r1
 80049d6:	4313      	orrs	r3, r2
 80049d8:	d01e      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ec:	3328      	adds	r3, #40	; 0x28
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fb67 	bl	80050c4 <RCCEx_PLL3_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a02:	4b70      	ldr	r3, [pc, #448]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a12:	4a6c      	ldr	r2, [pc, #432]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a32:	460b      	mov	r3, r1
 8004a34:	4313      	orrs	r3, r2
 8004a36:	d03e      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a44:	d022      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4a:	d81b      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d00b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a56:	e015      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fa7d 	bl	8004f60 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a6c:	e00f      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a72:	3328      	adds	r3, #40	; 0x28
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fb24 	bl	80050c4 <RCCEx_PLL3_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a82:	e004      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a96:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aa6:	4a47      	ldr	r2, [pc, #284]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ab2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004ac2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ac8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004acc:	460b      	mov	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	d03b      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ade:	d01f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae4:	d818      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d003      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af0:	d007      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af4:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	4a32      	ldr	r2, [pc, #200]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fada 	bl	80050c4 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b56:	673b      	str	r3, [r7, #112]	; 0x70
 8004b58:	2300      	movs	r3, #0
 8004b5a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d034      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d007      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004b76:	e011      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b84:	e00e      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f9e6 	bl	8004f60 <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10d      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bde:	2300      	movs	r3, #0
 8004be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004be6:	460b      	mov	r3, r1
 8004be8:	4313      	orrs	r3, r2
 8004bea:	d00c      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf0:	3328      	adds	r3, #40	; 0x28
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fa65 	bl	80050c4 <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c12:	663b      	str	r3, [r7, #96]	; 0x60
 8004c14:	2300      	movs	r3, #0
 8004c16:	667b      	str	r3, [r7, #100]	; 0x64
 8004c18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	d038      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2e:	d018      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c34:	d811      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	d014      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d80b      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4bc3      	ldr	r3, [pc, #780]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4ac2      	ldr	r2, [pc, #776]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c58:	e008      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c60:	e004      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c74:	4bb9      	ldr	r3, [pc, #740]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	4ab5      	ldr	r2, [pc, #724]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c86:	430b      	orrs	r3, r1
 8004c88:	6553      	str	r3, [r2, #84]	; 0x54
 8004c8a:	e003      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cb0:	4baa      	ldr	r3, [pc, #680]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	4aa7      	ldr	r2, [pc, #668]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ce0:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a9b      	ldr	r2, [pc, #620]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d02:	2300      	movs	r3, #0
 8004d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d10:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1e:	4a8f      	ldr	r2, [pc, #572]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
 8004d32:	2300      	movs	r3, #0
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
 8004d36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a85      	ldr	r2, [pc, #532]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d4a:	6113      	str	r3, [r2, #16]
 8004d4c:	4b83      	ldr	r3, [pc, #524]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d4e:	6919      	ldr	r1, [r3, #16]
 8004d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d58:	4a80      	ldr	r2, [pc, #512]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d7a:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	4a74      	ldr	r2, [pc, #464]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004da4:	460b      	mov	r3, r1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004daa:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	4a68      	ldr	r2, [pc, #416]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d011      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	3308      	adds	r3, #8
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f8bb 	bl	8004f60 <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6239      	str	r1, [r7, #32]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d011      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e20:	3308      	adds	r3, #8
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f89b 	bl	8004f60 <RCCEx_PLL2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d011      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e60:	3308      	adds	r3, #8
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f87b 	bl	8004f60 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6139      	str	r1, [r7, #16]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e96:	460b      	mov	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d011      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea0:	3328      	adds	r3, #40	; 0x28
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f90d 	bl	80050c4 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ebc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d011      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee0:	3328      	adds	r3, #40	; 0x28
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f8ed 	bl	80050c4 <RCCEx_PLL3_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004efc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6039      	str	r1, [r7, #0]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d011      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	3328      	adds	r3, #40	; 0x28
 8004f22:	2102      	movs	r1, #2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 f8cd 	bl	80050c4 <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f40:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400

08004f60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f6e:	4b53      	ldr	r3, [pc, #332]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d101      	bne.n	8004f7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e099      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f7e:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc faa5 	bl	80014d8 <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f92:	f7fc faa1 	bl	80014d8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e086      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	493f      	ldr	r1, [pc, #252]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	025b      	lsls	r3, r3, #9
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ff4:	4931      	ldr	r1, [pc, #196]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ffa:	4b30      	ldr	r3, [pc, #192]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	492d      	ldr	r1, [pc, #180]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f023 0220 	bic.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	4928      	ldr	r1, [pc, #160]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4a26      	ldr	r2, [pc, #152]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800502c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <RCCEx_PLL2_Config+0x160>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	69d2      	ldr	r2, [r2, #28]
 8005036:	00d2      	lsls	r2, r2, #3
 8005038:	4920      	ldr	r1, [pc, #128]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005044:	f043 0310 	orr.w	r3, r3, #16
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a19      	ldr	r2, [pc, #100]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800505c:	e00f      	b.n	800507e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800506a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005070:	e005      	b.n	800507e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a11      	ldr	r2, [pc, #68]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508a:	f7fc fa25 	bl	80014d8 <HAL_GetTick>
 800508e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005090:	e008      	b.n	80050a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005092:	f7fc fa21 	bl	80014d8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e006      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400
 80050c0:	ffff0007 	.word	0xffff0007

080050c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d101      	bne.n	80050e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e099      	b.n	8005216 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050e2:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4e      	ldr	r2, [pc, #312]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fc f9f3 	bl	80014d8 <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050f4:	e008      	b.n	8005108 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050f6:	f7fc f9ef 	bl	80014d8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e086      	b.n	8005216 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005108:	4b45      	ldr	r3, [pc, #276]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005114:	4b42      	ldr	r3, [pc, #264]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	051b      	lsls	r3, r3, #20
 8005122:	493f      	ldr	r1, [pc, #252]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	628b      	str	r3, [r1, #40]	; 0x28
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	025b      	lsls	r3, r3, #9
 800513a:	b29b      	uxth	r3, r3
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	3b01      	subs	r3, #1
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005158:	4931      	ldr	r1, [pc, #196]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4928      	ldr	r1, [pc, #160]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005182:	4b27      	ldr	r3, [pc, #156]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <RCCEx_PLL3_Config+0x160>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69d2      	ldr	r2, [r2, #28]
 800519a:	00d2      	lsls	r2, r2, #3
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a19      	ldr	r2, [pc, #100]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c0:	e00f      	b.n	80051e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d4:	e005      	b.n	80051e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ee:	f7fc f973 	bl	80014d8 <HAL_GetTick>
 80051f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f4:	e008      	b.n	8005208 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051f6:	f7fc f96f 	bl	80014d8 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	ffff0007 	.word	0xffff0007

08005228 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e02b      	b.n	8005294 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fb fa51 	bl	80006f8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 fb4f 	bl	800590c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	461a      	mov	r2, r3
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	f000 fba3 	bl	80059c4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_SDRAM_Init+0x74>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a06      	ldr	r2, [pc, #24]	; (800529c <HAL_SDRAM_Init+0x74>)
 8005284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005288:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	52004000 	.word	0x52004000

080052a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d101      	bne.n	80052be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
 80052bc:	e021      	b.n	8005302 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d002      	beq.n	80052ca <HAL_SDRAM_SendCommand+0x2a>
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d118      	bne.n	80052fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fbdc 	bl	8005a98 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d104      	bne.n	80052f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2205      	movs	r2, #5
 80052ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052f0:	e006      	b.n	8005300 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052fa:	e001      	b.n	8005300 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d101      	bne.n	8005324 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
 8005322:	e016      	b.n	8005352 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10f      	bne.n	8005350 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbce 	bl	8005ae0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e049      	b.n	8005400 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f841 	bl	8005408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f000 f9ff 	bl	800579c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e054      	b.n	80054de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <HAL_TIM_Base_Start_IT+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d01d      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_TIM_Base_Start_IT+0xe0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_TIM_Base_Start_IT+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_Base_Start_IT+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d115      	bne.n	80054c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_TIM_Base_Start_IT+0xec>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d015      	beq.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d011      	beq.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	e008      	b.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e000      	b.n	80054dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40001800 	.word	0x40001800
 8005504:	40014000 	.word	0x40014000
 8005508:	00010007 	.word	0x00010007

0800550c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0202 	mvn.w	r2, #2
 8005538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f905 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8f7 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f908 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0204 	mvn.w	r2, #4
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8db 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8cd 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8de 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0208 	mvn.w	r2, #8
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2204      	movs	r2, #4
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8b1 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8a3 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8b4 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0210 	mvn.w	r2, #16
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2208      	movs	r2, #8
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f887 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f879 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f88a 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0201 	mvn.w	r2, #1
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fb fc06 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d10e      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f914 	bl	80058e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d10e      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f907 	bl	80058f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d10e      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f838 	bl	8005786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b20      	cmp	r3, #32
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0220 	mvn.w	r2, #32
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8c7 	bl	80058d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a40      	ldr	r2, [pc, #256]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d00f      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3d      	ldr	r2, [pc, #244]	; (80058b4 <TIM_Base_SetConfig+0x118>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3c      	ldr	r2, [pc, #240]	; (80058b8 <TIM_Base_SetConfig+0x11c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a3b      	ldr	r2, [pc, #236]	; (80058bc <TIM_Base_SetConfig+0x120>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3a      	ldr	r2, [pc, #232]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d108      	bne.n	80057ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01f      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d01b      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2c      	ldr	r2, [pc, #176]	; (80058b4 <TIM_Base_SetConfig+0x118>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d017      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2b      	ldr	r2, [pc, #172]	; (80058b8 <TIM_Base_SetConfig+0x11c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <TIM_Base_SetConfig+0x120>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00f      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <TIM_Base_SetConfig+0x128>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <TIM_Base_SetConfig+0x12c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <TIM_Base_SetConfig+0x130>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a10      	ldr	r2, [pc, #64]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <TIM_Base_SetConfig+0x128>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <TIM_Base_SetConfig+0x12c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a0f      	ldr	r2, [pc, #60]	; (80058cc <TIM_Base_SetConfig+0x130>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d103      	bne.n	800589c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	615a      	str	r2, [r3, #20]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40010400 	.word	0x40010400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d121      	bne.n	8005962 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <FMC_SDRAM_Init+0xb4>)
 8005924:	4013      	ands	r3, r2
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	6851      	ldr	r1, [r2, #4]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	4311      	orrs	r1, r2
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	68d2      	ldr	r2, [r2, #12]
 8005934:	4311      	orrs	r1, r2
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	6912      	ldr	r2, [r2, #16]
 800593a:	4311      	orrs	r1, r2
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	6952      	ldr	r2, [r2, #20]
 8005940:	4311      	orrs	r1, r2
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	6992      	ldr	r2, [r2, #24]
 8005946:	4311      	orrs	r1, r2
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	69d2      	ldr	r2, [r2, #28]
 800594c:	4311      	orrs	r1, r2
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	6a12      	ldr	r2, [r2, #32]
 8005952:	4311      	orrs	r1, r2
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005958:	430a      	orrs	r2, r1
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e026      	b.n	80059b0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	69d9      	ldr	r1, [r3, #28]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4319      	orrs	r1, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	430b      	orrs	r3, r1
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <FMC_SDRAM_Init+0xb4>)
 8005986:	4013      	ands	r3, r2
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	6851      	ldr	r1, [r2, #4]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	4311      	orrs	r1, r2
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68d2      	ldr	r2, [r2, #12]
 8005996:	4311      	orrs	r1, r2
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	6912      	ldr	r2, [r2, #16]
 800599c:	4311      	orrs	r1, r2
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	6952      	ldr	r2, [r2, #20]
 80059a2:	4311      	orrs	r1, r2
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	6992      	ldr	r2, [r2, #24]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	ffff8000 	.word	0xffff8000

080059c4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d128      	bne.n	8005a28 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1e59      	subs	r1, r3, #1
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4319      	orrs	r1, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	4319      	orrs	r1, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	031b      	lsls	r3, r3, #12
 8005a00:	4319      	orrs	r1, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	4319      	orrs	r1, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	051b      	lsls	r3, r3, #20
 8005a14:	4319      	orrs	r1, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	e02d      	b.n	8005a84 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <FMC_SDRAM_Timing_Init+0xd0>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	68d2      	ldr	r2, [r2, #12]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	0311      	lsls	r1, r2, #12
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	6952      	ldr	r2, [r2, #20]
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0512      	lsls	r2, r2, #20
 8005a40:	430a      	orrs	r2, r1
 8005a42:	431a      	orrs	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1e59      	subs	r1, r3, #1
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4319      	orrs	r1, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	4319      	orrs	r1, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	4319      	orrs	r1, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	ff0f0fff 	.word	0xff0f0fff

08005a98 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <FMC_SDRAM_SendCommand+0x44>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	6811      	ldr	r1, [r2, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6892      	ldr	r2, [r2, #8]
 8005aba:	3a01      	subs	r2, #1
 8005abc:	0152      	lsls	r2, r2, #5
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	68d2      	ldr	r2, [r2, #12]
 8005ac4:	0252      	lsls	r2, r2, #9
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	ffc00000 	.word	0xffc00000

08005ae0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	0052      	lsls	r2, r2, #1
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	ffffc001 	.word	0xffffc001

08005b10 <__NVIC_SetPriority>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db0a      	blt.n	8005b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	490c      	ldr	r1, [pc, #48]	; (8005b5c <__NVIC_SetPriority+0x4c>)
 8005b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2e:	0112      	lsls	r2, r2, #4
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	440b      	add	r3, r1
 8005b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b38:	e00a      	b.n	8005b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4908      	ldr	r1, [pc, #32]	; (8005b60 <__NVIC_SetPriority+0x50>)
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3b04      	subs	r3, #4
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	761a      	strb	r2, [r3, #24]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000e100 	.word	0xe000e100
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <SysTick_Handler+0x1c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b6c:	f002 faa0 	bl	80080b0 <xTaskGetSchedulerState>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b76:	f003 f987 	bl	8008e88 <xPortSysTickHandler>
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	e000e010 	.word	0xe000e010

08005b84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b88:	2100      	movs	r1, #0
 8005b8a:	f06f 0004 	mvn.w	r0, #4
 8005b8e:	f7ff ffbf 	bl	8005b10 <__NVIC_SetPriority>
#endif
}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
 8005ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005baa:	f06f 0305 	mvn.w	r3, #5
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	e00c      	b.n	8005bcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <osKernelInitialize+0x44>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <osKernelInitialize+0x44>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	e002      	b.n	8005bcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bcc:	687b      	ldr	r3, [r7, #4]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	24000330 	.word	0x24000330

08005be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be6:	f3ef 8305 	mrs	r3, IPSR
 8005bea:	603b      	str	r3, [r7, #0]
  return(result);
 8005bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bf2:	f06f 0305 	mvn.w	r3, #5
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	e010      	b.n	8005c1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <osKernelStart+0x48>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d109      	bne.n	8005c16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c02:	f7ff ffbf 	bl	8005b84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c06:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <osKernelStart+0x48>)
 8005c08:	2202      	movs	r2, #2
 8005c0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c0c:	f001 fdf2 	bl	80077f4 <vTaskStartScheduler>
      stat = osOK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	e002      	b.n	8005c1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c1c:	687b      	ldr	r3, [r7, #4]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	24000330 	.word	0x24000330

08005c2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08e      	sub	sp, #56	; 0x38
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3c:	f3ef 8305 	mrs	r3, IPSR
 8005c40:	617b      	str	r3, [r7, #20]
  return(result);
 8005c42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d17e      	bne.n	8005d46 <osThreadNew+0x11a>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d07b      	beq.n	8005d46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c52:	2318      	movs	r3, #24
 8005c54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d045      	beq.n	8005cf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <osThreadNew+0x48>
        name = attr->name;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <osThreadNew+0x6e>
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b38      	cmp	r3, #56	; 0x38
 8005c8c:	d805      	bhi.n	8005c9a <osThreadNew+0x6e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <osThreadNew+0x72>
        return (NULL);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e054      	b.n	8005d48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00e      	beq.n	8005cd4 <osThreadNew+0xa8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2bab      	cmp	r3, #171	; 0xab
 8005cbc:	d90a      	bls.n	8005cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <osThreadNew+0xa8>
        mem = 1;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e010      	b.n	8005cf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10c      	bne.n	8005cf6 <osThreadNew+0xca>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d108      	bne.n	8005cf6 <osThreadNew+0xca>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <osThreadNew+0xca>
          mem = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e001      	b.n	8005cf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d110      	bne.n	8005d1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d04:	9202      	str	r2, [sp, #8]
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f001 fb7e 	bl	8007414 <xTaskCreateStatic>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	e013      	b.n	8005d46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d110      	bne.n	8005d46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f001 fbc9 	bl	80074ce <xTaskCreate>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d001      	beq.n	8005d46 <osThreadNew+0x11a>
            hTask = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d46:	693b      	ldr	r3, [r7, #16]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d58:	f3ef 8305 	mrs	r3, IPSR
 8005d5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <osDelay+0x1c>
    stat = osErrorISR;
 8005d64:	f06f 0305 	mvn.w	r3, #5
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e007      	b.n	8005d7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fd08 	bl	800778c <vTaskDelay>
    }
  }

  return (stat);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	; 0x28
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d96:	f3ef 8305 	mrs	r3, IPSR
 8005d9a:	613b      	str	r3, [r7, #16]
  return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d175      	bne.n	8005e8e <osSemaphoreNew+0x108>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d072      	beq.n	8005e8e <osSemaphoreNew+0x108>
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d86e      	bhi.n	8005e8e <osSemaphoreNew+0x108>
    mem = -1;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <osSemaphoreNew+0x4c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8005dca:	d902      	bls.n	8005dd2 <osSemaphoreNew+0x4c>
        mem = 1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e00c      	b.n	8005dec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d108      	bne.n	8005dec <osSemaphoreNew+0x66>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <osSemaphoreNew+0x66>
          mem = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e001      	b.n	8005dec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d04c      	beq.n	8005e8e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d128      	bne.n	8005e4c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d10a      	bne.n	8005e16 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2203      	movs	r2, #3
 8005e06:	9200      	str	r2, [sp, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f000 fb5b 	bl	80064c8 <xQueueGenericCreateStatic>
 8005e12:	61f8      	str	r0, [r7, #28]
 8005e14:	e005      	b.n	8005e22 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e16:	2203      	movs	r2, #3
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f000 fbcc 	bl	80065b8 <xQueueGenericCreate>
 8005e20:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d022      	beq.n	8005e6e <osSemaphoreNew+0xe8>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01f      	beq.n	8005e6e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	69f8      	ldr	r0, [r7, #28]
 8005e36:	f000 fc87 	bl	8006748 <xQueueGenericSend>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d016      	beq.n	8005e6e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e40:	69f8      	ldr	r0, [r7, #28]
 8005e42:	f001 f913 	bl	800706c <vQueueDelete>
            hSemaphore = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e010      	b.n	8005e6e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc09 	bl	8006672 <xQueueCreateCountingSemaphoreStatic>
 8005e60:	61f8      	str	r0, [r7, #28]
 8005e62:	e004      	b.n	8005e6e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fc3a 	bl	80066e0 <xQueueCreateCountingSemaphore>
 8005e6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e001      	b.n	8005e86 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005e86:	6979      	ldr	r1, [r7, #20]
 8005e88:	69f8      	ldr	r0, [r7, #28]
 8005e8a:	f001 fa3b 	bl	8007304 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005eb0:	f06f 0303 	mvn.w	r3, #3
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e039      	b.n	8005f2c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb8:	f3ef 8305 	mrs	r3, IPSR
 8005ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d022      	beq.n	8005f0a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005eca:	f06f 0303 	mvn.w	r3, #3
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e02c      	b.n	8005f2c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	461a      	mov	r2, r3
 8005edc:	2100      	movs	r1, #0
 8005ede:	6938      	ldr	r0, [r7, #16]
 8005ee0:	f001 f844 	bl	8006f6c <xQueueReceiveFromISR>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d003      	beq.n	8005ef2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005eea:	f06f 0302 	mvn.w	r3, #2
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e01c      	b.n	8005f2c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d019      	beq.n	8005f2c <osSemaphoreAcquire+0x94>
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <osSemaphoreAcquire+0xa0>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	e010      	b.n	8005f2c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6938      	ldr	r0, [r7, #16]
 8005f0e:	f000 ff21 	bl	8006d54 <xQueueSemaphoreTake>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d009      	beq.n	8005f2c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f1e:	f06f 0301 	mvn.w	r3, #1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	e002      	b.n	8005f2c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f26:	f06f 0302 	mvn.w	r3, #2
 8005f2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f2c:	697b      	ldr	r3, [r7, #20]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f52:	f06f 0303 	mvn.w	r3, #3
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e02c      	b.n	8005fb4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5a:	f3ef 8305 	mrs	r3, IPSR
 8005f5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01a      	beq.n	8005f9c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6938      	ldr	r0, [r7, #16]
 8005f72:	f000 fd82 	bl	8006a7a <xQueueGiveFromISR>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d003      	beq.n	8005f84 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005f7c:	f06f 0302 	mvn.w	r3, #2
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e017      	b.n	8005fb4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d014      	beq.n	8005fb4 <osSemaphoreRelease+0x78>
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <osSemaphoreRelease+0x84>)
 8005f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	e00b      	b.n	8005fb4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	6938      	ldr	r0, [r7, #16]
 8005fa4:	f000 fbd0 	bl	8006748 <xQueueGenericSend>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d002      	beq.n	8005fb4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fae:	f06f 0302 	mvn.w	r3, #2
 8005fb2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fb4:	697b      	ldr	r3, [r7, #20]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd4:	f3ef 8305 	mrs	r3, IPSR
 8005fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d15f      	bne.n	80060a0 <osMessageQueueNew+0xdc>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d05c      	beq.n	80060a0 <osMessageQueueNew+0xdc>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d059      	beq.n	80060a0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d029      	beq.n	800604c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <osMessageQueueNew+0x62>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b4f      	cmp	r3, #79	; 0x4f
 8006006:	d90e      	bls.n	8006026 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <osMessageQueueNew+0x62>
        mem = 1;
 8006020:	2301      	movs	r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e014      	b.n	8006050 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d110      	bne.n	8006050 <osMessageQueueNew+0x8c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <osMessageQueueNew+0x8c>
          mem = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e001      	b.n	8006050 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10b      	bne.n	800606e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2100      	movs	r1, #0
 8006060:	9100      	str	r1, [sp, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fa2f 	bl	80064c8 <xQueueGenericCreateStatic>
 800606a:	61f8      	str	r0, [r7, #28]
 800606c:	e008      	b.n	8006080 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006074:	2200      	movs	r2, #0
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa9d 	bl	80065b8 <xQueueGenericCreate>
 800607e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <osMessageQueueNew+0xd0>
        name = attr->name;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e001      	b.n	8006098 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	69f8      	ldr	r0, [r7, #28]
 800609c:	f001 f932 	bl	8007304 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80060a0:	69fb      	ldr	r3, [r7, #28]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c4:	f3ef 8305 	mrs	r3, IPSR
 80060c8:	617b      	str	r3, [r7, #20]
  return(result);
 80060ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d028      	beq.n	8006122 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <osMessageQueuePut+0x36>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <osMessageQueuePut+0x36>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80060e2:	f06f 0303 	mvn.w	r3, #3
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	e038      	b.n	800615c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80060ee:	f107 0210 	add.w	r2, r7, #16
 80060f2:	2300      	movs	r3, #0
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	69b8      	ldr	r0, [r7, #24]
 80060f8:	f000 fc24 	bl	8006944 <xQueueGenericSendFromISR>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d003      	beq.n	800610a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006102:	f06f 0302 	mvn.w	r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e028      	b.n	800615c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d025      	beq.n	800615c <osMessageQueuePut+0xb0>
 8006110:	4b15      	ldr	r3, [pc, #84]	; (8006168 <osMessageQueuePut+0xbc>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	e01c      	b.n	800615c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <osMessageQueuePut+0x82>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800612e:	f06f 0303 	mvn.w	r3, #3
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	e012      	b.n	800615c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006136:	2300      	movs	r3, #0
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	69b8      	ldr	r0, [r7, #24]
 800613e:	f000 fb03 	bl	8006748 <xQueueGenericSend>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d009      	beq.n	800615c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800614e:	f06f 0301 	mvn.w	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e002      	b.n	800615c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006156:	f06f 0302 	mvn.w	r3, #2
 800615a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006182:	f3ef 8305 	mrs	r3, IPSR
 8006186:	617b      	str	r3, [r7, #20]
  return(result);
 8006188:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800618a:	2b00      	cmp	r3, #0
 800618c:	d028      	beq.n	80061e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <osMessageQueueGet+0x34>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <osMessageQueueGet+0x34>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80061a0:	f06f 0303 	mvn.w	r3, #3
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	e037      	b.n	8006218 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	461a      	mov	r2, r3
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	69b8      	ldr	r0, [r7, #24]
 80061b6:	f000 fed9 	bl	8006f6c <xQueueReceiveFromISR>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d003      	beq.n	80061c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80061c0:	f06f 0302 	mvn.w	r3, #2
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e027      	b.n	8006218 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d024      	beq.n	8006218 <osMessageQueueGet+0xac>
 80061ce:	4b15      	ldr	r3, [pc, #84]	; (8006224 <osMessageQueueGet+0xb8>)
 80061d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	e01b      	b.n	8006218 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <osMessageQueueGet+0x80>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80061ec:	f06f 0303 	mvn.w	r3, #3
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e011      	b.n	8006218 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	69b8      	ldr	r0, [r7, #24]
 80061fa:	f000 fccb 	bl	8006b94 <xQueueReceive>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b01      	cmp	r3, #1
 8006202:	d009      	beq.n	8006218 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800620a:	f06f 0301 	mvn.w	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e002      	b.n	8006218 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006212:	f06f 0302 	mvn.w	r3, #2
 8006216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006218:	69fb      	ldr	r3, [r7, #28]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a07      	ldr	r2, [pc, #28]	; (8006254 <vApplicationGetIdleTaskMemory+0x2c>)
 8006238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a06      	ldr	r2, [pc, #24]	; (8006258 <vApplicationGetIdleTaskMemory+0x30>)
 800623e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	601a      	str	r2, [r3, #0]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	24000334 	.word	0x24000334
 8006258:	240003e0 	.word	0x240003e0

0800625c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <vApplicationGetTimerTaskMemory+0x2c>)
 800626c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <vApplicationGetTimerTaskMemory+0x30>)
 8006272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800627a:	601a      	str	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	240005e0 	.word	0x240005e0
 800628c:	2400068c 	.word	0x2400068c

08006290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f103 0208 	add.w	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295
 80062a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f103 0208 	add.w	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f103 0208 	add.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d103      	bne.n	8006352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e00c      	b.n	800636c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3308      	adds	r3, #8
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e002      	b.n	8006360 <vListInsert+0x2e>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	d2f6      	bcs.n	800635a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
}
 8006398:	bf00      	nop
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6852      	ldr	r2, [r2, #4]
 80063c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d103      	bne.n	80063d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	1e5a      	subs	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006422:	f002 fc9f 	bl	8008d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006432:	fb01 f303 	mul.w	r3, r1, r3
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	3b01      	subs	r3, #1
 8006454:	68f9      	ldr	r1, [r7, #12]
 8006456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	441a      	add	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	22ff      	movs	r2, #255	; 0xff
 8006466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d114      	bne.n	80064a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01a      	beq.n	80064b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3310      	adds	r3, #16
 8006484:	4618      	mov	r0, r3
 8006486:	f001 fc4f 	bl	8007d28 <xTaskRemoveFromEventList>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <xQueueGenericReset+0xcc>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	e009      	b.n	80064b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3310      	adds	r3, #16
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fef2 	bl	8006290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3324      	adds	r3, #36	; 0x24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff feed 	bl	8006290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f002 fc85 	bl	8008dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ba:	2301      	movs	r3, #1
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08e      	sub	sp, #56	; 0x38
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <xQueueGenericCreateStatic+0x52>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <xQueueGenericCreateStatic+0x56>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <xQueueGenericCreateStatic+0x58>
 800651e:	2300      	movs	r3, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	623b      	str	r3, [r7, #32]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <xQueueGenericCreateStatic+0x7e>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueGenericCreateStatic+0x82>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueGenericCreateStatic+0x84>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	61fb      	str	r3, [r7, #28]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006566:	2350      	movs	r3, #80	; 0x50
 8006568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b50      	cmp	r3, #80	; 0x50
 800656e:	d00a      	beq.n	8006586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	61bb      	str	r3, [r7, #24]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800659a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f83f 	bl	800662c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3730      	adds	r7, #48	; 0x30
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	613b      	str	r3, [r7, #16]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3350      	adds	r3, #80	; 0x50
 80065f0:	4618      	mov	r0, r3
 80065f2:	f002 fcd9 	bl	8008fa8 <pvPortMalloc>
 80065f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	3350      	adds	r3, #80	; 0x50
 8006606:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006610:	79fa      	ldrb	r2, [r7, #7]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f805 	bl	800662c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006622:	69bb      	ldr	r3, [r7, #24]
	}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e002      	b.n	800664e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800665a:	2101      	movs	r1, #1
 800665c:	69b8      	ldr	r0, [r7, #24]
 800665e:	f7ff fecb 	bl	80063f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006672:	b580      	push	{r7, lr}
 8006674:	b08a      	sub	sp, #40	; 0x28
 8006676:	af02      	add	r7, sp, #8
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	61bb      	str	r3, [r7, #24]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d90a      	bls.n	80066b8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066b8:	2302      	movs	r3, #2
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff ff00 	bl	80064c8 <xQueueGenericCreateStatic>
 80066c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066d6:	69fb      	ldr	r3, [r7, #28]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	613b      	str	r3, [r7, #16]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d90a      	bls.n	8006724 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006724:	2202      	movs	r2, #2
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff45 	bl	80065b8 <xQueueGenericCreate>
 800672e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800673c:	697b      	ldr	r3, [r7, #20]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	; 0x38
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xQueueGenericSend+0x32>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <xQueueGenericSend+0x40>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <xQueueGenericSend+0x44>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <xQueueGenericSend+0x46>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <xQueueGenericSend+0x60>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d103      	bne.n	80067b6 <xQueueGenericSend+0x6e>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <xQueueGenericSend+0x72>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGenericSend+0x74>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d6:	f001 fc6b 	bl	80080b0 <xTaskGetSchedulerState>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <xQueueGenericSend+0x9e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <xQueueGenericSend+0xa2>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueGenericSend+0xa4>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueGenericSend+0xbe>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	61fb      	str	r3, [r7, #28]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006806:	f002 faad 	bl	8008d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <xQueueGenericSend+0xd4>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d129      	bne.n	8006870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006822:	f000 fc5e 	bl	80070e2 <prvCopyDataToQueue>
 8006826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fa77 	bl	8007d28 <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d013      	beq.n	8006868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <xQueueGenericSend+0x1f8>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e00a      	b.n	8006868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006858:	4b39      	ldr	r3, [pc, #228]	; (8006940 <xQueueGenericSend+0x1f8>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006868:	f002 faac 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 800686c:	2301      	movs	r3, #1
 800686e:	e063      	b.n	8006938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006876:	f002 faa5 	bl	8008dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800687a:	2300      	movs	r3, #0
 800687c:	e05c      	b.n	8006938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fab1 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006892:	f002 fa97 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006896:	f001 f81d 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689a:	f002 fa63 	bl	8008d64 <vPortEnterCritical>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d103      	bne.n	80068b4 <xQueueGenericSend+0x16c>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSend+0x182>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ca:	f002 fa7b 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 faa0 	bl	8007e1c <xTaskCheckForTimeOut>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d124      	bne.n	800692c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e4:	f000 fcf5 	bl	80072d2 <prvIsQueueFull>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f9c6 	bl	8007c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068fe:	f000 fc80 	bl	8007202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006902:	f000 fff5 	bl	80078f0 <xTaskResumeAll>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	f47f af7c 	bne.w	8006806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <xQueueGenericSend+0x1f8>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e772      	b.n	8006806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006922:	f000 fc6e 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 ffe3 	bl	80078f0 <xTaskResumeAll>
 800692a:	e76c      	b.n	8006806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800692c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692e:	f000 fc68 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 ffdd 	bl	80078f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b090      	sub	sp, #64	; 0x40
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <xQueueGenericSendFromISR+0x3c>
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <xQueueGenericSendFromISR+0x40>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <xQueueGenericSendFromISR+0x42>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSendFromISR+0x6a>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSendFromISR+0x6e>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSendFromISR+0x70>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ce:	f002 faab 	bl	8008f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069d2:	f3ef 8211 	mrs	r2, BASEPRI
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	61fa      	str	r2, [r7, #28]
 80069e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <xQueueGenericSendFromISR+0xbc>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d12f      	bne.n	8006a60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a16:	f000 fb64 	bl	80070e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d112      	bne.n	8006a4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 f979 	bl	8007d28 <xTaskRemoveFromEventList>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e007      	b.n	8006a5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	b25a      	sxtb	r2, r3
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a5e:	e001      	b.n	8006a64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3740      	adds	r7, #64	; 0x40
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08e      	sub	sp, #56	; 0x38
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	623b      	str	r3, [r7, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	61fb      	str	r3, [r7, #28]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGiveFromISR+0x58>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGiveFromISR+0x5c>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGiveFromISR+0x5e>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	61bb      	str	r3, [r7, #24]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af2:	f002 fa19 	bl	8008f28 <vPortValidateInterruptPriority>
	__asm volatile
 8006af6:	f3ef 8211 	mrs	r2, BASEPRI
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	617a      	str	r2, [r7, #20]
 8006b0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d22b      	bcs.n	8006b7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d112      	bne.n	8006b64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	3324      	adds	r3, #36	; 0x24
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 f8ec 	bl	8007d28 <xTaskRemoveFromEventList>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00e      	beq.n	8006b74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e007      	b.n	8006b74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b68:	3301      	adds	r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	b25a      	sxtb	r2, r3
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b74:	2301      	movs	r3, #1
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	e001      	b.n	8006b7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f383 8811 	msr	BASEPRI, r3
}
 8006b88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3738      	adds	r7, #56	; 0x38
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	; 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xQueueReceive+0x30>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	623b      	str	r3, [r7, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <xQueueReceive+0x3e>
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <xQueueReceive+0x42>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueReceive+0x44>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueReceive+0x5e>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61fb      	str	r3, [r7, #28]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf2:	f001 fa5d 	bl	80080b0 <xTaskGetSchedulerState>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <xQueueReceive+0x6e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <xQueueReceive+0x72>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <xQueueReceive+0x74>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueReceive+0x8e>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61bb      	str	r3, [r7, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c22:	f002 f89f 	bl	8008d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01f      	beq.n	8006c72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c36:	f000 fabe 	bl	80071b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	1e5a      	subs	r2, r3, #1
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00f      	beq.n	8006c6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	3310      	adds	r3, #16
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f86a 	bl	8007d28 <xTaskRemoveFromEventList>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c5a:	4b3d      	ldr	r3, [pc, #244]	; (8006d50 <xQueueReceive+0x1bc>)
 8006c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c6a:	f002 f8ab 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e069      	b.n	8006d46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c78:	f002 f8a4 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e062      	b.n	8006d46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c86:	f107 0310 	add.w	r3, r7, #16
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 f8b0 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c94:	f002 f896 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c98:	f000 fe1c 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c9c:	f002 f862 	bl	8008d64 <vPortEnterCritical>
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d103      	bne.n	8006cb6 <xQueueReceive+0x122>
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d103      	bne.n	8006ccc <xQueueReceive+0x138>
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ccc:	f002 f87a 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd0:	1d3a      	adds	r2, r7, #4
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 f89f 	bl	8007e1c <xTaskCheckForTimeOut>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d123      	bne.n	8006d2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 fade 	bl	80072a6 <prvIsQueueEmpty>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d017      	beq.n	8006d20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	3324      	adds	r3, #36	; 0x24
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ffc5 	bl	8007c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d00:	f000 fa7f 	bl	8007202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d04:	f000 fdf4 	bl	80078f0 <xTaskResumeAll>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d189      	bne.n	8006c22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <xQueueReceive+0x1bc>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	e780      	b.n	8006c22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d22:	f000 fa6e 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d26:	f000 fde3 	bl	80078f0 <xTaskResumeAll>
 8006d2a:	e77a      	b.n	8006c22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2e:	f000 fa68 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d32:	f000 fddd 	bl	80078f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d38:	f000 fab5 	bl	80072a6 <prvIsQueueEmpty>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f43f af6f 	beq.w	8006c22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08e      	sub	sp, #56	; 0x38
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	623b      	str	r3, [r7, #32]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	61fb      	str	r3, [r7, #28]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006da4:	f001 f984 	bl	80080b0 <xTaskGetSchedulerState>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <xQueueSemaphoreTake+0x60>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <xQueueSemaphoreTake+0x64>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <xQueueSemaphoreTake+0x66>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	61bb      	str	r3, [r7, #24]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dd4:	f001 ffc6 	bl	8008d64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d024      	beq.n	8006e2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	1e5a      	subs	r2, r3, #1
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006df4:	f001 fad2 	bl	800839c <pvTaskIncrementMutexHeldCount>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00f      	beq.n	8006e26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	3310      	adds	r3, #16
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 ff8c 	bl	8007d28 <xTaskRemoveFromEventList>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e16:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <xQueueSemaphoreTake+0x214>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e26:	f001 ffcd 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e097      	b.n	8006f5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d111      	bne.n	8006e58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	617b      	str	r3, [r7, #20]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e50:	f001 ffb8 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e082      	b.n	8006f5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 ffc4 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6c:	f001 ffaa 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e70:	f000 fd30 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e74:	f001 ff76 	bl	8008d64 <vPortEnterCritical>
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d103      	bne.n	8006e8e <xQueueSemaphoreTake+0x13a>
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d103      	bne.n	8006ea4 <xQueueSemaphoreTake+0x150>
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea4:	f001 ff8e 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 ffb3 	bl	8007e1c <xTaskCheckForTimeOut>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d132      	bne.n	8006f22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ebe:	f000 f9f2 	bl	80072a6 <prvIsQueueEmpty>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d026      	beq.n	8006f16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ed0:	f001 ff48 	bl	8008d64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f907 	bl	80080ec <xTaskPriorityInherit>
 8006ede:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ee0:	f001 ff70 	bl	8008dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	3324      	adds	r3, #36	; 0x24
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fecb 	bl	8007c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef4:	f000 f985 	bl	8007202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ef8:	f000 fcfa 	bl	80078f0 <xTaskResumeAll>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f af68 	bne.w	8006dd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f04:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <xQueueSemaphoreTake+0x214>)
 8006f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	e75e      	b.n	8006dd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f18:	f000 f973 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f1c:	f000 fce8 	bl	80078f0 <xTaskResumeAll>
 8006f20:	e758      	b.n	8006dd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f24:	f000 f96d 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f28:	f000 fce2 	bl	80078f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f2e:	f000 f9ba 	bl	80072a6 <prvIsQueueEmpty>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f43f af4d 	beq.w	8006dd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f40:	f001 ff10 	bl	8008d64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f46:	f000 f8b4 	bl	80070b2 <prvGetDisinheritPriorityAfterTimeout>
 8006f4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 f9a0 	bl	8008298 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f58:	f001 ff34 	bl	8008dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3738      	adds	r7, #56	; 0x38
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	; 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	623b      	str	r3, [r7, #32]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <xQueueReceiveFromISR+0x3a>
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <xQueueReceiveFromISR+0x3e>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <xQueueReceiveFromISR+0x40>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	61fb      	str	r3, [r7, #28]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fc6:	f001 ffaf 	bl	8008f28 <vPortValidateInterruptPriority>
	__asm volatile
 8006fca:	f3ef 8211 	mrs	r2, BASEPRI
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	61ba      	str	r2, [r7, #24]
 8006fe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02f      	beq.n	8007052 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007000:	f000 f8d9 	bl	80071b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	1e5a      	subs	r2, r3, #1
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800700c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d112      	bne.n	800703c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	3310      	adds	r3, #16
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fe80 	bl	8007d28 <xTaskRemoveFromEventList>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e007      	b.n	800704c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800703c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007040:	3301      	adds	r3, #1
 8007042:	b2db      	uxtb	r3, r3
 8007044:	b25a      	sxtb	r2, r3
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800704c:	2301      	movs	r3, #1
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
 8007050:	e001      	b.n	8007056 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f383 8811 	msr	BASEPRI, r3
}
 8007060:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007064:	4618      	mov	r0, r3
 8007066:	3738      	adds	r7, #56	; 0x38
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <vQueueDelete+0x28>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60bb      	str	r3, [r7, #8]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f95f 	bl	8007358 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f002 f84b 	bl	8009140 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e001      	b.n	80070d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070d4:	68fb      	ldr	r3, [r7, #12]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b086      	sub	sp, #24
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10d      	bne.n	800711c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d14d      	bne.n	80071a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f855 	bl	80081bc <xTaskPriorityDisinherit>
 8007112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
 800711a:	e043      	b.n	80071a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d119      	bne.n	8007156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6858      	ldr	r0, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	461a      	mov	r2, r3
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	f016 fe82 	bl	801de36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d32b      	bcc.n	80071a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	605a      	str	r2, [r3, #4]
 8007154:	e026      	b.n	80071a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68d8      	ldr	r0, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	461a      	mov	r2, r3
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	f016 fe68 	bl	801de36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	425b      	negs	r3, r3
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d207      	bcs.n	8007192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	425b      	negs	r3, r3
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d105      	bne.n	80071a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071ac:	697b      	ldr	r3, [r7, #20]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d018      	beq.n	80071fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d303      	bcc.n	80071ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68d9      	ldr	r1, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	461a      	mov	r2, r3
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f016 fe1e 	bl	801de36 <memcpy>
	}
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800720a:	f001 fdab 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007216:	e011      	b.n	800723c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d012      	beq.n	8007246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3324      	adds	r3, #36	; 0x24
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fd7f 	bl	8007d28 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007230:	f000 fe56 	bl	8007ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	3b01      	subs	r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800723c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dce9      	bgt.n	8007218 <prvUnlockQueue+0x16>
 8007244:	e000      	b.n	8007248 <prvUnlockQueue+0x46>
					break;
 8007246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	22ff      	movs	r2, #255	; 0xff
 800724c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007250:	f001 fdb8 	bl	8008dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007254:	f001 fd86 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007260:	e011      	b.n	8007286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d012      	beq.n	8007290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fd5a 	bl	8007d28 <xTaskRemoveFromEventList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800727a:	f000 fe31 	bl	8007ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	3b01      	subs	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	dce9      	bgt.n	8007262 <prvUnlockQueue+0x60>
 800728e:	e000      	b.n	8007292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800729a:	f001 fd93 	bl	8008dc4 <vPortExitCritical>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ae:	f001 fd59 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e001      	b.n	80072c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072c4:	f001 fd7e 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072da:	f001 fd43 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d102      	bne.n	80072f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e001      	b.n	80072f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072f4:	f001 fd66 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e014      	b.n	800733e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007314:	4a0f      	ldr	r2, [pc, #60]	; (8007354 <vQueueAddToRegistry+0x50>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007320:	490c      	ldr	r1, [pc, #48]	; (8007354 <vQueueAddToRegistry+0x50>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800732a:	4a0a      	ldr	r2, [pc, #40]	; (8007354 <vQueueAddToRegistry+0x50>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007336:	e006      	b.n	8007346 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b07      	cmp	r3, #7
 8007342:	d9e7      	bls.n	8007314 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	24000a8c 	.word	0x24000a8c

08007358 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e016      	b.n	8007394 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007366:	4a10      	ldr	r2, [pc, #64]	; (80073a8 <vQueueUnregisterQueue+0x50>)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d10b      	bne.n	800738e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007376:	4a0c      	ldr	r2, [pc, #48]	; (80073a8 <vQueueUnregisterQueue+0x50>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2100      	movs	r1, #0
 800737c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007380:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <vQueueUnregisterQueue+0x50>)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	2200      	movs	r2, #0
 800738a:	605a      	str	r2, [r3, #4]
				break;
 800738c:	e006      	b.n	800739c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b07      	cmp	r3, #7
 8007398:	d9e5      	bls.n	8007366 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	24000a8c 	.word	0x24000a8c

080073ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073bc:	f001 fcd2 	bl	8008d64 <vPortEnterCritical>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d103      	bne.n	80073d6 <vQueueWaitForMessageRestricted+0x2a>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e2:	d103      	bne.n	80073ec <vQueueWaitForMessageRestricted+0x40>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ec:	f001 fcea 	bl	8008dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	3324      	adds	r3, #36	; 0x24
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fc65 	bl	8007cd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007406:	6978      	ldr	r0, [r7, #20]
 8007408:	f7ff fefb 	bl	8007202 <prvUnlockQueue>
	}
 800740c:	bf00      	nop
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af04      	add	r7, sp, #16
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	623b      	str	r3, [r7, #32]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xTaskCreateStatic+0x46>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61fb      	str	r3, [r7, #28]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800745a:	23ac      	movs	r3, #172	; 0xac
 800745c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2bac      	cmp	r3, #172	; 0xac
 8007462:	d00a      	beq.n	800747a <xTaskCreateStatic+0x66>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	61bb      	str	r3, [r7, #24]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800747a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01e      	beq.n	80074c0 <xTaskCreateStatic+0xac>
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007490:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	2202      	movs	r2, #2
 8007496:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800749a:	2300      	movs	r3, #0
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	9302      	str	r3, [sp, #8]
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f850 	bl	8007558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ba:	f000 f8f7 	bl	80076ac <prvAddNewTaskToReadyList>
 80074be:	e001      	b.n	80074c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074c4:	697b      	ldr	r3, [r7, #20]
	}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3728      	adds	r7, #40	; 0x28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b08c      	sub	sp, #48	; 0x30
 80074d2:	af04      	add	r7, sp, #16
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fd60 	bl	8008fa8 <pvPortMalloc>
 80074e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074f0:	20ac      	movs	r0, #172	; 0xac
 80074f2:	f001 fd59 	bl	8008fa8 <pvPortMalloc>
 80074f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
 8007504:	e005      	b.n	8007512 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007506:	6978      	ldr	r0, [r7, #20]
 8007508:	f001 fe1a 	bl	8009140 <vPortFree>
 800750c:	e001      	b.n	8007512 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	2300      	movs	r3, #0
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f80e 	bl	8007558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800753c:	69f8      	ldr	r0, [r7, #28]
 800753e:	f000 f8b5 	bl	80076ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007542:	2301      	movs	r3, #1
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e002      	b.n	800754e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800754e:	69bb      	ldr	r3, [r7, #24]
	}
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	461a      	mov	r2, r3
 8007570:	21a5      	movs	r1, #165	; 0xa5
 8007572:	f016 fb3a 	bl	801dbea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007580:	440b      	add	r3, r1
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	617b      	str	r3, [r7, #20]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d01f      	beq.n	80075f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e012      	b.n	80075e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	7819      	ldrb	r1, [r3, #0]
 80075c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	3334      	adds	r3, #52	; 0x34
 80075cc:	460a      	mov	r2, r1
 80075ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b0f      	cmp	r3, #15
 80075e6:	d9e9      	bls.n	80075bc <prvInitialiseNewTask+0x64>
 80075e8:	e000      	b.n	80075ec <prvInitialiseNewTask+0x94>
			{
				break;
 80075ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075f4:	e003      	b.n	80075fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	2b37      	cmp	r3, #55	; 0x37
 8007602:	d901      	bls.n	8007608 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007604:	2337      	movs	r3, #55	; 0x37
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007612:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	2200      	movs	r2, #0
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	3304      	adds	r3, #4
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fe56 	bl	80062d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	3318      	adds	r3, #24
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fe51 	bl	80062d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	2200      	movs	r2, #0
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2200      	movs	r2, #0
 8007656:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	3358      	adds	r3, #88	; 0x58
 800765e:	224c      	movs	r2, #76	; 0x4c
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f016 fac1 	bl	801dbea <memset>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <prvInitialiseNewTask+0x148>)
 800766c:	65da      	str	r2, [r3, #92]	; 0x5c
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <prvInitialiseNewTask+0x14c>)
 8007672:	661a      	str	r2, [r3, #96]	; 0x60
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	4a0c      	ldr	r2, [pc, #48]	; (80076a8 <prvInitialiseNewTask+0x150>)
 8007678:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	68f9      	ldr	r1, [r7, #12]
 800767e:	69b8      	ldr	r0, [r7, #24]
 8007680:	f001 fa42 	bl	8008b08 <pxPortInitialiseStack>
 8007684:	4602      	mov	r2, r0
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	2401b3ac 	.word	0x2401b3ac
 80076a4:	2401b414 	.word	0x2401b414
 80076a8:	2401b47c 	.word	0x2401b47c

080076ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 fb56 	bl	8008d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a2c      	ldr	r2, [pc, #176]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076c2:	4b2c      	ldr	r3, [pc, #176]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ca:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d110      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076d8:	f000 fc28 	bl	8007f2c <prvInitialiseTaskLists>
 80076dc:	e00d      	b.n	80076fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076de:	4b26      	ldr	r3, [pc, #152]	; (8007778 <prvAddNewTaskToReadyList+0xcc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076e6:	4b23      	ldr	r3, [pc, #140]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d802      	bhi.n	80076fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076f4:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076fa:	4b20      	ldr	r3, [pc, #128]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	4a1e      	ldr	r2, [pc, #120]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <prvAddNewTaskToReadyList+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <prvAddNewTaskToReadyList+0x74>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a18      	ldr	r2, [pc, #96]	; (8007780 <prvAddNewTaskToReadyList+0xd4>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <prvAddNewTaskToReadyList+0xd8>)
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fe fdd7 	bl	80062ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800773c:	f001 fb42 	bl	8008dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <prvAddNewTaskToReadyList+0xcc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d207      	bcs.n	8007766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvAddNewTaskToReadyList+0xdc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	24000fa0 	.word	0x24000fa0
 8007774:	24000acc 	.word	0x24000acc
 8007778:	24000fac 	.word	0x24000fac
 800777c:	24000fbc 	.word	0x24000fbc
 8007780:	24000fa8 	.word	0x24000fa8
 8007784:	24000ad0 	.word	0x24000ad0
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <vTaskDelay+0x60>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <vTaskDelay+0x30>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077bc:	f000 f88a 	bl	80078d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fdfe 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077c8:	f000 f892 	bl	80078f0 <xTaskResumeAll>
 80077cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <vTaskDelay+0x64>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	24000fc8 	.word	0x24000fc8
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007802:	463a      	mov	r2, r7
 8007804:	1d39      	adds	r1, r7, #4
 8007806:	f107 0308 	add.w	r3, r7, #8
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fd0c 	bl	8006228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	9202      	str	r2, [sp, #8]
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	2300      	movs	r3, #0
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2300      	movs	r3, #0
 8007820:	460a      	mov	r2, r1
 8007822:	4924      	ldr	r1, [pc, #144]	; (80078b4 <vTaskStartScheduler+0xc0>)
 8007824:	4824      	ldr	r0, [pc, #144]	; (80078b8 <vTaskStartScheduler+0xc4>)
 8007826:	f7ff fdf5 	bl	8007414 <xTaskCreateStatic>
 800782a:	4603      	mov	r3, r0
 800782c:	4a23      	ldr	r2, [pc, #140]	; (80078bc <vTaskStartScheduler+0xc8>)
 800782e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007830:	4b22      	ldr	r3, [pc, #136]	; (80078bc <vTaskStartScheduler+0xc8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e001      	b.n	8007842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d102      	bne.n	800784e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007848:	f000 fe10 	bl	800846c <xTimerCreateTimerTask>
 800784c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d11b      	bne.n	800788c <vTaskStartScheduler+0x98>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007868:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <vTaskStartScheduler+0xcc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3358      	adds	r3, #88	; 0x58
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <vTaskStartScheduler+0xd0>)
 8007870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <vTaskStartScheduler+0xd4>)
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <vTaskStartScheduler+0xd8>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <vTaskStartScheduler+0xdc>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007886:	f001 f9cb 	bl	8008c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800788a:	e00e      	b.n	80078aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d10a      	bne.n	80078aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <vTaskStartScheduler+0xb4>
}
 80078aa:	bf00      	nop
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	0801e910 	.word	0x0801e910
 80078b8:	08007ef9 	.word	0x08007ef9
 80078bc:	24000fc4 	.word	0x24000fc4
 80078c0:	24000acc 	.word	0x24000acc
 80078c4:	240000d8 	.word	0x240000d8
 80078c8:	24000fc0 	.word	0x24000fc0
 80078cc:	24000fac 	.word	0x24000fac
 80078d0:	24000fa4 	.word	0x24000fa4

080078d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <vTaskSuspendAll+0x18>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a03      	ldr	r2, [pc, #12]	; (80078ec <vTaskSuspendAll+0x18>)
 80078e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078e2:	bf00      	nop
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	24000fc8 	.word	0x24000fc8

080078f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078fe:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <xTaskResumeAll+0x118>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xTaskResumeAll+0x2c>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	603b      	str	r3, [r7, #0]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800791c:	f001 fa22 	bl	8008d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007920:	4b39      	ldr	r3, [pc, #228]	; (8007a08 <xTaskResumeAll+0x118>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	4a38      	ldr	r2, [pc, #224]	; (8007a08 <xTaskResumeAll+0x118>)
 8007928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b37      	ldr	r3, [pc, #220]	; (8007a08 <xTaskResumeAll+0x118>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d162      	bne.n	80079f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007932:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <xTaskResumeAll+0x11c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d05e      	beq.n	80079f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800793a:	e02f      	b.n	800799c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793c:	4b34      	ldr	r3, [pc, #208]	; (8007a10 <xTaskResumeAll+0x120>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3318      	adds	r3, #24
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fd2b 	bl	80063a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fd26 	bl	80063a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	4b2d      	ldr	r3, [pc, #180]	; (8007a14 <xTaskResumeAll+0x124>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d903      	bls.n	800796c <xTaskResumeAll+0x7c>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4a2a      	ldr	r2, [pc, #168]	; (8007a14 <xTaskResumeAll+0x124>)
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <xTaskResumeAll+0x128>)
 800797a:	441a      	add	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fe fcb1 	bl	80062ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <xTaskResumeAll+0x12c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <xTaskResumeAll+0x130>)
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799c:	4b1c      	ldr	r3, [pc, #112]	; (8007a10 <xTaskResumeAll+0x120>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1cb      	bne.n	800793c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079aa:	f000 fb61 	bl	8008070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ae:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <xTaskResumeAll+0x134>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d010      	beq.n	80079dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ba:	f000 f847 	bl	8007a4c <xTaskIncrementTick>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079c4:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <xTaskResumeAll+0x130>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f1      	bne.n	80079ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <xTaskResumeAll+0x134>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <xTaskResumeAll+0x130>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <xTaskResumeAll+0x138>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 f9e4 	bl	8008dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80079fc:	68bb      	ldr	r3, [r7, #8]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	24000fc8 	.word	0x24000fc8
 8007a0c:	24000fa0 	.word	0x24000fa0
 8007a10:	24000f60 	.word	0x24000f60
 8007a14:	24000fa8 	.word	0x24000fa8
 8007a18:	24000ad0 	.word	0x24000ad0
 8007a1c:	24000acc 	.word	0x24000acc
 8007a20:	24000fb4 	.word	0x24000fb4
 8007a24:	24000fb0 	.word	0x24000fb0
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <xTaskGetTickCount+0x1c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a38:	687b      	ldr	r3, [r7, #4]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	24000fa4 	.word	0x24000fa4

08007a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a56:	4b4f      	ldr	r3, [pc, #316]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 808f 	bne.w	8007b7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a60:	4b4d      	ldr	r3, [pc, #308]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a68:	4a4b      	ldr	r2, [pc, #300]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d120      	bne.n	8007ab6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a74:	4b49      	ldr	r3, [pc, #292]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	603b      	str	r3, [r7, #0]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xTaskIncrementTick+0x46>
 8007a94:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b41      	ldr	r3, [pc, #260]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a3f      	ldr	r2, [pc, #252]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4a3f      	ldr	r2, [pc, #252]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b3e      	ldr	r3, [pc, #248]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a3d      	ldr	r2, [pc, #244]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	f000 fadd 	bl	8008070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d349      	bcc.n	8007b54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac0:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	4b37      	ldr	r3, [pc, #220]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
					break;
 8007ad2:	e03f      	b.n	8007b54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b31      	ldr	r3, [pc, #196]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d203      	bcs.n	8007af4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aec:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007af2:	e02f      	b.n	8007b54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fc53 	bl	80063a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fc4a 	bl	80063a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4b25      	ldr	r3, [pc, #148]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d903      	bls.n	8007b24 <xTaskIncrementTick+0xd8>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b32:	441a      	add	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7fe fbd5 	bl	80062ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d3b8      	bcc.n	8007ac0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b52:	e7b5      	b.n	8007ac0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b54:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4915      	ldr	r1, [pc, #84]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d901      	bls.n	8007b70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <xTaskIncrementTick+0x16c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e004      	b.n	8007b88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <xTaskIncrementTick+0x170>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <xTaskIncrementTick+0x170>)
 8007b86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	24000fc8 	.word	0x24000fc8
 8007b98:	24000fa4 	.word	0x24000fa4
 8007b9c:	24000f58 	.word	0x24000f58
 8007ba0:	24000f5c 	.word	0x24000f5c
 8007ba4:	24000fb8 	.word	0x24000fb8
 8007ba8:	24000fc0 	.word	0x24000fc0
 8007bac:	24000fa8 	.word	0x24000fa8
 8007bb0:	24000ad0 	.word	0x24000ad0
 8007bb4:	24000acc 	.word	0x24000acc
 8007bb8:	24000fb4 	.word	0x24000fb4
 8007bbc:	24000fb0 	.word	0x24000fb0

08007bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <vTaskSwitchContext+0xb0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <vTaskSwitchContext+0xb4>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bd4:	e046      	b.n	8007c64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007bd6:	4b27      	ldr	r3, [pc, #156]	; (8007c74 <vTaskSwitchContext+0xb4>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	4b26      	ldr	r3, [pc, #152]	; (8007c78 <vTaskSwitchContext+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e010      	b.n	8007c06 <vTaskSwitchContext+0x46>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <vTaskSwitchContext+0x40>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	607b      	str	r3, [r7, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vTaskSwitchContext+0x3e>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	491d      	ldr	r1, [pc, #116]	; (8007c7c <vTaskSwitchContext+0xbc>)
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0e4      	beq.n	8007be4 <vTaskSwitchContext+0x24>
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <vTaskSwitchContext+0xbc>)
 8007c26:	4413      	add	r3, r2
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	605a      	str	r2, [r3, #4]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d104      	bne.n	8007c4a <vTaskSwitchContext+0x8a>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <vTaskSwitchContext+0xc0>)
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4a08      	ldr	r2, [pc, #32]	; (8007c78 <vTaskSwitchContext+0xb8>)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <vTaskSwitchContext+0xc0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3358      	adds	r3, #88	; 0x58
 8007c60:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <vTaskSwitchContext+0xc4>)
 8007c62:	6013      	str	r3, [r2, #0]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	24000fc8 	.word	0x24000fc8
 8007c74:	24000fb4 	.word	0x24000fb4
 8007c78:	24000fa8 	.word	0x24000fa8
 8007c7c:	24000ad0 	.word	0x24000ad0
 8007c80:	24000acc 	.word	0x24000acc
 8007c84:	240000d8 	.word	0x240000d8

08007c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <vTaskPlaceOnEventList+0x44>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3318      	adds	r3, #24
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fe fb3b 	bl	8006332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6838      	ldr	r0, [r7, #0]
 8007cc0:	f000 fb80 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	24000acc 	.word	0x24000acc

08007cd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	617b      	str	r3, [r7, #20]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3318      	adds	r3, #24
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7fe faf2 	bl	80062ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	68b8      	ldr	r0, [r7, #8]
 8007d16:	f000 fb55 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
	}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	24000acc 	.word	0x24000acc

08007d28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3318      	adds	r3, #24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fb23 	bl	80063a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d5e:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <xTaskRemoveFromEventList+0xb0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d11d      	bne.n	8007da2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fb1a 	bl	80063a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d903      	bls.n	8007d84 <xTaskRemoveFromEventList+0x5c>
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <xTaskRemoveFromEventList+0xb8>)
 8007d92:	441a      	add	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	f7fe faa5 	bl	80062ea <vListInsertEnd>
 8007da0:	e005      	b.n	8007dae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4619      	mov	r1, r3
 8007da8:	480e      	ldr	r0, [pc, #56]	; (8007de4 <xTaskRemoveFromEventList+0xbc>)
 8007daa:	f7fe fa9e 	bl	80062ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <xTaskRemoveFromEventList+0xc0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d905      	bls.n	8007dc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <xTaskRemoveFromEventList+0xc4>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	e001      	b.n	8007dcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	24000fc8 	.word	0x24000fc8
 8007ddc:	24000fa8 	.word	0x24000fa8
 8007de0:	24000ad0 	.word	0x24000ad0
 8007de4:	24000f60 	.word	0x24000f60
 8007de8:	24000acc 	.word	0x24000acc
 8007dec:	24000fb4 	.word	0x24000fb4

08007df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <vTaskInternalSetTimeOutState+0x24>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <vTaskInternalSetTimeOutState+0x28>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	24000fb8 	.word	0x24000fb8
 8007e18:	24000fa4 	.word	0x24000fa4

08007e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e5e:	f000 ff81 	bl	8008d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e62:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <xTaskCheckForTimeOut+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d102      	bne.n	8007e82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e023      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <xTaskCheckForTimeOut+0xc0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d007      	beq.n	8007e9e <xTaskCheckForTimeOut+0x82>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d302      	bcc.n	8007e9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	e015      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d20b      	bcs.n	8007ec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ff9b 	bl	8007df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	e004      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eca:	f000 ff7b 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 8007ece:	69fb      	ldr	r3, [r7, #28]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	24000fa4 	.word	0x24000fa4
 8007edc:	24000fb8 	.word	0x24000fb8

08007ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <vTaskMissedYield+0x14>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	24000fb4 	.word	0x24000fb4

08007ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f00:	f000 f854 	bl	8007fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f04:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <prvIdleTask+0x2c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d907      	bls.n	8007f1c <prvIdleTask+0x24>
			{
				taskYIELD();
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <prvIdleTask+0x30>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007f1c:	f7f8 fbf6 	bl	800070c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007f20:	e7ee      	b.n	8007f00 <prvIdleTask+0x8>
 8007f22:	bf00      	nop
 8007f24:	24000ad0 	.word	0x24000ad0
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f32:	2300      	movs	r3, #0
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	e00c      	b.n	8007f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4a12      	ldr	r2, [pc, #72]	; (8007f8c <prvInitialiseTaskLists+0x60>)
 8007f44:	4413      	add	r3, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe f9a2 	bl	8006290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b37      	cmp	r3, #55	; 0x37
 8007f56:	d9ef      	bls.n	8007f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f58:	480d      	ldr	r0, [pc, #52]	; (8007f90 <prvInitialiseTaskLists+0x64>)
 8007f5a:	f7fe f999 	bl	8006290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f5e:	480d      	ldr	r0, [pc, #52]	; (8007f94 <prvInitialiseTaskLists+0x68>)
 8007f60:	f7fe f996 	bl	8006290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f64:	480c      	ldr	r0, [pc, #48]	; (8007f98 <prvInitialiseTaskLists+0x6c>)
 8007f66:	f7fe f993 	bl	8006290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f6a:	480c      	ldr	r0, [pc, #48]	; (8007f9c <prvInitialiseTaskLists+0x70>)
 8007f6c:	f7fe f990 	bl	8006290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f70:	480b      	ldr	r0, [pc, #44]	; (8007fa0 <prvInitialiseTaskLists+0x74>)
 8007f72:	f7fe f98d 	bl	8006290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <prvInitialiseTaskLists+0x78>)
 8007f78:	4a05      	ldr	r2, [pc, #20]	; (8007f90 <prvInitialiseTaskLists+0x64>)
 8007f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <prvInitialiseTaskLists+0x7c>)
 8007f7e:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <prvInitialiseTaskLists+0x68>)
 8007f80:	601a      	str	r2, [r3, #0]
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	24000ad0 	.word	0x24000ad0
 8007f90:	24000f30 	.word	0x24000f30
 8007f94:	24000f44 	.word	0x24000f44
 8007f98:	24000f60 	.word	0x24000f60
 8007f9c:	24000f74 	.word	0x24000f74
 8007fa0:	24000f8c 	.word	0x24000f8c
 8007fa4:	24000f58 	.word	0x24000f58
 8007fa8:	24000f5c 	.word	0x24000f5c

08007fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb2:	e019      	b.n	8007fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fb4:	f000 fed6 	bl	8008d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb8:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <prvCheckTasksWaitingTermination+0x50>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe f9ed 	bl	80063a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fca:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <prvCheckTasksWaitingTermination+0x54>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4a0b      	ldr	r2, [pc, #44]	; (8008000 <prvCheckTasksWaitingTermination+0x54>)
 8007fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fde:	f000 fef1 	bl	8008dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f810 	bl	8008008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe8:	4b06      	ldr	r3, [pc, #24]	; (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e1      	bne.n	8007fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	24000f74 	.word	0x24000f74
 8008000:	24000fa0 	.word	0x24000fa0
 8008004:	24000f88 	.word	0x24000f88

08008008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3358      	adds	r3, #88	; 0x58
 8008014:	4618      	mov	r0, r3
 8008016:	f015 fe31 	bl	801dc7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8008020:	2b00      	cmp	r3, #0
 8008022:	d108      	bne.n	8008036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	4618      	mov	r0, r3
 800802a:	f001 f889 	bl	8009140 <vPortFree>
				vPortFree( pxTCB );
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f886 	bl	8009140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008034:	e018      	b.n	8008068 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800803c:	2b01      	cmp	r3, #1
 800803e:	d103      	bne.n	8008048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f87d 	bl	8009140 <vPortFree>
	}
 8008046:	e00f      	b.n	8008068 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800804e:	2b02      	cmp	r3, #2
 8008050:	d00a      	beq.n	8008068 <prvDeleteTCB+0x60>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60fb      	str	r3, [r7, #12]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <prvDeleteTCB+0x5e>
	}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <prvResetNextTaskUnblockTime+0x38>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <prvResetNextTaskUnblockTime+0x3c>)
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008088:	e008      	b.n	800809c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <prvResetNextTaskUnblockTime+0x38>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a04      	ldr	r2, [pc, #16]	; (80080ac <prvResetNextTaskUnblockTime+0x3c>)
 800809a:	6013      	str	r3, [r2, #0]
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	24000f58 	.word	0x24000f58
 80080ac:	24000fc0 	.word	0x24000fc0

080080b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <xTaskGetSchedulerState+0x34>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080be:	2301      	movs	r3, #1
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	e008      	b.n	80080d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c4:	4b08      	ldr	r3, [pc, #32]	; (80080e8 <xTaskGetSchedulerState+0x38>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080cc:	2302      	movs	r3, #2
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	e001      	b.n	80080d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080d6:	687b      	ldr	r3, [r7, #4]
	}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	24000fac 	.word	0x24000fac
 80080e8:	24000fc8 	.word	0x24000fc8

080080ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d051      	beq.n	80081a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008106:	4b2a      	ldr	r3, [pc, #168]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	429a      	cmp	r2, r3
 800810e:	d241      	bcs.n	8008194 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	db06      	blt.n	8008126 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6959      	ldr	r1, [r3, #20]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <xTaskPriorityInherit+0xc8>)
 8008138:	4413      	add	r3, r2
 800813a:	4299      	cmp	r1, r3
 800813c:	d122      	bne.n	8008184 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	3304      	adds	r3, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe f92e 	bl	80063a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008148:	4b19      	ldr	r3, [pc, #100]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <xTaskPriorityInherit+0xcc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d903      	bls.n	8008166 <xTaskPriorityInherit+0x7a>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <xTaskPriorityInherit+0xcc>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <xTaskPriorityInherit+0xc8>)
 8008174:	441a      	add	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	3304      	adds	r3, #4
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f7fe f8b4 	bl	80062ea <vListInsertEnd>
 8008182:	e004      	b.n	800818e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800818e:	2301      	movs	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e008      	b.n	80081a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	429a      	cmp	r2, r3
 80081a0:	d201      	bcs.n	80081a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081a6:	68fb      	ldr	r3, [r7, #12]
	}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	24000acc 	.word	0x24000acc
 80081b4:	24000ad0 	.word	0x24000ad0
 80081b8:	24000fa8 	.word	0x24000fa8

080081bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d056      	beq.n	8008280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081d2:	4b2e      	ldr	r3, [pc, #184]	; (800828c <xTaskPriorityDisinherit+0xd0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d00a      	beq.n	80081f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60fb      	str	r3, [r7, #12]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	60bb      	str	r3, [r7, #8]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	429a      	cmp	r2, r3
 8008224:	d02c      	beq.n	8008280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe f8b6 	bl	80063a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskPriorityDisinherit+0xd4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d903      	bls.n	8008260 <xTaskPriorityDisinherit+0xa4>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <xTaskPriorityDisinherit+0xd4>)
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4a09      	ldr	r2, [pc, #36]	; (8008294 <xTaskPriorityDisinherit+0xd8>)
 800826e:	441a      	add	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe f837 	bl	80062ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	24000acc 	.word	0x24000acc
 8008290:	24000fa8 	.word	0x24000fa8
 8008294:	24000ad0 	.word	0x24000ad0

08008298 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082a6:	2301      	movs	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06a      	beq.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	60fb      	str	r3, [r7, #12]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d902      	bls.n	80082de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	61fb      	str	r3, [r7, #28]
 80082dc:	e002      	b.n	80082e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d04b      	beq.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d146      	bne.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d10a      	bne.n	8008318 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db04      	blt.n	8008336 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	6959      	ldr	r1, [r3, #20]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4a13      	ldr	r2, [pc, #76]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008346:	4413      	add	r3, r2
 8008348:	4299      	cmp	r1, r3
 800834a:	d11c      	bne.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3304      	adds	r3, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe f827 	bl	80063a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d903      	bls.n	800836a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a0c      	ldr	r2, [pc, #48]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4a07      	ldr	r2, [pc, #28]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008378:	441a      	add	r2, r3
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fd ffb2 	bl	80062ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008386:	bf00      	nop
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	24000acc 	.word	0x24000acc
 8008394:	24000ad0 	.word	0x24000ad0
 8008398:	24000fa8 	.word	0x24000fa8

0800839c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083ae:	3201      	adds	r2, #1
 80083b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083b4:	681b      	ldr	r3, [r3, #0]
	}
 80083b6:	4618      	mov	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	24000acc 	.word	0x24000acc

080083c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ce:	4b21      	ldr	r3, [pc, #132]	; (8008454 <prvAddCurrentTaskToDelayedList+0x90>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d4:	4b20      	ldr	r3, [pc, #128]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd ffe2 	bl	80063a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d10a      	bne.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ee:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4819      	ldr	r0, [pc, #100]	; (800845c <prvAddCurrentTaskToDelayedList+0x98>)
 80083f8:	f7fd ff77 	bl	80062ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083fc:	e026      	b.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	429a      	cmp	r2, r3
 8008414:	d209      	bcs.n	800842a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fd ff85 	bl	8006332 <vListInsert>
}
 8008428:	e010      	b.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3304      	adds	r3, #4
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7fd ff7b 	bl	8006332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	d202      	bcs.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008446:	4a08      	ldr	r2, [pc, #32]	; (8008468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6013      	str	r3, [r2, #0]
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	24000fa4 	.word	0x24000fa4
 8008458:	24000acc 	.word	0x24000acc
 800845c:	24000f8c 	.word	0x24000f8c
 8008460:	24000f5c 	.word	0x24000f5c
 8008464:	24000f58 	.word	0x24000f58
 8008468:	24000fc0 	.word	0x24000fc0

0800846c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008476:	f000 fb07 	bl	8008a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800847a:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <xTimerCreateTimerTask+0x80>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d021      	beq.n	80084c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800848a:	1d3a      	adds	r2, r7, #4
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4618      	mov	r0, r3
 8008496:	f7fd fee1 	bl	800625c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	9202      	str	r2, [sp, #8]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	2302      	movs	r3, #2
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	460a      	mov	r2, r1
 80084ac:	4910      	ldr	r1, [pc, #64]	; (80084f0 <xTimerCreateTimerTask+0x84>)
 80084ae:	4811      	ldr	r0, [pc, #68]	; (80084f4 <xTimerCreateTimerTask+0x88>)
 80084b0:	f7fe ffb0 	bl	8007414 <xTaskCreateStatic>
 80084b4:	4603      	mov	r3, r0
 80084b6:	4a10      	ldr	r2, [pc, #64]	; (80084f8 <xTimerCreateTimerTask+0x8c>)
 80084b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <xTimerCreateTimerTask+0x8c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084c2:	2301      	movs	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084e2:	697b      	ldr	r3, [r7, #20]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	24000ffc 	.word	0x24000ffc
 80084f0:	0801e918 	.word	0x0801e918
 80084f4:	08008631 	.word	0x08008631
 80084f8:	24001000 	.word	0x24001000

080084fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	; 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	623b      	str	r3, [r7, #32]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800852a:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <xTimerGenericCommand+0x98>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d02a      	beq.n	8008588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b05      	cmp	r3, #5
 8008542:	dc18      	bgt.n	8008576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008544:	f7ff fdb4 	bl	80080b0 <xTaskGetSchedulerState>
 8008548:	4603      	mov	r3, r0
 800854a:	2b02      	cmp	r3, #2
 800854c:	d109      	bne.n	8008562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800854e:	4b11      	ldr	r3, [pc, #68]	; (8008594 <xTimerGenericCommand+0x98>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f107 0110 	add.w	r1, r7, #16
 8008556:	2300      	movs	r3, #0
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	f7fe f8f5 	bl	8006748 <xQueueGenericSend>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24
 8008560:	e012      	b.n	8008588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <xTimerGenericCommand+0x98>)
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	f107 0110 	add.w	r1, r7, #16
 800856a:	2300      	movs	r3, #0
 800856c:	2200      	movs	r2, #0
 800856e:	f7fe f8eb 	bl	8006748 <xQueueGenericSend>
 8008572:	6278      	str	r0, [r7, #36]	; 0x24
 8008574:	e008      	b.n	8008588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <xTimerGenericCommand+0x98>)
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f107 0110 	add.w	r1, r7, #16
 800857e:	2300      	movs	r3, #0
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	f7fe f9df 	bl	8006944 <xQueueGenericSendFromISR>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800858a:	4618      	mov	r0, r3
 800858c:	3728      	adds	r7, #40	; 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	24000ffc 	.word	0x24000ffc

08008598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a2:	4b22      	ldr	r3, [pc, #136]	; (800862c <prvProcessExpiredTimer+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd fef7 	bl	80063a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d022      	beq.n	800860a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	18d1      	adds	r1, r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	6978      	ldr	r0, [r7, #20]
 80085d2:	f000 f8d1 	bl	8008778 <prvInsertTimerInActiveList>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01f      	beq.n	800861c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085dc:	2300      	movs	r3, #0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	2100      	movs	r1, #0
 80085e6:	6978      	ldr	r0, [r7, #20]
 80085e8:	f7ff ff88 	bl	80084fc <xTimerGenericCommand>
 80085ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d113      	bne.n	800861c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	4798      	blx	r3
}
 8008624:	bf00      	nop
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	24000ff4 	.word	0x24000ff4

08008630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f857 	bl	80086f0 <prvGetNextExpireTime>
 8008642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f803 	bl	8008654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800864e:	f000 f8d5 	bl	80087fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008652:	e7f1      	b.n	8008638 <prvTimerTask+0x8>

08008654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800865e:	f7ff f939 	bl	80078d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f866 	bl	8008738 <prvSampleTimeNow>
 800866c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d130      	bne.n	80086d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <prvProcessTimerOrBlockTask+0x3c>
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	429a      	cmp	r2, r3
 8008680:	d806      	bhi.n	8008690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008682:	f7ff f935 	bl	80078f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff85 	bl	8008598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800868e:	e024      	b.n	80086da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <prvProcessTimerOrBlockTask+0x90>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <prvProcessTimerOrBlockTask+0x50>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <prvProcessTimerOrBlockTask+0x52>
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <prvProcessTimerOrBlockTask+0x94>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7fe fe79 	bl	80073ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ba:	f7ff f919 	bl	80078f0 <xTaskResumeAll>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <prvProcessTimerOrBlockTask+0x98>)
 80086c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	f3bf 8f6f 	isb	sy
}
 80086d4:	e001      	b.n	80086da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086d6:	f7ff f90b 	bl	80078f0 <xTaskResumeAll>
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	24000ff8 	.word	0x24000ff8
 80086e8:	24000ffc 	.word	0x24000ffc
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <prvGetNextExpireTime+0x44>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <prvGetNextExpireTime+0x16>
 8008702:	2201      	movs	r2, #1
 8008704:	e000      	b.n	8008708 <prvGetNextExpireTime+0x18>
 8008706:	2200      	movs	r2, #0
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <prvGetNextExpireTime+0x44>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e001      	b.n	8008724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	24000ff4 	.word	0x24000ff4

08008738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008740:	f7ff f974 	bl	8007a2c <xTaskGetTickCount>
 8008744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvSampleTimeNow+0x3c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d205      	bcs.n	800875c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008750:	f000 f936 	bl	80089c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	e002      	b.n	8008762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008762:	4a04      	ldr	r2, [pc, #16]	; (8008774 <prvSampleTimeNow+0x3c>)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008768:	68fb      	ldr	r3, [r7, #12]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	24001004 	.word	0x24001004

08008778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d812      	bhi.n	80087c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d302      	bcc.n	80087b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e01b      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <prvInsertTimerInActiveList+0x7c>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f7fd fdb8 	bl	8006332 <vListInsert>
 80087c2:	e012      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d206      	bcs.n	80087da <prvInsertTimerInActiveList+0x62>
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e007      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <prvInsertTimerInActiveList+0x80>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fd fda4 	bl	8006332 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087ea:	697b      	ldr	r3, [r7, #20]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	24000ff8 	.word	0x24000ff8
 80087f8:	24000ff4 	.word	0x24000ff4

080087fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	; 0x38
 8008800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008802:	e0ca      	b.n	800899a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da18      	bge.n	800883c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800880a:	1d3b      	adds	r3, r7, #4
 800880c:	3304      	adds	r3, #4
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	61fb      	str	r3, [r7, #28]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	6850      	ldr	r0, [r2, #4]
 8008834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008836:	6892      	ldr	r2, [r2, #8]
 8008838:	4611      	mov	r1, r2
 800883a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f2c0 80ab 	blt.w	800899a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	3304      	adds	r3, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fd fda5 	bl	80063a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800885a:	463b      	mov	r3, r7
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ff6b 	bl	8008738 <prvSampleTimeNow>
 8008862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b09      	cmp	r3, #9
 8008868:	f200 8096 	bhi.w	8008998 <prvProcessReceivedCommands+0x19c>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <prvProcessReceivedCommands+0x78>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	0800889d 	.word	0x0800889d
 8008878:	0800889d 	.word	0x0800889d
 800887c:	0800889d 	.word	0x0800889d
 8008880:	08008911 	.word	0x08008911
 8008884:	08008925 	.word	0x08008925
 8008888:	0800896f 	.word	0x0800896f
 800888c:	0800889d 	.word	0x0800889d
 8008890:	0800889d 	.word	0x0800889d
 8008894:	08008911 	.word	0x08008911
 8008898:	08008925 	.word	0x08008925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	18d1      	adds	r1, r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088bc:	f7ff ff5c 	bl	8008778 <prvInsertTimerInActiveList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d069      	beq.n	800899a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05e      	beq.n	800899a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	441a      	add	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ee:	f7ff fe05 	bl	80084fc <xTimerGenericCommand>
 80088f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d14f      	bne.n	800899a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	61bb      	str	r3, [r7, #24]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008922:	e03a      	b.n	800899a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	617b      	str	r3, [r7, #20]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	18d1      	adds	r1, r2, r3
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008968:	f7ff ff06 	bl	8008778 <prvInsertTimerInActiveList>
					break;
 800896c:	e015      	b.n	800899a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800897c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800897e:	f000 fbdf 	bl	8009140 <vPortFree>
 8008982:	e00a      	b.n	800899a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898a:	f023 0301 	bic.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008996:	e000      	b.n	800899a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800899a:	4b08      	ldr	r3, [pc, #32]	; (80089bc <prvProcessReceivedCommands+0x1c0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1d39      	adds	r1, r7, #4
 80089a0:	2200      	movs	r2, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe f8f6 	bl	8006b94 <xQueueReceive>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f af2a 	bne.w	8008804 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	3730      	adds	r7, #48	; 0x30
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	24000ffc 	.word	0x24000ffc

080089c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089c6:	e048      	b.n	8008a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089c8:	4b2d      	ldr	r3, [pc, #180]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b2b      	ldr	r3, [pc, #172]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3304      	adds	r3, #4
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fd fcdf 	bl	80063a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d02e      	beq.n	8008a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4413      	add	r3, r2
 8008a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d90e      	bls.n	8008a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a1a:	4b19      	ldr	r3, [pc, #100]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fd fc84 	bl	8006332 <vListInsert>
 8008a2a:	e016      	b.n	8008a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	2300      	movs	r3, #0
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff fd60 	bl	80084fc <xTimerGenericCommand>
 8008a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	603b      	str	r3, [r7, #0]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1b1      	bne.n	80089c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <prvSwitchTimerLists+0xc4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a72:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <prvSwitchTimerLists+0xc4>)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6013      	str	r3, [r2, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	24000ff4 	.word	0x24000ff4
 8008a84:	24000ff8 	.word	0x24000ff8

08008a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a8e:	f000 f969 	bl	8008d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d120      	bne.n	8008adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a9a:	4814      	ldr	r0, [pc, #80]	; (8008aec <prvCheckForValidListAndQueue+0x64>)
 8008a9c:	f7fd fbf8 	bl	8006290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008aa0:	4813      	ldr	r0, [pc, #76]	; (8008af0 <prvCheckForValidListAndQueue+0x68>)
 8008aa2:	f7fd fbf5 	bl	8006290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <prvCheckForValidListAndQueue+0x6c>)
 8008aa8:	4a10      	ldr	r2, [pc, #64]	; (8008aec <prvCheckForValidListAndQueue+0x64>)
 8008aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008aac:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <prvCheckForValidListAndQueue+0x70>)
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <prvCheckForValidListAndQueue+0x68>)
 8008ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <prvCheckForValidListAndQueue+0x74>)
 8008ab8:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <prvCheckForValidListAndQueue+0x78>)
 8008aba:	2110      	movs	r1, #16
 8008abc:	200a      	movs	r0, #10
 8008abe:	f7fd fd03 	bl	80064c8 <xQueueGenericCreateStatic>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	490b      	ldr	r1, [pc, #44]	; (8008b04 <prvCheckForValidListAndQueue+0x7c>)
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fc14 	bl	8007304 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008adc:	f000 f972 	bl	8008dc4 <vPortExitCritical>
}
 8008ae0:	bf00      	nop
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	24000ffc 	.word	0x24000ffc
 8008aec:	24000fcc 	.word	0x24000fcc
 8008af0:	24000fe0 	.word	0x24000fe0
 8008af4:	24000ff4 	.word	0x24000ff4
 8008af8:	24000ff8 	.word	0x24000ff8
 8008afc:	240010a8 	.word	0x240010a8
 8008b00:	24001008 	.word	0x24001008
 8008b04:	0801e920 	.word	0x0801e920

08008b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3b04      	subs	r3, #4
 8008b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0201 	bic.w	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b38:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <pxPortInitialiseStack+0x64>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b14      	subs	r3, #20
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f06f 0202 	mvn.w	r2, #2
 8008b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3b20      	subs	r3, #32
 8008b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	08008b71 	.word	0x08008b71

08008b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <prvTaskExitError+0x54>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b82:	d00a      	beq.n	8008b9a <prvTaskExitError+0x2a>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <prvTaskExitError+0x28>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60bb      	str	r3, [r7, #8]
}
 8008bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bae:	bf00      	nop
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0fc      	beq.n	8008bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	24000014 	.word	0x24000014
	...

08008bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <pxCurrentTCBConst2>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	f380 8809 	msr	PSP, r0
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8811 	msr	BASEPRI, r0
 8008bea:	4770      	bx	lr
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst2>:
 8008bf0:	24000acc 	.word	0x24000acc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bf8:	4808      	ldr	r0, [pc, #32]	; (8008c1c <prvPortStartFirstTask+0x24>)
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f380 8808 	msr	MSP, r0
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8814 	msr	CONTROL, r0
 8008c0a:	b662      	cpsie	i
 8008c0c:	b661      	cpsie	f
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	df00      	svc	0
 8008c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed08 	.word	0xe000ed08

08008c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c26:	4b46      	ldr	r3, [pc, #280]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a46      	ldr	r2, [pc, #280]	; (8008d44 <xPortStartScheduler+0x124>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10a      	bne.n	8008c46 <xPortStartScheduler+0x26>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c46:	4b3e      	ldr	r3, [pc, #248]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a3f      	ldr	r2, [pc, #252]	; (8008d48 <xPortStartScheduler+0x128>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10a      	bne.n	8008c66 <xPortStartScheduler+0x46>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c66:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <xPortStartScheduler+0x12c>)
 8008c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <xPortStartScheduler+0x130>)
 8008c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c8e:	4b31      	ldr	r3, [pc, #196]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c94:	e009      	b.n	8008caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d0ef      	beq.n	8008c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f1c3 0307 	rsb	r3, r3, #7
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d00a      	beq.n	8008cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cea:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d0e:	f000 f8dd 	bl	8008ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <xPortStartScheduler+0x13c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d18:	f000 f8fc 	bl	8008f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d28:	f7ff ff66 	bl	8008bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d2c:	f7fe ff48 	bl	8007bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8008d30:	f7ff ff1e 	bl	8008b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed00 	.word	0xe000ed00
 8008d44:	410fc271 	.word	0x410fc271
 8008d48:	410fc270 	.word	0x410fc270
 8008d4c:	e000e400 	.word	0xe000e400
 8008d50:	240010f8 	.word	0x240010f8
 8008d54:	240010fc 	.word	0x240010fc
 8008d58:	e000ed20 	.word	0xe000ed20
 8008d5c:	24000014 	.word	0x24000014
 8008d60:	e000ef34 	.word	0xe000ef34

08008d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	607b      	str	r3, [r7, #4]
}
 8008d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10f      	bne.n	8008db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortEnterCritical+0x5c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	603b      	str	r3, [r7, #0]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vPortEnterCritical+0x4a>
	}
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	24000014 	.word	0x24000014
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <vPortExitCritical+0x50>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <vPortExitCritical+0x24>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	607b      	str	r3, [r7, #4]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <vPortExitCritical+0x50>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <vPortExitCritical+0x50>)
 8008df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008df2:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <vPortExitCritical+0x50>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <vPortExitCritical+0x42>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f383 8811 	msr	BASEPRI, r3
}
 8008e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	24000014 	.word	0x24000014
	...

08008e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e20:	f3ef 8009 	mrs	r0, PSP
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <pxCurrentTCBConst>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	f01e 0f10 	tst.w	lr, #16
 8008e30:	bf08      	it	eq
 8008e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	6010      	str	r0, [r2, #0]
 8008e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e44:	f380 8811 	msr	BASEPRI, r0
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f7fe feb6 	bl	8007bc0 <vTaskSwitchContext>
 8008e54:	f04f 0000 	mov.w	r0, #0
 8008e58:	f380 8811 	msr	BASEPRI, r0
 8008e5c:	bc09      	pop	{r0, r3}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	f01e 0f10 	tst.w	lr, #16
 8008e6a:	bf08      	it	eq
 8008e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e70:	f380 8809 	msr	PSP, r0
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst>:
 8008e80:	24000acc 	.word	0x24000acc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ea2:	f7fe fdd3 	bl	8007a4c <xTaskIncrementTick>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <xPortSysTickHandler+0x40>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f383 8811 	msr	BASEPRI, r3
}
 8008ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <vPortSetupTimerInterrupt+0x38>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <vPortSetupTimerInterrupt+0x3c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <vPortSetupTimerInterrupt+0x40>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	099b      	lsrs	r3, r3, #6
 8008ee8:	4a09      	ldr	r2, [pc, #36]	; (8008f10 <vPortSetupTimerInterrupt+0x44>)
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eee:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000e010 	.word	0xe000e010
 8008f04:	e000e018 	.word	0xe000e018
 8008f08:	24000004 	.word	0x24000004
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	e000e014 	.word	0xe000e014

08008f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f24 <vPortEnableVFP+0x10>
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f1e:	6001      	str	r1, [r0, #0]
 8008f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f22:	bf00      	nop
 8008f24:	e000ed88 	.word	0xe000ed88

08008f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f2e:	f3ef 8305 	mrs	r3, IPSR
 8008f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d914      	bls.n	8008f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f3a:	4a17      	ldr	r2, [pc, #92]	; (8008f98 <vPortValidateInterruptPriority+0x70>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f44:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <vPortValidateInterruptPriority+0x74>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	7afa      	ldrb	r2, [r7, #11]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d20a      	bcs.n	8008f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <vPortValidateInterruptPriority+0x78>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <vPortValidateInterruptPriority+0x7c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d90a      	bls.n	8008f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	603b      	str	r3, [r7, #0]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <vPortValidateInterruptPriority+0x60>
	}
 8008f8a:	bf00      	nop
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	e000e3f0 	.word	0xe000e3f0
 8008f9c:	240010f8 	.word	0x240010f8
 8008fa0:	e000ed0c 	.word	0xe000ed0c
 8008fa4:	240010fc 	.word	0x240010fc

08008fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fb4:	f7fe fc8e 	bl	80078d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <pvPortMalloc+0x180>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fc0:	f000 f920 	bl	8009204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fc4:	4b59      	ldr	r3, [pc, #356]	; (800912c <pvPortMalloc+0x184>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 8093 	bne.w	80090f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01d      	beq.n	8009014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fd8:	2208      	movs	r2, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d014      	beq.n	8009014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <pvPortMalloc+0x6c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d06e      	beq.n	80090f8 <pvPortMalloc+0x150>
 800901a:	4b45      	ldr	r3, [pc, #276]	; (8009130 <pvPortMalloc+0x188>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d869      	bhi.n	80090f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009024:	4b43      	ldr	r3, [pc, #268]	; (8009134 <pvPortMalloc+0x18c>)
 8009026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009028:	4b42      	ldr	r3, [pc, #264]	; (8009134 <pvPortMalloc+0x18c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800902e:	e004      	b.n	800903a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d903      	bls.n	800904c <pvPortMalloc+0xa4>
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f1      	bne.n	8009030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <pvPortMalloc+0x180>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009052:	429a      	cmp	r2, r3
 8009054:	d050      	beq.n	80090f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2208      	movs	r2, #8
 800905c:	4413      	add	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	2308      	movs	r3, #8
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	429a      	cmp	r2, r3
 8009076:	d91f      	bls.n	80090b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <pvPortMalloc+0xf8>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	613b      	str	r3, [r7, #16]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090b2:	69b8      	ldr	r0, [r7, #24]
 80090b4:	f000 f90a 	bl	80092cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <pvPortMalloc+0x188>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <pvPortMalloc+0x188>)
 80090c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <pvPortMalloc+0x188>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <pvPortMalloc+0x190>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d203      	bcs.n	80090da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <pvPortMalloc+0x188>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <pvPortMalloc+0x190>)
 80090d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <pvPortMalloc+0x184>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <pvPortMalloc+0x194>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	4a11      	ldr	r2, [pc, #68]	; (800913c <pvPortMalloc+0x194>)
 80090f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090f8:	f7fe fbfa 	bl	80078f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <pvPortMalloc+0x174>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60fb      	str	r3, [r7, #12]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <pvPortMalloc+0x172>
	return pvReturn;
 800911c:	69fb      	ldr	r3, [r7, #28]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	240197a8 	.word	0x240197a8
 800912c:	240197bc 	.word	0x240197bc
 8009130:	240197ac 	.word	0x240197ac
 8009134:	240197a0 	.word	0x240197a0
 8009138:	240197b0 	.word	0x240197b0
 800913c:	240197b4 	.word	0x240197b4

08009140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04d      	beq.n	80091ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009152:	2308      	movs	r3, #8
 8009154:	425b      	negs	r3, r3
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4413      	add	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <vPortFree+0xb8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4013      	ands	r3, r2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10a      	bne.n	8009184 <vPortFree+0x44>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60fb      	str	r3, [r7, #12]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <vPortFree+0x62>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60bb      	str	r3, [r7, #8]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <vPortFree+0xb8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01e      	beq.n	80091ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11a      	bne.n	80091ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <vPortFree+0xb8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	43db      	mvns	r3, r3
 80091c2:	401a      	ands	r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091c8:	f7fe fb84 	bl	80078d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <vPortFree+0xbc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <vPortFree+0xbc>)
 80091d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 f876 	bl	80092cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <vPortFree+0xc0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <vPortFree+0xc0>)
 80091e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091ea:	f7fe fb81 	bl	80078f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091ee:	bf00      	nop
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	240197bc 	.word	0x240197bc
 80091fc:	240197ac 	.word	0x240197ac
 8009200:	240197b8 	.word	0x240197b8

08009204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800920a:	4b29      	ldr	r3, [pc, #164]	; (80092b0 <prvHeapInit+0xac>)
 800920c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800920e:	4b29      	ldr	r3, [pc, #164]	; (80092b4 <prvHeapInit+0xb0>)
 8009210:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3307      	adds	r3, #7
 8009220:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 0307 	bic.w	r3, r3, #7
 8009228:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	4a20      	ldr	r2, [pc, #128]	; (80092b4 <prvHeapInit+0xb0>)
 8009232:	4413      	add	r3, r2
 8009234:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800923a:	4a1f      	ldr	r2, [pc, #124]	; (80092b8 <prvHeapInit+0xb4>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009240:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <prvHeapInit+0xb4>)
 8009242:	2200      	movs	r2, #0
 8009244:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800924e:	2208      	movs	r2, #8
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1a9b      	subs	r3, r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f023 0307 	bic.w	r3, r3, #7
 800925c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4a16      	ldr	r2, [pc, #88]	; (80092bc <prvHeapInit+0xb8>)
 8009262:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009264:	4b15      	ldr	r3, [pc, #84]	; (80092bc <prvHeapInit+0xb8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2200      	movs	r2, #0
 800926a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <prvHeapInit+0xb8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	1ad2      	subs	r2, r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009282:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <prvHeapInit+0xb8>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <prvHeapInit+0xbc>)
 8009290:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <prvHeapInit+0xc0>)
 8009298:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <prvHeapInit+0xc4>)
 800929c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092a0:	601a      	str	r2, [r3, #0]
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	000186a0 	.word	0x000186a0
 80092b4:	24001100 	.word	0x24001100
 80092b8:	240197a0 	.word	0x240197a0
 80092bc:	240197a8 	.word	0x240197a8
 80092c0:	240197b0 	.word	0x240197b0
 80092c4:	240197ac 	.word	0x240197ac
 80092c8:	240197bc 	.word	0x240197bc

080092cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092d4:	4b28      	ldr	r3, [pc, #160]	; (8009378 <prvInsertBlockIntoFreeList+0xac>)
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e002      	b.n	80092e0 <prvInsertBlockIntoFreeList+0x14>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d8f7      	bhi.n	80092da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	4413      	add	r3, r2
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d108      	bne.n	800930e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	441a      	add	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d118      	bne.n	8009354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b15      	ldr	r3, [pc, #84]	; (800937c <prvInsertBlockIntoFreeList+0xb0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d00d      	beq.n	800934a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	441a      	add	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e008      	b.n	800935c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <prvInsertBlockIntoFreeList+0xb0>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e003      	b.n	800935c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d002      	beq.n	800936a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	240197a0 	.word	0x240197a0
 800937c:	240197a8 	.word	0x240197a8

08009380 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8009392:	f004 f8a1 	bl	800d4d8 <touchgfx_components_init>
  touchgfx_init();
 8009396:	f004 f875 	bl	800d484 <touchgfx_init>
}
 800939a:	bf00      	nop
 800939c:	bd80      	pop	{r7, pc}

0800939e <MX_TouchGFX_Process>:

/**
 * TouchGFX application entry function
 */
void MX_TouchGFX_Process(void)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80093a2:	f004 f8a1 	bl	800d4e8 <touchgfx_taskEntry>
}
 80093a6:	bf00      	nop
 80093a8:	bd80      	pop	{r7, pc}
	...

080093ac <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    {
 80093b4:	4a04      	ldr	r2, [pc, #16]	; (80093c8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	601a      	str	r2, [r3, #0]
    }
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	0801f33c 	.word	0x0801f33c

080093cc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
    }
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f7ff ffe9 	bl	80093ac <_ZN8touchgfx12FontProviderD1Ev>
 80093da:	2104      	movs	r1, #4
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f014 f9d0 	bl	801d782 <_ZdlPvj>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80093f8:	887b      	ldrh	r3, [r7, #2]
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d010      	beq.n	8009420 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80093fe:	2b02      	cmp	r3, #2
 8009400:	dc13      	bgt.n	800942a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8009406:	2b01      	cmp	r3, #1
 8009408:	d005      	beq.n	8009416 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800940a:	e00e      	b.n	800942a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800940c:	f002 fbce 	bl	800bbac <_ZN17TypedTextDatabase8getFontsEv>
 8009410:	4603      	mov	r3, r0
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	e00a      	b.n	800942c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8009416:	f002 fbc9 	bl	800bbac <_ZN17TypedTextDatabase8getFontsEv>
 800941a:	4603      	mov	r3, r0
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	e005      	b.n	800942c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8009420:	f002 fbc4 	bl	800bbac <_ZN17TypedTextDatabase8getFontsEv>
 8009424:	4603      	mov	r3, r0
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	e000      	b.n	800942c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800942a:	2300      	movs	r3, #0
    }
}
 800942c:	4618      	mov	r0, r3
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	4a05      	ldr	r2, [pc, #20]	; (8009454 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff ffb1 	bl	80093ac <_ZN8touchgfx12FontProviderD1Ev>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4618      	mov	r0, r3
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	0801f328 	.word	0x0801f328

08009458 <_ZN23ApplicationFontProviderD0Ev>:
 8009458:	b580      	push	{r7, lr}
 800945a:	b082      	sub	sp, #8
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f7ff ffe7 	bl	8009434 <_ZN23ApplicationFontProviderD1Ev>
 8009466:	2104      	movs	r1, #4
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f014 f98a 	bl	801d782 <_ZdlPvj>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4618      	mov	r0, r3
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
    {
 8009480:	4a04      	ldr	r2, [pc, #16]	; (8009494 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
    }
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	0801f810 	.word	0x0801f810

08009498 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
    }
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff ffe9 	bl	8009478 <_ZN8touchgfx4FontD1Ev>
 80094a6:	2114      	movs	r1, #20
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f014 f96a 	bl	801d782 <_ZdlPvj>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80094b8:	b590      	push	{r4, r7, lr}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80094c4:	887b      	ldrh	r3, [r7, #2]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80094ca:	2300      	movs	r3, #0
 80094cc:	e010      	b.n	80094f0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	681c      	ldr	r4, [r3, #0]
 80094de:	f107 030f 	add.w	r3, r7, #15
 80094e2:	f107 0210 	add.w	r2, r7, #16
 80094e6:	8879      	ldrh	r1, [r7, #2]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	47a0      	blx	r4
 80094ec:	6178      	str	r0, [r7, #20]
        return glyph;
 80094ee:	697b      	ldr	r3, [r7, #20]
    }
 80094f0:	4618      	mov	r0, r3
 80094f2:	371c      	adds	r7, #28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd90      	pop	{r4, r7, pc}

080094f8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80094f8:	b480      	push	{r7}
 80094fa:	b083      	sub	sp, #12
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	89db      	ldrh	r3, [r3, #14]
    }
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800951c:	4618      	mov	r0, r3
 800951e:	370c      	adds	r7, #12
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	88db      	ldrh	r3, [r3, #6]
    }
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	889b      	ldrh	r3, [r3, #4]
    }
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	7a9b      	ldrb	r3, [r3, #10]
 8009564:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009568:	b2db      	uxtb	r3, r3
    }
 800956a:	4618      	mov	r0, r3
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr

08009576 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8009576:	b480      	push	{r7}
 8009578:	b083      	sub	sp, #12
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	7a9b      	ldrb	r3, [r3, #10]
 8009582:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8009586:	b2db      	uxtb	r3, r3
    }
 8009588:	4618      	mov	r0, r3
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	4a05      	ldr	r2, [pc, #20]	; (80095b4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f7ff ff67 	bl	8009478 <_ZN8touchgfx4FontD1Ev>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	080201e4 	.word	0x080201e4

080095b8 <_ZN8touchgfx9ConstFontD0Ev>:
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7ff ffe7 	bl	8009594 <_ZN8touchgfx9ConstFontD1Ev>
 80095c6:	211c      	movs	r1, #28
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f014 f8da 	bl	801d782 <_ZdlPvj>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4618      	mov	r0, r3
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	4a05      	ldr	r2, [pc, #20]	; (80095f8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff ffd3 	bl	8009594 <_ZN8touchgfx9ConstFontD1Ev>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	0801f360 	.word	0x0801f360

080095fc <_ZN8touchgfx13GeneratedFontD0Ev>:
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7ff ffe7 	bl	80095d8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800960a:	212c      	movs	r1, #44	; 0x2c
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f014 f8b8 	bl	801d782 <_ZdlPvj>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4618      	mov	r0, r3
 8009616:	3708      	adds	r7, #8
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}

0800961c <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
    {
 8009624:	4a04      	ldr	r2, [pc, #16]	; (8009638 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	601a      	str	r2, [r3, #0]
    }
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4618      	mov	r0, r3
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	0801f350 	.word	0x0801f350

0800963c <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
    }
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff ffe9 	bl	800961c <_ZN8touchgfx9TypedTextD1Ev>
 800964a:	2108      	movs	r1, #8
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f014 f898 	bl	801d782 <_ZdlPvj>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800968c:	b580      	push	{r7, lr}
 800968e:	b08e      	sub	sp, #56	; 0x38
 8009690:	af0a      	add	r7, sp, #40	; 0x28
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4611      	mov	r1, r2
 8009698:	461a      	mov	r2, r3
 800969a:	460b      	mov	r3, r1
 800969c:	80fb      	strh	r3, [r7, #6]
 800969e:	4613      	mov	r3, r2
 80096a0:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	88b9      	ldrh	r1, [r7, #4]
 80096a6:	88fa      	ldrh	r2, [r7, #6]
 80096a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80096ac:	9308      	str	r3, [sp, #32]
 80096ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80096b6:	9306      	str	r3, [sp, #24]
 80096b8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096bc:	9305      	str	r3, [sp, #20]
 80096be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096c8:	9303      	str	r3, [sp, #12]
 80096ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096ce:	9302      	str	r3, [sp, #8]
 80096d0:	7f3b      	ldrb	r3, [r7, #28]
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	8b3b      	ldrh	r3, [r7, #24]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	460b      	mov	r3, r1
 80096da:	68b9      	ldr	r1, [r7, #8]
 80096dc:	f009 f994 	bl	8012a08 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80096e0:	4a09      	ldr	r2, [pc, #36]	; (8009708 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ea:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096f0:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f6:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096fc:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	0801f360 	.word	0x0801f360

0800970c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	889b      	ldrh	r3, [r3, #4]
 8009720:	0adb      	lsrs	r3, r3, #11
 8009722:	b29b      	uxth	r3, r3
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4413      	add	r3, r2
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4413      	add	r3, r2
}
 8009732:	4618      	mov	r0, r3
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800973e:	b480      	push	{r7}
 8009740:	b089      	sub	sp, #36	; 0x24
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	460b      	mov	r3, r1
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7b1b      	ldrb	r3, [r3, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d101      	bne.n	800975e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800975a:	2300      	movs	r3, #0
 800975c:	e031      	b.n	80097c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1a      	ldr	r2, [r3, #32]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	7b5b      	ldrb	r3, [r3, #13]
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	b21b      	sxth	r3, r3
 800976e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009772:	b219      	sxth	r1, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	7adb      	ldrb	r3, [r3, #11]
 8009778:	b21b      	sxth	r3, r3
 800977a:	430b      	orrs	r3, r1
 800977c:	b21b      	sxth	r3, r3
 800977e:	b29b      	uxth	r3, r3
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	7b1b      	ldrb	r3, [r3, #12]
 800978a:	837b      	strh	r3, [r7, #26]
 800978c:	e013      	b.n	80097b6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	897a      	ldrh	r2, [r7, #10]
 8009794:	429a      	cmp	r2, r3
 8009796:	d103      	bne.n	80097a0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800979e:	e010      	b.n	80097c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	897a      	ldrh	r2, [r7, #10]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d309      	bcc.n	80097be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80097aa:	8b7b      	ldrh	r3, [r7, #26]
 80097ac:	3b01      	subs	r3, #1
 80097ae:	837b      	strh	r3, [r7, #26]
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	3304      	adds	r3, #4
 80097b4:	61fb      	str	r3, [r7, #28]
 80097b6:	8b7b      	ldrh	r3, [r7, #26]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e8      	bne.n	800978e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80097bc:	e000      	b.n	80097c0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80097be:	bf00      	nop
        }
    }
    return 0;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3724      	adds	r7, #36	; 0x24
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
	...

080097d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	4801      	ldr	r0, [pc, #4]	; (80097dc <__tcf_0+0xc>)
 80097d6:	f7ff feff 	bl	80095d8 <_ZN8touchgfx13GeneratedFontD1Ev>
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	240197c0 	.word	0x240197c0

080097e0 <_Z23getFont_verdana_10_4bppv>:
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08e      	sub	sp, #56	; 0x38
 80097e4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80097e6:	4b21      	ldr	r3, [pc, #132]	; (800986c <_Z23getFont_verdana_10_4bppv+0x8c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f3bf 8f5b 	dmb	ish
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bf0c      	ite	eq
 80097f6:	2301      	moveq	r3, #1
 80097f8:	2300      	movne	r3, #0
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d030      	beq.n	8009862 <_Z23getFont_verdana_10_4bppv+0x82>
 8009800:	481a      	ldr	r0, [pc, #104]	; (800986c <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009802:	f013 ffc0 	bl	801d786 <__cxa_guard_acquire>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	bf14      	ite	ne
 800980c:	2301      	movne	r3, #1
 800980e:	2300      	moveq	r3, #0
 8009810:	b2db      	uxtb	r3, r3
 8009812:	2b00      	cmp	r3, #0
 8009814:	d025      	beq.n	8009862 <_Z23getFont_verdana_10_4bppv+0x82>
 8009816:	2300      	movs	r3, #0
 8009818:	930c      	str	r3, [sp, #48]	; 0x30
 800981a:	2300      	movs	r3, #0
 800981c:	930b      	str	r3, [sp, #44]	; 0x2c
 800981e:	2300      	movs	r3, #0
 8009820:	930a      	str	r3, [sp, #40]	; 0x28
 8009822:	233f      	movs	r3, #63	; 0x3f
 8009824:	9309      	str	r3, [sp, #36]	; 0x24
 8009826:	4b12      	ldr	r3, [pc, #72]	; (8009870 <_Z23getFont_verdana_10_4bppv+0x90>)
 8009828:	9308      	str	r3, [sp, #32]
 800982a:	4b12      	ldr	r3, [pc, #72]	; (8009874 <_Z23getFont_verdana_10_4bppv+0x94>)
 800982c:	9307      	str	r3, [sp, #28]
 800982e:	2300      	movs	r3, #0
 8009830:	9306      	str	r3, [sp, #24]
 8009832:	2300      	movs	r3, #0
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	2301      	movs	r3, #1
 8009838:	9304      	str	r3, [sp, #16]
 800983a:	2304      	movs	r3, #4
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	2300      	movs	r3, #0
 8009840:	9302      	str	r3, [sp, #8]
 8009842:	2300      	movs	r3, #0
 8009844:	9301      	str	r3, [sp, #4]
 8009846:	230a      	movs	r3, #10
 8009848:	9300      	str	r3, [sp, #0]
 800984a:	230a      	movs	r3, #10
 800984c:	2201      	movs	r2, #1
 800984e:	490a      	ldr	r1, [pc, #40]	; (8009878 <_Z23getFont_verdana_10_4bppv+0x98>)
 8009850:	480a      	ldr	r0, [pc, #40]	; (800987c <_Z23getFont_verdana_10_4bppv+0x9c>)
 8009852:	f7ff ff1b 	bl	800968c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009856:	480a      	ldr	r0, [pc, #40]	; (8009880 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8009858:	f013 ffe0 	bl	801d81c <atexit>
 800985c:	4803      	ldr	r0, [pc, #12]	; (800986c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800985e:	f013 ff9e 	bl	801d79e <__cxa_guard_release>
    return verdana_10_4bpp;
 8009862:	4b06      	ldr	r3, [pc, #24]	; (800987c <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 8009864:	4618      	mov	r0, r3
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	240197ec 	.word	0x240197ec
 8009870:	08020af0 	.word	0x08020af0
 8009874:	08020b10 	.word	0x08020b10
 8009878:	08020a0c 	.word	0x08020a0c
 800987c:	240197c0 	.word	0x240197c0
 8009880:	080097d1 	.word	0x080097d1

08009884 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 14, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
 8009888:	4801      	ldr	r0, [pc, #4]	; (8009890 <__tcf_0+0xc>)
 800988a:	f7ff fea5 	bl	80095d8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800988e:	bd80      	pop	{r7, pc}
 8009890:	240197f0 	.word	0x240197f0

08009894 <_Z23getFont_verdana_20_4bppv>:
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08e      	sub	sp, #56	; 0x38
 8009898:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 14, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800989a:	4b21      	ldr	r3, [pc, #132]	; (8009920 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f3bf 8f5b 	dmb	ish
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bf0c      	ite	eq
 80098aa:	2301      	moveq	r3, #1
 80098ac:	2300      	movne	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d030      	beq.n	8009916 <_Z23getFont_verdana_20_4bppv+0x82>
 80098b4:	481a      	ldr	r0, [pc, #104]	; (8009920 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098b6:	f013 ff66 	bl	801d786 <__cxa_guard_acquire>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bf14      	ite	ne
 80098c0:	2301      	movne	r3, #1
 80098c2:	2300      	moveq	r3, #0
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d025      	beq.n	8009916 <_Z23getFont_verdana_20_4bppv+0x82>
 80098ca:	2300      	movs	r3, #0
 80098cc:	930c      	str	r3, [sp, #48]	; 0x30
 80098ce:	2300      	movs	r3, #0
 80098d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80098d2:	2300      	movs	r3, #0
 80098d4:	930a      	str	r3, [sp, #40]	; 0x28
 80098d6:	233f      	movs	r3, #63	; 0x3f
 80098d8:	9309      	str	r3, [sp, #36]	; 0x24
 80098da:	4b12      	ldr	r3, [pc, #72]	; (8009924 <_Z23getFont_verdana_20_4bppv+0x90>)
 80098dc:	9308      	str	r3, [sp, #32]
 80098de:	4b12      	ldr	r3, [pc, #72]	; (8009928 <_Z23getFont_verdana_20_4bppv+0x94>)
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	2301      	movs	r3, #1
 80098e4:	9306      	str	r3, [sp, #24]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9305      	str	r3, [sp, #20]
 80098ea:	2301      	movs	r3, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	2304      	movs	r3, #4
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	2300      	movs	r3, #0
 80098f4:	9302      	str	r3, [sp, #8]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	2314      	movs	r3, #20
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	2314      	movs	r3, #20
 8009900:	220e      	movs	r2, #14
 8009902:	490a      	ldr	r1, [pc, #40]	; (800992c <_Z23getFont_verdana_20_4bppv+0x98>)
 8009904:	480a      	ldr	r0, [pc, #40]	; (8009930 <_Z23getFont_verdana_20_4bppv+0x9c>)
 8009906:	f7ff fec1 	bl	800968c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800990a:	480a      	ldr	r0, [pc, #40]	; (8009934 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800990c:	f013 ff86 	bl	801d81c <atexit>
 8009910:	4803      	ldr	r0, [pc, #12]	; (8009920 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009912:	f013 ff44 	bl	801d79e <__cxa_guard_release>
    return verdana_20_4bpp;
 8009916:	4b06      	ldr	r3, [pc, #24]	; (8009930 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009918:	4618      	mov	r0, r3
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	2401981c 	.word	0x2401981c
 8009924:	08020af4 	.word	0x08020af4
 8009928:	08020b14 	.word	0x08020b14
 800992c:	08020a1c 	.word	0x08020a1c
 8009930:	240197f0 	.word	0x240197f0
 8009934:	08009885 	.word	0x08009885

08009938 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
 800993c:	4801      	ldr	r0, [pc, #4]	; (8009944 <__tcf_0+0xc>)
 800993e:	f7ff fe4b 	bl	80095d8 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009942:	bd80      	pop	{r7, pc}
 8009944:	24019820 	.word	0x24019820

08009948 <_Z23getFont_verdana_40_4bppv>:
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08e      	sub	sp, #56	; 0x38
 800994c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800994e:	4b21      	ldr	r3, [pc, #132]	; (80099d4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f3bf 8f5b 	dmb	ish
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	2b00      	cmp	r3, #0
 800995c:	bf0c      	ite	eq
 800995e:	2301      	moveq	r3, #1
 8009960:	2300      	movne	r3, #0
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b00      	cmp	r3, #0
 8009966:	d030      	beq.n	80099ca <_Z23getFont_verdana_40_4bppv+0x82>
 8009968:	481a      	ldr	r0, [pc, #104]	; (80099d4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800996a:	f013 ff0c 	bl	801d786 <__cxa_guard_acquire>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	bf14      	ite	ne
 8009974:	2301      	movne	r3, #1
 8009976:	2300      	moveq	r3, #0
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d025      	beq.n	80099ca <_Z23getFont_verdana_40_4bppv+0x82>
 800997e:	2300      	movs	r3, #0
 8009980:	930c      	str	r3, [sp, #48]	; 0x30
 8009982:	2300      	movs	r3, #0
 8009984:	930b      	str	r3, [sp, #44]	; 0x2c
 8009986:	2300      	movs	r3, #0
 8009988:	930a      	str	r3, [sp, #40]	; 0x28
 800998a:	233f      	movs	r3, #63	; 0x3f
 800998c:	9309      	str	r3, [sp, #36]	; 0x24
 800998e:	4b12      	ldr	r3, [pc, #72]	; (80099d8 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009990:	9308      	str	r3, [sp, #32]
 8009992:	4b12      	ldr	r3, [pc, #72]	; (80099dc <_Z23getFont_verdana_40_4bppv+0x94>)
 8009994:	9307      	str	r3, [sp, #28]
 8009996:	2300      	movs	r3, #0
 8009998:	9306      	str	r3, [sp, #24]
 800999a:	2300      	movs	r3, #0
 800999c:	9305      	str	r3, [sp, #20]
 800999e:	2301      	movs	r3, #1
 80099a0:	9304      	str	r3, [sp, #16]
 80099a2:	2304      	movs	r3, #4
 80099a4:	9303      	str	r3, [sp, #12]
 80099a6:	2300      	movs	r3, #0
 80099a8:	9302      	str	r3, [sp, #8]
 80099aa:	2300      	movs	r3, #0
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	2328      	movs	r3, #40	; 0x28
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	2328      	movs	r3, #40	; 0x28
 80099b4:	2201      	movs	r2, #1
 80099b6:	490a      	ldr	r1, [pc, #40]	; (80099e0 <_Z23getFont_verdana_40_4bppv+0x98>)
 80099b8:	480a      	ldr	r0, [pc, #40]	; (80099e4 <_Z23getFont_verdana_40_4bppv+0x9c>)
 80099ba:	f7ff fe67 	bl	800968c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80099be:	480a      	ldr	r0, [pc, #40]	; (80099e8 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80099c0:	f013 ff2c 	bl	801d81c <atexit>
 80099c4:	4803      	ldr	r0, [pc, #12]	; (80099d4 <_Z23getFont_verdana_40_4bppv+0x8c>)
 80099c6:	f013 feea 	bl	801d79e <__cxa_guard_release>
    return verdana_40_4bpp;
 80099ca:	4b06      	ldr	r3, [pc, #24]	; (80099e4 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	2401984c 	.word	0x2401984c
 80099d8:	08020b0c 	.word	0x08020b0c
 80099dc:	08020b18 	.word	0x08020b18
 80099e0:	08020ae0 	.word	0x08020ae0
 80099e4:	24019820 	.word	0x24019820
 80099e8:	08009939 	.word	0x08009939

080099ec <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009a46:	b480      	push	{r7}
 8009a48:	b083      	sub	sp, #12
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8009a52:	bf00      	nop
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009a5e:	b480      	push	{r7}
 8009a60:	b083      	sub	sp, #12
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
    {
    }
 8009a66:	bf00      	nop
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
    {
    }
 8009a7a:	bf00      	nop
 8009a7c:	370c      	adds	r7, #12
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
	...

08009a88 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
    {
 8009a90:	4a04      	ldr	r2, [pc, #16]	; (8009aa4 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	601a      	str	r2, [r3, #0]
    }
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4618      	mov	r0, r3
 8009a9a:	370c      	adds	r7, #12
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr
 8009aa4:	0801f4e0 	.word	0x0801f4e0

08009aa8 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
    }
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f7ff ffe9 	bl	8009a88 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009ab6:	2104      	movs	r1, #4
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f013 fe62 	bl	801d782 <_ZdlPvj>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
    {
    }
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009b06:	6810      	ldr	r0, [r2, #0]
 8009b08:	6851      	ldr	r1, [r2, #4]
 8009b0a:	c303      	stmia	r3!, {r0, r1}
    }
 8009b0c:	bf00      	nop
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4618      	mov	r0, r3
 8009b26:	f007 fe3d 	bl	80117a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
    {
 8009b3c:	4a04      	ldr	r2, [pc, #16]	; (8009b50 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	601a      	str	r2, [r3, #0]
    }
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr
 8009b50:	0801f4c8 	.word	0x0801f4c8

08009b54 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
    }
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ffe9 	bl	8009b34 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009b62:	2104      	movs	r1, #4
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f013 fe0c 	bl	801d782 <_ZdlPvj>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8009b74:	b480      	push	{r7}
 8009b76:	af00      	add	r7, sp, #0
    {
        return instance;
 8009b78:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
    }
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	2401aa78 	.word	0x2401aa78

08009b8c <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8009b8c:	b480      	push	{r7}
 8009b8e:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8009b90:	4b0b      	ldr	r3, [pc, #44]	; (8009bc0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d008      	beq.n	8009bae <_ZN8touchgfx3HAL3lcdEv+0x22>
 8009b9c:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bac:	e002      	b.n	8009bb4 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8009bae:	4b04      	ldr	r3, [pc, #16]	; (8009bc0 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
    }
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop
 8009bc0:	2401aa78 	.word	0x2401aa78

08009bc4 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8009bcc:	4a07      	ldr	r2, [pc, #28]	; (8009bec <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	605a      	str	r2, [r3, #4]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	721a      	strb	r2, [r3, #8]
    {
    }
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	0801f4a4 	.word	0x0801f4a4

08009bf0 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
    {
 8009bf8:	4a04      	ldr	r2, [pc, #16]	; (8009c0c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	601a      	str	r2, [r3, #0]
    }
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4618      	mov	r0, r3
 8009c02:	370c      	adds	r7, #12
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	0801f4a4 	.word	0x0801f4a4

08009c10 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
    }
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7ff ffe9 	bl	8009bf0 <_ZN8touchgfx10TransitionD1Ev>
 8009c1e:	210c      	movs	r1, #12
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f013 fdae 	bl	801d782 <_ZdlPvj>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3708      	adds	r7, #8
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
    {
    }
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
    {
    }
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
    {
    }
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8009c74:	f007 fd58 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	323c      	adds	r2, #60	; 0x3c
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	4790      	blx	r2
    }
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	605a      	str	r2, [r3, #4]
    }
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	4a05      	ldr	r2, [pc, #20]	; (8009cc8 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7ff fee5 	bl	8009a88 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	08020128 	.word	0x08020128

08009ccc <_ZN8touchgfx11ApplicationD0Ev>:
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f7ff ffe7 	bl	8009ca8 <_ZN8touchgfx11ApplicationD1Ev>
 8009cda:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f013 fd4f 	bl	801d782 <_ZdlPvj>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
	...

08009cf0 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f007 fe24 	bl	8011948 <_ZN8touchgfx11ApplicationC1Ev>
 8009d00:	4a09      	ldr	r2, [pc, #36]	; (8009d28 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a04      	ldr	r2, [pc, #16]	; (8009d2c <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8009d1a:	6013      	str	r3, [r2, #0]
    }
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	0801f450 	.word	0x0801f450
 8009d2c:	2401aac4 	.word	0x2401aac4

08009d30 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 f804 	bl	8009d46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8009d3e:	bf00      	nop
 8009d40:	3708      	adds	r7, #8
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b082      	sub	sp, #8
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d00f      	beq.n	8009d78 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	330c      	adds	r3, #12
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4610      	mov	r0, r2
 8009d6c:	4798      	blx	r3
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d001      	beq.n	8009d78 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009d74:	2301      	movs	r3, #1
 8009d76:	e000      	b.n	8009d7a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00e      	beq.n	8009d9c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	3308      	adds	r3, #8
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4610      	mov	r0, r2
 8009d92:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8009d9c:	bf00      	nop
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	601a      	str	r2, [r3, #0]
    }
 8009db4:	bf00      	nop
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	4a05      	ldr	r2, [pc, #20]	; (8009de0 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7ff ff69 	bl	8009ca8 <_ZN8touchgfx11ApplicationD1Ev>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	0801f450 	.word	0x0801f450

08009de4 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f7ff ffe7 	bl	8009dc0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009df2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f013 fcc3 	bl	801d782 <_ZdlPvj>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	4a08      	ldr	r2, [pc, #32]	; (8009e34 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 facd 	bl	800a3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff ffcb 	bl	8009dc0 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	0801f3e4 	.word	0x0801f3e4

08009e38 <_ZN23FrontendApplicationBaseD0Ev>:
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff ffe1 	bl	8009e08 <_ZN23FrontendApplicationBaseD1Ev>
 8009e46:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f013 fc99 	bl	801d782 <_ZdlPvj>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b082      	sub	sp, #8
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f882 	bl	8009f6c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	721a      	strb	r2, [r3, #8]
    }
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	605a      	str	r2, [r3, #4]
    }
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff ff1a 	bl	8009cf0 <_ZN8touchgfx14MVPApplicationC1Ev>
 8009ebc:	4a16      	ldr	r2, [pc, #88]	; (8009f18 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f000 f8a5 	bl	800a018 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8009ede:	f7ff fe49 	bl	8009b74 <_ZN8touchgfx3HAL11getInstanceEv>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	3208      	adds	r2, #8
 8009ee8:	6812      	ldr	r2, [r2, #0]
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	f001 fde3 	bl	800babc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8009ef6:	f7ff fe49 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 8009efa:	4603      	mov	r3, r0
 8009efc:	4618      	mov	r0, r3
 8009efe:	f00e fb60 	bl	80185c2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8009f02:	f7ff fe43 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 8009f06:	4603      	mov	r3, r0
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f00e fbd1 	bl	80186b0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	0801f3e4 	.word	0x0801f3e4

08009f1c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4618      	mov	r0, r3
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	6039      	str	r1, [r7, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7ff ffe9 	bl	8009f1c <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	605a      	str	r2, [r3, #4]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	3308      	adds	r3, #8
 8009f58:	3208      	adds	r2, #8
 8009f5a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	4618      	mov	r0, r3
 8009f66:	3708      	adds	r7, #8
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8009f6c:	b590      	push	{r4, r7, lr}
 8009f6e:	b089      	sub	sp, #36	; 0x24
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8009f7a:	4b10      	ldr	r3, [pc, #64]	; (8009fbc <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8009f7c:	61bb      	str	r3, [r7, #24]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61fb      	str	r3, [r7, #28]
 8009f82:	f107 0008 	add.w	r0, r7, #8
 8009f86:	f107 0318 	add.w	r3, r7, #24
 8009f8a:	cb0c      	ldmia	r3, {r2, r3}
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	f000 f85f 	bl	800a050 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	4619      	mov	r1, r3
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7ff ffcb 	bl	8009f34 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009f9e:	f107 0308 	add.w	r3, r7, #8
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f000 fa0a 	bl	800a3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8009fb4:	bf00      	nop
 8009fb6:	3724      	adds	r7, #36	; 0x24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd90      	pop	{r4, r7, pc}
 8009fbc:	08009fc1 	.word	0x08009fc1

08009fc0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	4b04      	ldr	r3, [pc, #16]	; (8009ff0 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8009fe0:	4804      	ldr	r0, [pc, #16]	; (8009ff4 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8009fe2:	f000 f867 	bl	800a0b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009fe6:	bf00      	nop
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	2401aab8 	.word	0x2401aab8
 8009ff4:	2401aab4 	.word	0x2401aab4

08009ff8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	4a04      	ldr	r2, [pc, #16]	; (800a014 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	0801f4c8 	.word	0x0801f4c8

0800a018 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4618      	mov	r0, r3
 800a024:	f7ff ffe8 	bl	8009ff8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a028:	4a08      	ldr	r2, [pc, #32]	; (800a04c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	605a      	str	r2, [r3, #4]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	609a      	str	r2, [r3, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	60da      	str	r2, [r3, #12]
    {
    }
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4618      	mov	r0, r3
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	0801f438 	.word	0x0801f438

0800a050 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	4639      	mov	r1, r7
 800a05c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff ffc8 	bl	8009ff8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a068:	4a08      	ldr	r2, [pc, #32]	; (800a08c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	601a      	str	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	605a      	str	r2, [r3, #4]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3308      	adds	r3, #8
 800a078:	463a      	mov	r2, r7
 800a07a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a07e:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	0801f438 	.word	0x0801f438

0800a090 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7ff fd92 	bl	8009bc4 <_ZN8touchgfx10TransitionC1Ev>
 800a0a0:	4a03      	ldr	r2, [pc, #12]	; (800a0b0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	0801f3c0 	.word	0x0801f3c0

0800a0b4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a0b4:	b590      	push	{r4, r7, lr}
 800a0b6:	b08f      	sub	sp, #60	; 0x3c
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
 800a0c0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689a      	ldr	r2, [r3, #8]
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3320      	adds	r3, #32
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4610      	mov	r0, r2
 800a0d2:	4798      	blx	r3
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800a0da:	d205      	bcs.n	800a0e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800a0dc:	4b7d      	ldr	r3, [pc, #500]	; (800a2d4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800a0de:	4a7e      	ldr	r2, [pc, #504]	; (800a2d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a0e0:	21a3      	movs	r1, #163	; 0xa3
 800a0e2:	487e      	ldr	r0, [pc, #504]	; (800a2dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a0e4:	f013 fb7c 	bl	801d7e0 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	3320      	adds	r3, #32
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4798      	blx	r3
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b0f      	cmp	r3, #15
 800a0fe:	d805      	bhi.n	800a10c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800a100:	4b77      	ldr	r3, [pc, #476]	; (800a2e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a102:	4a75      	ldr	r2, [pc, #468]	; (800a2d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a104:	21a4      	movs	r1, #164	; 0xa4
 800a106:	4875      	ldr	r0, [pc, #468]	; (800a2dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a108:	f013 fb6a 	bl	801d7e0 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	68da      	ldr	r2, [r3, #12]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3320      	adds	r3, #32
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4610      	mov	r0, r2
 800a11c:	4798      	blx	r3
 800a11e:	4603      	mov	r3, r0
 800a120:	2b0b      	cmp	r3, #11
 800a122:	d805      	bhi.n	800a130 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800a124:	4b6f      	ldr	r3, [pc, #444]	; (800a2e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a126:	4a6c      	ldr	r2, [pc, #432]	; (800a2d8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a128:	21a5      	movs	r1, #165	; 0xa5
 800a12a:	486c      	ldr	r0, [pc, #432]	; (800a2dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a12c:	f013 fb58 	bl	801d7e0 <__assert_func>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	62bb      	str	r3, [r7, #40]	; 0x28
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	627b      	str	r3, [r7, #36]	; 0x24
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800a13c:	f007 faf4 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800a140:	4603      	mov	r3, r0
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff fce8 	bl	8009b18 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d008      	beq.n	800a162 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	330c      	adds	r3, #12
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4610      	mov	r0, r2
 800a160:	4798      	blx	r3
    if (*currentTrans)
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d007      	beq.n	800a17a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	681a      	ldr	r2, [r3, #0]
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4610      	mov	r0, r2
 800a178:	4798      	blx	r3
    if (*currentScreen)
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3314      	adds	r3, #20
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4610      	mov	r0, r2
 800a192:	4798      	blx	r3
    if (*currentPresenter)
 800a194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d008      	beq.n	800a1ae <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3304      	adds	r3, #4
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4610      	mov	r0, r2
 800a1ac:	4798      	blx	r3
    if (*currentScreen)
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4798      	blx	r3
    if (*currentPresenter)
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d008      	beq.n	800a1e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3308      	adds	r3, #8
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
}
 800a1e0:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f000 f87d 	bl	800a2e8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	200c      	movs	r0, #12
 800a1f4:	f7ff fbfa 	bl	80099ec <_ZnwjPv>
 800a1f8:	4604      	mov	r4, r0
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff ff48 	bl	800a090 <_ZN8touchgfx12NoTransitionC1Ev>
 800a200:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	2100      	movs	r1, #0
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 f880 	bl	800a30e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800a20e:	4603      	mov	r3, r0
 800a210:	4619      	mov	r1, r3
 800a212:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 800a216:	f7ff fbe9 	bl	80099ec <_ZnwjPv>
 800a21a:	4604      	mov	r4, r0
 800a21c:	4620      	mov	r0, r4
 800a21e:	f001 fe61 	bl	800bee4 <_ZN10screenViewC1Ev>
 800a222:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	2100      	movs	r1, #0
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f882 	bl	800a334 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800a230:	4603      	mov	r3, r0
 800a232:	4619      	mov	r1, r3
 800a234:	2010      	movs	r0, #16
 800a236:	f7ff fbd9 	bl	80099ec <_ZnwjPv>
 800a23a:	4604      	mov	r4, r0
 800a23c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a23e:	4620      	mov	r0, r4
 800a240:	f001 fdf8 	bl	800be34 <_ZN15screenPresenterC1ER10screenView>
 800a244:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a24a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a250:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a256:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800a258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800a25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a260:	3304      	adds	r3, #4
 800a262:	e000      	b.n	800a266 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800a264:	2300      	movs	r3, #0
 800a266:	4619      	mov	r1, r3
 800a268:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a26a:	f7ff fd9b 	bl	8009da4 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800a26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a270:	3304      	adds	r3, #4
 800a272:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff fe08 	bl	8009e8a <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 f86b 	bl	800a35a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	61fb      	str	r3, [r7, #28]
 800a288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	330c      	adds	r3, #12
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	69f8      	ldr	r0, [r7, #28]
 800a29a:	4798      	blx	r3
    newPresenter->activate();
 800a29c:	69bb      	ldr	r3, [r7, #24]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	69b8      	ldr	r0, [r7, #24]
 800a2a4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a2a6:	6979      	ldr	r1, [r7, #20]
 800a2a8:	69f8      	ldr	r0, [r7, #28]
 800a2aa:	f008 ff4b 	bl	8013144 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	3310      	adds	r3, #16
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6978      	ldr	r0, [r7, #20]
 800a2b8:	4798      	blx	r3
    newTransition->invalidate();
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	3314      	adds	r3, #20
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6978      	ldr	r0, [r7, #20]
 800a2c4:	4798      	blx	r3
}
 800a2c6:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800a2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	373c      	adds	r7, #60	; 0x3c
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd90      	pop	{r4, r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0801e928 	.word	0x0801e928
 800a2d8:	0801e9b8 	.word	0x0801e9b8
 800a2dc:	0801eabc 	.word	0x0801eabc
 800a2e0:	0801eb00 	.word	0x0801eb00
 800a2e4:	0801eba4 	.word	0x0801eba4

0800a2e8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	3324      	adds	r3, #36	; 0x24
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	887a      	ldrh	r2, [r7, #2]
 800a2fe:	4611      	mov	r1, r2
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	4798      	blx	r3
 800a304:	4603      	mov	r3, r0
    }
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	3324      	adds	r3, #36	; 0x24
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	887a      	ldrh	r2, [r7, #2]
 800a324:	4611      	mov	r1, r2
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
 800a32a:	4603      	mov	r3, r0
    }
 800a32c:	4618      	mov	r0, r3
 800a32e:	3708      	adds	r7, #8
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3324      	adds	r3, #36	; 0x24
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	887a      	ldrh	r2, [r7, #2]
 800a34a:	4611      	mov	r1, r2
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	4798      	blx	r3
 800a350:	4603      	mov	r3, r0
    }
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a36a:	bf00      	nop
 800a36c:	370c      	adds	r7, #12
 800a36e:	46bd      	mov	sp, r7
 800a370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a374:	4770      	bx	lr
	...

0800a378 <_ZN8touchgfx12NoTransitionD1Ev>:
 800a378:	b580      	push	{r7, lr}
 800a37a:	b082      	sub	sp, #8
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	4a05      	ldr	r2, [pc, #20]	; (800a398 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	601a      	str	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	4618      	mov	r0, r3
 800a38a:	f7ff fc31 	bl	8009bf0 <_ZN8touchgfx10TransitionD1Ev>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	0801f3c0 	.word	0x0801f3c0

0800a39c <_ZN8touchgfx12NoTransitionD0Ev>:
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff ffe7 	bl	800a378 <_ZN8touchgfx12NoTransitionD1Ev>
 800a3aa:	210c      	movs	r1, #12
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f013 f9e8 	bl	801d782 <_ZdlPvj>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	4a05      	ldr	r2, [pc, #20]	; (800a3dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f7ff fbb1 	bl	8009b34 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3708      	adds	r7, #8
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}
 800a3dc:	0801f438 	.word	0x0801f438

0800a3e0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff ffe7 	bl	800a3bc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a3ee:	2110      	movs	r1, #16
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f013 f9c6 	bl	801d782 <_ZdlPvj>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	68d2      	ldr	r2, [r2, #12]
 800a410:	1052      	asrs	r2, r2, #1
 800a412:	1899      	adds	r1, r3, r2
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	f003 0301 	and.w	r3, r3, #1
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	e00a      	b.n	800a43c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	68d2      	ldr	r2, [r2, #12]
 800a42e:	1052      	asrs	r2, r2, #1
 800a430:	4413      	add	r3, r2
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6892      	ldr	r2, [r2, #8]
 800a438:	4413      	add	r3, r2
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4608      	mov	r0, r1
 800a43e:	4798      	blx	r3
    }
 800a440:	bf00      	nop
 800a442:	3708      	adds	r7, #8
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d010      	beq.n	800a47a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d107      	bne.n	800a470 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e000      	b.n	800a472 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a470:	2300      	movs	r3, #0
 800a472:	2b01      	cmp	r3, #1
 800a474:	d001      	beq.n	800a47a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a476:	2301      	movs	r3, #1
 800a478:	e000      	b.n	800a47c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a47a:	2300      	movs	r3, #0
    }
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
        : color(0)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]
    {
    }
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
        : color(col)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	601a      	str	r2, [r3, #0]
    {
    }
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a4c2:	b480      	push	{r7}
 800a4c4:	b083      	sub	sp, #12
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	805a      	strh	r2, [r3, #2]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	809a      	strh	r2, [r3, #4]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	80da      	strh	r2, [r3, #6]
    {
    }
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	4611      	mov	r1, r2
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	4603      	mov	r3, r0
 800a500:	817b      	strh	r3, [r7, #10]
 800a502:	460b      	mov	r3, r1
 800a504:	813b      	strh	r3, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	897a      	ldrh	r2, [r7, #10]
 800a50e:	801a      	strh	r2, [r3, #0]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	893a      	ldrh	r2, [r7, #8]
 800a514:	805a      	strh	r2, [r3, #2]
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	88fa      	ldrh	r2, [r7, #6]
 800a51a:	809a      	strh	r2, [r3, #4]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8b3a      	ldrh	r2, [r7, #24]
 800a520:	80da      	strh	r2, [r3, #6]
    {
    }
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	4618      	mov	r0, r3
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	460b      	mov	r3, r1
 800a53a:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	887a      	ldrh	r2, [r7, #2]
 800a540:	801a      	strh	r2, [r3, #0]
    {
    }
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4618      	mov	r0, r3
 800a546:	370c      	adds	r7, #12
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr

0800a550 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	791b      	ldrb	r3, [r3, #4]
    }
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a570:	4a14      	ldr	r2, [pc, #80]	; (800a5c4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	601a      	str	r2, [r3, #0]
        : rect(),
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff ffa1 	bl	800a4c2 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	330c      	adds	r3, #12
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff ff9c 	bl	800a4c2 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0802017c 	.word	0x0802017c

0800a5c8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a5c8:	b480      	push	{r7}
 800a5ca:	b083      	sub	sp, #12
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
    {
 800a5d0:	4a04      	ldr	r2, [pc, #16]	; (800a5e4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	601a      	str	r2, [r3, #0]
    }
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4618      	mov	r0, r3
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	0802017c 	.word	0x0802017c

0800a5e8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
    }
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7ff ffe9 	bl	800a5c8 <_ZN8touchgfx8DrawableD1Ev>
 800a5f6:	2128      	movs	r1, #40	; 0x28
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f013 f8c2 	bl	801d782 <_ZdlPvj>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a616:	2b00      	cmp	r3, #0
 800a618:	d005      	beq.n	800a626 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3314      	adds	r3, #20
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	4798      	blx	r3
        }
    }
 800a626:	bf00      	nop
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800a62e:	b480      	push	{r7}
 800a630:	b083      	sub	sp, #12
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a636:	2300      	movs	r3, #0
    }
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	4608      	mov	r0, r1
 800a64e:	4611      	mov	r1, r2
 800a650:	461a      	mov	r2, r3
 800a652:	4603      	mov	r3, r0
 800a654:	817b      	strh	r3, [r7, #10]
 800a656:	460b      	mov	r3, r1
 800a658:	813b      	strh	r3, [r7, #8]
 800a65a:	4613      	mov	r3, r2
 800a65c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800a65e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a662:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a666:	4619      	mov	r1, r3
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 f82a 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800a66e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a676:	4619      	mov	r1, r3
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 f87e 	bl	800a77a <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800a67e:	bf00      	nop
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	460b      	mov	r3, r1
 800a690:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	887a      	ldrh	r2, [r7, #2]
 800a696:	809a      	strh	r2, [r3, #4]
    }
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	887a      	ldrh	r2, [r7, #2]
 800a6b4:	80da      	strh	r2, [r3, #6]
    }
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	807b      	strh	r3, [r7, #2]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3330      	adds	r3, #48	; 0x30
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a6de:	4611      	mov	r1, r2
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	4798      	blx	r3
        setY(y);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	3334      	adds	r3, #52	; 0x34
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	4798      	blx	r3
    }
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	887a      	ldrh	r2, [r7, #2]
 800a70e:	811a      	strh	r2, [r3, #8]
    }
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	887a      	ldrh	r2, [r7, #2]
 800a72c:	815a      	strh	r2, [r3, #10]
    }
 800a72e:	bf00      	nop
 800a730:	370c      	adds	r7, #12
 800a732:	46bd      	mov	sp, r7
 800a734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a738:	4770      	bx	lr

0800a73a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
    {
    }
 800a742:	bf00      	nop
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a764:	b480      	push	{r7}
 800a766:	b083      	sub	sp, #12
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
 800a782:	460b      	mov	r3, r1
 800a784:	807b      	strh	r3, [r7, #2]
 800a786:	4613      	mov	r3, r2
 800a788:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3338      	adds	r3, #56	; 0x38
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a796:	4611      	mov	r1, r2
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	4798      	blx	r3
        setHeight(height);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	333c      	adds	r3, #60	; 0x3c
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	4798      	blx	r3
    }
 800a7ae:	bf00      	nop
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
    {
    }
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	460b      	mov	r3, r1
 800a7ea:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	78fa      	ldrb	r2, [r7, #3]
 800a7f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800a81a:	b480      	push	{r7}
 800a81c:	b083      	sub	sp, #12
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	807b      	strh	r3, [r7, #2]
 800a840:	4613      	mov	r3, r2
 800a842:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3354      	adds	r3, #84	; 0x54
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	8879      	ldrh	r1, [r7, #2]
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a854:	b292      	uxth	r2, r2
 800a856:	1a8a      	subs	r2, r1, r2
 800a858:	b292      	uxth	r2, r2
 800a85a:	b210      	sxth	r0, r2
 800a85c:	8839      	ldrh	r1, [r7, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a864:	b292      	uxth	r2, r2
 800a866:	1a8a      	subs	r2, r1, r2
 800a868:	b292      	uxth	r2, r2
 800a86a:	b212      	sxth	r2, r2
 800a86c:	4601      	mov	r1, r0
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	4798      	blx	r3
    }
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a888:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a890:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a898:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800a89a:	bf00      	nop
 800a89c:	370c      	adds	r7, #12
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a4:	4770      	bx	lr

0800a8a6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	60f8      	str	r0, [r7, #12]
 800a8ae:	60b9      	str	r1, [r7, #8]
 800a8b0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f7ff ffe1 	bl	800a87a <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	601a      	str	r2, [r3, #0]
    }
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7ff fe44 	bl	800a568 <_ZN8touchgfx8DrawableC1Ev>
 800a8e0:	4a05      	ldr	r2, [pc, #20]	; (800a8f8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	0801fca0 	.word	0x0801fca0

0800a8fc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
    {
 800a91c:	4a06      	ldr	r2, [pc, #24]	; (800a938 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	601a      	str	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	3304      	adds	r3, #4
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f91a 	bl	800ab60 <_ZN8touchgfx9ContainerD1Ev>
    }
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4618      	mov	r0, r3
 800a930:	3708      	adds	r7, #8
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	08020280 	.word	0x08020280

0800a93c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b082      	sub	sp, #8
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
    }
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f7ff ffe5 	bl	800a914 <_ZN8touchgfx6ScreenD1Ev>
 800a94a:	213c      	movs	r1, #60	; 0x3c
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f012 ff18 	bl	801d782 <_ZdlPvj>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4618      	mov	r0, r3
 800a956:	3708      	adds	r7, #8
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
    {
    }
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
    {
    }
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
    {
    }
 800a98c:	bf00      	nop
 800a98e:	370c      	adds	r7, #12
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
    {
    }
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800a9b8:	bf00      	nop
 800a9ba:	370c      	adds	r7, #12
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b082      	sub	sp, #8
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	6839      	ldr	r1, [r7, #0]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f003 fa6b 	bl	800deb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800a9da:	bf00      	nop
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	607b      	str	r3, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	817b      	strh	r3, [r7, #10]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff ff02 	bl	800a800 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d008      	beq.n	800aa14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7ff ff08 	bl	800a81a <_ZNK8touchgfx8Drawable11isTouchableEv>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e000      	b.n	800aa16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800aa14:	2300      	movs	r3, #0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d002      	beq.n	800aa20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800aa1a:	68fa      	ldr	r2, [r7, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	601a      	str	r2, [r3, #0]
        }
    }
 800aa20:	bf00      	nop
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7ff fd98 	bl	800a568 <_ZN8touchgfx8DrawableC1Ev>
 800aa38:	4a03      	ldr	r2, [pc, #12]	; (800aa48 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	601a      	str	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4618      	mov	r0, r3
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	0801f744 	.word	0x0801f744

0800aa4c <_ZN8touchgfx6WidgetD1Ev>:
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	4a05      	ldr	r2, [pc, #20]	; (800aa6c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff fdb3 	bl	800a5c8 <_ZN8touchgfx8DrawableD1Ev>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	3708      	adds	r7, #8
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	0801f744 	.word	0x0801f744

0800aa70 <_ZN8touchgfx6WidgetD0Ev>:
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f7ff ffe7 	bl	800aa4c <_ZN8touchgfx6WidgetD1Ev>
 800aa7e:	2128      	movs	r1, #40	; 0x28
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f012 fe7e 	bl	801d782 <_ZdlPvj>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	2326      	movs	r3, #38	; 0x26
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	f013 f8a2 	bl	801dbea <memset>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7ff ffbd 	bl	800aa28 <_ZN8touchgfx6WidgetC1Ev>
 800aaae:	4a09      	ldr	r2, [pc, #36]	; (800aad4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	601a      	str	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	22ff      	movs	r2, #255	; 0xff
 800aab8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3328      	adds	r3, #40	; 0x28
 800aac0:	2100      	movs	r1, #0
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fcee 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	0801ff94 	.word	0x0801ff94

0800aad8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800aae8:	bf00      	nop
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	78fa      	ldrb	r2, [r7, #3]
 800ab04:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800ab08:	bf00      	nop
 800ab0a:	370c      	adds	r7, #12
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4618      	mov	r0, r3
 800ab22:	2326      	movs	r3, #38	; 0x26
 800ab24:	461a      	mov	r2, r3
 800ab26:	2100      	movs	r1, #0
 800ab28:	f013 f85f 	bl	801dbea <memset>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7ff ff7a 	bl	800aa28 <_ZN8touchgfx6WidgetC1Ev>
 800ab34:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	8812      	ldrh	r2, [r2, #0]
 800ab40:	84da      	strh	r2, [r3, #38]	; 0x26
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f005 f8b8 	bl	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4618      	mov	r0, r3
 800ab56:	3708      	adds	r7, #8
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	08020064 	.word	0x08020064

0800ab60 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	4a05      	ldr	r2, [pc, #20]	; (800ab80 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff fd29 	bl	800a5c8 <_ZN8touchgfx8DrawableD1Ev>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	0801fca0 	.word	0x0801fca0

0800ab84 <_ZN8touchgfx9ContainerD0Ev>:
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f7ff ffe7 	bl	800ab60 <_ZN8touchgfx9ContainerD1Ev>
 800ab92:	212c      	movs	r1, #44	; 0x2c
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f012 fdf4 	bl	801d782 <_ZdlPvj>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fe8e 	bl	800a8d0 <_ZN8touchgfx9ContainerC1Ev>
 800abb4:	4a0b      	ldr	r2, [pc, #44]	; (800abe4 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	22ff      	movs	r2, #255	; 0xff
 800abc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2101      	movs	r1, #1
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7ff fe03 	bl	800a7e0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4618      	mov	r0, r3
 800abde:	3708      	adds	r7, #8
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	0801f6a8 	.word	0x0801f6a8

0800abe8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
 800abf0:	460b      	mov	r3, r1
 800abf2:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	78fa      	ldrb	r2, [r7, #3]
 800abf8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	338c      	adds	r3, #140	; 0x8c
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	4798      	blx	r3
    }
 800ac08:	bf00      	nop
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800ac1e:	4618      	mov	r0, r3
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800ac2a:	b480      	push	{r7}
 800ac2c:	b083      	sub	sp, #12
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d00d      	beq.n	800ac70 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	330c      	adds	r3, #12
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4610      	mov	r0, r2
 800ac64:	4798      	blx	r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d001      	beq.n	800ac70 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800ac70:	2300      	movs	r3, #0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d009      	beq.n	800ac8a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	3308      	adds	r3, #8
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	6879      	ldr	r1, [r7, #4]
 800ac86:	4610      	mov	r0, r2
 800ac88:	4798      	blx	r3
        }
    }
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800ac92:	b480      	push	{r7}
 800ac94:	b083      	sub	sp, #12
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
    {
    }
 800ac9a:	bf00      	nop
 800ac9c:	370c      	adds	r7, #12
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca4:	4770      	bx	lr

0800aca6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800aca6:	b480      	push	{r7}
 800aca8:	b083      	sub	sp, #12
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
    {
    }
 800acae:	bf00      	nop
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
	...

0800acbc <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	4a05      	ldr	r2, [pc, #20]	; (800acdc <_ZN8touchgfx5ImageD1Ev+0x20>)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	601a      	str	r2, [r3, #0]
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4618      	mov	r0, r3
 800acce:	f7ff febd 	bl	800aa4c <_ZN8touchgfx6WidgetD1Ev>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4618      	mov	r0, r3
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	08020064 	.word	0x08020064

0800ace0 <_ZN8touchgfx5ImageD0Ev>:
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff ffe7 	bl	800acbc <_ZN8touchgfx5ImageD1Ev>
 800acee:	212c      	movs	r1, #44	; 0x2c
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f012 fd46 	bl	801d782 <_ZdlPvj>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	4618      	mov	r0, r3
 800acfa:	3708      	adds	r7, #8
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <_ZN8touchgfx13AnimatedImageC1ERKh>:
     *                        Higher value results in a slower animation.
     *
     * @note The bitmaps to display must be configured through set setBitmaps function before this
     *       widget displays anything.
     */
    AnimatedImage(const uint8_t& updateInterval = 1)
 800ad00:	b590      	push	{r4, r7, lr}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
          endId(BITMAP_INVALID),
          updateTicksInterval(updateInterval),
          ticksSinceUpdate(0),
          reverse(false),
          loopAnimation(false),
          running(false)
 800ad0a:	687c      	ldr	r4, [r7, #4]
 800ad0c:	f107 030c 	add.w	r3, r7, #12
 800ad10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7ff fc0b 	bl	800a530 <_ZN8touchgfx6BitmapC1Et>
 800ad1a:	f107 030c 	add.w	r3, r7, #12
 800ad1e:	4619      	mov	r1, r3
 800ad20:	4620      	mov	r0, r4
 800ad22:	f7ff fef7 	bl	800ab14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ad26:	4a14      	ldr	r2, [pc, #80]	; (800ad78 <_ZN8touchgfx13AnimatedImageC1ERKh+0x78>)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
        : animationDoneAction(0),
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	62da      	str	r2, [r3, #44]	; 0x2c
          startId(BITMAP_INVALID),
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad38:	861a      	strh	r2, [r3, #48]	; 0x30
          endId(BITMAP_INVALID),
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad40:	865a      	strh	r2, [r3, #50]	; 0x32
          updateTicksInterval(updateInterval),
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	781a      	ldrb	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          ticksSinceUpdate(0),
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          reverse(false),
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
          loopAnimation(false),
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
          running(false)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    {
    }
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd90      	pop	{r4, r7, pc}
 800ad76:	bf00      	nop
 800ad78:	0801fe88 	.word	0x0801fe88

0800ad7c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	4a05      	ldr	r2, [pc, #20]	; (800ad9c <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff fe5d 	bl	800aa4c <_ZN8touchgfx6WidgetD1Ev>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	0801ff94 	.word	0x0801ff94

0800ada0 <_ZN8touchgfx3BoxD0Ev>:
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f7ff ffe7 	bl	800ad7c <_ZN8touchgfx3BoxD1Ev>
 800adae:	212c      	movs	r1, #44	; 0x2c
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f012 fce6 	bl	801d782 <_ZdlPvj>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff fe60 	bl	800aa90 <_ZN8touchgfx3BoxC1Ev>
 800add0:	4a08      	ldr	r2, [pc, #32]	; (800adf4 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	332c      	adds	r3, #44	; 0x2c
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff fb61 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0801fffc 	.word	0x0801fffc

0800adf8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	683a      	ldr	r2, [r7, #0]
 800ae06:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800ae08:	bf00      	nop
 800ae0a:	370c      	adds	r7, #12
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	460b      	mov	r3, r1
 800ae1e:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	887a      	ldrh	r2, [r7, #2]
 800ae24:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800ae26:	bf00      	nop
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b084      	sub	sp, #16
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7ff fee6 	bl	800ac10 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800ae44:	4603      	mov	r3, r0
 800ae46:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800ae48:	6838      	ldr	r0, [r7, #0]
 800ae4a:	f7ff fb81 	bl	800a550 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bf0c      	ite	eq
 800ae54:	2301      	moveq	r3, #1
 800ae56:	2300      	movne	r3, #0
 800ae58:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800ae5a:	7bbb      	ldrb	r3, [r7, #14]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	f083 0301 	eor.w	r3, r3, #1
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d108      	bne.n	800ae7e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	f083 0301 	eor.w	r3, r3, #1
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00f      	beq.n	800ae98 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d00c      	beq.n	800ae98 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	7bba      	ldrb	r2, [r7, #14]
 800ae82:	4611      	mov	r1, r2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff feaf 	bl	800abe8 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3314      	adds	r3, #20
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800ae98:	7bfb      	ldrb	r3, [r7, #15]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d007      	beq.n	800aeae <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800ae9e:	6838      	ldr	r0, [r7, #0]
 800aea0:	f7ff fb56 	bl	800a550 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d101      	bne.n	800aeae <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800aeaa:	2301      	movs	r3, #1
 800aeac:	e000      	b.n	800aeb0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	3388      	adds	r3, #136	; 0x88
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4610      	mov	r0, r2
 800aec0:	4798      	blx	r3
        }
    }
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
	...

0800aecc <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	4a05      	ldr	r2, [pc, #20]	; (800aeec <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	601a      	str	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fe3f 	bl	800ab60 <_ZN8touchgfx9ContainerD1Ev>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	4618      	mov	r0, r3
 800aee6:	3708      	adds	r7, #8
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	0801f6a8 	.word	0x0801f6a8

0800aef0 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7ff ffe7 	bl	800aecc <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800aefe:	2134      	movs	r1, #52	; 0x34
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f012 fc3e 	bl	801d782 <_ZdlPvj>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	460b      	mov	r3, r1
 800af1a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800af1c:	4a06      	ldr	r2, [pc, #24]	; (800af38 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	601a      	str	r2, [r3, #0]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	887a      	ldrh	r2, [r7, #2]
 800af26:	809a      	strh	r2, [r3, #4]
    }
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4618      	mov	r0, r3
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	0801f350 	.word	0x0801f350

0800af3c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	4618      	mov	r0, r3
 800af48:	2326      	movs	r3, #38	; 0x26
 800af4a:	461a      	mov	r2, r3
 800af4c:	2100      	movs	r1, #0
 800af4e:	f012 fe4c 	bl	801dbea <memset>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff fd67 	bl	800aa28 <_ZN8touchgfx6WidgetC1Ev>
 800af5a:	4a16      	ldr	r2, [pc, #88]	; (800afb4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	3328      	adds	r3, #40	; 0x28
 800af64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff ffd1 	bl	800af10 <_ZN8touchgfx9TypedTextC1Et>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	3330      	adds	r3, #48	; 0x30
 800af72:	2100      	movs	r1, #0
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fa95 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2200      	movs	r2, #0
 800af7e:	869a      	strh	r2, [r3, #52]	; 0x34
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	22ff      	movs	r2, #255	; 0xff
 800af84:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	333c      	adds	r3, #60	; 0x3c
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 f807 	bl	800afb8 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4618      	mov	r0, r3
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	0801ff04 	.word	0x0801ff04

0800afb8 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f04f 33ff 	mov.w	r3, #4294967295
 800afc6:	9300      	str	r3, [sp, #0]
 800afc8:	f04f 33ff 	mov.w	r3, #4294967295
 800afcc:	2200      	movs	r2, #0
 800afce:	2100      	movs	r1, #0
 800afd0:	f7ff fa8e 	bl	800a4f0 <_ZN8touchgfx4RectC1Essss>
              text(0)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	609a      	str	r2, [r3, #8]
        {
        }
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	4a08      	ldr	r2, [pc, #32]	; (800b010 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	3328      	adds	r3, #40	; 0x28
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fb10 	bl	800961c <_ZN8touchgfx9TypedTextD1Ev>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fd24 	bl	800aa4c <_ZN8touchgfx6WidgetD1Ev>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	0801ff04 	.word	0x0801ff04

0800b014 <_ZN8touchgfx8TextAreaD0Ev>:
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff ffe1 	bl	800afe4 <_ZN8touchgfx8TextAreaD1Ev>
 800b022:	2148      	movs	r1, #72	; 0x48
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f012 fbac 	bl	801d782 <_ZdlPvj>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	4a05      	ldr	r2, [pc, #20]	; (800b054 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	601a      	str	r2, [r3, #0]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4618      	mov	r0, r3
 800b046:	f7ff fc65 	bl	800a914 <_ZN8touchgfx6ScreenD1Ev>
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4618      	mov	r0, r3
 800b04e:	3708      	adds	r7, #8
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	0801f5d8 	.word	0x0801f5d8

0800b058 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7ff ffe7 	bl	800b034 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800b066:	2140      	movs	r1, #64	; 0x40
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f012 fb8a 	bl	801d782 <_ZdlPvj>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4618      	mov	r0, r3
 800b072:	3708      	adds	r7, #8
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase()
 800b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b07c:	b09e      	sub	sp, #120	; 0x78
 800b07e:	af02      	add	r7, sp, #8
 800b080:	6178      	str	r0, [r7, #20]
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	4618      	mov	r0, r3
 800b086:	f000 fa3b 	bl	800b500 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800b08a:	4ae0      	ldr	r2, [pc, #896]	; (800b40c <_ZN14screenViewBaseC1Ev+0x394>)
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	3340      	adds	r3, #64	; 0x40
 800b094:	4618      	mov	r0, r3
 800b096:	f7ff fcfb 	bl	800aa90 <_ZN8touchgfx3BoxC1Ev>
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b0a0:	f107 0320 	add.w	r3, r7, #32
 800b0a4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7ff fa41 	bl	800a530 <_ZN8touchgfx6BitmapC1Et>
 800b0ae:	f107 0320 	add.w	r3, r7, #32
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7ff fd2d 	bl	800ab14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	3398      	adds	r3, #152	; 0x98
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 fa8a 	bl	800b5d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7ff ff36 	bl	800af3c <_ZN8touchgfx8TextAreaC1Ev>
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 800b0d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7ff fa26 	bl	800a530 <_ZN8touchgfx6BitmapC1Et>
 800b0e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f7ff fd12 	bl	800ab14 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
    AnimatedImage(const uint8_t& updateInterval = 1)
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800b0fc:	f107 0227 	add.w	r2, r7, #39	; 0x27
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff fdfc 	bl	800ad00 <_ZN8touchgfx13AnimatedImageC1ERKh>
{
    __background.setPosition(0, 0, 480, 272);
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b10e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b112:	9300      	str	r3, [sp, #0]
 800b114:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b118:	2200      	movs	r2, #0
 800b11a:	2100      	movs	r1, #0
 800b11c:	f7ff fa92 	bl	800a644 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800b120:	697b      	ldr	r3, [r7, #20]
 800b122:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b126:	2300      	movs	r3, #0
 800b128:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b132:	2300      	movs	r3, #0
 800b134:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800b138:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b13c:	041b      	lsls	r3, r3, #16
 800b13e:	461a      	mov	r2, r3
 800b140:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b144:	021b      	lsls	r3, r3, #8
 800b146:	431a      	orrs	r2, r3
 800b148:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800b14c:	4313      	orrs	r3, r2
 800b14e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b152:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff f9a3 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800b15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b160:	4619      	mov	r1, r3
 800b162:	4620      	mov	r0, r4
 800b164:	f7ff fcb8 	bl	800aad8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800b168:	697a      	ldr	r2, [r7, #20]
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	3340      	adds	r3, #64	; 0x40
 800b16e:	4619      	mov	r1, r3
 800b170:	4610      	mov	r0, r2
 800b172:	f7ff fc27 	bl	800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	336c      	adds	r3, #108	; 0x6c
 800b17a:	2200      	movs	r2, #0
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fa9f 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_MY_BACKGROUND2_ID));
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b18a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b18e:	2104      	movs	r1, #4
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff f9cd 	bl	800a530 <_ZN8touchgfx6BitmapC1Et>
 800b196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b19a:	4619      	mov	r1, r3
 800b19c:	4620      	mov	r0, r4
 800b19e:	f004 fd90 	bl	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800b1a2:	697a      	ldr	r2, [r7, #20]
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	336c      	adds	r3, #108	; 0x6c
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	4610      	mov	r0, r2
 800b1ac:	f7ff fc0a 	bl	800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    flexButton2.setBoxWithBorderPosition(0, 0, 126, 33);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800b1b6:	2321      	movs	r3, #33	; 0x21
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	237e      	movs	r3, #126	; 0x7e
 800b1bc:	2200      	movs	r2, #0
 800b1be:	2100      	movs	r1, #0
 800b1c0:	f000 fa4a 	bl	800b658 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton2.setBorderSize(5);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	3398      	adds	r3, #152	; 0x98
 800b1c8:	2105      	movs	r1, #5
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 fa64 	bl	800b698 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton2.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b1dc:	2366      	movs	r3, #102	; 0x66
 800b1de:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800b1e2:	2399      	movs	r3, #153	; 0x99
 800b1e4:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800b1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ec:	041b      	lsls	r3, r3, #16
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b202:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff f94b 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800b20e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b210:	461d      	mov	r5, r3
 800b212:	2300      	movs	r3, #0
 800b214:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800b218:	2399      	movs	r3, #153	; 0x99
 800b21a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800b21e:	23cc      	movs	r3, #204	; 0xcc
 800b220:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800b224:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800b228:	041b      	lsls	r3, r3, #16
 800b22a:	461a      	mov	r2, r3
 800b22c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800b230:	021b      	lsls	r3, r3, #8
 800b232:	431a      	orrs	r2, r3
 800b234:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800b238:	4313      	orrs	r3, r2
 800b23a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b23e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b242:	4611      	mov	r1, r2
 800b244:	4618      	mov	r0, r3
 800b246:	f7ff f92d 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800b24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b24c:	461e      	mov	r6, r3
 800b24e:	2300      	movs	r3, #0
 800b250:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800b254:	2333      	movs	r3, #51	; 0x33
 800b256:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800b25a:	2366      	movs	r3, #102	; 0x66
 800b25c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800b260:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b264:	041b      	lsls	r3, r3, #16
 800b266:	461a      	mov	r2, r3
 800b268:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	431a      	orrs	r2, r3
 800b270:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b274:	4313      	orrs	r3, r2
 800b276:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b27a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b27e:	4611      	mov	r1, r2
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff f90f 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800b286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b288:	4698      	mov	r8, r3
 800b28a:	2333      	movs	r3, #51	; 0x33
 800b28c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800b290:	2366      	movs	r3, #102	; 0x66
 800b292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b296:	2399      	movs	r3, #153	; 0x99
 800b298:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800b29c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800b2a0:	041b      	lsls	r3, r3, #16
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b2a8:	021b      	lsls	r3, r3, #8
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b2b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7ff f8f1 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800b2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2c4:	9300      	str	r3, [sp, #0]
 800b2c6:	4643      	mov	r3, r8
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 f9f5 	bl	800b6bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton2.setPosition(29, 215, 126, 33);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800b2d8:	2321      	movs	r3, #33	; 0x21
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	237e      	movs	r3, #126	; 0x7e
 800b2de:	22d7      	movs	r2, #215	; 0xd7
 800b2e0:	211d      	movs	r1, #29
 800b2e2:	f7ff f9af 	bl	800a644 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(flexButton2);
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	3398      	adds	r3, #152	; 0x98
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	f7ff fb68 	bl	800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(36, 7);
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b2fa:	2207      	movs	r2, #7
 800b2fc:	2124      	movs	r1, #36	; 0x24
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7ff f9df 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800b30a:	23ff      	movs	r3, #255	; 0xff
 800b30c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b310:	23ff      	movs	r3, #255	; 0xff
 800b312:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800b316:	23ff      	movs	r3, #255	; 0xff
 800b318:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800b31c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b320:	041b      	lsls	r3, r3, #16
 800b322:	461a      	mov	r2, r3
 800b324:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800b328:	021b      	lsls	r3, r3, #8
 800b32a:	431a      	orrs	r2, r3
 800b32c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800b330:	4313      	orrs	r3, r2
 800b332:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b33a:	4611      	mov	r1, r2
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff f8b1 	bl	800a4a4 <_ZN8touchgfx9colortypeC1Em>
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	667c      	str	r4, [r7, #100]	; 0x64
 800b346:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800b348:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b34a:	69fa      	ldr	r2, [r7, #28]
 800b34c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800b34e:	bf00      	nop
    textArea1.setLinespacing(0);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b356:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b358:	2300      	movs	r3, #0
 800b35a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        linespace = space;
 800b35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b360:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800b364:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800b366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3384      	adds	r3, #132	; 0x84
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800b370:	463a      	mov	r2, r7
 800b372:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b374:	4610      	mov	r0, r2
 800b376:	4798      	blx	r3
 800b378:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b37c:	463a      	mov	r2, r7
 800b37e:	ca07      	ldmia	r2, {r0, r1, r2}
 800b380:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800b384:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V5D1));
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800b38c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b390:	2101      	movs	r1, #1
 800b392:	4618      	mov	r0, r3
 800b394:	f7ff fdbc 	bl	800af10 <_ZN8touchgfx9TypedTextC1Et>
 800b398:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b39c:	4619      	mov	r1, r3
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f004 fbb0 	bl	800fb04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800b3a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7fe f937 	bl	800961c <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f7ff fb03 	bl	800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image2.setXY(17, 41);
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3c4:	2229      	movs	r2, #41	; 0x29
 800b3c6:	2111      	movs	r1, #17
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7ff f97a 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_COLOURS_ID));
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 800b3d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b3d8:	2103      	movs	r1, #3
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff f8a8 	bl	800a530 <_ZN8touchgfx6BitmapC1Et>
 800b3e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b3e4:	4619      	mov	r1, r3
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f004 fc6b 	bl	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image2);
 800b3ec:	697a      	ldr	r2, [r7, #20]
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7ff fae4 	bl	800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    animatedImage1.setXY(437, 31);
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b402:	221f      	movs	r2, #31
 800b404:	f240 11b5 	movw	r1, #437	; 0x1b5
 800b408:	4618      	mov	r0, r3
 800b40a:	e001      	b.n	800b410 <_ZN14screenViewBaseC1Ev+0x398>
 800b40c:	0801f508 	.word	0x0801f508
 800b410:	f7ff f957 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
    animatedImage1.setBitmaps(BITMAP_ANIM1_ID, BITMAP_ANIM3_ID);
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b41a:	2202      	movs	r2, #2
 800b41c:	2100      	movs	r1, #0
 800b41e:	4618      	mov	r0, r3
 800b420:	f003 ff8c 	bl	800f33c <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>
    animatedImage1.setUpdateTicksInterval(12);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b42a:	210c      	movs	r1, #12
 800b42c:	4618      	mov	r0, r3
 800b42e:	f003 ff98 	bl	800f362 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>
    animatedImage1.startAnimation(false, true, true);
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	f503 70c2 	add.w	r0, r3, #388	; 0x184
 800b438:	2301      	movs	r3, #1
 800b43a:	2201      	movs	r2, #1
 800b43c:	2100      	movs	r1, #0
 800b43e:	f003 fedc 	bl	800f1fa <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>
    add(animatedImage1);
 800b442:	697a      	ldr	r2, [r7, #20]
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b44a:	4619      	mov	r1, r3
 800b44c:	4610      	mov	r0, r2
 800b44e:	f7ff fab9 	bl	800a9c4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	4618      	mov	r0, r3
 800b456:	3770      	adds	r7, #112	; 0x70
 800b458:	46bd      	mov	sp, r7
 800b45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b45e:	bf00      	nop

0800b460 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	4a16      	ldr	r2, [pc, #88]	; (800b4c4 <_ZN14screenViewBaseD1Ev+0x64>)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800b474:	4618      	mov	r0, r3
 800b476:	f000 f999 	bl	800b7ac <_ZN8touchgfx13AnimatedImageD1Ev>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fc1b 	bl	800acbc <_ZN8touchgfx5ImageD1Ev>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b48c:	4618      	mov	r0, r3
 800b48e:	f7ff fda9 	bl	800afe4 <_ZN8touchgfx8TextAreaD1Ev>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	3398      	adds	r3, #152	; 0x98
 800b496:	4618      	mov	r0, r3
 800b498:	f000 f960 	bl	800b75c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	336c      	adds	r3, #108	; 0x6c
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f7ff fc0b 	bl	800acbc <_ZN8touchgfx5ImageD1Ev>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	3340      	adds	r3, #64	; 0x40
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f7ff fc66 	bl	800ad7c <_ZN8touchgfx3BoxD1Ev>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff fdbe 	bl	800b034 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
{

}
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	0801f508 	.word	0x0801f508

0800b4c8 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
}
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f7ff ffc5 	bl	800b460 <_ZN14screenViewBaseD1Ev>
 800b4d6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f012 f951 	bl	801d782 <_ZdlPvj>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]

}
 800b4f2:	bf00      	nop
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
	...

0800b500 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f007 fc6e 	bl	8012dec <_ZN8touchgfx6ScreenC1Ev>
 800b510:	4a05      	ldr	r2, [pc, #20]	; (800b528 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	601a      	str	r2, [r3, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	0801f5d8 	.word	0x0801f5d8

0800b52c <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fb34 	bl	800aba4 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800b53c:	4a03      	ldr	r2, [pc, #12]	; (800b54c <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	601a      	str	r2, [r3, #0]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	0801f60c 	.word	0x0801f60c

0800b550 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	4a05      	ldr	r2, [pc, #20]	; (800b570 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff fcb3 	bl	800aecc <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4618      	mov	r0, r3
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	0801f60c 	.word	0x0801f60c

0800b574 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f7ff ffe7 	bl	800b550 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800b582:	2134      	movs	r1, #52	; 0x34
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f012 f8fc 	bl	801d782 <_ZdlPvj>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	4a05      	ldr	r2, [pc, #20]	; (800b5b4 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	601a      	str	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7ff fbe9 	bl	800ad7c <_ZN8touchgfx3BoxD1Ev>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	0801fffc 	.word	0x0801fffc

0800b5b8 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7ff ffe7 	bl	800b594 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800b5c6:	2134      	movs	r1, #52	; 0x34
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f012 f8da 	bl	801d782 <_ZdlPvj>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class BoxWithBorderButtonStyle : public T
{
public:
    BoxWithBorderButtonStyle()
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	2334      	movs	r3, #52	; 0x34
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	f012 fafe 	bl	801dbea <memset>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7ff ff9b 	bl	800b52c <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800b5f6:	4a17      	ldr	r2, [pc, #92]	; (800b654 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	3334      	adds	r3, #52	; 0x34
 800b600:	4618      	mov	r0, r3
 800b602:	f7ff fbdd 	bl	800adc0 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	3368      	adds	r3, #104	; 0x68
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe ff3c 	bl	800a488 <_ZN8touchgfx9colortypeC1Ev>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	336c      	adds	r3, #108	; 0x6c
 800b614:	4618      	mov	r0, r3
 800b616:	f7fe ff37 	bl	800a488 <_ZN8touchgfx9colortypeC1Ev>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	3370      	adds	r3, #112	; 0x70
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe ff32 	bl	800a488 <_ZN8touchgfx9colortypeC1Ev>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	3374      	adds	r3, #116	; 0x74
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fe ff2d 	bl	800a488 <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	3334      	adds	r3, #52	; 0x34
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff f843 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800b63c:	687a      	ldr	r2, [r7, #4]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3334      	adds	r3, #52	; 0x34
 800b642:	4619      	mov	r1, r3
 800b644:	4610      	mov	r0, r2
 800b646:	f002 fc33 	bl	800deb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	0801f53c 	.word	0x0801f53c

0800b658 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800b658:	b590      	push	{r4, r7, lr}
 800b65a:	b087      	sub	sp, #28
 800b65c:	af02      	add	r7, sp, #8
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	4608      	mov	r0, r1
 800b662:	4611      	mov	r1, r2
 800b664:	461a      	mov	r2, r3
 800b666:	4603      	mov	r3, r0
 800b668:	817b      	strh	r3, [r7, #10]
 800b66a:	460b      	mov	r3, r1
 800b66c:	813b      	strh	r3, [r7, #8]
 800b66e:	4613      	mov	r3, r2
 800b670:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b678:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800b67c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b680:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b684:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b688:	9300      	str	r3, [sp, #0]
 800b68a:	4623      	mov	r3, r4
 800b68c:	f7fe ffda 	bl	800a644 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800b690:	bf00      	nop
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	bd90      	pop	{r4, r7, pc}

0800b698 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	3334      	adds	r3, #52	; 0x34
 800b6a8:	78fa      	ldrb	r2, [r7, #3]
 800b6aa:	b292      	uxth	r2, r2
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f7ff fbb0 	bl	800ae14 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800b6b4:	bf00      	nop
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	68ba      	ldr	r2, [r7, #8]
 800b6ce:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	687a      	ldr	r2, [r7, #4]
 800b6d4:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	69ba      	ldr	r2, [r7, #24]
 800b6e0:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	338c      	adds	r3, #140	; 0x8c
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	4798      	blx	r3
    }
 800b6ee:	bf00      	nop
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800b6f6:	b590      	push	{r4, r7, lr}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff fa82 	bl	800ac10 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d002      	beq.n	800b718 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	336c      	adds	r3, #108	; 0x6c
 800b716:	e001      	b.n	800b71c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	3368      	adds	r3, #104	; 0x68
 800b71c:	6819      	ldr	r1, [r3, #0]
 800b71e:	4620      	mov	r0, r4
 800b720:	f7ff f9da 	bl	800aad8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fa6f 	bl	800ac10 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d002      	beq.n	800b73e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3374      	adds	r3, #116	; 0x74
 800b73c:	e001      	b.n	800b742 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3370      	adds	r3, #112	; 0x70
 800b742:	6819      	ldr	r1, [r3, #0]
 800b744:	4620      	mov	r0, r4
 800b746:	f7ff fb57 	bl	800adf8 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff faa0 	bl	800ac92 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	bd90      	pop	{r4, r7, pc}
	...

0800b75c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	4a08      	ldr	r2, [pc, #32]	; (800b788 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	601a      	str	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3334      	adds	r3, #52	; 0x34
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff ff10 	bl	800b594 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4618      	mov	r0, r3
 800b778:	f7ff feea 	bl	800b550 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4618      	mov	r0, r3
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	0801f53c 	.word	0x0801f53c

0800b78c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff ffe1 	bl	800b75c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800b79a:	2178      	movs	r1, #120	; 0x78
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f011 fff0 	bl	801d782 <_ZdlPvj>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <_ZN8touchgfx13AnimatedImageD1Ev>:
class AnimatedImage : public Image
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	4a05      	ldr	r2, [pc, #20]	; (800b7cc <_ZN8touchgfx13AnimatedImageD1Ev+0x20>)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	601a      	str	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7ff fa7d 	bl	800acbc <_ZN8touchgfx5ImageD1Ev>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3708      	adds	r7, #8
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	0801fe88 	.word	0x0801fe88

0800b7d0 <_ZN8touchgfx13AnimatedImageD0Ev>:
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff ffe7 	bl	800b7ac <_ZN8touchgfx13AnimatedImageD1Ev>
 800b7de:	213c      	movs	r1, #60	; 0x3c
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f011 ffce 	bl	801d782 <_ZdlPvj>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800b7f0:	b590      	push	{r4, r7, lr}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff fa12 	bl	800ac2a <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800b806:	4603      	mov	r3, r0
 800b808:	4619      	mov	r1, r3
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7ff f972 	bl	800aaf4 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff fa47 	bl	800aca6 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800b818:	bf00      	nop
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd90      	pop	{r4, r7, pc}

0800b820 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
    return bitmap_database;
 800b824:	4b02      	ldr	r3, [pc, #8]	; (800b830 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800b826:	4618      	mov	r0, r3
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	0801f7a4 	.word	0x0801f7a4

0800b834 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800b838:	2305      	movs	r3, #5
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	460b      	mov	r3, r1
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800b852:	2300      	movs	r3, #0
    }
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b868:	2300      	movs	r3, #0
    }
 800b86a:	4618      	mov	r0, r3
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800b876:	b480      	push	{r7}
 800b878:	b083      	sub	sp, #12
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b87e:	2300      	movs	r3, #0
    }
 800b880:	4618      	mov	r0, r3
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4613      	mov	r3, r2
 800b898:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800b89a:	4a07      	ldr	r2, [pc, #28]	; (800b8b8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800b8a0:	4a06      	ldr	r2, [pc, #24]	; (800b8bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800b8a6:	4a06      	ldr	r2, [pc, #24]	; (800b8c0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800b8a8:	88fb      	ldrh	r3, [r7, #6]
 800b8aa:	8013      	strh	r3, [r2, #0]
    }
 800b8ac:	bf00      	nop
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	2401aac8 	.word	0x2401aac8
 800b8bc:	2401aad0 	.word	0x2401aad0
 800b8c0:	2401aacc 	.word	0x2401aacc

0800b8c4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800b8c4:	b40e      	push	{r1, r2, r3}
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b085      	sub	sp, #20
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800b8ce:	f107 0320 	add.w	r3, r7, #32
 800b8d2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	69fa      	ldr	r2, [r7, #28]
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f006 febc 	bl	8012658 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800b8e4:	89fb      	ldrh	r3, [r7, #14]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8f0:	b003      	add	sp, #12
 800b8f2:	4770      	bx	lr

0800b8f4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800b8f4:	b40c      	push	{r2, r3}
 800b8f6:	b580      	push	{r7, lr}
 800b8f8:	b084      	sub	sp, #16
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	460b      	mov	r3, r1
 800b900:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800b902:	f107 031c 	add.w	r3, r7, #28
 800b906:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800b908:	78f9      	ldrb	r1, [r7, #3]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	69ba      	ldr	r2, [r7, #24]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f006 fea2 	bl	8012658 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800b914:	4603      	mov	r3, r0
 800b916:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800b918:	89fb      	ldrh	r3, [r7, #14]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b924:	b002      	add	sp, #8
 800b926:	4770      	bx	lr

0800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d016      	beq.n	800b96a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3322      	adds	r3, #34	; 0x22
 800b940:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800b942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b944:	8adb      	ldrh	r3, [r3, #22]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d105      	bne.n	800b956 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800b94a:	4b43      	ldr	r3, [pc, #268]	; (800ba58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800b94c:	4a43      	ldr	r2, [pc, #268]	; (800ba5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800b94e:	21c5      	movs	r1, #197	; 0xc5
 800b950:	4843      	ldr	r0, [pc, #268]	; (800ba60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b952:	f011 ff45 	bl	801d7e0 <__assert_func>
            return buffer[pos];
 800b956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b958:	8a9b      	ldrh	r3, [r3, #20]
 800b95a:	461a      	mov	r2, r3
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800b966:	2301      	movs	r3, #1
 800b968:	e000      	b.n	800b96c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800b96a:	2300      	movs	r3, #0
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d06a      	beq.n	800ba46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f008 f917 	bl	8013ba4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	3322      	adds	r3, #34	; 0x22
 800b97a:	623b      	str	r3, [r7, #32]
 800b97c:	2301      	movs	r3, #1
 800b97e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800b980:	6a3b      	ldr	r3, [r7, #32]
 800b982:	8adb      	ldrh	r3, [r3, #22]
 800b984:	8bfa      	ldrh	r2, [r7, #30]
 800b986:	429a      	cmp	r2, r3
 800b988:	d305      	bcc.n	800b996 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800b98a:	4b36      	ldr	r3, [pc, #216]	; (800ba64 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800b98c:	4a36      	ldr	r2, [pc, #216]	; (800ba68 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800b98e:	21cb      	movs	r1, #203	; 0xcb
 800b990:	4833      	ldr	r0, [pc, #204]	; (800ba60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b992:	f011 ff25 	bl	801d7e0 <__assert_func>
            const uint16_t index = pos + offset;
 800b996:	6a3b      	ldr	r3, [r7, #32]
 800b998:	8a9a      	ldrh	r2, [r3, #20]
 800b99a:	8bfb      	ldrh	r3, [r7, #30]
 800b99c:	4413      	add	r3, r2
 800b99e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800b9a0:	8bbb      	ldrh	r3, [r7, #28]
 800b9a2:	2b09      	cmp	r3, #9
 800b9a4:	d801      	bhi.n	800b9aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800b9a6:	8bbb      	ldrh	r3, [r7, #28]
 800b9a8:	e001      	b.n	800b9ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800b9aa:	8bbb      	ldrh	r3, [r7, #28]
 800b9ac:	3b0a      	subs	r3, #10
 800b9ae:	6a3a      	ldr	r2, [r7, #32]
 800b9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9b4:	f640 123f 	movw	r2, #2367	; 0x93f
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	bf0c      	ite	eq
 800b9bc:	2301      	moveq	r3, #1
 800b9be:	2300      	movne	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d03f      	beq.n	800ba46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	3322      	adds	r3, #34	; 0x22
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	3222      	adds	r2, #34	; 0x22
 800b9ce:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	8ad2      	ldrh	r2, [r2, #22]
 800b9d4:	2a00      	cmp	r2, #0
 800b9d6:	d105      	bne.n	800b9e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800b9d8:	4b1f      	ldr	r3, [pc, #124]	; (800ba58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800b9da:	4a20      	ldr	r2, [pc, #128]	; (800ba5c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800b9dc:	21c5      	movs	r1, #197	; 0xc5
 800b9de:	4820      	ldr	r0, [pc, #128]	; (800ba60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b9e0:	f011 fefe 	bl	801d7e0 <__assert_func>
            return buffer[pos];
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	8a92      	ldrh	r2, [r2, #20]
 800b9e8:	4611      	mov	r1, r2
 800b9ea:	68ba      	ldr	r2, [r7, #8]
 800b9ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800b9f0:	613b      	str	r3, [r7, #16]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	8adb      	ldrh	r3, [r3, #22]
 800b9fa:	2b01      	cmp	r3, #1
 800b9fc:	d806      	bhi.n	800ba0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800b9fe:	4b1b      	ldr	r3, [pc, #108]	; (800ba6c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800ba00:	4a1b      	ldr	r2, [pc, #108]	; (800ba70 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800ba02:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800ba06:	4816      	ldr	r0, [pc, #88]	; (800ba60 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800ba08:	f011 feea 	bl	801d7e0 <__assert_func>
            const uint16_t index = pos + 1;
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	8a9b      	ldrh	r3, [r3, #20]
 800ba10:	3301      	adds	r3, #1
 800ba12:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800ba14:	89bb      	ldrh	r3, [r7, #12]
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d801      	bhi.n	800ba1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800ba1a:	89bb      	ldrh	r3, [r7, #12]
 800ba1c:	e000      	b.n	800ba20 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800ba1e:	2300      	movs	r3, #0
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	89f9      	ldrh	r1, [r7, #14]
 800ba24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800ba28:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	3322      	adds	r3, #34	; 0x22
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	f640 133f 	movw	r3, #2367	; 0x93f
 800ba34:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	8a9b      	ldrh	r3, [r3, #20]
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	8afa      	ldrh	r2, [r7, #22]
 800ba40:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800ba44:	bf00      	nop
        }
    }
    return getNextChar();
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f007 ffae 	bl	80139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800ba4c:	4603      	mov	r3, r0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3728      	adds	r7, #40	; 0x28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	0801ec48 	.word	0x0801ec48
 800ba5c:	0801ec54 	.word	0x0801ec54
 800ba60:	0801ed00 	.word	0x0801ed00
 800ba64:	0801ed48 	.word	0x0801ed48
 800ba68:	0801ed58 	.word	0x0801ed58
 800ba6c:	0801ee2c 	.word	0x0801ee2c
 800ba70:	0801ee38 	.word	0x0801ee38

0800ba74 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f007 ff5c 	bl	801393a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b088      	sub	sp, #32
 800ba8e:	af02      	add	r7, sp, #8
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	1d38      	adds	r0, r7, #4
 800ba94:	e880 0006 	stmia.w	r0, {r1, r2}
 800ba98:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800ba9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ba9e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800baa0:	1d39      	adds	r1, r7, #4
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	9301      	str	r3, [sp, #4]
 800baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	6a3b      	ldr	r3, [r7, #32]
 800baac:	683a      	ldr	r2, [r7, #0]
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f005 f9e2 	bl	8010e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800bab4:	bf00      	nop
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800babc:	b590      	push	{r4, r7, lr}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800bac6:	2300      	movs	r3, #0
 800bac8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800baca:	88fb      	ldrh	r3, [r7, #6]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d127      	bne.n	800bb20 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800bad0:	88fb      	ldrh	r3, [r7, #6]
 800bad2:	4a1e      	ldr	r2, [pc, #120]	; (800bb4c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800bad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d016      	beq.n	800bb0a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800badc:	88fb      	ldrh	r3, [r7, #6]
 800bade:	4a1b      	ldr	r2, [pc, #108]	; (800bb4c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800bae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bae4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	4413      	add	r3, r2
 800baee:	4a18      	ldr	r2, [pc, #96]	; (800bb50 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800baf0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	4413      	add	r3, r2
 800bafa:	4a16      	ldr	r2, [pc, #88]	; (800bb54 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800bafc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	4413      	add	r3, r2
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	e00a      	b.n	800bb20 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800bb0a:	4b11      	ldr	r3, [pc, #68]	; (800bb50 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800bb0c:	4a12      	ldr	r2, [pc, #72]	; (800bb58 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800bb0e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800bb10:	4a12      	ldr	r2, [pc, #72]	; (800bb5c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800bb12:	4b10      	ldr	r3, [pc, #64]	; (800bb54 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800bb14:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800bb16:	88fb      	ldrh	r3, [r7, #6]
 800bb18:	4a11      	ldr	r2, [pc, #68]	; (800bb60 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800bb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb1e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00d      	beq.n	800bb42 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800bb26:	4a0f      	ldr	r2, [pc, #60]	; (800bb64 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800bb28:	88fb      	ldrh	r3, [r7, #6]
 800bb2a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800bb2c:	f000 f83e 	bl	800bbac <_ZN17TypedTextDatabase8getFontsEv>
 800bb30:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800bb32:	f000 f833 	bl	800bb9c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800bb36:	4603      	mov	r3, r0
 800bb38:	461a      	mov	r2, r3
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff fea5 	bl	800b88c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800bb42:	bf00      	nop
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd90      	pop	{r4, r7, pc}
 800bb4a:	bf00      	nop
 800bb4c:	24019850 	.word	0x24019850
 800bb50:	24019858 	.word	0x24019858
 800bb54:	2401985c 	.word	0x2401985c
 800bb58:	08092ff8 	.word	0x08092ff8
 800bb5c:	08092ff0 	.word	0x08092ff0
 800bb60:	08093028 	.word	0x08093028
 800bb64:	24019854 	.word	0x24019854

0800bb68 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800bb74:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800bb7a:	6819      	ldr	r1, [r3, #0]
 800bb7c:	887b      	ldrh	r3, [r7, #2]
 800bb7e:	009b      	lsls	r3, r3, #2
 800bb80:	440b      	add	r3, r1
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4413      	add	r3, r2
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	24019858 	.word	0x24019858
 800bb98:	2401985c 	.word	0x2401985c

0800bb9c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800bba0:	2302      	movs	r3, #2
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800bbb0:	4b02      	ldr	r3, [pc, #8]	; (800bbbc <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	24019860 	.word	0x24019860

0800bbc0 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d113      	bne.n	800bbf8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d10e      	bne.n	800bbf8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800bbda:	f7fd fe5b 	bl	8009894 <_Z23getFont_verdana_20_4bppv>
 800bbde:	4603      	mov	r3, r0
};
 800bbe0:	4a07      	ldr	r2, [pc, #28]	; (800bc00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bbe2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800bbe4:	f7fd feb0 	bl	8009948 <_Z23getFont_verdana_40_4bppv>
 800bbe8:	4603      	mov	r3, r0
};
 800bbea:	4a05      	ldr	r2, [pc, #20]	; (800bc00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bbec:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800bbee:	f7fd fdf7 	bl	80097e0 <_Z23getFont_verdana_10_4bppv>
 800bbf2:	4603      	mov	r3, r0
};
 800bbf4:	4a02      	ldr	r2, [pc, #8]	; (800bc00 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bbf6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800bbf8:	bf00      	nop
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	24019860 	.word	0x24019860

0800bc04 <_GLOBAL__sub_I_touchgfx_fonts>:
 800bc04:	b580      	push	{r7, lr}
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bc0c:	2001      	movs	r0, #1
 800bc0e:	f7ff ffd7 	bl	800bbc0 <_Z41__static_initialization_and_destruction_0ii>
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	4a05      	ldr	r2, [pc, #20]	; (800bc34 <_ZN19FrontendApplicationD1Ev+0x20>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe f8ef 	bl	8009e08 <_ZN23FrontendApplicationBaseD1Ev>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3708      	adds	r7, #8
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	0801f86c 	.word	0x0801f86c

0800bc38 <_ZN19FrontendApplicationD0Ev>:
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff ffe7 	bl	800bc14 <_ZN19FrontendApplicationD1Ev>
 800bc46:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f011 fd99 	bl	801d782 <_ZdlPvj>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800bc5a:	b580      	push	{r7, lr}
 800bc5c:	b082      	sub	sp, #8
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f000 f82d 	bl	800bcc8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f005 fdf5 	bl	8011860 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800bc76:	bf00      	nop
 800bc78:	3708      	adds	r7, #8
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
	...

0800bc80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe f908 	bl	8009ea8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800bc98:	4a03      	ldr	r2, [pc, #12]	; (800bca8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	601a      	str	r2, [r3, #0]
{

}
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	0801f86c 	.word	0x0801f86c

0800bcac <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	601a      	str	r2, [r3, #0]
{

}
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <_ZN5Model4tickEv>:

void Model::tick()
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]

}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
    {
    }
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
    {
    }
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
    {
 800bd0c:	4a04      	ldr	r2, [pc, #16]	; (800bd20 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	601a      	str	r2, [r3, #0]
    }
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4618      	mov	r0, r3
 800bd16:	370c      	adds	r7, #12
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	0801f8f8 	.word	0x0801f8f8

0800bd24 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
    }
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f7ff ffe9 	bl	800bd04 <_ZN8touchgfx9PresenterD1Ev>
 800bd32:	2104      	movs	r1, #4
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f011 fd24 	bl	801d782 <_ZdlPvj>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
    {
 800bd4c:	4a04      	ldr	r2, [pc, #16]	; (800bd60 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	601a      	str	r2, [r3, #0]
    }
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4618      	mov	r0, r3
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	0801f8f8 	.word	0x0801f8f8

0800bd64 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	4a06      	ldr	r2, [pc, #24]	; (800bd88 <_ZN13ModelListenerC1Ev+0x24>)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2200      	movs	r2, #0
 800bd76:	605a      	str	r2, [r3, #4]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	370c      	adds	r7, #12
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop
 800bd88:	0801f8e8 	.word	0x0801f8e8

0800bd8c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	4a04      	ldr	r2, [pc, #16]	; (800bda8 <_ZN13ModelListenerD1Ev+0x1c>)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	601a      	str	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	0801f8e8 	.word	0x0801f8e8

0800bdac <_ZN13ModelListenerD0Ev>:
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f7ff ffe9 	bl	800bd8c <_ZN13ModelListenerD1Ev>
 800bdba:	2108      	movs	r1, #8
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f011 fce0 	bl	801d782 <_ZdlPvj>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	4a09      	ldr	r2, [pc, #36]	; (800bdfc <_ZN15screenPresenterD1Ev+0x30>)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	601a      	str	r2, [r3, #0]
 800bdda:	4a09      	ldr	r2, [pc, #36]	; (800be00 <_ZN15screenPresenterD1Ev+0x34>)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	605a      	str	r2, [r3, #4]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3304      	adds	r3, #4
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff ffd1 	bl	800bd8c <_ZN13ModelListenerD1Ev>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff ff89 	bl	800bd04 <_ZN8touchgfx9PresenterD1Ev>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	0801f8c0 	.word	0x0801f8c0
 800be00:	0801f8d8 	.word	0x0801f8d8

0800be04 <_ZThn4_N15screenPresenterD1Ev>:
 800be04:	f1a0 0004 	sub.w	r0, r0, #4
 800be08:	e7e0      	b.n	800bdcc <_ZN15screenPresenterD1Ev>
 800be0a:	bf00      	nop

0800be0c <_ZN15screenPresenterD0Ev>:
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7ff ffd9 	bl	800bdcc <_ZN15screenPresenterD1Ev>
 800be1a:	2110      	movs	r1, #16
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f011 fcb0 	bl	801d782 <_ZdlPvj>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <_ZThn4_N15screenPresenterD0Ev>:
 800be2c:	f1a0 0004 	sub.w	r0, r0, #4
 800be30:	e7ec      	b.n	800be0c <_ZN15screenPresenterD0Ev>
	...

0800be34 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
    : view(v)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff ff7f 	bl	800bd44 <_ZN8touchgfx9PresenterC1Ev>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3304      	adds	r3, #4
 800be4a:	4618      	mov	r0, r3
 800be4c:	f7ff ff8a 	bl	800bd64 <_ZN13ModelListenerC1Ev>
 800be50:	4a06      	ldr	r2, [pc, #24]	; (800be6c <_ZN15screenPresenterC1ER10screenView+0x38>)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	4a06      	ldr	r2, [pc, #24]	; (800be70 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	605a      	str	r2, [r3, #4]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	60da      	str	r2, [r3, #12]
{

}
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	0801f8c0 	.word	0x0801f8c0
 800be70:	0801f8d8 	.word	0x0801f8d8

0800be74 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]

}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]

}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	4a05      	ldr	r2, [pc, #20]	; (800bebc <_ZN10screenViewD1Ev+0x20>)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	601a      	str	r2, [r3, #0]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4618      	mov	r0, r3
 800beae:	f7ff fad7 	bl	800b460 <_ZN14screenViewBaseD1Ev>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}
 800bebc:	0801f910 	.word	0x0801f910

0800bec0 <_ZN10screenViewD0Ev>:
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff ffe7 	bl	800be9c <_ZN10screenViewD1Ev>
 800bece:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f011 fc55 	bl	801d782 <_ZdlPvj>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
	...

0800bee4 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff f8c2 	bl	800b078 <_ZN14screenViewBaseC1Ev>
 800bef4:	4a03      	ldr	r2, [pc, #12]	; (800bf04 <_ZN10screenViewC1Ev+0x20>)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	601a      	str	r2, [r3, #0]
{

}
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}
 800bf04:	0801f910 	.word	0x0801f910

0800bf08 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7ff fae9 	bl	800b4ea <_ZN14screenViewBase11setupScreenEv>
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe fd2a 	bl	800a984 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
    {
 800bf40:	4a04      	ldr	r2, [pc, #16]	; (800bf54 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	601a      	str	r2, [r3, #0]
    }
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	0801f95c 	.word	0x0801f95c

0800bf58 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b082      	sub	sp, #8
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
    }
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f7ff ffe9 	bl	800bf38 <_ZN8touchgfx15TouchControllerD1Ev>
 800bf66:	2104      	movs	r1, #4
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f011 fc0a 	bl	801d782 <_ZdlPvj>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4618      	mov	r0, r3
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	4a05      	ldr	r2, [pc, #20]	; (800bfc8 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	601a      	str	r2, [r3, #0]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff ffbd 	bl	800bf38 <_ZN8touchgfx15TouchControllerD1Ev>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3708      	adds	r7, #8
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	0801f944 	.word	0x0801f944

0800bfcc <_ZN20STM32TouchControllerD0Ev>:
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f7ff ffe7 	bl	800bfa8 <_ZN20STM32TouchControllerD1Ev>
 800bfda:	2104      	movs	r1, #4
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f011 fbd0 	bl	801d782 <_ZdlPvj>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0

}
 800bff0:	bf00      	nop
 800bff2:	46bd      	mov	sp, r7
 800bff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff8:	4770      	bx	lr
	...

0800bffc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	4603      	mov	r3, r0
 800c004:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800c006:	79fb      	ldrb	r3, [r7, #7]
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d827      	bhi.n	800c05c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
 800c00c:	a201      	add	r2, pc, #4	; (adr r2, 800c014 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800c00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c012:	bf00      	nop
 800c014:	0800c025 	.word	0x0800c025
 800c018:	0800c033 	.word	0x0800c033
 800c01c:	0800c041 	.word	0x0800c041
 800c020:	0800c04f 	.word	0x0800c04f
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 800c024:	2201      	movs	r2, #1
 800c026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c02a:	480e      	ldr	r0, [pc, #56]	; (800c064 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800c02c:	f7f6 f8a4 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c030:	e014      	b.n	800c05c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 800c032:	2201      	movs	r2, #1
 800c034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c038:	480a      	ldr	r0, [pc, #40]	; (800c064 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800c03a:	f7f6 f89d 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c03e:	e00d      	b.n	800c05c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 800c040:	2201      	movs	r2, #1
 800c042:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c046:	4808      	ldr	r0, [pc, #32]	; (800c068 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 800c048:	f7f6 f896 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c04c:	e006      	b.n	800c05c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 800c04e:	2201      	movs	r2, #1
 800c050:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c054:	4803      	ldr	r0, [pc, #12]	; (800c064 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800c056:	f7f6 f88f 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c05a:	bf00      	nop
    }
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}
 800c064:	58021c00 	.word	0x58021c00
 800c068:	58022000 	.word	0x58022000

0800c06c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	2b03      	cmp	r3, #3
 800c07a:	d827      	bhi.n	800c0cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
 800c07c:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800c07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c082:	bf00      	nop
 800c084:	0800c095 	.word	0x0800c095
 800c088:	0800c0a3 	.word	0x0800c0a3
 800c08c:	0800c0b1 	.word	0x0800c0b1
 800c090:	0800c0bf 	.word	0x0800c0bf
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800c094:	2200      	movs	r2, #0
 800c096:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c09a:	480e      	ldr	r0, [pc, #56]	; (800c0d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800c09c:	f7f6 f86c 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c0a0:	e014      	b.n	800c0cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c0a8:	480a      	ldr	r0, [pc, #40]	; (800c0d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800c0aa:	f7f6 f865 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c0ae:	e00d      	b.n	800c0cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c0b6:	4808      	ldr	r0, [pc, #32]	; (800c0d8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 800c0b8:	f7f6 f85e 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c0bc:	e006      	b.n	800c0cc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c0c4:	4803      	ldr	r0, [pc, #12]	; (800c0d4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800c0c6:	f7f6 f857 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800c0ca:	bf00      	nop
    }
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	58021c00 	.word	0x58021c00
 800c0d8:	58022000 	.word	0x58022000

0800c0dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800c0e6:	79fb      	ldrb	r3, [r7, #7]
 800c0e8:	2b03      	cmp	r3, #3
 800c0ea:	d823      	bhi.n	800c134 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800c0ec:	a201      	add	r2, pc, #4	; (adr r2, 800c0f4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800c0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f2:	bf00      	nop
 800c0f4:	0800c105 	.word	0x0800c105
 800c0f8:	0800c111 	.word	0x0800c111
 800c0fc:	0800c11d 	.word	0x0800c11d
 800c100:	0800c129 	.word	0x0800c129
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800c104:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c108:	480c      	ldr	r0, [pc, #48]	; (800c13c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800c10a:	f7f6 f84e 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800c10e:	e011      	b.n	800c134 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800c110:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c114:	4809      	ldr	r0, [pc, #36]	; (800c13c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800c116:	f7f6 f848 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800c11a:	e00b      	b.n	800c134 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800c11c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c120:	4807      	ldr	r0, [pc, #28]	; (800c140 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 800c122:	f7f6 f842 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800c126:	e005      	b.n	800c134 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800c128:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c12c:	4803      	ldr	r0, [pc, #12]	; (800c13c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800c12e:	f7f6 f83c 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800c132:	bf00      	nop
    }
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	58021c00 	.word	0x58021c00
 800c140:	58022000 	.word	0x58022000

0800c144 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
    {
 800c14c:	4a04      	ldr	r2, [pc, #16]	; (800c160 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]
    }
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	0801fd3c 	.word	0x0801fd3c

0800c164 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    }
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff ffe9 	bl	800c144 <_ZN8touchgfx3HALD1Ev>
 800c172:	217c      	movs	r1, #124	; 0x7c
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f011 fb04 	bl	801d782 <_ZdlPvj>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4618      	mov	r0, r3
 800c17e:	3708      	adds	r7, #8
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}

0800c184 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800c184:	b480      	push	{r7}
 800c186:	b083      	sub	sp, #12
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	460b      	mov	r3, r1
 800c18e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	78fa      	ldrb	r2, [r7, #3]
 800c194:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	807b      	strh	r3, [r7, #2]
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800c1bc:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	887a      	ldrh	r2, [r7, #2]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d304      	bcc.n	800c1d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800c1c6:	4b0b      	ldr	r3, [pc, #44]	; (800c1f4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800c1c8:	881b      	ldrh	r3, [r3, #0]
 800c1ca:	883a      	ldrh	r2, [r7, #0]
 800c1cc:	429a      	cmp	r2, r3
 800c1ce:	d205      	bcs.n	800c1dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800c1d2:	4a0a      	ldr	r2, [pc, #40]	; (800c1fc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800c1d4:	219e      	movs	r1, #158	; 0x9e
 800c1d6:	480a      	ldr	r0, [pc, #40]	; (800c200 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800c1d8:	f011 fb02 	bl	801d7e0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800c1dc:	4a09      	ldr	r2, [pc, #36]	; (800c204 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800c1de:	887b      	ldrh	r3, [r7, #2]
 800c1e0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800c1e2:	4a09      	ldr	r2, [pc, #36]	; (800c208 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800c1e4:	883b      	ldrh	r3, [r7, #0]
 800c1e6:	8013      	strh	r3, [r2, #0]
    }
 800c1e8:	bf00      	nop
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	2401aa6c 	.word	0x2401aa6c
 800c1f4:	2401aa6e 	.word	0x2401aa6e
 800c1f8:	0801eeec 	.word	0x0801eeec
 800c1fc:	0801ef50 	.word	0x0801ef50
 800c200:	0801ef94 	.word	0x0801ef94
 800c204:	2401aa72 	.word	0x2401aa72
 800c208:	2401aa74 	.word	0x2401aa74

0800c20c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d009      	beq.n	800c232 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685a      	ldr	r2, [r3, #4]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4610      	mov	r0, r2
 800c22c:	4798      	blx	r3
 800c22e:	4603      	mov	r3, r0
 800c230:	e000      	b.n	800c234 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800c232:	2300      	movs	r3, #0
    }
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f002 fe67 	bl	800ef18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	33ac      	adds	r3, #172	; 0xac
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	4798      	blx	r3
    }
 800c256:	bf00      	nop
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800c25e:	b480      	push	{r7}
 800c260:	b083      	sub	sp, #12
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800c268:	2300      	movs	r3, #0
    }
 800c26a:	4618      	mov	r0, r3
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
	...

0800c278 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	60f8      	str	r0, [r7, #12]
 800c280:	60b9      	str	r1, [r7, #8]
 800c282:	607a      	str	r2, [r7, #4]
 800c284:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d106      	bne.n	800c29a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800c28e:	4a10      	ldr	r2, [pc, #64]	; (800c2d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800c290:	f240 21d2 	movw	r1, #722	; 0x2d2
 800c294:	480f      	ldr	r0, [pc, #60]	; (800c2d4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800c296:	f011 faa3 	bl	801d7e0 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bf14      	ite	ne
 800c2ac:	2301      	movne	r3, #1
 800c2ae:	2300      	moveq	r3, #0
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	4b09      	ldr	r3, [pc, #36]	; (800c2d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800c2b4:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	338c      	adds	r3, #140	; 0x8c
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	4798      	blx	r3
    }
 800c2c4:	bf00      	nop
 800c2c6:	3710      	adds	r7, #16
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	0801efd8 	.word	0x0801efd8
 800c2d0:	0801f010 	.word	0x0801f010
 800c2d4:	0801ef94 	.word	0x0801ef94
 800c2d8:	2401aa76 	.word	0x2401aa76

0800c2dc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800c2dc:	b480      	push	{r7}
 800c2de:	b083      	sub	sp, #12
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	6078      	str	r0, [r7, #4]
 800c2e4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	bf14      	ite	ne
 800c2f2:	2301      	movne	r3, #1
 800c2f4:	2300      	moveq	r3, #0
 800c2f6:	b2da      	uxtb	r2, r3
 800c2f8:	4b03      	ldr	r3, [pc, #12]	; (800c308 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800c2fa:	701a      	strb	r2, [r3, #0]
    }
 800c2fc:	bf00      	nop
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	2401aa77 	.word	0x2401aa77

0800c30c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c314:	2300      	movs	r3, #0
    }
 800c316:	4618      	mov	r0, r3
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	460b      	mov	r3, r1
 800c32c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33a:	887a      	ldrh	r2, [r7, #2]
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
        }
    }
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	685a      	ldr	r2, [r3, #4]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3318      	adds	r3, #24
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4610      	mov	r0, r2
 800c360:	4798      	blx	r3
 800c362:	4603      	mov	r3, r0
    }
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800c36c:	b480      	push	{r7}
 800c36e:	b085      	sub	sp, #20
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c380:	429a      	cmp	r2, r3
 800c382:	d011      	beq.n	800c3a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800c384:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d11e      	bne.n	800c3ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800c38c:	4b13      	ldr	r3, [pc, #76]	; (800c3dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800c392:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c394:	881a      	ldrh	r2, [r3, #0]
 800c396:	4b11      	ldr	r3, [pc, #68]	; (800c3dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c398:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800c39a:	4a11      	ldr	r2, [pc, #68]	; (800c3e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c39c:	89bb      	ldrh	r3, [r7, #12]
 800c39e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800c3a0:	4b0d      	ldr	r3, [pc, #52]	; (800c3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800c3a6:	e010      	b.n	800c3ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800c3a8:	4b0b      	ldr	r3, [pc, #44]	; (800c3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00c      	beq.n	800c3ca <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c3b2:	881b      	ldrh	r3, [r3, #0]
 800c3b4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800c3b6:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c3b8:	881a      	ldrh	r2, [r3, #0]
 800c3ba:	4b08      	ldr	r3, [pc, #32]	; (800c3dc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c3bc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800c3be:	4a08      	ldr	r2, [pc, #32]	; (800c3e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c3c0:	89fb      	ldrh	r3, [r7, #14]
 800c3c2:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800c3c4:	4b04      	ldr	r3, [pc, #16]	; (800c3d8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
    }
 800c3ca:	bf00      	nop
 800c3cc:	3714      	adds	r7, #20
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	2401aa70 	.word	0x2401aa70
 800c3dc:	2401aa6e 	.word	0x2401aa6e
 800c3e0:	2401aa6c 	.word	0x2401aa6c

0800c3e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f001 ffef 	bl	800e3d2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b082      	sub	sp, #8
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	4a05      	ldr	r2, [pc, #20]	; (800c41c <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7ff fe99 	bl	800c144 <_ZN8touchgfx3HALD1Ev>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4618      	mov	r0, r3
 800c416:	3708      	adds	r7, #8
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}
 800c41c:	0801fb94 	.word	0x0801fb94

0800c420 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800c420:	b580      	push	{r7, lr}
 800c422:	b082      	sub	sp, #8
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff ffe7 	bl	800c3fc <_ZN20TouchGFXGeneratedHALD1Ev>
 800c42e:	217c      	movs	r1, #124	; 0x7c
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f011 f9a6 	bl	801d782 <_ZdlPvj>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	4618      	mov	r0, r3
 800c43a:	3708      	adds	r7, #8
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c440:	b580      	push	{r7, lr}
 800c442:	b082      	sub	sp, #8
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7ff ffca 	bl	800c3e4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4618      	mov	r0, r3
 800c464:	f001 faf6 	bl	800da54 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800c468:	bf00      	nop
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}

0800c470 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f001 fb8c 	bl	800db98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800c480:	4603      	mov	r3, r0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3708      	adds	r7, #8
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	f001 fb8b 	bl	800dbb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6839      	ldr	r1, [r7, #0]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f001 fb93 	bl	800dbe0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800c4ba:	bf00      	nop
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b084      	sub	sp, #16
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	60f8      	str	r0, [r7, #12]
 800c4ca:	60b9      	str	r1, [r7, #8]
 800c4cc:	607a      	str	r2, [r7, #4]
 800c4ce:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800c4d0:	68f8      	ldr	r0, [r7, #12]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	68b9      	ldr	r1, [r7, #8]
 800c4d8:	f001 fb90 	bl	800dbfc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800c4dc:	4603      	mov	r3, r0
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3710      	adds	r7, #16
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b082      	sub	sp, #8
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f001 fadd 	bl	800dab0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800c4f6:	bf00      	nop
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b082      	sub	sp, #8
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4618      	mov	r0, r3
 800c50a:	f001 fae1 	bl	800dad0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b082      	sub	sp, #8
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	4618      	mov	r0, r3
 800c522:	f001 fae3 	bl	800daec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800c526:	bf00      	nop
 800c528:	3708      	adds	r7, #8
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4618      	mov	r0, r3
 800c53a:	f001 fae5 	bl	800db08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4618      	mov	r0, r3
 800c552:	f001 fb07 	bl	800db64 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800c556:	4603      	mov	r3, r0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	4618      	mov	r0, r3
 800c56c:	f001 fb07 	bl	800db7e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800c570:	bf00      	nop
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	4a05      	ldr	r2, [pc, #20]	; (800c598 <_ZN11TouchGFXHALD1Ev+0x20>)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	601a      	str	r2, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	f7ff ff37 	bl	800c3fc <_ZN20TouchGFXGeneratedHALD1Ev>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	0801f974 	.word	0x0801f974

0800c59c <_ZN11TouchGFXHALD0Ev>:
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff ffe7 	bl	800c578 <_ZN11TouchGFXHALD1Ev>
 800c5aa:	217c      	movs	r1, #124	; 0x7c
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f011 f8e8 	bl	801d782 <_ZdlPvj>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	2001      	movs	r0, #1
 800c5c6:	f7f9 fbde 	bl	8005d86 <osSemaphoreNew>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	4a0f      	ldr	r2, [pc, #60]	; (800c60c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800c5ce:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800c5d0:	4b0e      	ldr	r3, [pc, #56]	; (800c60c <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d105      	bne.n	800c5e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800c5d8:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800c5da:	4a0e      	ldr	r2, [pc, #56]	; (800c614 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800c5dc:	2128      	movs	r1, #40	; 0x28
 800c5de:	480e      	ldr	r0, [pc, #56]	; (800c618 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800c5e0:	f011 f8fe 	bl	801d7e0 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	2104      	movs	r1, #4
 800c5e8:	2001      	movs	r0, #1
 800c5ea:	f7f9 fceb 	bl	8005fc4 <osMessageQueueNew>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	; (800c61c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800c5f2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800c5f4:	4b09      	ldr	r3, [pc, #36]	; (800c61c <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d105      	bne.n	800c608 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800c5fc:	4b08      	ldr	r3, [pc, #32]	; (800c620 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800c5fe:	4a05      	ldr	r2, [pc, #20]	; (800c614 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800c600:	212c      	movs	r1, #44	; 0x2c
 800c602:	4805      	ldr	r0, [pc, #20]	; (800c618 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800c604:	f011 f8ec 	bl	801d7e0 <__assert_func>
}
 800c608:	bf00      	nop
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	2401986c 	.word	0x2401986c
 800c610:	0801f060 	.word	0x0801f060
 800c614:	0801f0ac 	.word	0x0801f0ac
 800c618:	0801f0dc 	.word	0x0801f0dc
 800c61c:	24019870 	.word	0x24019870
 800c620:	0801f108 	.word	0x0801f108

0800c624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800c624:	b580      	push	{r7, lr}
 800c626:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800c628:	4b04      	ldr	r3, [pc, #16]	; (800c63c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f04f 31ff 	mov.w	r1, #4294967295
 800c630:	4618      	mov	r0, r3
 800c632:	f7f9 fc31 	bl	8005e98 <osSemaphoreAcquire>
}
 800c636:	bf00      	nop
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	2401986c 	.word	0x2401986c

0800c640 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800c640:	b580      	push	{r7, lr}
 800c642:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800c644:	4b03      	ldr	r3, [pc, #12]	; (800c654 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4618      	mov	r0, r3
 800c64a:	f7f9 fc77 	bl	8005f3c <osSemaphoreRelease>
}
 800c64e:	bf00      	nop
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	2401986c 	.word	0x2401986c

0800c658 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800c65c:	4b03      	ldr	r3, [pc, #12]	; (800c66c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2100      	movs	r1, #0
 800c662:	4618      	mov	r0, r3
 800c664:	f7f9 fc18 	bl	8005e98 <osSemaphoreAcquire>
}
 800c668:	bf00      	nop
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	2401986c 	.word	0x2401986c

0800c670 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800c674:	4b03      	ldr	r3, [pc, #12]	; (800c684 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4618      	mov	r0, r3
 800c67a:	f7f9 fc5f 	bl	8005f3c <osSemaphoreRelease>
}
 800c67e:	bf00      	nop
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	2401986c 	.word	0x2401986c

0800c688 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800c68c:	4b04      	ldr	r3, [pc, #16]	; (800c6a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800c68e:	6818      	ldr	r0, [r3, #0]
 800c690:	2300      	movs	r3, #0
 800c692:	2200      	movs	r2, #0
 800c694:	4903      	ldr	r1, [pc, #12]	; (800c6a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800c696:	f7f9 fd09 	bl	80060ac <osMessageQueuePut>
}
 800c69a:	bf00      	nop
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	24019870 	.word	0x24019870
 800c6a4:	24000018 	.word	0x24000018

0800c6a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800c6ae:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800c6b0:	6818      	ldr	r0, [r3, #0]
 800c6b2:	1d39      	adds	r1, r7, #4
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	f7f9 fd58 	bl	800616c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800c6bc:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	1d39      	adds	r1, r7, #4
 800c6c2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f7f9 fd50 	bl	800616c <osMessageQueueGet>
}
 800c6cc:	bf00      	nop
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	24019870 	.word	0x24019870

0800c6d8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800c6e2:	88fb      	ldrh	r3, [r7, #6]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7f9 fb33 	bl	8005d50 <osDelay>
}
 800c6ea:	bf00      	nop
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <__NVIC_EnableIRQ>:
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b083      	sub	sp, #12
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c6fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c702:	2b00      	cmp	r3, #0
 800c704:	db0b      	blt.n	800c71e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c706:	88fb      	ldrh	r3, [r7, #6]
 800c708:	f003 021f 	and.w	r2, r3, #31
 800c70c:	4907      	ldr	r1, [pc, #28]	; (800c72c <__NVIC_EnableIRQ+0x38>)
 800c70e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c712:	095b      	lsrs	r3, r3, #5
 800c714:	2001      	movs	r0, #1
 800c716:	fa00 f202 	lsl.w	r2, r0, r2
 800c71a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c71e:	bf00      	nop
 800c720:	370c      	adds	r7, #12
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	e000e100 	.word	0xe000e100

0800c730 <__NVIC_DisableIRQ>:
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c73a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	db12      	blt.n	800c768 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c742:	88fb      	ldrh	r3, [r7, #6]
 800c744:	f003 021f 	and.w	r2, r3, #31
 800c748:	490a      	ldr	r1, [pc, #40]	; (800c774 <__NVIC_DisableIRQ+0x44>)
 800c74a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c74e:	095b      	lsrs	r3, r3, #5
 800c750:	2001      	movs	r0, #1
 800c752:	fa00 f202 	lsl.w	r2, r0, r2
 800c756:	3320      	adds	r3, #32
 800c758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c75c:	f3bf 8f4f 	dsb	sy
}
 800c760:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c762:	f3bf 8f6f 	isb	sy
}
 800c766:	bf00      	nop
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	e000e100 	.word	0xe000e100

0800c778 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
        return color;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
    }
 800c784:	4618      	mov	r0, r3
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
    {
 800c798:	4a04      	ldr	r2, [pc, #16]	; (800c7ac <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]
    }
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	370c      	adds	r7, #12
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	0801fa9c 	.word	0x0801fa9c

0800c7b0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
    }
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ffe9 	bl	800c790 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c7be:	2104      	movs	r1, #4
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f010 ffde 	bl	801d782 <_ZdlPvj>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3344      	adds	r3, #68	; 0x44
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	4798      	blx	r3
    }
 800c7e4:	bf00      	nop
 800c7e6:	3708      	adds	r7, #8
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}

0800c7ec <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800c7ec:	b480      	push	{r7}
 800c7ee:	b083      	sub	sp, #12
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
    {
 800c7f4:	4a04      	ldr	r2, [pc, #16]	; (800c808 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	601a      	str	r2, [r3, #0]
    }
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	370c      	adds	r7, #12
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr
 800c808:	0801fe14 	.word	0x0801fe14

0800c80c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
    }
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f7ff ffe9 	bl	800c7ec <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800c81a:	210c      	movs	r1, #12
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f010 ffb0 	bl	801d782 <_ZdlPvj>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800c836:	4a09      	ldr	r2, [pc, #36]	; (800c85c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	601a      	str	r2, [r3, #0]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	605a      	str	r2, [r3, #4]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	721a      	strb	r2, [r3, #8]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	725a      	strb	r2, [r3, #9]
    {
    }
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4618      	mov	r0, r3
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	0801fe14 	.word	0x0801fe14

0800c860 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800c860:	b480      	push	{r7}
 800c862:	b083      	sub	sp, #12
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800c868:	2301      	movs	r3, #1
    }
 800c86a:	4618      	mov	r0, r3
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c874:	4770      	bx	lr

0800c876 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800c876:	b580      	push	{r7, lr}
 800c878:	b082      	sub	sp, #8
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	3328      	adds	r3, #40	; 0x28
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
    }
 800c88c:	bf00      	nop
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800c894:	b580      	push	{r7, lr}
 800c896:	b082      	sub	sp, #8
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685a      	ldr	r2, [r3, #4]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	3314      	adds	r3, #20
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4798      	blx	r3
    }
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800c8be:	f7fd f959 	bl	8009b74 <_ZN8touchgfx3HAL11getInstanceEv>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7ff ffe5 	bl	800c894 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800c8ca:	bf00      	nop
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	330c      	adds	r3, #12
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fd fdd2 	bl	800a488 <_ZN8touchgfx9colortypeC1Ev>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
	...

0800c8f0 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800c8f0:	b5b0      	push	{r4, r5, r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	330c      	adds	r3, #12
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7ff ff93 	bl	800c82c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800c906:	4a0e      	ldr	r2, [pc, #56]	; (800c940 <_ZN8STM32DMAC1Ev+0x50>)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	601a      	str	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f103 000c 	add.w	r0, r3, #12
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	3320      	adds	r3, #32
 800c916:	2260      	movs	r2, #96	; 0x60
 800c918:	4619      	mov	r1, r3
 800c91a:	f002 fc37 	bl	800f18c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	3320      	adds	r3, #32
 800c922:	245f      	movs	r4, #95	; 0x5f
 800c924:	461d      	mov	r5, r3
 800c926:	e004      	b.n	800c932 <_ZN8STM32DMAC1Ev+0x42>
 800c928:	4628      	mov	r0, r5
 800c92a:	f7ff ffd2 	bl	800c8d2 <_ZN8touchgfx6BlitOpC1Ev>
 800c92e:	3524      	adds	r5, #36	; 0x24
 800c930:	3c01      	subs	r4, #1
 800c932:	2c00      	cmp	r4, #0
 800c934:	daf8      	bge.n	800c928 <_ZN8STM32DMAC1Ev+0x38>
{
}
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4618      	mov	r0, r3
 800c93a:	3708      	adds	r7, #8
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bdb0      	pop	{r4, r5, r7, pc}
 800c940:	0801fa4c 	.word	0x0801fa4c

0800c944 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800c944:	b580      	push	{r7, lr}
 800c946:	b082      	sub	sp, #8
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	4a09      	ldr	r2, [pc, #36]	; (800c974 <_ZN8STM32DMAD1Ev+0x30>)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800c952:	205a      	movs	r0, #90	; 0x5a
 800c954:	f7ff feec 	bl	800c730 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	330c      	adds	r3, #12
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fab3 	bl	800cec8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff ff41 	bl	800c7ec <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4618      	mov	r0, r3
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	0801fa4c 	.word	0x0801fa4c

0800c978 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
}
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f7ff ffdf 	bl	800c944 <_ZN8STM32DMAD1Ev>
 800c986:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f010 fef9 	bl	801d782 <_ZdlPvj>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4618      	mov	r0, r3
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
	...

0800c99c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b084      	sub	sp, #16
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c9a4:	4b12      	ldr	r3, [pc, #72]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c9aa:	4a11      	ldr	r2, [pc, #68]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9ac:	f043 0310 	orr.w	r3, r3, #16
 800c9b0:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800c9b4:	4b0e      	ldr	r3, [pc, #56]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c9ba:	f003 0310 	and.w	r3, r3, #16
 800c9be:	60fb      	str	r3, [r7, #12]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800c9c2:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9c6:	4a0a      	ldr	r2, [pc, #40]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9c8:	f043 0310 	orr.w	r3, r3, #16
 800c9cc:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800c9ce:	4b08      	ldr	r3, [pc, #32]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9d2:	4a07      	ldr	r2, [pc, #28]	; (800c9f0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c9d4:	f023 0310 	bic.w	r3, r3, #16
 800c9d8:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800c9da:	4b06      	ldr	r3, [pc, #24]	; (800c9f4 <_ZN8STM32DMA10initializeEv+0x58>)
 800c9dc:	4a06      	ldr	r2, [pc, #24]	; (800c9f8 <_ZN8STM32DMA10initializeEv+0x5c>)
 800c9de:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800c9e0:	205a      	movs	r0, #90	; 0x5a
 800c9e2:	f7ff fe87 	bl	800c6f4 <__NVIC_EnableIRQ>
}
 800c9e6:	bf00      	nop
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}
 800c9ee:	bf00      	nop
 800c9f0:	58024400 	.word	0x58024400
 800c9f4:	24000120 	.word	0x24000120
 800c9f8:	0800c8b7 	.word	0x0800c8b7

0800c9fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800ca0c:	78fb      	ldrb	r3, [r7, #3]
 800ca0e:	2b0b      	cmp	r3, #11
 800ca10:	d826      	bhi.n	800ca60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800ca12:	a201      	add	r2, pc, #4	; (adr r2, 800ca18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800ca14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca18:	0800ca55 	.word	0x0800ca55
 800ca1c:	0800ca4f 	.word	0x0800ca4f
 800ca20:	0800ca49 	.word	0x0800ca49
 800ca24:	0800ca61 	.word	0x0800ca61
 800ca28:	0800ca61 	.word	0x0800ca61
 800ca2c:	0800ca61 	.word	0x0800ca61
 800ca30:	0800ca61 	.word	0x0800ca61
 800ca34:	0800ca5b 	.word	0x0800ca5b
 800ca38:	0800ca5b 	.word	0x0800ca5b
 800ca3c:	0800ca5b 	.word	0x0800ca5b
 800ca40:	0800ca5b 	.word	0x0800ca5b
 800ca44:	0800ca5b 	.word	0x0800ca5b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60fb      	str	r3, [r7, #12]
        break;
 800ca4c:	e00e      	b.n	800ca6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	60fb      	str	r3, [r7, #12]
        break;
 800ca52:	e00b      	b.n	800ca6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800ca54:	2302      	movs	r3, #2
 800ca56:	60fb      	str	r3, [r7, #12]
        break;
 800ca58:	e008      	b.n	800ca6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800ca5a:	2305      	movs	r3, #5
 800ca5c:	60fb      	str	r3, [r7, #12]
        break;
 800ca5e:	e005      	b.n	800ca6c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800ca60:	4b05      	ldr	r3, [pc, #20]	; (800ca78 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800ca62:	4a06      	ldr	r2, [pc, #24]	; (800ca7c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800ca64:	2165      	movs	r1, #101	; 0x65
 800ca66:	4806      	ldr	r0, [pc, #24]	; (800ca80 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800ca68:	f010 feba 	bl	801d7e0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	0801f14c 	.word	0x0801f14c
 800ca7c:	0801f168 	.word	0x0801f168
 800ca80:	0801f1b4 	.word	0x0801f1b4

0800ca84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]

    switch (format)
 800ca94:	78fb      	ldrb	r3, [r7, #3]
 800ca96:	2b0a      	cmp	r3, #10
 800ca98:	d821      	bhi.n	800cade <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800ca9a:	a201      	add	r2, pc, #4	; (adr r2, 800caa0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa0:	0800cad9 	.word	0x0800cad9
 800caa4:	0800cad3 	.word	0x0800cad3
 800caa8:	0800cacd 	.word	0x0800cacd
 800caac:	0800cadf 	.word	0x0800cadf
 800cab0:	0800cadf 	.word	0x0800cadf
 800cab4:	0800cadf 	.word	0x0800cadf
 800cab8:	0800cadf 	.word	0x0800cadf
 800cabc:	0800cad3 	.word	0x0800cad3
 800cac0:	0800cad3 	.word	0x0800cad3
 800cac4:	0800cad3 	.word	0x0800cad3
 800cac8:	0800cad3 	.word	0x0800cad3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800cacc:	2300      	movs	r3, #0
 800cace:	60fb      	str	r3, [r7, #12]
        break;
 800cad0:	e00b      	b.n	800caea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800cad2:	2301      	movs	r3, #1
 800cad4:	60fb      	str	r3, [r7, #12]
        break;
 800cad6:	e008      	b.n	800caea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800cad8:	2302      	movs	r3, #2
 800cada:	60fb      	str	r3, [r7, #12]
        break;
 800cadc:	e005      	b.n	800caea <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800cade:	4b05      	ldr	r3, [pc, #20]	; (800caf4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800cae0:	4a05      	ldr	r2, [pc, #20]	; (800caf8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800cae2:	2186      	movs	r1, #134	; 0x86
 800cae4:	4805      	ldr	r0, [pc, #20]	; (800cafc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800cae6:	f010 fe7b 	bl	801d7e0 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800caea:	68fb      	ldr	r3, [r7, #12]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	0801f14c 	.word	0x0801f14c
 800caf8:	0801f1e0 	.word	0x0801f1e0
 800cafc:	0801f1b4 	.word	0x0801f1b4

0800cb00 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800cb00:	b480      	push	{r7}
 800cb02:	b083      	sub	sp, #12
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800cb08:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800cb18:	b590      	push	{r4, r7, lr}
 800cb1a:	b089      	sub	sp, #36	; 0x24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	7f5b      	ldrb	r3, [r3, #29]
 800cb26:	4619      	mov	r1, r3
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f7ff ff67 	bl	800c9fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800cb2e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	7f9b      	ldrb	r3, [r3, #30]
 800cb34:	4619      	mov	r1, r3
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f7ff ff60 	bl	800c9fc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800cb3c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	7f9b      	ldrb	r3, [r3, #30]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f7ff ff9d 	bl	800ca84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800cb4a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	8b5b      	ldrh	r3, [r3, #26]
 800cb50:	461a      	mov	r2, r3
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	8a9b      	ldrh	r3, [r3, #20]
 800cb56:	1ad2      	subs	r2, r2, r3
 800cb58:	4b92      	ldr	r3, [pc, #584]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	8b5b      	ldrh	r3, [r3, #26]
 800cb60:	461a      	mov	r2, r3
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	8a9b      	ldrh	r3, [r3, #20]
 800cb66:	1ad2      	subs	r2, r2, r3
 800cb68:	4b8e      	ldr	r3, [pc, #568]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb6a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	8b1b      	ldrh	r3, [r3, #24]
 800cb70:	461a      	mov	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	8a9b      	ldrh	r3, [r3, #20]
 800cb76:	1ad2      	subs	r2, r2, r3
 800cb78:	4b8a      	ldr	r3, [pc, #552]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb7a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800cb7c:	4a89      	ldr	r2, [pc, #548]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	8adb      	ldrh	r3, [r3, #22]
 800cb86:	461a      	mov	r2, r3
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	8a9b      	ldrh	r3, [r3, #20]
 800cb8c:	041b      	lsls	r3, r3, #16
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	4b84      	ldr	r3, [pc, #528]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	691a      	ldr	r2, [r3, #16]
 800cb98:	4b82      	ldr	r3, [pc, #520]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	685a      	ldr	r2, [r3, #4]
 800cba0:	4b80      	ldr	r3, [pc, #512]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cba2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbac:	d037      	beq.n	800cc1e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800cbae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbb2:	f200 80e3 	bhi.w	800cd7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800cbb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbba:	d015      	beq.n	800cbe8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800cbbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cbc0:	f200 80dc 	bhi.w	800cd7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800cbc4:	2b80      	cmp	r3, #128	; 0x80
 800cbc6:	d045      	beq.n	800cc54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 800cbc8:	2b80      	cmp	r3, #128	; 0x80
 800cbca:	f200 80d7 	bhi.w	800cd7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800cbce:	2b40      	cmp	r3, #64	; 0x40
 800cbd0:	f000 80bf 	beq.w	800cd52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800cbd4:	2b40      	cmp	r3, #64	; 0x40
 800cbd6:	f200 80d1 	bhi.w	800cd7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800cbda:	2b04      	cmp	r3, #4
 800cbdc:	f000 80a4 	beq.w	800cd28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800cbe0:	2b20      	cmp	r3, #32
 800cbe2:	f000 80b6 	beq.w	800cd52 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800cbe6:	e0c9      	b.n	800cd7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	7f1b      	ldrb	r3, [r3, #28]
 800cbec:	061b      	lsls	r3, r3, #24
 800cbee:	4619      	mov	r1, r3
 800cbf0:	4a6c      	ldr	r2, [pc, #432]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbf2:	4b6d      	ldr	r3, [pc, #436]	; (800cda8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800cbf4:	430b      	orrs	r3, r1
 800cbf6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	330c      	adds	r3, #12
 800cbfc:	4c69      	ldr	r4, [pc, #420]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7ff fdba 	bl	800c778 <_ZNK8touchgfx9colortypecvmEv>
 800cc04:	4603      	mov	r3, r0
 800cc06:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cc08:	4a66      	ldr	r2, [pc, #408]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	691a      	ldr	r2, [r3, #16]
 800cc12:	4b64      	ldr	r3, [pc, #400]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc14:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cc16:	4b63      	ldr	r3, [pc, #396]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc18:	4a64      	ldr	r2, [pc, #400]	; (800cdac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cc1a:	601a      	str	r2, [r3, #0]
        break;
 800cc1c:	e0d9      	b.n	800cdd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	7f1b      	ldrb	r3, [r3, #28]
 800cc22:	061b      	lsls	r3, r3, #24
 800cc24:	4619      	mov	r1, r3
 800cc26:	4a5f      	ldr	r2, [pc, #380]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc28:	4b61      	ldr	r3, [pc, #388]	; (800cdb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800cc2a:	430b      	orrs	r3, r1
 800cc2c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	330c      	adds	r3, #12
 800cc32:	4c5c      	ldr	r4, [pc, #368]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fd9f 	bl	800c778 <_ZNK8touchgfx9colortypecvmEv>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cc3e:	4a59      	ldr	r2, [pc, #356]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	691a      	ldr	r2, [r3, #16]
 800cc48:	4b56      	ldr	r3, [pc, #344]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc4a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cc4c:	4b55      	ldr	r3, [pc, #340]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc4e:	4a57      	ldr	r2, [pc, #348]	; (800cdac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cc50:	601a      	str	r2, [r3, #0]
        break;
 800cc52:	e0be      	b.n	800cdd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	7f1b      	ldrb	r3, [r3, #28]
 800cc62:	061b      	lsls	r3, r3, #24
 800cc64:	461a      	mov	r2, r3
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	4313      	orrs	r3, r2
 800cc6a:	4a4e      	ldr	r2, [pc, #312]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc70:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cc72:	4a4c      	ldr	r2, [pc, #304]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	691a      	ldr	r2, [r3, #16]
 800cc7c:	4b49      	ldr	r3, [pc, #292]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc7e:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	1d1a      	adds	r2, r3, #4
 800cc84:	4b47      	ldr	r3, [pc, #284]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc86:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	881b      	ldrh	r3, [r3, #0]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d00d      	beq.n	800ccb2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800cc96:	e020      	b.n	800ccda <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800cc98:	4b42      	ldr	r3, [pc, #264]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc9a:	69da      	ldr	r2, [r3, #28]
 800cc9c:	4b45      	ldr	r3, [pc, #276]	; (800cdb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cc9e:	4013      	ands	r3, r2
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	8852      	ldrh	r2, [r2, #2]
 800cca4:	3a01      	subs	r2, #1
 800cca6:	0212      	lsls	r2, r2, #8
 800cca8:	4611      	mov	r1, r2
 800ccaa:	4a3e      	ldr	r2, [pc, #248]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ccac:	430b      	orrs	r3, r1
 800ccae:	61d3      	str	r3, [r2, #28]
                break;
 800ccb0:	e01a      	b.n	800cce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	7f1b      	ldrb	r3, [r3, #28]
 800ccb6:	2bff      	cmp	r3, #255	; 0xff
 800ccb8:	d101      	bne.n	800ccbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800ccbe:	4b39      	ldr	r3, [pc, #228]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ccc0:	69da      	ldr	r2, [r3, #28]
 800ccc2:	4b3c      	ldr	r3, [pc, #240]	; (800cdb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	8852      	ldrh	r2, [r2, #2]
 800ccca:	3a01      	subs	r2, #1
 800cccc:	0212      	lsls	r2, r2, #8
 800ccce:	4313      	orrs	r3, r2
 800ccd0:	4a34      	ldr	r2, [pc, #208]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ccd2:	f043 0310 	orr.w	r3, r3, #16
 800ccd6:	61d3      	str	r3, [r2, #28]
                break;
 800ccd8:	e006      	b.n	800cce8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800ccda:	4b37      	ldr	r3, [pc, #220]	; (800cdb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800ccdc:	4a37      	ldr	r2, [pc, #220]	; (800cdbc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800ccde:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cce2:	4837      	ldr	r0, [pc, #220]	; (800cdc0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800cce4:	f010 fd7c 	bl	801d7e0 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800cce8:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ccea:	69db      	ldr	r3, [r3, #28]
 800ccec:	4a2d      	ldr	r2, [pc, #180]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ccee:	f043 0320 	orr.w	r3, r3, #32
 800ccf2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800ccf4:	bf00      	nop
 800ccf6:	4b2b      	ldr	r3, [pc, #172]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ccf8:	69db      	ldr	r3, [r3, #28]
 800ccfa:	f003 0320 	and.w	r3, r3, #32
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	bf14      	ite	ne
 800cd02:	2301      	movne	r3, #1
 800cd04:	2300      	moveq	r3, #0
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d1f4      	bne.n	800ccf6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800cd0c:	4b25      	ldr	r3, [pc, #148]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd0e:	2210      	movs	r2, #16
 800cd10:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800cd12:	7ffb      	ldrb	r3, [r7, #31]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cd18:	4b22      	ldr	r3, [pc, #136]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd1a:	4a24      	ldr	r2, [pc, #144]	; (800cdac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cd1c:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800cd1e:	e058      	b.n	800cdd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800cd20:	4b20      	ldr	r3, [pc, #128]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd22:	4a28      	ldr	r2, [pc, #160]	; (800cdc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800cd24:	601a      	str	r2, [r3, #0]
        break;
 800cd26:	e054      	b.n	800cdd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	7f1b      	ldrb	r3, [r3, #28]
 800cd2c:	061b      	lsls	r3, r3, #24
 800cd2e:	461a      	mov	r2, r3
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	4a1b      	ldr	r2, [pc, #108]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd3a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cd3c:	4a19      	ldr	r2, [pc, #100]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	691a      	ldr	r2, [r3, #16]
 800cd46:	4b17      	ldr	r3, [pc, #92]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd48:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cd4a:	4b16      	ldr	r3, [pc, #88]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd4c:	4a17      	ldr	r2, [pc, #92]	; (800cdac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cd4e:	601a      	str	r2, [r3, #0]
        break;
 800cd50:	e03f      	b.n	800cdd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	7f1b      	ldrb	r3, [r3, #28]
 800cd56:	061b      	lsls	r3, r3, #24
 800cd58:	461a      	mov	r2, r3
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	4a11      	ldr	r2, [pc, #68]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd64:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cd66:	4a0f      	ldr	r2, [pc, #60]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	691a      	ldr	r2, [r3, #16]
 800cd70:	4b0c      	ldr	r3, [pc, #48]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd72:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cd74:	4b0b      	ldr	r3, [pc, #44]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd76:	4a0d      	ldr	r2, [pc, #52]	; (800cdac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cd78:	601a      	str	r2, [r3, #0]
        break;
 800cd7a:	e02a      	b.n	800cdd2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	7f1b      	ldrb	r3, [r3, #28]
 800cd80:	061b      	lsls	r3, r3, #24
 800cd82:	461a      	mov	r2, r3
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	4313      	orrs	r3, r2
 800cd88:	4a06      	ldr	r2, [pc, #24]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd8e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	7f5a      	ldrb	r2, [r3, #29]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	7f9b      	ldrb	r3, [r3, #30]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d015      	beq.n	800cdc8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800cd9c:	4b01      	ldr	r3, [pc, #4]	; (800cda4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cd9e:	4a09      	ldr	r2, [pc, #36]	; (800cdc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800cda0:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800cda2:	e015      	b.n	800cdd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800cda4:	52001000 	.word	0x52001000
 800cda8:	0002000a 	.word	0x0002000a
 800cdac:	00020201 	.word	0x00020201
 800cdb0:	00020009 	.word	0x00020009
 800cdb4:	ffff00ef 	.word	0xffff00ef
 800cdb8:	0801f22c 	.word	0x0801f22c
 800cdbc:	0801f248 	.word	0x0801f248
 800cdc0:	0801f1b4 	.word	0x0801f1b4
 800cdc4:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800cdc8:	4b04      	ldr	r3, [pc, #16]	; (800cddc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800cdca:	f240 2201 	movw	r2, #513	; 0x201
 800cdce:	601a      	str	r2, [r3, #0]
        break;
 800cdd0:	bf00      	nop
    }
}
 800cdd2:	bf00      	nop
 800cdd4:	3724      	adds	r7, #36	; 0x24
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd90      	pop	{r4, r7, pc}
 800cdda:	bf00      	nop
 800cddc:	52001000 	.word	0x52001000

0800cde0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800cde0:	b590      	push	{r4, r7, lr}
 800cde2:	b085      	sub	sp, #20
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	7f9b      	ldrb	r3, [r3, #30]
 800cdee:	4619      	mov	r1, r3
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7ff fe47 	bl	800ca84 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800cdf6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800cdf8:	4a2f      	ldr	r2, [pc, #188]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	8adb      	ldrh	r3, [r3, #22]
 800ce02:	461a      	mov	r2, r3
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	8a9b      	ldrh	r3, [r3, #20]
 800ce08:	041b      	lsls	r3, r3, #16
 800ce0a:	431a      	orrs	r2, r3
 800ce0c:	4b2a      	ldr	r3, [pc, #168]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	691a      	ldr	r2, [r3, #16]
 800ce14:	4b28      	ldr	r3, [pc, #160]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	8b5b      	ldrh	r3, [r3, #26]
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	8a9b      	ldrh	r3, [r3, #20]
 800ce22:	1ad2      	subs	r2, r2, r3
 800ce24:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce26:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b08      	cmp	r3, #8
 800ce2e:	d12e      	bne.n	800ce8e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	8b5b      	ldrh	r3, [r3, #26]
 800ce34:	461a      	mov	r2, r3
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	8a9b      	ldrh	r3, [r3, #20]
 800ce3a:	1ad2      	subs	r2, r2, r3
 800ce3c:	4b1e      	ldr	r3, [pc, #120]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce3e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	8b5b      	ldrh	r3, [r3, #26]
 800ce44:	461a      	mov	r2, r3
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	8a9b      	ldrh	r3, [r3, #20]
 800ce4a:	1ad2      	subs	r2, r2, r3
 800ce4c:	4b1a      	ldr	r3, [pc, #104]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce4e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800ce50:	4a19      	ldr	r2, [pc, #100]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	7f1b      	ldrb	r3, [r3, #28]
 800ce5a:	061b      	lsls	r3, r3, #24
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4a16      	ldr	r2, [pc, #88]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce60:	4b16      	ldr	r3, [pc, #88]	; (800cebc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800ce62:	430b      	orrs	r3, r1
 800ce64:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	330c      	adds	r3, #12
 800ce6a:	4c13      	ldr	r4, [pc, #76]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fc83 	bl	800c778 <_ZNK8touchgfx9colortypecvmEv>
 800ce72:	4603      	mov	r3, r0
 800ce74:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	691a      	ldr	r2, [r3, #16]
 800ce7a:	4b0f      	ldr	r3, [pc, #60]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce7c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	691a      	ldr	r2, [r3, #16]
 800ce82:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce84:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800ce86:	4b0c      	ldr	r3, [pc, #48]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce88:	4a0d      	ldr	r2, [pc, #52]	; (800cec0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800ce8a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800ce8c:	e010      	b.n	800ceb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800ce8e:	4a0a      	ldr	r2, [pc, #40]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800ce94:	4b08      	ldr	r3, [pc, #32]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ce96:	2200      	movs	r2, #0
 800ce98:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	330c      	adds	r3, #12
 800ce9e:	4c06      	ldr	r4, [pc, #24]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff fc69 	bl	800c778 <_ZNK8touchgfx9colortypecvmEv>
 800cea6:	4603      	mov	r3, r0
 800cea8:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800ceaa:	4b03      	ldr	r3, [pc, #12]	; (800ceb8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ceac:	4a05      	ldr	r2, [pc, #20]	; (800cec4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800ceae:	601a      	str	r2, [r3, #0]
}
 800ceb0:	bf00      	nop
 800ceb2:	3714      	adds	r7, #20
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd90      	pop	{r4, r7, pc}
 800ceb8:	52001000 	.word	0x52001000
 800cebc:	00010009 	.word	0x00010009
 800cec0:	00020201 	.word	0x00020201
 800cec4:	00030201 	.word	0x00030201

0800cec8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	4a05      	ldr	r2, [pc, #20]	; (800cee8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7ff fc59 	bl	800c790 <_ZN8touchgfx9DMA_QueueD1Ev>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4618      	mov	r0, r3
 800cee2:	3708      	adds	r7, #8
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	0801fe64 	.word	0x0801fe64

0800ceec <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f7ff ffe7 	bl	800cec8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800cefa:	2114      	movs	r1, #20
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f010 fc40 	bl	801d782 <_ZdlPvj>
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4618      	mov	r0, r3
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800cf14:	4a04      	ldr	r2, [pc, #16]	; (800cf28 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6013      	str	r3, [r2, #0]
    }
 800cf1a:	bf00      	nop
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	2401aad4 	.word	0x2401aad4

0800cf2c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
 800cf38:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800cf3a:	4a0b      	ldr	r2, [pc, #44]	; (800cf68 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	68ba      	ldr	r2, [r7, #8]
 800cf44:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	69ba      	ldr	r2, [r7, #24]
 800cf56:	611a      	str	r2, [r3, #16]
    {
    }
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3714      	adds	r7, #20
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	0801fb84 	.word	0x0801fb84

0800cf6c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
    {
 800cf74:	4a04      	ldr	r2, [pc, #16]	; (800cf88 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	601a      	str	r2, [r3, #0]
    }
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	0801fb84 	.word	0x0801fb84

0800cf8c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
    }
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f7ff ffe9 	bl	800cf6c <_ZN8touchgfx7MVPHeapD1Ev>
 800cf9a:	2114      	movs	r1, #20
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f010 fbf0 	bl	801d782 <_ZdlPvj>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
    {
 800cfb4:	4a04      	ldr	r2, [pc, #16]	; (800cfc8 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	601a      	str	r2, [r3, #0]
    }
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	080200d0 	.word	0x080200d0

0800cfcc <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
    }
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7ff ffe9 	bl	800cfac <_ZN8touchgfx3LCDD1Ev>
 800cfda:	2108      	movs	r1, #8
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f010 fbd0 	bl	801d782 <_ZdlPvj>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
            : startX(0),
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2200      	movs	r2, #0
 800cff8:	801a      	strh	r2, [r3, #0]
              startY(0),
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	805a      	strh	r2, [r3, #2]
              downX(0),
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	809a      	strh	r2, [r3, #4]
              downY(0),
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2200      	movs	r2, #0
 800d00a:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	739a      	strb	r2, [r3, #14]
        {
        }
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7ff ffd5 	bl	800cfec <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2200      	movs	r2, #0
 800d046:	611a      	str	r2, [r3, #16]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	829a      	strh	r2, [r3, #20]
    {
    }
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800d066:	4a55      	ldr	r2, [pc, #340]	; (800d1bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	683a      	ldr	r2, [r7, #0]
 800d07c:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2200      	movs	r2, #0
 800d082:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	619a      	str	r2, [r3, #24]
          gestures(),
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	331c      	adds	r3, #28
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff ffcc 	bl	800d032 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	3350      	adds	r3, #80	; 0x50
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f7fd f9ec 	bl	800a4c2 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2200      	movs	r2, #0
 800d102:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2201      	movs	r2, #1
 800d108:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2200      	movs	r2, #0
 800d128:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2201      	movs	r2, #1
 800d166:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 800d172:	4a13      	ldr	r2, [pc, #76]	; (800d1c0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800d178:	4a12      	ldr	r2, [pc, #72]	; (800d1c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800d17a:	8b3b      	ldrh	r3, [r7, #24]
 800d17c:	8013      	strh	r3, [r2, #0]
 800d17e:	4b11      	ldr	r3, [pc, #68]	; (800d1c4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800d180:	881a      	ldrh	r2, [r3, #0]
 800d182:	4b11      	ldr	r3, [pc, #68]	; (800d1c8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800d184:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800d186:	4a11      	ldr	r2, [pc, #68]	; (800d1cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800d188:	8bbb      	ldrh	r3, [r7, #28]
 800d18a:	8013      	strh	r3, [r2, #0]
 800d18c:	4b0f      	ldr	r3, [pc, #60]	; (800d1cc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800d18e:	881a      	ldrh	r2, [r3, #0]
 800d190:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800d192:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800d194:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800d196:	2200      	movs	r2, #0
 800d198:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800d19a:	8b3a      	ldrh	r2, [r7, #24]
 800d19c:	8bbb      	ldrh	r3, [r7, #28]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	bf34      	ite	cc
 800d1a2:	2301      	movcc	r3, #1
 800d1a4:	2300      	movcs	r3, #0
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	0801fd3c 	.word	0x0801fd3c
 800d1c0:	2401aa78 	.word	0x2401aa78
 800d1c4:	2401aa6c 	.word	0x2401aa6c
 800d1c8:	2401aa72 	.word	0x2401aa72
 800d1cc:	2401aa6e 	.word	0x2401aa6e
 800d1d0:	2401aa74 	.word	0x2401aa74
 800d1d4:	2401aa70 	.word	0x2401aa70

0800d1d8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f7fc fec1 	bl	8009f6c <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800d1ea:	bf00      	nop
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
	...

0800d1f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af02      	add	r7, sp, #8
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
 800d200:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	68b9      	ldr	r1, [r7, #8]
 800d20e:	f7ff fe8d 	bl	800cf2c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800d212:	4a04      	ldr	r2, [pc, #16]	; (800d224 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	601a      	str	r2, [r3, #0]
    {

    }
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	0801fb70 	.word	0x0801fb70

0800d228 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800d228:	b580      	push	{r7, lr}
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	4801      	ldr	r0, [pc, #4]	; (800d234 <__tcf_0+0xc>)
 800d22e:	f000 f965 	bl	800d4fc <_ZN12FrontendHeapD1Ev>
 800d232:	bd80      	pop	{r7, pc}
 800d234:	24019874 	.word	0x24019874

0800d238 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800d238:	b580      	push	{r7, lr}
 800d23a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800d23c:	4b11      	ldr	r3, [pc, #68]	; (800d284 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f3bf 8f5b 	dmb	ish
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	bf0c      	ite	eq
 800d24c:	2301      	moveq	r3, #1
 800d24e:	2300      	movne	r3, #0
 800d250:	b2db      	uxtb	r3, r3
 800d252:	2b00      	cmp	r3, #0
 800d254:	d013      	beq.n	800d27e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800d256:	480b      	ldr	r0, [pc, #44]	; (800d284 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800d258:	f010 fa95 	bl	801d786 <__cxa_guard_acquire>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	bf14      	ite	ne
 800d262:	2301      	movne	r3, #1
 800d264:	2300      	moveq	r3, #0
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d008      	beq.n	800d27e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800d26c:	4806      	ldr	r0, [pc, #24]	; (800d288 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800d26e:	f000 f867 	bl	800d340 <_ZN12FrontendHeapC1Ev>
 800d272:	4806      	ldr	r0, [pc, #24]	; (800d28c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800d274:	f010 fad2 	bl	801d81c <atexit>
 800d278:	4802      	ldr	r0, [pc, #8]	; (800d284 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800d27a:	f010 fa90 	bl	801d79e <__cxa_guard_release>
        return instance;
 800d27e:	4b02      	ldr	r3, [pc, #8]	; (800d288 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800d280:	4618      	mov	r0, r3
 800d282:	bd80      	pop	{r7, pc}
 800d284:	24019bdc 	.word	0x24019bdc
 800d288:	24019874 	.word	0x24019874
 800d28c:	0800d229 	.word	0x0800d229

0800d290 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	4a05      	ldr	r2, [pc, #20]	; (800d2b0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff fe63 	bl	800cf6c <_ZN8touchgfx7MVPHeapD1Ev>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	0801fb70 	.word	0x0801fb70

0800d2b4 <_ZN16FrontendHeapBaseD0Ev>:
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f7ff ffe7 	bl	800d290 <_ZN16FrontendHeapBaseD1Ev>
 800d2c2:	2114      	movs	r1, #20
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f010 fa5c 	bl	801d782 <_ZdlPvj>
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f000 fdd4 	bl	800de8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d2e4:	4a03      	ldr	r2, [pc, #12]	; (800d2f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	601a      	str	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	0801fb3c 	.word	0x0801fb3c

0800d2f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4618      	mov	r0, r3
 800d304:	f000 fdc2 	bl	800de8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d308:	4a03      	ldr	r2, [pc, #12]	; (800d318 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4618      	mov	r0, r3
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	0801fb08 	.word	0x0801fb08

0800d31c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fdb0 	bl	800de8c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d32c:	4a03      	ldr	r2, [pc, #12]	; (800d33c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	601a      	str	r2, [r3, #0]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	3708      	adds	r7, #8
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	0801fad4 	.word	0x0801fad4

0800d340 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800d340:	b590      	push	{r4, r7, lr}
 800d342:	b085      	sub	sp, #20
 800d344:	af02      	add	r7, sp, #8
 800d346:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f103 0114 	add.w	r1, r3, #20
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f503 74fa 	add.w	r4, r3, #500	; 0x1f4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
                     app(model, *this)
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	4623      	mov	r3, r4
 800d366:	f7ff ff45 	bl	800d1f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800d36a:	4a18      	ldr	r2, [pc, #96]	; (800d3cc <_ZN12FrontendHeapC1Ev+0x8c>)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	601a      	str	r2, [r3, #0]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3314      	adds	r3, #20
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff ffad 	bl	800d2d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	332c      	adds	r3, #44	; 0x2c
 800d37e:	4618      	mov	r0, r3
 800d380:	f7ff ffba 	bl	800d2f8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7ff ffc6 	bl	800d31c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe fc88 	bl	800bcac <_ZN5ModelC1Ev>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f503 7003 	add.w	r0, r3, #524	; 0x20c
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f7fe fc68 	bl	800bc80 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	4610      	mov	r0, r2
 800d3bc:	f7ff ff0c 	bl	800d1d8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd90      	pop	{r4, r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	0801fac0 	.word	0x0801fac0

0800d3d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af02      	add	r7, sp, #8
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
 800d3dc:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	8bbb      	ldrh	r3, [r7, #28]
 800d3e2:	9301      	str	r3, [sp, #4]
 800d3e4:	8b3b      	ldrh	r3, [r7, #24]
 800d3e6:	9300      	str	r3, [sp, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	687a      	ldr	r2, [r7, #4]
 800d3ec:	68b9      	ldr	r1, [r7, #8]
 800d3ee:	f7ff fe33 	bl	800d058 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800d3f2:	4a04      	ldr	r2, [pc, #16]	; (800d404 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	601a      	str	r2, [r3, #0]
    }
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	0801fb94 	.word	0x0801fb94

0800d408 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af02      	add	r7, sp, #8
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	60b9      	str	r1, [r7, #8]
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	603b      	str	r3, [r7, #0]
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	8bbb      	ldrh	r3, [r7, #28]
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	8b3b      	ldrh	r3, [r7, #24]
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	687a      	ldr	r2, [r7, #4]
 800d424:	68b9      	ldr	r1, [r7, #8]
 800d426:	f7ff ffd3 	bl	800d3d0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d42a:	4a04      	ldr	r2, [pc, #16]	; (800d43c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	601a      	str	r2, [r3, #0]
    }
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	4618      	mov	r0, r3
 800d434:	3710      	adds	r7, #16
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	0801f974 	.word	0x0801f974

0800d440 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	4a04      	ldr	r2, [pc, #16]	; (800d45c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	0801f95c 	.word	0x0801f95c

0800d460 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800d460:	b580      	push	{r7, lr}
 800d462:	b082      	sub	sp, #8
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7ff ffe8 	bl	800d440 <_ZN8touchgfx15TouchControllerC1Ev>
 800d470:	4a03      	ldr	r2, [pc, #12]	; (800d480 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	601a      	str	r2, [r3, #0]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4618      	mov	r0, r3
 800d47a:	3708      	adds	r7, #8
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}
 800d480:	0801f944 	.word	0x0801f944

0800d484 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800d484:	b590      	push	{r4, r7, lr}
 800d486:	b085      	sub	sp, #20
 800d488:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800d48a:	f7fe f9c9 	bl	800b820 <_ZN14BitmapDatabase11getInstanceEv>
 800d48e:	4604      	mov	r4, r0
 800d490:	f7fe f9d0 	bl	800b834 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800d494:	4603      	mov	r3, r0
 800d496:	4619      	mov	r1, r3
 800d498:	2300      	movs	r3, #0
 800d49a:	9300      	str	r3, [sp, #0]
 800d49c:	2300      	movs	r3, #0
 800d49e:	2200      	movs	r2, #0
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f006 ff03 	bl	80142ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800d4a6:	4809      	ldr	r0, [pc, #36]	; (800d4cc <touchgfx_init+0x48>)
 800d4a8:	f7ff fd30 	bl	800cf0c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	f7fe fb05 	bl	800babc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800d4b2:	4807      	ldr	r0, [pc, #28]	; (800d4d0 <touchgfx_init+0x4c>)
 800d4b4:	f006 fdb2 	bl	801401c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800d4b8:	f7ff febe 	bl	800d238 <_ZN12FrontendHeap11getInstanceEv>
 800d4bc:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800d4be:	4805      	ldr	r0, [pc, #20]	; (800d4d4 <touchgfx_init+0x50>)
 800d4c0:	f7fe ffca 	bl	800c458 <_ZN11TouchGFXHAL10initializeEv>
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd90      	pop	{r4, r7, pc}
 800d4cc:	2401a9e8 	.word	0x2401a9e8
 800d4d0:	2400001c 	.word	0x2400001c
 800d4d4:	2401a9ec 	.word	0x2401a9ec

0800d4d8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800d4d8:	b480      	push	{r7}
 800d4da:	af00      	add	r7, sp, #0
}
 800d4dc:	bf00      	nop
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
	...

0800d4e8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800d4ec:	4802      	ldr	r0, [pc, #8]	; (800d4f8 <touchgfx_taskEntry+0x10>)
 800d4ee:	f000 ffda 	bl	800e4a6 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800d4f2:	bf00      	nop
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	2401a9ec 	.word	0x2401a9ec

0800d4fc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	4a10      	ldr	r2, [pc, #64]	; (800d548 <_ZN12FrontendHeapD1Ev+0x4c>)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 800d510:	4618      	mov	r0, r3
 800d512:	f7fe fb7f 	bl	800bc14 <_ZN19FrontendApplicationD1Ev>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d51c:	4618      	mov	r0, r3
 800d51e:	f000 f827 	bl	800d570 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	332c      	adds	r3, #44	; 0x2c
 800d526:	4618      	mov	r0, r3
 800d528:	f000 f844 	bl	800d5b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	3314      	adds	r3, #20
 800d530:	4618      	mov	r0, r3
 800d532:	f000 f863 	bl	800d5fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff fea9 	bl	800d290 <_ZN16FrontendHeapBaseD1Ev>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	0801fac0 	.word	0x0801fac0

0800d54c <_ZN12FrontendHeapD0Ev>:
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7ff ffd1 	bl	800d4fc <_ZN12FrontendHeapD1Ev>
 800d55a:	f44f 715a 	mov.w	r1, #872	; 0x368
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f010 f90f 	bl	801d782 <_ZdlPvj>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	4618      	mov	r0, r3
 800d568:	3708      	adds	r7, #8
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
	...

0800d570 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	4a05      	ldr	r2, [pc, #20]	; (800d590 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	601a      	str	r2, [r3, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4618      	mov	r0, r3
 800d582:	f000 fc82 	bl	800de8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4618      	mov	r0, r3
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	0801fad4 	.word	0x0801fad4

0800d594 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f7ff ffe7 	bl	800d570 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d5a2:	2114      	movs	r1, #20
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	f010 f8ec 	bl	801d782 <_ZdlPvj>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3708      	adds	r7, #8
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	4a05      	ldr	r2, [pc, #20]	; (800d5d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f000 fc60 	bl	800de8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3708      	adds	r7, #8
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	0801fb08 	.word	0x0801fb08

0800d5d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b082      	sub	sp, #8
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	6078      	str	r0, [r7, #4]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff ffe7 	bl	800d5b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d5e6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f010 f8c9 	bl	801d782 <_ZdlPvj>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	4a05      	ldr	r2, [pc, #20]	; (800d61c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 fc3c 	bl	800de8a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	4618      	mov	r0, r3
 800d616:	3708      	adds	r7, #8
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	0801fb3c 	.word	0x0801fb3c

0800d620 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7ff ffe7 	bl	800d5fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d62e:	2118      	movs	r1, #24
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f010 f8a6 	bl	801d782 <_ZdlPvj>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	4618      	mov	r0, r3
 800d63a:	3708      	adds	r7, #8
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd80      	pop	{r7, pc}

0800d640 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	4a05      	ldr	r2, [pc, #20]	; (800d660 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	f7ff fcab 	bl	800cfac <_ZN8touchgfx3LCDD1Ev>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	0802048c 	.word	0x0802048c

0800d664 <_ZN8touchgfx8LCD24bppD0Ev>:
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7ff ffe7 	bl	800d640 <_ZN8touchgfx8LCD24bppD1Ev>
 800d672:	2164      	movs	r1, #100	; 0x64
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f010 f884 	bl	801d782 <_ZdlPvj>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <_Z41__static_initialization_and_destruction_0ii>:
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af02      	add	r7, sp, #8
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d119      	bne.n	800d6c8 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d114      	bne.n	800d6c8 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800d69e:	4818      	ldr	r0, [pc, #96]	; (800d700 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d6a0:	f7ff fede 	bl	800d460 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800d6a4:	4817      	ldr	r0, [pc, #92]	; (800d704 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d6a6:	f7ff f923 	bl	800c8f0 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800d6aa:	4817      	ldr	r0, [pc, #92]	; (800d708 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d6ac:	f009 fea4 	bl	80173f8 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800d6b0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	4b10      	ldr	r3, [pc, #64]	; (800d700 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d6be:	4a12      	ldr	r2, [pc, #72]	; (800d708 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d6c0:	4910      	ldr	r1, [pc, #64]	; (800d704 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d6c2:	4812      	ldr	r0, [pc, #72]	; (800d70c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d6c4:	f7ff fea0 	bl	800d408 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d113      	bne.n	800d6f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	d10e      	bne.n	800d6f6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800d6d8:	480c      	ldr	r0, [pc, #48]	; (800d70c <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d6da:	f7fe ff4d 	bl	800c578 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800d6de:	480c      	ldr	r0, [pc, #48]	; (800d710 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800d6e0:	f7fb fea8 	bl	8009434 <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800d6e4:	4808      	ldr	r0, [pc, #32]	; (800d708 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d6e6:	f7ff ffab 	bl	800d640 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800d6ea:	4806      	ldr	r0, [pc, #24]	; (800d704 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d6ec:	f7ff f92a 	bl	800c944 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800d6f0:	4803      	ldr	r0, [pc, #12]	; (800d700 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d6f2:	f7fe fc59 	bl	800bfa8 <_ZN20STM32TouchControllerD1Ev>
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	24019be0 	.word	0x24019be0
 800d704:	24019be4 	.word	0x24019be4
 800d708:	2401a984 	.word	0x2401a984
 800d70c:	2401a9ec 	.word	0x2401a9ec
 800d710:	2400001c 	.word	0x2400001c

0800d714 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800d71c:	2301      	movs	r3, #1
    }
 800d71e:	4618      	mov	r0, r3
 800d720:	370c      	adds	r7, #12
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800d72a:	b480      	push	{r7}
 800d72c:	b083      	sub	sp, #12
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800d732:	230c      	movs	r3, #12
    }
 800d734:	4618      	mov	r0, r3
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800d740:	b480      	push	{r7}
 800d742:	b083      	sub	sp, #12
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	460b      	mov	r3, r1
 800d74a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d74c:	887a      	ldrh	r2, [r7, #2]
 800d74e:	4613      	mov	r3, r2
 800d750:	005b      	lsls	r3, r3, #1
 800d752:	4413      	add	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	3308      	adds	r3, #8
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	4413      	add	r3, r2
    }
 800d75c:	4618      	mov	r0, r3
 800d75e:	370c      	adds	r7, #12
 800d760:	46bd      	mov	sp, r7
 800d762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d766:	4770      	bx	lr

0800d768 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800d768:	b480      	push	{r7}
 800d76a:	b083      	sub	sp, #12
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	460b      	mov	r3, r1
 800d772:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d774:	887a      	ldrh	r2, [r7, #2]
 800d776:	4613      	mov	r3, r2
 800d778:	005b      	lsls	r3, r3, #1
 800d77a:	4413      	add	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	3308      	adds	r3, #8
 800d780:	687a      	ldr	r2, [r7, #4]
 800d782:	4413      	add	r3, r2
    }
 800d784:	4618      	mov	r0, r3
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d798:	2301      	movs	r3, #1
    }
 800d79a:	4618      	mov	r0, r3
 800d79c:	370c      	adds	r7, #12
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d7a6:	b480      	push	{r7}
 800d7a8:	b083      	sub	sp, #12
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d7ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
    }
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	370c      	adds	r7, #12
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr

0800d7be <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d7be:	b480      	push	{r7}
 800d7c0:	b083      	sub	sp, #12
 800d7c2:	af00      	add	r7, sp, #0
 800d7c4:	6078      	str	r0, [r7, #4]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d7ca:	887a      	ldrh	r2, [r7, #2]
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	00db      	lsls	r3, r3, #3
 800d7d0:	1a9b      	subs	r3, r3, r2
 800d7d2:	019b      	lsls	r3, r3, #6
 800d7d4:	3308      	adds	r3, #8
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	4413      	add	r3, r2
    }
 800d7da:	4618      	mov	r0, r3
 800d7dc:	370c      	adds	r7, #12
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr

0800d7e6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d7e6:	b480      	push	{r7}
 800d7e8:	b083      	sub	sp, #12
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
 800d7ee:	460b      	mov	r3, r1
 800d7f0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d7f2:	887a      	ldrh	r2, [r7, #2]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	00db      	lsls	r3, r3, #3
 800d7f8:	1a9b      	subs	r3, r3, r2
 800d7fa:	019b      	lsls	r3, r3, #6
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	687a      	ldr	r2, [r7, #4]
 800d800:	4413      	add	r3, r2
    }
 800d802:	4618      	mov	r0, r3
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d816:	2301      	movs	r3, #1
    }
 800d818:	4618      	mov	r0, r3
 800d81a:	370c      	adds	r7, #12
 800d81c:	46bd      	mov	sp, r7
 800d81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d822:	4770      	bx	lr

0800d824 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d824:	b480      	push	{r7}
 800d826:	b083      	sub	sp, #12
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d82c:	2310      	movs	r3, #16
    }
 800d82e:	4618      	mov	r0, r3
 800d830:	370c      	adds	r7, #12
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d83a:	b480      	push	{r7}
 800d83c:	b083      	sub	sp, #12
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	460b      	mov	r3, r1
 800d844:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d846:	887b      	ldrh	r3, [r7, #2]
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	3308      	adds	r3, #8
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	4413      	add	r3, r2
    }
 800d850:	4618      	mov	r0, r3
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	460b      	mov	r3, r1
 800d866:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d868:	887b      	ldrh	r3, [r7, #2]
 800d86a:	011b      	lsls	r3, r3, #4
 800d86c:	3308      	adds	r3, #8
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	4413      	add	r3, r2
    }
 800d872:	4618      	mov	r0, r3
 800d874:	370c      	adds	r7, #12
 800d876:	46bd      	mov	sp, r7
 800d878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87c:	4770      	bx	lr

0800d87e <_GLOBAL__sub_I_touchgfx_init>:
 800d87e:	b580      	push	{r7, lr}
 800d880:	af00      	add	r7, sp, #0
 800d882:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d886:	2001      	movs	r0, #1
 800d888:	f7ff fefc 	bl	800d684 <_Z41__static_initialization_and_destruction_0ii>
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <_GLOBAL__sub_D_touchgfx_init>:
 800d88e:	b580      	push	{r7, lr}
 800d890:	af00      	add	r7, sp, #0
 800d892:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d896:	2000      	movs	r0, #0
 800d898:	f7ff fef4 	bl	800d684 <_Z41__static_initialization_and_destruction_0ii>
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b082      	sub	sp, #8
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	3320      	adds	r3, #32
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	4798      	blx	r3
    }
 800d8b2:	bf00      	nop
 800d8b4:	3708      	adds	r7, #8
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800d8ba:	b480      	push	{r7}
 800d8bc:	b083      	sub	sp, #12
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 800d8d2:	bf00      	nop
 800d8d4:	370c      	adds	r7, #12
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
	...

0800d8e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	460b      	mov	r3, r1
 800d8ea:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800d8ec:	78fb      	ldrb	r3, [r7, #3]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d002      	beq.n	800d8f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800d8f2:	78fb      	ldrb	r3, [r7, #3]
 800d8f4:	2b02      	cmp	r3, #2
 800d8f6:	d105      	bne.n	800d904 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	78fa      	ldrb	r2, [r7, #3]
 800d8fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 800d900:	2301      	movs	r3, #1
 800d902:	e027      	b.n	800d954 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800d904:	78fb      	ldrb	r3, [r7, #3]
 800d906:	2b01      	cmp	r3, #1
 800d908:	d123      	bne.n	800d952 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d014      	beq.n	800d93c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	339c      	adds	r3, #156	; 0x9c
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	4798      	blx	r3
 800d91e:	4603      	mov	r3, r0
 800d920:	461a      	mov	r2, r3
 800d922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d926:	429a      	cmp	r2, r3
 800d928:	d008      	beq.n	800d93c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d92a:	4b0c      	ldr	r3, [pc, #48]	; (800d95c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	f083 0301 	eor.w	r3, r3, #1
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d001      	beq.n	800d93c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d938:	2301      	movs	r3, #1
 800d93a:	e000      	b.n	800d93e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800d93c:	2300      	movs	r3, #0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d005      	beq.n	800d94e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	78fa      	ldrb	r2, [r7, #3]
 800d946:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800d94a:	2301      	movs	r3, #1
 800d94c:	e002      	b.n	800d954 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800d94e:	2300      	movs	r3, #0
 800d950:	e000      	b.n	800d954 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800d952:	2300      	movs	r3, #0
    }
 800d954:	4618      	mov	r0, r3
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	2401aa76 	.word	0x2401aa76

0800d960 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800d970:	bf00      	nop
 800d972:	370c      	adds	r7, #12
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <__NVIC_EnableIRQ>:
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	4603      	mov	r3, r0
 800d984:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	db0b      	blt.n	800d9a6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d98e:	88fb      	ldrh	r3, [r7, #6]
 800d990:	f003 021f 	and.w	r2, r3, #31
 800d994:	4907      	ldr	r1, [pc, #28]	; (800d9b4 <__NVIC_EnableIRQ+0x38>)
 800d996:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d99a:	095b      	lsrs	r3, r3, #5
 800d99c:	2001      	movs	r0, #1
 800d99e:	fa00 f202 	lsl.w	r2, r0, r2
 800d9a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d9a6:	bf00      	nop
 800d9a8:	370c      	adds	r7, #12
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	e000e100 	.word	0xe000e100

0800d9b8 <__NVIC_DisableIRQ>:
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b083      	sub	sp, #12
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	4603      	mov	r3, r0
 800d9c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d9c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	db12      	blt.n	800d9f0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d9ca:	88fb      	ldrh	r3, [r7, #6]
 800d9cc:	f003 021f 	and.w	r2, r3, #31
 800d9d0:	490a      	ldr	r1, [pc, #40]	; (800d9fc <__NVIC_DisableIRQ+0x44>)
 800d9d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d9d6:	095b      	lsrs	r3, r3, #5
 800d9d8:	2001      	movs	r0, #1
 800d9da:	fa00 f202 	lsl.w	r2, r0, r2
 800d9de:	3320      	adds	r3, #32
 800d9e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d9e4:	f3bf 8f4f 	dsb	sy
}
 800d9e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d9ea:	f3bf 8f6f 	isb	sy
}
 800d9ee:	bf00      	nop
}
 800d9f0:	bf00      	nop
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	e000e100 	.word	0xe000e100

0800da00 <__NVIC_SetPriority>:
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	4603      	mov	r3, r0
 800da08:	6039      	str	r1, [r7, #0]
 800da0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800da0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da10:	2b00      	cmp	r3, #0
 800da12:	db0a      	blt.n	800da2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	b2da      	uxtb	r2, r3
 800da18:	490c      	ldr	r1, [pc, #48]	; (800da4c <__NVIC_SetPriority+0x4c>)
 800da1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da1e:	0112      	lsls	r2, r2, #4
 800da20:	b2d2      	uxtb	r2, r2
 800da22:	440b      	add	r3, r1
 800da24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800da28:	e00a      	b.n	800da40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	4908      	ldr	r1, [pc, #32]	; (800da50 <__NVIC_SetPriority+0x50>)
 800da30:	88fb      	ldrh	r3, [r7, #6]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	3b04      	subs	r3, #4
 800da38:	0112      	lsls	r2, r2, #4
 800da3a:	b2d2      	uxtb	r2, r2
 800da3c:	440b      	add	r3, r1
 800da3e:	761a      	strb	r2, [r3, #24]
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr
 800da4c:	e000e100 	.word	0xe000e100
 800da50:	e000ed00 	.word	0xe000ed00

0800da54 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800da54:	b5b0      	push	{r4, r5, r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	4618      	mov	r0, r3
 800da60:	f000 fd0d 	bl	800e47e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800da64:	687d      	ldr	r5, [r7, #4]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	3364      	adds	r3, #100	; 0x64
 800da6c:	681c      	ldr	r4, [r3, #0]
 800da6e:	f003 fe5b 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800da72:	4603      	mov	r3, r0
 800da74:	4619      	mov	r1, r3
 800da76:	4628      	mov	r0, r5
 800da78:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	490b      	ldr	r1, [pc, #44]	; (800daac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 800da7e:	4618      	mov	r0, r3
 800da80:	f7ff ff6e 	bl	800d960 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2101      	movs	r1, #1
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff ff29 	bl	800d8e0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	3388      	adds	r3, #136	; 0x88
 800da96:	681c      	ldr	r4, [r3, #0]
 800da98:	2300      	movs	r3, #0
 800da9a:	2200      	movs	r2, #0
 800da9c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800daa0:	47a0      	blx	r4
}
 800daa2:	bf00      	nop
 800daa4:	3708      	adds	r7, #8
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bdb0      	pop	{r4, r5, r7, pc}
 800daaa:	bf00      	nop
 800daac:	0800c6d9 	.word	0x0800c6d9

0800dab0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800dab8:	2109      	movs	r1, #9
 800daba:	205a      	movs	r0, #90	; 0x5a
 800dabc:	f7ff ffa0 	bl	800da00 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800dac0:	2109      	movs	r1, #9
 800dac2:	2058      	movs	r0, #88	; 0x58
 800dac4:	f7ff ff9c 	bl	800da00 <__NVIC_SetPriority>
}
 800dac8:	bf00      	nop
 800daca:	3708      	adds	r7, #8
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800dad8:	205a      	movs	r0, #90	; 0x5a
 800dada:	f7ff ff4f 	bl	800d97c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800dade:	2058      	movs	r0, #88	; 0x58
 800dae0:	f7ff ff4c 	bl	800d97c <__NVIC_EnableIRQ>
}
 800dae4:	bf00      	nop
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800daf4:	205a      	movs	r0, #90	; 0x5a
 800daf6:	f7ff ff5f 	bl	800d9b8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800dafa:	2058      	movs	r0, #88	; 0x58
 800dafc:	f7ff ff5c 	bl	800d9b8 <__NVIC_DisableIRQ>
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800db08:	b480      	push	{r7}
 800db0a:	b083      	sub	sp, #12
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800db10:	4b11      	ldr	r3, [pc, #68]	; (800db58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db12:	68db      	ldr	r3, [r3, #12]
 800db14:	b29b      	uxth	r3, r3
 800db16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db1a:	b29b      	uxth	r3, r3
 800db1c:	3b01      	subs	r3, #1
 800db1e:	b29a      	uxth	r2, r3
 800db20:	4b0e      	ldr	r3, [pc, #56]	; (800db5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800db22:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800db24:	4b0c      	ldr	r3, [pc, #48]	; (800db58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db2e:	b29b      	uxth	r3, r3
 800db30:	3b01      	subs	r3, #1
 800db32:	b29a      	uxth	r2, r3
 800db34:	4b0a      	ldr	r3, [pc, #40]	; (800db60 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800db36:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800db38:	4b08      	ldr	r3, [pc, #32]	; (800db5c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800db3a:	881a      	ldrh	r2, [r3, #0]
 800db3c:	4b06      	ldr	r3, [pc, #24]	; (800db58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800db40:	4b05      	ldr	r3, [pc, #20]	; (800db58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db44:	4a04      	ldr	r2, [pc, #16]	; (800db58 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800db46:	f043 0301 	orr.w	r3, r3, #1
 800db4a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800db4c:	bf00      	nop
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db56:	4770      	bx	lr
 800db58:	50001000 	.word	0x50001000
 800db5c:	2401aa68 	.word	0x2401aa68
 800db60:	2401aa6a 	.word	0x2401aa6a

0800db64 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 fc6c 	bl	800e44c <_ZN8touchgfx3HAL10beginFrameEv>
 800db74:	4603      	mov	r3, r0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3708      	adds	r7, #8
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b082      	sub	sp, #8
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	4618      	mov	r0, r3
 800db8a:	f000 fc6b 	bl	800e464 <_ZN8touchgfx3HAL8endFrameEv>
}
 800db8e:	bf00      	nop
 800db90:	3708      	adds	r7, #8
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
	...

0800db98 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800dba0:	4b03      	ldr	r3, [pc, #12]	; (800dbb0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800dba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	50001084 	.word	0x50001084

0800dbb4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800dbbe:	4a06      	ldr	r2, [pc, #24]	; (800dbd8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800dbc4:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dbca:	bf00      	nop
 800dbcc:	370c      	adds	r7, #12
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	50001084 	.word	0x50001084
 800dbdc:	50001000 	.word	0x50001000

0800dbe0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	6078      	str	r0, [r7, #4]
 800dbe8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 fbf5 	bl	800e3de <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800dbf4:	bf00      	nop
 800dbf6:	3708      	adds	r7, #8
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
 800dc08:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	687a      	ldr	r2, [r7, #4]
 800dc10:	68b9      	ldr	r1, [r7, #8]
 800dc12:	f000 fd56 	bl	800e6c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800dc16:	4603      	mov	r3, r0
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800dc28:	4b0d      	ldr	r3, [pc, #52]	; (800dc60 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800dc2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc2c:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800dc2e:	4b0c      	ldr	r3, [pc, #48]	; (800dc60 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800dc30:	68db      	ldr	r3, [r3, #12]
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 800dc3e:	89fa      	ldrh	r2, [r7, #14]
 800dc40:	89bb      	ldrh	r3, [r7, #12]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d304      	bcc.n	800dc50 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 800dc46:	89fa      	ldrh	r2, [r7, #14]
 800dc48:	89bb      	ldrh	r3, [r7, #12]
 800dc4a:	1ad3      	subs	r3, r2, r3
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	e000      	b.n	800dc52 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	50001000 	.word	0x50001000

0800dc64 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800dc64:	b480      	push	{r7}
 800dc66:	b087      	sub	sp, #28
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800dc6c:	4b25      	ldr	r3, [pc, #148]	; (800dd04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800dc6e:	695b      	ldr	r3, [r3, #20]
 800dc70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	bf14      	ite	ne
 800dc78:	2301      	movne	r3, #1
 800dc7a:	2300      	moveq	r3, #0
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d03a      	beq.n	800dcf8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800dc82:	4b20      	ldr	r3, [pc, #128]	; (800dd04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800dc8a:	f3bf 8f4f 	dsb	sy
}
 800dc8e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800dc90:	4b1c      	ldr	r3, [pc, #112]	; (800dd04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800dc92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc96:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	0b5b      	lsrs	r3, r3, #13
 800dc9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800dca0:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	08db      	lsrs	r3, r3, #3
 800dca6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dcaa:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	015a      	lsls	r2, r3, #5
 800dcb0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800dcb4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800dcba:	4912      	ldr	r1, [pc, #72]	; (800dd04 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	1e5a      	subs	r2, r3, #1
 800dcc6:	60fa      	str	r2, [r7, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bf14      	ite	ne
 800dccc:	2301      	movne	r3, #1
 800dcce:	2300      	moveq	r3, #0
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1ea      	bne.n	800dcac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	1e5a      	subs	r2, r3, #1
 800dcda:	613a      	str	r2, [r7, #16]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	bf14      	ite	ne
 800dce0:	2301      	movne	r3, #1
 800dce2:	2300      	moveq	r3, #0
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d1db      	bne.n	800dca2 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800dcea:	f3bf 8f4f 	dsb	sy
}
 800dcee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dcf0:	f3bf 8f6f 	isb	sy
}
 800dcf4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800dcf6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800dcf8:	bf00      	nop
 800dcfa:	371c      	adds	r7, #28
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr
 800dd04:	e000ed00 	.word	0xe000ed00

0800dd08 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800dd10:	4b25      	ldr	r3, [pc, #148]	; (800dda8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dd12:	695b      	ldr	r3, [r3, #20]
 800dd14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	bf14      	ite	ne
 800dd1c:	2301      	movne	r3, #1
 800dd1e:	2300      	moveq	r3, #0
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d03a      	beq.n	800dd9c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800dd26:	4b20      	ldr	r3, [pc, #128]	; (800dda8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800dd2e:	f3bf 8f4f 	dsb	sy
}
 800dd32:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800dd34:	4b1c      	ldr	r3, [pc, #112]	; (800dda8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dd36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd3a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	0b5b      	lsrs	r3, r3, #13
 800dd40:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800dd44:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	08db      	lsrs	r3, r3, #3
 800dd4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd4e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	015a      	lsls	r2, r3, #5
 800dd54:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800dd58:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800dd5e:	4912      	ldr	r1, [pc, #72]	; (800dda8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dd60:	4313      	orrs	r3, r2
 800dd62:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	1e5a      	subs	r2, r3, #1
 800dd6a:	60fa      	str	r2, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	bf14      	ite	ne
 800dd70:	2301      	movne	r3, #1
 800dd72:	2300      	moveq	r3, #0
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d1ea      	bne.n	800dd50 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800dd7a:	693b      	ldr	r3, [r7, #16]
 800dd7c:	1e5a      	subs	r2, r3, #1
 800dd7e:	613a      	str	r2, [r7, #16]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	bf14      	ite	ne
 800dd84:	2301      	movne	r3, #1
 800dd86:	2300      	moveq	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1db      	bne.n	800dd46 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800dd8e:	f3bf 8f4f 	dsb	sy
}
 800dd92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dd94:	f3bf 8f6f 	isb	sy
}
 800dd98:	bf00      	nop
}
 800dd9a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800dd9c:	bf00      	nop
 800dd9e:	371c      	adds	r7, #28
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr
 800dda8:	e000ed00 	.word	0xe000ed00

0800ddac <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800ddb4:	f7fb fede 	bl	8009b74 <_ZN8touchgfx3HAL11getInstanceEv>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bf0c      	ite	eq
 800ddbe:	2301      	moveq	r3, #1
 800ddc0:	2300      	movne	r3, #0
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d132      	bne.n	800de2e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800ddc8:	4b1b      	ldr	r3, [pc, #108]	; (800de38 <HAL_LTDC_LineEventCallback+0x8c>)
 800ddca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddcc:	4a1b      	ldr	r2, [pc, #108]	; (800de3c <HAL_LTDC_LineEventCallback+0x90>)
 800ddce:	8812      	ldrh	r2, [r2, #0]
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	bf0c      	ite	eq
 800ddd4:	2301      	moveq	r3, #1
 800ddd6:	2300      	movne	r3, #0
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d017      	beq.n	800de0e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800ddde:	4b18      	ldr	r3, [pc, #96]	; (800de40 <HAL_LTDC_LineEventCallback+0x94>)
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7f4 fbe5 	bl	80025b4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800ddea:	f7fb fec3 	bl	8009b74 <_ZN8touchgfx3HAL11getInstanceEv>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7ff fd62 	bl	800d8ba <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800ddf6:	f7fe fc47 	bl	800c688 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800ddfa:	f7fb febb 	bl	8009b74 <_ZN8touchgfx3HAL11getInstanceEv>
 800ddfe:	4603      	mov	r3, r0
 800de00:	4618      	mov	r0, r3
 800de02:	f001 f889 	bl	800ef18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800de06:	2000      	movs	r0, #0
 800de08:	f7fe f8f8 	bl	800bffc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800de0c:	e010      	b.n	800de30 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800de0e:	4b0b      	ldr	r3, [pc, #44]	; (800de3c <HAL_LTDC_LineEventCallback+0x90>)
 800de10:	881b      	ldrh	r3, [r3, #0]
 800de12:	4619      	mov	r1, r3
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7f4 fbcd 	bl	80025b4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800de1a:	f7fb feab 	bl	8009b74 <_ZN8touchgfx3HAL11getInstanceEv>
 800de1e:	4603      	mov	r3, r0
 800de20:	4618      	mov	r0, r3
 800de22:	f7ff fd3c 	bl	800d89e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800de26:	2000      	movs	r0, #0
 800de28:	f7fe f920 	bl	800c06c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800de2c:	e000      	b.n	800de30 <HAL_LTDC_LineEventCallback+0x84>
            return;
 800de2e:	bf00      	nop
        }
    }
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	50001000 	.word	0x50001000
 800de3c:	2401aa68 	.word	0x2401aa68
 800de40:	2401aa6a 	.word	0x2401aa6a

0800de44 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800de44:	8880      	ldrh	r0, [r0, #4]
 800de46:	4770      	bx	lr

0800de48 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800de48:	b570      	push	{r4, r5, r6, lr}
 800de4a:	6803      	ldr	r3, [r0, #0]
 800de4c:	460c      	mov	r4, r1
 800de4e:	2100      	movs	r1, #0
 800de50:	4605      	mov	r5, r0
 800de52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de54:	4798      	blx	r3
 800de56:	4606      	mov	r6, r0
 800de58:	682b      	ldr	r3, [r5, #0]
 800de5a:	4628      	mov	r0, r5
 800de5c:	1ba4      	subs	r4, r4, r6
 800de5e:	6a1b      	ldr	r3, [r3, #32]
 800de60:	b2a4      	uxth	r4, r4
 800de62:	4798      	blx	r3
 800de64:	fbb4 f0f0 	udiv	r0, r4, r0
 800de68:	bd70      	pop	{r4, r5, r6, pc}

0800de6a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800de6a:	2300      	movs	r3, #0
 800de6c:	8083      	strh	r3, [r0, #4]
 800de6e:	4770      	bx	lr

0800de70 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800de70:	b510      	push	{r4, lr}
 800de72:	6803      	ldr	r3, [r0, #0]
 800de74:	4604      	mov	r4, r0
 800de76:	8881      	ldrh	r1, [r0, #4]
 800de78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de7a:	4798      	blx	r3
 800de7c:	88a3      	ldrh	r3, [r4, #4]
 800de7e:	3301      	adds	r3, #1
 800de80:	80a3      	strh	r3, [r4, #4]
 800de82:	bd10      	pop	{r4, pc}

0800de84 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800de84:	6803      	ldr	r3, [r0, #0]
 800de86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de88:	4718      	bx	r3

0800de8a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800de8a:	4770      	bx	lr

0800de8c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800de8c:	4a02      	ldr	r2, [pc, #8]	; (800de98 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800de8e:	6002      	str	r2, [r0, #0]
 800de90:	2200      	movs	r2, #0
 800de92:	8082      	strh	r2, [r0, #4]
 800de94:	4770      	bx	lr
 800de96:	bf00      	nop
 800de98:	0801fc6c 	.word	0x0801fc6c

0800de9c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800de9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de9e:	2000      	movs	r0, #0
 800dea0:	b12b      	cbz	r3, 800deae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dea2:	b920      	cbnz	r0, 800deae <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dea4:	1a5a      	subs	r2, r3, r1
 800dea6:	699b      	ldr	r3, [r3, #24]
 800dea8:	4250      	negs	r0, r2
 800deaa:	4150      	adcs	r0, r2
 800deac:	e7f8      	b.n	800dea0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800deae:	4770      	bx	lr

0800deb0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800deb0:	2300      	movs	r3, #0
 800deb2:	6148      	str	r0, [r1, #20]
 800deb4:	618b      	str	r3, [r1, #24]
 800deb6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800deb8:	b913      	cbnz	r3, 800dec0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800deba:	6281      	str	r1, [r0, #40]	; 0x28
 800debc:	4770      	bx	lr
 800debe:	4613      	mov	r3, r2
 800dec0:	699a      	ldr	r2, [r3, #24]
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	d1fb      	bne.n	800debe <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800dec6:	6199      	str	r1, [r3, #24]
 800dec8:	4770      	bx	lr

0800deca <_ZN8touchgfx9Container9removeAllEv>:
 800deca:	2200      	movs	r2, #0
 800decc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dece:	b123      	cbz	r3, 800deda <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ded0:	6999      	ldr	r1, [r3, #24]
 800ded2:	6281      	str	r1, [r0, #40]	; 0x28
 800ded4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ded8:	e7f8      	b.n	800decc <_ZN8touchgfx9Container9removeAllEv+0x2>
 800deda:	4770      	bx	lr

0800dedc <_ZN8touchgfx9Container6unlinkEv>:
 800dedc:	2300      	movs	r3, #0
 800dede:	6283      	str	r3, [r0, #40]	; 0x28
 800dee0:	4770      	bx	lr

0800dee2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800dee2:	2200      	movs	r2, #0
 800dee4:	8002      	strh	r2, [r0, #0]
 800dee6:	8042      	strh	r2, [r0, #2]
 800dee8:	8082      	strh	r2, [r0, #4]
 800deea:	80c2      	strh	r2, [r0, #6]
 800deec:	4770      	bx	lr

0800deee <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800deee:	b570      	push	{r4, r5, r6, lr}
 800def0:	460d      	mov	r5, r1
 800def2:	4616      	mov	r6, r2
 800def4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800def6:	b13c      	cbz	r4, 800df08 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800def8:	6823      	ldr	r3, [r4, #0]
 800defa:	4620      	mov	r0, r4
 800defc:	4632      	mov	r2, r6
 800defe:	4629      	mov	r1, r5
 800df00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df02:	4798      	blx	r3
 800df04:	69a4      	ldr	r4, [r4, #24]
 800df06:	e7f6      	b.n	800def6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800df08:	bd70      	pop	{r4, r5, r6, pc}

0800df0a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800df0a:	b538      	push	{r3, r4, r5, lr}
 800df0c:	460d      	mov	r5, r1
 800df0e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800df10:	b134      	cbz	r4, 800df20 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800df12:	682b      	ldr	r3, [r5, #0]
 800df14:	4621      	mov	r1, r4
 800df16:	4628      	mov	r0, r5
 800df18:	689b      	ldr	r3, [r3, #8]
 800df1a:	4798      	blx	r3
 800df1c:	69a4      	ldr	r4, [r4, #24]
 800df1e:	e7f7      	b.n	800df10 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800df20:	bd38      	pop	{r3, r4, r5, pc}

0800df22 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800df22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800df24:	b19b      	cbz	r3, 800df4e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800df26:	428b      	cmp	r3, r1
 800df28:	d109      	bne.n	800df3e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800df2a:	699a      	ldr	r2, [r3, #24]
 800df2c:	2100      	movs	r1, #0
 800df2e:	6159      	str	r1, [r3, #20]
 800df30:	6282      	str	r2, [r0, #40]	; 0x28
 800df32:	b902      	cbnz	r2, 800df36 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800df34:	4770      	bx	lr
 800df36:	6199      	str	r1, [r3, #24]
 800df38:	4770      	bx	lr
 800df3a:	4613      	mov	r3, r2
 800df3c:	b13a      	cbz	r2, 800df4e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800df3e:	699a      	ldr	r2, [r3, #24]
 800df40:	428a      	cmp	r2, r1
 800df42:	d1fa      	bne.n	800df3a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800df44:	698a      	ldr	r2, [r1, #24]
 800df46:	619a      	str	r2, [r3, #24]
 800df48:	2300      	movs	r3, #0
 800df4a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800df4e:	4770      	bx	lr

0800df50 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800df50:	b410      	push	{r4}
 800df52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800df54:	4604      	mov	r4, r0
 800df56:	b92b      	cbnz	r3, 800df64 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800df58:	6803      	ldr	r3, [r0, #0]
 800df5a:	4611      	mov	r1, r2
 800df5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df62:	4718      	bx	r3
 800df64:	b941      	cbnz	r1, 800df78 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800df66:	6193      	str	r3, [r2, #24]
 800df68:	6282      	str	r2, [r0, #40]	; 0x28
 800df6a:	6154      	str	r4, [r2, #20]
 800df6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df70:	4770      	bx	lr
 800df72:	4603      	mov	r3, r0
 800df74:	2800      	cmp	r0, #0
 800df76:	d0f9      	beq.n	800df6c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800df78:	4299      	cmp	r1, r3
 800df7a:	6998      	ldr	r0, [r3, #24]
 800df7c:	d1f9      	bne.n	800df72 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800df7e:	6190      	str	r0, [r2, #24]
 800df80:	618a      	str	r2, [r1, #24]
 800df82:	e7f2      	b.n	800df6a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800df84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	461f      	mov	r7, r3
 800df8a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800df8e:	460d      	mov	r5, r1
 800df90:	4616      	mov	r6, r2
 800df92:	b103      	cbz	r3, 800df96 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800df94:	6038      	str	r0, [r7, #0]
 800df96:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800df98:	b314      	cbz	r4, 800dfe0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800df9a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800df9e:	b1eb      	cbz	r3, 800dfdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dfa0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800dfa4:	428d      	cmp	r5, r1
 800dfa6:	db19      	blt.n	800dfdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dfa8:	b289      	uxth	r1, r1
 800dfaa:	8923      	ldrh	r3, [r4, #8]
 800dfac:	440b      	add	r3, r1
 800dfae:	b21b      	sxth	r3, r3
 800dfb0:	429d      	cmp	r5, r3
 800dfb2:	da13      	bge.n	800dfdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dfb4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800dfb8:	4296      	cmp	r6, r2
 800dfba:	db0f      	blt.n	800dfdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dfbc:	b292      	uxth	r2, r2
 800dfbe:	8963      	ldrh	r3, [r4, #10]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	b21b      	sxth	r3, r3
 800dfc4:	429e      	cmp	r6, r3
 800dfc6:	da09      	bge.n	800dfdc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dfc8:	6823      	ldr	r3, [r4, #0]
 800dfca:	1ab2      	subs	r2, r6, r2
 800dfcc:	1a69      	subs	r1, r5, r1
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800dfd4:	b212      	sxth	r2, r2
 800dfd6:	463b      	mov	r3, r7
 800dfd8:	b209      	sxth	r1, r1
 800dfda:	47c0      	blx	r8
 800dfdc:	69a4      	ldr	r4, [r4, #24]
 800dfde:	e7db      	b.n	800df98 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800dfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dfe4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800dfe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfe8:	4c6d      	ldr	r4, [pc, #436]	; (800e1a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800dfea:	b0a1      	sub	sp, #132	; 0x84
 800dfec:	4606      	mov	r6, r0
 800dfee:	6824      	ldr	r4, [r4, #0]
 800dff0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800dff2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800dff6:	2400      	movs	r4, #0
 800dff8:	9303      	str	r3, [sp, #12]
 800dffa:	802c      	strh	r4, [r5, #0]
 800dffc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800dffe:	802c      	strh	r4, [r5, #0]
 800e000:	601c      	str	r4, [r3, #0]
 800e002:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800e006:	f7ff ffbd 	bl	800df84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e00a:	f1b9 0f03 	cmp.w	r9, #3
 800e00e:	f340 80c1 	ble.w	800e194 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800e012:	4631      	mov	r1, r6
 800e014:	a80c      	add	r0, sp, #48	; 0x30
 800e016:	f004 fce5 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e01a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800e01e:	9306      	str	r3, [sp, #24]
 800e020:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800e024:	9307      	str	r3, [sp, #28]
 800e026:	9b03      	ldr	r3, [sp, #12]
 800e028:	f8d3 a000 	ldr.w	sl, [r3]
 800e02c:	f1ba 0f00 	cmp.w	sl, #0
 800e030:	f000 80b3 	beq.w	800e19a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800e034:	4651      	mov	r1, sl
 800e036:	a810      	add	r0, sp, #64	; 0x40
 800e038:	f004 fcd4 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e03c:	2002      	movs	r0, #2
 800e03e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800e042:	9b01      	ldr	r3, [sp, #4]
 800e044:	9a06      	ldr	r2, [sp, #24]
 800e046:	fb91 f1f0 	sdiv	r1, r1, r0
 800e04a:	189d      	adds	r5, r3, r2
 800e04c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800e050:	9a07      	ldr	r2, [sp, #28]
 800e052:	4419      	add	r1, r3
 800e054:	9b02      	ldr	r3, [sp, #8]
 800e056:	4413      	add	r3, r2
 800e058:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800e05c:	1a6d      	subs	r5, r5, r1
 800e05e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800e062:	fb92 f2f0 	sdiv	r2, r2, r0
 800e066:	440a      	add	r2, r1
 800e068:	1a9b      	subs	r3, r3, r2
 800e06a:	435b      	muls	r3, r3
 800e06c:	fb05 3505 	mla	r5, r5, r5, r3
 800e070:	4f4c      	ldr	r7, [pc, #304]	; (800e1a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800e072:	ac10      	add	r4, sp, #64	; 0x40
 800e074:	f1b9 0f0c 	cmp.w	r9, #12
 800e078:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e07a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e07c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e07e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e080:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e084:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800e088:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e08c:	f04f 0303 	mov.w	r3, #3
 800e090:	bfd8      	it	le
 800e092:	f109 32ff 	addle.w	r2, r9, #4294967295
 800e096:	f04f 0400 	mov.w	r4, #0
 800e09a:	f8cd 9000 	str.w	r9, [sp]
 800e09e:	bfcc      	ite	gt
 800e0a0:	4698      	movgt	r8, r3
 800e0a2:	fb92 f8f3 	sdivle	r8, r2, r3
 800e0a6:	1c63      	adds	r3, r4, #1
 800e0a8:	aa10      	add	r2, sp, #64	; 0x40
 800e0aa:	f004 0401 	and.w	r4, r4, #1
 800e0ae:	f04f 0b00 	mov.w	fp, #0
 800e0b2:	9308      	str	r3, [sp, #32]
 800e0b4:	9b00      	ldr	r3, [sp, #0]
 800e0b6:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800e0ba:	fb93 f3f8 	sdiv	r3, r3, r8
 800e0be:	3404      	adds	r4, #4
 800e0c0:	b29b      	uxth	r3, r3
 800e0c2:	9304      	str	r3, [sp, #16]
 800e0c4:	9a04      	ldr	r2, [sp, #16]
 800e0c6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e0ca:	fb13 f302 	smulbb	r3, r3, r2
 800e0ce:	9a01      	ldr	r2, [sp, #4]
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	1899      	adds	r1, r3, r2
 800e0d4:	9305      	str	r3, [sp, #20]
 800e0d6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e0da:	b209      	sxth	r1, r1
 800e0dc:	4299      	cmp	r1, r3
 800e0de:	db4d      	blt.n	800e17c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e0e0:	8932      	ldrh	r2, [r6, #8]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	b21b      	sxth	r3, r3
 800e0e6:	4299      	cmp	r1, r3
 800e0e8:	da48      	bge.n	800e17c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e0ea:	9b04      	ldr	r3, [sp, #16]
 800e0ec:	6827      	ldr	r7, [r4, #0]
 800e0ee:	fb17 f703 	smulbb	r7, r7, r3
 800e0f2:	9b02      	ldr	r3, [sp, #8]
 800e0f4:	b2bf      	uxth	r7, r7
 800e0f6:	18fa      	adds	r2, r7, r3
 800e0f8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e0fc:	b212      	sxth	r2, r2
 800e0fe:	429a      	cmp	r2, r3
 800e100:	db3c      	blt.n	800e17c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e102:	8970      	ldrh	r0, [r6, #10]
 800e104:	4403      	add	r3, r0
 800e106:	b21b      	sxth	r3, r3
 800e108:	429a      	cmp	r2, r3
 800e10a:	da37      	bge.n	800e17c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e10c:	2300      	movs	r3, #0
 800e10e:	4630      	mov	r0, r6
 800e110:	930b      	str	r3, [sp, #44]	; 0x2c
 800e112:	ab0b      	add	r3, sp, #44	; 0x2c
 800e114:	f7ff ff36 	bl	800df84 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800e118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e11a:	b37a      	cbz	r2, 800e17c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e11c:	4552      	cmp	r2, sl
 800e11e:	d02d      	beq.n	800e17c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800e120:	4611      	mov	r1, r2
 800e122:	a80e      	add	r0, sp, #56	; 0x38
 800e124:	9209      	str	r2, [sp, #36]	; 0x24
 800e126:	f004 fc5d 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800e12a:	f04f 0e02 	mov.w	lr, #2
 800e12e:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800e132:	9a06      	ldr	r2, [sp, #24]
 800e134:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800e138:	9b01      	ldr	r3, [sp, #4]
 800e13a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800e13e:	4413      	add	r3, r2
 800e140:	9a07      	ldr	r2, [sp, #28]
 800e142:	fb91 f1fe 	sdiv	r1, r1, lr
 800e146:	fb9c fcfe 	sdiv	ip, ip, lr
 800e14a:	4401      	add	r1, r0
 800e14c:	1a58      	subs	r0, r3, r1
 800e14e:	9b02      	ldr	r3, [sp, #8]
 800e150:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800e154:	4413      	add	r3, r2
 800e156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e158:	448c      	add	ip, r1
 800e15a:	eba3 030c 	sub.w	r3, r3, ip
 800e15e:	435b      	muls	r3, r3
 800e160:	fb00 3300 	mla	r3, r0, r0, r3
 800e164:	42ab      	cmp	r3, r5
 800e166:	d208      	bcs.n	800e17a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800e168:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e16a:	461d      	mov	r5, r3
 800e16c:	9803      	ldr	r0, [sp, #12]
 800e16e:	6001      	str	r1, [r0, #0]
 800e170:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800e172:	9805      	ldr	r0, [sp, #20]
 800e174:	8008      	strh	r0, [r1, #0]
 800e176:	992b      	ldr	r1, [sp, #172]	; 0xac
 800e178:	800f      	strh	r7, [r1, #0]
 800e17a:	4692      	mov	sl, r2
 800e17c:	f10b 0b01 	add.w	fp, fp, #1
 800e180:	3408      	adds	r4, #8
 800e182:	f1bb 0f04 	cmp.w	fp, #4
 800e186:	d19d      	bne.n	800e0c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800e188:	9b00      	ldr	r3, [sp, #0]
 800e18a:	9c08      	ldr	r4, [sp, #32]
 800e18c:	444b      	add	r3, r9
 800e18e:	4544      	cmp	r4, r8
 800e190:	9300      	str	r3, [sp, #0]
 800e192:	d188      	bne.n	800e0a6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800e194:	b021      	add	sp, #132	; 0x84
 800e196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19a:	f04f 35ff 	mov.w	r5, #4294967295
 800e19e:	e767      	b.n	800e070 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800e1a0:	2401aa78 	.word	0x2401aa78
 800e1a4:	0801f288 	.word	0x0801f288

0800e1a8 <_ZN8touchgfx4RectaNERKS0_>:
 800e1a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	f9b1 7000 	ldrsh.w	r7, [r1]
 800e1b0:	888c      	ldrh	r4, [r1, #4]
 800e1b2:	f9b0 9000 	ldrsh.w	r9, [r0]
 800e1b6:	443c      	add	r4, r7
 800e1b8:	b2a4      	uxth	r4, r4
 800e1ba:	fa0f f884 	sxth.w	r8, r4
 800e1be:	45c1      	cmp	r9, r8
 800e1c0:	da2f      	bge.n	800e222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e1c2:	8882      	ldrh	r2, [r0, #4]
 800e1c4:	444a      	add	r2, r9
 800e1c6:	b292      	uxth	r2, r2
 800e1c8:	fa0f fe82 	sxth.w	lr, r2
 800e1cc:	4577      	cmp	r7, lr
 800e1ce:	da28      	bge.n	800e222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e1d0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e1d4:	88cb      	ldrh	r3, [r1, #6]
 800e1d6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e1da:	442b      	add	r3, r5
 800e1dc:	b21b      	sxth	r3, r3
 800e1de:	429e      	cmp	r6, r3
 800e1e0:	da1f      	bge.n	800e222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e1e2:	88c3      	ldrh	r3, [r0, #6]
 800e1e4:	4433      	add	r3, r6
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	fa0f fc83 	sxth.w	ip, r3
 800e1ec:	4565      	cmp	r5, ip
 800e1ee:	da18      	bge.n	800e222 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e1f0:	454f      	cmp	r7, r9
 800e1f2:	bfb8      	it	lt
 800e1f4:	464f      	movlt	r7, r9
 800e1f6:	42b5      	cmp	r5, r6
 800e1f8:	bfb8      	it	lt
 800e1fa:	4635      	movlt	r5, r6
 800e1fc:	45f0      	cmp	r8, lr
 800e1fe:	bfd8      	it	le
 800e200:	4622      	movle	r2, r4
 800e202:	1bd2      	subs	r2, r2, r7
 800e204:	8082      	strh	r2, [r0, #4]
 800e206:	884a      	ldrh	r2, [r1, #2]
 800e208:	88c9      	ldrh	r1, [r1, #6]
 800e20a:	8007      	strh	r7, [r0, #0]
 800e20c:	440a      	add	r2, r1
 800e20e:	8045      	strh	r5, [r0, #2]
 800e210:	b292      	uxth	r2, r2
 800e212:	b211      	sxth	r1, r2
 800e214:	458c      	cmp	ip, r1
 800e216:	bfa8      	it	ge
 800e218:	4613      	movge	r3, r2
 800e21a:	1b5b      	subs	r3, r3, r5
 800e21c:	80c3      	strh	r3, [r0, #6]
 800e21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e222:	2300      	movs	r3, #0
 800e224:	8003      	strh	r3, [r0, #0]
 800e226:	8043      	strh	r3, [r0, #2]
 800e228:	8083      	strh	r3, [r0, #4]
 800e22a:	80c3      	strh	r3, [r0, #6]
 800e22c:	e7f7      	b.n	800e21e <_ZN8touchgfx4RectaNERKS0_+0x76>

0800e22e <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e22e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e232:	2b00      	cmp	r3, #0
 800e234:	dd06      	ble.n	800e244 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800e236:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e23a:	2800      	cmp	r0, #0
 800e23c:	bfcc      	ite	gt
 800e23e:	2000      	movgt	r0, #0
 800e240:	2001      	movle	r0, #1
 800e242:	4770      	bx	lr
 800e244:	2001      	movs	r0, #1
 800e246:	4770      	bx	lr

0800e248 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e24c:	2300      	movs	r3, #0
 800e24e:	4604      	mov	r4, r0
 800e250:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800e252:	8003      	strh	r3, [r0, #0]
 800e254:	8043      	strh	r3, [r0, #2]
 800e256:	8083      	strh	r3, [r0, #4]
 800e258:	80c3      	strh	r3, [r0, #6]
 800e25a:	2d00      	cmp	r5, #0
 800e25c:	d040      	beq.n	800e2e0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e25e:	1d28      	adds	r0, r5, #4
 800e260:	f7ff ffe5 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e264:	b988      	cbnz	r0, 800e28a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e266:	4620      	mov	r0, r4
 800e268:	f7ff ffe1 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e26c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e270:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e274:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e278:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e27c:	b138      	cbz	r0, 800e28e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e27e:	8022      	strh	r2, [r4, #0]
 800e280:	8063      	strh	r3, [r4, #2]
 800e282:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e286:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e28a:	69ad      	ldr	r5, [r5, #24]
 800e28c:	e7e5      	b.n	800e25a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e28e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e292:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e296:	4290      	cmp	r0, r2
 800e298:	4607      	mov	r7, r0
 800e29a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e29e:	460e      	mov	r6, r1
 800e2a0:	bfa8      	it	ge
 800e2a2:	4617      	movge	r7, r2
 800e2a4:	4299      	cmp	r1, r3
 800e2a6:	4472      	add	r2, lr
 800e2a8:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e2ac:	bfa8      	it	ge
 800e2ae:	461e      	movge	r6, r3
 800e2b0:	4440      	add	r0, r8
 800e2b2:	4471      	add	r1, lr
 800e2b4:	4463      	add	r3, ip
 800e2b6:	b200      	sxth	r0, r0
 800e2b8:	8027      	strh	r7, [r4, #0]
 800e2ba:	b212      	sxth	r2, r2
 800e2bc:	8066      	strh	r6, [r4, #2]
 800e2be:	b209      	sxth	r1, r1
 800e2c0:	b21b      	sxth	r3, r3
 800e2c2:	4290      	cmp	r0, r2
 800e2c4:	bfac      	ite	ge
 800e2c6:	ebc7 0200 	rsbge	r2, r7, r0
 800e2ca:	ebc7 0202 	rsblt	r2, r7, r2
 800e2ce:	4299      	cmp	r1, r3
 800e2d0:	bfac      	ite	ge
 800e2d2:	ebc6 0301 	rsbge	r3, r6, r1
 800e2d6:	ebc6 0303 	rsblt	r3, r6, r3
 800e2da:	80a2      	strh	r2, [r4, #4]
 800e2dc:	80e3      	strh	r3, [r4, #6]
 800e2de:	e7d4      	b.n	800e28a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e2e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e2e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e2ea:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e2ee:	b383      	cbz	r3, 800e352 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e2f0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e2f2:	b374      	cbz	r4, 800e352 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e2f4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e2f8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e2fc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e300:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e304:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e308:	b303      	cbz	r3, 800e34c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e30a:	4668      	mov	r0, sp
 800e30c:	1d21      	adds	r1, r4, #4
 800e30e:	f8ad 5000 	strh.w	r5, [sp]
 800e312:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e316:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e31a:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e31e:	f7ff ff43 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800e322:	4668      	mov	r0, sp
 800e324:	f7ff ff83 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e328:	b980      	cbnz	r0, 800e34c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e32a:	f8bd 3000 	ldrh.w	r3, [sp]
 800e32e:	4669      	mov	r1, sp
 800e330:	88a2      	ldrh	r2, [r4, #4]
 800e332:	4620      	mov	r0, r4
 800e334:	1a9b      	subs	r3, r3, r2
 800e336:	88e2      	ldrh	r2, [r4, #6]
 800e338:	f8ad 3000 	strh.w	r3, [sp]
 800e33c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e340:	1a9b      	subs	r3, r3, r2
 800e342:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	689b      	ldr	r3, [r3, #8]
 800e34a:	4798      	blx	r3
 800e34c:	69a4      	ldr	r4, [r4, #24]
 800e34e:	2c00      	cmp	r4, #0
 800e350:	d1d8      	bne.n	800e304 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e352:	b002      	add	sp, #8
 800e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e358 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e358:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e35a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e35e:	460d      	mov	r5, r1
 800e360:	4616      	mov	r6, r2
 800e362:	b323      	cbz	r3, 800e3ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e364:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e366:	b314      	cbz	r4, 800e3ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e368:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e36c:	b1eb      	cbz	r3, 800e3aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e36e:	6828      	ldr	r0, [r5, #0]
 800e370:	466b      	mov	r3, sp
 800e372:	6869      	ldr	r1, [r5, #4]
 800e374:	c303      	stmia	r3!, {r0, r1}
 800e376:	4668      	mov	r0, sp
 800e378:	1d21      	adds	r1, r4, #4
 800e37a:	f7ff ff15 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800e37e:	4668      	mov	r0, sp
 800e380:	f7ff ff55 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 800e384:	b988      	cbnz	r0, 800e3aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e386:	f8bd 3000 	ldrh.w	r3, [sp]
 800e38a:	4669      	mov	r1, sp
 800e38c:	88a2      	ldrh	r2, [r4, #4]
 800e38e:	4620      	mov	r0, r4
 800e390:	1a9b      	subs	r3, r3, r2
 800e392:	88e2      	ldrh	r2, [r4, #6]
 800e394:	f8ad 3000 	strh.w	r3, [sp]
 800e398:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e39c:	1a9b      	subs	r3, r3, r2
 800e39e:	4632      	mov	r2, r6
 800e3a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e3a4:	6823      	ldr	r3, [r4, #0]
 800e3a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3a8:	4798      	blx	r3
 800e3aa:	69a4      	ldr	r4, [r4, #24]
 800e3ac:	e7db      	b.n	800e366 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e3ae:	b002      	add	sp, #8
 800e3b0:	bd70      	pop	{r4, r5, r6, pc}

0800e3b2 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800e3b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e3b6:	4770      	bx	lr

0800e3b8 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800e3b8:	4770      	bx	lr

0800e3ba <_ZN8touchgfx3HAL10FlushCacheEv>:
 800e3ba:	4770      	bx	lr

0800e3bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e3bc:	6803      	ldr	r3, [r0, #0]
 800e3be:	b513      	push	{r0, r1, r4, lr}
 800e3c0:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e9cd 3300 	strd	r3, r3, [sp]
 800e3ca:	466b      	mov	r3, sp
 800e3cc:	47a0      	blx	r4
 800e3ce:	b002      	add	sp, #8
 800e3d0:	bd10      	pop	{r4, pc}

0800e3d2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e3d8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 800e3dc:	4770      	bx	lr

0800e3de <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e3de:	2301      	movs	r3, #1
 800e3e0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e3e4:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 800e3e8:	4770      	bx	lr

0800e3ea <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e3ea:	6843      	ldr	r3, [r0, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	725a      	strb	r2, [r3, #9]
 800e3f0:	6840      	ldr	r0, [r0, #4]
 800e3f2:	6803      	ldr	r3, [r0, #0]
 800e3f4:	691b      	ldr	r3, [r3, #16]
 800e3f6:	4718      	bx	r3

0800e3f8 <_ZN8touchgfx3HAL8flushDMAEv>:
 800e3f8:	6840      	ldr	r0, [r0, #4]
 800e3fa:	6803      	ldr	r3, [r0, #0]
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	4718      	bx	r3

0800e400 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800e400:	b530      	push	{r4, r5, lr}
 800e402:	b08b      	sub	sp, #44	; 0x2c
 800e404:	6804      	ldr	r4, [r0, #0]
 800e406:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800e40a:	9509      	str	r5, [sp, #36]	; 0x24
 800e40c:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800e410:	9508      	str	r5, [sp, #32]
 800e412:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800e416:	9507      	str	r5, [sp, #28]
 800e418:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800e41c:	9506      	str	r5, [sp, #24]
 800e41e:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800e422:	9505      	str	r5, [sp, #20]
 800e424:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800e428:	9504      	str	r5, [sp, #16]
 800e42a:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800e42e:	9503      	str	r5, [sp, #12]
 800e430:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800e434:	9502      	str	r5, [sp, #8]
 800e436:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800e43a:	e9cd 3500 	strd	r3, r5, [sp]
 800e43e:	4613      	mov	r3, r2
 800e440:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800e442:	2200      	movs	r2, #0
 800e444:	47a0      	blx	r4
 800e446:	b00b      	add	sp, #44	; 0x2c
 800e448:	bd30      	pop	{r4, r5, pc}
	...

0800e44c <_ZN8touchgfx3HAL10beginFrameEv>:
 800e44c:	4b04      	ldr	r3, [pc, #16]	; (800e460 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	b123      	cbz	r3, 800e45c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e452:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 800e456:	f080 0001 	eor.w	r0, r0, #1
 800e45a:	4770      	bx	lr
 800e45c:	2001      	movs	r0, #1
 800e45e:	4770      	bx	lr
 800e460:	2401aa76 	.word	0x2401aa76

0800e464 <_ZN8touchgfx3HAL8endFrameEv>:
 800e464:	b510      	push	{r4, lr}
 800e466:	4604      	mov	r4, r0
 800e468:	6840      	ldr	r0, [r0, #4]
 800e46a:	6803      	ldr	r3, [r0, #0]
 800e46c:	689b      	ldr	r3, [r3, #8]
 800e46e:	4798      	blx	r3
 800e470:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 800e474:	b113      	cbz	r3, 800e47c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e476:	2301      	movs	r3, #1
 800e478:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800e47c:	bd10      	pop	{r4, pc}

0800e47e <_ZN8touchgfx3HAL10initializeEv>:
 800e47e:	b510      	push	{r4, lr}
 800e480:	4604      	mov	r4, r0
 800e482:	f7fe f89b 	bl	800c5bc <_ZN8touchgfx10OSWrappers10initializeEv>
 800e486:	f7fd fdb1 	bl	800bfec <_ZN8touchgfx4GPIO4initEv>
 800e48a:	6860      	ldr	r0, [r4, #4]
 800e48c:	6803      	ldr	r3, [r0, #0]
 800e48e:	68db      	ldr	r3, [r3, #12]
 800e490:	4798      	blx	r3
 800e492:	68e0      	ldr	r0, [r4, #12]
 800e494:	6803      	ldr	r3, [r0, #0]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	4798      	blx	r3
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	4620      	mov	r0, r4
 800e49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4a4:	4718      	bx	r3

0800e4a6 <_ZN8touchgfx3HAL9taskEntryEv>:
 800e4a6:	b508      	push	{r3, lr}
 800e4a8:	6803      	ldr	r3, [r0, #0]
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e4b0:	4798      	blx	r3
 800e4b2:	6823      	ldr	r3, [r4, #0]
 800e4b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	4798      	blx	r3
 800e4ba:	f7fe f8f5 	bl	800c6a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800e4be:	6823      	ldr	r3, [r4, #0]
 800e4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4c2:	e7f8      	b.n	800e4b6 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800e4c4 <_ZN8touchgfx3HAL4tickEv>:
 800e4c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e4c6:	6803      	ldr	r3, [r0, #0]
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	4d5b      	ldr	r5, [pc, #364]	; (800e638 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800e4cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e4d0:	4798      	blx	r3
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	f000 8095 	beq.w	800e602 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800e4d8:	2001      	movs	r0, #1
 800e4da:	2600      	movs	r6, #0
 800e4dc:	f7fd fd8e 	bl	800bffc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e4e0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800e4e4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800e4e8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e4ec:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800e4f0:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 800e4f4:	b133      	cbz	r3, 800e504 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e4fe:	4798      	blx	r3
 800e500:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 800e504:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800e508:	2601      	movs	r6, #1
 800e50a:	6862      	ldr	r2, [r4, #4]
 800e50c:	f083 0301 	eor.w	r3, r3, #1
 800e510:	702e      	strb	r6, [r5, #0]
 800e512:	7253      	strb	r3, [r2, #9]
 800e514:	f003 f908 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800e518:	6803      	ldr	r3, [r0, #0]
 800e51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e51c:	4798      	blx	r3
 800e51e:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800e522:	b90b      	cbnz	r3, 800e528 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e524:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 800e528:	f003 f8fe 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800e52c:	6803      	ldr	r3, [r0, #0]
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	4798      	blx	r3
 800e532:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e534:	6803      	ldr	r3, [r0, #0]
 800e536:	691b      	ldr	r3, [r3, #16]
 800e538:	4798      	blx	r3
 800e53a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800e53e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800e542:	3b01      	subs	r3, #1
 800e544:	b2db      	uxtb	r3, r3
 800e546:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e54a:	b10a      	cbz	r2, 800e550 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1eb      	bne.n	800e528 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e550:	4a3a      	ldr	r2, [pc, #232]	; (800e63c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e552:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800e556:	7813      	ldrb	r3, [r2, #0]
 800e558:	3301      	adds	r3, #1
 800e55a:	b25b      	sxtb	r3, r3
 800e55c:	4299      	cmp	r1, r3
 800e55e:	7013      	strb	r3, [r2, #0]
 800e560:	dc10      	bgt.n	800e584 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e562:	2300      	movs	r3, #0
 800e564:	68e0      	ldr	r0, [r4, #12]
 800e566:	a902      	add	r1, sp, #8
 800e568:	7013      	strb	r3, [r2, #0]
 800e56a:	aa03      	add	r2, sp, #12
 800e56c:	6803      	ldr	r3, [r0, #0]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	4798      	blx	r3
 800e572:	6823      	ldr	r3, [r4, #0]
 800e574:	2800      	cmp	r0, #0
 800e576:	d050      	beq.n	800e61a <_ZN8touchgfx3HAL4tickEv+0x156>
 800e578:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e57c:	4620      	mov	r0, r4
 800e57e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e582:	4798      	blx	r3
 800e584:	2300      	movs	r3, #0
 800e586:	6960      	ldr	r0, [r4, #20]
 800e588:	f88d 3007 	strb.w	r3, [sp, #7]
 800e58c:	b158      	cbz	r0, 800e5a6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e58e:	6803      	ldr	r3, [r0, #0]
 800e590:	f10d 0107 	add.w	r1, sp, #7
 800e594:	68db      	ldr	r3, [r3, #12]
 800e596:	4798      	blx	r3
 800e598:	b128      	cbz	r0, 800e5a6 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e59a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e59c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e5a0:	6803      	ldr	r3, [r0, #0]
 800e5a2:	68db      	ldr	r3, [r3, #12]
 800e5a4:	4798      	blx	r3
 800e5a6:	f104 001c 	add.w	r0, r4, #28
 800e5aa:	f00f f835 	bl	801d618 <_ZN8touchgfx8Gestures4tickEv>
 800e5ae:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800e5b2:	b30b      	cbz	r3, 800e5f8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e5b4:	6920      	ldr	r0, [r4, #16]
 800e5b6:	6803      	ldr	r3, [r0, #0]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	4798      	blx	r3
 800e5bc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e5be:	4606      	mov	r6, r0
 800e5c0:	b903      	cbnz	r3, 800e5c4 <_ZN8touchgfx3HAL4tickEv+0x100>
 800e5c2:	6760      	str	r0, [r4, #116]	; 0x74
 800e5c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e5c6:	4a1e      	ldr	r2, [pc, #120]	; (800e640 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e5c8:	1af3      	subs	r3, r6, r3
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d914      	bls.n	800e5f8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e5ce:	6920      	ldr	r0, [r4, #16]
 800e5d0:	6803      	ldr	r3, [r0, #0]
 800e5d2:	699b      	ldr	r3, [r3, #24]
 800e5d4:	4798      	blx	r3
 800e5d6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e5d8:	2264      	movs	r2, #100	; 0x64
 800e5da:	1af3      	subs	r3, r6, r3
 800e5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5e0:	fbb0 f0f3 	udiv	r0, r0, r3
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	dc1d      	bgt.n	800e624 <_ZN8touchgfx3HAL4tickEv+0x160>
 800e5e8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 800e5ec:	6920      	ldr	r0, [r4, #16]
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	6803      	ldr	r3, [r0, #0]
 800e5f2:	69db      	ldr	r3, [r3, #28]
 800e5f4:	4798      	blx	r3
 800e5f6:	6766      	str	r6, [r4, #116]	; 0x74
 800e5f8:	f003 f896 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800e5fc:	6803      	ldr	r3, [r0, #0]
 800e5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e600:	4798      	blx	r3
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	4620      	mov	r0, r4
 800e606:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e60a:	4798      	blx	r3
 800e60c:	2001      	movs	r0, #1
 800e60e:	f7fd fd2d 	bl	800c06c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e612:	2300      	movs	r3, #0
 800e614:	702b      	strb	r3, [r5, #0]
 800e616:	b004      	add	sp, #16
 800e618:	bd70      	pop	{r4, r5, r6, pc}
 800e61a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e61e:	4620      	mov	r0, r4
 800e620:	4798      	blx	r3
 800e622:	e7af      	b.n	800e584 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e624:	2863      	cmp	r0, #99	; 0x63
 800e626:	bfcb      	itete	gt
 800e628:	2300      	movgt	r3, #0
 800e62a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800e62e:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 800e632:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 800e636:	e7d9      	b.n	800e5ec <_ZN8touchgfx3HAL4tickEv+0x128>
 800e638:	2401aa7c 	.word	0x2401aa7c
 800e63c:	2401aa7d 	.word	0x2401aa7d
 800e640:	05f5e100 	.word	0x05f5e100

0800e644 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e644:	b510      	push	{r4, lr}
 800e646:	4604      	mov	r4, r0
 800e648:	f7fd fffa 	bl	800c640 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800e64c:	2200      	movs	r2, #0
 800e64e:	6863      	ldr	r3, [r4, #4]
 800e650:	729a      	strb	r2, [r3, #10]
 800e652:	bd10      	pop	{r4, pc}

0800e654 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e654:	65c1      	str	r1, [r0, #92]	; 0x5c
 800e656:	301c      	adds	r0, #28
 800e658:	f00e bfdc 	b.w	801d614 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e65c <_ZN8touchgfx3HAL5touchEll>:
 800e65c:	b530      	push	{r4, r5, lr}
 800e65e:	b087      	sub	sp, #28
 800e660:	4604      	mov	r4, r0
 800e662:	a804      	add	r0, sp, #16
 800e664:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e668:	f002 fe50 	bl	801130c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e66c:	9b04      	ldr	r3, [sp, #16]
 800e66e:	a906      	add	r1, sp, #24
 800e670:	a803      	add	r0, sp, #12
 800e672:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e676:	9b05      	ldr	r3, [sp, #20]
 800e678:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e67c:	f002 fe98 	bl	80113b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e680:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 800e684:	f104 001c 	add.w	r0, r4, #28
 800e688:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e68c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e690:	b189      	cbz	r1, 800e6b6 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e692:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 800e696:	9300      	str	r3, [sp, #0]
 800e698:	4613      	mov	r3, r2
 800e69a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e69e:	462a      	mov	r2, r5
 800e6a0:	f00e ffc8 	bl	801d634 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e6a4:	b128      	cbz	r0, 800e6b2 <_ZN8touchgfx3HAL5touchEll+0x56>
 800e6a6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e6aa:	6623      	str	r3, [r4, #96]	; 0x60
 800e6ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e6b0:	6663      	str	r3, [r4, #100]	; 0x64
 800e6b2:	b007      	add	sp, #28
 800e6b4:	bd30      	pop	{r4, r5, pc}
 800e6b6:	f00e fffd 	bl	801d6b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800e6c0:	e7f1      	b.n	800e6a6 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e6c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e6c2:	b510      	push	{r4, lr}
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d046      	beq.n	800e756 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e6c8:	ea81 0002 	eor.w	r0, r1, r2
 800e6cc:	07c4      	lsls	r4, r0, #31
 800e6ce:	d508      	bpl.n	800e6e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e6d0:	440b      	add	r3, r1
 800e6d2:	3a01      	subs	r2, #1
 800e6d4:	428b      	cmp	r3, r1
 800e6d6:	d93e      	bls.n	800e756 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e6d8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e6dc:	f801 0b01 	strb.w	r0, [r1], #1
 800e6e0:	e7f8      	b.n	800e6d4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e6e2:	07d0      	lsls	r0, r2, #31
 800e6e4:	bf42      	ittt	mi
 800e6e6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e6ea:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e6ee:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d911      	bls.n	800e71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e6f6:	ea81 0402 	eor.w	r4, r1, r2
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	07a4      	lsls	r4, r4, #30
 800e6fe:	d022      	beq.n	800e746 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e700:	f023 0401 	bic.w	r4, r3, #1
 800e704:	440c      	add	r4, r1
 800e706:	428c      	cmp	r4, r1
 800e708:	4602      	mov	r2, r0
 800e70a:	d904      	bls.n	800e716 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e70c:	8812      	ldrh	r2, [r2, #0]
 800e70e:	3002      	adds	r0, #2
 800e710:	f821 2b02 	strh.w	r2, [r1], #2
 800e714:	e7f7      	b.n	800e706 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e716:	f003 0301 	and.w	r3, r3, #1
 800e71a:	f023 0003 	bic.w	r0, r3, #3
 800e71e:	4408      	add	r0, r1
 800e720:	4288      	cmp	r0, r1
 800e722:	4614      	mov	r4, r2
 800e724:	d904      	bls.n	800e730 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e726:	6824      	ldr	r4, [r4, #0]
 800e728:	3204      	adds	r2, #4
 800e72a:	f841 4b04 	str.w	r4, [r1], #4
 800e72e:	e7f7      	b.n	800e720 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e730:	f003 0303 	and.w	r3, r3, #3
 800e734:	3a01      	subs	r2, #1
 800e736:	440b      	add	r3, r1
 800e738:	428b      	cmp	r3, r1
 800e73a:	d90c      	bls.n	800e756 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e73c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e740:	f801 0b01 	strb.w	r0, [r1], #1
 800e744:	e7f8      	b.n	800e738 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e746:	0790      	lsls	r0, r2, #30
 800e748:	d0e7      	beq.n	800e71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e74a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e74e:	3b02      	subs	r3, #2
 800e750:	f821 0b02 	strh.w	r0, [r1], #2
 800e754:	e7e1      	b.n	800e71a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e756:	2001      	movs	r0, #1
 800e758:	bd10      	pop	{r4, pc}

0800e75a <_ZN8touchgfx3HAL7noTouchEv>:
 800e75a:	b510      	push	{r4, lr}
 800e75c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800e760:	4604      	mov	r4, r0
 800e762:	b153      	cbz	r3, 800e77a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e764:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 800e768:	2101      	movs	r1, #1
 800e76a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 800e76e:	301c      	adds	r0, #28
 800e770:	f00e ffa0 	bl	801d6b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e774:	2300      	movs	r3, #0
 800e776:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800e77a:	bd10      	pop	{r4, pc}

0800e77c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e780:	b085      	sub	sp, #20
 800e782:	4604      	mov	r4, r0
 800e784:	2000      	movs	r0, #0
 800e786:	4699      	mov	r9, r3
 800e788:	ad04      	add	r5, sp, #16
 800e78a:	460f      	mov	r7, r1
 800e78c:	4690      	mov	r8, r2
 800e78e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e792:	69a0      	ldr	r0, [r4, #24]
 800e794:	6806      	ldr	r6, [r0, #0]
 800e796:	9501      	str	r5, [sp, #4]
 800e798:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800e79c:	9500      	str	r5, [sp, #0]
 800e79e:	6835      	ldr	r5, [r6, #0]
 800e7a0:	47a8      	blx	r5
 800e7a2:	4d10      	ldr	r5, [pc, #64]	; (800e7e4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	f8a5 9000 	strh.w	r9, [r5]
 800e7aa:	f7fb f9ef 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800e7ae:	6803      	ldr	r3, [r0, #0]
 800e7b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b2:	4798      	blx	r3
 800e7b4:	b128      	cbz	r0, 800e7c2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e7b6:	2801      	cmp	r0, #1
 800e7b8:	d00b      	beq.n	800e7d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e7ba:	4630      	mov	r0, r6
 800e7bc:	b005      	add	sp, #20
 800e7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c2:	882b      	ldrh	r3, [r5, #0]
 800e7c4:	fb08 7203 	mla	r2, r8, r3, r7
 800e7c8:	9b03      	ldr	r3, [sp, #12]
 800e7ca:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e7ce:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e7d0:	e7f3      	b.n	800e7ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e7d2:	882a      	ldrh	r2, [r5, #0]
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	fb08 7202 	mla	r2, r8, r2, r7
 800e7da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e7de:	1a9a      	subs	r2, r3, r2
 800e7e0:	63e2      	str	r2, [r4, #60]	; 0x3c
 800e7e2:	e7ea      	b.n	800e7ba <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e7e4:	2401aa72 	.word	0x2401aa72

0800e7e8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ea:	b08b      	sub	sp, #44	; 0x2c
 800e7ec:	4617      	mov	r7, r2
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	460e      	mov	r6, r1
 800e7f2:	461d      	mov	r5, r3
 800e7f4:	f7fb f9ca 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800e7f8:	6803      	ldr	r3, [r0, #0]
 800e7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7fc:	4798      	blx	r3
 800e7fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e802:	9007      	str	r0, [sp, #28]
 800e804:	4631      	mov	r1, r6
 800e806:	6822      	ldr	r2, [r4, #0]
 800e808:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e80c:	4b0c      	ldr	r3, [pc, #48]	; (800e840 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e80e:	4620      	mov	r0, r4
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	9306      	str	r3, [sp, #24]
 800e814:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e818:	9305      	str	r3, [sp, #20]
 800e81a:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e81e:	9304      	str	r3, [sp, #16]
 800e820:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e824:	9303      	str	r3, [sp, #12]
 800e826:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e82a:	9302      	str	r3, [sp, #8]
 800e82c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e830:	e9cd 5300 	strd	r5, r3, [sp]
 800e834:	463b      	mov	r3, r7
 800e836:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800e838:	2200      	movs	r2, #0
 800e83a:	47a8      	blx	r5
 800e83c:	b00b      	add	sp, #44	; 0x2c
 800e83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e840:	2401aa72 	.word	0x2401aa72

0800e844 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e848:	4698      	mov	r8, r3
 800e84a:	6803      	ldr	r3, [r0, #0]
 800e84c:	b08b      	sub	sp, #44	; 0x2c
 800e84e:	4617      	mov	r7, r2
 800e850:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800e852:	460e      	mov	r6, r1
 800e854:	4b13      	ldr	r3, [pc, #76]	; (800e8a4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e856:	4604      	mov	r4, r0
 800e858:	f8b3 9000 	ldrh.w	r9, [r3]
 800e85c:	f7fb f996 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800e860:	6803      	ldr	r3, [r0, #0]
 800e862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e864:	4798      	blx	r3
 800e866:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e86a:	2200      	movs	r2, #0
 800e86c:	4631      	mov	r1, r6
 800e86e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e872:	2302      	movs	r3, #2
 800e874:	4620      	mov	r0, r4
 800e876:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e87a:	2301      	movs	r3, #1
 800e87c:	9305      	str	r3, [sp, #20]
 800e87e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e882:	9304      	str	r3, [sp, #16]
 800e884:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e888:	9303      	str	r3, [sp, #12]
 800e88a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e88e:	9302      	str	r3, [sp, #8]
 800e890:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e894:	e9cd 8300 	strd	r8, r3, [sp]
 800e898:	463b      	mov	r3, r7
 800e89a:	47a8      	blx	r5
 800e89c:	b00b      	add	sp, #44	; 0x2c
 800e89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8a2:	bf00      	nop
 800e8a4:	2401aa72 	.word	0x2401aa72

0800e8a8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e8a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8ac:	4698      	mov	r8, r3
 800e8ae:	6803      	ldr	r3, [r0, #0]
 800e8b0:	b087      	sub	sp, #28
 800e8b2:	460e      	mov	r6, r1
 800e8b4:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800e8b6:	4617      	mov	r7, r2
 800e8b8:	4b0f      	ldr	r3, [pc, #60]	; (800e8f8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	f8b3 9000 	ldrh.w	r9, [r3]
 800e8c0:	f7fb f964 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800e8c4:	6803      	ldr	r3, [r0, #0]
 800e8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8c8:	4798      	blx	r3
 800e8ca:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e8ce:	463a      	mov	r2, r7
 800e8d0:	4631      	mov	r1, r6
 800e8d2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e8d6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e8da:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e8de:	4620      	mov	r0, r4
 800e8e0:	9302      	str	r3, [sp, #8]
 800e8e2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e8e6:	9301      	str	r3, [sp, #4]
 800e8e8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	4643      	mov	r3, r8
 800e8f0:	47a8      	blx	r5
 800e8f2:	b007      	add	sp, #28
 800e8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8f8:	2401aa72 	.word	0x2401aa72

0800e8fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e900:	4604      	mov	r4, r0
 800e902:	b08f      	sub	sp, #60	; 0x3c
 800e904:	4610      	mov	r0, r2
 800e906:	460d      	mov	r5, r1
 800e908:	4691      	mov	r9, r2
 800e90a:	461e      	mov	r6, r3
 800e90c:	f005 fb9e 	bl	801404c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e910:	2800      	cmp	r0, #0
 800e912:	f000 809d 	beq.w	800ea50 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	4620      	mov	r0, r4
 800e91a:	f8df b198 	ldr.w	fp, [pc, #408]	; 800eab4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e91e:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e924:	4798      	blx	r3
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	4620      	mov	r0, r4
 800e92a:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800eab8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e930:	4798      	blx	r3
 800e932:	f8bb 3000 	ldrh.w	r3, [fp]
 800e936:	4f5c      	ldr	r7, [pc, #368]	; (800eaa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e93e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e942:	4640      	mov	r0, r8
 800e944:	9302      	str	r3, [sp, #8]
 800e946:	883b      	ldrh	r3, [r7, #0]
 800e948:	9303      	str	r3, [sp, #12]
 800e94a:	4b58      	ldr	r3, [pc, #352]	; (800eaac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e94c:	881a      	ldrh	r2, [r3, #0]
 800e94e:	9305      	str	r3, [sp, #20]
 800e950:	9204      	str	r2, [sp, #16]
 800e952:	f005 fcbf 	bl	80142d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e956:	8038      	strh	r0, [r7, #0]
 800e958:	4640      	mov	r0, r8
 800e95a:	f005 fcef 	bl	801433c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e95e:	9b05      	ldr	r3, [sp, #20]
 800e960:	b280      	uxth	r0, r0
 800e962:	8018      	strh	r0, [r3, #0]
 800e964:	4b52      	ldr	r3, [pc, #328]	; (800eab0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d174      	bne.n	800ea56 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e96c:	883b      	ldrh	r3, [r7, #0]
 800e96e:	f8aa 0000 	strh.w	r0, [sl]
 800e972:	f8ab 3000 	strh.w	r3, [fp]
 800e976:	4648      	mov	r0, r9
 800e978:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800e97c:	f005 fb66 	bl	801404c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e980:	2200      	movs	r2, #0
 800e982:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e986:	4611      	mov	r1, r2
 800e988:	4628      	mov	r0, r5
 800e98a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e98e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e992:	f7fb fe96 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
 800e996:	2301      	movs	r3, #1
 800e998:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e99c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e9a0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dd5c      	ble.n	800ea62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e9a8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	dd58      	ble.n	800ea62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e9b0:	462a      	mov	r2, r5
 800e9b2:	ab0a      	add	r3, sp, #40	; 0x28
 800e9b4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e9b8:	6851      	ldr	r1, [r2, #4]
 800e9ba:	c303      	stmia	r3!, {r0, r1}
 800e9bc:	4631      	mov	r1, r6
 800e9be:	a80a      	add	r0, sp, #40	; 0x28
 800e9c0:	f7ff fbf2 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800e9c4:	4b38      	ldr	r3, [pc, #224]	; (800eaa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e9c6:	2100      	movs	r1, #0
 800e9c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e9cc:	4b37      	ldr	r3, [pc, #220]	; (800eaac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e9ce:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e9d2:	aa0a      	add	r2, sp, #40	; 0x28
 800e9d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e9d8:	910c      	str	r1, [sp, #48]	; 0x30
 800e9da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e9de:	ab08      	add	r3, sp, #32
 800e9e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e9e4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	a90c      	add	r1, sp, #48	; 0x30
 800e9ec:	f7ff fbdc 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800e9f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d13c      	bne.n	800ea70 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e9f6:	2000      	movs	r0, #0
 800e9f8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 800e9fc:	2600      	movs	r6, #0
 800e9fe:	696b      	ldr	r3, [r5, #20]
 800ea00:	a908      	add	r1, sp, #32
 800ea02:	682a      	ldr	r2, [r5, #0]
 800ea04:	4628      	mov	r0, r5
 800ea06:	9305      	str	r3, [sp, #20]
 800ea08:	616e      	str	r6, [r5, #20]
 800ea0a:	6892      	ldr	r2, [r2, #8]
 800ea0c:	4790      	blx	r2
 800ea0e:	9b05      	ldr	r3, [sp, #20]
 800ea10:	4652      	mov	r2, sl
 800ea12:	4649      	mov	r1, r9
 800ea14:	616b      	str	r3, [r5, #20]
 800ea16:	4628      	mov	r0, r5
 800ea18:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 800ea1c:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800ea20:	f7fb fe4f 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
 800ea24:	9a01      	ldr	r2, [sp, #4]
 800ea26:	4b23      	ldr	r3, [pc, #140]	; (800eab4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800ea28:	4620      	mov	r0, r4
 800ea2a:	801a      	strh	r2, [r3, #0]
 800ea2c:	9a02      	ldr	r2, [sp, #8]
 800ea2e:	4b22      	ldr	r3, [pc, #136]	; (800eab8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800ea30:	801a      	strh	r2, [r3, #0]
 800ea32:	9a03      	ldr	r2, [sp, #12]
 800ea34:	4b1c      	ldr	r3, [pc, #112]	; (800eaa8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800ea36:	801a      	strh	r2, [r3, #0]
 800ea38:	4b1c      	ldr	r3, [pc, #112]	; (800eaac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800ea3a:	9a04      	ldr	r2, [sp, #16]
 800ea3c:	801a      	strh	r2, [r3, #0]
 800ea3e:	6823      	ldr	r3, [r4, #0]
 800ea40:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800ea44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea46:	4798      	blx	r3
 800ea48:	6823      	ldr	r3, [r4, #0]
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea4e:	4798      	blx	r3
 800ea50:	b00f      	add	sp, #60	; 0x3c
 800ea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea56:	883b      	ldrh	r3, [r7, #0]
 800ea58:	f8ab 0000 	strh.w	r0, [fp]
 800ea5c:	f8aa 3000 	strh.w	r3, [sl]
 800ea60:	e789      	b.n	800e976 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800ea62:	462a      	mov	r2, r5
 800ea64:	ab0a      	add	r3, sp, #40	; 0x28
 800ea66:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ea6a:	6851      	ldr	r1, [r2, #4]
 800ea6c:	c303      	stmia	r3!, {r0, r1}
 800ea6e:	e7a9      	b.n	800e9c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800ea70:	a807      	add	r0, sp, #28
 800ea72:	f005 fd67 	bl	8014544 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ea76:	4606      	mov	r6, r0
 800ea78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800ea7a:	6803      	ldr	r3, [r0, #0]
 800ea7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea7e:	4798      	blx	r3
 800ea80:	4286      	cmp	r6, r0
 800ea82:	d1b8      	bne.n	800e9f6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800ea84:	f7fb f882 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800ea88:	6803      	ldr	r3, [r0, #0]
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	a807      	add	r0, sp, #28
 800ea8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	f005 fd57 	bl	8014544 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800ea96:	9b05      	ldr	r3, [sp, #20]
 800ea98:	4601      	mov	r1, r0
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	4798      	blx	r3
 800ea9e:	f080 0001 	eor.w	r0, r0, #1
 800eaa2:	b2c0      	uxtb	r0, r0
 800eaa4:	e7a8      	b.n	800e9f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800eaa6:	bf00      	nop
 800eaa8:	2401aa6c 	.word	0x2401aa6c
 800eaac:	2401aa6e 	.word	0x2401aa6e
 800eab0:	2401aa70 	.word	0x2401aa70
 800eab4:	2401aa72 	.word	0x2401aa72
 800eab8:	2401aa74 	.word	0x2401aa74

0800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800eabc:	4b07      	ldr	r3, [pc, #28]	; (800eadc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800eabe:	b510      	push	{r4, lr}
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	4604      	mov	r4, r0
 800eac4:	b13b      	cbz	r3, 800ead6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800eac6:	6803      	ldr	r3, [r0, #0]
 800eac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaca:	4798      	blx	r3
 800eacc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800eace:	4283      	cmp	r3, r0
 800ead0:	d101      	bne.n	800ead6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800ead2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800ead4:	bd10      	pop	{r4, pc}
 800ead6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ead8:	e7fc      	b.n	800ead4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800eada:	bf00      	nop
 800eadc:	2401aa76 	.word	0x2401aa76

0800eae0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800eae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eae4:	461d      	mov	r5, r3
 800eae6:	b08a      	sub	sp, #40	; 0x28
 800eae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaec:	4690      	mov	r8, r2
 800eaee:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800eaf2:	2400      	movs	r4, #0
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	fb06 8505 	mla	r5, r6, r5, r8
 800eafa:	9404      	str	r4, [sp, #16]
 800eafc:	f88d 4020 	strb.w	r4, [sp, #32]
 800eb00:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb04:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800eb08:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eb0c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800eb10:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eb14:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800eb18:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb1c:	f7ff ffce 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eb20:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f8ad 601e 	strh.w	r6, [sp, #30]
 800eb2a:	a901      	add	r1, sp, #4
 800eb2c:	9505      	str	r5, [sp, #20]
 800eb2e:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800eb32:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800eb36:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800eb3a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800eb3e:	6803      	ldr	r3, [r0, #0]
 800eb40:	685b      	ldr	r3, [r3, #4]
 800eb42:	4798      	blx	r3
 800eb44:	b00a      	add	sp, #40	; 0x28
 800eb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb4a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800eb4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eb4e:	b08b      	sub	sp, #44	; 0x2c
 800eb50:	2400      	movs	r4, #0
 800eb52:	4691      	mov	r9, r2
 800eb54:	461d      	mov	r5, r3
 800eb56:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800eb5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb5e:	4688      	mov	r8, r1
 800eb60:	4607      	mov	r7, r0
 800eb62:	9404      	str	r4, [sp, #16]
 800eb64:	fb06 9505 	mla	r5, r6, r5, r9
 800eb68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb6c:	f7ff ffa6 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eb70:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800eb74:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eb7e:	a901      	add	r1, sp, #4
 800eb80:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800eb84:	9505      	str	r5, [sp, #20]
 800eb86:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eb8a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800eb8e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800eb92:	f8cd 8010 	str.w	r8, [sp, #16]
 800eb96:	f8ad 4020 	strh.w	r4, [sp, #32]
 800eb9a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800eb9e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800eba2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800eba6:	6803      	ldr	r3, [r0, #0]
 800eba8:	685b      	ldr	r3, [r3, #4]
 800ebaa:	4798      	blx	r3
 800ebac:	b00b      	add	sp, #44	; 0x2c
 800ebae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ebb4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	b08a      	sub	sp, #40	; 0x28
 800ebba:	4698      	mov	r8, r3
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800ebc4:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800ebc8:	2d0b      	cmp	r5, #11
 800ebca:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800ebce:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800ebd2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800ebd6:	9304      	str	r3, [sp, #16]
 800ebd8:	d137      	bne.n	800ec4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800ebda:	2380      	movs	r3, #128	; 0x80
 800ebdc:	f88d 0020 	strb.w	r0, [sp, #32]
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	9203      	str	r2, [sp, #12]
 800ebe4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ebe8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ebec:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ebf0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ebf4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ebf8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ebfc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec00:	f7ff ff5c 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ec04:	2c0b      	cmp	r4, #11
 800ec06:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800ec0a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ec0e:	bf94      	ite	ls
 800ec10:	4b19      	ldrls	r3, [pc, #100]	; (800ec78 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ec12:	2100      	movhi	r1, #0
 800ec14:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800ec18:	bf98      	it	ls
 800ec1a:	5d19      	ldrbls	r1, [r3, r4]
 800ec1c:	fb02 8307 	mla	r3, r2, r7, r8
 800ec20:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ec24:	10c9      	asrs	r1, r1, #3
 800ec26:	fb01 0003 	mla	r0, r1, r3, r0
 800ec2a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800ec2e:	a901      	add	r1, sp, #4
 800ec30:	9005      	str	r0, [sp, #20]
 800ec32:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800ec36:	2300      	movs	r3, #0
 800ec38:	6870      	ldr	r0, [r6, #4]
 800ec3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ec3e:	6803      	ldr	r3, [r0, #0]
 800ec40:	685b      	ldr	r3, [r3, #4]
 800ec42:	4798      	blx	r3
 800ec44:	b00a      	add	sp, #40	; 0x28
 800ec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec4a:	2d02      	cmp	r5, #2
 800ec4c:	d109      	bne.n	800ec62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800ec4e:	28ff      	cmp	r0, #255	; 0xff
 800ec50:	d105      	bne.n	800ec5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800ec52:	f1bc 0f00 	cmp.w	ip, #0
 800ec56:	bf14      	ite	ne
 800ec58:	2340      	movne	r3, #64	; 0x40
 800ec5a:	2320      	moveq	r3, #32
 800ec5c:	e7be      	b.n	800ebdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ec5e:	2340      	movs	r3, #64	; 0x40
 800ec60:	e7bc      	b.n	800ebdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ec62:	28ff      	cmp	r0, #255	; 0xff
 800ec64:	d105      	bne.n	800ec72 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800ec66:	f1bc 0f00 	cmp.w	ip, #0
 800ec6a:	bf14      	ite	ne
 800ec6c:	2304      	movne	r3, #4
 800ec6e:	2301      	moveq	r3, #1
 800ec70:	e7b4      	b.n	800ebdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ec72:	2304      	movs	r3, #4
 800ec74:	e7b2      	b.n	800ebdc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ec76:	bf00      	nop
 800ec78:	0801fd28 	.word	0x0801fd28

0800ec7c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec80:	b08b      	sub	sp, #44	; 0x2c
 800ec82:	461d      	mov	r5, r3
 800ec84:	2400      	movs	r4, #0
 800ec86:	4688      	mov	r8, r1
 800ec88:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800ec8c:	4693      	mov	fp, r2
 800ec8e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800ec92:	4607      	mov	r7, r0
 800ec94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800ec98:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800ec9c:	9404      	str	r4, [sp, #16]
 800ec9e:	bf14      	ite	ne
 800eca0:	2308      	movne	r3, #8
 800eca2:	2302      	moveq	r3, #2
 800eca4:	fb05 b50a 	mla	r5, r5, sl, fp
 800eca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ecac:	f7ff ff06 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ecb0:	2e0b      	cmp	r6, #11
 800ecb2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800ecb6:	a901      	add	r1, sp, #4
 800ecb8:	bf98      	it	ls
 800ecba:	4b13      	ldrls	r3, [pc, #76]	; (800ed08 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800ecbc:	f8ad a01e 	strh.w	sl, [sp, #30]
 800ecc0:	bf98      	it	ls
 800ecc2:	5d9c      	ldrbls	r4, [r3, r6]
 800ecc4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800ecc8:	10e4      	asrs	r4, r4, #3
 800ecca:	f8cd 8010 	str.w	r8, [sp, #16]
 800ecce:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ecd2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ecd6:	fb04 0405 	mla	r4, r4, r5, r0
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ece0:	2300      	movs	r3, #0
 800ece2:	9405      	str	r4, [sp, #20]
 800ece4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ece8:	f88d 9020 	strb.w	r9, [sp, #32]
 800ecec:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800ecf0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ecf4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800ecf8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800ecfc:	6803      	ldr	r3, [r0, #0]
 800ecfe:	685b      	ldr	r3, [r3, #4]
 800ed00:	4798      	blx	r3
 800ed02:	b00b      	add	sp, #44	; 0x2c
 800ed04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed08:	0801fd28 	.word	0x0801fd28

0800ed0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed10:	461e      	mov	r6, r3
 800ed12:	4b0a      	ldr	r3, [pc, #40]	; (800ed3c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800ed14:	460f      	mov	r7, r1
 800ed16:	4690      	mov	r8, r2
 800ed18:	881d      	ldrh	r5, [r3, #0]
 800ed1a:	f7fa ff37 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800ed1e:	6803      	ldr	r3, [r0, #0]
 800ed20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed22:	4798      	blx	r3
 800ed24:	280b      	cmp	r0, #11
 800ed26:	bf96      	itet	ls
 800ed28:	4b05      	ldrls	r3, [pc, #20]	; (800ed40 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ed2a:	2400      	movhi	r4, #0
 800ed2c:	5c1c      	ldrbls	r4, [r3, r0]
 800ed2e:	fb08 7005 	mla	r0, r8, r5, r7
 800ed32:	10e4      	asrs	r4, r4, #3
 800ed34:	fb04 6000 	mla	r0, r4, r0, r6
 800ed38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed3c:	2401aa72 	.word	0x2401aa72
 800ed40:	0801fd28 	.word	0x0801fd28

0800ed44 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ed44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed46:	b08b      	sub	sp, #44	; 0x2c
 800ed48:	461f      	mov	r7, r3
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	4616      	mov	r6, r2
 800ed4e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ed52:	2500      	movs	r5, #0
 800ed54:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ed58:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ed5c:	9504      	str	r5, [sp, #16]
 800ed5e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ed62:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ed66:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ed6a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ed6e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ed72:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ed76:	f88d 3020 	strb.w	r3, [sp, #32]
 800ed7a:	f7ff fe9f 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ed7e:	463a      	mov	r2, r7
 800ed80:	4631      	mov	r1, r6
 800ed82:	4603      	mov	r3, r0
 800ed84:	4620      	mov	r0, r4
 800ed86:	f7ff ffc1 	bl	800ed0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ed8a:	4b0e      	ldr	r3, [pc, #56]	; (800edc4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800ed8c:	9005      	str	r0, [sp, #20]
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ed94:	f7fa fefa 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800ed98:	6803      	ldr	r3, [r0, #0]
 800ed9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9c:	4798      	blx	r3
 800ed9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eda0:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800eda4:	a901      	add	r1, sp, #4
 800eda6:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800edaa:	9304      	str	r3, [sp, #16]
 800edac:	6860      	ldr	r0, [r4, #4]
 800edae:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800edb2:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800edb6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800edba:	6803      	ldr	r3, [r0, #0]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	4798      	blx	r3
 800edc0:	b00b      	add	sp, #44	; 0x2c
 800edc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edc4:	2401aa72 	.word	0x2401aa72

0800edc8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800edc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edca:	b08d      	sub	sp, #52	; 0x34
 800edcc:	2501      	movs	r5, #1
 800edce:	4604      	mov	r4, r0
 800edd0:	466b      	mov	r3, sp
 800edd2:	9503      	str	r5, [sp, #12]
 800edd4:	e883 0006 	stmia.w	r3, {r1, r2}
 800edd8:	2300      	movs	r3, #0
 800edda:	f8bd 6000 	ldrh.w	r6, [sp]
 800edde:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ede2:	9306      	str	r3, [sp, #24]
 800ede4:	6803      	ldr	r3, [r0, #0]
 800ede6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede8:	4798      	blx	r3
 800edea:	463a      	mov	r2, r7
 800edec:	4631      	mov	r1, r6
 800edee:	4603      	mov	r3, r0
 800edf0:	4620      	mov	r0, r4
 800edf2:	f7ff ff8b 	bl	800ed0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800edf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800edf8:	9004      	str	r0, [sp, #16]
 800edfa:	9307      	str	r3, [sp, #28]
 800edfc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ee00:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ee04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ee08:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ee0c:	4b0e      	ldr	r3, [pc, #56]	; (800ee48 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800ee0e:	881b      	ldrh	r3, [r3, #0]
 800ee10:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ee14:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ee18:	f7fa feb8 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800ee1c:	6803      	ldr	r3, [r0, #0]
 800ee1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee20:	4798      	blx	r3
 800ee22:	23ff      	movs	r3, #255	; 0xff
 800ee24:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800ee28:	a903      	add	r1, sp, #12
 800ee2a:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ee2e:	6860      	ldr	r0, [r4, #4]
 800ee30:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800ee34:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ee38:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800ee3c:	6803      	ldr	r3, [r0, #0]
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	4798      	blx	r3
 800ee42:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ee44:	b00d      	add	sp, #52	; 0x34
 800ee46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee48:	2401aa72 	.word	0x2401aa72

0800ee4c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800ee4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee50:	b08c      	sub	sp, #48	; 0x30
 800ee52:	461e      	mov	r6, r3
 800ee54:	2300      	movs	r3, #0
 800ee56:	4604      	mov	r4, r0
 800ee58:	466d      	mov	r5, sp
 800ee5a:	9306      	str	r3, [sp, #24]
 800ee5c:	6803      	ldr	r3, [r0, #0]
 800ee5e:	e885 0006 	stmia.w	r5, {r1, r2}
 800ee62:	2501      	movs	r5, #1
 800ee64:	f8bd 7000 	ldrh.w	r7, [sp]
 800ee68:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800ee6c:	9503      	str	r5, [sp, #12]
 800ee6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee70:	4798      	blx	r3
 800ee72:	4642      	mov	r2, r8
 800ee74:	4639      	mov	r1, r7
 800ee76:	4603      	mov	r3, r0
 800ee78:	4620      	mov	r0, r4
 800ee7a:	f7ff ff47 	bl	800ed0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ee7e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ee82:	9004      	str	r0, [sp, #16]
 800ee84:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ee88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ee8c:	9607      	str	r6, [sp, #28]
 800ee8e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ee92:	4b10      	ldr	r3, [pc, #64]	; (800eed4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800ee94:	881b      	ldrh	r3, [r3, #0]
 800ee96:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ee9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ee9c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800eea0:	f7fa fe74 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800eea4:	6803      	ldr	r3, [r0, #0]
 800eea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eea8:	4798      	blx	r3
 800eeaa:	23ff      	movs	r3, #255	; 0xff
 800eeac:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800eeb0:	a903      	add	r1, sp, #12
 800eeb2:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800eeb6:	6860      	ldr	r0, [r4, #4]
 800eeb8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800eebc:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800eec0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800eec4:	6803      	ldr	r3, [r0, #0]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	4798      	blx	r3
 800eeca:	4630      	mov	r0, r6
 800eecc:	b00c      	add	sp, #48	; 0x30
 800eece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed2:	bf00      	nop
 800eed4:	2401aa72 	.word	0x2401aa72

0800eed8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800eed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeda:	b085      	sub	sp, #20
 800eedc:	4605      	mov	r5, r0
 800eede:	ac02      	add	r4, sp, #8
 800eee0:	e884 0006 	stmia.w	r4, {r1, r2}
 800eee4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800eee8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800eeec:	f7ff fde6 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eef0:	4631      	mov	r1, r6
 800eef2:	4603      	mov	r3, r0
 800eef4:	463a      	mov	r2, r7
 800eef6:	4628      	mov	r0, r5
 800eef8:	f7ff ff08 	bl	800ed0c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eefc:	4a05      	ldr	r2, [pc, #20]	; (800ef14 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800eefe:	682b      	ldr	r3, [r5, #0]
 800ef00:	8812      	ldrh	r2, [r2, #0]
 800ef02:	9200      	str	r2, [sp, #0]
 800ef04:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800ef06:	4603      	mov	r3, r0
 800ef08:	4628      	mov	r0, r5
 800ef0a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800ef0e:	47b0      	blx	r6
 800ef10:	b005      	add	sp, #20
 800ef12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef14:	2401aa72 	.word	0x2401aa72

0800ef18 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800ef18:	b570      	push	{r4, r5, r6, lr}
 800ef1a:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 800ef1e:	4604      	mov	r4, r0
 800ef20:	b19b      	cbz	r3, 800ef4a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800ef22:	2002      	movs	r0, #2
 800ef24:	f7fd f8da 	bl	800c0dc <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	4620      	mov	r0, r4
 800ef2c:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800ef30:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 800ef34:	6823      	ldr	r3, [r4, #0]
 800ef36:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800ef3a:	f7ff fdbf 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ef3e:	4601      	mov	r1, r0
 800ef40:	4620      	mov	r0, r4
 800ef42:	462b      	mov	r3, r5
 800ef44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef48:	4718      	bx	r3
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}

0800ef4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 800ef52:	4604      	mov	r4, r0
 800ef54:	460d      	mov	r5, r1
 800ef56:	428b      	cmp	r3, r1
 800ef58:	d006      	beq.n	800ef68 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800ef5a:	6803      	ldr	r3, [r0, #0]
 800ef5c:	b929      	cbnz	r1, 800ef6a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800ef5e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ef62:	4798      	blx	r3
 800ef64:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ef6e:	e7f8      	b.n	800ef62 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800ef70 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ef70:	4b0d      	ldr	r3, [pc, #52]	; (800efa8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ef72:	b510      	push	{r4, lr}
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	4604      	mov	r4, r0
 800ef78:	b95b      	cbnz	r3, 800ef92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ef7a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	d007      	beq.n	800ef92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ef82:	6840      	ldr	r0, [r0, #4]
 800ef84:	f000 f90e 	bl	800f1a4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ef88:	b118      	cbz	r0, 800ef92 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ef8a:	6862      	ldr	r2, [r4, #4]
 800ef8c:	7a53      	ldrb	r3, [r2, #9]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d0fc      	beq.n	800ef8c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ef92:	f7fd fb47 	bl	800c624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ef96:	4620      	mov	r0, r4
 800ef98:	2100      	movs	r1, #0
 800ef9a:	f7ff ffd7 	bl	800ef4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f7ff fd8c 	bl	800eabc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800efa4:	bd10      	pop	{r4, pc}
 800efa6:	bf00      	nop
 800efa8:	2401aa76 	.word	0x2401aa76

0800efac <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800efac:	4770      	bx	lr

0800efae <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800efae:	2000      	movs	r0, #0
 800efb0:	4770      	bx	lr

0800efb2 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800efb2:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800efb6:	1a13      	subs	r3, r2, r0
 800efb8:	4258      	negs	r0, r3
 800efba:	4158      	adcs	r0, r3
 800efbc:	4770      	bx	lr

0800efbe <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800efbe:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800efc2:	1a9b      	subs	r3, r3, r2
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bfdc      	itt	le
 800efc8:	6882      	ldrle	r2, [r0, #8]
 800efca:	189b      	addle	r3, r3, r2
 800efcc:	2b01      	cmp	r3, #1
 800efce:	bfcc      	ite	gt
 800efd0:	2000      	movgt	r0, #0
 800efd2:	2001      	movle	r0, #1
 800efd4:	4770      	bx	lr

0800efd6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800efd6:	6902      	ldr	r2, [r0, #16]
 800efd8:	6843      	ldr	r3, [r0, #4]
 800efda:	2024      	movs	r0, #36	; 0x24
 800efdc:	fb00 3002 	mla	r0, r0, r2, r3
 800efe0:	4770      	bx	lr

0800efe2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800efe2:	6803      	ldr	r3, [r0, #0]
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	4718      	bx	r3

0800efe8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800efe8:	2301      	movs	r3, #1
 800efea:	b570      	push	{r4, r5, r6, lr}
 800efec:	7203      	strb	r3, [r0, #8]
 800efee:	4604      	mov	r4, r0
 800eff0:	6840      	ldr	r0, [r0, #4]
 800eff2:	6803      	ldr	r3, [r0, #0]
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	4798      	blx	r3
 800eff8:	6803      	ldr	r3, [r0, #0]
 800effa:	4605      	mov	r5, r0
 800effc:	2b40      	cmp	r3, #64	; 0x40
 800effe:	d00c      	beq.n	800f01a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f000:	d810      	bhi.n	800f024 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800f002:	2b04      	cmp	r3, #4
 800f004:	d01d      	beq.n	800f042 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800f006:	d804      	bhi.n	800f012 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d006      	beq.n	800f01a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f00c:	2b02      	cmp	r3, #2
 800f00e:	d02c      	beq.n	800f06a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800f010:	bd70      	pop	{r4, r5, r6, pc}
 800f012:	2b08      	cmp	r3, #8
 800f014:	d01d      	beq.n	800f052 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800f016:	2b20      	cmp	r3, #32
 800f018:	d1fa      	bne.n	800f010 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800f01a:	6823      	ldr	r3, [r4, #0]
 800f01c:	4620      	mov	r0, r4
 800f01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f020:	4798      	blx	r3
 800f022:	e013      	b.n	800f04c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800f024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f028:	d0f7      	beq.n	800f01a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f02a:	d804      	bhi.n	800f036 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800f02c:	2b80      	cmp	r3, #128	; 0x80
 800f02e:	d0f4      	beq.n	800f01a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f034:	e7f0      	b.n	800f018 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800f036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f03a:	d0ee      	beq.n	800f01a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800f03c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f040:	e7e5      	b.n	800f00e <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	7f01      	ldrb	r1, [r0, #28]
 800f046:	4620      	mov	r0, r4
 800f048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f04a:	4798      	blx	r3
 800f04c:	6823      	ldr	r3, [r4, #0]
 800f04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f050:	e006      	b.n	800f060 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	7f01      	ldrb	r1, [r0, #28]
 800f056:	4620      	mov	r0, r4
 800f058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f05a:	4798      	blx	r3
 800f05c:	6823      	ldr	r3, [r4, #0]
 800f05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f060:	4629      	mov	r1, r5
 800f062:	4620      	mov	r0, r4
 800f064:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f068:	4718      	bx	r3
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	4620      	mov	r0, r4
 800f06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f070:	4798      	blx	r3
 800f072:	e7f3      	b.n	800f05c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800f074 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800f074:	4770      	bx	lr

0800f076 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800f076:	4770      	bx	lr

0800f078 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800f078:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800f07c:	b510      	push	{r4, lr}
 800f07e:	1ad2      	subs	r2, r2, r3
 800f080:	2a00      	cmp	r2, #0
 800f082:	bfdc      	itt	le
 800f084:	6884      	ldrle	r4, [r0, #8]
 800f086:	1912      	addle	r2, r2, r4
 800f088:	2a01      	cmp	r2, #1
 800f08a:	dd16      	ble.n	800f0ba <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800f08c:	6842      	ldr	r2, [r0, #4]
 800f08e:	2424      	movs	r4, #36	; 0x24
 800f090:	fb04 2303 	mla	r3, r4, r3, r2
 800f094:	f101 0220 	add.w	r2, r1, #32
 800f098:	f851 4b04 	ldr.w	r4, [r1], #4
 800f09c:	4291      	cmp	r1, r2
 800f09e:	f843 4b04 	str.w	r4, [r3], #4
 800f0a2:	d1f9      	bne.n	800f098 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800f0a4:	780a      	ldrb	r2, [r1, #0]
 800f0a6:	701a      	strb	r2, [r3, #0]
 800f0a8:	68c3      	ldr	r3, [r0, #12]
 800f0aa:	6882      	ldr	r2, [r0, #8]
 800f0ac:	f3bf 8f5b 	dmb	ish
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	bfd8      	it	le
 800f0b6:	1a9b      	suble	r3, r3, r2
 800f0b8:	60c3      	str	r3, [r0, #12]
 800f0ba:	bd10      	pop	{r4, pc}

0800f0bc <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800f0bc:	6903      	ldr	r3, [r0, #16]
 800f0be:	6882      	ldr	r2, [r0, #8]
 800f0c0:	f3bf 8f5b 	dmb	ish
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	bfd8      	it	le
 800f0ca:	1a9b      	suble	r3, r3, r2
 800f0cc:	6103      	str	r3, [r0, #16]
 800f0ce:	4770      	bx	lr

0800f0d0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800f0d0:	b570      	push	{r4, r5, r6, lr}
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	460e      	mov	r6, r1
 800f0d6:	6860      	ldr	r0, [r4, #4]
 800f0d8:	6803      	ldr	r3, [r0, #0]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	4798      	blx	r3
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d1f9      	bne.n	800f0d6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800f0e2:	4d0d      	ldr	r5, [pc, #52]	; (800f118 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800f0e4:	6828      	ldr	r0, [r5, #0]
 800f0e6:	6803      	ldr	r3, [r0, #0]
 800f0e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0ea:	4798      	blx	r3
 800f0ec:	f7fd fab4 	bl	800c658 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800f0f0:	6828      	ldr	r0, [r5, #0]
 800f0f2:	2101      	movs	r1, #1
 800f0f4:	f7ff ff2a 	bl	800ef4c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800f0f8:	6860      	ldr	r0, [r4, #4]
 800f0fa:	4631      	mov	r1, r6
 800f0fc:	6803      	ldr	r3, [r0, #0]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	4798      	blx	r3
 800f102:	6823      	ldr	r3, [r4, #0]
 800f104:	4620      	mov	r0, r4
 800f106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f108:	4798      	blx	r3
 800f10a:	6828      	ldr	r0, [r5, #0]
 800f10c:	6803      	ldr	r3, [r0, #0]
 800f10e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f112:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f114:	4718      	bx	r3
 800f116:	bf00      	nop
 800f118:	2401aa78 	.word	0x2401aa78

0800f11c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800f11c:	b508      	push	{r3, lr}
 800f11e:	f7fd fa81 	bl	800c624 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800f122:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f126:	f7fd ba8b 	b.w	800c640 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800f12a <_ZN8touchgfx13DMA_Interface5startEv>:
 800f12a:	b510      	push	{r4, lr}
 800f12c:	4604      	mov	r4, r0
 800f12e:	6840      	ldr	r0, [r0, #4]
 800f130:	6803      	ldr	r3, [r0, #0]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	4798      	blx	r3
 800f136:	b948      	cbnz	r0, 800f14c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f138:	7a63      	ldrb	r3, [r4, #9]
 800f13a:	b13b      	cbz	r3, 800f14c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f13c:	7a23      	ldrb	r3, [r4, #8]
 800f13e:	b92b      	cbnz	r3, 800f14c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f140:	6823      	ldr	r3, [r4, #0]
 800f142:	4620      	mov	r0, r4
 800f144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f14a:	4718      	bx	r3
 800f14c:	bd10      	pop	{r4, pc}

0800f14e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800f14e:	b570      	push	{r4, r5, r6, lr}
 800f150:	4604      	mov	r4, r0
 800f152:	6840      	ldr	r0, [r0, #4]
 800f154:	6803      	ldr	r3, [r0, #0]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4798      	blx	r3
 800f15a:	4605      	mov	r5, r0
 800f15c:	b930      	cbnz	r0, 800f16c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f15e:	7a23      	ldrb	r3, [r4, #8]
 800f160:	b123      	cbz	r3, 800f16c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f162:	6860      	ldr	r0, [r4, #4]
 800f164:	6803      	ldr	r3, [r0, #0]
 800f166:	695b      	ldr	r3, [r3, #20]
 800f168:	4798      	blx	r3
 800f16a:	7225      	strb	r5, [r4, #8]
 800f16c:	6860      	ldr	r0, [r4, #4]
 800f16e:	6803      	ldr	r3, [r0, #0]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	4798      	blx	r3
 800f174:	b928      	cbnz	r0, 800f182 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800f176:	6823      	ldr	r3, [r4, #0]
 800f178:	4620      	mov	r0, r4
 800f17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f180:	4718      	bx	r3
 800f182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f186:	f7fd ba73 	b.w	800c670 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0800f18c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800f18c:	b510      	push	{r4, lr}
 800f18e:	6082      	str	r2, [r0, #8]
 800f190:	2200      	movs	r2, #0
 800f192:	4c03      	ldr	r4, [pc, #12]	; (800f1a0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800f194:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800f198:	e9c0 4100 	strd	r4, r1, [r0]
 800f19c:	bd10      	pop	{r4, pc}
 800f19e:	bf00      	nop
 800f1a0:	0801fe64 	.word	0x0801fe64

0800f1a4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800f1a4:	6840      	ldr	r0, [r0, #4]
 800f1a6:	6803      	ldr	r3, [r0, #0]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4718      	bx	r3

0800f1ac <_ZN8touchgfx13AnimatedImage12setBitmapEndERKNS_6BitmapE>:
 800f1ac:	880b      	ldrh	r3, [r1, #0]
 800f1ae:	8643      	strh	r3, [r0, #50]	; 0x32
 800f1b0:	4770      	bx	lr

0800f1b2 <_ZN8touchgfx13AnimatedImage9setBitmapERKNS_6BitmapE>:
 800f1b2:	880b      	ldrh	r3, [r1, #0]
 800f1b4:	8603      	strh	r3, [r0, #48]	; 0x30
 800f1b6:	f000 bd84 	b.w	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>

0800f1ba <_ZN8touchgfx13AnimatedImage13stopAnimationEv>:
 800f1ba:	b513      	push	{r0, r1, r4, lr}
 800f1bc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	b143      	cbz	r3, 800f1d6 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x1c>
 800f1c4:	f002 fab0 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	3004      	adds	r0, #4
 800f1cc:	f002 fad1 	bl	8011772 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800f1d6:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800f1da:	b163      	cbz	r3, 800f1f6 <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x3c>
 800f1dc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f1de:	a901      	add	r1, sp, #4
 800f1e0:	4620      	mov	r0, r4
 800f1e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f1e6:	f000 fd6c 	bl	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	4798      	blx	r3
 800f1f2:	b002      	add	sp, #8
 800f1f4:	bd10      	pop	{r4, pc}
 800f1f6:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f1f8:	e7f1      	b.n	800f1de <_ZN8touchgfx13AnimatedImage13stopAnimationEv+0x24>

0800f1fa <_ZN8touchgfx13AnimatedImage14startAnimationEbbb>:
 800f1fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
 800f200:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 800f202:	4604      	mov	r4, r0
 800f204:	42bd      	cmp	r5, r7
 800f206:	d01a      	beq.n	800f23e <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 800f208:	8e46      	ldrh	r6, [r0, #50]	; 0x32
 800f20a:	42be      	cmp	r6, r7
 800f20c:	d017      	beq.n	800f23e <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x44>
 800f20e:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 800f212:	f880 3037 	strb.w	r3, [r0, #55]	; 0x37
 800f216:	b1a1      	cbz	r1, 800f242 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x48>
 800f218:	b142      	cbz	r2, 800f22c <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 800f21a:	a902      	add	r1, sp, #8
 800f21c:	f821 6d04 	strh.w	r6, [r1, #-4]!
 800f220:	f000 fd4f 	bl	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f224:	6823      	ldr	r3, [r4, #0]
 800f226:	4620      	mov	r0, r4
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	4798      	blx	r3
 800f22c:	f002 fa7c 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800f230:	4621      	mov	r1, r4
 800f232:	3004      	adds	r0, #4
 800f234:	f002 fb46 	bl	80118c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800f238:	2301      	movs	r3, #1
 800f23a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800f23e:	b003      	add	sp, #12
 800f240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f242:	2a00      	cmp	r2, #0
 800f244:	d0f2      	beq.n	800f22c <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x32>
 800f246:	a902      	add	r1, sp, #8
 800f248:	f821 5d04 	strh.w	r5, [r1, #-4]!
 800f24c:	e7e8      	b.n	800f220 <_ZN8touchgfx13AnimatedImage14startAnimationEbbb+0x26>

0800f24e <_ZN8touchgfx13AnimatedImage14pauseAnimationEv>:
 800f24e:	b510      	push	{r4, lr}
 800f250:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f254:	4604      	mov	r4, r0
 800f256:	b14b      	cbz	r3, 800f26c <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x1e>
 800f258:	f002 fa66 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800f25c:	4621      	mov	r1, r4
 800f25e:	3004      	adds	r0, #4
 800f260:	f002 fa87 	bl	8011772 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f264:	2300      	movs	r3, #0
 800f266:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800f26a:	bd10      	pop	{r4, pc}
 800f26c:	f002 fa5c 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800f270:	4621      	mov	r1, r4
 800f272:	3004      	adds	r0, #4
 800f274:	f002 fb26 	bl	80118c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800f278:	2301      	movs	r3, #1
 800f27a:	e7f4      	b.n	800f266 <_ZN8touchgfx13AnimatedImage14pauseAnimationEv+0x18>

0800f27c <_ZN8touchgfx13AnimatedImage15handleTickEventEv>:
 800f27c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f27e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800f282:	4604      	mov	r4, r0
 800f284:	2b00      	cmp	r3, #0
 800f286:	d042      	beq.n	800f30e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 800f288:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800f28c:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800f290:	3301      	adds	r3, #1
 800f292:	b2db      	uxtb	r3, r3
 800f294:	429a      	cmp	r2, r3
 800f296:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 800f29a:	d138      	bne.n	800f30e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 800f29c:	2300      	movs	r3, #0
 800f29e:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800f2a0:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 800f2a4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 800f2a8:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800f2aa:	4299      	cmp	r1, r3
 800f2ac:	d100      	bne.n	800f2b0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x34>
 800f2ae:	b122      	cbz	r2, 800f2ba <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x3e>
 800f2b0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800f2b2:	4299      	cmp	r1, r3
 800f2b4:	d12f      	bne.n	800f316 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9a>
 800f2b6:	2a00      	cmp	r2, #0
 800f2b8:	d034      	beq.n	800f324 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 800f2ba:	f894 5037 	ldrb.w	r5, [r4, #55]	; 0x37
 800f2be:	b93d      	cbnz	r5, 800f2d0 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x54>
 800f2c0:	f002 fa32 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	3004      	adds	r0, #4
 800f2c8:	f002 fa53 	bl	8011772 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800f2cc:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 800f2d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f2d2:	b140      	cbz	r0, 800f2e6 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 800f2d4:	6803      	ldr	r3, [r0, #0]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	4798      	blx	r3
 800f2da:	b120      	cbz	r0, 800f2e6 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x6a>
 800f2dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f2de:	4621      	mov	r1, r4
 800f2e0:	6803      	ldr	r3, [r0, #0]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	4798      	blx	r3
 800f2e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f2ea:	b183      	cbz	r3, 800f30e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 800f2ec:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800f2f0:	b16b      	cbz	r3, 800f30e <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x92>
 800f2f2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800f2f6:	b163      	cbz	r3, 800f312 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x96>
 800f2f8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800f2fa:	a901      	add	r1, sp, #4
 800f2fc:	f8ad 3004 	strh.w	r3, [sp, #4]
 800f300:	4620      	mov	r0, r4
 800f302:	f000 fcde 	bl	800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800f306:	6823      	ldr	r3, [r4, #0]
 800f308:	4620      	mov	r0, r4
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	4798      	blx	r3
 800f30e:	b003      	add	sp, #12
 800f310:	bd30      	pop	{r4, r5, pc}
 800f312:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800f314:	e7f1      	b.n	800f2fa <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x7e>
 800f316:	b12a      	cbz	r2, 800f324 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0xa8>
 800f318:	3b01      	subs	r3, #1
 800f31a:	b29b      	uxth	r3, r3
 800f31c:	a902      	add	r1, sp, #8
 800f31e:	f821 3d04 	strh.w	r3, [r1, #-4]!
 800f322:	e7ed      	b.n	800f300 <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x84>
 800f324:	3301      	adds	r3, #1
 800f326:	e7f8      	b.n	800f31a <_ZN8touchgfx13AnimatedImage15handleTickEventEv+0x9e>

0800f328 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800f328:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800f32c:	b12a      	cbz	r2, 800f33a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800f32e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800f332:	b112      	cbz	r2, 800f33a <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800f334:	6803      	ldr	r3, [r0, #0]
 800f336:	695b      	ldr	r3, [r3, #20]
 800f338:	4718      	bx	r3
 800f33a:	4770      	bx	lr

0800f33c <_ZN8touchgfx13AnimatedImage10setBitmapsEtt>:
 800f33c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f33e:	ac02      	add	r4, sp, #8
 800f340:	6803      	ldr	r3, [r0, #0]
 800f342:	4605      	mov	r5, r0
 800f344:	4616      	mov	r6, r2
 800f346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f348:	f824 1d04 	strh.w	r1, [r4, #-4]!
 800f34c:	4621      	mov	r1, r4
 800f34e:	4798      	blx	r3
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	4621      	mov	r1, r4
 800f354:	4628      	mov	r0, r5
 800f356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f358:	f8ad 6004 	strh.w	r6, [sp, #4]
 800f35c:	4798      	blx	r3
 800f35e:	b002      	add	sp, #8
 800f360:	bd70      	pop	{r4, r5, r6, pc}

0800f362 <_ZN8touchgfx13AnimatedImage22setUpdateTicksIntervalEh>:
 800f362:	2300      	movs	r3, #0
 800f364:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
 800f368:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
 800f36c:	4770      	bx	lr

0800f36e <_ZN8touchgfx8TextArea8setWidthEs>:
 800f36e:	b530      	push	{r4, r5, lr}
 800f370:	b085      	sub	sp, #20
 800f372:	6803      	ldr	r3, [r0, #0]
 800f374:	4604      	mov	r4, r0
 800f376:	8101      	strh	r1, [r0, #8]
 800f378:	466d      	mov	r5, sp
 800f37a:	4601      	mov	r1, r0
 800f37c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f380:	343c      	adds	r4, #60	; 0x3c
 800f382:	4628      	mov	r0, r5
 800f384:	4798      	blx	r3
 800f386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f38a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f38e:	b005      	add	sp, #20
 800f390:	bd30      	pop	{r4, r5, pc}

0800f392 <_ZN8touchgfx8TextArea9setHeightEs>:
 800f392:	b530      	push	{r4, r5, lr}
 800f394:	b085      	sub	sp, #20
 800f396:	6803      	ldr	r3, [r0, #0]
 800f398:	4604      	mov	r4, r0
 800f39a:	8141      	strh	r1, [r0, #10]
 800f39c:	466d      	mov	r5, sp
 800f39e:	4601      	mov	r1, r0
 800f3a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3a4:	343c      	adds	r4, #60	; 0x3c
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	4798      	blx	r3
 800f3aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f3ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f3b2:	b005      	add	sp, #20
 800f3b4:	bd30      	pop	{r4, r5, pc}

0800f3b6 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	8002      	strh	r2, [r0, #0]
 800f3ba:	8042      	strh	r2, [r0, #2]
 800f3bc:	8082      	strh	r2, [r0, #4]
 800f3be:	80c2      	strh	r2, [r0, #6]
 800f3c0:	4770      	bx	lr

0800f3c2 <_ZN8touchgfx8TextArea8setAlphaEh>:
 800f3c2:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 800f3c6:	4770      	bx	lr

0800f3c8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800f3c8:	b570      	push	{r4, r5, r6, lr}
 800f3ca:	6803      	ldr	r3, [r0, #0]
 800f3cc:	4604      	mov	r4, r0
 800f3ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800f3d4:	4b08      	ldr	r3, [pc, #32]	; (800f3f8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800f3dc:	4b07      	ldr	r3, [pc, #28]	; (800f3fc <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f3e4:	6803      	ldr	r3, [r0, #0]
 800f3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e8:	4798      	blx	r3
 800f3ea:	1a29      	subs	r1, r5, r0
 800f3ec:	4633      	mov	r3, r6
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	b209      	sxth	r1, r1
 800f3f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f3f6:	4718      	bx	r3
 800f3f8:	2401aac8 	.word	0x2401aac8
 800f3fc:	2401aad0 	.word	0x2401aad0

0800f400 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800f400:	b570      	push	{r4, r5, r6, lr}
 800f402:	6803      	ldr	r3, [r0, #0]
 800f404:	4604      	mov	r4, r0
 800f406:	4615      	mov	r5, r2
 800f408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f40a:	4798      	blx	r3
 800f40c:	6823      	ldr	r3, [r4, #0]
 800f40e:	4629      	mov	r1, r5
 800f410:	4620      	mov	r0, r4
 800f412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f418:	4718      	bx	r3

0800f41a <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800f41a:	2000      	movs	r0, #0
 800f41c:	4770      	bx	lr

0800f41e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 800f41e:	2000      	movs	r0, #0
 800f420:	4770      	bx	lr
	...

0800f424 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800f424:	4b07      	ldr	r3, [pc, #28]	; (800f444 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800f426:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f428:	881b      	ldrh	r3, [r3, #0]
 800f42a:	4293      	cmp	r3, r2
 800f42c:	bf81      	itttt	hi
 800f42e:	4b06      	ldrhi	r3, [pc, #24]	; (800f448 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800f430:	681b      	ldrhi	r3, [r3, #0]
 800f432:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800f436:	7858      	ldrbhi	r0, [r3, #1]
 800f438:	bf8c      	ite	hi
 800f43a:	f000 0003 	andhi.w	r0, r0, #3
 800f43e:	2000      	movls	r0, #0
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	2401aacc 	.word	0x2401aacc
 800f448:	2401aac8 	.word	0x2401aac8

0800f44c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800f44c:	4b11      	ldr	r3, [pc, #68]	; (800f494 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800f44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f452:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f454:	4604      	mov	r4, r0
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	428b      	cmp	r3, r1
 800f45a:	d918      	bls.n	800f48e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800f45c:	6803      	ldr	r3, [r0, #0]
 800f45e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800f460:	4b0d      	ldr	r3, [pc, #52]	; (800f498 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800f462:	6818      	ldr	r0, [r3, #0]
 800f464:	f7fc fb80 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800f468:	6823      	ldr	r3, [r4, #0]
 800f46a:	4606      	mov	r6, r0
 800f46c:	4620      	mov	r0, r4
 800f46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f470:	4798      	blx	r3
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	4607      	mov	r7, r0
 800f476:	4620      	mov	r0, r4
 800f478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f47c:	4798      	blx	r3
 800f47e:	463a      	mov	r2, r7
 800f480:	4603      	mov	r3, r0
 800f482:	4631      	mov	r1, r6
 800f484:	4620      	mov	r0, r4
 800f486:	46ac      	mov	ip, r5
 800f488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f48c:	4760      	bx	ip
 800f48e:	2000      	movs	r0, #0
 800f490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f494:	2401aacc 	.word	0x2401aacc
 800f498:	2401aad4 	.word	0x2401aad4

0800f49c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800f49c:	4b18      	ldr	r3, [pc, #96]	; (800f500 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800f49e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4a2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	428b      	cmp	r3, r1
 800f4aa:	d926      	bls.n	800f4fa <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800f4ac:	4b15      	ldr	r3, [pc, #84]	; (800f504 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800f4b4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800f4b8:	4b13      	ldr	r3, [pc, #76]	; (800f508 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800f4ba:	7855      	ldrb	r5, [r2, #1]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800f4c2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f4c6:	6833      	ldr	r3, [r6, #0]
 800f4c8:	69df      	ldr	r7, [r3, #28]
 800f4ca:	4b10      	ldr	r3, [pc, #64]	; (800f50c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800f4cc:	6818      	ldr	r0, [r3, #0]
 800f4ce:	f7fc fb4b 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800f4d2:	6823      	ldr	r3, [r4, #0]
 800f4d4:	4680      	mov	r8, r0
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4da:	4798      	blx	r3
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	4681      	mov	r9, r0
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f4e6:	4798      	blx	r3
 800f4e8:	464b      	mov	r3, r9
 800f4ea:	9000      	str	r0, [sp, #0]
 800f4ec:	4642      	mov	r2, r8
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	4630      	mov	r0, r6
 800f4f2:	47b8      	blx	r7
 800f4f4:	b003      	add	sp, #12
 800f4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4fa:	2000      	movs	r0, #0
 800f4fc:	e7fa      	b.n	800f4f4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800f4fe:	bf00      	nop
 800f500:	2401aacc 	.word	0x2401aacc
 800f504:	2401aac8 	.word	0x2401aac8
 800f508:	2401aad0 	.word	0x2401aad0
 800f50c:	2401aad4 	.word	0x2401aad4

0800f510 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800f510:	b40e      	push	{r1, r2, r3}
 800f512:	4b30      	ldr	r3, [pc, #192]	; (800f5d4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800f514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f518:	881a      	ldrh	r2, [r3, #0]
 800f51a:	b09d      	sub	sp, #116	; 0x74
 800f51c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800f51e:	4604      	mov	r4, r0
 800f520:	429a      	cmp	r2, r3
 800f522:	d954      	bls.n	800f5ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800f524:	aa26      	add	r2, sp, #152	; 0x98
 800f526:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800f5d8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800f52a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f5dc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800f52e:	9202      	str	r2, [sp, #8]
 800f530:	f8d9 2000 	ldr.w	r2, [r9]
 800f534:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f538:	f8d8 3000 	ldr.w	r3, [r8]
 800f53c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	4628      	mov	r0, r5
 800f544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f546:	4798      	blx	r3
 800f548:	4606      	mov	r6, r0
 800f54a:	b207      	sxth	r7, r0
 800f54c:	a803      	add	r0, sp, #12
 800f54e:	f003 fdff 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 800f552:	682b      	ldr	r3, [r5, #0]
 800f554:	4628      	mov	r0, r5
 800f556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f558:	4798      	blx	r3
 800f55a:	682b      	ldr	r3, [r5, #0]
 800f55c:	4682      	mov	sl, r0
 800f55e:	4628      	mov	r0, r5
 800f560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f562:	4798      	blx	r3
 800f564:	4653      	mov	r3, sl
 800f566:	9000      	str	r0, [sp, #0]
 800f568:	a803      	add	r0, sp, #12
 800f56a:	9a02      	ldr	r2, [sp, #8]
 800f56c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f56e:	f003 fe4a 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f572:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f574:	f8d9 3000 	ldr.w	r3, [r9]
 800f578:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800f57c:	8925      	ldrh	r5, [r4, #8]
 800f57e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800f582:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800f586:	eba5 050c 	sub.w	r5, r5, ip
 800f58a:	784a      	ldrb	r2, [r1, #1]
 800f58c:	f8d8 3000 	ldr.w	r3, [r8]
 800f590:	b22d      	sxth	r5, r5
 800f592:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800f596:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800f59a:	9500      	str	r5, [sp, #0]
 800f59c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f5a0:	a803      	add	r0, sp, #12
 800f5a2:	f001 fc39 	bl	8010e18 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f5a6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800f5aa:	b203      	sxth	r3, r0
 800f5ac:	18b9      	adds	r1, r7, r2
 800f5ae:	2900      	cmp	r1, #0
 800f5b0:	dd0b      	ble.n	800f5ca <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	fb13 f302 	smulbb	r3, r3, r2
 800f5b8:	fb16 3300 	smlabb	r3, r6, r0, r3
 800f5bc:	b21f      	sxth	r7, r3
 800f5be:	4638      	mov	r0, r7
 800f5c0:	b01d      	add	sp, #116	; 0x74
 800f5c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c6:	b003      	add	sp, #12
 800f5c8:	4770      	bx	lr
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dcf7      	bgt.n	800f5be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f5ce:	2700      	movs	r7, #0
 800f5d0:	e7f5      	b.n	800f5be <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f5d2:	bf00      	nop
 800f5d4:	2401aacc 	.word	0x2401aacc
 800f5d8:	2401aac8 	.word	0x2401aac8
 800f5dc:	2401aad0 	.word	0x2401aad0

0800f5e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800f5e0:	4bbd      	ldr	r3, [pc, #756]	; (800f8d8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800f5e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e6:	460c      	mov	r4, r1
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800f5ec:	b0a9      	sub	sp, #164	; 0xa4
 800f5ee:	4680      	mov	r8, r0
 800f5f0:	428b      	cmp	r3, r1
 800f5f2:	d809      	bhi.n	800f608 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fa:	6083      	str	r3, [r0, #8]
 800f5fc:	e9c0 3200 	strd	r3, r2, [r0]
 800f600:	4640      	mov	r0, r8
 800f602:	b029      	add	sp, #164	; 0xa4
 800f604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f608:	4eb4      	ldr	r6, [pc, #720]	; (800f8dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800f60a:	6833      	ldr	r3, [r6, #0]
 800f60c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800f610:	4bb3      	ldr	r3, [pc, #716]	; (800f8e0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f618:	4bb2      	ldr	r3, [pc, #712]	; (800f8e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800f61a:	6818      	ldr	r0, [r3, #0]
 800f61c:	f7fc faa4 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800f620:	682b      	ldr	r3, [r5, #0]
 800f622:	4681      	mov	r9, r0
 800f624:	4628      	mov	r0, r5
 800f626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f628:	4798      	blx	r3
 800f62a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 800f62c:	b203      	sxth	r3, r0
 800f62e:	4682      	mov	sl, r0
 800f630:	4407      	add	r7, r0
 800f632:	a80f      	add	r0, sp, #60	; 0x3c
 800f634:	9304      	str	r3, [sp, #16]
 800f636:	b2bb      	uxth	r3, r7
 800f638:	9303      	str	r3, [sp, #12]
 800f63a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f63e:	2b00      	cmp	r3, #0
 800f640:	f040 80a5 	bne.w	800f78e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 800f644:	f003 fd84 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 800f648:	682b      	ldr	r3, [r5, #0]
 800f64a:	4628      	mov	r0, r5
 800f64c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f64e:	4798      	blx	r3
 800f650:	682b      	ldr	r3, [r5, #0]
 800f652:	4606      	mov	r6, r0
 800f654:	4628      	mov	r0, r5
 800f656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f658:	4798      	blx	r3
 800f65a:	6823      	ldr	r3, [r4, #0]
 800f65c:	4607      	mov	r7, r0
 800f65e:	4620      	mov	r0, r4
 800f660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f662:	4798      	blx	r3
 800f664:	6823      	ldr	r3, [r4, #0]
 800f666:	4683      	mov	fp, r0
 800f668:	4620      	mov	r0, r4
 800f66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f66e:	4798      	blx	r3
 800f670:	463b      	mov	r3, r7
 800f672:	4649      	mov	r1, r9
 800f674:	4632      	mov	r2, r6
 800f676:	2600      	movs	r6, #0
 800f678:	e9cd b000 	strd	fp, r0, [sp]
 800f67c:	a80f      	add	r0, sp, #60	; 0x3c
 800f67e:	4637      	mov	r7, r6
 800f680:	f003 fdd6 	bl	8013230 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800f684:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f688:	f8df b250 	ldr.w	fp, [pc, #592]	; 800f8dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800f68c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f690:	bf0c      	ite	eq
 800f692:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800f696:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800f69a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f69c:	4629      	mov	r1, r5
 800f69e:	f8db 3000 	ldr.w	r3, [fp]
 800f6a2:	a80f      	add	r0, sp, #60	; 0x3c
 800f6a4:	3701      	adds	r7, #1
 800f6a6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f6aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f6ae:	b2bf      	uxth	r7, r7
 800f6b0:	785b      	ldrb	r3, [r3, #1]
 800f6b2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f6b6:	f001 f8ca 	bl	801084e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800f6ba:	9b03      	ldr	r3, [sp, #12]
 800f6bc:	4286      	cmp	r6, r0
 800f6be:	eba9 0903 	sub.w	r9, r9, r3
 800f6c2:	bfb8      	it	lt
 800f6c4:	4606      	movlt	r6, r0
 800f6c6:	a80f      	add	r0, sp, #60	; 0x3c
 800f6c8:	fa0f f989 	sxth.w	r9, r9
 800f6cc:	b236      	sxth	r6, r6
 800f6ce:	f003 fd66 	bl	801319e <_ZN8touchgfx12TextProvider11endOfStringEv>
 800f6d2:	b918      	cbnz	r0, 800f6dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f6d4:	7a2b      	ldrb	r3, [r5, #8]
 800f6d6:	444b      	add	r3, r9
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	dcde      	bgt.n	800f69a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 800f6dc:	9b03      	ldr	r3, [sp, #12]
 800f6de:	4620      	mov	r0, r4
 800f6e0:	9a04      	ldr	r2, [sp, #16]
 800f6e2:	fb13 f707 	smulbb	r7, r3, r7
 800f6e6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f6e8:	f895 9009 	ldrb.w	r9, [r5, #9]
 800f6ec:	1aff      	subs	r7, r7, r3
 800f6ee:	b2bf      	uxth	r7, r7
 800f6f0:	b23b      	sxth	r3, r7
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	bfa8      	it	ge
 800f6f6:	4657      	movge	r7, sl
 800f6f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f6fc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f700:	6823      	ldr	r3, [r4, #0]
 800f702:	444f      	add	r7, r9
 800f704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f706:	bf08      	it	eq
 800f708:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800f70c:	fa1f f987 	uxth.w	r9, r7
 800f710:	bf18      	it	ne
 800f712:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800f716:	4798      	blx	r3
 800f718:	2801      	cmp	r0, #1
 800f71a:	fa0f f789 	sxth.w	r7, r9
 800f71e:	b2b3      	uxth	r3, r6
 800f720:	f000 80e2 	beq.w	800f8e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800f724:	2802      	cmp	r0, #2
 800f726:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 800f72a:	f000 80e3 	beq.w	800f8f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800f72e:	7aea      	ldrb	r2, [r5, #11]
 800f730:	b236      	sxth	r6, r6
 800f732:	7b2d      	ldrb	r5, [r5, #12]
 800f734:	1ab6      	subs	r6, r6, r2
 800f736:	442a      	add	r2, r5
 800f738:	fa1f fa86 	uxth.w	sl, r6
 800f73c:	4413      	add	r3, r2
 800f73e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800f742:	fa0f fb8a 	sxth.w	fp, sl
 800f746:	b29b      	uxth	r3, r3
 800f748:	2a02      	cmp	r2, #2
 800f74a:	b21e      	sxth	r6, r3
 800f74c:	f000 80d6 	beq.w	800f8fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800f750:	2a03      	cmp	r2, #3
 800f752:	f000 80de 	beq.w	800f912 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800f756:	2a01      	cmp	r2, #1
 800f758:	f040 80e6 	bne.w	800f928 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800f75c:	8925      	ldrh	r5, [r4, #8]
 800f75e:	4633      	mov	r3, r6
 800f760:	463e      	mov	r6, r7
 800f762:	eba5 0909 	sub.w	r9, r5, r9
 800f766:	461f      	mov	r7, r3
 800f768:	465d      	mov	r5, fp
 800f76a:	fa0f fb89 	sxth.w	fp, r9
 800f76e:	4b5d      	ldr	r3, [pc, #372]	; (800f8e4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800f770:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800f772:	6818      	ldr	r0, [r3, #0]
 800f774:	f7fc f9f8 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800f778:	f8a8 b000 	strh.w	fp, [r8]
 800f77c:	f8a8 5002 	strh.w	r5, [r8, #2]
 800f780:	f8a8 6004 	strh.w	r6, [r8, #4]
 800f784:	f8a8 7006 	strh.w	r7, [r8, #6]
 800f788:	f8c8 0008 	str.w	r0, [r8, #8]
 800f78c:	e738      	b.n	800f600 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800f78e:	f003 fcdf 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 800f792:	682b      	ldr	r3, [r5, #0]
 800f794:	4628      	mov	r0, r5
 800f796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f798:	4798      	blx	r3
 800f79a:	682b      	ldr	r3, [r5, #0]
 800f79c:	4607      	mov	r7, r0
 800f79e:	4628      	mov	r0, r5
 800f7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f7a2:	4798      	blx	r3
 800f7a4:	6823      	ldr	r3, [r4, #0]
 800f7a6:	4683      	mov	fp, r0
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f7ac:	4798      	blx	r3
 800f7ae:	6822      	ldr	r2, [r4, #0]
 800f7b0:	9005      	str	r0, [sp, #20]
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f7b8:	4790      	blx	r2
 800f7ba:	9b05      	ldr	r3, [sp, #20]
 800f7bc:	463a      	mov	r2, r7
 800f7be:	4649      	mov	r1, r9
 800f7c0:	9001      	str	r0, [sp, #4]
 800f7c2:	a80f      	add	r0, sp, #60	; 0x3c
 800f7c4:	9300      	str	r3, [sp, #0]
 800f7c6:	465b      	mov	r3, fp
 800f7c8:	f003 fd32 	bl	8013230 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800f7cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f7d0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800f7d4:	af0f      	add	r7, sp, #60	; 0x3c
 800f7d6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f7da:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f7de:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800f7e0:	bf0a      	itet	eq
 800f7e2:	464a      	moveq	r2, r9
 800f7e4:	461a      	movne	r2, r3
 800f7e6:	4699      	moveq	r9, r3
 800f7e8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800f7ec:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800f7f0:	1ad2      	subs	r2, r2, r3
 800f7f2:	6833      	ldr	r3, [r6, #0]
 800f7f4:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 800f7f8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f7fc:	7859      	ldrb	r1, [r3, #1]
 800f7fe:	2300      	movs	r3, #0
 800f800:	9707      	str	r7, [sp, #28]
 800f802:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800f806:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f80a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800f80e:	f88d 1020 	strb.w	r1, [sp, #32]
 800f812:	9509      	str	r5, [sp, #36]	; 0x24
 800f814:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800f818:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 800f81c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 800f820:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f824:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800f828:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800f82c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f830:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800f834:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800f838:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f83c:	b350      	cbz	r0, 800f894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f83e:	682b      	ldr	r3, [r5, #0]
 800f840:	4628      	mov	r0, r5
 800f842:	695b      	ldr	r3, [r3, #20]
 800f844:	4798      	blx	r3
 800f846:	4607      	mov	r7, r0
 800f848:	b320      	cbz	r0, 800f894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f84c:	4639      	mov	r1, r7
 800f84e:	6803      	ldr	r3, [r0, #0]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	4798      	blx	r3
 800f854:	4606      	mov	r6, r0
 800f856:	b1e8      	cbz	r0, 800f894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f858:	7b43      	ldrb	r3, [r0, #13]
 800f85a:	7a82      	ldrb	r2, [r0, #10]
 800f85c:	005b      	lsls	r3, r3, #1
 800f85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f862:	4313      	orrs	r3, r2
 800f864:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800f868:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 800f86c:	2b06      	cmp	r3, #6
 800f86e:	d111      	bne.n	800f894 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f870:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f872:	4632      	mov	r2, r6
 800f874:	4639      	mov	r1, r7
 800f876:	6803      	ldr	r3, [r0, #0]
 800f878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f87a:	4798      	blx	r3
 800f87c:	7b73      	ldrb	r3, [r6, #13]
 800f87e:	005b      	lsls	r3, r3, #1
 800f880:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f884:	7ab3      	ldrb	r3, [r6, #10]
 800f886:	4313      	orrs	r3, r2
 800f888:	4418      	add	r0, r3
 800f88a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f88e:	4418      	add	r0, r3
 800f890:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800f894:	2600      	movs	r6, #0
 800f896:	4637      	mov	r7, r6
 800f898:	a806      	add	r0, sp, #24
 800f89a:	3701      	adds	r7, #1
 800f89c:	f001 f9b9 	bl	8010c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800f8a0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800f8a4:	9b03      	ldr	r3, [sp, #12]
 800f8a6:	b2bf      	uxth	r7, r7
 800f8a8:	4286      	cmp	r6, r0
 800f8aa:	eba9 0903 	sub.w	r9, r9, r3
 800f8ae:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f8b2:	bfb8      	it	lt
 800f8b4:	4606      	movlt	r6, r0
 800f8b6:	fa0f f989 	sxth.w	r9, r9
 800f8ba:	b236      	sxth	r6, r6
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	f43f af0d 	beq.w	800f6dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f8c2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f47f af08 	bne.w	800f6dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f8cc:	7a2b      	ldrb	r3, [r5, #8]
 800f8ce:	444b      	add	r3, r9
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	dce1      	bgt.n	800f898 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 800f8d4:	e702      	b.n	800f6dc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f8d6:	bf00      	nop
 800f8d8:	2401aacc 	.word	0x2401aacc
 800f8dc:	2401aac8 	.word	0x2401aac8
 800f8e0:	2401aad0 	.word	0x2401aad0
 800f8e4:	2401aad4 	.word	0x2401aad4
 800f8e8:	ebaa 0606 	sub.w	r6, sl, r6
 800f8ec:	2002      	movs	r0, #2
 800f8ee:	fb96 f6f0 	sdiv	r6, r6, r0
 800f8f2:	e71c      	b.n	800f72e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 800f8f4:	441e      	add	r6, r3
 800f8f6:	ebaa 0606 	sub.w	r6, sl, r6
 800f8fa:	e718      	b.n	800f72e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 800f8fc:	8925      	ldrh	r5, [r4, #8]
 800f8fe:	1aed      	subs	r5, r5, r3
 800f900:	eba5 050a 	sub.w	r5, r5, sl
 800f904:	fa0f fb85 	sxth.w	fp, r5
 800f908:	8965      	ldrh	r5, [r4, #10]
 800f90a:	eba5 0509 	sub.w	r5, r5, r9
 800f90e:	b22d      	sxth	r5, r5
 800f910:	e72d      	b.n	800f76e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800f912:	8965      	ldrh	r5, [r4, #10]
 800f914:	f04f 0b00 	mov.w	fp, #0
 800f918:	1aed      	subs	r5, r5, r3
 800f91a:	4633      	mov	r3, r6
 800f91c:	463e      	mov	r6, r7
 800f91e:	eba5 050a 	sub.w	r5, r5, sl
 800f922:	461f      	mov	r7, r3
 800f924:	b22d      	sxth	r5, r5
 800f926:	e722      	b.n	800f76e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800f928:	2500      	movs	r5, #0
 800f92a:	e720      	b.n	800f76e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0800f92c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800f92c:	b513      	push	{r0, r1, r4, lr}
 800f92e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800f932:	4604      	mov	r4, r0
 800f934:	b1fb      	cbz	r3, 800f976 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f936:	4b16      	ldr	r3, [pc, #88]	; (800f990 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800f938:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f93a:	881b      	ldrh	r3, [r3, #0]
 800f93c:	428b      	cmp	r3, r1
 800f93e:	d91a      	bls.n	800f976 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f940:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800f944:	2b00      	cmp	r3, #0
 800f946:	dd16      	ble.n	800f976 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f948:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dd12      	ble.n	800f976 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f950:	4b10      	ldr	r3, [pc, #64]	; (800f994 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800f952:	6818      	ldr	r0, [r3, #0]
 800f954:	f7fc f908 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800f958:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800f95c:	6822      	ldr	r2, [r4, #0]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	db06      	blt.n	800f970 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800f962:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800f966:	2b00      	cmp	r3, #0
 800f968:	db02      	blt.n	800f970 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800f96a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f96c:	4298      	cmp	r0, r3
 800f96e:	d004      	beq.n	800f97a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800f970:	6953      	ldr	r3, [r2, #20]
 800f972:	4620      	mov	r0, r4
 800f974:	4798      	blx	r3
 800f976:	b002      	add	sp, #8
 800f978:	bd10      	pop	{r4, pc}
 800f97a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800f97e:	466b      	mov	r3, sp
 800f980:	6912      	ldr	r2, [r2, #16]
 800f982:	c903      	ldmia	r1, {r0, r1}
 800f984:	e883 0003 	stmia.w	r3, {r0, r1}
 800f988:	4619      	mov	r1, r3
 800f98a:	4620      	mov	r0, r4
 800f98c:	4790      	blx	r2
 800f98e:	e7f2      	b.n	800f976 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f990:	2401aacc 	.word	0x2401aacc
 800f994:	2401aad4 	.word	0x2401aad4

0800f998 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800f998:	4b45      	ldr	r3, [pc, #276]	; (800fab0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800f99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f99e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f9a0:	b08e      	sub	sp, #56	; 0x38
 800f9a2:	881b      	ldrh	r3, [r3, #0]
 800f9a4:	4604      	mov	r4, r0
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d97e      	bls.n	800faa8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f9aa:	6808      	ldr	r0, [r1, #0]
 800f9ac:	ab05      	add	r3, sp, #20
 800f9ae:	6849      	ldr	r1, [r1, #4]
 800f9b0:	4d40      	ldr	r5, [pc, #256]	; (800fab4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800f9b2:	c303      	stmia	r3!, {r0, r1}
 800f9b4:	4611      	mov	r1, r2
 800f9b6:	6828      	ldr	r0, [r5, #0]
 800f9b8:	f7fc f8d6 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800f9bc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	db11      	blt.n	800f9e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800f9c4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	db0d      	blt.n	800f9e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800f9cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f9ce:	4298      	cmp	r0, r3
 800f9d0:	d10a      	bne.n	800f9e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800f9d2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800f9d6:	ab09      	add	r3, sp, #36	; 0x24
 800f9d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f9dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	a805      	add	r0, sp, #20
 800f9e4:	f7fe fbe0 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800f9e8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	dd5b      	ble.n	800faa8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f9f0:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	dd57      	ble.n	800faa8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f9f8:	4f2f      	ldr	r7, [pc, #188]	; (800fab8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800f9fa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800fa02:	4b2e      	ldr	r3, [pc, #184]	; (800fabc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800fa0a:	2e00      	cmp	r6, #0
 800fa0c:	d04c      	beq.n	800faa8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800fa0e:	6823      	ldr	r3, [r4, #0]
 800fa10:	4620      	mov	r0, r4
 800fa12:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 800fa16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa18:	4798      	blx	r3
 800fa1a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 800fa22:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800fa26:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 800fa2a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800fa2e:	785b      	ldrb	r3, [r3, #1]
 800fa30:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 800fa34:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800fa38:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800fa3a:	9609      	str	r6, [sp, #36]	; 0x24
 800fa3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa40:	4b1f      	ldr	r3, [pc, #124]	; (800fac0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800fa42:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 800fa4c:	910b      	str	r1, [sp, #44]	; 0x2c
 800fa4e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 800fa52:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 800fa56:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 800fa5a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800fa5e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fa62:	b10a      	cbz	r2, 800fa68 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800fa64:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800fa66:	b906      	cbnz	r6, 800fa6a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800fa68:	689e      	ldr	r6, [r3, #8]
 800fa6a:	af07      	add	r7, sp, #28
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	4638      	mov	r0, r7
 800fa70:	f002 ffb8 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fa74:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800fa76:	6828      	ldr	r0, [r5, #0]
 800fa78:	f7fc f876 	bl	800bb68 <_ZNK8touchgfx5Texts7getTextEt>
 800fa7c:	6823      	ldr	r3, [r4, #0]
 800fa7e:	4605      	mov	r5, r0
 800fa80:	4620      	mov	r0, r4
 800fa82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa84:	4798      	blx	r3
 800fa86:	6823      	ldr	r3, [r4, #0]
 800fa88:	4680      	mov	r8, r0
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fa90:	4798      	blx	r3
 800fa92:	ab09      	add	r3, sp, #36	; 0x24
 800fa94:	9501      	str	r5, [sp, #4]
 800fa96:	9300      	str	r3, [sp, #0]
 800fa98:	ab05      	add	r3, sp, #20
 800fa9a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800fa9e:	4630      	mov	r0, r6
 800faa0:	e897 0006 	ldmia.w	r7, {r1, r2}
 800faa4:	f7fb fff1 	bl	800ba8a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800faa8:	b00e      	add	sp, #56	; 0x38
 800faaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faae:	bf00      	nop
 800fab0:	2401aacc 	.word	0x2401aacc
 800fab4:	2401aad4 	.word	0x2401aad4
 800fab8:	2401aac8 	.word	0x2401aac8
 800fabc:	2401aad0 	.word	0x2401aad0
 800fac0:	2401aa78 	.word	0x2401aa78

0800fac4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800fac4:	b538      	push	{r3, r4, r5, lr}
 800fac6:	4b0e      	ldr	r3, [pc, #56]	; (800fb00 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800fac8:	4604      	mov	r4, r0
 800faca:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	429a      	cmp	r2, r3
 800fad0:	d214      	bcs.n	800fafc <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800fad2:	6803      	ldr	r3, [r0, #0]
 800fad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fad6:	4798      	blx	r3
 800fad8:	6823      	ldr	r3, [r4, #0]
 800fada:	4605      	mov	r5, r0
 800fadc:	4620      	mov	r0, r4
 800fade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fae0:	4798      	blx	r3
 800fae2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800fae6:	b22d      	sxth	r5, r5
 800fae8:	4601      	mov	r1, r0
 800faea:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800faee:	bf06      	itte	eq
 800faf0:	4602      	moveq	r2, r0
 800faf2:	4629      	moveq	r1, r5
 800faf4:	462a      	movne	r2, r5
 800faf6:	4620      	mov	r0, r4
 800faf8:	f7fa fe3f 	bl	800a77a <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800fafc:	bd38      	pop	{r3, r4, r5, pc}
 800fafe:	bf00      	nop
 800fb00:	2401aacc 	.word	0x2401aacc

0800fb04 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800fb04:	b530      	push	{r4, r5, lr}
 800fb06:	888b      	ldrh	r3, [r1, #4]
 800fb08:	b085      	sub	sp, #20
 800fb0a:	4604      	mov	r4, r0
 800fb0c:	8583      	strh	r3, [r0, #44]	; 0x2c
 800fb0e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800fb12:	b923      	cbnz	r3, 800fb1e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fb14:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800fb18:	b90b      	cbnz	r3, 800fb1e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800fb1a:	f7ff ffd3 	bl	800fac4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800fb1e:	6823      	ldr	r3, [r4, #0]
 800fb20:	466d      	mov	r5, sp
 800fb22:	4621      	mov	r1, r4
 800fb24:	343c      	adds	r4, #60	; 0x3c
 800fb26:	4628      	mov	r0, r5
 800fb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb2c:	4798      	blx	r3
 800fb2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fb32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fb36:	b005      	add	sp, #20
 800fb38:	bd30      	pop	{r4, r5, pc}

0800fb3a <_ZNK8touchgfx3Box12getSolidRectEv>:
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	8083      	strh	r3, [r0, #4]
 800fb3e:	80c3      	strh	r3, [r0, #6]
 800fb40:	8003      	strh	r3, [r0, #0]
 800fb42:	8043      	strh	r3, [r0, #2]
 800fb44:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800fb48:	2bff      	cmp	r3, #255	; 0xff
 800fb4a:	bf01      	itttt	eq
 800fb4c:	890b      	ldrheq	r3, [r1, #8]
 800fb4e:	8083      	strheq	r3, [r0, #4]
 800fb50:	894b      	ldrheq	r3, [r1, #10]
 800fb52:	80c3      	strheq	r3, [r0, #6]
 800fb54:	4770      	bx	lr
	...

0800fb58 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800fb58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	466b      	mov	r3, sp
 800fb5e:	6808      	ldr	r0, [r1, #0]
 800fb60:	6849      	ldr	r1, [r1, #4]
 800fb62:	c303      	stmia	r3!, {r0, r1}
 800fb64:	6823      	ldr	r3, [r4, #0]
 800fb66:	4669      	mov	r1, sp
 800fb68:	4620      	mov	r0, r4
 800fb6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb6c:	4798      	blx	r3
 800fb6e:	4b08      	ldr	r3, [pc, #32]	; (800fb90 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fb76:	b10a      	cbz	r2, 800fb7c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800fb78:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fb7a:	b900      	cbnz	r0, 800fb7e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800fb7c:	6898      	ldr	r0, [r3, #8]
 800fb7e:	6803      	ldr	r3, [r0, #0]
 800fb80:	4669      	mov	r1, sp
 800fb82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fb84:	6a1d      	ldr	r5, [r3, #32]
 800fb86:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fb8a:	47a8      	blx	r5
 800fb8c:	b003      	add	sp, #12
 800fb8e:	bd30      	pop	{r4, r5, pc}
 800fb90:	2401aa78 	.word	0x2401aa78

0800fb94 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800fb94:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800fb98:	b12a      	cbz	r2, 800fba6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fb9a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800fb9e:	b112      	cbz	r2, 800fba6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800fba0:	6803      	ldr	r3, [r0, #0]
 800fba2:	695b      	ldr	r3, [r3, #20]
 800fba4:	4718      	bx	r3
 800fba6:	4770      	bx	lr

0800fba8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbac:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800fbae:	4604      	mov	r4, r0
 800fbb0:	460e      	mov	r6, r1
 800fbb2:	b08e      	sub	sp, #56	; 0x38
 800fbb4:	b218      	sxth	r0, r3
 800fbb6:	8921      	ldrh	r1, [r4, #8]
 800fbb8:	005b      	lsls	r3, r3, #1
 800fbba:	8962      	ldrh	r2, [r4, #10]
 800fbbc:	f8ad 0000 	strh.w	r0, [sp]
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	f8ad 0002 	strh.w	r0, [sp, #2]
 800fbc6:	1ac9      	subs	r1, r1, r3
 800fbc8:	1ad3      	subs	r3, r2, r3
 800fbca:	b209      	sxth	r1, r1
 800fbcc:	b21b      	sxth	r3, r3
 800fbce:	2900      	cmp	r1, #0
 800fbd0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800fbd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fbd8:	dd5e      	ble.n	800fc98 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	dd5c      	ble.n	800fc98 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800fbde:	6830      	ldr	r0, [r6, #0]
 800fbe0:	ab02      	add	r3, sp, #8
 800fbe2:	6871      	ldr	r1, [r6, #4]
 800fbe4:	c303      	stmia	r3!, {r0, r1}
 800fbe6:	4669      	mov	r1, sp
 800fbe8:	a802      	add	r0, sp, #8
 800fbea:	f7fe fadd 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800fbee:	4620      	mov	r0, r4
 800fbf0:	a902      	add	r1, sp, #8
 800fbf2:	f7ff ffb1 	bl	800fb58 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800fbf6:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d05f      	beq.n	800fcbc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800fbfc:	8963      	ldrh	r3, [r4, #10]
 800fbfe:	b202      	sxth	r2, r0
 800fc00:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800fc04:	2500      	movs	r5, #0
 800fc06:	1a1f      	subs	r7, r3, r0
 800fc08:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800fc0c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800fc10:	b21b      	sxth	r3, r3
 800fc12:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800fc16:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800fc1a:	af04      	add	r7, sp, #16
 800fc1c:	1a09      	subs	r1, r1, r0
 800fc1e:	9506      	str	r5, [sp, #24]
 800fc20:	f8ad 201e 	strh.w	r2, [sp, #30]
 800fc24:	f8ad 5020 	strh.w	r5, [sp, #32]
 800fc28:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800fc2c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800fc30:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800fc34:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800fc38:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800fc3c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800fc40:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800fc44:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800fc48:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800fc4c:	ab06      	add	r3, sp, #24
 800fc4e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fc52:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fc56:	e887 0003 	stmia.w	r7, {r0, r1}
 800fc5a:	4631      	mov	r1, r6
 800fc5c:	4638      	mov	r0, r7
 800fc5e:	f7fe faa3 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800fc62:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	dd12      	ble.n	800fc90 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800fc6a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	dd0e      	ble.n	800fc90 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	4639      	mov	r1, r7
 800fc76:	4620      	mov	r0, r4
 800fc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7a:	4798      	blx	r3
 800fc7c:	f7f9 ff86 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800fc80:	6803      	ldr	r3, [r0, #0]
 800fc82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fc84:	4639      	mov	r1, r7
 800fc86:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800fc8a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fc8e:	47c0      	blx	r8
 800fc90:	3501      	adds	r5, #1
 800fc92:	2d04      	cmp	r5, #4
 800fc94:	d1da      	bne.n	800fc4c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800fc96:	e011      	b.n	800fcbc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800fc98:	6830      	ldr	r0, [r6, #0]
 800fc9a:	ab06      	add	r3, sp, #24
 800fc9c:	6871      	ldr	r1, [r6, #4]
 800fc9e:	c303      	stmia	r3!, {r0, r1}
 800fca0:	6823      	ldr	r3, [r4, #0]
 800fca2:	a906      	add	r1, sp, #24
 800fca4:	4620      	mov	r0, r4
 800fca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fca8:	4798      	blx	r3
 800fcaa:	f7f9 ff6f 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 800fcae:	6803      	ldr	r3, [r0, #0]
 800fcb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcb2:	a906      	add	r1, sp, #24
 800fcb4:	6a1d      	ldr	r5, [r3, #32]
 800fcb6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800fcba:	47a8      	blx	r5
 800fcbc:	b00e      	add	sp, #56	; 0x38
 800fcbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fcc2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800fcc2:	b570      	push	{r4, r5, r6, lr}
 800fcc4:	880b      	ldrh	r3, [r1, #0]
 800fcc6:	460d      	mov	r5, r1
 800fcc8:	4604      	mov	r4, r0
 800fcca:	84c3      	strh	r3, [r0, #38]	; 0x26
 800fccc:	4608      	mov	r0, r1
 800fcce:	f004 fb01 	bl	80142d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fcd2:	4606      	mov	r6, r0
 800fcd4:	4628      	mov	r0, r5
 800fcd6:	f004 fb31 	bl	801433c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	4605      	mov	r5, r0
 800fcde:	4631      	mov	r1, r6
 800fce0:	4620      	mov	r0, r4
 800fce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce4:	4798      	blx	r3
 800fce6:	6823      	ldr	r3, [r4, #0]
 800fce8:	4629      	mov	r1, r5
 800fcea:	4620      	mov	r0, r4
 800fcec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcf2:	4718      	bx	r3

0800fcf4 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800fcf4:	b510      	push	{r4, lr}
 800fcf6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	2bff      	cmp	r3, #255	; 0xff
 800fcfe:	d006      	beq.n	800fd0e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800fd00:	2300      	movs	r3, #0
 800fd02:	8003      	strh	r3, [r0, #0]
 800fd04:	8043      	strh	r3, [r0, #2]
 800fd06:	8083      	strh	r3, [r0, #4]
 800fd08:	80c3      	strh	r3, [r0, #6]
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	bd10      	pop	{r4, pc}
 800fd0e:	3126      	adds	r1, #38	; 0x26
 800fd10:	f004 fb48 	bl	80143a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fd14:	e7f9      	b.n	800fd0a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

0800fd18 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800fd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd1c:	4604      	mov	r4, r0
 800fd1e:	b088      	sub	sp, #32
 800fd20:	2500      	movs	r5, #0
 800fd22:	460f      	mov	r7, r1
 800fd24:	f854 3b26 	ldr.w	r3, [r4], #38
 800fd28:	a904      	add	r1, sp, #16
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd2e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fd32:	4798      	blx	r3
 800fd34:	4620      	mov	r0, r4
 800fd36:	f004 facd 	bl	80142d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fd3a:	4680      	mov	r8, r0
 800fd3c:	4620      	mov	r0, r4
 800fd3e:	f004 fafd 	bl	801433c <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fd42:	9506      	str	r5, [sp, #24]
 800fd44:	ad06      	add	r5, sp, #24
 800fd46:	f8ad 001e 	strh.w	r0, [sp, #30]
 800fd4a:	4639      	mov	r1, r7
 800fd4c:	f8ad 801c 	strh.w	r8, [sp, #28]
 800fd50:	4628      	mov	r0, r5
 800fd52:	f7fe fa29 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 800fd56:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	dd19      	ble.n	800fd92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800fd5e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	dd15      	ble.n	800fd92 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800fd66:	4b0c      	ldr	r3, [pc, #48]	; (800fd98 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fd6e:	b10a      	cbz	r2, 800fd74 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800fd70:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fd72:	b900      	cbnz	r0, 800fd76 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800fd74:	6898      	ldr	r0, [r3, #8]
 800fd76:	2701      	movs	r7, #1
 800fd78:	6801      	ldr	r1, [r0, #0]
 800fd7a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800fd7e:	9702      	str	r7, [sp, #8]
 800fd80:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800fd84:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800fd88:	e9cd 5600 	strd	r5, r6, [sp]
 800fd8c:	688d      	ldr	r5, [r1, #8]
 800fd8e:	4621      	mov	r1, r4
 800fd90:	47a8      	blx	r5
 800fd92:	b008      	add	sp, #32
 800fd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd98:	2401aa78 	.word	0x2401aa78

0800fd9c <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800fd9c:	b510      	push	{r4, lr}
 800fd9e:	6803      	ldr	r3, [r0, #0]
 800fda0:	460c      	mov	r4, r1
 800fda2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda4:	4798      	blx	r3
 800fda6:	1b03      	subs	r3, r0, r4
 800fda8:	4258      	negs	r0, r3
 800fdaa:	4158      	adcs	r0, r3
 800fdac:	bd10      	pop	{r4, pc}
	...

0800fdb0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800fdb0:	4b01      	ldr	r3, [pc, #4]	; (800fdb8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800fdb2:	6019      	str	r1, [r3, #0]
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	2401aa80 	.word	0x2401aa80

0800fdbc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800fdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc0:	4696      	mov	lr, r2
 800fdc2:	b097      	sub	sp, #92	; 0x5c
 800fdc4:	4605      	mov	r5, r0
 800fdc6:	4614      	mov	r4, r2
 800fdc8:	460e      	mov	r6, r1
 800fdca:	461f      	mov	r7, r3
 800fdcc:	f10d 0c1c 	add.w	ip, sp, #28
 800fdd0:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800fdd4:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800fdd8:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800fddc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fde0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fde4:	f8de 3000 	ldr.w	r3, [lr]
 800fde8:	f104 0e14 	add.w	lr, r4, #20
 800fdec:	f8cc 3000 	str.w	r3, [ip]
 800fdf0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800fdf4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdf8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fdfc:	f8de 3000 	ldr.w	r3, [lr]
 800fe00:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800fe04:	f8cc 3000 	str.w	r3, [ip]
 800fe08:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800fe0c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe14:	f8de 3000 	ldr.w	r3, [lr]
 800fe18:	4631      	mov	r1, r6
 800fe1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	f8cc 3000 	str.w	r3, [ip]
 800fe22:	682b      	ldr	r3, [r5, #0]
 800fe24:	9201      	str	r2, [sp, #4]
 800fe26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe28:	f8cd 8008 	str.w	r8, [sp, #8]
 800fe2c:	9200      	str	r2, [sp, #0]
 800fe2e:	aa07      	add	r2, sp, #28
 800fe30:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800fe34:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800fe38:	463b      	mov	r3, r7
 800fe3a:	47d8      	blx	fp
 800fe3c:	46a6      	mov	lr, r4
 800fe3e:	f10d 0c1c 	add.w	ip, sp, #28
 800fe42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe4a:	f8de 3000 	ldr.w	r3, [lr]
 800fe4e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800fe52:	343c      	adds	r4, #60	; 0x3c
 800fe54:	f8cc 3000 	str.w	r3, [ip]
 800fe58:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800fe5c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe64:	f8de 3000 	ldr.w	r3, [lr]
 800fe68:	f8cc 3000 	str.w	r3, [ip]
 800fe6c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800fe70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fe72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe76:	6823      	ldr	r3, [r4, #0]
 800fe78:	4631      	mov	r1, r6
 800fe7a:	4628      	mov	r0, r5
 800fe7c:	f8cc 3000 	str.w	r3, [ip]
 800fe80:	682b      	ldr	r3, [r5, #0]
 800fe82:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800fe86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe88:	f8cd 8008 	str.w	r8, [sp, #8]
 800fe8c:	9201      	str	r2, [sp, #4]
 800fe8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fe90:	9200      	str	r2, [sp, #0]
 800fe92:	aa07      	add	r2, sp, #28
 800fe94:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800fe96:	463b      	mov	r3, r7
 800fe98:	47a0      	blx	r4
 800fe9a:	b017      	add	sp, #92	; 0x5c
 800fe9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fea0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800fea0:	2000      	movs	r0, #0
 800fea2:	4770      	bx	lr

0800fea4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800fea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fea8:	b08d      	sub	sp, #52	; 0x34
 800feaa:	4688      	mov	r8, r1
 800feac:	f8d3 c000 	ldr.w	ip, [r3]
 800feb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800feb2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800feb6:	680f      	ldr	r7, [r1, #0]
 800feb8:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800febc:	eba7 070c 	sub.w	r7, r7, ip
 800fec0:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800fec4:	edd3 6a07 	vldr	s13, [r3, #28]
 800fec8:	42bc      	cmp	r4, r7
 800feca:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fecc:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800fed0:	bfa8      	it	ge
 800fed2:	463c      	movge	r4, r7
 800fed4:	f9b1 9000 	ldrsh.w	r9, [r1]
 800fed8:	f9ba 1000 	ldrsh.w	r1, [sl]
 800fedc:	ee07 4a90 	vmov	s15, r4
 800fee0:	eb09 0e0c 	add.w	lr, r9, ip
 800fee4:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800fee8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800feec:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800fef0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800fef4:	4571      	cmp	r1, lr
 800fef6:	ee25 4a04 	vmul.f32	s8, s10, s8
 800fefa:	ee65 4a24 	vmul.f32	s9, s10, s9
 800fefe:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ff02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ff06:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800ff0a:	ee32 1a05 	vadd.f32	s2, s4, s10
 800ff0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ff12:	ee36 0a84 	vadd.f32	s0, s13, s8
 800ff16:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ff1a:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ff1e:	f340 808c 	ble.w	801003a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800ff22:	eba1 060e 	sub.w	r6, r1, lr
 800ff26:	fb96 f5f4 	sdiv	r5, r6, r4
 800ff2a:	ee07 5a10 	vmov	s14, r5
 800ff2e:	2d00      	cmp	r5, #0
 800ff30:	fb04 6615 	mls	r6, r4, r5, r6
 800ff34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ff38:	eea7 0a04 	vfma.f32	s0, s14, s8
 800ff3c:	eee7 0a24 	vfma.f32	s1, s14, s9
 800ff40:	eea7 1a05 	vfma.f32	s2, s14, s10
 800ff44:	dd12      	ble.n	800ff6c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800ff46:	ee70 6a44 	vsub.f32	s13, s0, s8
 800ff4a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800ff4e:	ee31 2a45 	vsub.f32	s4, s2, s10
 800ff52:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ff56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff5a:	bf14      	ite	ne
 800ff5c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800ff60:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ff64:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ff68:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ff6c:	fb05 f204 	mul.w	r2, r5, r4
 800ff70:	1abf      	subs	r7, r7, r2
 800ff72:	4494      	add	ip, r2
 800ff74:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ff78:	4411      	add	r1, r2
 800ff7a:	eb09 020c 	add.w	r2, r9, ip
 800ff7e:	b209      	sxth	r1, r1
 800ff80:	443a      	add	r2, r7
 800ff82:	428a      	cmp	r2, r1
 800ff84:	bfc4      	itt	gt
 800ff86:	eba1 0209 	subgt.w	r2, r1, r9
 800ff8a:	eba2 070c 	subgt.w	r7, r2, ip
 800ff8e:	2f00      	cmp	r7, #0
 800ff90:	dd50      	ble.n	8010034 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800ff92:	fb97 f1f4 	sdiv	r1, r7, r4
 800ff96:	fb04 7211 	mls	r2, r4, r1, r7
 800ff9a:	b90a      	cbnz	r2, 800ffa0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800ff9c:	3901      	subs	r1, #1
 800ff9e:	4622      	mov	r2, r4
 800ffa0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800ffa4:	6840      	ldr	r0, [r0, #4]
 800ffa6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800ffaa:	44b6      	add	lr, r6
 800ffac:	f8d0 a000 	ldr.w	sl, [r0]
 800ffb0:	2900      	cmp	r1, #0
 800ffb2:	bfcc      	ite	gt
 800ffb4:	46a1      	movgt	r9, r4
 800ffb6:	4691      	movle	r9, r2
 800ffb8:	900b      	str	r0, [sp, #44]	; 0x2c
 800ffba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ffbc:	fb04 e505 	mla	r5, r4, r5, lr
 800ffc0:	eef0 6a42 	vmov.f32	s13, s4
 800ffc4:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800ffc8:	9008      	str	r0, [sp, #32]
 800ffca:	eeb0 7a61 	vmov.f32	s14, s3
 800ffce:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ffd0:	695b      	ldr	r3, [r3, #20]
 800ffd2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ffd6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800ffda:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800ffde:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ffe0:	445b      	add	r3, fp
 800ffe2:	9307      	str	r3, [sp, #28]
 800ffe4:	ee16 3a90 	vmov	r3, s13
 800ffe8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800ffec:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800fff0:	ee21 3a23 	vmul.f32	s6, s2, s7
 800fff4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800fff8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800fffc:	ee17 7a90 	vmov	r7, s15
 8010000:	ee73 7a42 	vsub.f32	s15, s6, s4
 8010004:	fb97 f7f4 	sdiv	r7, r7, r4
 8010008:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801000c:	ee17 ca90 	vmov	ip, s15
 8010010:	fb9c fcf4 	sdiv	ip, ip, r4
 8010014:	fb0c 3306 	mla	r3, ip, r6, r3
 8010018:	9302      	str	r3, [sp, #8]
 801001a:	ee17 3a10 	vmov	r3, s14
 801001e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8010022:	fb07 3706 	mla	r7, r7, r6, r3
 8010026:	eba9 0306 	sub.w	r3, r9, r6
 801002a:	e9cd 4700 	strd	r4, r7, [sp]
 801002e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8010032:	47a0      	blx	r4
 8010034:	b00d      	add	sp, #52	; 0x34
 8010036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801003a:	2500      	movs	r5, #0
 801003c:	462e      	mov	r6, r5
 801003e:	e799      	b.n	800ff74 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08010040 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	b0db      	sub	sp, #364	; 0x16c
 8010046:	461d      	mov	r5, r3
 8010048:	4614      	mov	r4, r2
 801004a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801004e:	910f      	str	r1, [sp, #60]	; 0x3c
 8010050:	4629      	mov	r1, r5
 8010052:	930a      	str	r3, [sp, #40]	; 0x28
 8010054:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8010058:	9009      	str	r0, [sp, #36]	; 0x24
 801005a:	930b      	str	r3, [sp, #44]	; 0x2c
 801005c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8010060:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8010064:	9310      	str	r3, [sp, #64]	; 0x40
 8010066:	6803      	ldr	r3, [r0, #0]
 8010068:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801006a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801006e:	47b8      	blx	r7
 8010070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010072:	6058      	str	r0, [r3, #4]
 8010074:	2800      	cmp	r0, #0
 8010076:	f000 83a1 	beq.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801007a:	682b      	ldr	r3, [r5, #0]
 801007c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8010080:	ed94 7a02 	vldr	s14, [r4, #8]
 8010084:	9314      	str	r3, [sp, #80]	; 0x50
 8010086:	686b      	ldr	r3, [r5, #4]
 8010088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801008c:	9315      	str	r3, [sp, #84]	; 0x54
 801008e:	4bc1      	ldr	r3, [pc, #772]	; (8010394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8010090:	7819      	ldrb	r1, [r3, #0]
 8010092:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8010096:	2900      	cmp	r1, #0
 8010098:	bf16      	itet	ne
 801009a:	4619      	movne	r1, r3
 801009c:	4611      	moveq	r1, r2
 801009e:	4613      	movne	r3, r2
 80100a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a4:	9116      	str	r1, [sp, #88]	; 0x58
 80100a6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80100aa:	f240 8387 	bls.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80100ae:	ed94 7a07 	vldr	s14, [r4, #28]
 80100b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ba:	f240 837f 	bls.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80100be:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80100c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80100c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ca:	f240 8377 	bls.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80100ce:	6822      	ldr	r2, [r4, #0]
 80100d0:	4bb1      	ldr	r3, [pc, #708]	; (8010398 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80100d2:	429a      	cmp	r2, r3
 80100d4:	f2c0 8372 	blt.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80100d8:	49b0      	ldr	r1, [pc, #704]	; (801039c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80100da:	6963      	ldr	r3, [r4, #20]
 80100dc:	428a      	cmp	r2, r1
 80100de:	f300 836d 	bgt.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80100e2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80100e6:	48ae      	ldr	r0, [pc, #696]	; (80103a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80100e8:	33ff      	adds	r3, #255	; 0xff
 80100ea:	4283      	cmp	r3, r0
 80100ec:	f200 8366 	bhi.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80100f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80100f2:	4dac      	ldr	r5, [pc, #688]	; (80103a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80100f4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80100f8:	33ff      	adds	r3, #255	; 0xff
 80100fa:	42ab      	cmp	r3, r5
 80100fc:	f200 835e 	bhi.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8010100:	6862      	ldr	r2, [r4, #4]
 8010102:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8010106:	33ff      	adds	r3, #255	; 0xff
 8010108:	4283      	cmp	r3, r0
 801010a:	f200 8357 	bhi.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801010e:	69a1      	ldr	r1, [r4, #24]
 8010110:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8010114:	33ff      	adds	r3, #255	; 0xff
 8010116:	4283      	cmp	r3, r0
 8010118:	f200 8350 	bhi.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801011c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801011e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8010122:	30ff      	adds	r0, #255	; 0xff
 8010124:	42a8      	cmp	r0, r5
 8010126:	f200 8349 	bhi.w	80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801012a:	428a      	cmp	r2, r1
 801012c:	f280 8110 	bge.w	8010350 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8010130:	429a      	cmp	r2, r3
 8010132:	f300 8119 	bgt.w	8010368 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8010136:	4299      	cmp	r1, r3
 8010138:	f280 811d 	bge.w	8010376 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801013c:	2502      	movs	r5, #2
 801013e:	2701      	movs	r7, #1
 8010140:	46a9      	mov	r9, r5
 8010142:	46b8      	mov	r8, r7
 8010144:	f04f 0a00 	mov.w	sl, #0
 8010148:	4621      	mov	r1, r4
 801014a:	a849      	add	r0, sp, #292	; 0x124
 801014c:	f003 fd4a 	bl	8013be4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8010150:	4622      	mov	r2, r4
 8010152:	4653      	mov	r3, sl
 8010154:	a949      	add	r1, sp, #292	; 0x124
 8010156:	f8cd 9000 	str.w	r9, [sp]
 801015a:	a819      	add	r0, sp, #100	; 0x64
 801015c:	f003 fe72 	bl	8013e44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010160:	4622      	mov	r2, r4
 8010162:	4653      	mov	r3, sl
 8010164:	a949      	add	r1, sp, #292	; 0x124
 8010166:	f8cd 8000 	str.w	r8, [sp]
 801016a:	a829      	add	r0, sp, #164	; 0xa4
 801016c:	f003 fe6a 	bl	8013e44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010170:	4643      	mov	r3, r8
 8010172:	4622      	mov	r2, r4
 8010174:	a949      	add	r1, sp, #292	; 0x124
 8010176:	f8cd 9000 	str.w	r9, [sp]
 801017a:	a839      	add	r0, sp, #228	; 0xe4
 801017c:	f003 fe62 	bl	8013e44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8010180:	42af      	cmp	r7, r5
 8010182:	af12      	add	r7, sp, #72	; 0x48
 8010184:	bfb7      	itett	lt
 8010186:	2300      	movlt	r3, #0
 8010188:	2301      	movge	r3, #1
 801018a:	ad29      	addlt	r5, sp, #164	; 0xa4
 801018c:	ac19      	addlt	r4, sp, #100	; 0x64
 801018e:	bfb1      	iteee	lt
 8010190:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010192:	ad19      	addge	r5, sp, #100	; 0x64
 8010194:	930e      	strge	r3, [sp, #56]	; 0x38
 8010196:	ac29      	addge	r4, sp, #164	; 0xa4
 8010198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801019a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801019e:	e887 0003 	stmia.w	r7, {r0, r1}
 80101a2:	b928      	cbnz	r0, 80101b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80101a4:	4b80      	ldr	r3, [pc, #512]	; (80103a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80101a6:	6818      	ldr	r0, [r3, #0]
 80101a8:	6803      	ldr	r3, [r0, #0]
 80101aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ac:	4798      	blx	r3
 80101ae:	6038      	str	r0, [r7, #0]
 80101b0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80101b2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80101b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80101ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80101bc:	930c      	str	r3, [sp, #48]	; 0x30
 80101be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80101c0:	6963      	ldr	r3, [r4, #20]
 80101c2:	440b      	add	r3, r1
 80101c4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80101c8:	4408      	add	r0, r1
 80101ca:	b200      	sxth	r0, r0
 80101cc:	4283      	cmp	r3, r0
 80101ce:	900d      	str	r0, [sp, #52]	; 0x34
 80101d0:	f280 80dd 	bge.w	801038e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80101d4:	428b      	cmp	r3, r1
 80101d6:	da08      	bge.n	80101ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80101d8:	2a00      	cmp	r2, #0
 80101da:	dd06      	ble.n	80101ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80101dc:	1acb      	subs	r3, r1, r3
 80101de:	429a      	cmp	r2, r3
 80101e0:	f2c0 80e4 	blt.w	80103ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f300 80e2 	bgt.w	80103ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80101ea:	6967      	ldr	r7, [r4, #20]
 80101ec:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80101f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80101f2:	443b      	add	r3, r7
 80101f4:	461f      	mov	r7, r3
 80101f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101f8:	1bdf      	subs	r7, r3, r7
 80101fa:	4297      	cmp	r7, r2
 80101fc:	bfa8      	it	ge
 80101fe:	4617      	movge	r7, r2
 8010200:	2f00      	cmp	r7, #0
 8010202:	f340 8166 	ble.w	80104d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8010206:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010208:	6829      	ldr	r1, [r5, #0]
 801020a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801020e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010212:	4411      	add	r1, r2
 8010214:	6820      	ldr	r0, [r4, #0]
 8010216:	4299      	cmp	r1, r3
 8010218:	dd1a      	ble.n	8010250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801021a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801021e:	4402      	add	r2, r0
 8010220:	440b      	add	r3, r1
 8010222:	b21b      	sxth	r3, r3
 8010224:	429a      	cmp	r2, r3
 8010226:	dc13      	bgt.n	8010250 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8010228:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801022a:	a912      	add	r1, sp, #72	; 0x48
 801022c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801022e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	9206      	str	r2, [sp, #24]
 8010234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010236:	9500      	str	r5, [sp, #0]
 8010238:	9205      	str	r2, [sp, #20]
 801023a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801023c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010240:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010242:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010246:	aa49      	add	r2, sp, #292	; 0x124
 8010248:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801024c:	4623      	mov	r3, r4
 801024e:	47c8      	blx	r9
 8010250:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010254:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010258:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801025c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010260:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010264:	68a1      	ldr	r1, [r4, #8]
 8010266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801026a:	ed94 6a08 	vldr	s12, [r4, #32]
 801026e:	edd4 6a07 	vldr	s13, [r4, #28]
 8010272:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010276:	ee76 6a86 	vadd.f32	s13, s13, s12
 801027a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 801027e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8010282:	edc4 6a07 	vstr	s13, [r4, #28]
 8010286:	441a      	add	r2, r3
 8010288:	6963      	ldr	r3, [r4, #20]
 801028a:	3301      	adds	r3, #1
 801028c:	6022      	str	r2, [r4, #0]
 801028e:	6163      	str	r3, [r4, #20]
 8010290:	69a3      	ldr	r3, [r4, #24]
 8010292:	3b01      	subs	r3, #1
 8010294:	61a3      	str	r3, [r4, #24]
 8010296:	6923      	ldr	r3, [r4, #16]
 8010298:	440b      	add	r3, r1
 801029a:	68e1      	ldr	r1, [r4, #12]
 801029c:	428b      	cmp	r3, r1
 801029e:	6123      	str	r3, [r4, #16]
 80102a0:	db15      	blt.n	80102ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80102a2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80102a6:	3201      	adds	r2, #1
 80102a8:	1a5b      	subs	r3, r3, r1
 80102aa:	ee76 6a26 	vadd.f32	s13, s12, s13
 80102ae:	6022      	str	r2, [r4, #0]
 80102b0:	6123      	str	r3, [r4, #16]
 80102b2:	edc4 6a07 	vstr	s13, [r4, #28]
 80102b6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80102ba:	ee36 7a87 	vadd.f32	s14, s13, s14
 80102be:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80102c2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80102c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102ca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80102ce:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 80102d2:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 80102d6:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 80102da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80102de:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80102e2:	68a9      	ldr	r1, [r5, #8]
 80102e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102e8:	ed95 6a08 	vldr	s12, [r5, #32]
 80102ec:	edd5 6a07 	vldr	s13, [r5, #28]
 80102f0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80102f4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80102f8:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80102fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010300:	edc5 6a07 	vstr	s13, [r5, #28]
 8010304:	441a      	add	r2, r3
 8010306:	696b      	ldr	r3, [r5, #20]
 8010308:	3301      	adds	r3, #1
 801030a:	602a      	str	r2, [r5, #0]
 801030c:	616b      	str	r3, [r5, #20]
 801030e:	69ab      	ldr	r3, [r5, #24]
 8010310:	3b01      	subs	r3, #1
 8010312:	61ab      	str	r3, [r5, #24]
 8010314:	692b      	ldr	r3, [r5, #16]
 8010316:	440b      	add	r3, r1
 8010318:	68e9      	ldr	r1, [r5, #12]
 801031a:	428b      	cmp	r3, r1
 801031c:	612b      	str	r3, [r5, #16]
 801031e:	db15      	blt.n	801034c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8010320:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010324:	3201      	adds	r2, #1
 8010326:	1a5b      	subs	r3, r3, r1
 8010328:	ee76 6a26 	vadd.f32	s13, s12, s13
 801032c:	602a      	str	r2, [r5, #0]
 801032e:	612b      	str	r3, [r5, #16]
 8010330:	edc5 6a07 	vstr	s13, [r5, #28]
 8010334:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010338:	ee36 7a87 	vadd.f32	s14, s13, s14
 801033c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010340:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010348:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801034c:	3f01      	subs	r7, #1
 801034e:	e757      	b.n	8010200 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010350:	4299      	cmp	r1, r3
 8010352:	dc13      	bgt.n	801037c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010354:	429a      	cmp	r2, r3
 8010356:	da14      	bge.n	8010382 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8010358:	2502      	movs	r5, #2
 801035a:	2703      	movs	r7, #3
 801035c:	f04f 0800 	mov.w	r8, #0
 8010360:	46a9      	mov	r9, r5
 8010362:	f04f 0a01 	mov.w	sl, #1
 8010366:	e6ef      	b.n	8010148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010368:	2501      	movs	r5, #1
 801036a:	2700      	movs	r7, #0
 801036c:	46a9      	mov	r9, r5
 801036e:	46b8      	mov	r8, r7
 8010370:	f04f 0a02 	mov.w	sl, #2
 8010374:	e6e8      	b.n	8010148 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8010376:	2501      	movs	r5, #1
 8010378:	2702      	movs	r7, #2
 801037a:	e6e1      	b.n	8010140 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 801037c:	2500      	movs	r5, #0
 801037e:	2701      	movs	r7, #1
 8010380:	e7f4      	b.n	801036c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8010382:	2702      	movs	r7, #2
 8010384:	2503      	movs	r5, #3
 8010386:	f04f 0900 	mov.w	r9, #0
 801038a:	46b8      	mov	r8, r7
 801038c:	e7e9      	b.n	8010362 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 801038e:	4613      	mov	r3, r2
 8010390:	e728      	b.n	80101e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8010392:	bf00      	nop
 8010394:	2401aa70 	.word	0x2401aa70
 8010398:	fffd8f01 	.word	0xfffd8f01
 801039c:	00027100 	.word	0x00027100
 80103a0:	0004e1ff 	.word	0x0004e1ff
 80103a4:	0004e1fe 	.word	0x0004e1fe
 80103a8:	2401aa78 	.word	0x2401aa78
 80103ac:	4613      	mov	r3, r2
 80103ae:	992b      	ldr	r1, [sp, #172]	; 0xac
 80103b0:	469e      	mov	lr, r3
 80103b2:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80103b4:	469c      	mov	ip, r3
 80103b6:	9111      	str	r1, [sp, #68]	; 0x44
 80103b8:	f04f 0900 	mov.w	r9, #0
 80103bc:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80103c0:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80103c4:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80103c8:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80103cc:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80103d0:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80103d4:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80103d8:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 80103dc:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 80103e0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 80103e4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 80103e8:	f1bc 0f00 	cmp.w	ip, #0
 80103ec:	d147      	bne.n	801047e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80103ee:	eb03 0c07 	add.w	ip, r3, r7
 80103f2:	1ad7      	subs	r7, r2, r3
 80103f4:	f1b9 0f00 	cmp.w	r9, #0
 80103f8:	d009      	beq.n	801040e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80103fa:	9029      	str	r0, [sp, #164]	; 0xa4
 80103fc:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8010400:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8010404:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8010408:	912d      	str	r1, [sp, #180]	; 0xb4
 801040a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 801040e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010410:	f04f 0800 	mov.w	r8, #0
 8010414:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8010418:	9111      	str	r1, [sp, #68]	; 0x44
 801041a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801041e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010422:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010426:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801042a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801042e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010432:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010436:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801043a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801043e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010442:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010446:	f1be 0f00 	cmp.w	lr, #0
 801044a:	d031      	beq.n	80104b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 801044c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801044e:	4450      	add	r0, sl
 8010450:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010454:	4431      	add	r1, r6
 8010456:	ee37 7a04 	vadd.f32	s14, s14, s8
 801045a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801045e:	4549      	cmp	r1, r9
 8010460:	db08      	blt.n	8010474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8010462:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010466:	3001      	adds	r0, #1
 8010468:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801046c:	eba1 0109 	sub.w	r1, r1, r9
 8010470:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010474:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010478:	f04f 0801 	mov.w	r8, #1
 801047c:	e7e3      	b.n	8010446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 801047e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010480:	4450      	add	r0, sl
 8010482:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010486:	4431      	add	r1, r6
 8010488:	ee77 7a84 	vadd.f32	s15, s15, s8
 801048c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010490:	4541      	cmp	r1, r8
 8010492:	db08      	blt.n	80104a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8010494:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010498:	3001      	adds	r0, #1
 801049a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801049e:	eba1 0108 	sub.w	r1, r1, r8
 80104a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80104a6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80104aa:	f04f 0901 	mov.w	r9, #1
 80104ae:	e79b      	b.n	80103e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80104b0:	449c      	add	ip, r3
 80104b2:	1aff      	subs	r7, r7, r3
 80104b4:	f1b8 0f00 	cmp.w	r8, #0
 80104b8:	d009      	beq.n	80104ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80104ba:	9019      	str	r0, [sp, #100]	; 0x64
 80104bc:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80104c0:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80104c4:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80104c8:	911d      	str	r1, [sp, #116]	; 0x74
 80104ca:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80104ce:	1ad2      	subs	r2, r2, r3
 80104d0:	e68b      	b.n	80101ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80104d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80104d4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	f000 80d1 	beq.w	801067e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 80104dc:	ad19      	add	r5, sp, #100	; 0x64
 80104de:	ac39      	add	r4, sp, #228	; 0xe4
 80104e0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80104e2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80104e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80104ea:	930c      	str	r3, [sp, #48]	; 0x30
 80104ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80104ee:	6963      	ldr	r3, [r4, #20]
 80104f0:	440b      	add	r3, r1
 80104f2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80104f6:	4408      	add	r0, r1
 80104f8:	b200      	sxth	r0, r0
 80104fa:	4283      	cmp	r3, r0
 80104fc:	900d      	str	r0, [sp, #52]	; 0x34
 80104fe:	f280 80c1 	bge.w	8010684 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8010502:	428b      	cmp	r3, r1
 8010504:	da08      	bge.n	8010518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8010506:	2a00      	cmp	r2, #0
 8010508:	dd06      	ble.n	8010518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801050a:	1acb      	subs	r3, r1, r3
 801050c:	429a      	cmp	r2, r3
 801050e:	f2c0 80bb 	blt.w	8010688 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8010512:	2b00      	cmp	r3, #0
 8010514:	f300 80b9 	bgt.w	801068a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8010518:	6967      	ldr	r7, [r4, #20]
 801051a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 801051e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010520:	443b      	add	r3, r7
 8010522:	461f      	mov	r7, r3
 8010524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010526:	1bdf      	subs	r7, r3, r7
 8010528:	4297      	cmp	r7, r2
 801052a:	bfa8      	it	ge
 801052c:	4617      	movge	r7, r2
 801052e:	2f00      	cmp	r7, #0
 8010530:	f340 813c 	ble.w	80107ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8010534:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010536:	6829      	ldr	r1, [r5, #0]
 8010538:	f9b3 2000 	ldrsh.w	r2, [r3]
 801053c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010540:	4411      	add	r1, r2
 8010542:	6820      	ldr	r0, [r4, #0]
 8010544:	4299      	cmp	r1, r3
 8010546:	dd1a      	ble.n	801057e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010548:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801054c:	4402      	add	r2, r0
 801054e:	440b      	add	r3, r1
 8010550:	b21b      	sxth	r3, r3
 8010552:	429a      	cmp	r2, r3
 8010554:	dc13      	bgt.n	801057e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8010556:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010558:	a912      	add	r1, sp, #72	; 0x48
 801055a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801055c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	9206      	str	r2, [sp, #24]
 8010562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010564:	9500      	str	r5, [sp, #0]
 8010566:	9205      	str	r2, [sp, #20]
 8010568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801056a:	e9cd b203 	strd	fp, r2, [sp, #12]
 801056e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010570:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010574:	aa49      	add	r2, sp, #292	; 0x124
 8010576:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801057a:	4623      	mov	r3, r4
 801057c:	47c8      	blx	r9
 801057e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8010582:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010586:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801058a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801058e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010592:	68a1      	ldr	r1, [r4, #8]
 8010594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010598:	ed94 6a08 	vldr	s12, [r4, #32]
 801059c:	edd4 6a07 	vldr	s13, [r4, #28]
 80105a0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80105a4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80105a8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80105ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80105b0:	edc4 6a07 	vstr	s13, [r4, #28]
 80105b4:	441a      	add	r2, r3
 80105b6:	6963      	ldr	r3, [r4, #20]
 80105b8:	3301      	adds	r3, #1
 80105ba:	6022      	str	r2, [r4, #0]
 80105bc:	6163      	str	r3, [r4, #20]
 80105be:	69a3      	ldr	r3, [r4, #24]
 80105c0:	3b01      	subs	r3, #1
 80105c2:	61a3      	str	r3, [r4, #24]
 80105c4:	6923      	ldr	r3, [r4, #16]
 80105c6:	440b      	add	r3, r1
 80105c8:	68e1      	ldr	r1, [r4, #12]
 80105ca:	428b      	cmp	r3, r1
 80105cc:	6123      	str	r3, [r4, #16]
 80105ce:	db15      	blt.n	80105fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80105d0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80105d4:	3201      	adds	r2, #1
 80105d6:	1a5b      	subs	r3, r3, r1
 80105d8:	ee76 6a26 	vadd.f32	s13, s12, s13
 80105dc:	6022      	str	r2, [r4, #0]
 80105de:	6123      	str	r3, [r4, #16]
 80105e0:	edc4 6a07 	vstr	s13, [r4, #28]
 80105e4:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80105e8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80105ec:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80105f0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80105f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105f8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80105fc:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010600:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010604:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8010608:	ee37 7a27 	vadd.f32	s14, s14, s15
 801060c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010610:	68a9      	ldr	r1, [r5, #8]
 8010612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010616:	ed95 6a08 	vldr	s12, [r5, #32]
 801061a:	edd5 6a07 	vldr	s13, [r5, #28]
 801061e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010622:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010626:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801062a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801062e:	edc5 6a07 	vstr	s13, [r5, #28]
 8010632:	441a      	add	r2, r3
 8010634:	696b      	ldr	r3, [r5, #20]
 8010636:	3301      	adds	r3, #1
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	616b      	str	r3, [r5, #20]
 801063c:	69ab      	ldr	r3, [r5, #24]
 801063e:	3b01      	subs	r3, #1
 8010640:	61ab      	str	r3, [r5, #24]
 8010642:	692b      	ldr	r3, [r5, #16]
 8010644:	440b      	add	r3, r1
 8010646:	68e9      	ldr	r1, [r5, #12]
 8010648:	428b      	cmp	r3, r1
 801064a:	612b      	str	r3, [r5, #16]
 801064c:	db15      	blt.n	801067a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 801064e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010652:	3201      	adds	r2, #1
 8010654:	1a5b      	subs	r3, r3, r1
 8010656:	ee76 6a26 	vadd.f32	s13, s12, s13
 801065a:	602a      	str	r2, [r5, #0]
 801065c:	612b      	str	r3, [r5, #16]
 801065e:	edc5 6a07 	vstr	s13, [r5, #28]
 8010662:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8010666:	ee36 7a87 	vadd.f32	s14, s13, s14
 801066a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 801066e:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010676:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801067a:	3f01      	subs	r7, #1
 801067c:	e757      	b.n	801052e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 801067e:	ad39      	add	r5, sp, #228	; 0xe4
 8010680:	ac19      	add	r4, sp, #100	; 0x64
 8010682:	e72d      	b.n	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8010684:	4613      	mov	r3, r2
 8010686:	e744      	b.n	8010512 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8010688:	4613      	mov	r3, r2
 801068a:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 801068c:	469e      	mov	lr, r3
 801068e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8010692:	461f      	mov	r7, r3
 8010694:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8010698:	f04f 0900 	mov.w	r9, #0
 801069c:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80106a0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80106a4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80106a8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80106ac:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80106b0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80106b2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80106b6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80106ba:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80106be:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80106c2:	960e      	str	r6, [sp, #56]	; 0x38
 80106c4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80106c8:	2f00      	cmp	r7, #0
 80106ca:	d146      	bne.n	801075a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80106cc:	449c      	add	ip, r3
 80106ce:	1ad7      	subs	r7, r2, r3
 80106d0:	f1b9 0f00 	cmp.w	r9, #0
 80106d4:	d009      	beq.n	80106ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80106d6:	9039      	str	r0, [sp, #228]	; 0xe4
 80106d8:	913d      	str	r1, [sp, #244]	; 0xf4
 80106da:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 80106de:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 80106e2:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 80106e6:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 80106ea:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80106ec:	f04f 0800 	mov.w	r8, #0
 80106f0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80106f4:	910e      	str	r1, [sp, #56]	; 0x38
 80106f6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80106fa:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80106fe:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010702:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8010706:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801070a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801070e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010712:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8010716:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801071a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 801071e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010722:	f1be 0f00 	cmp.w	lr, #0
 8010726:	d030      	beq.n	801078a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8010728:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801072a:	4450      	add	r0, sl
 801072c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010730:	4431      	add	r1, r6
 8010732:	ee37 7a04 	vadd.f32	s14, s14, s8
 8010736:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801073a:	4549      	cmp	r1, r9
 801073c:	db08      	blt.n	8010750 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801073e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010742:	3001      	adds	r0, #1
 8010744:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010748:	eba1 0109 	sub.w	r1, r1, r9
 801074c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010750:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010754:	f04f 0801 	mov.w	r8, #1
 8010758:	e7e3      	b.n	8010722 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801075a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801075c:	4450      	add	r0, sl
 801075e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010762:	4431      	add	r1, r6
 8010764:	ee77 7a84 	vadd.f32	s15, s15, s8
 8010768:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801076c:	4541      	cmp	r1, r8
 801076e:	db08      	blt.n	8010782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8010770:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010774:	3001      	adds	r0, #1
 8010776:	ee37 7a25 	vadd.f32	s14, s14, s11
 801077a:	eba1 0108 	sub.w	r1, r1, r8
 801077e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010782:	3f01      	subs	r7, #1
 8010784:	f04f 0901 	mov.w	r9, #1
 8010788:	e79e      	b.n	80106c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801078a:	449c      	add	ip, r3
 801078c:	1aff      	subs	r7, r7, r3
 801078e:	f1b8 0f00 	cmp.w	r8, #0
 8010792:	d009      	beq.n	80107a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8010794:	9019      	str	r0, [sp, #100]	; 0x64
 8010796:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801079a:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 801079e:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80107a2:	911d      	str	r1, [sp, #116]	; 0x74
 80107a4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80107a8:	1ad2      	subs	r2, r2, r3
 80107aa:	e6b5      	b.n	8010518 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80107ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	b923      	cbnz	r3, 80107bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80107b2:	4b04      	ldr	r3, [pc, #16]	; (80107c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80107b4:	6818      	ldr	r0, [r3, #0]
 80107b6:	6803      	ldr	r3, [r0, #0]
 80107b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ba:	4798      	blx	r3
 80107bc:	b05b      	add	sp, #364	; 0x16c
 80107be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c2:	bf00      	nop
 80107c4:	2401aa78 	.word	0x2401aa78

080107c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	4604      	mov	r4, r0
 80107cc:	2500      	movs	r5, #0
 80107ce:	9805      	ldr	r0, [sp, #20]
 80107d0:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80107d4:	6061      	str	r1, [r4, #4]
 80107d6:	8263      	strh	r3, [r4, #18]
 80107d8:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80107dc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80107e0:	8025      	strh	r5, [r4, #0]
 80107e2:	7221      	strb	r1, [r4, #8]
 80107e4:	7266      	strb	r6, [r4, #9]
 80107e6:	60e0      	str	r0, [r4, #12]
 80107e8:	8222      	strh	r2, [r4, #16]
 80107ea:	82a3      	strh	r3, [r4, #20]
 80107ec:	82e5      	strh	r5, [r4, #22]
 80107ee:	8325      	strh	r5, [r4, #24]
 80107f0:	8365      	strh	r5, [r4, #26]
 80107f2:	83a5      	strh	r5, [r4, #28]
 80107f4:	83e5      	strh	r5, [r4, #30]
 80107f6:	8425      	strh	r5, [r4, #32]
 80107f8:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 80107fc:	b32e      	cbz	r6, 801084a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 80107fe:	6803      	ldr	r3, [r0, #0]
 8010800:	695b      	ldr	r3, [r3, #20]
 8010802:	4798      	blx	r3
 8010804:	4606      	mov	r6, r0
 8010806:	b300      	cbz	r0, 801084a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010808:	68e0      	ldr	r0, [r4, #12]
 801080a:	4631      	mov	r1, r6
 801080c:	6803      	ldr	r3, [r0, #0]
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	4798      	blx	r3
 8010812:	4605      	mov	r5, r0
 8010814:	b1c8      	cbz	r0, 801084a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010816:	7b43      	ldrb	r3, [r0, #13]
 8010818:	7a82      	ldrb	r2, [r0, #10]
 801081a:	005b      	lsls	r3, r3, #1
 801081c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010820:	4313      	orrs	r3, r2
 8010822:	8423      	strh	r3, [r4, #32]
 8010824:	7a63      	ldrb	r3, [r4, #9]
 8010826:	2b06      	cmp	r3, #6
 8010828:	d10f      	bne.n	801084a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801082a:	68e0      	ldr	r0, [r4, #12]
 801082c:	462a      	mov	r2, r5
 801082e:	4631      	mov	r1, r6
 8010830:	6803      	ldr	r3, [r0, #0]
 8010832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010834:	4798      	blx	r3
 8010836:	7b6b      	ldrb	r3, [r5, #13]
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801083e:	7aab      	ldrb	r3, [r5, #10]
 8010840:	4313      	orrs	r3, r2
 8010842:	4418      	add	r0, r3
 8010844:	8c23      	ldrh	r3, [r4, #32]
 8010846:	4418      	add	r0, r3
 8010848:	8420      	strh	r0, [r4, #32]
 801084a:	4620      	mov	r0, r4
 801084c:	bd70      	pop	{r4, r5, r6, pc}

0801084e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801084e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010852:	2400      	movs	r4, #0
 8010854:	b085      	sub	sp, #20
 8010856:	4681      	mov	r9, r0
 8010858:	4688      	mov	r8, r1
 801085a:	4692      	mov	sl, r2
 801085c:	469b      	mov	fp, r3
 801085e:	4627      	mov	r7, r4
 8010860:	4625      	mov	r5, r4
 8010862:	4626      	mov	r6, r4
 8010864:	4554      	cmp	r4, sl
 8010866:	da2a      	bge.n	80108be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010868:	2300      	movs	r3, #0
 801086a:	9303      	str	r3, [sp, #12]
 801086c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010870:	429d      	cmp	r5, r3
 8010872:	d004      	beq.n	801087e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8010874:	f242 030b 	movw	r3, #8203	; 0x200b
 8010878:	429d      	cmp	r5, r3
 801087a:	bf18      	it	ne
 801087c:	462f      	movne	r7, r5
 801087e:	ab03      	add	r3, sp, #12
 8010880:	4642      	mov	r2, r8
 8010882:	4659      	mov	r1, fp
 8010884:	4648      	mov	r0, r9
 8010886:	f002 ffc3 	bl	8013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801088a:	4605      	mov	r5, r0
 801088c:	b1b8      	cbz	r0, 80108be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801088e:	280a      	cmp	r0, #10
 8010890:	d015      	beq.n	80108be <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8010892:	9a03      	ldr	r2, [sp, #12]
 8010894:	b18a      	cbz	r2, 80108ba <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8010896:	7b50      	ldrb	r0, [r2, #13]
 8010898:	4639      	mov	r1, r7
 801089a:	7a93      	ldrb	r3, [r2, #10]
 801089c:	0040      	lsls	r0, r0, #1
 801089e:	8895      	ldrh	r5, [r2, #4]
 80108a0:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80108a4:	4303      	orrs	r3, r0
 80108a6:	4640      	mov	r0, r8
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	f8d8 3000 	ldr.w	r3, [r8]
 80108ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108b0:	4798      	blx	r3
 80108b2:	9b01      	ldr	r3, [sp, #4]
 80108b4:	4418      	add	r0, r3
 80108b6:	4406      	add	r6, r0
 80108b8:	b2b6      	uxth	r6, r6
 80108ba:	3401      	adds	r4, #1
 80108bc:	e7d2      	b.n	8010864 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80108be:	4630      	mov	r0, r6
 80108c0:	b005      	add	sp, #20
 80108c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080108c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80108c6:	2a02      	cmp	r2, #2
 80108c8:	b530      	push	{r4, r5, lr}
 80108ca:	d011      	beq.n	80108f0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80108cc:	2a03      	cmp	r2, #3
 80108ce:	d01c      	beq.n	801090a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80108d0:	2a01      	cmp	r2, #1
 80108d2:	d10c      	bne.n	80108ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80108d4:	888b      	ldrh	r3, [r1, #4]
 80108d6:	8801      	ldrh	r1, [r0, #0]
 80108d8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80108dc:	1a5b      	subs	r3, r3, r1
 80108de:	8844      	ldrh	r4, [r0, #2]
 80108e0:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80108e4:	1a9b      	subs	r3, r3, r2
 80108e6:	8004      	strh	r4, [r0, #0]
 80108e8:	8081      	strh	r1, [r0, #4]
 80108ea:	8043      	strh	r3, [r0, #2]
 80108ec:	80c2      	strh	r2, [r0, #6]
 80108ee:	bd30      	pop	{r4, r5, pc}
 80108f0:	88cb      	ldrh	r3, [r1, #6]
 80108f2:	8842      	ldrh	r2, [r0, #2]
 80108f4:	1a9b      	subs	r3, r3, r2
 80108f6:	88c2      	ldrh	r2, [r0, #6]
 80108f8:	1a9b      	subs	r3, r3, r2
 80108fa:	888a      	ldrh	r2, [r1, #4]
 80108fc:	8801      	ldrh	r1, [r0, #0]
 80108fe:	8043      	strh	r3, [r0, #2]
 8010900:	1a52      	subs	r2, r2, r1
 8010902:	8881      	ldrh	r1, [r0, #4]
 8010904:	1a52      	subs	r2, r2, r1
 8010906:	8002      	strh	r2, [r0, #0]
 8010908:	e7f1      	b.n	80108ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801090a:	88cb      	ldrh	r3, [r1, #6]
 801090c:	8841      	ldrh	r1, [r0, #2]
 801090e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010912:	1a5b      	subs	r3, r3, r1
 8010914:	f9b0 5000 	ldrsh.w	r5, [r0]
 8010918:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801091c:	1a9b      	subs	r3, r3, r2
 801091e:	8045      	strh	r5, [r0, #2]
 8010920:	8082      	strh	r2, [r0, #4]
 8010922:	8003      	strh	r3, [r0, #0]
 8010924:	80c4      	strh	r4, [r0, #6]
 8010926:	e7e2      	b.n	80108ee <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08010928 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8010928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092c:	b09f      	sub	sp, #124	; 0x7c
 801092e:	9116      	str	r1, [sp, #88]	; 0x58
 8010930:	9317      	str	r3, [sp, #92]	; 0x5c
 8010932:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010934:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010936:	8809      	ldrh	r1, [r1, #0]
 8010938:	889b      	ldrh	r3, [r3, #4]
 801093a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801093e:	440b      	add	r3, r1
 8010940:	9212      	str	r2, [sp, #72]	; 0x48
 8010942:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8010946:	b21b      	sxth	r3, r3
 8010948:	9011      	str	r0, [sp, #68]	; 0x44
 801094a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801094e:	9310      	str	r3, [sp, #64]	; 0x40
 8010950:	f8d8 3000 	ldr.w	r3, [r8]
 8010954:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 8010958:	7b19      	ldrb	r1, [r3, #12]
 801095a:	7adb      	ldrb	r3, [r3, #11]
 801095c:	9114      	str	r1, [sp, #80]	; 0x50
 801095e:	9315      	str	r3, [sp, #84]	; 0x54
 8010960:	2a00      	cmp	r2, #0
 8010962:	d06a      	beq.n	8010a3a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8010964:	f898 3010 	ldrb.w	r3, [r8, #16]
 8010968:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801096a:	2b06      	cmp	r3, #6
 801096c:	bf14      	ite	ne
 801096e:	2301      	movne	r3, #1
 8010970:	2302      	moveq	r3, #2
 8010972:	4413      	add	r3, r2
 8010974:	f04f 0900 	mov.w	r9, #0
 8010978:	930f      	str	r3, [sp, #60]	; 0x3c
 801097a:	464c      	mov	r4, r9
 801097c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8010980:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8010984:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8010988:	4293      	cmp	r3, r2
 801098a:	f280 808f 	bge.w	8010aac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801098e:	2300      	movs	r3, #0
 8010990:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8010994:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8010998:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801099c:	429c      	cmp	r4, r3
 801099e:	d006      	beq.n	80109ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80109a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80109a2:	f242 020b 	movw	r2, #8203	; 0x200b
 80109a6:	4294      	cmp	r4, r2
 80109a8:	bf18      	it	ne
 80109aa:	4623      	movne	r3, r4
 80109ac:	930d      	str	r3, [sp, #52]	; 0x34
 80109ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80109b0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80109b2:	f8d8 2000 	ldr.w	r2, [r8]
 80109b6:	428b      	cmp	r3, r1
 80109b8:	db41      	blt.n	8010a3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80109ba:	6813      	ldr	r3, [r2, #0]
 80109bc:	4610      	mov	r0, r2
 80109be:	695b      	ldr	r3, [r3, #20]
 80109c0:	4798      	blx	r3
 80109c2:	4604      	mov	r4, r0
 80109c4:	f8d8 0000 	ldr.w	r0, [r8]
 80109c8:	aa1d      	add	r2, sp, #116	; 0x74
 80109ca:	4621      	mov	r1, r4
 80109cc:	6803      	ldr	r3, [r0, #0]
 80109ce:	689d      	ldr	r5, [r3, #8]
 80109d0:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80109d4:	47a8      	blx	r5
 80109d6:	901c      	str	r0, [sp, #112]	; 0x70
 80109d8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80109dc:	429c      	cmp	r4, r3
 80109de:	f000 80ec 	beq.w	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80109e2:	f242 030b 	movw	r3, #8203	; 0x200b
 80109e6:	429c      	cmp	r4, r3
 80109e8:	f000 80e7 	beq.w	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80109ec:	2c00      	cmp	r4, #0
 80109ee:	f000 80f9 	beq.w	8010be4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80109f2:	2c0a      	cmp	r4, #10
 80109f4:	d060      	beq.n	8010ab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80109f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80109f8:	b36a      	cbz	r2, 8010a56 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80109fa:	8894      	ldrh	r4, [r2, #4]
 80109fc:	f1bb 0f00 	cmp.w	fp, #0
 8010a00:	d03b      	beq.n	8010a7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8010a02:	f892 900d 	ldrb.w	r9, [r2, #13]
 8010a06:	f1bb 0f01 	cmp.w	fp, #1
 8010a0a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8010a0e:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8010a12:	f892 900a 	ldrb.w	r9, [r2, #10]
 8010a16:	ea49 0903 	orr.w	r9, r9, r3
 8010a1a:	d134      	bne.n	8010a86 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8010a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a1e:	eba6 0609 	sub.w	r6, r6, r9
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d14f      	bne.n	8010ac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8010a26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010a28:	eb09 0306 	add.w	r3, r9, r6
 8010a2c:	4413      	add	r3, r2
 8010a2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010a30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010a34:	4293      	cmp	r3, r2
 8010a36:	da51      	bge.n	8010adc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8010a38:	e038      	b.n	8010aac <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8010a3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010a3c:	e79a      	b.n	8010974 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8010a3e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8010a42:	4659      	mov	r1, fp
 8010a44:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8010a46:	9301      	str	r3, [sp, #4]
 8010a48:	ab1d      	add	r3, sp, #116	; 0x74
 8010a4a:	9300      	str	r3, [sp, #0]
 8010a4c:	ab1c      	add	r3, sp, #112	; 0x70
 8010a4e:	f002 ff28 	bl	80138a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8010a52:	4604      	mov	r4, r0
 8010a54:	e7c0      	b.n	80109d8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8010a56:	f8d8 0000 	ldr.w	r0, [r8]
 8010a5a:	6803      	ldr	r3, [r0, #0]
 8010a5c:	691b      	ldr	r3, [r3, #16]
 8010a5e:	4798      	blx	r3
 8010a60:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010a64:	4298      	cmp	r0, r3
 8010a66:	f000 80a8 	beq.w	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010a6a:	f242 030b 	movw	r3, #8203	; 0x200b
 8010a6e:	4298      	cmp	r0, r3
 8010a70:	f000 80a3 	beq.w	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010a74:	f1bb 0f00 	cmp.w	fp, #0
 8010a78:	d100      	bne.n	8010a7c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8010a7a:	444e      	add	r6, r9
 8010a7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010a7e:	2a00      	cmp	r2, #0
 8010a80:	d1bf      	bne.n	8010a02 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8010a82:	4691      	mov	r9, r2
 8010a84:	e099      	b.n	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010a86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	f000 80ad 	beq.w	8010be8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 8010a8e:	f1bb 0f00 	cmp.w	fp, #0
 8010a92:	d118      	bne.n	8010ac6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8010a94:	f8d8 0000 	ldr.w	r0, [r8]
 8010a98:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010a9a:	6803      	ldr	r3, [r0, #0]
 8010a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a9e:	4798      	blx	r3
 8010aa0:	4406      	add	r6, r0
 8010aa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010aa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010aa6:	1af3      	subs	r3, r6, r3
 8010aa8:	4293      	cmp	r3, r2
 8010aaa:	dd17      	ble.n	8010adc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8010aac:	2c00      	cmp	r4, #0
 8010aae:	f000 8099 	beq.w	8010be4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8010ab2:	2c0a      	cmp	r4, #10
 8010ab4:	f040 8087 	bne.w	8010bc6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 8010ab8:	240a      	movs	r4, #10
 8010aba:	fab4 f084 	clz	r0, r4
 8010abe:	0940      	lsrs	r0, r0, #5
 8010ac0:	b01f      	add	sp, #124	; 0x7c
 8010ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ac6:	f8d8 0000 	ldr.w	r0, [r8]
 8010aca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010acc:	6803      	ldr	r3, [r0, #0]
 8010ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad0:	4798      	blx	r3
 8010ad2:	f1bb 0f01 	cmp.w	fp, #1
 8010ad6:	eba6 0600 	sub.w	r6, r6, r0
 8010ada:	d0a4      	beq.n	8010a26 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8010adc:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010ade:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010ae0:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8010ae4:	f9b3 7000 	ldrsh.w	r7, [r3]
 8010ae8:	7b43      	ldrb	r3, [r0, #13]
 8010aea:	4431      	add	r1, r6
 8010aec:	015b      	lsls	r3, r3, #5
 8010aee:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010af2:	7983      	ldrb	r3, [r0, #6]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	440b      	add	r3, r1
 8010af8:	42bb      	cmp	r3, r7
 8010afa:	db5e      	blt.n	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010afe:	4299      	cmp	r1, r3
 8010b00:	da5b      	bge.n	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010b02:	f8d8 0000 	ldr.w	r0, [r8]
 8010b06:	42b7      	cmp	r7, r6
 8010b08:	6803      	ldr	r3, [r0, #0]
 8010b0a:	bfcc      	ite	gt
 8010b0c:	1bbf      	subgt	r7, r7, r6
 8010b0e:	2700      	movle	r7, #0
 8010b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b12:	bfc8      	it	gt
 8010b14:	b2bf      	uxthgt	r7, r7
 8010b16:	4798      	blx	r3
 8010b18:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8010b1a:	7b5a      	ldrb	r2, [r3, #13]
 8010b1c:	00d1      	lsls	r1, r2, #3
 8010b1e:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8010b22:	7a19      	ldrb	r1, [r3, #8]
 8010b24:	4329      	orrs	r1, r5
 8010b26:	0655      	lsls	r5, r2, #25
 8010b28:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8010b2a:	bf48      	it	mi
 8010b2c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8010b30:	4405      	add	r5, r0
 8010b32:	bf48      	it	mi
 8010b34:	b209      	sxthmi	r1, r1
 8010b36:	1a6d      	subs	r5, r5, r1
 8010b38:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010b3a:	b2ad      	uxth	r5, r5
 8010b3c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8010b40:	fa0f fa85 	sxth.w	sl, r5
 8010b44:	4551      	cmp	r1, sl
 8010b46:	dd3c      	ble.n	8010bc2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 8010b48:	0112      	lsls	r2, r2, #4
 8010b4a:	79d8      	ldrb	r0, [r3, #7]
 8010b4c:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010b50:	4302      	orrs	r2, r0
 8010b52:	4492      	add	sl, r2
 8010b54:	4551      	cmp	r1, sl
 8010b56:	dc30      	bgt.n	8010bba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010b58:	1b4d      	subs	r5, r1, r5
 8010b5a:	468a      	mov	sl, r1
 8010b5c:	b22d      	sxth	r5, r5
 8010b5e:	9319      	str	r3, [sp, #100]	; 0x64
 8010b60:	b2ad      	uxth	r5, r5
 8010b62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b64:	f8d8 0000 	ldr.w	r0, [r8]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	6801      	ldr	r1, [r0, #0]
 8010b6c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010b6e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010b70:	9313      	str	r3, [sp, #76]	; 0x4c
 8010b72:	9218      	str	r2, [sp, #96]	; 0x60
 8010b74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010b76:	4788      	blx	r1
 8010b78:	f898 1006 	ldrb.w	r1, [r8, #6]
 8010b7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010b7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8010b80:	f898 100e 	ldrb.w	r1, [r8, #14]
 8010b84:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010b86:	910a      	str	r1, [sp, #40]	; 0x28
 8010b88:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8010b8c:	9109      	str	r1, [sp, #36]	; 0x24
 8010b8e:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010b92:	9305      	str	r3, [sp, #20]
 8010b94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010b96:	9206      	str	r2, [sp, #24]
 8010b98:	9304      	str	r3, [sp, #16]
 8010b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b9c:	f8cd a004 	str.w	sl, [sp, #4]
 8010ba0:	e9cd 7502 	strd	r7, r5, [sp, #8]
 8010ba4:	4437      	add	r7, r6
 8010ba6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8010ba8:	b23f      	sxth	r7, r7
 8010baa:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8010bae:	9700      	str	r7, [sp, #0]
 8010bb0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8010bb6:	685b      	ldr	r3, [r3, #4]
 8010bb8:	47a8      	blx	r5
 8010bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	930e      	str	r3, [sp, #56]	; 0x38
 8010bc0:	e6e0      	b.n	8010984 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8010bc2:	2500      	movs	r5, #0
 8010bc4:	e7cb      	b.n	8010b5e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8010bc6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010bc8:	3501      	adds	r5, #1
 8010bca:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010bcc:	429d      	cmp	r5, r3
 8010bce:	f6bf af74 	bge.w	8010aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8010bd2:	4659      	mov	r1, fp
 8010bd4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8010bd6:	f7fa fea7 	bl	800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010bda:	4604      	mov	r4, r0
 8010bdc:	b110      	cbz	r0, 8010be4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8010bde:	280a      	cmp	r0, #10
 8010be0:	d1f2      	bne.n	8010bc8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8010be2:	e769      	b.n	8010ab8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8010be4:	2400      	movs	r4, #0
 8010be6:	e768      	b.n	8010aba <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8010be8:	f1bb 0f00 	cmp.w	fp, #0
 8010bec:	f43f af59 	beq.w	8010aa2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8010bf0:	e774      	b.n	8010adc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08010bf2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8010bf2:	b530      	push	{r4, r5, lr}
 8010bf4:	8ac4      	ldrh	r4, [r0, #22]
 8010bf6:	8b45      	ldrh	r5, [r0, #26]
 8010bf8:	8343      	strh	r3, [r0, #26]
 8010bfa:	442c      	add	r4, r5
 8010bfc:	1ae4      	subs	r4, r4, r3
 8010bfe:	8b83      	ldrh	r3, [r0, #28]
 8010c00:	82c4      	strh	r4, [r0, #22]
 8010c02:	8b04      	ldrh	r4, [r0, #24]
 8010c04:	4422      	add	r2, r4
 8010c06:	440c      	add	r4, r1
 8010c08:	1a59      	subs	r1, r3, r1
 8010c0a:	83c2      	strh	r2, [r0, #30]
 8010c0c:	8304      	strh	r4, [r0, #24]
 8010c0e:	8381      	strh	r1, [r0, #28]
 8010c10:	bd30      	pop	{r4, r5, pc}

08010c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8010c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c16:	4604      	mov	r4, r0
 8010c18:	8a47      	ldrh	r7, [r0, #18]
 8010c1a:	68c0      	ldr	r0, [r0, #12]
 8010c1c:	b085      	sub	sp, #20
 8010c1e:	6803      	ldr	r3, [r0, #0]
 8010c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c22:	4798      	blx	r3
 8010c24:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8010c28:	7a63      	ldrb	r3, [r4, #9]
 8010c2a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	42b7      	cmp	r7, r6
 8010c32:	bfac      	ite	ge
 8010c34:	f04f 0900 	movge.w	r9, #0
 8010c38:	f04f 0901 	movlt.w	r9, #1
 8010c3c:	2b05      	cmp	r3, #5
 8010c3e:	d804      	bhi.n	8010c4a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8010c40:	e8df f003 	tbb	[pc, r3]
 8010c44:	470f0854 	.word	0x470f0854
 8010c48:	4c4c      	.short	0x4c4c
 8010c4a:	2500      	movs	r5, #0
 8010c4c:	46a9      	mov	r9, r5
 8010c4e:	462e      	mov	r6, r5
 8010c50:	462f      	mov	r7, r5
 8010c52:	e00e      	b.n	8010c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8010c54:	42b7      	cmp	r7, r6
 8010c56:	f04f 0500 	mov.w	r5, #0
 8010c5a:	bfb4      	ite	lt
 8010c5c:	2600      	movlt	r6, #0
 8010c5e:	2601      	movge	r6, #1
 8010c60:	e7f6      	b.n	8010c50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8010c62:	42b7      	cmp	r7, r6
 8010c64:	464d      	mov	r5, r9
 8010c66:	f04f 0900 	mov.w	r9, #0
 8010c6a:	bfb4      	ite	lt
 8010c6c:	2600      	movlt	r6, #0
 8010c6e:	2601      	movge	r6, #1
 8010c70:	464f      	mov	r7, r9
 8010c72:	f04f 0800 	mov.w	r8, #0
 8010c76:	f8a4 8016 	strh.w	r8, [r4, #22]
 8010c7a:	f8a4 8018 	strh.w	r8, [r4, #24]
 8010c7e:	f8cd 8004 	str.w	r8, [sp, #4]
 8010c82:	2300      	movs	r3, #0
 8010c84:	9303      	str	r3, [sp, #12]
 8010c86:	8823      	ldrh	r3, [r4, #0]
 8010c88:	2b20      	cmp	r3, #32
 8010c8a:	d033      	beq.n	8010cf4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8010c8c:	f242 010b 	movw	r1, #8203	; 0x200b
 8010c90:	1a5a      	subs	r2, r3, r1
 8010c92:	f1d2 0a00 	rsbs	sl, r2, #0
 8010c96:	eb4a 0a02 	adc.w	sl, sl, r2
 8010c9a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d008      	beq.n	8010cb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8010ca2:	428b      	cmp	r3, r1
 8010ca4:	9a01      	ldr	r2, [sp, #4]
 8010ca6:	bf0e      	itee	eq
 8010ca8:	f04f 0a01 	moveq.w	sl, #1
 8010cac:	461a      	movne	r2, r3
 8010cae:	f04f 0a00 	movne.w	sl, #0
 8010cb2:	9201      	str	r2, [sp, #4]
 8010cb4:	ab03      	add	r3, sp, #12
 8010cb6:	68e2      	ldr	r2, [r4, #12]
 8010cb8:	7a21      	ldrb	r1, [r4, #8]
 8010cba:	6860      	ldr	r0, [r4, #4]
 8010cbc:	f002 fda8 	bl	8013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010cc0:	8020      	strh	r0, [r4, #0]
 8010cc2:	b9d8      	cbnz	r0, 8010cfc <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 8010cc4:	8ba2      	ldrh	r2, [r4, #28]
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	4611      	mov	r1, r2
 8010cca:	4620      	mov	r0, r4
 8010ccc:	f7ff ff91 	bl	8010bf2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010cd0:	e06e      	b.n	8010db0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8010cd2:	2500      	movs	r5, #0
 8010cd4:	2701      	movs	r7, #1
 8010cd6:	46a9      	mov	r9, r5
 8010cd8:	462e      	mov	r6, r5
 8010cda:	e7ca      	b.n	8010c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8010cdc:	42b7      	cmp	r7, r6
 8010cde:	f04f 0500 	mov.w	r5, #0
 8010ce2:	bfb4      	ite	lt
 8010ce4:	2700      	movlt	r7, #0
 8010ce6:	2701      	movge	r7, #1
 8010ce8:	462e      	mov	r6, r5
 8010cea:	e7c2      	b.n	8010c72 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8010cec:	2500      	movs	r5, #0
 8010cee:	2601      	movs	r6, #1
 8010cf0:	46a9      	mov	r9, r5
 8010cf2:	e7ad      	b.n	8010c50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8010cf4:	9301      	str	r3, [sp, #4]
 8010cf6:	f04f 0a01 	mov.w	sl, #1
 8010cfa:	e7db      	b.n	8010cb4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8010cfc:	8b63      	ldrh	r3, [r4, #26]
 8010cfe:	280a      	cmp	r0, #10
 8010d00:	f103 0301 	add.w	r3, r3, #1
 8010d04:	8363      	strh	r3, [r4, #26]
 8010d06:	d0dd      	beq.n	8010cc4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8010d08:	9a03      	ldr	r2, [sp, #12]
 8010d0a:	bb62      	cbnz	r2, 8010d66 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8010d0c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010d10:	4298      	cmp	r0, r3
 8010d12:	d003      	beq.n	8010d1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8010d14:	f242 030b 	movw	r3, #8203	; 0x200b
 8010d18:	4298      	cmp	r0, r3
 8010d1a:	d1b2      	bne.n	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010d1c:	8823      	ldrh	r3, [r4, #0]
 8010d1e:	8ba1      	ldrh	r1, [r4, #28]
 8010d20:	2b20      	cmp	r3, #32
 8010d22:	d003      	beq.n	8010d2c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8010d24:	f242 000b 	movw	r0, #8203	; 0x200b
 8010d28:	4283      	cmp	r3, r0
 8010d2a:	d131      	bne.n	8010d90 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8010d2c:	f1ba 0f00 	cmp.w	sl, #0
 8010d30:	bf0a      	itet	eq
 8010d32:	4688      	moveq	r8, r1
 8010d34:	4650      	movne	r0, sl
 8010d36:	2001      	moveq	r0, #1
 8010d38:	440a      	add	r2, r1
 8010d3a:	8b23      	ldrh	r3, [r4, #24]
 8010d3c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8010d40:	b292      	uxth	r2, r2
 8010d42:	83a2      	strh	r2, [r4, #28]
 8010d44:	4413      	add	r3, r2
 8010d46:	f1b9 0f00 	cmp.w	r9, #0
 8010d4a:	d102      	bne.n	8010d52 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8010d4c:	2d00      	cmp	r5, #0
 8010d4e:	d042      	beq.n	8010dd6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8010d50:	b300      	cbz	r0, 8010d94 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8010d52:	8c21      	ldrh	r1, [r4, #32]
 8010d54:	4419      	add	r1, r3
 8010d56:	458c      	cmp	ip, r1
 8010d58:	da37      	bge.n	8010dca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8010d5a:	8ae1      	ldrh	r1, [r4, #22]
 8010d5c:	2900      	cmp	r1, #0
 8010d5e:	d034      	beq.n	8010dca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8010d60:	4563      	cmp	r3, ip
 8010d62:	dd8e      	ble.n	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010d64:	e01d      	b.n	8010da2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8010d66:	8893      	ldrh	r3, [r2, #4]
 8010d68:	9901      	ldr	r1, [sp, #4]
 8010d6a:	8023      	strh	r3, [r4, #0]
 8010d6c:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8010d70:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8010d74:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8010d78:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8010d7c:	ea4b 0b00 	orr.w	fp, fp, r0
 8010d80:	68e0      	ldr	r0, [r4, #12]
 8010d82:	6803      	ldr	r3, [r0, #0]
 8010d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d86:	4798      	blx	r3
 8010d88:	eb0b 0200 	add.w	r2, fp, r0
 8010d8c:	b292      	uxth	r2, r2
 8010d8e:	e7c5      	b.n	8010d1c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8010d90:	2000      	movs	r0, #0
 8010d92:	e7d1      	b.n	8010d38 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8010d94:	4563      	cmp	r3, ip
 8010d96:	f77f af74 	ble.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010d9a:	8ae3      	ldrh	r3, [r4, #22]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	f43f af70 	beq.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010da2:	2301      	movs	r3, #1
 8010da4:	8c22      	ldrh	r2, [r4, #32]
 8010da6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8010daa:	8be3      	ldrh	r3, [r4, #30]
 8010dac:	4413      	add	r3, r2
 8010dae:	83e3      	strh	r3, [r4, #30]
 8010db0:	68e0      	ldr	r0, [r4, #12]
 8010db2:	6803      	ldr	r3, [r0, #0]
 8010db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db6:	4798      	blx	r3
 8010db8:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8010dbc:	4418      	add	r0, r3
 8010dbe:	8a63      	ldrh	r3, [r4, #18]
 8010dc0:	1a18      	subs	r0, r3, r0
 8010dc2:	8260      	strh	r0, [r4, #18]
 8010dc4:	b005      	add	sp, #20
 8010dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dca:	2300      	movs	r3, #0
 8010dcc:	4611      	mov	r1, r2
 8010dce:	4620      	mov	r0, r4
 8010dd0:	f7ff ff0f 	bl	8010bf2 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010dd4:	e755      	b.n	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010dd6:	4563      	cmp	r3, ip
 8010dd8:	dd14      	ble.n	8010e04 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8010dda:	b117      	cbz	r7, 8010de2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	460a      	mov	r2, r1
 8010de0:	e772      	b.n	8010cc8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8010de2:	2e00      	cmp	r6, #0
 8010de4:	f43f af4d 	beq.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010de8:	2800      	cmp	r0, #0
 8010dea:	f47f af4a 	bne.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010dee:	f1ba 0f00 	cmp.w	sl, #0
 8010df2:	d002      	beq.n	8010dfa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8010df4:	2301      	movs	r3, #1
 8010df6:	4642      	mov	r2, r8
 8010df8:	e767      	b.n	8010cca <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8010dfa:	8ae3      	ldrh	r3, [r4, #22]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f43f af40 	beq.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010e02:	e7d5      	b.n	8010db0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8010e04:	2800      	cmp	r0, #0
 8010e06:	f47f af3c 	bne.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010e0a:	f1ba 0f00 	cmp.w	sl, #0
 8010e0e:	f43f af38 	beq.w	8010c82 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010e12:	2301      	movs	r3, #1
 8010e14:	4642      	mov	r2, r8
 8010e16:	e7da      	b.n	8010dce <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08010e18 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8010e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	b08f      	sub	sp, #60	; 0x3c
 8010e1e:	4617      	mov	r7, r2
 8010e20:	461c      	mov	r4, r3
 8010e22:	460e      	mov	r6, r1
 8010e24:	b1d1      	cbz	r1, 8010e5c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	4620      	mov	r0, r4
 8010e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e2c:	4798      	blx	r3
 8010e2e:	4240      	negs	r0, r0
 8010e30:	9603      	str	r6, [sp, #12]
 8010e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e36:	b200      	sxth	r0, r0
 8010e38:	9700      	str	r7, [sp, #0]
 8010e3a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8010e3e:	4629      	mov	r1, r5
 8010e40:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8010e44:	2401      	movs	r4, #1
 8010e46:	a805      	add	r0, sp, #20
 8010e48:	f7ff fcbe 	bl	80107c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8010e4c:	a805      	add	r0, sp, #20
 8010e4e:	f7ff fee0 	bl	8010c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8010e52:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010e56:	b163      	cbz	r3, 8010e72 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8010e58:	3401      	adds	r4, #1
 8010e5a:	e7f7      	b.n	8010e4c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8010e5c:	2401      	movs	r4, #1
 8010e5e:	f002 fda3 	bl	80139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010e62:	280a      	cmp	r0, #10
 8010e64:	4628      	mov	r0, r5
 8010e66:	bf08      	it	eq
 8010e68:	3401      	addeq	r4, #1
 8010e6a:	f002 fd9d 	bl	80139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d1f7      	bne.n	8010e62 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8010e72:	b2a0      	uxth	r0, r4
 8010e74:	b00f      	add	sp, #60	; 0x3c
 8010e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010e78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8010e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e7c:	b0e3      	sub	sp, #396	; 0x18c
 8010e7e:	461c      	mov	r4, r3
 8010e80:	4683      	mov	fp, r0
 8010e82:	4688      	mov	r8, r1
 8010e84:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	f000 8112 	beq.w	80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010e8c:	6823      	ldr	r3, [r4, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f000 810e 	beq.w	80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010e94:	7ba3      	ldrb	r3, [r4, #14]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f000 810a 	beq.w	80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010e9c:	ad0a      	add	r5, sp, #40	; 0x28
 8010e9e:	6810      	ldr	r0, [r2, #0]
 8010ea0:	6851      	ldr	r1, [r2, #4]
 8010ea2:	462b      	mov	r3, r5
 8010ea4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8010ea8:	c303      	stmia	r3!, {r0, r1}
 8010eaa:	2100      	movs	r1, #0
 8010eac:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8010eb0:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	910c      	str	r1, [sp, #48]	; 0x30
 8010eb8:	a90c      	add	r1, sp, #48	; 0x30
 8010eba:	79a2      	ldrb	r2, [r4, #6]
 8010ebc:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010ec0:	f7ff fd01 	bl	80108c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010ec4:	a90c      	add	r1, sp, #48	; 0x30
 8010ec6:	79a2      	ldrb	r2, [r4, #6]
 8010ec8:	4608      	mov	r0, r1
 8010eca:	f7ff fcfc 	bl	80108c6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010ece:	a817      	add	r0, sp, #92	; 0x5c
 8010ed0:	f002 f93e 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 8010ed4:	6820      	ldr	r0, [r4, #0]
 8010ed6:	6803      	ldr	r3, [r0, #0]
 8010ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eda:	4798      	blx	r3
 8010edc:	4606      	mov	r6, r0
 8010ede:	6820      	ldr	r0, [r4, #0]
 8010ee0:	6803      	ldr	r3, [r0, #0]
 8010ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ee4:	4798      	blx	r3
 8010ee6:	4633      	mov	r3, r6
 8010ee8:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8010eea:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8010eec:	9000      	str	r0, [sp, #0]
 8010eee:	a817      	add	r0, sp, #92	; 0x5c
 8010ef0:	f002 f989 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010ef4:	6820      	ldr	r0, [r4, #0]
 8010ef6:	f894 a004 	ldrb.w	sl, [r4, #4]
 8010efa:	6803      	ldr	r3, [r0, #0]
 8010efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010efe:	4798      	blx	r3
 8010f00:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	4607      	mov	r7, r0
 8010f08:	4406      	add	r6, r0
 8010f0a:	a830      	add	r0, sp, #192	; 0xc0
 8010f0c:	f893 9009 	ldrb.w	r9, [r3, #9]
 8010f10:	f002 f91e 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 8010f14:	7c23      	ldrb	r3, [r4, #16]
 8010f16:	b17b      	cbz	r3, 8010f38 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8010f18:	6820      	ldr	r0, [r4, #0]
 8010f1a:	6803      	ldr	r3, [r0, #0]
 8010f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010f1e:	4798      	blx	r3
 8010f20:	9009      	str	r0, [sp, #36]	; 0x24
 8010f22:	6820      	ldr	r0, [r4, #0]
 8010f24:	6802      	ldr	r2, [r0, #0]
 8010f26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010f28:	4790      	blx	r2
 8010f2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f2c:	9000      	str	r0, [sp, #0]
 8010f2e:	a830      	add	r0, sp, #192	; 0xc0
 8010f30:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8010f32:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8010f34:	f002 f967 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010f38:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8010f3c:	a80e      	add	r0, sp, #56	; 0x38
 8010f3e:	7be2      	ldrb	r2, [r4, #15]
 8010f40:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8010f44:	1a8a      	subs	r2, r1, r2
 8010f46:	7c21      	ldrb	r1, [r4, #16]
 8010f48:	9103      	str	r1, [sp, #12]
 8010f4a:	b292      	uxth	r2, r2
 8010f4c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8010f50:	9102      	str	r1, [sp, #8]
 8010f52:	6821      	ldr	r1, [r4, #0]
 8010f54:	9101      	str	r1, [sp, #4]
 8010f56:	7961      	ldrb	r1, [r4, #5]
 8010f58:	9100      	str	r1, [sp, #0]
 8010f5a:	a930      	add	r1, sp, #192	; 0xc0
 8010f5c:	f7ff fc34 	bl	80107c8 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8010f60:	2e00      	cmp	r6, #0
 8010f62:	dc5b      	bgt.n	801101c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8010f64:	af17      	add	r7, sp, #92	; 0x5c
 8010f66:	f04f 0900 	mov.w	r9, #0
 8010f6a:	7c23      	ldrb	r3, [r4, #16]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	f000 80b1 	beq.w	80110d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8010f72:	a80e      	add	r0, sp, #56	; 0x38
 8010f74:	f7ff fe4d 	bl	8010c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8010f78:	f1ba 0f00 	cmp.w	sl, #0
 8010f7c:	f000 80a5 	beq.w	80110ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8010f80:	7c23      	ldrb	r3, [r4, #16]
 8010f82:	2264      	movs	r2, #100	; 0x64
 8010f84:	4639      	mov	r1, r7
 8010f86:	a849      	add	r0, sp, #292	; 0x124
 8010f88:	9309      	str	r3, [sp, #36]	; 0x24
 8010f8a:	f00c ff54 	bl	801de36 <memcpy>
 8010f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	f000 80a7 	beq.w	80110e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8010f96:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8010f9a:	7922      	ldrb	r2, [r4, #4]
 8010f9c:	2a01      	cmp	r2, #1
 8010f9e:	f040 808a 	bne.w	80110b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8010fa2:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8010fa6:	1ac0      	subs	r0, r0, r3
 8010fa8:	2302      	movs	r3, #2
 8010faa:	fb90 f0f3 	sdiv	r0, r0, r3
 8010fae:	b200      	sxth	r0, r0
 8010fb0:	7c23      	ldrb	r3, [r4, #16]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	f000 808b 	beq.w	80110ce <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8010fb8:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8010fbc:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8010fc0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010fc4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8010fc8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8010fcc:	2100      	movs	r1, #0
 8010fce:	4410      	add	r0, r2
 8010fd0:	4642      	mov	r2, r8
 8010fd2:	b200      	sxth	r0, r0
 8010fd4:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8010fd8:	9000      	str	r0, [sp, #0]
 8010fda:	4658      	mov	r0, fp
 8010fdc:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8010fe0:	f7ff fca2 	bl	8010928 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8010fe4:	2800      	cmp	r0, #0
 8010fe6:	d163      	bne.n	80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010fe8:	b2b2      	uxth	r2, r6
 8010fea:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8010fee:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8010ff2:	4413      	add	r3, r2
 8010ff4:	1a8a      	subs	r2, r1, r2
 8010ff6:	b21b      	sxth	r3, r3
 8010ff8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8010ffc:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8011000:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8011004:	2a00      	cmp	r2, #0
 8011006:	d153      	bne.n	80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011008:	6822      	ldr	r2, [r4, #0]
 801100a:	8869      	ldrh	r1, [r5, #2]
 801100c:	7a12      	ldrb	r2, [r2, #8]
 801100e:	1a9b      	subs	r3, r3, r2
 8011010:	88ea      	ldrh	r2, [r5, #6]
 8011012:	440a      	add	r2, r1
 8011014:	b212      	sxth	r2, r2
 8011016:	4293      	cmp	r3, r2
 8011018:	dda7      	ble.n	8010f6a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 801101a:	e049      	b.n	80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801101c:	7c23      	ldrb	r3, [r4, #16]
 801101e:	444f      	add	r7, r9
 8011020:	b1c3      	cbz	r3, 8011054 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8011022:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8011026:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801102a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801102e:	443b      	add	r3, r7
 8011030:	4293      	cmp	r3, r2
 8011032:	da97      	bge.n	8010f64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011034:	a80e      	add	r0, sp, #56	; 0x38
 8011036:	f7ff fdec 	bl	8010c12 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801103a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 801103e:	3b01      	subs	r3, #1
 8011040:	b29b      	uxth	r3, r3
 8011042:	454b      	cmp	r3, r9
 8011044:	9309      	str	r3, [sp, #36]	; 0x24
 8011046:	d021      	beq.n	801108c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8011048:	7961      	ldrb	r1, [r4, #5]
 801104a:	a817      	add	r0, sp, #92	; 0x5c
 801104c:	f7fa fc6c 	bl	800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011052:	e7f4      	b.n	801103e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8011054:	fa1f f986 	uxth.w	r9, r6
 8011058:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801105c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011060:	443b      	add	r3, r7
 8011062:	4293      	cmp	r3, r2
 8011064:	f6bf af7e 	bge.w	8010f64 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8011068:	a817      	add	r0, sp, #92	; 0x5c
 801106a:	f002 fc9d 	bl	80139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801106e:	b1f8      	cbz	r0, 80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8011070:	280a      	cmp	r0, #10
 8011072:	d1f1      	bne.n	8011058 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8011074:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8011078:	444b      	add	r3, r9
 801107a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801107e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8011082:	eba3 0309 	sub.w	r3, r3, r9
 8011086:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801108a:	e7e5      	b.n	8011058 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 801108c:	b2b3      	uxth	r3, r6
 801108e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8011092:	441a      	add	r2, r3
 8011094:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8011098:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 801109c:	1ad3      	subs	r3, r2, r3
 801109e:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80110a2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80110a6:	b11b      	cbz	r3, 80110b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80110a8:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d0ba      	beq.n	8011026 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 80110b0:	b063      	add	sp, #396	; 0x18c
 80110b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110b6:	2a02      	cmp	r2, #2
 80110b8:	d105      	bne.n	80110c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 80110ba:	7be2      	ldrb	r2, [r4, #15]
 80110bc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80110c0:	1a80      	subs	r0, r0, r2
 80110c2:	1ac0      	subs	r0, r0, r3
 80110c4:	e773      	b.n	8010fae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80110c6:	2000      	movs	r0, #0
 80110c8:	e772      	b.n	8010fb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80110ca:	7be0      	ldrb	r0, [r4, #15]
 80110cc:	e770      	b.n	8010fb0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80110ce:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80110d2:	e773      	b.n	8010fbc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80110d4:	f1ba 0f00 	cmp.w	sl, #0
 80110d8:	d0f7      	beq.n	80110ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80110da:	2264      	movs	r2, #100	; 0x64
 80110dc:	4639      	mov	r1, r7
 80110de:	a849      	add	r0, sp, #292	; 0x124
 80110e0:	f00c fea9 	bl	801de36 <memcpy>
 80110e4:	2300      	movs	r3, #0
 80110e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80110ea:	6821      	ldr	r1, [r4, #0]
 80110ec:	a849      	add	r0, sp, #292	; 0x124
 80110ee:	f7ff fbae 	bl	801084e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80110f2:	b203      	sxth	r3, r0
 80110f4:	e751      	b.n	8010f9a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080110f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80110f6:	2b03      	cmp	r3, #3
 80110f8:	d818      	bhi.n	801112c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80110fa:	e8df f003 	tbb	[pc, r3]
 80110fe:	0602      	.short	0x0602
 8011100:	130d      	.short	0x130d
 8011102:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011106:	1850      	adds	r0, r2, r1
 8011108:	4770      	bx	lr
 801110a:	8803      	ldrh	r3, [r0, #0]
 801110c:	8880      	ldrh	r0, [r0, #4]
 801110e:	4418      	add	r0, r3
 8011110:	b200      	sxth	r0, r0
 8011112:	1a80      	subs	r0, r0, r2
 8011114:	3801      	subs	r0, #1
 8011116:	4770      	bx	lr
 8011118:	8803      	ldrh	r3, [r0, #0]
 801111a:	8880      	ldrh	r0, [r0, #4]
 801111c:	4418      	add	r0, r3
 801111e:	b200      	sxth	r0, r0
 8011120:	1a40      	subs	r0, r0, r1
 8011122:	e7f7      	b.n	8011114 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011124:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011128:	4410      	add	r0, r2
 801112a:	4770      	bx	lr
 801112c:	2000      	movs	r0, #0
 801112e:	4770      	bx	lr

08011130 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011130:	2b03      	cmp	r3, #3
 8011132:	d817      	bhi.n	8011164 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011134:	e8df f003 	tbb	[pc, r3]
 8011138:	10090602 	.word	0x10090602
 801113c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011140:	1850      	adds	r0, r2, r1
 8011142:	4770      	bx	lr
 8011144:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011148:	e7fa      	b.n	8011140 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801114a:	8843      	ldrh	r3, [r0, #2]
 801114c:	88c0      	ldrh	r0, [r0, #6]
 801114e:	4418      	add	r0, r3
 8011150:	b200      	sxth	r0, r0
 8011152:	1a80      	subs	r0, r0, r2
 8011154:	3801      	subs	r0, #1
 8011156:	4770      	bx	lr
 8011158:	8843      	ldrh	r3, [r0, #2]
 801115a:	88c0      	ldrh	r0, [r0, #6]
 801115c:	4418      	add	r0, r3
 801115e:	b200      	sxth	r0, r0
 8011160:	1a40      	subs	r0, r0, r1
 8011162:	e7f7      	b.n	8011154 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011164:	2000      	movs	r0, #0
 8011166:	4770      	bx	lr

08011168 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011168:	4b01      	ldr	r3, [pc, #4]	; (8011170 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801116a:	2200      	movs	r2, #0
 801116c:	601a      	str	r2, [r3, #0]
 801116e:	4770      	bx	lr
 8011170:	2401aa80 	.word	0x2401aa80

08011174 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011174:	4603      	mov	r3, r0
 8011176:	b1c8      	cbz	r0, 80111ac <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011178:	0c02      	lsrs	r2, r0, #16
 801117a:	0412      	lsls	r2, r2, #16
 801117c:	b9a2      	cbnz	r2, 80111a8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801117e:	0403      	lsls	r3, r0, #16
 8011180:	2010      	movs	r0, #16
 8011182:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011186:	bf04      	itt	eq
 8011188:	021b      	lsleq	r3, r3, #8
 801118a:	3008      	addeq	r0, #8
 801118c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011190:	bf04      	itt	eq
 8011192:	011b      	lsleq	r3, r3, #4
 8011194:	3004      	addeq	r0, #4
 8011196:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801119a:	bf04      	itt	eq
 801119c:	009b      	lsleq	r3, r3, #2
 801119e:	3002      	addeq	r0, #2
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	db04      	blt.n	80111ae <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80111a4:	3001      	adds	r0, #1
 80111a6:	4770      	bx	lr
 80111a8:	2000      	movs	r0, #0
 80111aa:	e7ea      	b.n	8011182 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80111ac:	2020      	movs	r0, #32
 80111ae:	4770      	bx	lr

080111b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80111b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b4:	b087      	sub	sp, #28
 80111b6:	460d      	mov	r5, r1
 80111b8:	4616      	mov	r6, r2
 80111ba:	4698      	mov	r8, r3
 80111bc:	4601      	mov	r1, r0
 80111be:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80111c2:	b120      	cbz	r0, 80111ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80111c4:	b11a      	cbz	r2, 80111ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80111c6:	2d1f      	cmp	r5, #31
 80111c8:	d801      	bhi.n	80111ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80111ca:	2b1f      	cmp	r3, #31
 80111cc:	d904      	bls.n	80111d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80111ce:	2000      	movs	r0, #0
 80111d0:	6038      	str	r0, [r7, #0]
 80111d2:	b007      	add	sp, #28
 80111d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111d8:	b97d      	cbnz	r5, 80111fa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80111da:	b143      	cbz	r3, 80111ee <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80111dc:	4602      	mov	r2, r0
 80111de:	462b      	mov	r3, r5
 80111e0:	4641      	mov	r1, r8
 80111e2:	4630      	mov	r0, r6
 80111e4:	e9cd 4700 	strd	r4, r7, [sp]
 80111e8:	f7ff ffe2 	bl	80111b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80111ec:	e7f1      	b.n	80111d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80111ee:	f04f 33ff 	mov.w	r3, #4294967295
 80111f2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80111f6:	603b      	str	r3, [r7, #0]
 80111f8:	e7eb      	b.n	80111d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80111fa:	fa32 fa05 	lsrs.w	sl, r2, r5
 80111fe:	d106      	bne.n	801120e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8011200:	4346      	muls	r6, r0
 8011202:	fbb6 f0f4 	udiv	r0, r6, r4
 8011206:	fb04 6610 	mls	r6, r4, r0, r6
 801120a:	603e      	str	r6, [r7, #0]
 801120c:	e7e1      	b.n	80111d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 801120e:	2201      	movs	r2, #1
 8011210:	fa00 fb05 	lsl.w	fp, r0, r5
 8011214:	40aa      	lsls	r2, r5
 8011216:	fbbb f9f4 	udiv	r9, fp, r4
 801121a:	3a01      	subs	r2, #1
 801121c:	fb0a f309 	mul.w	r3, sl, r9
 8011220:	fb04 b919 	mls	r9, r4, r9, fp
 8011224:	4016      	ands	r6, r2
 8011226:	9303      	str	r3, [sp, #12]
 8011228:	4630      	mov	r0, r6
 801122a:	f7ff ffa3 	bl	8011174 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801122e:	462b      	mov	r3, r5
 8011230:	460a      	mov	r2, r1
 8011232:	4601      	mov	r1, r0
 8011234:	4630      	mov	r0, r6
 8011236:	e9cd 4700 	strd	r4, r7, [sp]
 801123a:	f7ff ffb9 	bl	80111b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801123e:	4606      	mov	r6, r0
 8011240:	4648      	mov	r0, r9
 8011242:	eb05 0108 	add.w	r1, r5, r8
 8011246:	f7ff ff95 	bl	8011174 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801124a:	ab05      	add	r3, sp, #20
 801124c:	464a      	mov	r2, r9
 801124e:	e9cd 4300 	strd	r4, r3, [sp]
 8011252:	4603      	mov	r3, r0
 8011254:	4650      	mov	r0, sl
 8011256:	f7ff ffab 	bl	80111b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801125a:	6839      	ldr	r1, [r7, #0]
 801125c:	9a05      	ldr	r2, [sp, #20]
 801125e:	9b03      	ldr	r3, [sp, #12]
 8011260:	4411      	add	r1, r2
 8011262:	fbb1 f2f4 	udiv	r2, r1, r4
 8011266:	18d3      	adds	r3, r2, r3
 8011268:	fb04 1412 	mls	r4, r4, r2, r1
 801126c:	441e      	add	r6, r3
 801126e:	603c      	str	r4, [r7, #0]
 8011270:	4430      	add	r0, r6
 8011272:	e7ae      	b.n	80111d2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08011274 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011278:	b085      	sub	sp, #20
 801127a:	f1b0 0900 	subs.w	r9, r0, #0
 801127e:	461d      	mov	r5, r3
 8011280:	4617      	mov	r7, r2
 8011282:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8011284:	bfbb      	ittet	lt
 8011286:	f1c9 0900 	rsblt	r9, r9, #0
 801128a:	f04f 36ff 	movlt.w	r6, #4294967295
 801128e:	2601      	movge	r6, #1
 8011290:	6823      	ldrlt	r3, [r4, #0]
 8011292:	bfbc      	itt	lt
 8011294:	425b      	neglt	r3, r3
 8011296:	6023      	strlt	r3, [r4, #0]
 8011298:	2a00      	cmp	r2, #0
 801129a:	da04      	bge.n	80112a6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801129c:	6823      	ldr	r3, [r4, #0]
 801129e:	4257      	negs	r7, r2
 80112a0:	4276      	negs	r6, r6
 80112a2:	425b      	negs	r3, r3
 80112a4:	6023      	str	r3, [r4, #0]
 80112a6:	2d00      	cmp	r5, #0
 80112a8:	4638      	mov	r0, r7
 80112aa:	bfba      	itte	lt
 80112ac:	426d      	neglt	r5, r5
 80112ae:	f04f 38ff 	movlt.w	r8, #4294967295
 80112b2:	f04f 0801 	movge.w	r8, #1
 80112b6:	f7ff ff5d 	bl	8011174 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80112ba:	ab03      	add	r3, sp, #12
 80112bc:	463a      	mov	r2, r7
 80112be:	e9cd 5300 	strd	r5, r3, [sp]
 80112c2:	4603      	mov	r3, r0
 80112c4:	4648      	mov	r0, r9
 80112c6:	f7ff ff73 	bl	80111b0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80112ca:	6823      	ldr	r3, [r4, #0]
 80112cc:	9a03      	ldr	r2, [sp, #12]
 80112ce:	4546      	cmp	r6, r8
 80112d0:	441a      	add	r2, r3
 80112d2:	fb92 f3f5 	sdiv	r3, r2, r5
 80112d6:	4418      	add	r0, r3
 80112d8:	fb05 2313 	mls	r3, r5, r3, r2
 80112dc:	bf18      	it	ne
 80112de:	4240      	negne	r0, r0
 80112e0:	1c72      	adds	r2, r6, #1
 80112e2:	6023      	str	r3, [r4, #0]
 80112e4:	d105      	bne.n	80112f2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	f1c3 0200 	rsb	r2, r3, #0
 80112ec:	db0b      	blt.n	8011306 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80112ee:	6022      	str	r2, [r4, #0]
 80112f0:	e006      	b.n	8011300 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80112f2:	2e01      	cmp	r6, #1
 80112f4:	d104      	bne.n	8011300 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	da02      	bge.n	8011300 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80112fa:	442b      	add	r3, r5
 80112fc:	3801      	subs	r0, #1
 80112fe:	6023      	str	r3, [r4, #0]
 8011300:	b005      	add	sp, #20
 8011302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011306:	3801      	subs	r0, #1
 8011308:	1b52      	subs	r2, r2, r5
 801130a:	e7f0      	b.n	80112ee <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0801130c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801130c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011310:	4c1c      	ldr	r4, [pc, #112]	; (8011384 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8011312:	4605      	mov	r5, r0
 8011314:	6807      	ldr	r7, [r0, #0]
 8011316:	69a3      	ldr	r3, [r4, #24]
 8011318:	b92b      	cbnz	r3, 8011326 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801131a:	6840      	ldr	r0, [r0, #4]
 801131c:	e9c5 7000 	strd	r7, r0, [r5]
 8011320:	b004      	add	sp, #16
 8011322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011326:	f04f 0802 	mov.w	r8, #2
 801132a:	68a2      	ldr	r2, [r4, #8]
 801132c:	ae04      	add	r6, sp, #16
 801132e:	6820      	ldr	r0, [r4, #0]
 8011330:	fb93 f1f8 	sdiv	r1, r3, r8
 8011334:	440a      	add	r2, r1
 8011336:	69e1      	ldr	r1, [r4, #28]
 8011338:	f846 2d04 	str.w	r2, [r6, #-4]!
 801133c:	463a      	mov	r2, r7
 801133e:	9600      	str	r6, [sp, #0]
 8011340:	f7ff ff98 	bl	8011274 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011344:	69a3      	ldr	r3, [r4, #24]
 8011346:	4607      	mov	r7, r0
 8011348:	686a      	ldr	r2, [r5, #4]
 801134a:	6a21      	ldr	r1, [r4, #32]
 801134c:	9600      	str	r6, [sp, #0]
 801134e:	6860      	ldr	r0, [r4, #4]
 8011350:	f7ff ff90 	bl	8011274 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011354:	69a3      	ldr	r3, [r4, #24]
 8011356:	6962      	ldr	r2, [r4, #20]
 8011358:	4407      	add	r7, r0
 801135a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801135c:	9600      	str	r6, [sp, #0]
 801135e:	68e0      	ldr	r0, [r4, #12]
 8011360:	fb93 f8f8 	sdiv	r8, r3, r8
 8011364:	4442      	add	r2, r8
 8011366:	9203      	str	r2, [sp, #12]
 8011368:	682a      	ldr	r2, [r5, #0]
 801136a:	f7ff ff83 	bl	8011274 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801136e:	4680      	mov	r8, r0
 8011370:	9600      	str	r6, [sp, #0]
 8011372:	69a3      	ldr	r3, [r4, #24]
 8011374:	686a      	ldr	r2, [r5, #4]
 8011376:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8011378:	6920      	ldr	r0, [r4, #16]
 801137a:	f7ff ff7b 	bl	8011274 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801137e:	4440      	add	r0, r8
 8011380:	e7cc      	b.n	801131c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8011382:	bf00      	nop
 8011384:	2401aa84 	.word	0x2401aa84

08011388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011388:	4b07      	ldr	r3, [pc, #28]	; (80113a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801138a:	781b      	ldrb	r3, [r3, #0]
 801138c:	2b01      	cmp	r3, #1
 801138e:	d109      	bne.n	80113a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8011390:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011394:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011398:	8003      	strh	r3, [r0, #0]
 801139a:	4b04      	ldr	r3, [pc, #16]	; (80113ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	3b01      	subs	r3, #1
 80113a0:	1a9b      	subs	r3, r3, r2
 80113a2:	800b      	strh	r3, [r1, #0]
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	2401aa70 	.word	0x2401aa70
 80113ac:	2401aa6c 	.word	0x2401aa6c

080113b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80113b0:	4b07      	ldr	r3, [pc, #28]	; (80113d0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80113b2:	b510      	push	{r4, lr}
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d108      	bne.n	80113cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80113ba:	4b06      	ldr	r3, [pc, #24]	; (80113d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80113bc:	880c      	ldrh	r4, [r1, #0]
 80113be:	881b      	ldrh	r3, [r3, #0]
 80113c0:	f9b0 2000 	ldrsh.w	r2, [r0]
 80113c4:	3b01      	subs	r3, #1
 80113c6:	1b1b      	subs	r3, r3, r4
 80113c8:	8003      	strh	r3, [r0, #0]
 80113ca:	800a      	strh	r2, [r1, #0]
 80113cc:	bd10      	pop	{r4, pc}
 80113ce:	bf00      	nop
 80113d0:	2401aa70 	.word	0x2401aa70
 80113d4:	2401aa6c 	.word	0x2401aa6c

080113d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80113d8:	4b0a      	ldr	r3, [pc, #40]	; (8011404 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80113da:	b510      	push	{r4, lr}
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	2b01      	cmp	r3, #1
 80113e0:	d10e      	bne.n	8011400 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80113e2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80113e6:	8843      	ldrh	r3, [r0, #2]
 80113e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80113ec:	18ca      	adds	r2, r1, r3
 80113ee:	4b06      	ldr	r3, [pc, #24]	; (8011408 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80113f0:	8044      	strh	r4, [r0, #2]
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	1a9b      	subs	r3, r3, r2
 80113f6:	8003      	strh	r3, [r0, #0]
 80113f8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80113fc:	8081      	strh	r1, [r0, #4]
 80113fe:	80c3      	strh	r3, [r0, #6]
 8011400:	bd10      	pop	{r4, pc}
 8011402:	bf00      	nop
 8011404:	2401aa70 	.word	0x2401aa70
 8011408:	2401aa6c 	.word	0x2401aa6c

0801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801140c:	4b08      	ldr	r3, [pc, #32]	; (8011430 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d10c      	bne.n	801142e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011414:	8803      	ldrh	r3, [r0, #0]
 8011416:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801141a:	8842      	ldrh	r2, [r0, #2]
 801141c:	8002      	strh	r2, [r0, #0]
 801141e:	185a      	adds	r2, r3, r1
 8011420:	4b04      	ldr	r3, [pc, #16]	; (8011434 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	1a9b      	subs	r3, r3, r2
 8011426:	8043      	strh	r3, [r0, #2]
 8011428:	88c3      	ldrh	r3, [r0, #6]
 801142a:	80c1      	strh	r1, [r0, #6]
 801142c:	8083      	strh	r3, [r0, #4]
 801142e:	4770      	bx	lr
 8011430:	2401aa70 	.word	0x2401aa70
 8011434:	2401aa6c 	.word	0x2401aa6c

08011438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011438:	4b07      	ldr	r3, [pc, #28]	; (8011458 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801143a:	b510      	push	{r4, lr}
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	2b01      	cmp	r3, #1
 8011440:	d108      	bne.n	8011454 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011442:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011446:	f9b0 4000 	ldrsh.w	r4, [r0]
 801144a:	8003      	strh	r3, [r0, #0]
 801144c:	8893      	ldrh	r3, [r2, #4]
 801144e:	3b01      	subs	r3, #1
 8011450:	1b1b      	subs	r3, r3, r4
 8011452:	800b      	strh	r3, [r1, #0]
 8011454:	bd10      	pop	{r4, pc}
 8011456:	bf00      	nop
 8011458:	2401aa70 	.word	0x2401aa70

0801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801145c:	4b0a      	ldr	r3, [pc, #40]	; (8011488 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801145e:	460a      	mov	r2, r1
 8011460:	b510      	push	{r4, lr}
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	2b01      	cmp	r3, #1
 8011466:	d10d      	bne.n	8011484 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8011468:	8881      	ldrh	r1, [r0, #4]
 801146a:	8803      	ldrh	r3, [r0, #0]
 801146c:	440b      	add	r3, r1
 801146e:	4601      	mov	r1, r0
 8011470:	3b01      	subs	r3, #1
 8011472:	f821 3b02 	strh.w	r3, [r1], #2
 8011476:	f7ff ffdf 	bl	8011438 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801147a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801147e:	88c2      	ldrh	r2, [r0, #6]
 8011480:	80c3      	strh	r3, [r0, #6]
 8011482:	8082      	strh	r2, [r0, #4]
 8011484:	bd10      	pop	{r4, pc}
 8011486:	bf00      	nop
 8011488:	2401aa70 	.word	0x2401aa70

0801148c <_ZN8touchgfx11Application13requestRedrawEv>:
 801148c:	4b06      	ldr	r3, [pc, #24]	; (80114a8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801148e:	2100      	movs	r1, #0
 8011490:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011494:	4b05      	ldr	r3, [pc, #20]	; (80114ac <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8011496:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801149a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801149e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80114a2:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80114a6:	4770      	bx	lr
 80114a8:	2401aa6c 	.word	0x2401aa6c
 80114ac:	2401aa6e 	.word	0x2401aa6e

080114b0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80114b0:	4b03      	ldr	r3, [pc, #12]	; (80114c0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80114b2:	6818      	ldr	r0, [r3, #0]
 80114b4:	b110      	cbz	r0, 80114bc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80114b6:	6803      	ldr	r3, [r0, #0]
 80114b8:	699b      	ldr	r3, [r3, #24]
 80114ba:	4718      	bx	r3
 80114bc:	4770      	bx	lr
 80114be:	bf00      	nop
 80114c0:	2401aab4 	.word	0x2401aab4

080114c4 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80114c4:	4770      	bx	lr
	...

080114c8 <_ZN8touchgfx11Application4drawEv>:
 80114c8:	4b09      	ldr	r3, [pc, #36]	; (80114f0 <_ZN8touchgfx11Application4drawEv+0x28>)
 80114ca:	b507      	push	{r0, r1, r2, lr}
 80114cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80114d0:	2100      	movs	r1, #0
 80114d2:	4b08      	ldr	r3, [pc, #32]	; (80114f4 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80114d4:	9100      	str	r1, [sp, #0]
 80114d6:	4669      	mov	r1, sp
 80114d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80114dc:	f8ad 2004 	strh.w	r2, [sp, #4]
 80114e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80114e4:	6803      	ldr	r3, [r0, #0]
 80114e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114e8:	4798      	blx	r3
 80114ea:	b003      	add	sp, #12
 80114ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80114f0:	2401aa6c 	.word	0x2401aa6c
 80114f4:	2401aa6e 	.word	0x2401aa6e

080114f8 <_ZN8touchgfx11Application10invalidateEv>:
 80114f8:	4b09      	ldr	r3, [pc, #36]	; (8011520 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80114fa:	b082      	sub	sp, #8
 80114fc:	2100      	movs	r1, #0
 80114fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011502:	4b08      	ldr	r3, [pc, #32]	; (8011524 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8011504:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011508:	aa02      	add	r2, sp, #8
 801150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801150e:	9100      	str	r1, [sp, #0]
 8011510:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011514:	6803      	ldr	r3, [r0, #0]
 8011516:	e912 0006 	ldmdb	r2, {r1, r2}
 801151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801151c:	b002      	add	sp, #8
 801151e:	4718      	bx	r3
 8011520:	2401aa6c 	.word	0x2401aa6c
 8011524:	2401aa6e 	.word	0x2401aa6e

08011528 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8011528:	4b03      	ldr	r3, [pc, #12]	; (8011538 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801152a:	6818      	ldr	r0, [r3, #0]
 801152c:	b110      	cbz	r0, 8011534 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801152e:	6803      	ldr	r3, [r0, #0]
 8011530:	69db      	ldr	r3, [r3, #28]
 8011532:	4718      	bx	r3
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop
 8011538:	2401aab4 	.word	0x2401aab4

0801153c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801153c:	4b03      	ldr	r3, [pc, #12]	; (801154c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801153e:	6818      	ldr	r0, [r3, #0]
 8011540:	b110      	cbz	r0, 8011548 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8011542:	6803      	ldr	r3, [r0, #0]
 8011544:	6a1b      	ldr	r3, [r3, #32]
 8011546:	4718      	bx	r3
 8011548:	4770      	bx	lr
 801154a:	bf00      	nop
 801154c:	2401aab4 	.word	0x2401aab4

08011550 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8011550:	2300      	movs	r3, #0
 8011552:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 8011556:	4770      	bx	lr

08011558 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8011558:	4b03      	ldr	r3, [pc, #12]	; (8011568 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801155a:	6818      	ldr	r0, [r3, #0]
 801155c:	b110      	cbz	r0, 8011564 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801155e:	6803      	ldr	r3, [r0, #0]
 8011560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011562:	4718      	bx	r3
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	2401aab4 	.word	0x2401aab4

0801156c <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801156c:	b510      	push	{r4, lr}
 801156e:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011572:	888a      	ldrh	r2, [r1, #4]
 8011574:	f9b0 3000 	ldrsh.w	r3, [r0]
 8011578:	4422      	add	r2, r4
 801157a:	b212      	sxth	r2, r2
 801157c:	4293      	cmp	r3, r2
 801157e:	da15      	bge.n	80115ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8011580:	8882      	ldrh	r2, [r0, #4]
 8011582:	4413      	add	r3, r2
 8011584:	b21b      	sxth	r3, r3
 8011586:	429c      	cmp	r4, r3
 8011588:	da10      	bge.n	80115ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801158a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801158e:	88c9      	ldrh	r1, [r1, #6]
 8011590:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011594:	4419      	add	r1, r3
 8011596:	b209      	sxth	r1, r1
 8011598:	428a      	cmp	r2, r1
 801159a:	da07      	bge.n	80115ac <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801159c:	88c0      	ldrh	r0, [r0, #6]
 801159e:	4410      	add	r0, r2
 80115a0:	b200      	sxth	r0, r0
 80115a2:	4283      	cmp	r3, r0
 80115a4:	bfac      	ite	ge
 80115a6:	2000      	movge	r0, #0
 80115a8:	2001      	movlt	r0, #1
 80115aa:	bd10      	pop	{r4, pc}
 80115ac:	2000      	movs	r0, #0
 80115ae:	e7fc      	b.n	80115aa <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080115b0 <_ZN8touchgfx4Rect10restrictToEss>:
 80115b0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	b510      	push	{r4, lr}
 80115b8:	da04      	bge.n	80115c4 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80115ba:	8884      	ldrh	r4, [r0, #4]
 80115bc:	4423      	add	r3, r4
 80115be:	8083      	strh	r3, [r0, #4]
 80115c0:	2300      	movs	r3, #0
 80115c2:	8003      	strh	r3, [r0, #0]
 80115c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80115c8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80115cc:	1b09      	subs	r1, r1, r4
 80115ce:	428b      	cmp	r3, r1
 80115d0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80115d4:	bfc8      	it	gt
 80115d6:	8081      	strhgt	r1, [r0, #4]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	da04      	bge.n	80115e6 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80115dc:	88c1      	ldrh	r1, [r0, #6]
 80115de:	440b      	add	r3, r1
 80115e0:	80c3      	strh	r3, [r0, #6]
 80115e2:	2300      	movs	r3, #0
 80115e4:	8043      	strh	r3, [r0, #2]
 80115e6:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80115ea:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80115ee:	1a52      	subs	r2, r2, r1
 80115f0:	4293      	cmp	r3, r2
 80115f2:	bfc8      	it	gt
 80115f4:	80c2      	strhgt	r2, [r0, #6]
 80115f6:	bd10      	pop	{r4, pc}

080115f8 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80115f8:	4b10      	ldr	r3, [pc, #64]	; (801163c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80115fa:	b510      	push	{r4, lr}
 80115fc:	460c      	mov	r4, r1
 80115fe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011602:	4b0f      	ldr	r3, [pc, #60]	; (8011640 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011604:	4620      	mov	r0, r4
 8011606:	f9b3 1000 	ldrsh.w	r1, [r3]
 801160a:	f7ff ffd1 	bl	80115b0 <_ZN8touchgfx4Rect10restrictToEss>
 801160e:	4b0d      	ldr	r3, [pc, #52]	; (8011644 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011610:	6818      	ldr	r0, [r3, #0]
 8011612:	b190      	cbz	r0, 801163a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011614:	6803      	ldr	r3, [r0, #0]
 8011616:	4621      	mov	r1, r4
 8011618:	689b      	ldr	r3, [r3, #8]
 801161a:	4798      	blx	r3
 801161c:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801161e:	6818      	ldr	r0, [r3, #0]
 8011620:	b118      	cbz	r0, 801162a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8011622:	6803      	ldr	r3, [r0, #0]
 8011624:	4621      	mov	r1, r4
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	4798      	blx	r3
 801162a:	4b08      	ldr	r3, [pc, #32]	; (801164c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801162c:	4621      	mov	r1, r4
 801162e:	6818      	ldr	r0, [r3, #0]
 8011630:	6803      	ldr	r3, [r0, #0]
 8011632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011636:	69db      	ldr	r3, [r3, #28]
 8011638:	4718      	bx	r3
 801163a:	bd10      	pop	{r4, pc}
 801163c:	2401aa6e 	.word	0x2401aa6e
 8011640:	2401aa6c 	.word	0x2401aa6c
 8011644:	2401aab4 	.word	0x2401aab4
 8011648:	2401aab0 	.word	0x2401aab0
 801164c:	2401aa78 	.word	0x2401aa78

08011650 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011652:	4606      	mov	r6, r0
 8011654:	4608      	mov	r0, r1
 8011656:	460f      	mov	r7, r1
 8011658:	f7fc fde9 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 801165c:	b9e8      	cbnz	r0, 801169a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801165e:	f9b7 5000 	ldrsh.w	r5, [r7]
 8011662:	f9b6 4000 	ldrsh.w	r4, [r6]
 8011666:	42a5      	cmp	r5, r4
 8011668:	db17      	blt.n	801169a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801166a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801166e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8011672:	429a      	cmp	r2, r3
 8011674:	db11      	blt.n	801169a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011676:	88b9      	ldrh	r1, [r7, #4]
 8011678:	440d      	add	r5, r1
 801167a:	88b1      	ldrh	r1, [r6, #4]
 801167c:	440c      	add	r4, r1
 801167e:	b22d      	sxth	r5, r5
 8011680:	b224      	sxth	r4, r4
 8011682:	42a5      	cmp	r5, r4
 8011684:	dc09      	bgt.n	801169a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011686:	88f8      	ldrh	r0, [r7, #6]
 8011688:	4410      	add	r0, r2
 801168a:	88f2      	ldrh	r2, [r6, #6]
 801168c:	4413      	add	r3, r2
 801168e:	b200      	sxth	r0, r0
 8011690:	b21b      	sxth	r3, r3
 8011692:	4298      	cmp	r0, r3
 8011694:	bfcc      	ite	gt
 8011696:	2000      	movgt	r0, #0
 8011698:	2001      	movle	r0, #1
 801169a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801169c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169e:	4604      	mov	r4, r0
 80116a0:	4608      	mov	r0, r1
 80116a2:	460d      	mov	r5, r1
 80116a4:	f7fc fdc3 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 80116a8:	b978      	cbnz	r0, 80116ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80116aa:	4620      	mov	r0, r4
 80116ac:	f7fc fdbf 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 80116b0:	f9b5 6000 	ldrsh.w	r6, [r5]
 80116b4:	b150      	cbz	r0, 80116cc <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80116b6:	8026      	strh	r6, [r4, #0]
 80116b8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80116bc:	8063      	strh	r3, [r4, #2]
 80116be:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80116c2:	80a3      	strh	r3, [r4, #4]
 80116c4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80116c8:	80e3      	strh	r3, [r4, #6]
 80116ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116cc:	f9b4 1000 	ldrsh.w	r1, [r4]
 80116d0:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80116d4:	42b1      	cmp	r1, r6
 80116d6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80116da:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80116de:	460f      	mov	r7, r1
 80116e0:	88ed      	ldrh	r5, [r5, #6]
 80116e2:	bfa8      	it	ge
 80116e4:	4637      	movge	r7, r6
 80116e6:	4293      	cmp	r3, r2
 80116e8:	4618      	mov	r0, r3
 80116ea:	4466      	add	r6, ip
 80116ec:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80116f0:	bfa8      	it	ge
 80116f2:	4610      	movge	r0, r2
 80116f4:	442a      	add	r2, r5
 80116f6:	88e5      	ldrh	r5, [r4, #6]
 80116f8:	4461      	add	r1, ip
 80116fa:	b236      	sxth	r6, r6
 80116fc:	8027      	strh	r7, [r4, #0]
 80116fe:	442b      	add	r3, r5
 8011700:	b209      	sxth	r1, r1
 8011702:	b212      	sxth	r2, r2
 8011704:	8060      	strh	r0, [r4, #2]
 8011706:	b21b      	sxth	r3, r3
 8011708:	428e      	cmp	r6, r1
 801170a:	bfac      	ite	ge
 801170c:	ebc7 0106 	rsbge	r1, r7, r6
 8011710:	ebc7 0101 	rsblt	r1, r7, r1
 8011714:	429a      	cmp	r2, r3
 8011716:	bfac      	ite	ge
 8011718:	ebc0 0202 	rsbge	r2, r0, r2
 801171c:	ebc0 0203 	rsblt	r2, r0, r3
 8011720:	80a1      	strh	r1, [r4, #4]
 8011722:	80e2      	strh	r2, [r4, #6]
 8011724:	e7d1      	b.n	80116ca <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08011728 <_ZN8touchgfx11Application11getInstanceEv>:
 8011728:	4b01      	ldr	r3, [pc, #4]	; (8011730 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801172a:	6818      	ldr	r0, [r3, #0]
 801172c:	4770      	bx	lr
 801172e:	bf00      	nop
 8011730:	2401aac4 	.word	0x2401aac4

08011734 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8011734:	2300      	movs	r3, #0
 8011736:	b510      	push	{r4, lr}
 8011738:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 801173c:	4604      	mov	r4, r0
 801173e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8011742:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 8011746:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801174a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 801174e:	429a      	cmp	r2, r3
 8011750:	d90e      	bls.n	8011770 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8011752:	18e2      	adds	r2, r4, r3
 8011754:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8011758:	b122      	cbz	r2, 8011764 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801175a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801175e:	6803      	ldr	r3, [r0, #0]
 8011760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011762:	4798      	blx	r3
 8011764:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8011768:	3301      	adds	r3, #1
 801176a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 801176e:	e7ea      	b.n	8011746 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8011770:	bd10      	pop	{r4, pc}

08011772 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 8011772:	b530      	push	{r4, r5, lr}
 8011774:	2200      	movs	r2, #0
 8011776:	f8b0 5080 	ldrh.w	r5, [r0, #128]	; 0x80
 801177a:	b293      	uxth	r3, r2
 801177c:	429d      	cmp	r5, r3
 801177e:	d90e      	bls.n	801179e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8011780:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8011784:	428b      	cmp	r3, r1
 8011786:	d10b      	bne.n	80117a0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8011788:	1884      	adds	r4, r0, r2
 801178a:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 801178e:	b13b      	cbz	r3, 80117a0 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8011790:	3b01      	subs	r3, #1
 8011792:	b2db      	uxtb	r3, r3
 8011794:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
 8011798:	b90b      	cbnz	r3, 801179e <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 801179a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801179e:	bd30      	pop	{r4, r5, pc}
 80117a0:	3201      	adds	r2, #1
 80117a2:	e7ea      	b.n	801177a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

080117a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 80117a4:	2300      	movs	r3, #0
 80117a6:	f100 0284 	add.w	r2, r0, #132	; 0x84
 80117aa:	30a4      	adds	r0, #164	; 0xa4
 80117ac:	f820 3c24 	strh.w	r3, [r0, #-36]
 80117b0:	f802 3b01 	strb.w	r3, [r2], #1
 80117b4:	4282      	cmp	r2, r0
 80117b6:	d1fb      	bne.n	80117b0 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80117b8:	4770      	bx	lr
	...

080117bc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80117bc:	b570      	push	{r4, r5, r6, lr}
 80117be:	4c0b      	ldr	r4, [pc, #44]	; (80117ec <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80117c0:	4605      	mov	r5, r0
 80117c2:	460e      	mov	r6, r1
 80117c4:	6820      	ldr	r0, [r4, #0]
 80117c6:	b110      	cbz	r0, 80117ce <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80117c8:	6803      	ldr	r3, [r0, #0]
 80117ca:	695b      	ldr	r3, [r3, #20]
 80117cc:	4798      	blx	r3
 80117ce:	1d28      	adds	r0, r5, #4
 80117d0:	f7ff ffe8 	bl	80117a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80117d4:	6026      	str	r6, [r4, #0]
 80117d6:	6833      	ldr	r3, [r6, #0]
 80117d8:	4630      	mov	r0, r6
 80117da:	68db      	ldr	r3, [r3, #12]
 80117dc:	4798      	blx	r3
 80117de:	682b      	ldr	r3, [r5, #0]
 80117e0:	4628      	mov	r0, r5
 80117e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117e8:	4718      	bx	r3
 80117ea:	bf00      	nop
 80117ec:	2401aab4 	.word	0x2401aab4

080117f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80117f0:	2300      	movs	r3, #0
 80117f2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80117f6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80117fa:	461a      	mov	r2, r3
 80117fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117fe:	461c      	mov	r4, r3
 8011800:	461d      	mov	r5, r3
 8011802:	459c      	cmp	ip, r3
 8011804:	dd1a      	ble.n	801183c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8011806:	18c6      	adds	r6, r0, r3
 8011808:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 801180c:	b16e      	cbz	r6, 801182a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801180e:	429a      	cmp	r2, r3
 8011810:	d008      	beq.n	8011824 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8011812:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8011816:	fa1f fe82 	uxth.w	lr, r2
 801181a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801181e:	1887      	adds	r7, r0, r2
 8011820:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8011824:	3201      	adds	r2, #1
 8011826:	3301      	adds	r3, #1
 8011828:	e7eb      	b.n	8011802 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801182a:	4299      	cmp	r1, r3
 801182c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8011830:	bfa8      	it	ge
 8011832:	3501      	addge	r5, #1
 8011834:	429e      	cmp	r6, r3
 8011836:	bfc8      	it	gt
 8011838:	3401      	addgt	r4, #1
 801183a:	e7f4      	b.n	8011826 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801183c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8011840:	1b49      	subs	r1, r1, r5
 8011842:	1b1b      	subs	r3, r3, r4
 8011844:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8011848:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801184c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8011850:	4293      	cmp	r3, r2
 8011852:	dd03      	ble.n	801185c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8011854:	3b01      	subs	r3, #1
 8011856:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801185a:	e7f7      	b.n	801184c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801185c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011860 <_ZN8touchgfx11Application15handleTickEventEv>:
 8011860:	b570      	push	{r4, r5, r6, lr}
 8011862:	4d16      	ldr	r5, [pc, #88]	; (80118bc <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8011864:	4604      	mov	r4, r0
 8011866:	6828      	ldr	r0, [r5, #0]
 8011868:	b140      	cbz	r0, 801187c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801186a:	7a03      	ldrb	r3, [r0, #8]
 801186c:	b933      	cbnz	r3, 801187c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801186e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8011872:	6803      	ldr	r3, [r0, #0]
 8011874:	689b      	ldr	r3, [r3, #8]
 8011876:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801187a:	4718      	bx	r3
 801187c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8011880:	4e0f      	ldr	r6, [pc, #60]	; (80118c0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8011882:	b973      	cbnz	r3, 80118a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011884:	b168      	cbz	r0, 80118a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011886:	7a03      	ldrb	r3, [r0, #8]
 8011888:	b15b      	cbz	r3, 80118a2 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801188a:	6830      	ldr	r0, [r6, #0]
 801188c:	b110      	cbz	r0, 8011894 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801188e:	6803      	ldr	r3, [r0, #0]
 8011890:	691b      	ldr	r3, [r3, #16]
 8011892:	4798      	blx	r3
 8011894:	6828      	ldr	r0, [r5, #0]
 8011896:	6803      	ldr	r3, [r0, #0]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	4798      	blx	r3
 801189c:	2301      	movs	r3, #1
 801189e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80118a2:	3404      	adds	r4, #4
 80118a4:	4620      	mov	r0, r4
 80118a6:	f7ff ff45 	bl	8011734 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 80118aa:	4620      	mov	r0, r4
 80118ac:	f7ff ffa0 	bl	80117f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80118b0:	6830      	ldr	r0, [r6, #0]
 80118b2:	b110      	cbz	r0, 80118ba <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80118b4:	6803      	ldr	r3, [r0, #0]
 80118b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118b8:	e7dd      	b.n	8011876 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80118ba:	bd70      	pop	{r4, r5, r6, pc}
 80118bc:	2401aab8 	.word	0x2401aab8
 80118c0:	2401aab4 	.word	0x2401aab4

080118c4 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 80118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c6:	2300      	movs	r3, #0
 80118c8:	4604      	mov	r4, r0
 80118ca:	460d      	mov	r5, r1
 80118cc:	f8b0 1080 	ldrh.w	r1, [r0, #128]	; 0x80
 80118d0:	4618      	mov	r0, r3
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	4291      	cmp	r1, r2
 80118d6:	d912      	bls.n	80118fe <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 80118d8:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 80118dc:	18e6      	adds	r6, r4, r3
 80118de:	42af      	cmp	r7, r5
 80118e0:	f896 2084 	ldrb.w	r2, [r6, #132]	; 0x84
 80118e4:	d105      	bne.n	80118f2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 80118e6:	2aff      	cmp	r2, #255	; 0xff
 80118e8:	d002      	beq.n	80118f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 80118ea:	3201      	adds	r2, #1
 80118ec:	f886 2084 	strb.w	r2, [r6, #132]	; 0x84
 80118f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118f2:	2a00      	cmp	r2, #0
 80118f4:	f103 0301 	add.w	r3, r3, #1
 80118f8:	bf08      	it	eq
 80118fa:	2001      	moveq	r0, #1
 80118fc:	e7e9      	b.n	80118d2 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 80118fe:	b120      	cbz	r0, 801190a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8011900:	2920      	cmp	r1, #32
 8011902:	d102      	bne.n	801190a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8011904:	4620      	mov	r0, r4
 8011906:	f7ff ff73 	bl	80117f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801190a:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 801190e:	2b1f      	cmp	r3, #31
 8011910:	d8ee      	bhi.n	80118f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8011912:	18e2      	adds	r2, r4, r3
 8011914:	2101      	movs	r1, #1
 8011916:	f882 1084 	strb.w	r1, [r2, #132]	; 0x84
 801191a:	185a      	adds	r2, r3, r1
 801191c:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
 8011920:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8011924:	e7e4      	b.n	80118f0 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

08011926 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8011926:	4603      	mov	r3, r0
 8011928:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801192c:	2200      	movs	r2, #0
 801192e:	801a      	strh	r2, [r3, #0]
 8011930:	3308      	adds	r3, #8
 8011932:	f823 2c06 	strh.w	r2, [r3, #-6]
 8011936:	f823 2c04 	strh.w	r2, [r3, #-4]
 801193a:	f823 2c02 	strh.w	r2, [r3, #-2]
 801193e:	428b      	cmp	r3, r1
 8011940:	d1f5      	bne.n	801192e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8011942:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8011946:	4770      	bx	lr

08011948 <_ZN8touchgfx11ApplicationC1Ev>:
 8011948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801194a:	4b1d      	ldr	r3, [pc, #116]	; (80119c0 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801194c:	4606      	mov	r6, r0
 801194e:	4604      	mov	r4, r0
 8011950:	2500      	movs	r5, #0
 8011952:	f846 3b04 	str.w	r3, [r6], #4
 8011956:	22a8      	movs	r2, #168	; 0xa8
 8011958:	2100      	movs	r1, #0
 801195a:	4630      	mov	r0, r6
 801195c:	f00c f945 	bl	801dbea <memset>
 8011960:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8011964:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8011968:	4f16      	ldr	r7, [pc, #88]	; (80119c4 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801196a:	f7ff ffdc 	bl	8011926 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801196e:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8011972:	f7ff ffd8 	bl	8011926 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011976:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801197a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801197e:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8011982:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8011986:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801198a:	490f      	ldr	r1, [pc, #60]	; (80119c8 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801198c:	480f      	ldr	r0, [pc, #60]	; (80119cc <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801198e:	f00b fdef 	bl	801d570 <CRC_Lock>
 8011992:	4b0f      	ldr	r3, [pc, #60]	; (80119d0 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8011994:	b158      	cbz	r0, 80119ae <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8011996:	801d      	strh	r5, [r3, #0]
 8011998:	2300      	movs	r3, #0
 801199a:	4a0e      	ldr	r2, [pc, #56]	; (80119d4 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801199c:	4630      	mov	r0, r6
 801199e:	6013      	str	r3, [r2, #0]
 80119a0:	4a0d      	ldr	r2, [pc, #52]	; (80119d8 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80119a2:	603b      	str	r3, [r7, #0]
 80119a4:	6013      	str	r3, [r2, #0]
 80119a6:	f7ff fefd 	bl	80117a4 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80119aa:	4620      	mov	r0, r4
 80119ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80119b2:	2002      	movs	r0, #2
 80119b4:	801a      	strh	r2, [r3, #0]
 80119b6:	6038      	str	r0, [r7, #0]
 80119b8:	f001 fa50 	bl	8012e5c <_ZN8touchgfx6Screen4drawEv>
 80119bc:	e7ec      	b.n	8011998 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80119be:	bf00      	nop
 80119c0:	08020128 	.word	0x08020128
 80119c4:	2401aab4 	.word	0x2401aab4
 80119c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80119cc:	f407a5c2 	.word	0xf407a5c2
 80119d0:	24000020 	.word	0x24000020
 80119d4:	2401aac4 	.word	0x2401aac4
 80119d8:	2401aab8 	.word	0x2401aab8

080119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80119dc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80119e0:	3b01      	subs	r3, #1
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	428b      	cmp	r3, r1
 80119e6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 80119ea:	b510      	push	{r4, lr}
 80119ec:	d908      	bls.n	8011a00 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 80119ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80119f2:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 80119fc:	685a      	ldr	r2, [r3, #4]
 80119fe:	6062      	str	r2, [r4, #4]
 8011a00:	bd10      	pop	{r4, pc}
	...

08011a04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a08:	b08f      	sub	sp, #60	; 0x3c
 8011a0a:	4b8f      	ldr	r3, [pc, #572]	; (8011c48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8011a0c:	4683      	mov	fp, r0
 8011a0e:	ac0a      	add	r4, sp, #40	; 0x28
 8011a10:	e884 0006 	stmia.w	r4, {r1, r2}
 8011a14:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a18:	4620      	mov	r0, r4
 8011a1a:	4b8c      	ldr	r3, [pc, #560]	; (8011c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8011a1c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8011a20:	f7ff fdc6 	bl	80115b0 <_ZN8touchgfx4Rect10restrictToEss>
 8011a24:	4620      	mov	r0, r4
 8011a26:	f7fc fc02 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d16a      	bne.n	8011b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011a2e:	9403      	str	r4, [sp, #12]
 8011a30:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8011a34:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8011a38:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8011a3c:	9301      	str	r3, [sp, #4]
 8011a3e:	35a4      	adds	r5, #164	; 0xa4
 8011a40:	b15c      	cbz	r4, 8011a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8011a42:	4629      	mov	r1, r5
 8011a44:	9803      	ldr	r0, [sp, #12]
 8011a46:	f7ff fe03 	bl	8011650 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011a4a:	3c01      	subs	r4, #1
 8011a4c:	b118      	cbz	r0, 8011a56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8011a4e:	b2a1      	uxth	r1, r4
 8011a50:	9801      	ldr	r0, [sp, #4]
 8011a52:	f7ff ffc3 	bl	80119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011a56:	3d08      	subs	r5, #8
 8011a58:	e7f2      	b.n	8011a40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8011a5a:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 8011a5e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8011a62:	f8cd a010 	str.w	sl, [sp, #16]
 8011a66:	9302      	str	r3, [sp, #8]
 8011a68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011a6c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011a70:	9306      	str	r3, [sp, #24]
 8011a72:	445c      	add	r4, fp
 8011a74:	2500      	movs	r5, #0
 8011a76:	4626      	mov	r6, r4
 8011a78:	f8cd a014 	str.w	sl, [sp, #20]
 8011a7c:	462f      	mov	r7, r5
 8011a7e:	9b05      	ldr	r3, [sp, #20]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d073      	beq.n	8011b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011a84:	9903      	ldr	r1, [sp, #12]
 8011a86:	4630      	mov	r0, r6
 8011a88:	f7ff fd70 	bl	801156c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011a8c:	b350      	cbz	r0, 8011ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011a8e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8011a92:	f9b6 c000 	ldrsh.w	ip, [r6]
 8011a96:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8011a9a:	45e6      	cmp	lr, ip
 8011a9c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8011aa0:	db33      	blt.n	8011b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8011aa2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011aa6:	88b3      	ldrh	r3, [r6, #4]
 8011aa8:	4472      	add	r2, lr
 8011aaa:	4463      	add	r3, ip
 8011aac:	b212      	sxth	r2, r2
 8011aae:	b21b      	sxth	r3, r3
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	dc2a      	bgt.n	8011b0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8011ab4:	fa1f f289 	uxth.w	r2, r9
 8011ab8:	88f3      	ldrh	r3, [r6, #6]
 8011aba:	45c8      	cmp	r8, r9
 8011abc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011ac0:	4413      	add	r3, r2
 8011ac2:	fa1f fc88 	uxth.w	ip, r8
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	fa0f fe83 	sxth.w	lr, r3
 8011acc:	db0f      	blt.n	8011aee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8011ace:	eba3 030c 	sub.w	r3, r3, ip
 8011ad2:	1ac9      	subs	r1, r1, r3
 8011ad4:	b209      	sxth	r1, r1
 8011ad6:	2900      	cmp	r1, #0
 8011ad8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011adc:	dd12      	ble.n	8011b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011ade:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	9b05      	ldr	r3, [sp, #20]
 8011ae6:	3e08      	subs	r6, #8
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	9305      	str	r3, [sp, #20]
 8011aec:	e7c7      	b.n	8011a7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8011aee:	4461      	add	r1, ip
 8011af0:	b209      	sxth	r1, r1
 8011af2:	4571      	cmp	r1, lr
 8011af4:	dc38      	bgt.n	8011b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8011af6:	eba2 020c 	sub.w	r2, r2, ip
 8011afa:	b212      	sxth	r2, r2
 8011afc:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8011b00:	2a00      	cmp	r2, #0
 8011b02:	dcee      	bgt.n	8011ae2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011b04:	b00f      	add	sp, #60	; 0x3c
 8011b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b0a:	45c8      	cmp	r8, r9
 8011b0c:	db2c      	blt.n	8011b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8011b0e:	88f3      	ldrh	r3, [r6, #6]
 8011b10:	4499      	add	r9, r3
 8011b12:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8011b16:	4498      	add	r8, r3
 8011b18:	fa0f f989 	sxth.w	r9, r9
 8011b1c:	fa0f f888 	sxth.w	r8, r8
 8011b20:	45c1      	cmp	r9, r8
 8011b22:	db21      	blt.n	8011b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8011b24:	fa1f f28c 	uxth.w	r2, ip
 8011b28:	88b3      	ldrh	r3, [r6, #4]
 8011b2a:	45e6      	cmp	lr, ip
 8011b2c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8011b30:	4413      	add	r3, r2
 8011b32:	fa1f f88e 	uxth.w	r8, lr
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	fa0f f983 	sxth.w	r9, r3
 8011b3c:	db0a      	blt.n	8011b54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8011b3e:	eba3 0308 	sub.w	r3, r3, r8
 8011b42:	1ac9      	subs	r1, r1, r3
 8011b44:	b209      	sxth	r1, r1
 8011b46:	2900      	cmp	r1, #0
 8011b48:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8011b4c:	ddda      	ble.n	8011b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011b4e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8011b52:	e7c6      	b.n	8011ae2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011b54:	4441      	add	r1, r8
 8011b56:	b209      	sxth	r1, r1
 8011b58:	4549      	cmp	r1, r9
 8011b5a:	dc05      	bgt.n	8011b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8011b5c:	eba2 0208 	sub.w	r2, r2, r8
 8011b60:	b212      	sxth	r2, r2
 8011b62:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011b66:	e7cb      	b.n	8011b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8011b68:	4607      	mov	r7, r0
 8011b6a:	e7bb      	b.n	8011ae4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8011b6c:	2d00      	cmp	r5, #0
 8011b6e:	d181      	bne.n	8011a74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8011b70:	2f00      	cmp	r7, #0
 8011b72:	f000 81dd 	beq.w	8011f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8011b76:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8011b7a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8011b7e:	b2b3      	uxth	r3, r6
 8011b80:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8011b84:	9305      	str	r3, [sp, #20]
 8011b86:	9a05      	ldr	r2, [sp, #20]
 8011b88:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8011b8c:	4413      	add	r3, r2
 8011b8e:	b2ba      	uxth	r2, r7
 8011b90:	4492      	add	sl, r2
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	fa1f fa8a 	uxth.w	sl, sl
 8011b98:	fa0f f883 	sxth.w	r8, r3
 8011b9c:	fa0f f98a 	sxth.w	r9, sl
 8011ba0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8011ba4:	9b04      	ldr	r3, [sp, #16]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d052      	beq.n	8011c50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8011baa:	9903      	ldr	r1, [sp, #12]
 8011bac:	4620      	mov	r0, r4
 8011bae:	f7ff fcdd 	bl	801156c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011bb2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011bb6:	b1c0      	cbz	r0, 8011bea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8011bb8:	f9b4 e000 	ldrsh.w	lr, [r4]
 8011bbc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011bc0:	4576      	cmp	r6, lr
 8011bc2:	dc22      	bgt.n	8011c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8011bc4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8011bc8:	44f4      	add	ip, lr
 8011bca:	fa0f fc8c 	sxth.w	ip, ip
 8011bce:	45e0      	cmp	r8, ip
 8011bd0:	db1b      	blt.n	8011c0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8011bd2:	428f      	cmp	r7, r1
 8011bd4:	fa1f fc81 	uxth.w	ip, r1
 8011bd8:	88e1      	ldrh	r1, [r4, #6]
 8011bda:	dc0d      	bgt.n	8011bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8011bdc:	ebaa 0c0c 	sub.w	ip, sl, ip
 8011be0:	f8a4 9002 	strh.w	r9, [r4, #2]
 8011be4:	eba1 010c 	sub.w	r1, r1, ip
 8011be8:	80e1      	strh	r1, [r4, #6]
 8011bea:	4628      	mov	r0, r5
 8011bec:	9904      	ldr	r1, [sp, #16]
 8011bee:	3c08      	subs	r4, #8
 8011bf0:	4605      	mov	r5, r0
 8011bf2:	3901      	subs	r1, #1
 8011bf4:	9104      	str	r1, [sp, #16]
 8011bf6:	e7d3      	b.n	8011ba0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8011bf8:	4461      	add	r1, ip
 8011bfa:	b209      	sxth	r1, r1
 8011bfc:	4549      	cmp	r1, r9
 8011bfe:	dcf5      	bgt.n	8011bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8011c00:	eba2 0c0c 	sub.w	ip, r2, ip
 8011c04:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011c08:	e7ef      	b.n	8011bea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8011c0a:	428f      	cmp	r7, r1
 8011c0c:	dcee      	bgt.n	8011bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8011c0e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8011c12:	4461      	add	r1, ip
 8011c14:	b209      	sxth	r1, r1
 8011c16:	4589      	cmp	r9, r1
 8011c18:	dbe8      	blt.n	8011bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8011c1a:	4576      	cmp	r6, lr
 8011c1c:	fa1f fc8e 	uxth.w	ip, lr
 8011c20:	88a1      	ldrh	r1, [r4, #4]
 8011c22:	dc07      	bgt.n	8011c34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8011c24:	eba3 0c0c 	sub.w	ip, r3, ip
 8011c28:	f8a4 8000 	strh.w	r8, [r4]
 8011c2c:	eba1 010c 	sub.w	r1, r1, ip
 8011c30:	80a1      	strh	r1, [r4, #4]
 8011c32:	e7da      	b.n	8011bea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8011c34:	4461      	add	r1, ip
 8011c36:	b209      	sxth	r1, r1
 8011c38:	4588      	cmp	r8, r1
 8011c3a:	dbd7      	blt.n	8011bec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8011c3c:	9905      	ldr	r1, [sp, #20]
 8011c3e:	eba1 0c0c 	sub.w	ip, r1, ip
 8011c42:	f8a4 c004 	strh.w	ip, [r4, #4]
 8011c46:	e7d0      	b.n	8011bea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8011c48:	2401aa6e 	.word	0x2401aa6e
 8011c4c:	2401aa6c 	.word	0x2401aa6c
 8011c50:	2d00      	cmp	r5, #0
 8011c52:	f000 816d 	beq.w	8011f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8011c56:	9b06      	ldr	r3, [sp, #24]
 8011c58:	445b      	add	r3, fp
 8011c5a:	461c      	mov	r4, r3
 8011c5c:	9b02      	ldr	r3, [sp, #8]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	f000 8166 	beq.w	8011f30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8011c64:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8011c68:	9803      	ldr	r0, [sp, #12]
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	f7ff fcf0 	bl	8011650 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011c70:	b120      	cbz	r0, 8011c7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8011c72:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011c76:	9801      	ldr	r0, [sp, #4]
 8011c78:	f7ff feb0 	bl	80119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011c7c:	9903      	ldr	r1, [sp, #12]
 8011c7e:	4628      	mov	r0, r5
 8011c80:	f7ff fc74 	bl	801156c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	f000 809c 	beq.w	8011dc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8011c8a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8011c8e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8011c92:	fa1f f189 	uxth.w	r1, r9
 8011c96:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8011c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8011c9c:	eb01 0c03 	add.w	ip, r1, r3
 8011ca0:	b283      	uxth	r3, r0
 8011ca2:	4548      	cmp	r0, r9
 8011ca4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8011ca8:	fa1f fa8c 	uxth.w	sl, ip
 8011cac:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8011cb0:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8011cb4:	eb03 050c 	add.w	r5, r3, ip
 8011cb8:	b2ad      	uxth	r5, r5
 8011cba:	9505      	str	r5, [sp, #20]
 8011cbc:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8011cc0:	9504      	str	r5, [sp, #16]
 8011cc2:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8011cc6:	f340 8099 	ble.w	8011dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8011cca:	1a5b      	subs	r3, r3, r1
 8011ccc:	4596      	cmp	lr, r2
 8011cce:	fa0f f08a 	sxth.w	r0, sl
 8011cd2:	b29b      	uxth	r3, r3
 8011cd4:	b21e      	sxth	r6, r3
 8011cd6:	dd2e      	ble.n	8011d36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8011cd8:	9f02      	ldr	r7, [sp, #8]
 8011cda:	fa1f fe8e 	uxth.w	lr, lr
 8011cde:	b292      	uxth	r2, r2
 8011ce0:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8011ce4:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8011ce8:	9f04      	ldr	r7, [sp, #16]
 8011cea:	ebae 0102 	sub.w	r1, lr, r2
 8011cee:	44a6      	add	lr, r4
 8011cf0:	1a3f      	subs	r7, r7, r0
 8011cf2:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8011cf6:	b289      	uxth	r1, r1
 8011cf8:	4402      	add	r2, r0
 8011cfa:	fa0f fe8e 	sxth.w	lr, lr
 8011cfe:	b20d      	sxth	r5, r1
 8011d00:	b212      	sxth	r2, r2
 8011d02:	436f      	muls	r7, r5
 8011d04:	ebae 0202 	sub.w	r2, lr, r2
 8011d08:	4372      	muls	r2, r6
 8011d0a:	4297      	cmp	r7, r2
 8011d0c:	db09      	blt.n	8011d22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8011d0e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8011d12:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8011d16:	449c      	add	ip, r3
 8011d18:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8011d1c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011d20:	e686      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d22:	4421      	add	r1, r4
 8011d24:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8011d28:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8011d2c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011d30:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011d34:	e67c      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d36:	9f04      	ldr	r7, [sp, #16]
 8011d38:	42b8      	cmp	r0, r7
 8011d3a:	da27      	bge.n	8011d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8011d3c:	9902      	ldr	r1, [sp, #8]
 8011d3e:	1a3f      	subs	r7, r7, r0
 8011d40:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8011d44:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8011d48:	eb05 010e 	add.w	r1, r5, lr
 8011d4c:	fa1f f881 	uxth.w	r8, r1
 8011d50:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8011d54:	4411      	add	r1, r2
 8011d56:	fa0f f988 	sxth.w	r9, r8
 8011d5a:	eba2 020e 	sub.w	r2, r2, lr
 8011d5e:	eba1 0108 	sub.w	r1, r1, r8
 8011d62:	4372      	muls	r2, r6
 8011d64:	b289      	uxth	r1, r1
 8011d66:	fa0f f881 	sxth.w	r8, r1
 8011d6a:	fb08 f707 	mul.w	r7, r8, r7
 8011d6e:	42ba      	cmp	r2, r7
 8011d70:	dc06      	bgt.n	8011d80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8011d72:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8011d76:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8011d7a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8011d7e:	e7ca      	b.n	8011d16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8011d80:	4429      	add	r1, r5
 8011d82:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8011d86:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011d8a:	e651      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d8c:	9805      	ldr	r0, [sp, #20]
 8011d8e:	2d06      	cmp	r5, #6
 8011d90:	ebaa 0000 	sub.w	r0, sl, r0
 8011d94:	b280      	uxth	r0, r0
 8011d96:	fa0f fe80 	sxth.w	lr, r0
 8011d9a:	d817      	bhi.n	8011dcc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8011d9c:	9b04      	ldr	r3, [sp, #16]
 8011d9e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8011da2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8011da6:	1c6b      	adds	r3, r5, #1
 8011da8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8011dac:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8011db0:	9b01      	ldr	r3, [sp, #4]
 8011db2:	9801      	ldr	r0, [sp, #4]
 8011db4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011db8:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8011dbc:	805a      	strh	r2, [r3, #2]
 8011dbe:	809e      	strh	r6, [r3, #4]
 8011dc0:	80d9      	strh	r1, [r3, #6]
 8011dc2:	9b02      	ldr	r3, [sp, #8]
 8011dc4:	3c08      	subs	r4, #8
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	9302      	str	r3, [sp, #8]
 8011dca:	e747      	b.n	8011c5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8011dcc:	9a02      	ldr	r2, [sp, #8]
 8011dce:	45b6      	cmp	lr, r6
 8011dd0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011dd4:	db0d      	blt.n	8011df2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8011dd6:	449c      	add	ip, r3
 8011dd8:	445a      	add	r2, fp
 8011dda:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8011dde:	fa1f fc8c 	uxth.w	ip, ip
 8011de2:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8011de6:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011dea:	448c      	add	ip, r1
 8011dec:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8011df0:	e61e      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011df2:	445a      	add	r2, fp
 8011df4:	4484      	add	ip, r0
 8011df6:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8011dfa:	e78f      	b.n	8011d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8011dfc:	fa1f f18e 	uxth.w	r1, lr
 8011e00:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8011e04:	b293      	uxth	r3, r2
 8011e06:	4596      	cmp	lr, r2
 8011e08:	eb01 0806 	add.w	r8, r1, r6
 8011e0c:	9306      	str	r3, [sp, #24]
 8011e0e:	fa1f f888 	uxth.w	r8, r8
 8011e12:	9f06      	ldr	r7, [sp, #24]
 8011e14:	fa0f f388 	sxth.w	r3, r8
 8011e18:	9307      	str	r3, [sp, #28]
 8011e1a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8011e1e:	443b      	add	r3, r7
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	9308      	str	r3, [sp, #32]
 8011e24:	da24      	bge.n	8011e70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8011e26:	9905      	ldr	r1, [sp, #20]
 8011e28:	eba3 0308 	sub.w	r3, r3, r8
 8011e2c:	eba2 020e 	sub.w	r2, r2, lr
 8011e30:	eba9 0000 	sub.w	r0, r9, r0
 8011e34:	ebaa 0401 	sub.w	r4, sl, r1
 8011e38:	b29b      	uxth	r3, r3
 8011e3a:	b2a4      	uxth	r4, r4
 8011e3c:	b219      	sxth	r1, r3
 8011e3e:	b225      	sxth	r5, r4
 8011e40:	4348      	muls	r0, r1
 8011e42:	436a      	muls	r2, r5
 8011e44:	4282      	cmp	r2, r0
 8011e46:	9a02      	ldr	r2, [sp, #8]
 8011e48:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011e4c:	445a      	add	r2, fp
 8011e4e:	dc06      	bgt.n	8011e5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8011e50:	9b07      	ldr	r3, [sp, #28]
 8011e52:	44a4      	add	ip, r4
 8011e54:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8011e58:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8011e5c:	e75e      	b.n	8011d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8011e5e:	9904      	ldr	r1, [sp, #16]
 8011e60:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8011e64:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8011e68:	4433      	add	r3, r6
 8011e6a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011e6e:	e5df      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011e70:	9f06      	ldr	r7, [sp, #24]
 8011e72:	9b04      	ldr	r3, [sp, #16]
 8011e74:	1bc9      	subs	r1, r1, r7
 8011e76:	fa0f f78a 	sxth.w	r7, sl
 8011e7a:	b289      	uxth	r1, r1
 8011e7c:	429f      	cmp	r7, r3
 8011e7e:	fa0f fe81 	sxth.w	lr, r1
 8011e82:	dd23      	ble.n	8011ecc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8011e84:	9a05      	ldr	r2, [sp, #20]
 8011e86:	eba9 0000 	sub.w	r0, r9, r0
 8011e8a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011e8e:	ebaa 0202 	sub.w	r2, sl, r2
 8011e92:	9d07      	ldr	r5, [sp, #28]
 8011e94:	fb0e f000 	mul.w	r0, lr, r0
 8011e98:	b292      	uxth	r2, r2
 8011e9a:	eba5 0a03 	sub.w	sl, r5, r3
 8011e9e:	9b02      	ldr	r3, [sp, #8]
 8011ea0:	b214      	sxth	r4, r2
 8011ea2:	00db      	lsls	r3, r3, #3
 8011ea4:	fb04 fa0a 	mul.w	sl, r4, sl
 8011ea8:	445b      	add	r3, fp
 8011eaa:	4550      	cmp	r0, sl
 8011eac:	db03      	blt.n	8011eb6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8011eae:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8011eb2:	4494      	add	ip, r2
 8011eb4:	e732      	b.n	8011d1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8011eb6:	9a04      	ldr	r2, [sp, #16]
 8011eb8:	4431      	add	r1, r6
 8011eba:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8011ebe:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8011ec2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8011ec6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011eca:	e75c      	b.n	8011d86 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8011ecc:	9b08      	ldr	r3, [sp, #32]
 8011ece:	2d06      	cmp	r5, #6
 8011ed0:	eba3 0308 	sub.w	r3, r3, r8
 8011ed4:	b29b      	uxth	r3, r3
 8011ed6:	b218      	sxth	r0, r3
 8011ed8:	d813      	bhi.n	8011f02 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8011eda:	9b07      	ldr	r3, [sp, #28]
 8011edc:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8011ee0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8011ee4:	1c6b      	adds	r3, r5, #1
 8011ee6:	9901      	ldr	r1, [sp, #4]
 8011ee8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8011eec:	9b01      	ldr	r3, [sp, #4]
 8011eee:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8011ef2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011ef6:	805a      	strh	r2, [r3, #2]
 8011ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011efa:	f8a3 e006 	strh.w	lr, [r3, #6]
 8011efe:	809a      	strh	r2, [r3, #4]
 8011f00:	e75f      	b.n	8011dc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8011f02:	9c02      	ldr	r4, [sp, #8]
 8011f04:	4570      	cmp	r0, lr
 8011f06:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8011f0a:	db0d      	blt.n	8011f28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8011f0c:	4431      	add	r1, r6
 8011f0e:	9b06      	ldr	r3, [sp, #24]
 8011f10:	445c      	add	r4, fp
 8011f12:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011f16:	b289      	uxth	r1, r1
 8011f18:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8011f1c:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011f20:	4419      	add	r1, r3
 8011f22:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8011f26:	e583      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011f28:	445c      	add	r4, fp
 8011f2a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8011f2e:	e79b      	b.n	8011e68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8011f30:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8011f34:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8011f38:	1e65      	subs	r5, r4, #1
 8011f3a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8011f3e:	b2ad      	uxth	r5, r5
 8011f40:	42b5      	cmp	r5, r6
 8011f42:	d044      	beq.n	8011fce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8011f44:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8011f48:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8011f4c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8011f50:	4282      	cmp	r2, r0
 8011f52:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8011f56:	d11f      	bne.n	8011f98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8011f58:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8011f5c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8011f60:	459c      	cmp	ip, r3
 8011f62:	d119      	bne.n	8011f98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8011f64:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8011f68:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011f6c:	19d8      	adds	r0, r3, r7
 8011f6e:	b200      	sxth	r0, r0
 8011f70:	4288      	cmp	r0, r1
 8011f72:	d109      	bne.n	8011f88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8011f74:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8011f78:	4413      	add	r3, r2
 8011f7a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8011f7e:	4629      	mov	r1, r5
 8011f80:	9801      	ldr	r0, [sp, #4]
 8011f82:	f7ff fd2b 	bl	80119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011f86:	e003      	b.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011f88:	4411      	add	r1, r2
 8011f8a:	b209      	sxth	r1, r1
 8011f8c:	42b9      	cmp	r1, r7
 8011f8e:	d0f3      	beq.n	8011f78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8011f90:	3d01      	subs	r5, #1
 8011f92:	3c08      	subs	r4, #8
 8011f94:	b2ad      	uxth	r5, r5
 8011f96:	e7d3      	b.n	8011f40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8011f98:	42b9      	cmp	r1, r7
 8011f9a:	d1f9      	bne.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011f9c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8011fa0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8011fa4:	4299      	cmp	r1, r3
 8011fa6:	d1f3      	bne.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011fa8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8011fac:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011fb0:	181f      	adds	r7, r3, r0
 8011fb2:	b23f      	sxth	r7, r7
 8011fb4:	42ba      	cmp	r2, r7
 8011fb6:	d105      	bne.n	8011fc4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8011fb8:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8011fbc:	440b      	add	r3, r1
 8011fbe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011fc2:	e7dc      	b.n	8011f7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8011fc4:	440a      	add	r2, r1
 8011fc6:	b212      	sxth	r2, r2
 8011fc8:	4290      	cmp	r0, r2
 8011fca:	d1e1      	bne.n	8011f90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011fcc:	e7f6      	b.n	8011fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8011fce:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8011fd2:	2e07      	cmp	r6, #7
 8011fd4:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8011fd8:	d812      	bhi.n	8012000 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8011fda:	1c75      	adds	r5, r6, #1
 8011fdc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8011fe0:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8011fe4:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8011fe8:	9d01      	ldr	r5, [sp, #4]
 8011fea:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8011fee:	442c      	add	r4, r5
 8011ff0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8011ff4:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8011ff8:	8061      	strh	r1, [r4, #2]
 8011ffa:	80a2      	strh	r2, [r4, #4]
 8011ffc:	80e3      	strh	r3, [r4, #6]
 8011ffe:	e581      	b.n	8011b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012000:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8012004:	3e01      	subs	r6, #1
 8012006:	445c      	add	r4, fp
 8012008:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801200c:	f04f 37ff 	mov.w	r7, #4294967295
 8012010:	2500      	movs	r5, #0
 8012012:	9305      	str	r3, [sp, #20]
 8012014:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8012018:	1e72      	subs	r2, r6, #1
 801201a:	9302      	str	r3, [sp, #8]
 801201c:	4691      	mov	r9, r2
 801201e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8012022:	9304      	str	r3, [sp, #16]
 8012024:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8012028:	f1b9 3fff 	cmp.w	r9, #4294967295
 801202c:	6818      	ldr	r0, [r3, #0]
 801202e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012032:	9207      	str	r2, [sp, #28]
 8012034:	bf16      	itet	ne
 8012036:	9905      	ldrne	r1, [sp, #20]
 8012038:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801203c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8012040:	9306      	str	r3, [sp, #24]
 8012042:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012046:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801204a:	fb18 f801 	smulbb	r8, r8, r1
 801204e:	6859      	ldr	r1, [r3, #4]
 8012050:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012054:	4671      	mov	r1, lr
 8012056:	a80c      	add	r0, sp, #48	; 0x30
 8012058:	f7ff fb20 	bl	801169c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801205c:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8012060:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8012064:	f04f 0c08 	mov.w	ip, #8
 8012068:	9b04      	ldr	r3, [sp, #16]
 801206a:	9a02      	ldr	r2, [sp, #8]
 801206c:	fb10 f001 	smulbb	r0, r0, r1
 8012070:	fb02 8803 	mla	r8, r2, r3, r8
 8012074:	eba0 0108 	sub.w	r1, r0, r8
 8012078:	fb90 f0fc 	sdiv	r0, r0, ip
 801207c:	4288      	cmp	r0, r1
 801207e:	dc20      	bgt.n	80120c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8012080:	4551      	cmp	r1, sl
 8012082:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012086:	da03      	bge.n	8012090 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8012088:	b1d9      	cbz	r1, 80120c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801208a:	468a      	mov	sl, r1
 801208c:	464f      	mov	r7, r9
 801208e:	4635      	mov	r5, r6
 8012090:	f109 39ff 	add.w	r9, r9, #4294967295
 8012094:	f119 0f02 	cmn.w	r9, #2
 8012098:	d1c6      	bne.n	8012028 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801209a:	4616      	mov	r6, r2
 801209c:	3201      	adds	r2, #1
 801209e:	f1a4 0408 	sub.w	r4, r4, #8
 80120a2:	d1b7      	bne.n	8012014 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80120a4:	9b01      	ldr	r3, [sp, #4]
 80120a6:	b2ac      	uxth	r4, r5
 80120a8:	00ed      	lsls	r5, r5, #3
 80120aa:	1958      	adds	r0, r3, r5
 80120ac:	1c7b      	adds	r3, r7, #1
 80120ae:	d10b      	bne.n	80120c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 80120b0:	4601      	mov	r1, r0
 80120b2:	9803      	ldr	r0, [sp, #12]
 80120b4:	f7ff faf2 	bl	801169c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80120b8:	4621      	mov	r1, r4
 80120ba:	9801      	ldr	r0, [sp, #4]
 80120bc:	f7ff fc8e 	bl	80119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80120c0:	e4b6      	b.n	8011a30 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80120c2:	464f      	mov	r7, r9
 80120c4:	4635      	mov	r5, r6
 80120c6:	e7ed      	b.n	80120a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80120c8:	9b01      	ldr	r3, [sp, #4]
 80120ca:	00ff      	lsls	r7, r7, #3
 80120cc:	445d      	add	r5, fp
 80120ce:	19d9      	adds	r1, r3, r7
 80120d0:	445f      	add	r7, fp
 80120d2:	f7ff fae3 	bl	801169c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80120d6:	9b03      	ldr	r3, [sp, #12]
 80120d8:	cb03      	ldmia	r3!, {r0, r1}
 80120da:	9b03      	ldr	r3, [sp, #12]
 80120dc:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80120e0:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80120e4:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80120e8:	6869      	ldr	r1, [r5, #4]
 80120ea:	c303      	stmia	r3!, {r0, r1}
 80120ec:	e7e4      	b.n	80120b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80120ee:	bf00      	nop

080120f0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80120f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f4:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80120f8:	b09b      	sub	sp, #108	; 0x6c
 80120fa:	4604      	mov	r4, r0
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7fc f896 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012102:	4605      	mov	r5, r0
 8012104:	b948      	cbnz	r0, 801211a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8012106:	6823      	ldr	r3, [r4, #0]
 8012108:	4620      	mov	r0, r4
 801210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801210c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012110:	4798      	blx	r3
 8012112:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8012116:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 801211a:	4bc5      	ldr	r3, [pc, #788]	; (8012430 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d03f      	beq.n	80121a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012122:	4dc4      	ldr	r5, [pc, #784]	; (8012434 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8012124:	4628      	mov	r0, r5
 8012126:	f7fc f882 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 801212a:	4606      	mov	r6, r0
 801212c:	2800      	cmp	r0, #0
 801212e:	d138      	bne.n	80121a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012130:	4628      	mov	r0, r5
 8012132:	f7ff f951 	bl	80113d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012136:	6823      	ldr	r3, [r4, #0]
 8012138:	6829      	ldr	r1, [r5, #0]
 801213a:	4620      	mov	r0, r4
 801213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801213e:	686a      	ldr	r2, [r5, #4]
 8012140:	4798      	blx	r3
 8012142:	802e      	strh	r6, [r5, #0]
 8012144:	806e      	strh	r6, [r5, #2]
 8012146:	80ae      	strh	r6, [r5, #4]
 8012148:	80ee      	strh	r6, [r5, #6]
 801214a:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801214e:	4dba      	ldr	r5, [pc, #744]	; (8012438 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8012150:	4640      	mov	r0, r8
 8012152:	f7ff fbe8 	bl	8011926 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012156:	882e      	ldrh	r6, [r5, #0]
 8012158:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801215c:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8012160:	4633      	mov	r3, r6
 8012162:	42bb      	cmp	r3, r7
 8012164:	d224      	bcs.n	80121b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012166:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801216a:	2907      	cmp	r1, #7
 801216c:	d816      	bhi.n	801219c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801216e:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012172:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8012176:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 801217a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801217e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012182:	1c4a      	adds	r2, r1, #1
 8012184:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8012188:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 801218c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8012190:	f8a2 a002 	strh.w	sl, [r2, #2]
 8012194:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012198:	f8a2 c006 	strh.w	ip, [r2, #6]
 801219c:	3301      	adds	r3, #1
 801219e:	b29b      	uxth	r3, r3
 80121a0:	e7df      	b.n	8012162 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80121a2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d1cf      	bne.n	801214a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80121aa:	b01b      	add	sp, #108	; 0x6c
 80121ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121b0:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 80121b4:	42b3      	cmp	r3, r6
 80121b6:	d90c      	bls.n	80121d2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 80121b8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 80121bc:	6822      	ldr	r2, [r4, #0]
 80121be:	3601      	adds	r6, #1
 80121c0:	4620      	mov	r0, r4
 80121c2:	6c17      	ldr	r7, [r2, #64]	; 0x40
 80121c4:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80121c8:	b2b6      	uxth	r6, r6
 80121ca:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80121ce:	47b8      	blx	r7
 80121d0:	e7ee      	b.n	80121b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80121d2:	4a9a      	ldr	r2, [pc, #616]	; (801243c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80121d4:	6813      	ldr	r3, [r2, #0]
 80121d6:	4691      	mov	r9, r2
 80121d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80121dc:	2b01      	cmp	r3, #1
 80121de:	f040 80e0 	bne.w	80123a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80121e2:	8829      	ldrh	r1, [r5, #0]
 80121e4:	2600      	movs	r6, #0
 80121e6:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80121ea:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80121ee:	33ae      	adds	r3, #174	; 0xae
 80121f0:	428f      	cmp	r7, r1
 80121f2:	f103 0308 	add.w	r3, r3, #8
 80121f6:	dd0a      	ble.n	801220e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80121f8:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80121fc:	3101      	adds	r1, #1
 80121fe:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8012202:	4402      	add	r2, r0
 8012204:	b212      	sxth	r2, r2
 8012206:	4296      	cmp	r6, r2
 8012208:	bfb8      	it	lt
 801220a:	4616      	movlt	r6, r2
 801220c:	e7f0      	b.n	80121f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801220e:	4b8c      	ldr	r3, [pc, #560]	; (8012440 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012210:	f8df 9228 	ldr.w	r9, [pc, #552]	; 801243c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8012214:	881b      	ldrh	r3, [r3, #0]
 8012216:	2b0f      	cmp	r3, #15
 8012218:	bf8c      	ite	hi
 801221a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801221e:	f04f 0b01 	movls.w	fp, #1
 8012222:	2300      	movs	r3, #0
 8012224:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012228:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801222c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8012230:	4b82      	ldr	r3, [pc, #520]	; (801243c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012232:	4438      	add	r0, r7
 8012234:	b207      	sxth	r7, r0
 8012236:	6818      	ldr	r0, [r3, #0]
 8012238:	42b7      	cmp	r7, r6
 801223a:	6803      	ldr	r3, [r0, #0]
 801223c:	f280 8083 	bge.w	8012346 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012244:	4798      	blx	r3
 8012246:	eb07 030b 	add.w	r3, r7, fp
 801224a:	4298      	cmp	r0, r3
 801224c:	da07      	bge.n	801225e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801224e:	42b0      	cmp	r0, r6
 8012250:	da05      	bge.n	801225e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8012252:	4287      	cmp	r7, r0
 8012254:	dd6c      	ble.n	8012330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012256:	2f00      	cmp	r7, #0
 8012258:	dd6a      	ble.n	8012330 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801225a:	4630      	mov	r0, r6
 801225c:	e004      	b.n	8012268 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801225e:	4287      	cmp	r7, r0
 8012260:	dcfb      	bgt.n	801225a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8012262:	42b0      	cmp	r0, r6
 8012264:	bfa8      	it	ge
 8012266:	4630      	movge	r0, r6
 8012268:	4b76      	ldr	r3, [pc, #472]	; (8012444 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801226a:	1bc0      	subs	r0, r0, r7
 801226c:	2200      	movs	r2, #0
 801226e:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012272:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012276:	882f      	ldrh	r7, [r5, #0]
 8012278:	f8ad 2014 	strh.w	r2, [sp, #20]
 801227c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012280:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012284:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8012288:	42bb      	cmp	r3, r7
 801228a:	d9cd      	bls.n	8012228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801228c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012290:	ab07      	add	r3, sp, #28
 8012292:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012296:	6851      	ldr	r1, [r2, #4]
 8012298:	c303      	stmia	r3!, {r0, r1}
 801229a:	a905      	add	r1, sp, #20
 801229c:	a807      	add	r0, sp, #28
 801229e:	f7ff f965 	bl	801156c <_ZNK8touchgfx4Rect9intersectERKS0_>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d04c      	beq.n	8012340 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80122a6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80122aa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80122ae:	f8bd a020 	ldrh.w	sl, [sp, #32]
 80122b2:	4686      	mov	lr, r0
 80122b4:	4290      	cmp	r0, r2
 80122b6:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80122ba:	4450      	add	r0, sl
 80122bc:	f8bd a018 	ldrh.w	sl, [sp, #24]
 80122c0:	bfb8      	it	lt
 80122c2:	4696      	movlt	lr, r2
 80122c4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80122c8:	4452      	add	r2, sl
 80122ca:	b280      	uxth	r0, r0
 80122cc:	4299      	cmp	r1, r3
 80122ce:	468c      	mov	ip, r1
 80122d0:	b292      	uxth	r2, r2
 80122d2:	9302      	str	r3, [sp, #8]
 80122d4:	bfb8      	it	lt
 80122d6:	469c      	movlt	ip, r3
 80122d8:	b203      	sxth	r3, r0
 80122da:	fa0f fa82 	sxth.w	sl, r2
 80122de:	f8ad e01c 	strh.w	lr, [sp, #28]
 80122e2:	f8ad c01e 	strh.w	ip, [sp, #30]
 80122e6:	4553      	cmp	r3, sl
 80122e8:	bfb8      	it	lt
 80122ea:	4602      	movlt	r2, r0
 80122ec:	9b02      	ldr	r3, [sp, #8]
 80122ee:	eba2 020e 	sub.w	r2, r2, lr
 80122f2:	f8ad 2020 	strh.w	r2, [sp, #32]
 80122f6:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80122fa:	4411      	add	r1, r2
 80122fc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012300:	4413      	add	r3, r2
 8012302:	b289      	uxth	r1, r1
 8012304:	b29b      	uxth	r3, r3
 8012306:	b208      	sxth	r0, r1
 8012308:	b21a      	sxth	r2, r3
 801230a:	4290      	cmp	r0, r2
 801230c:	bfb8      	it	lt
 801230e:	460b      	movlt	r3, r1
 8012310:	eba3 030c 	sub.w	r3, r3, ip
 8012314:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8012318:	a807      	add	r0, sp, #28
 801231a:	f7fb ff88 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 801231e:	b920      	cbnz	r0, 801232a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8012320:	6823      	ldr	r3, [r4, #0]
 8012322:	a907      	add	r1, sp, #28
 8012324:	4620      	mov	r0, r4
 8012326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012328:	4798      	blx	r3
 801232a:	3701      	adds	r7, #1
 801232c:	b2bf      	uxth	r7, r7
 801232e:	e7a9      	b.n	8012284 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012330:	f8d9 0000 	ldr.w	r0, [r9]
 8012334:	2101      	movs	r1, #1
 8012336:	6803      	ldr	r3, [r0, #0]
 8012338:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801233c:	4798      	blx	r3
 801233e:	e773      	b.n	8012228 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8012340:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012344:	e7e8      	b.n	8012318 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8012346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012348:	4798      	blx	r3
 801234a:	4b3f      	ldr	r3, [pc, #252]	; (8012448 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	2b00      	cmp	r3, #0
 8012350:	f43f af2b 	beq.w	80121aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8012354:	2300      	movs	r3, #0
 8012356:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801235a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801235e:	882b      	ldrh	r3, [r5, #0]
 8012360:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8012364:	42ab      	cmp	r3, r5
 8012366:	f4bf af20 	bcs.w	80121aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 801236a:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801236e:	2907      	cmp	r1, #7
 8012370:	d814      	bhi.n	801239c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8012372:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8012376:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801237a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801237e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8012382:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8012386:	1c4a      	adds	r2, r1, #1
 8012388:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801238c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8012390:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8012394:	f8a2 c002 	strh.w	ip, [r2, #2]
 8012398:	8097      	strh	r7, [r2, #4]
 801239a:	80d6      	strh	r6, [r2, #6]
 801239c:	3301      	adds	r3, #1
 801239e:	b29b      	uxth	r3, r3
 80123a0:	e7e0      	b.n	8012364 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	f040 8133 	bne.w	801260e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80123a8:	4b28      	ldr	r3, [pc, #160]	; (801244c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80123aa:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	2b01      	cmp	r3, #1
 80123b2:	f000 8098 	beq.w	80124e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80123b6:	882a      	ldrh	r2, [r5, #0]
 80123b8:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 80123bc:	3201      	adds	r2, #1
 80123be:	b292      	uxth	r2, r2
 80123c0:	2900      	cmp	r1, #0
 80123c2:	d0c2      	beq.n	801234a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80123c4:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 80123c8:	4694      	mov	ip, r2
 80123ca:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80123ce:	f04f 0900 	mov.w	r9, #0
 80123d2:	441e      	add	r6, r3
 80123d4:	b236      	sxth	r6, r6
 80123d6:	fa1f f38c 	uxth.w	r3, ip
 80123da:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80123de:	4299      	cmp	r1, r3
 80123e0:	f240 80be 	bls.w	8012560 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80123e4:	4427      	add	r7, r4
 80123e6:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80123ea:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80123ee:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 80123f2:	4283      	cmp	r3, r0
 80123f4:	f340 80a0 	ble.w	8012538 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80123f8:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 80123fc:	46e1      	mov	r9, ip
 80123fe:	4406      	add	r6, r0
 8012400:	b236      	sxth	r6, r6
 8012402:	429e      	cmp	r6, r3
 8012404:	bfa8      	it	ge
 8012406:	461e      	movge	r6, r3
 8012408:	f10c 0c01 	add.w	ip, ip, #1
 801240c:	e7e3      	b.n	80123d6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801240e:	d10a      	bne.n	8012426 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8012410:	4562      	cmp	r2, ip
 8012412:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 8012416:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 801241a:	bfb8      	it	lt
 801241c:	4662      	movlt	r2, ip
 801241e:	4288      	cmp	r0, r1
 8012420:	bfb8      	it	lt
 8012422:	461f      	movlt	r7, r3
 8012424:	e086      	b.n	8012534 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8012426:	428a      	cmp	r2, r1
 8012428:	bfb8      	it	lt
 801242a:	460a      	movlt	r2, r1
 801242c:	e082      	b.n	8012534 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801242e:	bf00      	nop
 8012430:	2401aab0 	.word	0x2401aab0
 8012434:	2401aabc 	.word	0x2401aabc
 8012438:	24000020 	.word	0x24000020
 801243c:	2401aa78 	.word	0x2401aa78
 8012440:	2401aa6e 	.word	0x2401aa6e
 8012444:	2401aa6c 	.word	0x2401aa6c
 8012448:	2401aa76 	.word	0x2401aa76
 801244c:	2401aa70 	.word	0x2401aa70
 8012450:	19a1      	adds	r1, r4, r6
 8012452:	ab07      	add	r3, sp, #28
 8012454:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8012458:	6849      	ldr	r1, [r1, #4]
 801245a:	c303      	stmia	r3!, {r0, r1}
 801245c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012460:	a807      	add	r0, sp, #28
 8012462:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012466:	2b13      	cmp	r3, #19
 8012468:	440b      	add	r3, r1
 801246a:	bfd8      	it	le
 801246c:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8012470:	1a9b      	subs	r3, r3, r2
 8012472:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012476:	f8ad 3020 	strh.w	r3, [sp, #32]
 801247a:	f7fe ffc7 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801247e:	a807      	add	r0, sp, #28
 8012480:	f7fb fed5 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012484:	bb78      	cbnz	r0, 80124e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8012486:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801248a:	4426      	add	r6, r4
 801248c:	f8d9 0000 	ldr.w	r0, [r9]
 8012490:	f1bc 0f14 	cmp.w	ip, #20
 8012494:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012498:	f8d0 e000 	ldr.w	lr, [r0]
 801249c:	bfa8      	it	ge
 801249e:	f04f 0c14 	movge.w	ip, #20
 80124a2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80124a6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80124aa:	fa1f fc8c 	uxth.w	ip, ip
 80124ae:	f8cd c000 	str.w	ip, [sp]
 80124b2:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 80124b6:	47d8      	blx	fp
 80124b8:	4683      	mov	fp, r0
 80124ba:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80124be:	a807      	add	r0, sp, #28
 80124c0:	f7fe ff8a 	bl	80113d8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80124c4:	6823      	ldr	r3, [r4, #0]
 80124c6:	4620      	mov	r0, r4
 80124c8:	a907      	add	r1, sp, #28
 80124ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80124cc:	4798      	blx	r3
 80124ce:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 80124d2:	eba0 000b 	sub.w	r0, r0, fp
 80124d6:	b200      	sxth	r0, r0
 80124d8:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 80124dc:	b918      	cbnz	r0, 80124e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80124de:	b2b9      	uxth	r1, r7
 80124e0:	4650      	mov	r0, sl
 80124e2:	f7ff fa7b 	bl	80119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80124e6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80124ea:	f1bb 0f00 	cmp.w	fp, #0
 80124ee:	f43f af2c 	beq.w	801234a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80124f2:	882b      	ldrh	r3, [r5, #0]
 80124f4:	2700      	movs	r7, #0
 80124f6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80124fa:	3301      	adds	r3, #1
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	b299      	uxth	r1, r3
 8012500:	00fe      	lsls	r6, r7, #3
 8012502:	458b      	cmp	fp, r1
 8012504:	d9a4      	bls.n	8012450 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8012506:	4426      	add	r6, r4
 8012508:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801250c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8012510:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8012514:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8012518:	4408      	add	r0, r1
 801251a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 801251e:	4461      	add	r1, ip
 8012520:	b200      	sxth	r0, r0
 8012522:	b209      	sxth	r1, r1
 8012524:	4288      	cmp	r0, r1
 8012526:	f6bf af72 	bge.w	801240e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801252a:	4584      	cmp	ip, r0
 801252c:	4662      	mov	r2, ip
 801252e:	461f      	mov	r7, r3
 8012530:	bfb8      	it	lt
 8012532:	4602      	movlt	r2, r0
 8012534:	3301      	adds	r3, #1
 8012536:	e7e2      	b.n	80124fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8012538:	d10e      	bne.n	8012558 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801253a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 801253e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8012542:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8012546:	4473      	add	r3, lr
 8012548:	b21b      	sxth	r3, r3
 801254a:	429e      	cmp	r6, r3
 801254c:	bfa8      	it	ge
 801254e:	461e      	movge	r6, r3
 8012550:	4287      	cmp	r7, r0
 8012552:	bfb8      	it	lt
 8012554:	46e1      	movlt	r9, ip
 8012556:	e757      	b.n	8012408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8012558:	4286      	cmp	r6, r0
 801255a:	bfa8      	it	ge
 801255c:	4606      	movge	r6, r0
 801255e:	e753      	b.n	8012408 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8012560:	eb0a 0007 	add.w	r0, sl, r7
 8012564:	4427      	add	r7, r4
 8012566:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 801256a:	f1bb 0f13 	cmp.w	fp, #19
 801256e:	bfdc      	itt	le
 8012570:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8012574:	445e      	addle	r6, fp
 8012576:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801257a:	bfd8      	it	le
 801257c:	b236      	sxthle	r6, r6
 801257e:	f7fb fe56 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 8012582:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012586:	2800      	cmp	r0, #0
 8012588:	f47f af1a 	bne.w	80123c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801258c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8012590:	fa1f fb8b 	uxth.w	fp, fp
 8012594:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012598:	1ab6      	subs	r6, r6, r2
 801259a:	4829      	ldr	r0, [pc, #164]	; (8012640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801259c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 80125a0:	2e14      	cmp	r6, #20
 80125a2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 80125a6:	6800      	ldr	r0, [r0, #0]
 80125a8:	bfa8      	it	ge
 80125aa:	2614      	movge	r6, #20
 80125ac:	f8ad 101c 	strh.w	r1, [sp, #28]
 80125b0:	f8ad 201e 	strh.w	r2, [sp, #30]
 80125b4:	b289      	uxth	r1, r1
 80125b6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80125ba:	b2b6      	uxth	r6, r6
 80125bc:	f8d0 c000 	ldr.w	ip, [r0]
 80125c0:	b292      	uxth	r2, r2
 80125c2:	455e      	cmp	r6, fp
 80125c4:	bf94      	ite	ls
 80125c6:	9600      	strls	r6, [sp, #0]
 80125c8:	f8cd b000 	strhi.w	fp, [sp]
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 80125d2:	47b0      	blx	r6
 80125d4:	6823      	ldr	r3, [r4, #0]
 80125d6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 80125da:	a907      	add	r1, sp, #28
 80125dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80125de:	4620      	mov	r0, r4
 80125e0:	4798      	blx	r3
 80125e2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80125e6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80125ea:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80125ee:	1a5b      	subs	r3, r3, r1
 80125f0:	440a      	add	r2, r1
 80125f2:	b21b      	sxth	r3, r3
 80125f4:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80125f8:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	f47f aeda 	bne.w	80123b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8012602:	fa1f f189 	uxth.w	r1, r9
 8012606:	4650      	mov	r0, sl
 8012608:	f7ff f9e8 	bl	80119dc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801260c:	e6d3      	b.n	80123b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801260e:	882e      	ldrh	r6, [r5, #0]
 8012610:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8012614:	42b3      	cmp	r3, r6
 8012616:	f67f ae98 	bls.w	801234a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801261a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801261e:	ab07      	add	r3, sp, #28
 8012620:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012624:	6851      	ldr	r1, [r2, #4]
 8012626:	c303      	stmia	r3!, {r0, r1}
 8012628:	a807      	add	r0, sp, #28
 801262a:	f7fb fe00 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 801262e:	b920      	cbnz	r0, 801263a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8012630:	6823      	ldr	r3, [r4, #0]
 8012632:	a907      	add	r1, sp, #28
 8012634:	4620      	mov	r0, r4
 8012636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012638:	4798      	blx	r3
 801263a:	3601      	adds	r6, #1
 801263c:	b2b6      	uxth	r6, r6
 801263e:	e7e7      	b.n	8012610 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8012640:	2401aa78 	.word	0x2401aa78

08012644 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8012644:	4b03      	ldr	r3, [pc, #12]	; (8012654 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8012646:	2200      	movs	r2, #0
 8012648:	801a      	strh	r2, [r3, #0]
 801264a:	805a      	strh	r2, [r3, #2]
 801264c:	809a      	strh	r2, [r3, #4]
 801264e:	80da      	strh	r2, [r3, #6]
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	2401aabc 	.word	0x2401aabc

08012658 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8012658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801265c:	b09d      	sub	sp, #116	; 0x74
 801265e:	4606      	mov	r6, r0
 8012660:	4614      	mov	r4, r2
 8012662:	468a      	mov	sl, r1
 8012664:	a803      	add	r0, sp, #12
 8012666:	461d      	mov	r5, r3
 8012668:	f000 fd72 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 801266c:	6833      	ldr	r3, [r6, #0]
 801266e:	4630      	mov	r0, r6
 8012670:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8012674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012676:	4798      	blx	r3
 8012678:	6833      	ldr	r3, [r6, #0]
 801267a:	4607      	mov	r7, r0
 801267c:	4630      	mov	r0, r6
 801267e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012680:	4798      	blx	r3
 8012682:	462a      	mov	r2, r5
 8012684:	2500      	movs	r5, #0
 8012686:	4621      	mov	r1, r4
 8012688:	9000      	str	r0, [sp, #0]
 801268a:	463b      	mov	r3, r7
 801268c:	462c      	mov	r4, r5
 801268e:	46a9      	mov	r9, r5
 8012690:	46a8      	mov	r8, r5
 8012692:	a803      	add	r0, sp, #12
 8012694:	f000 fdb7 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012698:	2300      	movs	r3, #0
 801269a:	9302      	str	r3, [sp, #8]
 801269c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80126a0:	429c      	cmp	r4, r3
 80126a2:	d002      	beq.n	80126aa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80126a4:	455c      	cmp	r4, fp
 80126a6:	bf18      	it	ne
 80126a8:	4625      	movne	r5, r4
 80126aa:	ab02      	add	r3, sp, #8
 80126ac:	4632      	mov	r2, r6
 80126ae:	4651      	mov	r1, sl
 80126b0:	a803      	add	r0, sp, #12
 80126b2:	f001 f8ad 	bl	8013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80126b6:	4604      	mov	r4, r0
 80126b8:	b108      	cbz	r0, 80126be <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80126ba:	280a      	cmp	r0, #10
 80126bc:	d10a      	bne.n	80126d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 80126be:	45c1      	cmp	r9, r8
 80126c0:	bf38      	it	cc
 80126c2:	46c1      	movcc	r9, r8
 80126c4:	f04f 0800 	mov.w	r8, #0
 80126c8:	2c00      	cmp	r4, #0
 80126ca:	d1e5      	bne.n	8012698 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80126cc:	4648      	mov	r0, r9
 80126ce:	b01d      	add	sp, #116	; 0x74
 80126d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d4:	9a02      	ldr	r2, [sp, #8]
 80126d6:	2a00      	cmp	r2, #0
 80126d8:	d0de      	beq.n	8012698 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 80126da:	7b57      	ldrb	r7, [r2, #13]
 80126dc:	4629      	mov	r1, r5
 80126de:	6833      	ldr	r3, [r6, #0]
 80126e0:	007f      	lsls	r7, r7, #1
 80126e2:	8894      	ldrh	r4, [r2, #4]
 80126e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126e6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80126ea:	7a97      	ldrb	r7, [r2, #10]
 80126ec:	4307      	orrs	r7, r0
 80126ee:	4630      	mov	r0, r6
 80126f0:	4798      	blx	r3
 80126f2:	4438      	add	r0, r7
 80126f4:	4480      	add	r8, r0
 80126f6:	fa1f f888 	uxth.w	r8, r8
 80126fa:	e7e5      	b.n	80126c8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080126fc <_ZNK8touchgfx4Font12getCharWidthEt>:
 80126fc:	b508      	push	{r3, lr}
 80126fe:	6803      	ldr	r3, [r0, #0]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	4798      	blx	r3
 8012704:	b128      	cbz	r0, 8012712 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012706:	7b43      	ldrb	r3, [r0, #13]
 8012708:	7a80      	ldrb	r0, [r0, #10]
 801270a:	005b      	lsls	r3, r3, #1
 801270c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012710:	4318      	orrs	r0, r3
 8012712:	bd08      	pop	{r3, pc}

08012714 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8012714:	b40e      	push	{r1, r2, r3}
 8012716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012718:	b09e      	sub	sp, #120	; 0x78
 801271a:	4605      	mov	r5, r0
 801271c:	ab23      	add	r3, sp, #140	; 0x8c
 801271e:	a805      	add	r0, sp, #20
 8012720:	f853 4b04 	ldr.w	r4, [r3], #4
 8012724:	9303      	str	r3, [sp, #12]
 8012726:	f000 fd13 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 801272a:	682b      	ldr	r3, [r5, #0]
 801272c:	4628      	mov	r0, r5
 801272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012730:	4798      	blx	r3
 8012732:	682b      	ldr	r3, [r5, #0]
 8012734:	4606      	mov	r6, r0
 8012736:	4628      	mov	r0, r5
 8012738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801273a:	4798      	blx	r3
 801273c:	4633      	mov	r3, r6
 801273e:	4621      	mov	r1, r4
 8012740:	ae1e      	add	r6, sp, #120	; 0x78
 8012742:	2400      	movs	r4, #0
 8012744:	9000      	str	r0, [sp, #0]
 8012746:	9a03      	ldr	r2, [sp, #12]
 8012748:	a805      	add	r0, sp, #20
 801274a:	f000 fd5c 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801274e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8012752:	462a      	mov	r2, r5
 8012754:	4633      	mov	r3, r6
 8012756:	4621      	mov	r1, r4
 8012758:	a805      	add	r0, sp, #20
 801275a:	f001 f859 	bl	8013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801275e:	b300      	cbz	r0, 80127a2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8012760:	280a      	cmp	r0, #10
 8012762:	d01a      	beq.n	801279a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012764:	9f04      	ldr	r7, [sp, #16]
 8012766:	b1c7      	cbz	r7, 801279a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8012768:	7b78      	ldrb	r0, [r7, #13]
 801276a:	7a3b      	ldrb	r3, [r7, #8]
 801276c:	00c1      	lsls	r1, r0, #3
 801276e:	88ea      	ldrh	r2, [r5, #6]
 8012770:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012774:	4319      	orrs	r1, r3
 8012776:	0643      	lsls	r3, r0, #25
 8012778:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801277c:	bf48      	it	mi
 801277e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8012782:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012786:	bf48      	it	mi
 8012788:	b219      	sxthmi	r1, r3
 801278a:	79fb      	ldrb	r3, [r7, #7]
 801278c:	4303      	orrs	r3, r0
 801278e:	4413      	add	r3, r2
 8012790:	1a5b      	subs	r3, r3, r1
 8012792:	b21b      	sxth	r3, r3
 8012794:	429c      	cmp	r4, r3
 8012796:	bfb8      	it	lt
 8012798:	461c      	movlt	r4, r3
 801279a:	4633      	mov	r3, r6
 801279c:	462a      	mov	r2, r5
 801279e:	2100      	movs	r1, #0
 80127a0:	e7da      	b.n	8012758 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80127a2:	b2a0      	uxth	r0, r4
 80127a4:	b01e      	add	sp, #120	; 0x78
 80127a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80127aa:	b003      	add	sp, #12
 80127ac:	4770      	bx	lr

080127ae <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80127ae:	7a43      	ldrb	r3, [r0, #9]
 80127b0:	8880      	ldrh	r0, [r0, #4]
 80127b2:	4418      	add	r0, r3
 80127b4:	b280      	uxth	r0, r0
 80127b6:	4770      	bx	lr

080127b8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 80127b8:	6803      	ldr	r3, [r0, #0]
 80127ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127bc:	4718      	bx	r3

080127be <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 80127be:	b40e      	push	{r1, r2, r3}
 80127c0:	b570      	push	{r4, r5, r6, lr}
 80127c2:	b09d      	sub	sp, #116	; 0x74
 80127c4:	4604      	mov	r4, r0
 80127c6:	ab21      	add	r3, sp, #132	; 0x84
 80127c8:	a803      	add	r0, sp, #12
 80127ca:	f853 5b04 	ldr.w	r5, [r3], #4
 80127ce:	9302      	str	r3, [sp, #8]
 80127d0:	f000 fcbe 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 80127d4:	6823      	ldr	r3, [r4, #0]
 80127d6:	4620      	mov	r0, r4
 80127d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127da:	4798      	blx	r3
 80127dc:	6823      	ldr	r3, [r4, #0]
 80127de:	4606      	mov	r6, r0
 80127e0:	4620      	mov	r0, r4
 80127e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127e4:	2401      	movs	r4, #1
 80127e6:	4798      	blx	r3
 80127e8:	4633      	mov	r3, r6
 80127ea:	9000      	str	r0, [sp, #0]
 80127ec:	4629      	mov	r1, r5
 80127ee:	9a02      	ldr	r2, [sp, #8]
 80127f0:	a803      	add	r0, sp, #12
 80127f2:	f000 fd08 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80127f6:	a803      	add	r0, sp, #12
 80127f8:	f001 f8d6 	bl	80139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80127fc:	b2a3      	uxth	r3, r4
 80127fe:	b138      	cbz	r0, 8012810 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8012800:	280a      	cmp	r0, #10
 8012802:	a803      	add	r0, sp, #12
 8012804:	bf04      	itt	eq
 8012806:	3301      	addeq	r3, #1
 8012808:	b21c      	sxtheq	r4, r3
 801280a:	f001 f8cd 	bl	80139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801280e:	e7f5      	b.n	80127fc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8012810:	4618      	mov	r0, r3
 8012812:	b01d      	add	sp, #116	; 0x74
 8012814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012818:	b003      	add	sp, #12
 801281a:	4770      	bx	lr

0801281c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801281c:	b40e      	push	{r1, r2, r3}
 801281e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012820:	b09e      	sub	sp, #120	; 0x78
 8012822:	4604      	mov	r4, r0
 8012824:	ab23      	add	r3, sp, #140	; 0x8c
 8012826:	a805      	add	r0, sp, #20
 8012828:	f853 5b04 	ldr.w	r5, [r3], #4
 801282c:	9303      	str	r3, [sp, #12]
 801282e:	f000 fc8f 	bl	8013150 <_ZN8touchgfx12TextProviderC1Ev>
 8012832:	6823      	ldr	r3, [r4, #0]
 8012834:	4620      	mov	r0, r4
 8012836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012838:	4798      	blx	r3
 801283a:	6823      	ldr	r3, [r4, #0]
 801283c:	4606      	mov	r6, r0
 801283e:	4620      	mov	r0, r4
 8012840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012842:	4798      	blx	r3
 8012844:	4633      	mov	r3, r6
 8012846:	4629      	mov	r1, r5
 8012848:	9000      	str	r0, [sp, #0]
 801284a:	9a03      	ldr	r2, [sp, #12]
 801284c:	a805      	add	r0, sp, #20
 801284e:	f000 fcda 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012852:	ad1e      	add	r5, sp, #120	; 0x78
 8012854:	2100      	movs	r1, #0
 8012856:	f647 76ff 	movw	r6, #32767	; 0x7fff
 801285a:	4622      	mov	r2, r4
 801285c:	a805      	add	r0, sp, #20
 801285e:	f845 1d68 	str.w	r1, [r5, #-104]!
 8012862:	462b      	mov	r3, r5
 8012864:	f000 ffd4 	bl	8013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012868:	b1d8      	cbz	r0, 80128a2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 801286a:	280a      	cmp	r0, #10
 801286c:	d012      	beq.n	8012894 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801286e:	9804      	ldr	r0, [sp, #16]
 8012870:	b180      	cbz	r0, 8012894 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8012872:	7b47      	ldrb	r7, [r0, #13]
 8012874:	88e2      	ldrh	r2, [r4, #6]
 8012876:	00fb      	lsls	r3, r7, #3
 8012878:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801287c:	7a03      	ldrb	r3, [r0, #8]
 801287e:	430b      	orrs	r3, r1
 8012880:	0679      	lsls	r1, r7, #25
 8012882:	bf44      	itt	mi
 8012884:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012888:	b21b      	sxthmi	r3, r3
 801288a:	1ad3      	subs	r3, r2, r3
 801288c:	b21b      	sxth	r3, r3
 801288e:	429e      	cmp	r6, r3
 8012890:	bfa8      	it	ge
 8012892:	461e      	movge	r6, r3
 8012894:	462b      	mov	r3, r5
 8012896:	4622      	mov	r2, r4
 8012898:	2100      	movs	r1, #0
 801289a:	a805      	add	r0, sp, #20
 801289c:	f000 ffb8 	bl	8013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80128a0:	e7e2      	b.n	8012868 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80128a2:	4630      	mov	r0, r6
 80128a4:	b01e      	add	sp, #120	; 0x78
 80128a6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80128aa:	b003      	add	sp, #12
 80128ac:	4770      	bx	lr

080128ae <_ZNK8touchgfx8Drawable10invalidateEv>:
 80128ae:	b513      	push	{r0, r1, r4, lr}
 80128b0:	6803      	ldr	r3, [r0, #0]
 80128b2:	2400      	movs	r4, #0
 80128b4:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80128b8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80128bc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80128c0:	4669      	mov	r1, sp
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	9400      	str	r4, [sp, #0]
 80128c6:	f8ad 2006 	strh.w	r2, [sp, #6]
 80128ca:	4798      	blx	r3
 80128cc:	b002      	add	sp, #8
 80128ce:	bd10      	pop	{r4, pc}

080128d0 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 80128d0:	b538      	push	{r3, r4, r5, lr}
 80128d2:	680b      	ldr	r3, [r1, #0]
 80128d4:	460c      	mov	r4, r1
 80128d6:	4605      	mov	r5, r0
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	4798      	blx	r3
 80128dc:	6823      	ldr	r3, [r4, #0]
 80128de:	4620      	mov	r0, r4
 80128e0:	4629      	mov	r1, r5
 80128e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128e4:	4798      	blx	r3
 80128e6:	4628      	mov	r0, r5
 80128e8:	bd38      	pop	{r3, r4, r5, pc}

080128ea <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80128ea:	b410      	push	{r4}
 80128ec:	880a      	ldrh	r2, [r1, #0]
 80128ee:	8884      	ldrh	r4, [r0, #4]
 80128f0:	4422      	add	r2, r4
 80128f2:	800a      	strh	r2, [r1, #0]
 80128f4:	884a      	ldrh	r2, [r1, #2]
 80128f6:	88c4      	ldrh	r4, [r0, #6]
 80128f8:	4422      	add	r2, r4
 80128fa:	804a      	strh	r2, [r1, #2]
 80128fc:	6940      	ldr	r0, [r0, #20]
 80128fe:	b120      	cbz	r0, 801290a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8012900:	6803      	ldr	r3, [r0, #0]
 8012902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012908:	4718      	bx	r3
 801290a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801290e:	4770      	bx	lr

08012910 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8012910:	b570      	push	{r4, r5, r6, lr}
 8012912:	8882      	ldrh	r2, [r0, #4]
 8012914:	460c      	mov	r4, r1
 8012916:	880b      	ldrh	r3, [r1, #0]
 8012918:	4605      	mov	r5, r0
 801291a:	4413      	add	r3, r2
 801291c:	800b      	strh	r3, [r1, #0]
 801291e:	884b      	ldrh	r3, [r1, #2]
 8012920:	88c2      	ldrh	r2, [r0, #6]
 8012922:	4413      	add	r3, r2
 8012924:	804b      	strh	r3, [r1, #2]
 8012926:	1d01      	adds	r1, r0, #4
 8012928:	4620      	mov	r0, r4
 801292a:	f7fb fc3d 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 801292e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	dd0b      	ble.n	801294e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012936:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801293a:	2b00      	cmp	r3, #0
 801293c:	dd07      	ble.n	801294e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801293e:	6968      	ldr	r0, [r5, #20]
 8012940:	b128      	cbz	r0, 801294e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8012942:	6803      	ldr	r3, [r0, #0]
 8012944:	4621      	mov	r1, r4
 8012946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801294c:	4718      	bx	r3
 801294e:	bd70      	pop	{r4, r5, r6, pc}

08012950 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8012950:	b570      	push	{r4, r5, r6, lr}
 8012952:	8882      	ldrh	r2, [r0, #4]
 8012954:	460c      	mov	r4, r1
 8012956:	880b      	ldrh	r3, [r1, #0]
 8012958:	4605      	mov	r5, r0
 801295a:	4413      	add	r3, r2
 801295c:	800b      	strh	r3, [r1, #0]
 801295e:	884b      	ldrh	r3, [r1, #2]
 8012960:	88c2      	ldrh	r2, [r0, #6]
 8012962:	4413      	add	r3, r2
 8012964:	804b      	strh	r3, [r1, #2]
 8012966:	1d01      	adds	r1, r0, #4
 8012968:	4620      	mov	r0, r4
 801296a:	f7fb fc1d 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 801296e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	dd19      	ble.n	80129aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012976:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801297a:	2b00      	cmp	r3, #0
 801297c:	dd15      	ble.n	80129aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801297e:	6968      	ldr	r0, [r5, #20]
 8012980:	b128      	cbz	r0, 801298e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8012982:	6803      	ldr	r3, [r0, #0]
 8012984:	4621      	mov	r1, r4
 8012986:	691b      	ldr	r3, [r3, #16]
 8012988:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801298c:	4718      	bx	r3
 801298e:	4b07      	ldr	r3, [pc, #28]	; (80129ac <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	3304      	adds	r3, #4
 8012994:	429d      	cmp	r5, r3
 8012996:	d108      	bne.n	80129aa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012998:	f7fe fec6 	bl	8011728 <_ZN8touchgfx11Application11getInstanceEv>
 801299c:	6803      	ldr	r3, [r0, #0]
 801299e:	6821      	ldr	r1, [r4, #0]
 80129a0:	6862      	ldr	r2, [r4, #4]
 80129a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129a8:	4718      	bx	r3
 80129aa:	bd70      	pop	{r4, r5, r6, pc}
 80129ac:	2401aab4 	.word	0x2401aab4

080129b0 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80129b0:	b570      	push	{r4, r5, r6, lr}
 80129b2:	4604      	mov	r4, r0
 80129b4:	4616      	mov	r6, r2
 80129b6:	460d      	mov	r5, r1
 80129b8:	b901      	cbnz	r1, 80129bc <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80129ba:	b192      	cbz	r2, 80129e2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 80129bc:	6823      	ldr	r3, [r4, #0]
 80129be:	4620      	mov	r0, r4
 80129c0:	699b      	ldr	r3, [r3, #24]
 80129c2:	4798      	blx	r3
 80129c4:	88e2      	ldrh	r2, [r4, #6]
 80129c6:	88a1      	ldrh	r1, [r4, #4]
 80129c8:	4620      	mov	r0, r4
 80129ca:	4432      	add	r2, r6
 80129cc:	4429      	add	r1, r5
 80129ce:	b212      	sxth	r2, r2
 80129d0:	b209      	sxth	r1, r1
 80129d2:	f7f7 fe76 	bl	800a6c2 <_ZN8touchgfx8Drawable5setXYEss>
 80129d6:	6823      	ldr	r3, [r4, #0]
 80129d8:	4620      	mov	r0, r4
 80129da:	699b      	ldr	r3, [r3, #24]
 80129dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129e0:	4718      	bx	r3
 80129e2:	bd70      	pop	{r4, r5, r6, pc}

080129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80129e4:	b510      	push	{r4, lr}
 80129e6:	2300      	movs	r3, #0
 80129e8:	4604      	mov	r4, r0
 80129ea:	4608      	mov	r0, r1
 80129ec:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80129f0:	8023      	strh	r3, [r4, #0]
 80129f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80129f6:	8063      	strh	r3, [r4, #2]
 80129f8:	6803      	ldr	r3, [r0, #0]
 80129fa:	80a1      	strh	r1, [r4, #4]
 80129fc:	4621      	mov	r1, r4
 80129fe:	80e2      	strh	r2, [r4, #6]
 8012a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a02:	4798      	blx	r3
 8012a04:	4620      	mov	r0, r4
 8012a06:	bd10      	pop	{r4, pc}

08012a08 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8012a08:	b530      	push	{r4, r5, lr}
 8012a0a:	8083      	strh	r3, [r0, #4]
 8012a0c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012a10:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8012a14:	80c3      	strh	r3, [r0, #6]
 8012a16:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8012a1a:	6141      	str	r1, [r0, #20]
 8012a1c:	7203      	strb	r3, [r0, #8]
 8012a1e:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8012a22:	8302      	strh	r2, [r0, #24]
 8012a24:	7243      	strb	r3, [r0, #9]
 8012a26:	7a83      	ldrb	r3, [r0, #10]
 8012a28:	f365 0306 	bfi	r3, r5, #0, #7
 8012a2c:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8012a30:	f365 13c7 	bfi	r3, r5, #7, #1
 8012a34:	7283      	strb	r3, [r0, #10]
 8012a36:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8012a3a:	72c3      	strb	r3, [r0, #11]
 8012a3c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012a40:	7303      	strb	r3, [r0, #12]
 8012a42:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8012a46:	81c3      	strh	r3, [r0, #14]
 8012a48:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8012a4c:	8203      	strh	r3, [r0, #16]
 8012a4e:	4b01      	ldr	r3, [pc, #4]	; (8012a54 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8012a50:	6003      	str	r3, [r0, #0]
 8012a52:	bd30      	pop	{r4, r5, pc}
 8012a54:	080201e4 	.word	0x080201e4

08012a58 <_ZNK8touchgfx9ConstFont4findEt>:
 8012a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a5a:	6944      	ldr	r4, [r0, #20]
 8012a5c:	b3bc      	cbz	r4, 8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012a5e:	88a3      	ldrh	r3, [r4, #4]
 8012a60:	8b02      	ldrh	r2, [r0, #24]
 8012a62:	1acb      	subs	r3, r1, r3
 8012a64:	f102 32ff 	add.w	r2, r2, #4294967295
 8012a68:	d431      	bmi.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012a6a:	4293      	cmp	r3, r2
 8012a6c:	dd0c      	ble.n	8012a88 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8012a6e:	230e      	movs	r3, #14
 8012a70:	fb03 4302 	mla	r3, r3, r2, r4
 8012a74:	889b      	ldrh	r3, [r3, #4]
 8012a76:	1a5b      	subs	r3, r3, r1
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	db27      	blt.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	bfbc      	itt	lt
 8012a82:	2302      	movlt	r3, #2
 8012a84:	fb92 f3f3 	sdivlt	r3, r2, r3
 8012a88:	2500      	movs	r5, #0
 8012a8a:	260e      	movs	r6, #14
 8012a8c:	4295      	cmp	r5, r2
 8012a8e:	dc1e      	bgt.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012a90:	fb06 4003 	mla	r0, r6, r3, r4
 8012a94:	8887      	ldrh	r7, [r0, #4]
 8012a96:	42b9      	cmp	r1, r7
 8012a98:	d01a      	beq.n	8012ad0 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8012a9a:	d20d      	bcs.n	8012ab8 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8012a9c:	1e5a      	subs	r2, r3, #1
 8012a9e:	4295      	cmp	r5, r2
 8012aa0:	dc15      	bgt.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012aa2:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8012aa6:	1a5b      	subs	r3, r3, r1
 8012aa8:	1ad3      	subs	r3, r2, r3
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	db0f      	blt.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012aae:	429d      	cmp	r5, r3
 8012ab0:	ddec      	ble.n	8012a8c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012ab2:	1953      	adds	r3, r2, r5
 8012ab4:	105b      	asrs	r3, r3, #1
 8012ab6:	e7e9      	b.n	8012a8c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012ab8:	1c5d      	adds	r5, r3, #1
 8012aba:	42aa      	cmp	r2, r5
 8012abc:	db07      	blt.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012abe:	8a43      	ldrh	r3, [r0, #18]
 8012ac0:	1acb      	subs	r3, r1, r3
 8012ac2:	442b      	add	r3, r5
 8012ac4:	429d      	cmp	r5, r3
 8012ac6:	dc02      	bgt.n	8012ace <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	dadf      	bge.n	8012a8c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012acc:	e7f1      	b.n	8012ab2 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8012ace:	2000      	movs	r0, #0
 8012ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012ad2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8012ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad4:	4604      	mov	r4, r0
 8012ad6:	4617      	mov	r7, r2
 8012ad8:	461e      	mov	r6, r3
 8012ada:	b911      	cbnz	r1, 8012ae2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8012adc:	2500      	movs	r5, #0
 8012ade:	4628      	mov	r0, r5
 8012ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ae2:	290a      	cmp	r1, #10
 8012ae4:	d0fa      	beq.n	8012adc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012ae6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012aea:	4291      	cmp	r1, r2
 8012aec:	d0f6      	beq.n	8012adc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012aee:	f242 020b 	movw	r2, #8203	; 0x200b
 8012af2:	4291      	cmp	r1, r2
 8012af4:	d0f2      	beq.n	8012adc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012af6:	f7ff ffaf 	bl	8012a58 <_ZNK8touchgfx9ConstFont4findEt>
 8012afa:	4605      	mov	r5, r0
 8012afc:	b950      	cbnz	r0, 8012b14 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8012afe:	6823      	ldr	r3, [r4, #0]
 8012b00:	4620      	mov	r0, r4
 8012b02:	691b      	ldr	r3, [r3, #16]
 8012b04:	4798      	blx	r3
 8012b06:	4601      	mov	r1, r0
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f7ff ffa5 	bl	8012a58 <_ZNK8touchgfx9ConstFont4findEt>
 8012b0e:	4605      	mov	r5, r0
 8012b10:	2800      	cmp	r0, #0
 8012b12:	d0e3      	beq.n	8012adc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012b14:	6823      	ldr	r3, [r4, #0]
 8012b16:	4629      	mov	r1, r5
 8012b18:	4620      	mov	r0, r4
 8012b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b1c:	4798      	blx	r3
 8012b1e:	6038      	str	r0, [r7, #0]
 8012b20:	6823      	ldr	r3, [r4, #0]
 8012b22:	4620      	mov	r0, r4
 8012b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b26:	4798      	blx	r3
 8012b28:	7030      	strb	r0, [r6, #0]
 8012b2a:	e7d8      	b.n	8012ade <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08012b2c <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	4770      	bx	lr

08012b30 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8012b30:	2001      	movs	r0, #1
 8012b32:	4770      	bx	lr

08012b34 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8012b34:	2002      	movs	r0, #2
 8012b36:	4770      	bx	lr

08012b38 <_ZN8touchgfx12GestureEventD1Ev>:
 8012b38:	4770      	bx	lr

08012b3a <_ZN8touchgfx9DragEventD1Ev>:
 8012b3a:	4770      	bx	lr

08012b3c <_ZN8touchgfx10ClickEventD1Ev>:
 8012b3c:	4770      	bx	lr

08012b3e <_ZN8touchgfx10ClickEventD0Ev>:
 8012b3e:	b510      	push	{r4, lr}
 8012b40:	4604      	mov	r4, r0
 8012b42:	210c      	movs	r1, #12
 8012b44:	f00a fe1d 	bl	801d782 <_ZdlPvj>
 8012b48:	4620      	mov	r0, r4
 8012b4a:	bd10      	pop	{r4, pc}

08012b4c <_ZN8touchgfx9DragEventD0Ev>:
 8012b4c:	b510      	push	{r4, lr}
 8012b4e:	4604      	mov	r4, r0
 8012b50:	2110      	movs	r1, #16
 8012b52:	f00a fe16 	bl	801d782 <_ZdlPvj>
 8012b56:	4620      	mov	r0, r4
 8012b58:	bd10      	pop	{r4, pc}

08012b5a <_ZN8touchgfx12GestureEventD0Ev>:
 8012b5a:	b510      	push	{r4, lr}
 8012b5c:	4604      	mov	r4, r0
 8012b5e:	210c      	movs	r1, #12
 8012b60:	f00a fe0f 	bl	801d782 <_ZdlPvj>
 8012b64:	4620      	mov	r0, r4
 8012b66:	bd10      	pop	{r4, pc}

08012b68 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8012b68:	b530      	push	{r4, r5, lr}
 8012b6a:	460d      	mov	r5, r1
 8012b6c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012b6e:	b087      	sub	sp, #28
 8012b70:	4604      	mov	r4, r0
 8012b72:	b301      	cbz	r1, 8012bb6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8012b74:	a801      	add	r0, sp, #4
 8012b76:	f7ff ff35 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b7a:	892a      	ldrh	r2, [r5, #8]
 8012b7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012b80:	7928      	ldrb	r0, [r5, #4]
 8012b82:	1ad2      	subs	r2, r2, r3
 8012b84:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012b86:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8012b8a:	441a      	add	r2, r3
 8012b8c:	896b      	ldrh	r3, [r5, #10]
 8012b8e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8012b92:	f88d 0010 	strb.w	r0, [sp, #16]
 8012b96:	1b5b      	subs	r3, r3, r5
 8012b98:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8012b9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012b9c:	442b      	add	r3, r5
 8012b9e:	4d07      	ldr	r5, [pc, #28]	; (8012bbc <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8012ba0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012ba4:	a903      	add	r1, sp, #12
 8012ba6:	9503      	str	r5, [sp, #12]
 8012ba8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012bac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012bb0:	6803      	ldr	r3, [r0, #0]
 8012bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012bb4:	4798      	blx	r3
 8012bb6:	b007      	add	sp, #28
 8012bb8:	bd30      	pop	{r4, r5, pc}
 8012bba:	bf00      	nop
 8012bbc:	0802026c 	.word	0x0802026c

08012bc0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8012bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bc4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012bc6:	b08a      	sub	sp, #40	; 0x28
 8012bc8:	4604      	mov	r4, r0
 8012bca:	460d      	mov	r5, r1
 8012bcc:	b113      	cbz	r3, 8012bd4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8012bce:	790b      	ldrb	r3, [r1, #4]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d044      	beq.n	8012c5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012bd4:	f104 0804 	add.w	r8, r4, #4
 8012bd8:	a803      	add	r0, sp, #12
 8012bda:	4641      	mov	r1, r8
 8012bdc:	f7ff ff02 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012be0:	792b      	ldrb	r3, [r5, #4]
 8012be2:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8012be6:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8012bea:	b983      	cbnz	r3, 8012c0e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8012bec:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8012bf0:	892a      	ldrh	r2, [r5, #8]
 8012bf2:	88e9      	ldrh	r1, [r5, #6]
 8012bf4:	4640      	mov	r0, r8
 8012bf6:	1b92      	subs	r2, r2, r6
 8012bf8:	9301      	str	r3, [sp, #4]
 8012bfa:	1bc9      	subs	r1, r1, r7
 8012bfc:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8012c00:	b212      	sxth	r2, r2
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	b209      	sxth	r1, r1
 8012c06:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8012c0a:	f7fb f9eb 	bl	800dfe4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8012c0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012c10:	b329      	cbz	r1, 8012c5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012c12:	a805      	add	r0, sp, #20
 8012c14:	f7ff fee6 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012c18:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012c1c:	792b      	ldrb	r3, [r5, #4]
 8012c1e:	a907      	add	r1, sp, #28
 8012c20:	1abf      	subs	r7, r7, r2
 8012c22:	88ea      	ldrh	r2, [r5, #6]
 8012c24:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012c26:	4417      	add	r7, r2
 8012c28:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8012c2a:	f88d 3020 	strb.w	r3, [sp, #32]
 8012c2e:	4417      	add	r7, r2
 8012c30:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8012c34:	1ab6      	subs	r6, r6, r2
 8012c36:	892a      	ldrh	r2, [r5, #8]
 8012c38:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8012c3c:	4416      	add	r6, r2
 8012c3e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8012c40:	4416      	add	r6, r2
 8012c42:	4a08      	ldr	r2, [pc, #32]	; (8012c64 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8012c44:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8012c48:	2600      	movs	r6, #0
 8012c4a:	9207      	str	r2, [sp, #28]
 8012c4c:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8012c50:	6803      	ldr	r3, [r0, #0]
 8012c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012c54:	4798      	blx	r3
 8012c56:	792b      	ldrb	r3, [r5, #4]
 8012c58:	b10b      	cbz	r3, 8012c5e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012c5a:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8012c5e:	b00a      	add	sp, #40	; 0x28
 8012c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c64:	08020244 	.word	0x08020244

08012c68 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8012c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c6c:	460c      	mov	r4, r1
 8012c6e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012c70:	b088      	sub	sp, #32
 8012c72:	4605      	mov	r5, r0
 8012c74:	2900      	cmp	r1, #0
 8012c76:	d06d      	beq.n	8012d54 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8012c78:	4668      	mov	r0, sp
 8012c7a:	f7ff feb3 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012c7e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8012c80:	88e3      	ldrh	r3, [r4, #6]
 8012c82:	f9bd 8000 	ldrsh.w	r8, [sp]
 8012c86:	440b      	add	r3, r1
 8012c88:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8012c8c:	b21b      	sxth	r3, r3
 8012c8e:	4543      	cmp	r3, r8
 8012c90:	db31      	blt.n	8012cf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012c92:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8012c96:	44c4      	add	ip, r8
 8012c98:	fa0f fc8c 	sxth.w	ip, ip
 8012c9c:	4563      	cmp	r3, ip
 8012c9e:	da2a      	bge.n	8012cf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012ca0:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8012ca2:	8926      	ldrh	r6, [r4, #8]
 8012ca4:	4416      	add	r6, r2
 8012ca6:	b236      	sxth	r6, r6
 8012ca8:	42be      	cmp	r6, r7
 8012caa:	db24      	blt.n	8012cf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012cac:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012cb0:	4438      	add	r0, r7
 8012cb2:	b200      	sxth	r0, r0
 8012cb4:	4286      	cmp	r6, r0
 8012cb6:	da1e      	bge.n	8012cf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012cb8:	8963      	ldrh	r3, [r4, #10]
 8012cba:	4419      	add	r1, r3
 8012cbc:	b209      	sxth	r1, r1
 8012cbe:	4541      	cmp	r1, r8
 8012cc0:	db08      	blt.n	8012cd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012cc2:	4561      	cmp	r1, ip
 8012cc4:	da06      	bge.n	8012cd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012cc6:	89a3      	ldrh	r3, [r4, #12]
 8012cc8:	441a      	add	r2, r3
 8012cca:	b212      	sxth	r2, r2
 8012ccc:	42ba      	cmp	r2, r7
 8012cce:	db01      	blt.n	8012cd4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012cd0:	4282      	cmp	r2, r0
 8012cd2:	db10      	blt.n	8012cf6 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012cd4:	4b21      	ldr	r3, [pc, #132]	; (8012d5c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8012cd6:	a904      	add	r1, sp, #16
 8012cd8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012cda:	9304      	str	r3, [sp, #16]
 8012cdc:	2302      	movs	r3, #2
 8012cde:	f88d 3014 	strb.w	r3, [sp, #20]
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012ce8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012cec:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012cf0:	6803      	ldr	r3, [r0, #0]
 8012cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012cf4:	4798      	blx	r3
 8012cf6:	1d29      	adds	r1, r5, #4
 8012cf8:	a802      	add	r0, sp, #8
 8012cfa:	f7ff fe73 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012cfe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012d02:	88e0      	ldrh	r0, [r4, #6]
 8012d04:	eba3 0808 	sub.w	r8, r3, r8
 8012d08:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012d0c:	7921      	ldrb	r1, [r4, #4]
 8012d0e:	fa1f f888 	uxth.w	r8, r8
 8012d12:	1bdf      	subs	r7, r3, r7
 8012d14:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8012d18:	b2bb      	uxth	r3, r7
 8012d1a:	4440      	add	r0, r8
 8012d1c:	8922      	ldrh	r2, [r4, #8]
 8012d1e:	8967      	ldrh	r7, [r4, #10]
 8012d20:	4460      	add	r0, ip
 8012d22:	89a4      	ldrh	r4, [r4, #12]
 8012d24:	441a      	add	r2, r3
 8012d26:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8012d28:	44b8      	add	r8, r7
 8012d2a:	4423      	add	r3, r4
 8012d2c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8012d30:	4432      	add	r2, r6
 8012d32:	44e0      	add	r8, ip
 8012d34:	4433      	add	r3, r6
 8012d36:	4c0a      	ldr	r4, [pc, #40]	; (8012d60 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8012d38:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8012d3a:	f88d 1014 	strb.w	r1, [sp, #20]
 8012d3e:	a904      	add	r1, sp, #16
 8012d40:	9404      	str	r4, [sp, #16]
 8012d42:	f8ad 2018 	strh.w	r2, [sp, #24]
 8012d46:	f8ad 801a 	strh.w	r8, [sp, #26]
 8012d4a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012d4e:	6803      	ldr	r3, [r0, #0]
 8012d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012d52:	4798      	blx	r3
 8012d54:	b008      	add	sp, #32
 8012d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d5a:	bf00      	nop
 8012d5c:	08020244 	.word	0x08020244
 8012d60:	08020258 	.word	0x08020258

08012d64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8012d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012d66:	4604      	mov	r4, r0
 8012d68:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8012d6c:	3201      	adds	r2, #1
 8012d6e:	d112      	bne.n	8012d96 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8012d70:	2500      	movs	r5, #0
 8012d72:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012d76:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012d7a:	6803      	ldr	r3, [r0, #0]
 8012d7c:	9500      	str	r5, [sp, #0]
 8012d7e:	466d      	mov	r5, sp
 8012d80:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012d84:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012d88:	4629      	mov	r1, r5
 8012d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d8c:	4798      	blx	r3
 8012d8e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012d92:	e884 0003 	stmia.w	r4, {r0, r1}
 8012d96:	4620      	mov	r0, r4
 8012d98:	b003      	add	sp, #12
 8012d9a:	bd30      	pop	{r4, r5, pc}

08012d9c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8012d9c:	b513      	push	{r0, r1, r4, lr}
 8012d9e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8012da2:	4604      	mov	r4, r0
 8012da4:	3301      	adds	r3, #1
 8012da6:	d109      	bne.n	8012dbc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8012da8:	4601      	mov	r1, r0
 8012daa:	4668      	mov	r0, sp
 8012dac:	f7ff fe1a 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012db0:	f8bd 3000 	ldrh.w	r3, [sp]
 8012db4:	8423      	strh	r3, [r4, #32]
 8012db6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012dba:	8463      	strh	r3, [r4, #34]	; 0x22
 8012dbc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8012dc0:	b002      	add	sp, #8
 8012dc2:	bd10      	pop	{r4, pc}

08012dc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8012dc4:	b513      	push	{r0, r1, r4, lr}
 8012dc6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8012dca:	4604      	mov	r4, r0
 8012dcc:	3301      	adds	r3, #1
 8012dce:	d109      	bne.n	8012de4 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8012dd0:	4601      	mov	r1, r0
 8012dd2:	4668      	mov	r0, sp
 8012dd4:	f7ff fe06 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012dd8:	f8bd 3000 	ldrh.w	r3, [sp]
 8012ddc:	8423      	strh	r3, [r4, #32]
 8012dde:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012de2:	8463      	strh	r3, [r4, #34]	; 0x22
 8012de4:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012de8:	b002      	add	sp, #8
 8012dea:	bd10      	pop	{r4, pc}

08012dec <_ZN8touchgfx6ScreenC1Ev>:
 8012dec:	b570      	push	{r4, r5, r6, lr}
 8012dee:	4b17      	ldr	r3, [pc, #92]	; (8012e4c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8012df0:	4605      	mov	r5, r0
 8012df2:	4a17      	ldr	r2, [pc, #92]	; (8012e50 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8012df4:	2101      	movs	r1, #1
 8012df6:	f845 3b04 	str.w	r3, [r5], #4
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	6042      	str	r2, [r0, #4]
 8012dfe:	4604      	mov	r4, r0
 8012e00:	8103      	strh	r3, [r0, #8]
 8012e02:	8143      	strh	r3, [r0, #10]
 8012e04:	8183      	strh	r3, [r0, #12]
 8012e06:	81c3      	strh	r3, [r0, #14]
 8012e08:	8203      	strh	r3, [r0, #16]
 8012e0a:	8243      	strh	r3, [r0, #18]
 8012e0c:	8283      	strh	r3, [r0, #20]
 8012e0e:	82c3      	strh	r3, [r0, #22]
 8012e10:	6203      	str	r3, [r0, #32]
 8012e12:	8483      	strh	r3, [r0, #36]	; 0x24
 8012e14:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012e16:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8012e1a:	6343      	str	r3, [r0, #52]	; 0x34
 8012e1c:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8012e20:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8012e24:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8012e28:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8012e2c:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8012e2e:	4628      	mov	r0, r5
 8012e30:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012e34:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8012e36:	4a08      	ldr	r2, [pc, #32]	; (8012e58 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8012e38:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012e3c:	4798      	blx	r3
 8012e3e:	6863      	ldr	r3, [r4, #4]
 8012e40:	4628      	mov	r0, r5
 8012e42:	4631      	mov	r1, r6
 8012e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e46:	4798      	blx	r3
 8012e48:	4620      	mov	r0, r4
 8012e4a:	bd70      	pop	{r4, r5, r6, pc}
 8012e4c:	08020280 	.word	0x08020280
 8012e50:	0801fca0 	.word	0x0801fca0
 8012e54:	2401aa6e 	.word	0x2401aa6e
 8012e58:	2401aa6c 	.word	0x2401aa6c

08012e5c <_ZN8touchgfx6Screen4drawEv>:
 8012e5c:	4b09      	ldr	r3, [pc, #36]	; (8012e84 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8012e5e:	b507      	push	{r0, r1, r2, lr}
 8012e60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e64:	2100      	movs	r1, #0
 8012e66:	4b08      	ldr	r3, [pc, #32]	; (8012e88 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8012e68:	9100      	str	r1, [sp, #0]
 8012e6a:	4669      	mov	r1, sp
 8012e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e70:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012e74:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012e78:	6803      	ldr	r3, [r0, #0]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	4798      	blx	r3
 8012e7e:	b003      	add	sp, #12
 8012e80:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e84:	2401aa6c 	.word	0x2401aa6c
 8012e88:	2401aa6e 	.word	0x2401aa6e

08012e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8012e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e90:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012e94:	b089      	sub	sp, #36	; 0x24
 8012e96:	4680      	mov	r8, r0
 8012e98:	460c      	mov	r4, r1
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	4615      	mov	r5, r2
 8012e9e:	dd0e      	ble.n	8012ebe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012ea0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	dd0a      	ble.n	8012ebe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	f7ff ff5b 	bl	8012d64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012eae:	4621      	mov	r1, r4
 8012eb0:	f7fe fb5c 	bl	801156c <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012eb4:	69eb      	ldr	r3, [r5, #28]
 8012eb6:	b928      	cbnz	r0, 8012ec4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8012eb8:	461d      	mov	r5, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d1f4      	bne.n	8012ea8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8012ebe:	b009      	add	sp, #36	; 0x24
 8012ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec4:	ae04      	add	r6, sp, #16
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	f000 80b5 	beq.w	8013036 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	4629      	mov	r1, r5
 8012ed0:	a802      	add	r0, sp, #8
 8012ed2:	68db      	ldr	r3, [r3, #12]
 8012ed4:	4798      	blx	r3
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f7ff ff60 	bl	8012d9c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012edc:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8012ee0:	4407      	add	r7, r0
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	f7ff ff6e 	bl	8012dc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012ee8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012eec:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012ef0:	b23f      	sxth	r7, r7
 8012ef2:	4418      	add	r0, r3
 8012ef4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012ef8:	4621      	mov	r1, r4
 8012efa:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012efe:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012f02:	4630      	mov	r0, r6
 8012f04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012f08:	f8ad 7010 	strh.w	r7, [sp, #16]
 8012f0c:	f7fb f94c 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 8012f10:	4628      	mov	r0, r5
 8012f12:	f7ff ff27 	bl	8012d64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012f16:	ab06      	add	r3, sp, #24
 8012f18:	4602      	mov	r2, r0
 8012f1a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012f1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8012f22:	4611      	mov	r1, r2
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fb f93f 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 8012f2a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012f2e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012f32:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8012f36:	4299      	cmp	r1, r3
 8012f38:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8012f3c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8012f40:	d10b      	bne.n	8012f5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012f42:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012f46:	4552      	cmp	r2, sl
 8012f48:	d107      	bne.n	8012f5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012f4a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012f4e:	455a      	cmp	r2, fp
 8012f50:	d103      	bne.n	8012f5a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012f52:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012f56:	454a      	cmp	r2, r9
 8012f58:	d06d      	beq.n	8013036 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012f5a:	f1bb 0f00 	cmp.w	fp, #0
 8012f5e:	dd65      	ble.n	801302c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012f60:	f1b9 0f00 	cmp.w	r9, #0
 8012f64:	dd62      	ble.n	801302c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012f66:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012f6a:	fa1f f08a 	uxth.w	r0, sl
 8012f6e:	4552      	cmp	r2, sl
 8012f70:	9000      	str	r0, [sp, #0]
 8012f72:	da12      	bge.n	8012f9a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8012f74:	9301      	str	r3, [sp, #4]
 8012f76:	9b00      	ldr	r3, [sp, #0]
 8012f78:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012f7c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012f80:	1a9a      	subs	r2, r3, r2
 8012f82:	f8ad 1010 	strh.w	r1, [sp, #16]
 8012f86:	4631      	mov	r1, r6
 8012f88:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012f8c:	4640      	mov	r0, r8
 8012f8e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012f92:	69ea      	ldr	r2, [r5, #28]
 8012f94:	f7ff ff7a 	bl	8012e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012f98:	9b01      	ldr	r3, [sp, #4]
 8012f9a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012f9e:	b29f      	uxth	r7, r3
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	da0d      	bge.n	8012fc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8012fa4:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012fa8:	1aba      	subs	r2, r7, r2
 8012faa:	f8ad a012 	strh.w	sl, [sp, #18]
 8012fae:	4631      	mov	r1, r6
 8012fb0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012fb4:	4640      	mov	r0, r8
 8012fb6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012fba:	69ea      	ldr	r2, [r5, #28]
 8012fbc:	f7ff ff66 	bl	8012e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012fc0:	8822      	ldrh	r2, [r4, #0]
 8012fc2:	445f      	add	r7, fp
 8012fc4:	88a3      	ldrh	r3, [r4, #4]
 8012fc6:	b2bf      	uxth	r7, r7
 8012fc8:	4413      	add	r3, r2
 8012fca:	b23a      	sxth	r2, r7
 8012fcc:	b29b      	uxth	r3, r3
 8012fce:	b219      	sxth	r1, r3
 8012fd0:	4291      	cmp	r1, r2
 8012fd2:	dd0d      	ble.n	8012ff0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8012fd4:	1bdb      	subs	r3, r3, r7
 8012fd6:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012fda:	f8ad a012 	strh.w	sl, [sp, #18]
 8012fde:	4631      	mov	r1, r6
 8012fe0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012fe4:	4640      	mov	r0, r8
 8012fe6:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012fea:	69ea      	ldr	r2, [r5, #28]
 8012fec:	f7ff ff4e 	bl	8012e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012ff0:	88e2      	ldrh	r2, [r4, #6]
 8012ff2:	8863      	ldrh	r3, [r4, #2]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	9a00      	ldr	r2, [sp, #0]
 8012ff8:	444a      	add	r2, r9
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	fa1f f982 	uxth.w	r9, r2
 8013000:	b219      	sxth	r1, r3
 8013002:	fa0f f289 	sxth.w	r2, r9
 8013006:	428a      	cmp	r2, r1
 8013008:	da15      	bge.n	8013036 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801300a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801300e:	eba3 0309 	sub.w	r3, r3, r9
 8013012:	f9b4 0000 	ldrsh.w	r0, [r4]
 8013016:	f8ad 1014 	strh.w	r1, [sp, #20]
 801301a:	4631      	mov	r1, r6
 801301c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013020:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013024:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013028:	69ea      	ldr	r2, [r5, #28]
 801302a:	e001      	b.n	8013030 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801302c:	69ea      	ldr	r2, [r5, #28]
 801302e:	4621      	mov	r1, r4
 8013030:	4640      	mov	r0, r8
 8013032:	f7ff ff2b 	bl	8012e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8013036:	4628      	mov	r0, r5
 8013038:	f7ff fe94 	bl	8012d64 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801303c:	6861      	ldr	r1, [r4, #4]
 801303e:	4602      	mov	r2, r0
 8013040:	4633      	mov	r3, r6
 8013042:	6820      	ldr	r0, [r4, #0]
 8013044:	c303      	stmia	r3!, {r0, r1}
 8013046:	4611      	mov	r1, r2
 8013048:	4630      	mov	r0, r6
 801304a:	f7fb f8ad 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 801304e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f77f af33 	ble.w	8012ebe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013058:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801305c:	2b00      	cmp	r3, #0
 801305e:	f77f af2e 	ble.w	8012ebe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8013062:	4628      	mov	r0, r5
 8013064:	f7ff fe9a 	bl	8012d9c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8013068:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801306c:	1a18      	subs	r0, r3, r0
 801306e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8013072:	4628      	mov	r0, r5
 8013074:	f7ff fea6 	bl	8012dc4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8013078:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801307c:	4631      	mov	r1, r6
 801307e:	1a18      	subs	r0, r3, r0
 8013080:	f8ad 0012 	strh.w	r0, [sp, #18]
 8013084:	4628      	mov	r0, r5
 8013086:	682b      	ldr	r3, [r5, #0]
 8013088:	689b      	ldr	r3, [r3, #8]
 801308a:	4798      	blx	r3
 801308c:	e717      	b.n	8012ebe <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801308e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801308e:	b570      	push	{r4, r5, r6, lr}
 8013090:	1d06      	adds	r6, r0, #4
 8013092:	b086      	sub	sp, #24
 8013094:	460c      	mov	r4, r1
 8013096:	2300      	movs	r3, #0
 8013098:	4631      	mov	r1, r6
 801309a:	4605      	mov	r5, r0
 801309c:	a802      	add	r0, sp, #8
 801309e:	9301      	str	r3, [sp, #4]
 80130a0:	f7ff fca0 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80130a4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80130a8:	8822      	ldrh	r2, [r4, #0]
 80130aa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80130ae:	1ad2      	subs	r2, r2, r3
 80130b0:	8863      	ldrh	r3, [r4, #2]
 80130b2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80130b6:	1a5b      	subs	r3, r3, r1
 80130b8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80130bc:	f8ad 2010 	strh.w	r2, [sp, #16]
 80130c0:	aa01      	add	r2, sp, #4
 80130c2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80130c6:	4630      	mov	r0, r6
 80130c8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80130cc:	a904      	add	r1, sp, #16
 80130ce:	f8ad 3012 	strh.w	r3, [sp, #18]
 80130d2:	f7fb f941 	bl	800e358 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80130d6:	9a01      	ldr	r2, [sp, #4]
 80130d8:	b11a      	cbz	r2, 80130e2 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80130da:	4621      	mov	r1, r4
 80130dc:	4628      	mov	r0, r5
 80130de:	f7ff fed5 	bl	8012e8c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80130e2:	b006      	add	sp, #24
 80130e4:	bd70      	pop	{r4, r5, r6, pc}

080130e6 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80130e6:	4602      	mov	r2, r0
 80130e8:	b530      	push	{r4, r5, lr}
 80130ea:	4604      	mov	r4, r0
 80130ec:	b085      	sub	sp, #20
 80130ee:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80130f2:	460d      	mov	r5, r1
 80130f4:	466b      	mov	r3, sp
 80130f6:	6851      	ldr	r1, [r2, #4]
 80130f8:	c303      	stmia	r3!, {r0, r1}
 80130fa:	4629      	mov	r1, r5
 80130fc:	4668      	mov	r0, sp
 80130fe:	f7fb f853 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 8013102:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8013106:	b12b      	cbz	r3, 8013114 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8013108:	4669      	mov	r1, sp
 801310a:	4620      	mov	r0, r4
 801310c:	f7ff ffbf 	bl	801308e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8013110:	b005      	add	sp, #20
 8013112:	bd30      	pop	{r4, r5, pc}
 8013114:	3404      	adds	r4, #4
 8013116:	a802      	add	r0, sp, #8
 8013118:	4621      	mov	r1, r4
 801311a:	f7ff fc63 	bl	80129e4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801311e:	f8bd 3000 	ldrh.w	r3, [sp]
 8013122:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8013126:	4669      	mov	r1, sp
 8013128:	4620      	mov	r0, r4
 801312a:	1a9b      	subs	r3, r3, r2
 801312c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8013130:	f8ad 3000 	strh.w	r3, [sp]
 8013134:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8013138:	1a9b      	subs	r3, r3, r2
 801313a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801313e:	f7fb f8d2 	bl	800e2e6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8013142:	e7e5      	b.n	8013110 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08013144 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8013144:	460b      	mov	r3, r1
 8013146:	680a      	ldr	r2, [r1, #0]
 8013148:	1d01      	adds	r1, r0, #4
 801314a:	6992      	ldr	r2, [r2, #24]
 801314c:	4618      	mov	r0, r3
 801314e:	4710      	bx	r2

08013150 <_ZN8touchgfx12TextProviderC1Ev>:
 8013150:	b538      	push	{r3, r4, r5, lr}
 8013152:	2500      	movs	r5, #0
 8013154:	2302      	movs	r3, #2
 8013156:	4604      	mov	r4, r0
 8013158:	220e      	movs	r2, #14
 801315a:	7403      	strb	r3, [r0, #16]
 801315c:	4629      	mov	r1, r5
 801315e:	6145      	str	r5, [r0, #20]
 8013160:	7605      	strb	r5, [r0, #24]
 8013162:	83c5      	strh	r5, [r0, #30]
 8013164:	8405      	strh	r5, [r0, #32]
 8013166:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013168:	8705      	strh	r5, [r0, #56]	; 0x38
 801316a:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801316c:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8013170:	e9c0 5500 	strd	r5, r5, [r0]
 8013174:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8013178:	304c      	adds	r0, #76	; 0x4c
 801317a:	f00a fd36 	bl	801dbea <memset>
 801317e:	2301      	movs	r3, #1
 8013180:	4620      	mov	r0, r4
 8013182:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8013186:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801318a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801318e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8013192:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8013196:	f7f8 fc6d 	bl	800ba74 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801319a:	4620      	mov	r0, r4
 801319c:	bd38      	pop	{r3, r4, r5, pc}

0801319e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801319e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80131a0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80131a4:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 80131a6:	fab0 f080 	clz	r0, r0
 80131aa:	0940      	lsrs	r0, r0, #5
 80131ac:	4770      	bx	lr

080131ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 80131ae:	b530      	push	{r4, r5, lr}
 80131b0:	2500      	movs	r5, #0
 80131b2:	2401      	movs	r4, #1
 80131b4:	6843      	ldr	r3, [r0, #4]
 80131b6:	b913      	cbnz	r3, 80131be <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 80131b8:	6803      	ldr	r3, [r0, #0]
 80131ba:	b313      	cbz	r3, 8013202 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80131bc:	6043      	str	r3, [r0, #4]
 80131be:	7e03      	ldrb	r3, [r0, #24]
 80131c0:	b143      	cbz	r3, 80131d4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 80131c2:	6943      	ldr	r3, [r0, #20]
 80131c4:	b12b      	cbz	r3, 80131d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80131c6:	881a      	ldrh	r2, [r3, #0]
 80131c8:	b11a      	cbz	r2, 80131d2 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 80131ca:	1c9a      	adds	r2, r3, #2
 80131cc:	6142      	str	r2, [r0, #20]
 80131ce:	8818      	ldrh	r0, [r3, #0]
 80131d0:	bd30      	pop	{r4, r5, pc}
 80131d2:	7605      	strb	r5, [r0, #24]
 80131d4:	6843      	ldr	r3, [r0, #4]
 80131d6:	8819      	ldrh	r1, [r3, #0]
 80131d8:	b199      	cbz	r1, 8013202 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80131da:	1c9a      	adds	r2, r3, #2
 80131dc:	2902      	cmp	r1, #2
 80131de:	6042      	str	r2, [r0, #4]
 80131e0:	d1f5      	bne.n	80131ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80131e2:	7c03      	ldrb	r3, [r0, #16]
 80131e4:	2b01      	cmp	r3, #1
 80131e6:	d8e5      	bhi.n	80131b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80131e8:	1c5a      	adds	r2, r3, #1
 80131ea:	3302      	adds	r3, #2
 80131ec:	7402      	strb	r2, [r0, #16]
 80131ee:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80131f2:	6143      	str	r3, [r0, #20]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d0dd      	beq.n	80131b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80131f8:	881b      	ldrh	r3, [r3, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d0da      	beq.n	80131b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80131fe:	7604      	strb	r4, [r0, #24]
 8013200:	e7d8      	b.n	80131b4 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8013202:	2000      	movs	r0, #0
 8013204:	e7e4      	b.n	80131d0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8013206:	6001      	str	r1, [r0, #0]
 8013208:	2100      	movs	r1, #0
 801320a:	b430      	push	{r4, r5}
 801320c:	6041      	str	r1, [r0, #4]
 801320e:	6815      	ldr	r5, [r2, #0]
 8013210:	6085      	str	r5, [r0, #8]
 8013212:	6852      	ldr	r2, [r2, #4]
 8013214:	6443      	str	r3, [r0, #68]	; 0x44
 8013216:	9b02      	ldr	r3, [sp, #8]
 8013218:	60c2      	str	r2, [r0, #12]
 801321a:	7401      	strb	r1, [r0, #16]
 801321c:	6141      	str	r1, [r0, #20]
 801321e:	7601      	strb	r1, [r0, #24]
 8013220:	8701      	strh	r1, [r0, #56]	; 0x38
 8013222:	8401      	strh	r1, [r0, #32]
 8013224:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8013228:	6483      	str	r3, [r0, #72]	; 0x48
 801322a:	bc30      	pop	{r4, r5}
 801322c:	f7f8 bc22 	b.w	800ba74 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08013230 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8013230:	b408      	push	{r3}
 8013232:	b510      	push	{r4, lr}
 8013234:	b085      	sub	sp, #20
 8013236:	ac07      	add	r4, sp, #28
 8013238:	f854 3b04 	ldr.w	r3, [r4], #4
 801323c:	9300      	str	r3, [sp, #0]
 801323e:	4613      	mov	r3, r2
 8013240:	4622      	mov	r2, r4
 8013242:	9403      	str	r4, [sp, #12]
 8013244:	f7ff ffdf 	bl	8013206 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013248:	b005      	add	sp, #20
 801324a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801324e:	b001      	add	sp, #4
 8013250:	4770      	bx	lr

08013252 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8013252:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013254:	4605      	mov	r5, r0
 8013256:	4608      	mov	r0, r1
 8013258:	b1f1      	cbz	r1, 8013298 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801325a:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801325e:	460b      	mov	r3, r1
 8013260:	f101 0708 	add.w	r7, r1, #8
 8013264:	4622      	mov	r2, r4
 8013266:	6818      	ldr	r0, [r3, #0]
 8013268:	3308      	adds	r3, #8
 801326a:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801326e:	4626      	mov	r6, r4
 8013270:	42bb      	cmp	r3, r7
 8013272:	c603      	stmia	r6!, {r0, r1}
 8013274:	4634      	mov	r4, r6
 8013276:	d1f6      	bne.n	8013266 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8013278:	6818      	ldr	r0, [r3, #0]
 801327a:	6030      	str	r0, [r6, #0]
 801327c:	4610      	mov	r0, r2
 801327e:	889b      	ldrh	r3, [r3, #4]
 8013280:	80b3      	strh	r3, [r6, #4]
 8013282:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8013286:	015b      	lsls	r3, r3, #5
 8013288:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801328c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8013290:	430b      	orrs	r3, r1
 8013292:	425b      	negs	r3, r3
 8013294:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8013298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801329a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801329a:	b538      	push	{r3, r4, r5, lr}
 801329c:	460c      	mov	r4, r1
 801329e:	6811      	ldr	r1, [r2, #0]
 80132a0:	4610      	mov	r0, r2
 80132a2:	68cd      	ldr	r5, [r1, #12]
 80132a4:	4619      	mov	r1, r3
 80132a6:	47a8      	blx	r5
 80132a8:	2800      	cmp	r0, #0
 80132aa:	bf08      	it	eq
 80132ac:	4620      	moveq	r0, r4
 80132ae:	bd38      	pop	{r3, r4, r5, pc}

080132b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 80132b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132b2:	4604      	mov	r4, r0
 80132b4:	4615      	mov	r5, r2
 80132b6:	4608      	mov	r0, r1
 80132b8:	b93a      	cbnz	r2, 80132ca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 80132ba:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80132be:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 80132c2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 80132c6:	4628      	mov	r0, r5
 80132c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80132ca:	f892 c00d 	ldrb.w	ip, [r2, #13]
 80132ce:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 80132d2:	8893      	ldrh	r3, [r2, #4]
 80132d4:	ea4f 160c 	mov.w	r6, ip, lsl #4
 80132d8:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80132dc:	79ee      	ldrb	r6, [r5, #7]
 80132de:	4316      	orrs	r6, r2
 80132e0:	19da      	adds	r2, r3, r7
 80132e2:	b291      	uxth	r1, r2
 80132e4:	b2b7      	uxth	r7, r6
 80132e6:	291d      	cmp	r1, #29
 80132e8:	d87b      	bhi.n	80133e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80132ea:	2201      	movs	r2, #1
 80132ec:	10f6      	asrs	r6, r6, #3
 80132ee:	408a      	lsls	r2, r1
 80132f0:	4974      	ldr	r1, [pc, #464]	; (80134c4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80132f2:	420a      	tst	r2, r1
 80132f4:	d12e      	bne.n	8013354 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80132f6:	f412 7f60 	tst.w	r2, #896	; 0x380
 80132fa:	d072      	beq.n	80133e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80132fc:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8013300:	462b      	mov	r3, r5
 8013302:	f105 0e08 	add.w	lr, r5, #8
 8013306:	4615      	mov	r5, r2
 8013308:	6818      	ldr	r0, [r3, #0]
 801330a:	3308      	adds	r3, #8
 801330c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8013310:	4694      	mov	ip, r2
 8013312:	4573      	cmp	r3, lr
 8013314:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013318:	4662      	mov	r2, ip
 801331a:	d1f5      	bne.n	8013308 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801331c:	6818      	ldr	r0, [r3, #0]
 801331e:	f8cc 0000 	str.w	r0, [ip]
 8013322:	889b      	ldrh	r3, [r3, #4]
 8013324:	f8ac 3004 	strh.w	r3, [ip, #4]
 8013328:	b2b3      	uxth	r3, r6
 801332a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801332e:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8013332:	1aca      	subs	r2, r1, r3
 8013334:	1bcf      	subs	r7, r1, r7
 8013336:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801333a:	b292      	uxth	r2, r2
 801333c:	1afb      	subs	r3, r7, r3
 801333e:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8013342:	10d2      	asrs	r2, r2, #3
 8013344:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8013348:	4302      	orrs	r2, r0
 801334a:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801334e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8013352:	e7b8      	b.n	80132c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013354:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013356:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801335a:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801335c:	f640 6333 	movw	r3, #3635	; 0xe33
 8013360:	4299      	cmp	r1, r3
 8013362:	d110      	bne.n	8013386 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8013364:	6803      	ldr	r3, [r0, #0]
 8013366:	68db      	ldr	r3, [r3, #12]
 8013368:	4798      	blx	r3
 801336a:	7b41      	ldrb	r1, [r0, #13]
 801336c:	00cb      	lsls	r3, r1, #3
 801336e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013372:	7a03      	ldrb	r3, [r0, #8]
 8013374:	0648      	lsls	r0, r1, #25
 8013376:	ea43 0302 	orr.w	r3, r3, r2
 801337a:	bf44      	itt	mi
 801337c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013380:	b21b      	sxthmi	r3, r3
 8013382:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013386:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801338a:	462a      	mov	r2, r5
 801338c:	f105 0c08 	add.w	ip, r5, #8
 8013390:	443b      	add	r3, r7
 8013392:	4433      	add	r3, r6
 8013394:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8013398:	b29b      	uxth	r3, r3
 801339a:	4635      	mov	r5, r6
 801339c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80133a0:	6810      	ldr	r0, [r2, #0]
 80133a2:	3208      	adds	r2, #8
 80133a4:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80133a8:	4637      	mov	r7, r6
 80133aa:	4562      	cmp	r2, ip
 80133ac:	c703      	stmia	r7!, {r0, r1}
 80133ae:	463e      	mov	r6, r7
 80133b0:	d1f6      	bne.n	80133a0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 80133b2:	6810      	ldr	r0, [r2, #0]
 80133b4:	6038      	str	r0, [r7, #0]
 80133b6:	8892      	ldrh	r2, [r2, #4]
 80133b8:	80ba      	strh	r2, [r7, #4]
 80133ba:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80133be:	10db      	asrs	r3, r3, #3
 80133c0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80133c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80133c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80133cc:	4313      	orrs	r3, r2
 80133ce:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80133d2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80133d6:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 80133da:	1a9b      	subs	r3, r3, r2
 80133dc:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 80133e0:	e771      	b.n	80132c6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80133e2:	f023 0204 	bic.w	r2, r3, #4
 80133e6:	f640 611b 	movw	r1, #3611	; 0xe1b
 80133ea:	428a      	cmp	r2, r1
 80133ec:	d003      	beq.n	80133f6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80133ee:	f640 621d 	movw	r2, #3613	; 0xe1d
 80133f2:	4293      	cmp	r3, r2
 80133f4:	d120      	bne.n	8013438 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80133f6:	3b01      	subs	r3, #1
 80133f8:	4602      	mov	r2, r0
 80133fa:	4629      	mov	r1, r5
 80133fc:	4620      	mov	r0, r4
 80133fe:	b29b      	uxth	r3, r3
 8013400:	f7ff ff4b 	bl	801329a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013404:	7b41      	ldrb	r1, [r0, #13]
 8013406:	00cb      	lsls	r3, r1, #3
 8013408:	0649      	lsls	r1, r1, #25
 801340a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801340e:	7a03      	ldrb	r3, [r0, #8]
 8013410:	ea43 0302 	orr.w	r3, r3, r2
 8013414:	bf44      	itt	mi
 8013416:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801341a:	b21b      	sxthmi	r3, r3
 801341c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013420:	7b6b      	ldrb	r3, [r5, #13]
 8013422:	7aaa      	ldrb	r2, [r5, #10]
 8013424:	005b      	lsls	r3, r3, #1
 8013426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801342a:	4313      	orrs	r3, r2
 801342c:	115a      	asrs	r2, r3, #5
 801342e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8013432:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013436:	e035      	b.n	80134a4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8013438:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801343c:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8013440:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8013444:	7a2a      	ldrb	r2, [r5, #8]
 8013446:	ea42 0201 	orr.w	r2, r2, r1
 801344a:	f640 6109 	movw	r1, #3593	; 0xe09
 801344e:	bf1c      	itt	ne
 8013450:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8013454:	b212      	sxthne	r2, r2
 8013456:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801345a:	f023 0210 	bic.w	r2, r3, #16
 801345e:	428a      	cmp	r2, r1
 8013460:	d003      	beq.n	801346a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8013462:	f640 6213 	movw	r2, #3603	; 0xe13
 8013466:	4293      	cmp	r3, r2
 8013468:	d129      	bne.n	80134be <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801346a:	7b6e      	ldrb	r6, [r5, #13]
 801346c:	4629      	mov	r1, r5
 801346e:	0076      	lsls	r6, r6, #1
 8013470:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013474:	7aae      	ldrb	r6, [r5, #10]
 8013476:	4316      	orrs	r6, r2
 8013478:	f640 6213 	movw	r2, #3603	; 0xe13
 801347c:	4293      	cmp	r3, r2
 801347e:	4602      	mov	r2, r0
 8013480:	4620      	mov	r0, r4
 8013482:	bf16      	itet	ne
 8013484:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013488:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801348c:	b29b      	uxthne	r3, r3
 801348e:	f7ff ff04 	bl	801329a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013492:	7b43      	ldrb	r3, [r0, #13]
 8013494:	7a82      	ldrb	r2, [r0, #10]
 8013496:	005b      	lsls	r3, r3, #1
 8013498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801349c:	4313      	orrs	r3, r2
 801349e:	1af6      	subs	r6, r6, r3
 80134a0:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 80134a4:	7b69      	ldrb	r1, [r5, #13]
 80134a6:	00cb      	lsls	r3, r1, #3
 80134a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80134ac:	7a2b      	ldrb	r3, [r5, #8]
 80134ae:	4313      	orrs	r3, r2
 80134b0:	064a      	lsls	r2, r1, #25
 80134b2:	bf44      	itt	mi
 80134b4:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80134b8:	b21b      	sxthmi	r3, r3
 80134ba:	1bdb      	subs	r3, r3, r7
 80134bc:	e747      	b.n	801334e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80134be:	2300      	movs	r3, #0
 80134c0:	e7b7      	b.n	8013432 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 80134c2:	bf00      	nop
 80134c4:	3fc00079 	.word	0x3fc00079

080134c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80134c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80134cc:	4604      	mov	r4, r0
 80134ce:	b942      	cbnz	r2, 80134e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80134d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134d4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 80134d8:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 80134dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80134e0:	e047      	b.n	8013572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80134e2:	7b51      	ldrb	r1, [r2, #13]
 80134e4:	8893      	ldrh	r3, [r2, #4]
 80134e6:	010d      	lsls	r5, r1, #4
 80134e8:	f405 7080 	and.w	r0, r5, #256	; 0x100
 80134ec:	79d5      	ldrb	r5, [r2, #7]
 80134ee:	4305      	orrs	r5, r0
 80134f0:	2d04      	cmp	r5, #4
 80134f2:	bfcc      	ite	gt
 80134f4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80134f8:	f04f 0e01 	movle.w	lr, #1
 80134fc:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8013500:	f200 80ab 	bhi.w	801365a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8013504:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8013508:	4283      	cmp	r3, r0
 801350a:	d216      	bcs.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801350c:	f240 605b 	movw	r0, #1627	; 0x65b
 8013510:	4283      	cmp	r3, r0
 8013512:	d859      	bhi.n	80135c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8013514:	f240 6057 	movw	r0, #1623	; 0x657
 8013518:	4283      	cmp	r3, r0
 801351a:	d20e      	bcs.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801351c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013520:	d24a      	bcs.n	80135b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8013522:	f240 604e 	movw	r0, #1614	; 0x64e
 8013526:	4283      	cmp	r3, r0
 8013528:	d207      	bcs.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801352a:	f240 601a 	movw	r0, #1562	; 0x61a
 801352e:	4283      	cmp	r3, r0
 8013530:	d02a      	beq.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013532:	d821      	bhi.n	8013578 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8013534:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8013538:	d35b      	bcc.n	80135f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801353a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801353e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013542:	f040 80d0 	bne.w	80136e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013546:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801354a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801354e:	f040 80ca 	bne.w	80136e6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8013552:	00cb      	lsls	r3, r1, #3
 8013554:	0649      	lsls	r1, r1, #25
 8013556:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801355a:	7a13      	ldrb	r3, [r2, #8]
 801355c:	ea43 0300 	orr.w	r3, r3, r0
 8013560:	bf44      	itt	mi
 8013562:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013566:	b21b      	sxthmi	r3, r3
 8013568:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801356c:	1b5d      	subs	r5, r3, r5
 801356e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013572:	4610      	mov	r0, r2
 8013574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013578:	f240 604b 	movw	r0, #1611	; 0x64b
 801357c:	4283      	cmp	r3, r0
 801357e:	d338      	bcc.n	80135f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013580:	f240 604c 	movw	r0, #1612	; 0x64c
 8013584:	4283      	cmp	r3, r0
 8013586:	d9d8      	bls.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013588:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801358c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8013590:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013594:	f040 80f3 	bne.w	801377e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013598:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801359c:	f040 80ef 	bne.w	801377e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80135a0:	00cb      	lsls	r3, r1, #3
 80135a2:	064e      	lsls	r6, r1, #25
 80135a4:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80135a8:	7a13      	ldrb	r3, [r2, #8]
 80135aa:	ea43 0300 	orr.w	r3, r3, r0
 80135ae:	bf44      	itt	mi
 80135b0:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80135b4:	b21b      	sxthmi	r3, r3
 80135b6:	e7d9      	b.n	801356c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80135b8:	f240 6054 	movw	r0, #1620	; 0x654
 80135bc:	4283      	cmp	r3, r0
 80135be:	d8e3      	bhi.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135c0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80135c4:	d9e0      	bls.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135c6:	e7b8      	b.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80135c8:	f240 6074 	movw	r0, #1652	; 0x674
 80135cc:	4283      	cmp	r3, r0
 80135ce:	d0b4      	beq.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80135d0:	d82d      	bhi.n	801362e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80135d2:	f240 605e 	movw	r0, #1630	; 0x65e
 80135d6:	4283      	cmp	r3, r0
 80135d8:	d804      	bhi.n	80135e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80135da:	f240 605d 	movw	r0, #1629	; 0x65d
 80135de:	4283      	cmp	r3, r0
 80135e0:	d3d2      	bcc.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135e2:	e7aa      	b.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80135e4:	f240 605f 	movw	r0, #1631	; 0x65f
 80135e8:	4283      	cmp	r3, r0
 80135ea:	d0cd      	beq.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80135ec:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 80135f0:	d0a3      	beq.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80135f2:	00cb      	lsls	r3, r1, #3
 80135f4:	0649      	lsls	r1, r1, #25
 80135f6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80135fa:	7a13      	ldrb	r3, [r2, #8]
 80135fc:	ea43 0300 	orr.w	r3, r3, r0
 8013600:	bf44      	itt	mi
 8013602:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013606:	b21b      	sxthmi	r3, r3
 8013608:	1b5d      	subs	r5, r3, r5
 801360a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801360e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013612:	7b53      	ldrb	r3, [r2, #13]
 8013614:	015b      	lsls	r3, r3, #5
 8013616:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801361a:	7993      	ldrb	r3, [r2, #6]
 801361c:	430b      	orrs	r3, r1
 801361e:	2105      	movs	r1, #5
 8013620:	005b      	lsls	r3, r3, #1
 8013622:	fb93 f3f1 	sdiv	r3, r3, r1
 8013626:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801362a:	440b      	add	r3, r1
 801362c:	e756      	b.n	80134dc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801362e:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8013632:	4283      	cmp	r3, r0
 8013634:	d809      	bhi.n	801364a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8013636:	f240 60df 	movw	r0, #1759	; 0x6df
 801363a:	4283      	cmp	r3, r0
 801363c:	f4bf af7d 	bcs.w	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013640:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8013644:	2b05      	cmp	r3, #5
 8013646:	d8d4      	bhi.n	80135f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013648:	e777      	b.n	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801364a:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801364e:	4283      	cmp	r3, r0
 8013650:	d09a      	beq.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013652:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8013656:	4283      	cmp	r3, r0
 8013658:	e7ca      	b.n	80135f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801365a:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801365e:	d22b      	bcs.n	80136b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8013660:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8013664:	4283      	cmp	r3, r0
 8013666:	d28f      	bcs.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013668:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801366c:	4283      	cmp	r3, r0
 801366e:	d816      	bhi.n	801369e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8013670:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8013674:	4283      	cmp	r3, r0
 8013676:	f4bf af60 	bcs.w	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801367a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801367e:	4283      	cmp	r3, r0
 8013680:	d80a      	bhi.n	8013698 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8013682:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8013686:	4283      	cmp	r3, r0
 8013688:	f4bf af57 	bcs.w	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801368c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8013690:	4283      	cmp	r3, r0
 8013692:	f43f af79 	beq.w	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013696:	e7ac      	b.n	80135f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013698:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801369c:	e7f8      	b.n	8013690 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801369e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 80136a2:	4283      	cmp	r3, r0
 80136a4:	d802      	bhi.n	80136ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80136a6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80136aa:	e798      	b.n	80135de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80136ac:	f640 00e9 	movw	r0, #2281	; 0x8e9
 80136b0:	4283      	cmp	r3, r0
 80136b2:	f47f af42 	bne.w	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80136b6:	e767      	b.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80136b8:	f640 00f6 	movw	r0, #2294	; 0x8f6
 80136bc:	4283      	cmp	r3, r0
 80136be:	f43f af63 	beq.w	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80136c2:	d802      	bhi.n	80136ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80136c4:	f640 00f2 	movw	r0, #2290	; 0x8f2
 80136c8:	e7f2      	b.n	80136b0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80136ca:	f640 00fa 	movw	r0, #2298	; 0x8fa
 80136ce:	4283      	cmp	r3, r0
 80136d0:	d805      	bhi.n	80136de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80136d2:	f640 00f9 	movw	r0, #2297	; 0x8f9
 80136d6:	4283      	cmp	r3, r0
 80136d8:	f4ff af2f 	bcc.w	801353a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80136dc:	e754      	b.n	8013588 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80136de:	f640 00fe 	movw	r0, #2302	; 0x8fe
 80136e2:	4283      	cmp	r3, r0
 80136e4:	e7af      	b.n	8013646 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80136e6:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 80136ea:	4617      	mov	r7, r2
 80136ec:	f102 0808 	add.w	r8, r2, #8
 80136f0:	4666      	mov	r6, ip
 80136f2:	6838      	ldr	r0, [r7, #0]
 80136f4:	3708      	adds	r7, #8
 80136f6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80136fa:	46e6      	mov	lr, ip
 80136fc:	4547      	cmp	r7, r8
 80136fe:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8013702:	46f4      	mov	ip, lr
 8013704:	d1f5      	bne.n	80136f2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8013706:	6838      	ldr	r0, [r7, #0]
 8013708:	f8ce 0000 	str.w	r0, [lr]
 801370c:	88b9      	ldrh	r1, [r7, #4]
 801370e:	f8ae 1004 	strh.w	r1, [lr, #4]
 8013712:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8013716:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801371a:	d009      	beq.n	8013730 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801371c:	7b51      	ldrb	r1, [r2, #13]
 801371e:	7992      	ldrb	r2, [r2, #6]
 8013720:	0149      	lsls	r1, r1, #5
 8013722:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013726:	4311      	orrs	r1, r2
 8013728:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801372c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8013730:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8013734:	b2ad      	uxth	r5, r5
 8013736:	d00d      	beq.n	8013754 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8013738:	442b      	add	r3, r5
 801373a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801373e:	b29b      	uxth	r3, r3
 8013740:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8013744:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013748:	10db      	asrs	r3, r3, #3
 801374a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801374e:	4313      	orrs	r3, r2
 8013750:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013754:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013758:	00cb      	lsls	r3, r1, #3
 801375a:	064f      	lsls	r7, r1, #25
 801375c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013760:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8013764:	ea43 0302 	orr.w	r3, r3, r2
 8013768:	bf44      	itt	mi
 801376a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801376e:	b21b      	sxthmi	r3, r3
 8013770:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013774:	1b5b      	subs	r3, r3, r5
 8013776:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801377a:	4632      	mov	r2, r6
 801377c:	e6f9      	b.n	8013572 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801377e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8013782:	4617      	mov	r7, r2
 8013784:	f102 0908 	add.w	r9, r2, #8
 8013788:	4666      	mov	r6, ip
 801378a:	6838      	ldr	r0, [r7, #0]
 801378c:	3708      	adds	r7, #8
 801378e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013792:	46e0      	mov	r8, ip
 8013794:	454f      	cmp	r7, r9
 8013796:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801379a:	46c4      	mov	ip, r8
 801379c:	d1f5      	bne.n	801378a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801379e:	6838      	ldr	r0, [r7, #0]
 80137a0:	f8c8 0000 	str.w	r0, [r8]
 80137a4:	88b9      	ldrh	r1, [r7, #4]
 80137a6:	f8a8 1004 	strh.w	r1, [r8, #4]
 80137aa:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80137ae:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80137b2:	d009      	beq.n	80137c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80137b4:	7b51      	ldrb	r1, [r2, #13]
 80137b6:	7992      	ldrb	r2, [r2, #6]
 80137b8:	0149      	lsls	r1, r1, #5
 80137ba:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80137be:	4311      	orrs	r1, r2
 80137c0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80137c4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80137c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80137cc:	d00e      	beq.n	80137ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 80137ce:	eba3 030e 	sub.w	r3, r3, lr
 80137d2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80137dc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80137e0:	10db      	asrs	r3, r3, #3
 80137e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80137e6:	4313      	orrs	r3, r2
 80137e8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80137ec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80137f0:	00cb      	lsls	r3, r1, #3
 80137f2:	0648      	lsls	r0, r1, #25
 80137f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80137f8:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80137fc:	ea43 0302 	orr.w	r3, r3, r2
 8013800:	bf44      	itt	mi
 8013802:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013806:	b21b      	sxthmi	r3, r3
 8013808:	1b5d      	subs	r5, r3, r5
 801380a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801380e:	e7b4      	b.n	801377a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08013810 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8013810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013814:	461e      	mov	r6, r3
 8013816:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8013818:	4604      	mov	r4, r0
 801381a:	4617      	mov	r7, r2
 801381c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013820:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013824:	f7f8 f880 	bl	800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8013828:	4605      	mov	r5, r0
 801382a:	b918      	cbnz	r0, 8013834 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801382c:	6030      	str	r0, [r6, #0]
 801382e:	4628      	mov	r0, r5
 8013830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	4601      	mov	r1, r0
 8013838:	4638      	mov	r0, r7
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	4798      	blx	r3
 801383e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8013842:	4602      	mov	r2, r0
 8013844:	6030      	str	r0, [r6, #0]
 8013846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801384a:	d213      	bcs.n	8013874 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801384c:	4643      	mov	r3, r8
 801384e:	4639      	mov	r1, r7
 8013850:	4620      	mov	r0, r4
 8013852:	f7ff fe39 	bl	80134c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8013856:	6030      	str	r0, [r6, #0]
 8013858:	6833      	ldr	r3, [r6, #0]
 801385a:	b143      	cbz	r3, 801386e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801385c:	7b5a      	ldrb	r2, [r3, #13]
 801385e:	7a9b      	ldrb	r3, [r3, #10]
 8013860:	0052      	lsls	r2, r2, #1
 8013862:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8013866:	4313      	orrs	r3, r2
 8013868:	bf0c      	ite	eq
 801386a:	2301      	moveq	r3, #1
 801386c:	2300      	movne	r3, #0
 801386e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8013872:	e7dc      	b.n	801382e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8013874:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013878:	b29b      	uxth	r3, r3
 801387a:	2b7f      	cmp	r3, #127	; 0x7f
 801387c:	d804      	bhi.n	8013888 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801387e:	4639      	mov	r1, r7
 8013880:	4620      	mov	r0, r4
 8013882:	f7ff fd15 	bl	80132b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013886:	e7e6      	b.n	8013856 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013888:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801388c:	2b00      	cmp	r3, #0
 801388e:	d0e3      	beq.n	8013858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013890:	f640 1302 	movw	r3, #2306	; 0x902
 8013894:	429d      	cmp	r5, r3
 8013896:	d1df      	bne.n	8013858 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013898:	4601      	mov	r1, r0
 801389a:	4620      	mov	r0, r4
 801389c:	f7ff fcd9 	bl	8013252 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80138a0:	e7d9      	b.n	8013856 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080138a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80138a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138a6:	461e      	mov	r6, r3
 80138a8:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80138aa:	4604      	mov	r4, r0
 80138ac:	4617      	mov	r7, r2
 80138ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80138b2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80138b6:	f7f8 f837 	bl	800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80138ba:	4605      	mov	r5, r0
 80138bc:	b918      	cbnz	r0, 80138c6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80138be:	6030      	str	r0, [r6, #0]
 80138c0:	4628      	mov	r0, r5
 80138c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	4601      	mov	r1, r0
 80138ca:	4638      	mov	r0, r7
 80138cc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80138d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80138d4:	47c8      	blx	r9
 80138d6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80138da:	4602      	mov	r2, r0
 80138dc:	6030      	str	r0, [r6, #0]
 80138de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80138e2:	d213      	bcs.n	801390c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 80138e4:	4643      	mov	r3, r8
 80138e6:	4639      	mov	r1, r7
 80138e8:	4620      	mov	r0, r4
 80138ea:	f7ff fded 	bl	80134c8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80138ee:	6030      	str	r0, [r6, #0]
 80138f0:	6833      	ldr	r3, [r6, #0]
 80138f2:	b143      	cbz	r3, 8013906 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 80138f4:	7b5a      	ldrb	r2, [r3, #13]
 80138f6:	7a9b      	ldrb	r3, [r3, #10]
 80138f8:	0052      	lsls	r2, r2, #1
 80138fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80138fe:	4313      	orrs	r3, r2
 8013900:	bf0c      	ite	eq
 8013902:	2301      	moveq	r3, #1
 8013904:	2300      	movne	r3, #0
 8013906:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801390a:	e7d9      	b.n	80138c0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801390c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013910:	b29b      	uxth	r3, r3
 8013912:	2b7f      	cmp	r3, #127	; 0x7f
 8013914:	d804      	bhi.n	8013920 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8013916:	4639      	mov	r1, r7
 8013918:	4620      	mov	r0, r4
 801391a:	f7ff fcc9 	bl	80132b0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801391e:	e7e6      	b.n	80138ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8013920:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8013924:	2b00      	cmp	r3, #0
 8013926:	d0e3      	beq.n	80138f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013928:	f640 1302 	movw	r3, #2306	; 0x902
 801392c:	429d      	cmp	r5, r3
 801392e:	d1df      	bne.n	80138f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8013930:	4601      	mov	r1, r0
 8013932:	4620      	mov	r0, r4
 8013934:	f7ff fc8d 	bl	8013252 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013938:	e7d9      	b.n	80138ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801393a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801393a:	b510      	push	{r4, lr}
 801393c:	4604      	mov	r4, r0
 801393e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8013942:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013944:	b1e1      	cbz	r1, 8013980 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8013946:	2b0a      	cmp	r3, #10
 8013948:	d02d      	beq.n	80139a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801394a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801394c:	3901      	subs	r1, #1
 801394e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8013952:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8013954:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8013958:	1c51      	adds	r1, r2, #1
 801395a:	b289      	uxth	r1, r1
 801395c:	2901      	cmp	r1, #1
 801395e:	bf8a      	itet	hi
 8013960:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013964:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8013966:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8013968:	1c5a      	adds	r2, r3, #1
 801396a:	8722      	strh	r2, [r4, #56]	; 0x38
 801396c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801396e:	4413      	add	r3, r2
 8013970:	b29b      	uxth	r3, r3
 8013972:	2b09      	cmp	r3, #9
 8013974:	bf88      	it	hi
 8013976:	3b0a      	subhi	r3, #10
 8013978:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801397c:	8458      	strh	r0, [r3, #34]	; 0x22
 801397e:	e7de      	b.n	801393e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8013980:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013982:	2b0a      	cmp	r3, #10
 8013984:	d00f      	beq.n	80139a6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013986:	4620      	mov	r0, r4
 8013988:	f7ff fc11 	bl	80131ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801398c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801398e:	1c5a      	adds	r2, r3, #1
 8013990:	8722      	strh	r2, [r4, #56]	; 0x38
 8013992:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013994:	4413      	add	r3, r2
 8013996:	b29b      	uxth	r3, r3
 8013998:	2b09      	cmp	r3, #9
 801399a:	bf88      	it	hi
 801399c:	3b0a      	subhi	r3, #10
 801399e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80139a2:	8458      	strh	r0, [r3, #34]	; 0x22
 80139a4:	e7ec      	b.n	8013980 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80139a6:	bd10      	pop	{r4, pc}

080139a8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80139a8:	b538      	push	{r3, r4, r5, lr}
 80139aa:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80139ac:	4604      	mov	r4, r0
 80139ae:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80139b2:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80139b4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80139b6:	3a01      	subs	r2, #1
 80139b8:	8702      	strh	r2, [r0, #56]	; 0x38
 80139ba:	1c5a      	adds	r2, r3, #1
 80139bc:	b292      	uxth	r2, r2
 80139be:	2a09      	cmp	r2, #9
 80139c0:	bf8a      	itet	hi
 80139c2:	3b09      	subhi	r3, #9
 80139c4:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80139c6:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80139c8:	f7ff ffb7 	bl	801393a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80139cc:	8c23      	ldrh	r3, [r4, #32]
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	bf9c      	itt	ls
 80139d2:	3301      	addls	r3, #1
 80139d4:	8423      	strhls	r3, [r4, #32]
 80139d6:	8be3      	ldrh	r3, [r4, #30]
 80139d8:	b90b      	cbnz	r3, 80139de <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80139da:	2302      	movs	r3, #2
 80139dc:	83e3      	strh	r3, [r4, #30]
 80139de:	8be3      	ldrh	r3, [r4, #30]
 80139e0:	4628      	mov	r0, r5
 80139e2:	3b01      	subs	r3, #1
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	83e3      	strh	r3, [r4, #30]
 80139e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80139ec:	8365      	strh	r5, [r4, #26]
 80139ee:	bd38      	pop	{r3, r4, r5, pc}

080139f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80139f0:	428a      	cmp	r2, r1
 80139f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139f6:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80139f8:	d932      	bls.n	8013a60 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 80139fa:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80139fc:	1a54      	subs	r4, r2, r1
 80139fe:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8013a02:	19ee      	adds	r6, r5, r7
 8013a04:	fa1f fe84 	uxth.w	lr, r4
 8013a08:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8013a0c:	3e01      	subs	r6, #1
 8013a0e:	b2b4      	uxth	r4, r6
 8013a10:	eba4 090e 	sub.w	r9, r4, lr
 8013a14:	fa1f f989 	uxth.w	r9, r9
 8013a18:	2c09      	cmp	r4, #9
 8013a1a:	4626      	mov	r6, r4
 8013a1c:	bf88      	it	hi
 8013a1e:	f1a4 060a 	subhi.w	r6, r4, #10
 8013a22:	f1bc 0f00 	cmp.w	ip, #0
 8013a26:	f104 34ff 	add.w	r4, r4, #4294967295
 8013a2a:	bf08      	it	eq
 8013a2c:	f04f 0c02 	moveq.w	ip, #2
 8013a30:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8013a34:	b2a4      	uxth	r4, r4
 8013a36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013a3a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8013a3e:	454c      	cmp	r4, r9
 8013a40:	fa1f fc8c 	uxth.w	ip, ip
 8013a44:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8013a48:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8013a4c:	d1e4      	bne.n	8013a18 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8013a4e:	eba5 050e 	sub.w	r5, r5, lr
 8013a52:	eb0e 0408 	add.w	r4, lr, r8
 8013a56:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8013a5a:	8705      	strh	r5, [r0, #56]	; 0x38
 8013a5c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8013a60:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8013a62:	250a      	movs	r5, #10
 8013a64:	1a64      	subs	r4, r4, r1
 8013a66:	4439      	add	r1, r7
 8013a68:	b289      	uxth	r1, r1
 8013a6a:	8704      	strh	r4, [r0, #56]	; 0x38
 8013a6c:	2909      	cmp	r1, #9
 8013a6e:	bf88      	it	hi
 8013a70:	390a      	subhi	r1, #10
 8013a72:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013a74:	b18a      	cbz	r2, 8013a9a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8013a76:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8013a78:	3a01      	subs	r2, #1
 8013a7a:	3101      	adds	r1, #1
 8013a7c:	b292      	uxth	r2, r2
 8013a7e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8013a82:	8701      	strh	r1, [r0, #56]	; 0x38
 8013a84:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8013a86:	b901      	cbnz	r1, 8013a8a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8013a88:	86c5      	strh	r5, [r0, #54]	; 0x36
 8013a8a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8013a8c:	3901      	subs	r1, #1
 8013a8e:	b289      	uxth	r1, r1
 8013a90:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013a92:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013a96:	844c      	strh	r4, [r1, #34]	; 0x22
 8013a98:	e7ec      	b.n	8013a74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8013a9a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a9e:	f7ff bf4c 	b.w	801393a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08013aa2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8013aa2:	b570      	push	{r4, r5, r6, lr}
 8013aa4:	2500      	movs	r5, #0
 8013aa6:	4295      	cmp	r5, r2
 8013aa8:	d011      	beq.n	8013ace <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8013aaa:	8bc4      	ldrh	r4, [r0, #30]
 8013aac:	f831 6b02 	ldrh.w	r6, [r1], #2
 8013ab0:	4414      	add	r4, r2
 8013ab2:	3c01      	subs	r4, #1
 8013ab4:	1b64      	subs	r4, r4, r5
 8013ab6:	b2a4      	uxth	r4, r4
 8013ab8:	2c01      	cmp	r4, #1
 8013aba:	bf88      	it	hi
 8013abc:	3c02      	subhi	r4, #2
 8013abe:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013ac2:	8b64      	ldrh	r4, [r4, #26]
 8013ac4:	42b4      	cmp	r4, r6
 8013ac6:	d117      	bne.n	8013af8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8013ac8:	3501      	adds	r5, #1
 8013aca:	b2ad      	uxth	r5, r5
 8013acc:	e7eb      	b.n	8013aa6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8013ace:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013ad2:	2400      	movs	r4, #0
 8013ad4:	4413      	add	r3, r2
 8013ad6:	b2a2      	uxth	r2, r4
 8013ad8:	429a      	cmp	r2, r3
 8013ada:	da0f      	bge.n	8013afc <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8013adc:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8013ade:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8013ae2:	3401      	adds	r4, #1
 8013ae4:	4432      	add	r2, r6
 8013ae6:	b292      	uxth	r2, r2
 8013ae8:	2a09      	cmp	r2, #9
 8013aea:	bf88      	it	hi
 8013aec:	3a0a      	subhi	r2, #10
 8013aee:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8013af2:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8013af4:	42aa      	cmp	r2, r5
 8013af6:	d0ee      	beq.n	8013ad6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8013af8:	2000      	movs	r0, #0
 8013afa:	bd70      	pop	{r4, r5, r6, pc}
 8013afc:	2001      	movs	r0, #1
 8013afe:	e7fc      	b.n	8013afa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08013b00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b04:	4605      	mov	r5, r0
 8013b06:	4616      	mov	r6, r2
 8013b08:	1c8c      	adds	r4, r1, #2
 8013b0a:	8809      	ldrh	r1, [r1, #0]
 8013b0c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8013b10:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8013b14:	42b3      	cmp	r3, r6
 8013b16:	d124      	bne.n	8013b62 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8013b18:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8013b1c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8013b20:	f001 070f 	and.w	r7, r1, #15
 8013b24:	4652      	mov	r2, sl
 8013b26:	f8cd 8000 	str.w	r8, [sp]
 8013b2a:	464b      	mov	r3, r9
 8013b2c:	4621      	mov	r1, r4
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f7ff ffb7 	bl	8013aa2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8013b34:	4683      	mov	fp, r0
 8013b36:	b168      	cbz	r0, 8013b54 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8013b38:	eb0a 0109 	add.w	r1, sl, r9
 8013b3c:	463a      	mov	r2, r7
 8013b3e:	4628      	mov	r0, r5
 8013b40:	4441      	add	r1, r8
 8013b42:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8013b46:	4649      	mov	r1, r9
 8013b48:	f7ff ff52 	bl	80139f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8013b4c:	4658      	mov	r0, fp
 8013b4e:	b003      	add	sp, #12
 8013b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b54:	eb07 010a 	add.w	r1, r7, sl
 8013b58:	4449      	add	r1, r9
 8013b5a:	4441      	add	r1, r8
 8013b5c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8013b60:	e7d2      	b.n	8013b08 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8013b62:	f04f 0b00 	mov.w	fp, #0
 8013b66:	e7f1      	b.n	8013b4c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08013b68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8013b68:	b570      	push	{r4, r5, r6, lr}
 8013b6a:	8810      	ldrh	r0, [r2, #0]
 8013b6c:	4298      	cmp	r0, r3
 8013b6e:	d817      	bhi.n	8013ba0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013b70:	1e48      	subs	r0, r1, #1
 8013b72:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8013b76:	4298      	cmp	r0, r3
 8013b78:	d312      	bcc.n	8013ba0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013b7a:	2400      	movs	r4, #0
 8013b7c:	428c      	cmp	r4, r1
 8013b7e:	d20f      	bcs.n	8013ba0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013b80:	1860      	adds	r0, r4, r1
 8013b82:	1040      	asrs	r0, r0, #1
 8013b84:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8013b88:	0085      	lsls	r5, r0, #2
 8013b8a:	42b3      	cmp	r3, r6
 8013b8c:	d902      	bls.n	8013b94 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8013b8e:	3001      	adds	r0, #1
 8013b90:	b284      	uxth	r4, r0
 8013b92:	e7f3      	b.n	8013b7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013b94:	d201      	bcs.n	8013b9a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8013b96:	b281      	uxth	r1, r0
 8013b98:	e7f0      	b.n	8013b7c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013b9a:	442a      	add	r2, r5
 8013b9c:	8850      	ldrh	r0, [r2, #2]
 8013b9e:	bd70      	pop	{r4, r5, r6, pc}
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	e7fc      	b.n	8013b9e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08013ba4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8013ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba8:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8013baa:	4604      	mov	r4, r0
 8013bac:	260b      	movs	r6, #11
 8013bae:	886f      	ldrh	r7, [r5, #2]
 8013bb0:	087f      	lsrs	r7, r7, #1
 8013bb2:	3e01      	subs	r6, #1
 8013bb4:	d013      	beq.n	8013bde <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8013bb6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013bb8:	462a      	mov	r2, r5
 8013bba:	4639      	mov	r1, r7
 8013bbc:	4620      	mov	r0, r4
 8013bbe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013bc2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013bc6:	4643      	mov	r3, r8
 8013bc8:	f7ff ffce 	bl	8013b68 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8013bcc:	b138      	cbz	r0, 8013bde <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8013bce:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8013bd2:	4642      	mov	r2, r8
 8013bd4:	4620      	mov	r0, r4
 8013bd6:	f7ff ff93 	bl	8013b00 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8013bda:	2800      	cmp	r0, #0
 8013bdc:	d1e9      	bne.n	8013bb2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8013bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08013be4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8013be4:	b570      	push	{r4, r5, r6, lr}
 8013be6:	694a      	ldr	r2, [r1, #20]
 8013be8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8013bea:	684b      	ldr	r3, [r1, #4]
 8013bec:	1b54      	subs	r4, r2, r5
 8013bee:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8013bf0:	f000 8106 	beq.w	8013e00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8013bf4:	1b9b      	subs	r3, r3, r6
 8013bf6:	d003      	beq.n	8013c00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013bf8:	4363      	muls	r3, r4
 8013bfa:	2210      	movs	r2, #16
 8013bfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c00:	680c      	ldr	r4, [r1, #0]
 8013c02:	698a      	ldr	r2, [r1, #24]
 8013c04:	1b65      	subs	r5, r4, r5
 8013c06:	f000 80fd 	beq.w	8013e04 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8013c0a:	1b92      	subs	r2, r2, r6
 8013c0c:	d003      	beq.n	8013c16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013c0e:	436a      	muls	r2, r5
 8013c10:	2410      	movs	r4, #16
 8013c12:	fb92 f2f4 	sdiv	r2, r2, r4
 8013c16:	1a9b      	subs	r3, r3, r2
 8013c18:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8013e40 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8013c1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c20:	460a      	mov	r2, r1
 8013c22:	ee07 3a90 	vmov	s15, r3
 8013c26:	f100 040c 	add.w	r4, r0, #12
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c30:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013c34:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8013c38:	eeb1 6a43 	vneg.f32	s12, s6
 8013c3c:	edd2 7a02 	vldr	s15, [r2, #8]
 8013c40:	3214      	adds	r2, #20
 8013c42:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8013c46:	ece3 6a01 	vstmia	r3!, {s13}
 8013c4a:	429c      	cmp	r4, r3
 8013c4c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8013c50:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013c54:	edc3 7a02 	vstr	s15, [r3, #8]
 8013c58:	ed52 7a01 	vldr	s15, [r2, #-4]
 8013c5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013c60:	edc3 7a05 	vstr	s15, [r3, #20]
 8013c64:	d1ea      	bne.n	8013c3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8013c66:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013c68:	698b      	ldr	r3, [r1, #24]
 8013c6a:	edd0 4a02 	vldr	s9, [r0, #8]
 8013c6e:	1a9b      	subs	r3, r3, r2
 8013c70:	edd0 3a00 	vldr	s7, [r0]
 8013c74:	edd0 6a01 	vldr	s13, [r0, #4]
 8013c78:	ee07 3a90 	vmov	s15, r3
 8013c7c:	684b      	ldr	r3, [r1, #4]
 8013c7e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8013c82:	ed90 5a05 	vldr	s10, [r0, #20]
 8013c86:	1a9b      	subs	r3, r3, r2
 8013c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013c8c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8013c90:	ed90 2a03 	vldr	s4, [r0, #12]
 8013c94:	ee07 3a10 	vmov	s14, r3
 8013c98:	edd0 5a04 	vldr	s11, [r0, #16]
 8013c9c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013ca0:	ed90 1a07 	vldr	s2, [r0, #28]
 8013ca4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ca8:	edd0 2a06 	vldr	s5, [r0, #24]
 8013cac:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8013cb0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8013cb4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013cb8:	ee32 5a45 	vsub.f32	s10, s4, s10
 8013cbc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013cc0:	ee67 7a83 	vmul.f32	s15, s15, s6
 8013cc4:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8013cc8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013cca:	694a      	ldr	r2, [r1, #20]
 8013ccc:	1b13      	subs	r3, r2, r4
 8013cce:	ee07 3a10 	vmov	s14, r3
 8013cd2:	680b      	ldr	r3, [r1, #0]
 8013cd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cd8:	1b1b      	subs	r3, r3, r4
 8013cda:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013cde:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8013ce2:	ee07 3a10 	vmov	s14, r3
 8013ce6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013cea:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013cee:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013cf2:	ee64 4a86 	vmul.f32	s9, s9, s12
 8013cf6:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8013cfa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013cfc:	698b      	ldr	r3, [r1, #24]
 8013cfe:	1a9b      	subs	r3, r3, r2
 8013d00:	ee06 3a90 	vmov	s13, r3
 8013d04:	684b      	ldr	r3, [r1, #4]
 8013d06:	1a9b      	subs	r3, r3, r2
 8013d08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013d0c:	ee07 3a10 	vmov	s14, r3
 8013d10:	ee66 6a84 	vmul.f32	s13, s13, s8
 8013d14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d18:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8013d1c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013d20:	eee5 6a87 	vfma.f32	s13, s11, s14
 8013d24:	ee66 6a83 	vmul.f32	s13, s13, s6
 8013d28:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8013d2c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013d2e:	694a      	ldr	r2, [r1, #20]
 8013d30:	1b13      	subs	r3, r2, r4
 8013d32:	ee07 3a10 	vmov	s14, r3
 8013d36:	680b      	ldr	r3, [r1, #0]
 8013d38:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d3c:	1b1b      	subs	r3, r3, r4
 8013d3e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013d42:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8013d46:	ee07 3a10 	vmov	s14, r3
 8013d4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d4e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013d52:	eea5 5a87 	vfma.f32	s10, s11, s14
 8013d56:	edd0 5a08 	vldr	s11, [r0, #32]
 8013d5a:	ee31 1a65 	vsub.f32	s2, s2, s11
 8013d5e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8013d62:	ee25 5a06 	vmul.f32	s10, s10, s12
 8013d66:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8013d6a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013d6c:	698b      	ldr	r3, [r1, #24]
 8013d6e:	1a9b      	subs	r3, r3, r2
 8013d70:	ee07 3a10 	vmov	s14, r3
 8013d74:	684b      	ldr	r3, [r1, #4]
 8013d76:	1a9b      	subs	r3, r3, r2
 8013d78:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013d7c:	ee01 3a90 	vmov	s3, r3
 8013d80:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013d84:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013d88:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8013d8c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8013d90:	eea1 7a21 	vfma.f32	s14, s2, s3
 8013d94:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013d98:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013d9c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013d9e:	694a      	ldr	r2, [r1, #20]
 8013da0:	1b13      	subs	r3, r2, r4
 8013da2:	ee03 3a10 	vmov	s6, r3
 8013da6:	680b      	ldr	r3, [r1, #0]
 8013da8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013dac:	1b1b      	subs	r3, r3, r4
 8013dae:	ee23 3a04 	vmul.f32	s6, s6, s8
 8013db2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8013db6:	ee03 3a10 	vmov	s6, r3
 8013dba:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013dbe:	ee23 4a04 	vmul.f32	s8, s6, s8
 8013dc2:	eee1 5a04 	vfma.f32	s11, s2, s8
 8013dc6:	ee25 6a86 	vmul.f32	s12, s11, s12
 8013dca:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8013dce:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8013dd2:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8013dd6:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8013dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dde:	dd13      	ble.n	8013e08 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8013de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013de4:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8013de8:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013dea:	eee3 7a87 	vfma.f32	s15, s7, s14
 8013dee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013df6:	dd15      	ble.n	8013e24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8013df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013dfc:	6403      	str	r3, [r0, #64]	; 0x40
 8013dfe:	bd70      	pop	{r4, r5, r6, pc}
 8013e00:	4623      	mov	r3, r4
 8013e02:	e6fd      	b.n	8013c00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013e04:	462a      	mov	r2, r5
 8013e06:	e706      	b.n	8013c16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013e08:	d502      	bpl.n	8013e10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8013e0a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013e0e:	e7e9      	b.n	8013de4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8013e10:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8013e14:	eea3 2a85 	vfma.f32	s4, s7, s10
 8013e18:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8013e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e20:	dade      	bge.n	8013de0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8013e22:	e7f2      	b.n	8013e0a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8013e24:	d502      	bpl.n	8013e2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8013e26:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013e2a:	e7e7      	b.n	8013dfc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8013e2c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8013e30:	eee3 4a86 	vfma.f32	s9, s7, s12
 8013e34:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8013e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e3c:	dadc      	bge.n	8013df8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8013e3e:	e7f2      	b.n	8013e26 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8013e40:	3d800000 	.word	0x3d800000

08013e44 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8013e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e48:	2714      	movs	r7, #20
 8013e4a:	435f      	muls	r7, r3
 8013e4c:	eb02 0c07 	add.w	ip, r2, r7
 8013e50:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8013e54:	f115 0e0f 	adds.w	lr, r5, #15
 8013e58:	f100 80a2 	bmi.w	8013fa0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8013e5c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8013e60:	9c08      	ldr	r4, [sp, #32]
 8013e62:	2614      	movs	r6, #20
 8013e64:	f8c0 e014 	str.w	lr, [r0, #20]
 8013e68:	4366      	muls	r6, r4
 8013e6a:	eb02 0806 	add.w	r8, r2, r6
 8013e6e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013e72:	f115 040f 	adds.w	r4, r5, #15
 8013e76:	f100 809f 	bmi.w	8013fb8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8013e7a:	1124      	asrs	r4, r4, #4
 8013e7c:	eba4 040e 	sub.w	r4, r4, lr
 8013e80:	6184      	str	r4, [r0, #24]
 8013e82:	2c00      	cmp	r4, #0
 8013e84:	f000 808a 	beq.w	8013f9c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8013e88:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8013e8c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013e90:	5995      	ldr	r5, [r2, r6]
 8013e92:	eba4 0809 	sub.w	r8, r4, r9
 8013e96:	59d4      	ldr	r4, [r2, r7]
 8013e98:	eba5 0a04 	sub.w	sl, r5, r4
 8013e9c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8013ea0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8013ea4:	fb0e fe05 	mul.w	lr, lr, r5
 8013ea8:	fb0a ee19 	mls	lr, sl, r9, lr
 8013eac:	fb08 e404 	mla	r4, r8, r4, lr
 8013eb0:	3c01      	subs	r4, #1
 8013eb2:	19a4      	adds	r4, r4, r6
 8013eb4:	f100 808c 	bmi.w	8013fd0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8013eb8:	fb94 fef6 	sdiv	lr, r4, r6
 8013ebc:	fb06 441e 	mls	r4, r6, lr, r4
 8013ec0:	f8c0 e000 	str.w	lr, [r0]
 8013ec4:	6104      	str	r4, [r0, #16]
 8013ec6:	2d00      	cmp	r5, #0
 8013ec8:	f2c0 8095 	blt.w	8013ff6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8013ecc:	fb95 f4f6 	sdiv	r4, r5, r6
 8013ed0:	fb06 5514 	mls	r5, r6, r4, r5
 8013ed4:	6044      	str	r4, [r0, #4]
 8013ed6:	6085      	str	r5, [r0, #8]
 8013ed8:	60c6      	str	r6, [r0, #12]
 8013eda:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013ede:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013ee2:	6945      	ldr	r5, [r0, #20]
 8013ee4:	59d2      	ldr	r2, [r2, r7]
 8013ee6:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8013eea:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8014018 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8013eee:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013ef2:	ee07 4a10 	vmov	s14, r4
 8013ef6:	6804      	ldr	r4, [r0, #0]
 8013ef8:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8013efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013f00:	ee07 2a90 	vmov	s15, r2
 8013f04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013f0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013f10:	edd3 6a00 	vldr	s13, [r3]
 8013f14:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013f18:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8013f1c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013f20:	edc0 6a07 	vstr	s13, [r0, #28]
 8013f24:	edd0 6a01 	vldr	s13, [r0, #4]
 8013f28:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8013f2c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013f30:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013f34:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013f38:	ed80 6a08 	vstr	s12, [r0, #32]
 8013f3c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8013f3e:	6242      	str	r2, [r0, #36]	; 0x24
 8013f40:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8013f44:	ed93 6a03 	vldr	s12, [r3, #12]
 8013f48:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013f4c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013f50:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013f54:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8013f58:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013f5c:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8013f60:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013f64:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8013f68:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013f6a:	6302      	str	r2, [r0, #48]	; 0x30
 8013f6c:	ed93 6a06 	vldr	s12, [r3, #24]
 8013f70:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8013f74:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013f78:	eeb0 7a46 	vmov.f32	s14, s12
 8013f7c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8013f80:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013f84:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013f88:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8013f8c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8013f90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013f94:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8013f98:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013f9a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa0:	2410      	movs	r4, #16
 8013fa2:	f1c5 0501 	rsb	r5, r5, #1
 8013fa6:	fb9e fef4 	sdiv	lr, lr, r4
 8013faa:	f015 050f 	ands.w	r5, r5, #15
 8013fae:	bf18      	it	ne
 8013fb0:	2501      	movne	r5, #1
 8013fb2:	ebae 0e05 	sub.w	lr, lr, r5
 8013fb6:	e753      	b.n	8013e60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8013fb8:	f04f 0910 	mov.w	r9, #16
 8013fbc:	f1c5 0501 	rsb	r5, r5, #1
 8013fc0:	fb94 f4f9 	sdiv	r4, r4, r9
 8013fc4:	f015 050f 	ands.w	r5, r5, #15
 8013fc8:	bf18      	it	ne
 8013fca:	2501      	movne	r5, #1
 8013fcc:	1b64      	subs	r4, r4, r5
 8013fce:	e755      	b.n	8013e7c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8013fd0:	4264      	negs	r4, r4
 8013fd2:	fb94 fef6 	sdiv	lr, r4, r6
 8013fd6:	f1ce 0800 	rsb	r8, lr, #0
 8013fda:	fb06 441e 	mls	r4, r6, lr, r4
 8013fde:	f8c0 8000 	str.w	r8, [r0]
 8013fe2:	6104      	str	r4, [r0, #16]
 8013fe4:	2c00      	cmp	r4, #0
 8013fe6:	f43f af6e 	beq.w	8013ec6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8013fea:	ea6f 0e0e 	mvn.w	lr, lr
 8013fee:	1b34      	subs	r4, r6, r4
 8013ff0:	f8c0 e000 	str.w	lr, [r0]
 8013ff4:	e766      	b.n	8013ec4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8013ff6:	426d      	negs	r5, r5
 8013ff8:	fb95 f4f6 	sdiv	r4, r5, r6
 8013ffc:	f1c4 0e00 	rsb	lr, r4, #0
 8014000:	fb06 5514 	mls	r5, r6, r4, r5
 8014004:	f8c0 e004 	str.w	lr, [r0, #4]
 8014008:	6085      	str	r5, [r0, #8]
 801400a:	2d00      	cmp	r5, #0
 801400c:	f43f af64 	beq.w	8013ed8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8014010:	43e4      	mvns	r4, r4
 8014012:	1b75      	subs	r5, r6, r5
 8014014:	6044      	str	r4, [r0, #4]
 8014016:	e75e      	b.n	8013ed6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8014018:	3d800000 	.word	0x3d800000

0801401c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801401c:	4b01      	ldr	r3, [pc, #4]	; (8014024 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801401e:	6018      	str	r0, [r3, #0]
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	2401aad8 	.word	0x2401aad8

08014028 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8014028:	4b06      	ldr	r3, [pc, #24]	; (8014044 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801402a:	881a      	ldrh	r2, [r3, #0]
 801402c:	4282      	cmp	r2, r0
 801402e:	d807      	bhi.n	8014040 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8014030:	4b05      	ldr	r3, [pc, #20]	; (8014048 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8014032:	881b      	ldrh	r3, [r3, #0]
 8014034:	4413      	add	r3, r2
 8014036:	4298      	cmp	r0, r3
 8014038:	bfac      	ite	ge
 801403a:	2000      	movge	r0, #0
 801403c:	2001      	movlt	r0, #1
 801403e:	4770      	bx	lr
 8014040:	2000      	movs	r0, #0
 8014042:	4770      	bx	lr
 8014044:	2401aaf8 	.word	0x2401aaf8
 8014048:	2401aafc 	.word	0x2401aafc

0801404c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801404c:	b508      	push	{r3, lr}
 801404e:	4601      	mov	r1, r0
 8014050:	f7ff ffea 	bl	8014028 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8014054:	b118      	cbz	r0, 801405e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8014056:	4b02      	ldr	r3, [pc, #8]	; (8014060 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801405e:	bd08      	pop	{r3, pc}
 8014060:	2401aadc 	.word	0x2401aadc

08014064 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4604      	mov	r4, r0
 8014068:	f7ff ffde 	bl	8014028 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801406c:	b188      	cbz	r0, 8014092 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801406e:	4b09      	ldr	r3, [pc, #36]	; (8014094 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8014070:	881a      	ldrh	r2, [r3, #0]
 8014072:	4b09      	ldr	r3, [pc, #36]	; (8014098 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8014074:	1aa4      	subs	r4, r4, r2
 8014076:	220e      	movs	r2, #14
 8014078:	681d      	ldr	r5, [r3, #0]
 801407a:	4362      	muls	r2, r4
 801407c:	18ac      	adds	r4, r5, r2
 801407e:	7b23      	ldrb	r3, [r4, #12]
 8014080:	f013 0320 	ands.w	r3, r3, #32
 8014084:	bf17      	itett	ne
 8014086:	680b      	ldrne	r3, [r1, #0]
 8014088:	4618      	moveq	r0, r3
 801408a:	50ab      	strne	r3, [r5, r2]
 801408c:	684b      	ldrne	r3, [r1, #4]
 801408e:	bf18      	it	ne
 8014090:	6063      	strne	r3, [r4, #4]
 8014092:	bd38      	pop	{r3, r4, r5, pc}
 8014094:	2401aaf8 	.word	0x2401aaf8
 8014098:	2401aae0 	.word	0x2401aae0

0801409c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801409c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80140a0:	4606      	mov	r6, r0
 80140a2:	460c      	mov	r4, r1
 80140a4:	f7ff ffc0 	bl	8014028 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80140a8:	b918      	cbnz	r0, 80140b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80140aa:	2000      	movs	r0, #0
 80140ac:	b002      	add	sp, #8
 80140ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140b2:	4608      	mov	r0, r1
 80140b4:	f7fa f8bb 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d1f6      	bne.n	80140aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80140bc:	4b3f      	ldr	r3, [pc, #252]	; (80141bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80140be:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80141c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80140c2:	881d      	ldrh	r5, [r3, #0]
 80140c4:	f8d9 a000 	ldr.w	sl, [r9]
 80140c8:	46c8      	mov	r8, r9
 80140ca:	1b73      	subs	r3, r6, r5
 80140cc:	250e      	movs	r5, #14
 80140ce:	435d      	muls	r5, r3
 80140d0:	eb0a 0705 	add.w	r7, sl, r5
 80140d4:	7b3b      	ldrb	r3, [r7, #12]
 80140d6:	f013 0f20 	tst.w	r3, #32
 80140da:	d0e6      	beq.n	80140aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80140dc:	4621      	mov	r1, r4
 80140de:	4638      	mov	r0, r7
 80140e0:	f7fd fab6 	bl	8011650 <_ZNK8touchgfx4Rect8includesERKS0_>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	d1e1      	bne.n	80140ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80140e8:	4639      	mov	r1, r7
 80140ea:	4620      	mov	r0, r4
 80140ec:	f7fd fab0 	bl	8011650 <_ZNK8touchgfx4Rect8includesERKS0_>
 80140f0:	b108      	cbz	r0, 80140f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80140f2:	4621      	mov	r1, r4
 80140f4:	e020      	b.n	8014138 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80140f6:	f9b4 2000 	ldrsh.w	r2, [r4]
 80140fa:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80140fe:	429a      	cmp	r2, r3
 8014100:	d11e      	bne.n	8014140 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8014102:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801410a:	429a      	cmp	r2, r3
 801410c:	d118      	bne.n	8014140 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801410e:	6820      	ldr	r0, [r4, #0]
 8014110:	466b      	mov	r3, sp
 8014112:	6861      	ldr	r1, [r4, #4]
 8014114:	c303      	stmia	r3!, {r0, r1}
 8014116:	4639      	mov	r1, r7
 8014118:	4668      	mov	r0, sp
 801411a:	f7fd fabf 	bl	801169c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801411e:	f8d9 3000 	ldr.w	r3, [r9]
 8014122:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014126:	442b      	add	r3, r5
 8014128:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801412c:	4413      	add	r3, r2
 801412e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8014132:	4293      	cmp	r3, r2
 8014134:	dc04      	bgt.n	8014140 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8014136:	4669      	mov	r1, sp
 8014138:	4630      	mov	r0, r6
 801413a:	f7ff ff93 	bl	8014064 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801413e:	e7b5      	b.n	80140ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8014140:	f8d8 3000 	ldr.w	r3, [r8]
 8014144:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8014148:	442b      	add	r3, r5
 801414a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801414e:	4291      	cmp	r1, r2
 8014150:	d119      	bne.n	8014186 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8014152:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014156:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801415a:	4291      	cmp	r1, r2
 801415c:	d113      	bne.n	8014186 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801415e:	6820      	ldr	r0, [r4, #0]
 8014160:	466a      	mov	r2, sp
 8014162:	6861      	ldr	r1, [r4, #4]
 8014164:	c203      	stmia	r2!, {r0, r1}
 8014166:	4619      	mov	r1, r3
 8014168:	4668      	mov	r0, sp
 801416a:	f7fd fa97 	bl	801169c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801416e:	f8d8 3000 	ldr.w	r3, [r8]
 8014172:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014176:	442b      	add	r3, r5
 8014178:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801417c:	4413      	add	r3, r2
 801417e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8014182:	4293      	cmp	r3, r2
 8014184:	ddd7      	ble.n	8014136 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8014186:	4620      	mov	r0, r4
 8014188:	f7fa f851 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 801418c:	b990      	cbnz	r0, 80141b4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801418e:	88a7      	ldrh	r7, [r4, #4]
 8014190:	88e3      	ldrh	r3, [r4, #6]
 8014192:	fb17 f703 	smulbb	r7, r7, r3
 8014196:	f8d8 3000 	ldr.w	r3, [r8]
 801419a:	441d      	add	r5, r3
 801419c:	4628      	mov	r0, r5
 801419e:	f7fa f846 	bl	800e22e <_ZNK8touchgfx4Rect7isEmptyEv>
 80141a2:	b948      	cbnz	r0, 80141b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80141a4:	88ab      	ldrh	r3, [r5, #4]
 80141a6:	88ea      	ldrh	r2, [r5, #6]
 80141a8:	fb13 f302 	smulbb	r3, r3, r2
 80141ac:	42bb      	cmp	r3, r7
 80141ae:	f6bf af7c 	bge.w	80140aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80141b2:	e79e      	b.n	80140f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80141b4:	2700      	movs	r7, #0
 80141b6:	e7ee      	b.n	8014196 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80141b8:	2300      	movs	r3, #0
 80141ba:	e7f7      	b.n	80141ac <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80141bc:	2401aaf8 	.word	0x2401aaf8
 80141c0:	2401aae0 	.word	0x2401aae0

080141c4 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80141c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c6:	4c24      	ldr	r4, [pc, #144]	; (8014258 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80141c8:	6823      	ldr	r3, [r4, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d042      	beq.n	8014254 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80141ce:	4a23      	ldr	r2, [pc, #140]	; (801425c <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80141d0:	4d23      	ldr	r5, [pc, #140]	; (8014260 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80141d2:	8811      	ldrh	r1, [r2, #0]
 80141d4:	f8b5 c000 	ldrh.w	ip, [r5]
 80141d8:	4822      	ldr	r0, [pc, #136]	; (8014264 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80141da:	4461      	add	r1, ip
 80141dc:	1c4a      	adds	r2, r1, #1
 80141de:	008f      	lsls	r7, r1, #2
 80141e0:	f022 0201 	bic.w	r2, r2, #1
 80141e4:	19de      	adds	r6, r3, r7
 80141e6:	0412      	lsls	r2, r2, #16
 80141e8:	6006      	str	r6, [r0, #0]
 80141ea:	4e1f      	ldr	r6, [pc, #124]	; (8014268 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80141ec:	0c12      	lsrs	r2, r2, #16
 80141ee:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80141f2:	19da      	adds	r2, r3, r7
 80141f4:	6032      	str	r2, [r6, #0]
 80141f6:	220e      	movs	r2, #14
 80141f8:	fb02 f20c 	mul.w	r2, r2, ip
 80141fc:	3203      	adds	r2, #3
 80141fe:	f022 0203 	bic.w	r2, r2, #3
 8014202:	443a      	add	r2, r7
 8014204:	4f19      	ldr	r7, [pc, #100]	; (801426c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8014206:	4413      	add	r3, r2
 8014208:	603b      	str	r3, [r7, #0]
 801420a:	2300      	movs	r3, #0
 801420c:	4f18      	ldr	r7, [pc, #96]	; (8014270 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801420e:	469c      	mov	ip, r3
 8014210:	803b      	strh	r3, [r7, #0]
 8014212:	4f18      	ldr	r7, [pc, #96]	; (8014274 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8014214:	683f      	ldr	r7, [r7, #0]
 8014216:	1aba      	subs	r2, r7, r2
 8014218:	4f17      	ldr	r7, [pc, #92]	; (8014278 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801421a:	603a      	str	r2, [r7, #0]
 801421c:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014220:	4a16      	ldr	r2, [pc, #88]	; (801427c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8014222:	8013      	strh	r3, [r2, #0]
 8014224:	428b      	cmp	r3, r1
 8014226:	d10d      	bne.n	8014244 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8014228:	882d      	ldrh	r5, [r5, #0]
 801422a:	2300      	movs	r3, #0
 801422c:	6830      	ldr	r0, [r6, #0]
 801422e:	240e      	movs	r4, #14
 8014230:	429d      	cmp	r5, r3
 8014232:	d90f      	bls.n	8014254 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8014234:	fb04 0203 	mla	r2, r4, r3, r0
 8014238:	3301      	adds	r3, #1
 801423a:	7b11      	ldrb	r1, [r2, #12]
 801423c:	f36f 1145 	bfc	r1, #5, #1
 8014240:	7311      	strb	r1, [r2, #12]
 8014242:	e7f5      	b.n	8014230 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8014244:	6822      	ldr	r2, [r4, #0]
 8014246:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801424a:	6802      	ldr	r2, [r0, #0]
 801424c:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8014250:	3301      	adds	r3, #1
 8014252:	e7e7      	b.n	8014224 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8014254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014256:	bf00      	nop
 8014258:	2401aadc 	.word	0x2401aadc
 801425c:	2401aaf8 	.word	0x2401aaf8
 8014260:	2401aafc 	.word	0x2401aafc
 8014264:	2401aaf0 	.word	0x2401aaf0
 8014268:	2401aae0 	.word	0x2401aae0
 801426c:	2401aae8 	.word	0x2401aae8
 8014270:	2401aafa 	.word	0x2401aafa
 8014274:	2401aae4 	.word	0x2401aae4
 8014278:	2401aaf4 	.word	0x2401aaf4
 801427c:	2401aaec 	.word	0x2401aaec

08014280 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8014280:	4b06      	ldr	r3, [pc, #24]	; (801429c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	b943      	cbnz	r3, 8014298 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8014286:	b139      	cbz	r1, 8014298 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8014288:	4b05      	ldr	r3, [pc, #20]	; (80142a0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801428a:	801a      	strh	r2, [r3, #0]
 801428c:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801428e:	6019      	str	r1, [r3, #0]
 8014290:	4b05      	ldr	r3, [pc, #20]	; (80142a8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8014292:	6018      	str	r0, [r3, #0]
 8014294:	f7ff bf96 	b.w	80141c4 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8014298:	4770      	bx	lr
 801429a:	bf00      	nop
 801429c:	2401aae8 	.word	0x2401aae8
 80142a0:	2401aafc 	.word	0x2401aafc
 80142a4:	2401aae4 	.word	0x2401aae4
 80142a8:	2401aadc 	.word	0x2401aadc

080142ac <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80142ac:	b470      	push	{r4, r5, r6}
 80142ae:	4c07      	ldr	r4, [pc, #28]	; (80142cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80142b0:	4605      	mov	r5, r0
 80142b2:	4610      	mov	r0, r2
 80142b4:	9a03      	ldr	r2, [sp, #12]
 80142b6:	6826      	ldr	r6, [r4, #0]
 80142b8:	b936      	cbnz	r6, 80142c8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80142ba:	6025      	str	r5, [r4, #0]
 80142bc:	4c04      	ldr	r4, [pc, #16]	; (80142d0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80142be:	8021      	strh	r1, [r4, #0]
 80142c0:	4619      	mov	r1, r3
 80142c2:	bc70      	pop	{r4, r5, r6}
 80142c4:	f7ff bfdc 	b.w	8014280 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80142c8:	bc70      	pop	{r4, r5, r6}
 80142ca:	4770      	bx	lr
 80142cc:	2401ab00 	.word	0x2401ab00
 80142d0:	2401aaf8 	.word	0x2401aaf8

080142d4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80142d4:	4a12      	ldr	r2, [pc, #72]	; (8014320 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80142d6:	8803      	ldrh	r3, [r0, #0]
 80142d8:	8812      	ldrh	r2, [r2, #0]
 80142da:	4293      	cmp	r3, r2
 80142dc:	d207      	bcs.n	80142ee <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80142de:	4a11      	ldr	r2, [pc, #68]	; (8014324 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80142e0:	2114      	movs	r1, #20
 80142e2:	6812      	ldr	r2, [r2, #0]
 80142e4:	fb01 2303 	mla	r3, r1, r3, r2
 80142e8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80142ec:	4770      	bx	lr
 80142ee:	490e      	ldr	r1, [pc, #56]	; (8014328 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80142f0:	8809      	ldrh	r1, [r1, #0]
 80142f2:	4411      	add	r1, r2
 80142f4:	428b      	cmp	r3, r1
 80142f6:	da04      	bge.n	8014302 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80142f8:	1a9b      	subs	r3, r3, r2
 80142fa:	4a0c      	ldr	r2, [pc, #48]	; (801432c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80142fc:	210e      	movs	r1, #14
 80142fe:	6812      	ldr	r2, [r2, #0]
 8014300:	e7f0      	b.n	80142e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8014302:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014306:	4293      	cmp	r3, r2
 8014308:	d108      	bne.n	801431c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801430a:	4b09      	ldr	r3, [pc, #36]	; (8014330 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801430c:	781b      	ldrb	r3, [r3, #0]
 801430e:	b91b      	cbnz	r3, 8014318 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8014310:	4b08      	ldr	r3, [pc, #32]	; (8014334 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8014312:	f9b3 0000 	ldrsh.w	r0, [r3]
 8014316:	4770      	bx	lr
 8014318:	4b07      	ldr	r3, [pc, #28]	; (8014338 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801431a:	e7fa      	b.n	8014312 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801431c:	2000      	movs	r0, #0
 801431e:	4770      	bx	lr
 8014320:	2401aaf8 	.word	0x2401aaf8
 8014324:	2401ab00 	.word	0x2401ab00
 8014328:	2401aafc 	.word	0x2401aafc
 801432c:	2401aae0 	.word	0x2401aae0
 8014330:	2401aa70 	.word	0x2401aa70
 8014334:	2401aa72 	.word	0x2401aa72
 8014338:	2401aa74 	.word	0x2401aa74

0801433c <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801433c:	4a12      	ldr	r2, [pc, #72]	; (8014388 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801433e:	8803      	ldrh	r3, [r0, #0]
 8014340:	8812      	ldrh	r2, [r2, #0]
 8014342:	4293      	cmp	r3, r2
 8014344:	d207      	bcs.n	8014356 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8014346:	4a11      	ldr	r2, [pc, #68]	; (801438c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8014348:	2114      	movs	r1, #20
 801434a:	6812      	ldr	r2, [r2, #0]
 801434c:	fb01 2303 	mla	r3, r1, r3, r2
 8014350:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8014354:	4770      	bx	lr
 8014356:	490e      	ldr	r1, [pc, #56]	; (8014390 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8014358:	8809      	ldrh	r1, [r1, #0]
 801435a:	4411      	add	r1, r2
 801435c:	428b      	cmp	r3, r1
 801435e:	da04      	bge.n	801436a <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8014360:	1a9b      	subs	r3, r3, r2
 8014362:	4a0c      	ldr	r2, [pc, #48]	; (8014394 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8014364:	210e      	movs	r1, #14
 8014366:	6812      	ldr	r2, [r2, #0]
 8014368:	e7f0      	b.n	801434c <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801436a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801436e:	4293      	cmp	r3, r2
 8014370:	d108      	bne.n	8014384 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8014372:	4b09      	ldr	r3, [pc, #36]	; (8014398 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	b91b      	cbnz	r3, 8014380 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8014378:	4b08      	ldr	r3, [pc, #32]	; (801439c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801437a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801437e:	4770      	bx	lr
 8014380:	4b07      	ldr	r3, [pc, #28]	; (80143a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8014382:	e7fa      	b.n	801437a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8014384:	2000      	movs	r0, #0
 8014386:	4770      	bx	lr
 8014388:	2401aaf8 	.word	0x2401aaf8
 801438c:	2401ab00 	.word	0x2401ab00
 8014390:	2401aafc 	.word	0x2401aafc
 8014394:	2401aae0 	.word	0x2401aae0
 8014398:	2401aa70 	.word	0x2401aa70
 801439c:	2401aa74 	.word	0x2401aa74
 80143a0:	2401aa72 	.word	0x2401aa72

080143a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80143a4:	4a1f      	ldr	r2, [pc, #124]	; (8014424 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80143a6:	b510      	push	{r4, lr}
 80143a8:	880b      	ldrh	r3, [r1, #0]
 80143aa:	8812      	ldrh	r2, [r2, #0]
 80143ac:	4293      	cmp	r3, r2
 80143ae:	d213      	bcs.n	80143d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80143b0:	4a1d      	ldr	r2, [pc, #116]	; (8014428 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80143b2:	2114      	movs	r1, #20
 80143b4:	6812      	ldr	r2, [r2, #0]
 80143b6:	fb01 2303 	mla	r3, r1, r3, r2
 80143ba:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80143be:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80143c2:	8a1a      	ldrh	r2, [r3, #16]
 80143c4:	8a5b      	ldrh	r3, [r3, #18]
 80143c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80143ca:	8004      	strh	r4, [r0, #0]
 80143cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80143d0:	8041      	strh	r1, [r0, #2]
 80143d2:	8082      	strh	r2, [r0, #4]
 80143d4:	80c3      	strh	r3, [r0, #6]
 80143d6:	e00e      	b.n	80143f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80143d8:	4914      	ldr	r1, [pc, #80]	; (801442c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80143da:	8809      	ldrh	r1, [r1, #0]
 80143dc:	4411      	add	r1, r2
 80143de:	428b      	cmp	r3, r1
 80143e0:	da0a      	bge.n	80143f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80143e2:	1a9b      	subs	r3, r3, r2
 80143e4:	4a12      	ldr	r2, [pc, #72]	; (8014430 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80143e6:	210e      	movs	r1, #14
 80143e8:	6812      	ldr	r2, [r2, #0]
 80143ea:	fb01 2303 	mla	r3, r1, r3, r2
 80143ee:	681a      	ldr	r2, [r3, #0]
 80143f0:	6002      	str	r2, [r0, #0]
 80143f2:	685a      	ldr	r2, [r3, #4]
 80143f4:	6042      	str	r2, [r0, #4]
 80143f6:	bd10      	pop	{r4, pc}
 80143f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80143fc:	4293      	cmp	r3, r2
 80143fe:	d10b      	bne.n	8014418 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8014400:	4b0c      	ldr	r3, [pc, #48]	; (8014434 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8014402:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014406:	4b0c      	ldr	r3, [pc, #48]	; (8014438 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8014408:	8081      	strh	r1, [r0, #4]
 801440a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801440e:	2300      	movs	r3, #0
 8014410:	80c2      	strh	r2, [r0, #6]
 8014412:	8003      	strh	r3, [r0, #0]
 8014414:	8043      	strh	r3, [r0, #2]
 8014416:	e7ee      	b.n	80143f6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8014418:	2300      	movs	r3, #0
 801441a:	8003      	strh	r3, [r0, #0]
 801441c:	8043      	strh	r3, [r0, #2]
 801441e:	8083      	strh	r3, [r0, #4]
 8014420:	e7d8      	b.n	80143d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8014422:	bf00      	nop
 8014424:	2401aaf8 	.word	0x2401aaf8
 8014428:	2401ab00 	.word	0x2401ab00
 801442c:	2401aafc 	.word	0x2401aafc
 8014430:	2401aae0 	.word	0x2401aae0
 8014434:	2401aa6c 	.word	0x2401aa6c
 8014438:	2401aa6e 	.word	0x2401aa6e

0801443c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801443c:	4a12      	ldr	r2, [pc, #72]	; (8014488 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801443e:	8803      	ldrh	r3, [r0, #0]
 8014440:	8811      	ldrh	r1, [r2, #0]
 8014442:	428b      	cmp	r3, r1
 8014444:	d20b      	bcs.n	801445e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8014446:	4a11      	ldr	r2, [pc, #68]	; (801448c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8014448:	6812      	ldr	r2, [r2, #0]
 801444a:	b112      	cbz	r2, 8014452 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801444c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014450:	b9c0      	cbnz	r0, 8014484 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8014452:	4a0f      	ldr	r2, [pc, #60]	; (8014490 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8014454:	6811      	ldr	r1, [r2, #0]
 8014456:	2214      	movs	r2, #20
 8014458:	4353      	muls	r3, r2
 801445a:	58c8      	ldr	r0, [r1, r3]
 801445c:	4770      	bx	lr
 801445e:	4a0d      	ldr	r2, [pc, #52]	; (8014494 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8014460:	8812      	ldrh	r2, [r2, #0]
 8014462:	440a      	add	r2, r1
 8014464:	4293      	cmp	r3, r2
 8014466:	da04      	bge.n	8014472 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8014468:	4a08      	ldr	r2, [pc, #32]	; (801448c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801446a:	6812      	ldr	r2, [r2, #0]
 801446c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014470:	4770      	bx	lr
 8014472:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014476:	4293      	cmp	r3, r2
 8014478:	d103      	bne.n	8014482 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801447a:	4b07      	ldr	r3, [pc, #28]	; (8014498 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8014480:	4770      	bx	lr
 8014482:	2000      	movs	r0, #0
 8014484:	4770      	bx	lr
 8014486:	bf00      	nop
 8014488:	2401aaf8 	.word	0x2401aaf8
 801448c:	2401aadc 	.word	0x2401aadc
 8014490:	2401ab00 	.word	0x2401ab00
 8014494:	2401aafc 	.word	0x2401aafc
 8014498:	2401aa78 	.word	0x2401aa78

0801449c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801449c:	4b24      	ldr	r3, [pc, #144]	; (8014530 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801449e:	8802      	ldrh	r2, [r0, #0]
 80144a0:	8818      	ldrh	r0, [r3, #0]
 80144a2:	4282      	cmp	r2, r0
 80144a4:	d221      	bcs.n	80144ea <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80144a6:	4b23      	ldr	r3, [pc, #140]	; (8014534 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80144a8:	6819      	ldr	r1, [r3, #0]
 80144aa:	2314      	movs	r3, #20
 80144ac:	fb03 1302 	mla	r3, r3, r2, r1
 80144b0:	6858      	ldr	r0, [r3, #4]
 80144b2:	2800      	cmp	r0, #0
 80144b4:	d03a      	beq.n	801452c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80144b6:	4920      	ldr	r1, [pc, #128]	; (8014538 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80144b8:	6809      	ldr	r1, [r1, #0]
 80144ba:	2900      	cmp	r1, #0
 80144bc:	d036      	beq.n	801452c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80144be:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80144c2:	2900      	cmp	r1, #0
 80144c4:	d032      	beq.n	801452c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80144c6:	891a      	ldrh	r2, [r3, #8]
 80144c8:	8958      	ldrh	r0, [r3, #10]
 80144ca:	4350      	muls	r0, r2
 80144cc:	7c5a      	ldrb	r2, [r3, #17]
 80144ce:	7cdb      	ldrb	r3, [r3, #19]
 80144d0:	0952      	lsrs	r2, r2, #5
 80144d2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80144d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80144da:	2b0b      	cmp	r3, #11
 80144dc:	bf18      	it	ne
 80144de:	0040      	lslne	r0, r0, #1
 80144e0:	3003      	adds	r0, #3
 80144e2:	f020 0003 	bic.w	r0, r0, #3
 80144e6:	4408      	add	r0, r1
 80144e8:	4770      	bx	lr
 80144ea:	4b14      	ldr	r3, [pc, #80]	; (801453c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80144ec:	881b      	ldrh	r3, [r3, #0]
 80144ee:	4403      	add	r3, r0
 80144f0:	429a      	cmp	r2, r3
 80144f2:	da1a      	bge.n	801452a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80144f4:	4b12      	ldr	r3, [pc, #72]	; (8014540 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80144f6:	1a10      	subs	r0, r2, r0
 80144f8:	210e      	movs	r1, #14
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	fb01 3000 	mla	r0, r1, r0, r3
 8014500:	7b03      	ldrb	r3, [r0, #12]
 8014502:	f003 031f 	and.w	r3, r3, #31
 8014506:	2b0b      	cmp	r3, #11
 8014508:	d10b      	bne.n	8014522 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801450a:	8903      	ldrh	r3, [r0, #8]
 801450c:	8940      	ldrh	r0, [r0, #10]
 801450e:	4358      	muls	r0, r3
 8014510:	4b09      	ldr	r3, [pc, #36]	; (8014538 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8014512:	3003      	adds	r0, #3
 8014514:	6819      	ldr	r1, [r3, #0]
 8014516:	f020 0303 	bic.w	r3, r0, #3
 801451a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801451e:	4418      	add	r0, r3
 8014520:	4770      	bx	lr
 8014522:	2b0d      	cmp	r3, #13
 8014524:	d101      	bne.n	801452a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8014526:	300d      	adds	r0, #13
 8014528:	4770      	bx	lr
 801452a:	2000      	movs	r0, #0
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	2401aaf8 	.word	0x2401aaf8
 8014534:	2401ab00 	.word	0x2401ab00
 8014538:	2401aadc 	.word	0x2401aadc
 801453c:	2401aafc 	.word	0x2401aafc
 8014540:	2401aae0 	.word	0x2401aae0

08014544 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8014544:	4a17      	ldr	r2, [pc, #92]	; (80145a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8014546:	b510      	push	{r4, lr}
 8014548:	8803      	ldrh	r3, [r0, #0]
 801454a:	8812      	ldrh	r2, [r2, #0]
 801454c:	4293      	cmp	r3, r2
 801454e:	d20c      	bcs.n	801456a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8014550:	4a15      	ldr	r2, [pc, #84]	; (80145a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8014552:	2114      	movs	r1, #20
 8014554:	6812      	ldr	r2, [r2, #0]
 8014556:	fb01 2303 	mla	r3, r1, r3, r2
 801455a:	7c58      	ldrb	r0, [r3, #17]
 801455c:	0942      	lsrs	r2, r0, #5
 801455e:	7cd8      	ldrb	r0, [r3, #19]
 8014560:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8014564:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8014568:	bd10      	pop	{r4, pc}
 801456a:	4910      	ldr	r1, [pc, #64]	; (80145ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801456c:	8809      	ldrh	r1, [r1, #0]
 801456e:	4411      	add	r1, r2
 8014570:	428b      	cmp	r3, r1
 8014572:	da09      	bge.n	8014588 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8014574:	1a9b      	subs	r3, r3, r2
 8014576:	4a0e      	ldr	r2, [pc, #56]	; (80145b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8014578:	210e      	movs	r1, #14
 801457a:	6812      	ldr	r2, [r2, #0]
 801457c:	fb01 2303 	mla	r3, r1, r3, r2
 8014580:	7b18      	ldrb	r0, [r3, #12]
 8014582:	f000 001f 	and.w	r0, r0, #31
 8014586:	e7ef      	b.n	8014568 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8014588:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801458c:	4293      	cmp	r3, r2
 801458e:	d106      	bne.n	801459e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8014590:	f7f5 fafc 	bl	8009b8c <_ZN8touchgfx3HAL3lcdEv>
 8014594:	6803      	ldr	r3, [r0, #0]
 8014596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801459c:	4718      	bx	r3
 801459e:	2000      	movs	r0, #0
 80145a0:	e7e2      	b.n	8014568 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 80145a2:	bf00      	nop
 80145a4:	2401aaf8 	.word	0x2401aaf8
 80145a8:	2401ab00 	.word	0x2401ab00
 80145ac:	2401aafc 	.word	0x2401aafc
 80145b0:	2401aae0 	.word	0x2401aae0

080145b4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80145b4:	2018      	movs	r0, #24
 80145b6:	4770      	bx	lr

080145b8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80145b8:	2001      	movs	r0, #1
 80145ba:	4770      	bx	lr

080145bc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80145bc:	4b02      	ldr	r3, [pc, #8]	; (80145c8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 80145be:	8818      	ldrh	r0, [r3, #0]
 80145c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80145c4:	b280      	uxth	r0, r0
 80145c6:	4770      	bx	lr
 80145c8:	2401aa72 	.word	0x2401aa72

080145cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80145cc:	2bff      	cmp	r3, #255	; 0xff
 80145ce:	d040      	beq.n	8014652 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 80145d0:	2a2c      	cmp	r2, #44	; 0x2c
 80145d2:	d02a      	beq.n	801462a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 80145d4:	d80f      	bhi.n	80145f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80145d6:	2a08      	cmp	r2, #8
 80145d8:	d037      	beq.n	801464a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80145da:	d805      	bhi.n	80145e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80145dc:	2a04      	cmp	r2, #4
 80145de:	d032      	beq.n	8014646 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 80145e0:	2a05      	cmp	r2, #5
 80145e2:	d02e      	beq.n	8014642 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80145e4:	2000      	movs	r0, #0
 80145e6:	4770      	bx	lr
 80145e8:	2a0a      	cmp	r2, #10
 80145ea:	d02e      	beq.n	801464a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80145ec:	d301      	bcc.n	80145f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80145ee:	2a0b      	cmp	r2, #11
 80145f0:	d1f8      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80145f2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80145f4:	4770      	bx	lr
 80145f6:	2a30      	cmp	r2, #48	; 0x30
 80145f8:	d029      	beq.n	801464e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80145fa:	d808      	bhi.n	801460e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 80145fc:	2a2e      	cmp	r2, #46	; 0x2e
 80145fe:	684b      	ldr	r3, [r1, #4]
 8014600:	d01a      	beq.n	8014638 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8014602:	d90b      	bls.n	801461c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8014604:	781b      	ldrb	r3, [r3, #0]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d1ec      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801460a:	6a00      	ldr	r0, [r0, #32]
 801460c:	4770      	bx	lr
 801460e:	2a32      	cmp	r2, #50	; 0x32
 8014610:	d01d      	beq.n	801464e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8014612:	d301      	bcc.n	8014618 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8014614:	2a33      	cmp	r2, #51	; 0x33
 8014616:	d1e5      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014618:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801461a:	4770      	bx	lr
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d0f3      	beq.n	801460a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8014622:	2b01      	cmp	r3, #1
 8014624:	d1de      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014626:	6900      	ldr	r0, [r0, #16]
 8014628:	4770      	bx	lr
 801462a:	684b      	ldr	r3, [r1, #4]
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	b133      	cbz	r3, 801463e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8014630:	2b01      	cmp	r3, #1
 8014632:	d1d7      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014634:	6880      	ldr	r0, [r0, #8]
 8014636:	4770      	bx	lr
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d1d2      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801463e:	6980      	ldr	r0, [r0, #24]
 8014640:	4770      	bx	lr
 8014642:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8014644:	4770      	bx	lr
 8014646:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8014648:	4770      	bx	lr
 801464a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801464c:	4770      	bx	lr
 801464e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8014650:	4770      	bx	lr
 8014652:	2a2c      	cmp	r2, #44	; 0x2c
 8014654:	d02a      	beq.n	80146ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8014656:	d80f      	bhi.n	8014678 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8014658:	2a08      	cmp	r2, #8
 801465a:	d035      	beq.n	80146c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801465c:	d805      	bhi.n	801466a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801465e:	2a04      	cmp	r2, #4
 8014660:	d030      	beq.n	80146c4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8014662:	2a05      	cmp	r2, #5
 8014664:	d1be      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014666:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8014668:	4770      	bx	lr
 801466a:	2a0a      	cmp	r2, #10
 801466c:	d02c      	beq.n	80146c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 801466e:	d301      	bcc.n	8014674 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8014670:	2a0b      	cmp	r2, #11
 8014672:	d1b7      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014674:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014676:	4770      	bx	lr
 8014678:	2a30      	cmp	r2, #48	; 0x30
 801467a:	d027      	beq.n	80146cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801467c:	d808      	bhi.n	8014690 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801467e:	2a2e      	cmp	r2, #46	; 0x2e
 8014680:	684b      	ldr	r3, [r1, #4]
 8014682:	d01a      	beq.n	80146ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8014684:	d90b      	bls.n	801469e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d1ab      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801468c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801468e:	4770      	bx	lr
 8014690:	2a32      	cmp	r2, #50	; 0x32
 8014692:	d01b      	beq.n	80146cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8014694:	d301      	bcc.n	801469a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8014696:	2a33      	cmp	r2, #51	; 0x33
 8014698:	d1a4      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801469a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801469c:	4770      	bx	lr
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d0f3      	beq.n	801468c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d19d      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80146a8:	6940      	ldr	r0, [r0, #20]
 80146aa:	4770      	bx	lr
 80146ac:	684b      	ldr	r3, [r1, #4]
 80146ae:	781b      	ldrb	r3, [r3, #0]
 80146b0:	b133      	cbz	r3, 80146c0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 80146b2:	2b01      	cmp	r3, #1
 80146b4:	d196      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80146b6:	68c0      	ldr	r0, [r0, #12]
 80146b8:	4770      	bx	lr
 80146ba:	781b      	ldrb	r3, [r3, #0]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d191      	bne.n	80145e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80146c0:	69c0      	ldr	r0, [r0, #28]
 80146c2:	4770      	bx	lr
 80146c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80146c6:	4770      	bx	lr
 80146c8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80146ca:	4770      	bx	lr
 80146cc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80146ce:	4770      	bx	lr

080146d0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80146d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d4:	b085      	sub	sp, #20
 80146d6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80146d8:	9203      	str	r2, [sp, #12]
 80146da:	6870      	ldr	r0, [r6, #4]
 80146dc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80146e0:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80146e4:	9101      	str	r1, [sp, #4]
 80146e6:	fa1f f885 	uxth.w	r8, r5
 80146ea:	43ed      	mvns	r5, r5
 80146ec:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80146f0:	b2ed      	uxtb	r5, r5
 80146f2:	fb00 2404 	mla	r4, r0, r4, r2
 80146f6:	6832      	ldr	r2, [r6, #0]
 80146f8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80146fc:	4414      	add	r4, r2
 80146fe:	f8dc 2000 	ldr.w	r2, [ip]
 8014702:	9202      	str	r2, [sp, #8]
 8014704:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014708:	f102 0e04 	add.w	lr, r2, #4
 801470c:	9a01      	ldr	r2, [sp, #4]
 801470e:	2a00      	cmp	r2, #0
 8014710:	dc03      	bgt.n	801471a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8014712:	9a03      	ldr	r2, [sp, #12]
 8014714:	2a00      	cmp	r2, #0
 8014716:	f340 8116 	ble.w	8014946 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801471a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801471c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8014720:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014726:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801472a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801472e:	2b00      	cmp	r3, #0
 8014730:	dd0e      	ble.n	8014750 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8014732:	1406      	asrs	r6, r0, #16
 8014734:	d405      	bmi.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014736:	4556      	cmp	r6, sl
 8014738:	da03      	bge.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801473a:	1416      	asrs	r6, r2, #16
 801473c:	d401      	bmi.n	8014742 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801473e:	454e      	cmp	r6, r9
 8014740:	db07      	blt.n	8014752 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8014742:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014744:	3b01      	subs	r3, #1
 8014746:	3403      	adds	r4, #3
 8014748:	4430      	add	r0, r6
 801474a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801474c:	4432      	add	r2, r6
 801474e:	e7ee      	b.n	801472e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8014750:	d063      	beq.n	801481a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014752:	1e5e      	subs	r6, r3, #1
 8014754:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8014756:	fb07 0706 	mla	r7, r7, r6, r0
 801475a:	143f      	asrs	r7, r7, #16
 801475c:	d454      	bmi.n	8014808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801475e:	4557      	cmp	r7, sl
 8014760:	da52      	bge.n	8014808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014762:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014764:	fb07 2606 	mla	r6, r7, r6, r2
 8014768:	1436      	asrs	r6, r6, #16
 801476a:	d44d      	bmi.n	8014808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801476c:	454e      	cmp	r6, r9
 801476e:	da4b      	bge.n	8014808 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014770:	1ce6      	adds	r6, r4, #3
 8014772:	4699      	mov	r9, r3
 8014774:	f1b9 0f00 	cmp.w	r9, #0
 8014778:	f106 0603 	add.w	r6, r6, #3
 801477c:	dd48      	ble.n	8014810 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801477e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8014782:	1417      	asrs	r7, r2, #16
 8014784:	9902      	ldr	r1, [sp, #8]
 8014786:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801478a:	f109 39ff 	add.w	r9, r9, #4294967295
 801478e:	fb0b 1707 	mla	r7, fp, r7, r1
 8014792:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014796:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014798:	f817 700a 	ldrb.w	r7, [r7, sl]
 801479c:	fb1b fb05 	smulbb	fp, fp, r5
 80147a0:	4408      	add	r0, r1
 80147a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80147a4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80147a8:	440a      	add	r2, r1
 80147aa:	eb0e 0a07 	add.w	sl, lr, r7
 80147ae:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80147b2:	fb07 b708 	mla	r7, r7, r8, fp
 80147b6:	b2bf      	uxth	r7, r7
 80147b8:	f107 0b01 	add.w	fp, r7, #1
 80147bc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80147c0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80147c4:	fb1b fb05 	smulbb	fp, fp, r5
 80147c8:	123f      	asrs	r7, r7, #8
 80147ca:	f806 7c06 	strb.w	r7, [r6, #-6]
 80147ce:	f89a 7001 	ldrb.w	r7, [sl, #1]
 80147d2:	fb07 b708 	mla	r7, r7, r8, fp
 80147d6:	b2bf      	uxth	r7, r7
 80147d8:	f107 0b01 	add.w	fp, r7, #1
 80147dc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80147e0:	123f      	asrs	r7, r7, #8
 80147e2:	f806 7c05 	strb.w	r7, [r6, #-5]
 80147e6:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80147ea:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 80147ee:	fb1a fa05 	smulbb	sl, sl, r5
 80147f2:	fb07 a708 	mla	r7, r7, r8, sl
 80147f6:	b2bf      	uxth	r7, r7
 80147f8:	f107 0a01 	add.w	sl, r7, #1
 80147fc:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014800:	123f      	asrs	r7, r7, #8
 8014802:	f806 7c04 	strb.w	r7, [r6, #-4]
 8014806:	e7b5      	b.n	8014774 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8014808:	2700      	movs	r7, #0
 801480a:	1bde      	subs	r6, r3, r7
 801480c:	2e00      	cmp	r6, #0
 801480e:	dc42      	bgt.n	8014896 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8014810:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014814:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014818:	441c      	add	r4, r3
 801481a:	9b01      	ldr	r3, [sp, #4]
 801481c:	2b00      	cmp	r3, #0
 801481e:	f340 8092 	ble.w	8014946 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8014822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014828:	ee30 0a04 	vadd.f32	s0, s0, s8
 801482c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014830:	eef0 6a62 	vmov.f32	s13, s5
 8014834:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014838:	ee31 1a05 	vadd.f32	s2, s2, s10
 801483c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014840:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8014844:	eef0 6a43 	vmov.f32	s13, s6
 8014848:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801484c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8014850:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014854:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014858:	ee77 2a62 	vsub.f32	s5, s14, s5
 801485c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014860:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014864:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014868:	ee12 2a90 	vmov	r2, s5
 801486c:	eef0 2a47 	vmov.f32	s5, s14
 8014870:	fb92 f3f3 	sdiv	r3, r2, r3
 8014874:	ee13 2a10 	vmov	r2, s6
 8014878:	9311      	str	r3, [sp, #68]	; 0x44
 801487a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801487c:	eeb0 3a67 	vmov.f32	s6, s15
 8014880:	fb92 f3f3 	sdiv	r3, r2, r3
 8014884:	9312      	str	r3, [sp, #72]	; 0x48
 8014886:	9b01      	ldr	r3, [sp, #4]
 8014888:	9a03      	ldr	r2, [sp, #12]
 801488a:	3b01      	subs	r3, #1
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014890:	bf08      	it	eq
 8014892:	4613      	moveq	r3, r2
 8014894:	e73a      	b.n	801470c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014896:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801489a:	d44e      	bmi.n	801493a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801489c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80148a0:	4556      	cmp	r6, sl
 80148a2:	dd4a      	ble.n	801493a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80148a4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 80148a8:	d447      	bmi.n	801493a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80148aa:	f8dc 100c 	ldr.w	r1, [ip, #12]
 80148ae:	4559      	cmp	r1, fp
 80148b0:	dd43      	ble.n	801493a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 80148b2:	fa0f f986 	sxth.w	r9, r6
 80148b6:	9902      	ldr	r1, [sp, #8]
 80148b8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80148bc:	fb0b 1909 	mla	r9, fp, r9, r1
 80148c0:	f814 b006 	ldrb.w	fp, [r4, r6]
 80148c4:	f819 900a 	ldrb.w	r9, [r9, sl]
 80148c8:	fb1b fb05 	smulbb	fp, fp, r5
 80148cc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80148d0:	eb0e 0a09 	add.w	sl, lr, r9
 80148d4:	f81e 9009 	ldrb.w	r9, [lr, r9]
 80148d8:	fb09 b908 	mla	r9, r9, r8, fp
 80148dc:	fa1f f989 	uxth.w	r9, r9
 80148e0:	f109 0b01 	add.w	fp, r9, #1
 80148e4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80148e8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80148ec:	f804 9006 	strb.w	r9, [r4, r6]
 80148f0:	4426      	add	r6, r4
 80148f2:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80148f6:	f896 b001 	ldrb.w	fp, [r6, #1]
 80148fa:	fb1b fb05 	smulbb	fp, fp, r5
 80148fe:	fb09 b908 	mla	r9, r9, r8, fp
 8014902:	fa1f f989 	uxth.w	r9, r9
 8014906:	f109 0b01 	add.w	fp, r9, #1
 801490a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801490e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014912:	f886 9001 	strb.w	r9, [r6, #1]
 8014916:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801491a:	f896 a002 	ldrb.w	sl, [r6, #2]
 801491e:	fb1a fa05 	smulbb	sl, sl, r5
 8014922:	fb09 a908 	mla	r9, r9, r8, sl
 8014926:	fa1f f989 	uxth.w	r9, r9
 801492a:	f109 0a01 	add.w	sl, r9, #1
 801492e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014932:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014936:	f886 9002 	strb.w	r9, [r6, #2]
 801493a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801493c:	3701      	adds	r7, #1
 801493e:	4408      	add	r0, r1
 8014940:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014942:	440a      	add	r2, r1
 8014944:	e761      	b.n	801480a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014946:	b005      	add	sp, #20
 8014948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801494c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801494c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014950:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014952:	4693      	mov	fp, r2
 8014954:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8014956:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801495a:	6868      	ldr	r0, [r5, #4]
 801495c:	6877      	ldr	r7, [r6, #4]
 801495e:	9100      	str	r1, [sp, #0]
 8014960:	3704      	adds	r7, #4
 8014962:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014966:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801496a:	fb00 2404 	mla	r4, r0, r4, r2
 801496e:	682a      	ldr	r2, [r5, #0]
 8014970:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014974:	4414      	add	r4, r2
 8014976:	6832      	ldr	r2, [r6, #0]
 8014978:	9201      	str	r2, [sp, #4]
 801497a:	9a00      	ldr	r2, [sp, #0]
 801497c:	2a00      	cmp	r2, #0
 801497e:	dc03      	bgt.n	8014988 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014980:	f1bb 0f00 	cmp.w	fp, #0
 8014984:	f340 80bc 	ble.w	8014b00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8014988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801498a:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801498e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014994:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8014998:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801499c:	2b00      	cmp	r3, #0
 801499e:	dd0c      	ble.n	80149ba <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80149a0:	1405      	asrs	r5, r0, #16
 80149a2:	d405      	bmi.n	80149b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80149a4:	4555      	cmp	r5, sl
 80149a6:	da03      	bge.n	80149b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80149a8:	1415      	asrs	r5, r2, #16
 80149aa:	d401      	bmi.n	80149b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80149ac:	454d      	cmp	r5, r9
 80149ae:	db05      	blt.n	80149bc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80149b0:	4440      	add	r0, r8
 80149b2:	4472      	add	r2, lr
 80149b4:	3b01      	subs	r3, #1
 80149b6:	3403      	adds	r4, #3
 80149b8:	e7f0      	b.n	801499c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80149ba:	d03f      	beq.n	8014a3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 80149bc:	1e5d      	subs	r5, r3, #1
 80149be:	fb08 0c05 	mla	ip, r8, r5, r0
 80149c2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 80149c6:	d42e      	bmi.n	8014a26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80149c8:	45d4      	cmp	ip, sl
 80149ca:	da2c      	bge.n	8014a26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80149cc:	fb0e 2505 	mla	r5, lr, r5, r2
 80149d0:	142d      	asrs	r5, r5, #16
 80149d2:	d428      	bmi.n	8014a26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80149d4:	454d      	cmp	r5, r9
 80149d6:	da26      	bge.n	8014a26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 80149d8:	1ce5      	adds	r5, r4, #3
 80149da:	469c      	mov	ip, r3
 80149dc:	f1bc 0f00 	cmp.w	ip, #0
 80149e0:	f105 0503 	add.w	r5, r5, #3
 80149e4:	dd25      	ble.n	8014a32 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 80149e6:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80149ea:	ea4f 4922 	mov.w	r9, r2, asr #16
 80149ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80149f2:	4472      	add	r2, lr
 80149f4:	468a      	mov	sl, r1
 80149f6:	9901      	ldr	r1, [sp, #4]
 80149f8:	fb0a 1909 	mla	r9, sl, r9, r1
 80149fc:	1401      	asrs	r1, r0, #16
 80149fe:	4440      	add	r0, r8
 8014a00:	f819 9001 	ldrb.w	r9, [r9, r1]
 8014a04:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014a08:	eb07 0a09 	add.w	sl, r7, r9
 8014a0c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8014a10:	f805 9c06 	strb.w	r9, [r5, #-6]
 8014a14:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014a18:	f805 9c05 	strb.w	r9, [r5, #-5]
 8014a1c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014a20:	f805 9c04 	strb.w	r9, [r5, #-4]
 8014a24:	e7da      	b.n	80149dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8014a26:	2500      	movs	r5, #0
 8014a28:	eba3 0c05 	sub.w	ip, r3, r5
 8014a2c:	f1bc 0f00 	cmp.w	ip, #0
 8014a30:	dc3b      	bgt.n	8014aaa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8014a32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014a3a:	441c      	add	r4, r3
 8014a3c:	9b00      	ldr	r3, [sp, #0]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	dd5e      	ble.n	8014b00 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8014a42:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014a46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a48:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014a4c:	eeb0 6a62 	vmov.f32	s12, s5
 8014a50:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014a54:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014a58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a5c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8014a60:	eeb0 6a43 	vmov.f32	s12, s6
 8014a64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014a68:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8014a6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014a70:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014a74:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014a78:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014a7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014a80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014a84:	ee12 2a90 	vmov	r2, s5
 8014a88:	eef0 2a47 	vmov.f32	s5, s14
 8014a8c:	fb92 f8f3 	sdiv	r8, r2, r3
 8014a90:	ee13 2a10 	vmov	r2, s6
 8014a94:	eeb0 3a67 	vmov.f32	s6, s15
 8014a98:	fb92 fef3 	sdiv	lr, r2, r3
 8014a9c:	9b00      	ldr	r3, [sp, #0]
 8014a9e:	3b01      	subs	r3, #1
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aa4:	bf08      	it	eq
 8014aa6:	465b      	moveq	r3, fp
 8014aa8:	e767      	b.n	801497a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8014aaa:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014aae:	d423      	bmi.n	8014af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014ab0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8014ab4:	45cc      	cmp	ip, r9
 8014ab6:	dd1f      	ble.n	8014af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014ab8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014abc:	d41c      	bmi.n	8014af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014abe:	68f1      	ldr	r1, [r6, #12]
 8014ac0:	4551      	cmp	r1, sl
 8014ac2:	dd19      	ble.n	8014af8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014ac4:	fa0f fc8c 	sxth.w	ip, ip
 8014ac8:	9901      	ldr	r1, [sp, #4]
 8014aca:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8014ace:	f81c c009 	ldrb.w	ip, [ip, r9]
 8014ad2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014ad6:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8014ada:	eb07 090c 	add.w	r9, r7, ip
 8014ade:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8014ae2:	f804 a00c 	strb.w	sl, [r4, ip]
 8014ae6:	44a4      	add	ip, r4
 8014ae8:	f899 a001 	ldrb.w	sl, [r9, #1]
 8014aec:	f88c a001 	strb.w	sl, [ip, #1]
 8014af0:	f899 9002 	ldrb.w	r9, [r9, #2]
 8014af4:	f88c 9002 	strb.w	r9, [ip, #2]
 8014af8:	4440      	add	r0, r8
 8014afa:	4472      	add	r2, lr
 8014afc:	3501      	adds	r5, #1
 8014afe:	e793      	b.n	8014a28 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8014b00:	b003      	add	sp, #12
 8014b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014b06 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014b06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014b10:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014b12:	9202      	str	r2, [sp, #8]
 8014b14:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8014b18:	6860      	ldr	r0, [r4, #4]
 8014b1a:	9203      	str	r2, [sp, #12]
 8014b1c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014b20:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014b24:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8014b28:	fb00 2505 	mla	r5, r0, r5, r2
 8014b2c:	6822      	ldr	r2, [r4, #0]
 8014b2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014b32:	4415      	add	r5, r2
 8014b34:	f8dc 2000 	ldr.w	r2, [ip]
 8014b38:	9200      	str	r2, [sp, #0]
 8014b3a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014b3e:	3204      	adds	r2, #4
 8014b40:	9201      	str	r2, [sp, #4]
 8014b42:	2900      	cmp	r1, #0
 8014b44:	dc03      	bgt.n	8014b4e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014b46:	9a02      	ldr	r2, [sp, #8]
 8014b48:	2a00      	cmp	r2, #0
 8014b4a:	f340 8127 	ble.w	8014d9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014b4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b50:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014b54:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014b58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014b5a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014b5e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	dd0d      	ble.n	8014b82 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8014b66:	1422      	asrs	r2, r4, #16
 8014b68:	d405      	bmi.n	8014b76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014b6a:	4542      	cmp	r2, r8
 8014b6c:	da03      	bge.n	8014b76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014b6e:	1402      	asrs	r2, r0, #16
 8014b70:	d401      	bmi.n	8014b76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014b72:	42ba      	cmp	r2, r7
 8014b74:	db06      	blt.n	8014b84 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014b76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b78:	4474      	add	r4, lr
 8014b7a:	3b01      	subs	r3, #1
 8014b7c:	3503      	adds	r5, #3
 8014b7e:	4410      	add	r0, r2
 8014b80:	e7ef      	b.n	8014b62 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014b82:	d075      	beq.n	8014c70 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8014b84:	1e5a      	subs	r2, r3, #1
 8014b86:	fb0e 4602 	mla	r6, lr, r2, r4
 8014b8a:	1436      	asrs	r6, r6, #16
 8014b8c:	d465      	bmi.n	8014c5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014b8e:	4546      	cmp	r6, r8
 8014b90:	da63      	bge.n	8014c5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014b92:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014b94:	fb06 0202 	mla	r2, r6, r2, r0
 8014b98:	1412      	asrs	r2, r2, #16
 8014b9a:	d45e      	bmi.n	8014c5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014b9c:	42ba      	cmp	r2, r7
 8014b9e:	da5c      	bge.n	8014c5a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014ba0:	1cef      	adds	r7, r5, #3
 8014ba2:	4699      	mov	r9, r3
 8014ba4:	f1b9 0f00 	cmp.w	r9, #0
 8014ba8:	dd5d      	ble.n	8014c66 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8014baa:	1402      	asrs	r2, r0, #16
 8014bac:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014bb0:	1426      	asrs	r6, r4, #16
 8014bb2:	4692      	mov	sl, r2
 8014bb4:	9a00      	ldr	r2, [sp, #0]
 8014bb6:	fb08 220a 	mla	r2, r8, sl, r2
 8014bba:	5d92      	ldrb	r2, [r2, r6]
 8014bbc:	9e01      	ldr	r6, [sp, #4]
 8014bbe:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014bc2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014bc6:	d041      	beq.n	8014c4c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014bc8:	9a03      	ldr	r2, [sp, #12]
 8014bca:	fa5f fb86 	uxtb.w	fp, r6
 8014bce:	fb02 f808 	mul.w	r8, r2, r8
 8014bd2:	f108 0201 	add.w	r2, r8, #1
 8014bd6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8014bda:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8014bde:	1212      	asrs	r2, r2, #8
 8014be0:	fa1f fa82 	uxth.w	sl, r2
 8014be4:	43d2      	mvns	r2, r2
 8014be6:	fb1b fb0a 	smulbb	fp, fp, sl
 8014bea:	b2d2      	uxtb	r2, r2
 8014bec:	fb08 b802 	mla	r8, r8, r2, fp
 8014bf0:	fa1f f888 	uxth.w	r8, r8
 8014bf4:	f108 0b01 	add.w	fp, r8, #1
 8014bf8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014bfc:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014c00:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014c04:	fb1b fb0a 	smulbb	fp, fp, sl
 8014c08:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014c0c:	fb16 fa0a 	smulbb	sl, r6, sl
 8014c10:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8014c14:	f807 8c03 	strb.w	r8, [r7, #-3]
 8014c18:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8014c1c:	fb06 aa02 	mla	sl, r6, r2, sl
 8014c20:	fb08 b802 	mla	r8, r8, r2, fp
 8014c24:	fa1f fa8a 	uxth.w	sl, sl
 8014c28:	fa1f f888 	uxth.w	r8, r8
 8014c2c:	f10a 0601 	add.w	r6, sl, #1
 8014c30:	f108 0b01 	add.w	fp, r8, #1
 8014c34:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8014c38:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014c3c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014c40:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014c44:	f807 ac01 	strb.w	sl, [r7, #-1]
 8014c48:	f807 8c02 	strb.w	r8, [r7, #-2]
 8014c4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c4e:	4474      	add	r4, lr
 8014c50:	3703      	adds	r7, #3
 8014c52:	f109 39ff 	add.w	r9, r9, #4294967295
 8014c56:	4410      	add	r0, r2
 8014c58:	e7a4      	b.n	8014ba4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8014c5a:	f04f 0800 	mov.w	r8, #0
 8014c5e:	eba3 0208 	sub.w	r2, r3, r8
 8014c62:	2a00      	cmp	r2, #0
 8014c64:	dc3b      	bgt.n	8014cde <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8014c66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014c6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014c6e:	441d      	add	r5, r3
 8014c70:	2900      	cmp	r1, #0
 8014c72:	f340 8093 	ble.w	8014d9c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014c76:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014c7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014c80:	3901      	subs	r1, #1
 8014c82:	eeb0 6a62 	vmov.f32	s12, s5
 8014c86:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014c8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014c8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014c92:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014c96:	eeb0 6a43 	vmov.f32	s12, s6
 8014c9a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014c9e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014ca2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014ca6:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014caa:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014cae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014cb2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014cb6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014cba:	ee12 2a90 	vmov	r2, s5
 8014cbe:	eef0 2a47 	vmov.f32	s5, s14
 8014cc2:	fb92 fef3 	sdiv	lr, r2, r3
 8014cc6:	ee13 2a10 	vmov	r2, s6
 8014cca:	eeb0 3a67 	vmov.f32	s6, s15
 8014cce:	fb92 f3f3 	sdiv	r3, r2, r3
 8014cd2:	9a02      	ldr	r2, [sp, #8]
 8014cd4:	9312      	str	r3, [sp, #72]	; 0x48
 8014cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014cd8:	bf08      	it	eq
 8014cda:	4613      	moveq	r3, r2
 8014cdc:	e731      	b.n	8014b42 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014cde:	1427      	asrs	r7, r4, #16
 8014ce0:	d456      	bmi.n	8014d90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014ce2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014ce6:	42be      	cmp	r6, r7
 8014ce8:	dd52      	ble.n	8014d90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014cea:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014cee:	d44f      	bmi.n	8014d90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014cf0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014cf4:	454a      	cmp	r2, r9
 8014cf6:	dd4b      	ble.n	8014d90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014cf8:	9a00      	ldr	r2, [sp, #0]
 8014cfa:	b236      	sxth	r6, r6
 8014cfc:	fb09 2606 	mla	r6, r9, r6, r2
 8014d00:	5df2      	ldrb	r2, [r6, r7]
 8014d02:	9e01      	ldr	r6, [sp, #4]
 8014d04:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8014d08:	0e3a      	lsrs	r2, r7, #24
 8014d0a:	d041      	beq.n	8014d90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014d0c:	9e03      	ldr	r6, [sp, #12]
 8014d0e:	fa5f fb87 	uxtb.w	fp, r7
 8014d12:	4372      	muls	r2, r6
 8014d14:	1c56      	adds	r6, r2, #1
 8014d16:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8014d1a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8014d1e:	1212      	asrs	r2, r2, #8
 8014d20:	f815 9006 	ldrb.w	r9, [r5, r6]
 8014d24:	fa1f fa82 	uxth.w	sl, r2
 8014d28:	43d2      	mvns	r2, r2
 8014d2a:	fb1b fb0a 	smulbb	fp, fp, sl
 8014d2e:	b2d2      	uxtb	r2, r2
 8014d30:	fb09 b902 	mla	r9, r9, r2, fp
 8014d34:	fa1f f989 	uxth.w	r9, r9
 8014d38:	f109 0b01 	add.w	fp, r9, #1
 8014d3c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014d40:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8014d44:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8014d48:	fb1b fb0a 	smulbb	fp, fp, sl
 8014d4c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d50:	fb17 fa0a 	smulbb	sl, r7, sl
 8014d54:	f805 9006 	strb.w	r9, [r5, r6]
 8014d58:	442e      	add	r6, r5
 8014d5a:	78b7      	ldrb	r7, [r6, #2]
 8014d5c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8014d60:	fb07 aa02 	mla	sl, r7, r2, sl
 8014d64:	fb09 b902 	mla	r9, r9, r2, fp
 8014d68:	fa1f fa8a 	uxth.w	sl, sl
 8014d6c:	fa1f f989 	uxth.w	r9, r9
 8014d70:	f10a 0701 	add.w	r7, sl, #1
 8014d74:	f109 0b01 	add.w	fp, r9, #1
 8014d78:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014d7c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014d80:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014d84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d88:	f886 a002 	strb.w	sl, [r6, #2]
 8014d8c:	f886 9001 	strb.w	r9, [r6, #1]
 8014d90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d92:	4474      	add	r4, lr
 8014d94:	f108 0801 	add.w	r8, r8, #1
 8014d98:	4410      	add	r0, r2
 8014d9a:	e760      	b.n	8014c5e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8014d9c:	b005      	add	sp, #20
 8014d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014da2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014da6:	b085      	sub	sp, #20
 8014da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014dac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014dae:	9203      	str	r2, [sp, #12]
 8014db0:	6868      	ldr	r0, [r5, #4]
 8014db2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014db6:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014dba:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014dbe:	fb00 2404 	mla	r4, r0, r4, r2
 8014dc2:	682a      	ldr	r2, [r5, #0]
 8014dc4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014dc8:	4414      	add	r4, r2
 8014dca:	f8dc 2000 	ldr.w	r2, [ip]
 8014dce:	9201      	str	r2, [sp, #4]
 8014dd0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014dd4:	3204      	adds	r2, #4
 8014dd6:	9202      	str	r2, [sp, #8]
 8014dd8:	2900      	cmp	r1, #0
 8014dda:	dc03      	bgt.n	8014de4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014ddc:	9a03      	ldr	r2, [sp, #12]
 8014dde:	2a00      	cmp	r2, #0
 8014de0:	f340 8137 	ble.w	8015052 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014de4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014de6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014dea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014dee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014df0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014df4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	dd0d      	ble.n	8014e18 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014dfc:	1405      	asrs	r5, r0, #16
 8014dfe:	d405      	bmi.n	8014e0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014e00:	4545      	cmp	r5, r8
 8014e02:	da03      	bge.n	8014e0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014e04:	1415      	asrs	r5, r2, #16
 8014e06:	d401      	bmi.n	8014e0c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014e08:	42bd      	cmp	r5, r7
 8014e0a:	db06      	blt.n	8014e1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014e0c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014e0e:	4470      	add	r0, lr
 8014e10:	3b01      	subs	r3, #1
 8014e12:	3403      	adds	r4, #3
 8014e14:	442a      	add	r2, r5
 8014e16:	e7ef      	b.n	8014df8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8014e18:	d070      	beq.n	8014efc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8014e1a:	1e5d      	subs	r5, r3, #1
 8014e1c:	fb0e 0605 	mla	r6, lr, r5, r0
 8014e20:	1436      	asrs	r6, r6, #16
 8014e22:	d462      	bmi.n	8014eea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014e24:	4546      	cmp	r6, r8
 8014e26:	da60      	bge.n	8014eea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014e28:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014e2a:	fb06 2505 	mla	r5, r6, r5, r2
 8014e2e:	142d      	asrs	r5, r5, #16
 8014e30:	d45b      	bmi.n	8014eea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014e32:	42bd      	cmp	r5, r7
 8014e34:	da59      	bge.n	8014eea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014e36:	1ce5      	adds	r5, r4, #3
 8014e38:	469a      	mov	sl, r3
 8014e3a:	f1ba 0f00 	cmp.w	sl, #0
 8014e3e:	dd58      	ble.n	8014ef2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8014e40:	1416      	asrs	r6, r2, #16
 8014e42:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014e46:	1407      	asrs	r7, r0, #16
 8014e48:	46b1      	mov	r9, r6
 8014e4a:	9e01      	ldr	r6, [sp, #4]
 8014e4c:	fb08 6609 	mla	r6, r8, r9, r6
 8014e50:	5df6      	ldrb	r6, [r6, r7]
 8014e52:	9f02      	ldr	r7, [sp, #8]
 8014e54:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8014e58:	0e37      	lsrs	r7, r6, #24
 8014e5a:	2fff      	cmp	r7, #255	; 0xff
 8014e5c:	f000 80f0 	beq.w	8015040 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8014e60:	fa5f f887 	uxtb.w	r8, r7
 8014e64:	b3d7      	cbz	r7, 8014edc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014e66:	fa1f f788 	uxth.w	r7, r8
 8014e6a:	ea6f 0808 	mvn.w	r8, r8
 8014e6e:	fa5f fb86 	uxtb.w	fp, r6
 8014e72:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8014e76:	fa5f f888 	uxtb.w	r8, r8
 8014e7a:	fb1b fb07 	smulbb	fp, fp, r7
 8014e7e:	fb09 b908 	mla	r9, r9, r8, fp
 8014e82:	fa1f f989 	uxth.w	r9, r9
 8014e86:	f109 0b01 	add.w	fp, r9, #1
 8014e8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014e8e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8014e92:	fb1b fb08 	smulbb	fp, fp, r8
 8014e96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014e9a:	f805 9c03 	strb.w	r9, [r5, #-3]
 8014e9e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8014ea2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014ea6:	fb09 b907 	mla	r9, r9, r7, fp
 8014eaa:	fa1f f989 	uxth.w	r9, r9
 8014eae:	f109 0b01 	add.w	fp, r9, #1
 8014eb2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014eb6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014eba:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014ebe:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014ec2:	fb19 f808 	smulbb	r8, r9, r8
 8014ec6:	fb06 8607 	mla	r6, r6, r7, r8
 8014eca:	b2b6      	uxth	r6, r6
 8014ecc:	f106 0801 	add.w	r8, r6, #1
 8014ed0:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8014ed4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014ed8:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014edc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014ede:	4470      	add	r0, lr
 8014ee0:	3503      	adds	r5, #3
 8014ee2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ee6:	4432      	add	r2, r6
 8014ee8:	e7a7      	b.n	8014e3a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014eea:	2600      	movs	r6, #0
 8014eec:	1b9d      	subs	r5, r3, r6
 8014eee:	2d00      	cmp	r5, #0
 8014ef0:	dc3b      	bgt.n	8014f6a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014ef2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ef6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014efa:	441c      	add	r4, r3
 8014efc:	2900      	cmp	r1, #0
 8014efe:	f340 80a8 	ble.w	8015052 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014f02:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f08:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014f0c:	3901      	subs	r1, #1
 8014f0e:	eeb0 6a62 	vmov.f32	s12, s5
 8014f12:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014f16:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014f1a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f1e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014f22:	eeb0 6a43 	vmov.f32	s12, s6
 8014f26:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014f2a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014f2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014f32:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014f36:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014f3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014f3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014f42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014f46:	ee12 2a90 	vmov	r2, s5
 8014f4a:	eef0 2a47 	vmov.f32	s5, s14
 8014f4e:	fb92 fef3 	sdiv	lr, r2, r3
 8014f52:	ee13 2a10 	vmov	r2, s6
 8014f56:	eeb0 3a67 	vmov.f32	s6, s15
 8014f5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8014f5e:	9a03      	ldr	r2, [sp, #12]
 8014f60:	9312      	str	r3, [sp, #72]	; 0x48
 8014f62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f64:	bf08      	it	eq
 8014f66:	4613      	moveq	r3, r2
 8014f68:	e736      	b.n	8014dd8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014f6a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014f6e:	d457      	bmi.n	8015020 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014f70:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8014f74:	4547      	cmp	r7, r8
 8014f76:	dd53      	ble.n	8015020 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014f78:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014f7c:	d450      	bmi.n	8015020 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014f7e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8014f82:	454d      	cmp	r5, r9
 8014f84:	dd4c      	ble.n	8015020 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014f86:	9d01      	ldr	r5, [sp, #4]
 8014f88:	b23f      	sxth	r7, r7
 8014f8a:	fb09 5707 	mla	r7, r9, r7, r5
 8014f8e:	f817 5008 	ldrb.w	r5, [r7, r8]
 8014f92:	9f02      	ldr	r7, [sp, #8]
 8014f94:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8014f98:	0e2f      	lsrs	r7, r5, #24
 8014f9a:	2fff      	cmp	r7, #255	; 0xff
 8014f9c:	d045      	beq.n	801502a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014f9e:	fa5f f987 	uxtb.w	r9, r7
 8014fa2:	b3ef      	cbz	r7, 8015020 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014fa4:	fa1f f889 	uxth.w	r8, r9
 8014fa8:	ea6f 0909 	mvn.w	r9, r9
 8014fac:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014fb0:	fa5f fb85 	uxtb.w	fp, r5
 8014fb4:	f814 a007 	ldrb.w	sl, [r4, r7]
 8014fb8:	fa5f f989 	uxtb.w	r9, r9
 8014fbc:	fb1b fb08 	smulbb	fp, fp, r8
 8014fc0:	fb0a ba09 	mla	sl, sl, r9, fp
 8014fc4:	fa1f fa8a 	uxth.w	sl, sl
 8014fc8:	f10a 0b01 	add.w	fp, sl, #1
 8014fcc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014fd0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014fd4:	f804 a007 	strb.w	sl, [r4, r7]
 8014fd8:	4427      	add	r7, r4
 8014fda:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014fde:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014fe2:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014fe6:	fb1b fb09 	smulbb	fp, fp, r9
 8014fea:	fb0a ba08 	mla	sl, sl, r8, fp
 8014fee:	fa1f fa8a 	uxth.w	sl, sl
 8014ff2:	f10a 0b01 	add.w	fp, sl, #1
 8014ff6:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014ffa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014ffe:	f887 a001 	strb.w	sl, [r7, #1]
 8015002:	f897 a002 	ldrb.w	sl, [r7, #2]
 8015006:	fb1a f909 	smulbb	r9, sl, r9
 801500a:	fb05 9508 	mla	r5, r5, r8, r9
 801500e:	b2ad      	uxth	r5, r5
 8015010:	f105 0901 	add.w	r9, r5, #1
 8015014:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8015018:	ea4f 2929 	mov.w	r9, r9, asr #8
 801501c:	f887 9002 	strb.w	r9, [r7, #2]
 8015020:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015022:	4470      	add	r0, lr
 8015024:	3601      	adds	r6, #1
 8015026:	442a      	add	r2, r5
 8015028:	e760      	b.n	8014eec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801502a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801502e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8015032:	55e5      	strb	r5, [r4, r7]
 8015034:	4427      	add	r7, r4
 8015036:	0c2d      	lsrs	r5, r5, #16
 8015038:	f887 8001 	strb.w	r8, [r7, #1]
 801503c:	70bd      	strb	r5, [r7, #2]
 801503e:	e7ef      	b.n	8015020 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8015040:	0a37      	lsrs	r7, r6, #8
 8015042:	f805 6c03 	strb.w	r6, [r5, #-3]
 8015046:	0c36      	lsrs	r6, r6, #16
 8015048:	f805 7c02 	strb.w	r7, [r5, #-2]
 801504c:	f805 6c01 	strb.w	r6, [r5, #-1]
 8015050:	e744      	b.n	8014edc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015052:	b005      	add	sp, #20
 8015054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015058 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801505c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801505e:	9201      	str	r2, [sp, #4]
 8015060:	6870      	ldr	r0, [r6, #4]
 8015062:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8015066:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801506a:	fa1f fe85 	uxth.w	lr, r5
 801506e:	43ed      	mvns	r5, r5
 8015070:	f8dc 8000 	ldr.w	r8, [ip]
 8015074:	b2ed      	uxtb	r5, r5
 8015076:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801507a:	fb00 2404 	mla	r4, r0, r4, r2
 801507e:	6832      	ldr	r2, [r6, #0]
 8015080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015084:	4414      	add	r4, r2
 8015086:	2900      	cmp	r1, #0
 8015088:	dc03      	bgt.n	8015092 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801508a:	9a01      	ldr	r2, [sp, #4]
 801508c:	2a00      	cmp	r2, #0
 801508e:	f340 810d 	ble.w	80152ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8015092:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015094:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015098:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801509c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801509e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80150a2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	dd0e      	ble.n	80150c8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80150aa:	1406      	asrs	r6, r0, #16
 80150ac:	d405      	bmi.n	80150ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80150ae:	4556      	cmp	r6, sl
 80150b0:	da03      	bge.n	80150ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80150b2:	1416      	asrs	r6, r2, #16
 80150b4:	d401      	bmi.n	80150ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80150b6:	454e      	cmp	r6, r9
 80150b8:	db07      	blt.n	80150ca <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80150ba:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80150bc:	3b01      	subs	r3, #1
 80150be:	3403      	adds	r4, #3
 80150c0:	4430      	add	r0, r6
 80150c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80150c4:	4432      	add	r2, r6
 80150c6:	e7ee      	b.n	80150a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80150c8:	d060      	beq.n	801518c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80150ca:	1e5e      	subs	r6, r3, #1
 80150cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80150ce:	fb07 0706 	mla	r7, r7, r6, r0
 80150d2:	143f      	asrs	r7, r7, #16
 80150d4:	d451      	bmi.n	801517a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80150d6:	4557      	cmp	r7, sl
 80150d8:	da4f      	bge.n	801517a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80150da:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80150dc:	fb07 2606 	mla	r6, r7, r6, r2
 80150e0:	1436      	asrs	r6, r6, #16
 80150e2:	d44a      	bmi.n	801517a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80150e4:	454e      	cmp	r6, r9
 80150e6:	da48      	bge.n	801517a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80150e8:	1ce6      	adds	r6, r4, #3
 80150ea:	4699      	mov	r9, r3
 80150ec:	f1b9 0f00 	cmp.w	r9, #0
 80150f0:	f106 0603 	add.w	r6, r6, #3
 80150f4:	dd45      	ble.n	8015182 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80150f6:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80150fa:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80150fe:	1417      	asrs	r7, r2, #16
 8015100:	f109 39ff 	add.w	r9, r9, #4294967295
 8015104:	fb0b a707 	mla	r7, fp, r7, sl
 8015108:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801510c:	fb1b fb05 	smulbb	fp, fp, r5
 8015110:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015114:	eb08 0a07 	add.w	sl, r8, r7
 8015118:	f818 7007 	ldrb.w	r7, [r8, r7]
 801511c:	fb07 b70e 	mla	r7, r7, lr, fp
 8015120:	b2bf      	uxth	r7, r7
 8015122:	f107 0b01 	add.w	fp, r7, #1
 8015126:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801512a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801512e:	fb1b fb05 	smulbb	fp, fp, r5
 8015132:	123f      	asrs	r7, r7, #8
 8015134:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015138:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801513c:	fb07 b70e 	mla	r7, r7, lr, fp
 8015140:	b2bf      	uxth	r7, r7
 8015142:	f107 0b01 	add.w	fp, r7, #1
 8015146:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801514a:	123f      	asrs	r7, r7, #8
 801514c:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015150:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015154:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015158:	fb1a fa05 	smulbb	sl, sl, r5
 801515c:	fb07 a70e 	mla	r7, r7, lr, sl
 8015160:	b2bf      	uxth	r7, r7
 8015162:	f107 0a01 	add.w	sl, r7, #1
 8015166:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801516a:	123f      	asrs	r7, r7, #8
 801516c:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015170:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8015172:	4438      	add	r0, r7
 8015174:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015176:	443a      	add	r2, r7
 8015178:	e7b8      	b.n	80150ec <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801517a:	2700      	movs	r7, #0
 801517c:	1bde      	subs	r6, r3, r7
 801517e:	2e00      	cmp	r6, #0
 8015180:	dc3f      	bgt.n	8015202 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8015182:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015186:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801518a:	441c      	add	r4, r3
 801518c:	2900      	cmp	r1, #0
 801518e:	f340 808d 	ble.w	80152ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8015192:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015196:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015198:	ee30 0a04 	vadd.f32	s0, s0, s8
 801519c:	3901      	subs	r1, #1
 801519e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80151a2:	eef0 6a62 	vmov.f32	s13, s5
 80151a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80151aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80151ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80151b2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80151b6:	eef0 6a43 	vmov.f32	s13, s6
 80151ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80151be:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80151c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80151c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80151ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80151ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80151d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80151d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80151da:	ee12 2a90 	vmov	r2, s5
 80151de:	eef0 2a47 	vmov.f32	s5, s14
 80151e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80151e6:	ee13 2a10 	vmov	r2, s6
 80151ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80151ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151ee:	eeb0 3a67 	vmov.f32	s6, s15
 80151f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80151f6:	9a01      	ldr	r2, [sp, #4]
 80151f8:	9310      	str	r3, [sp, #64]	; 0x40
 80151fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80151fc:	bf08      	it	eq
 80151fe:	4613      	moveq	r3, r2
 8015200:	e741      	b.n	8015086 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015202:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015206:	d44b      	bmi.n	80152a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015208:	f8dc b008 	ldr.w	fp, [ip, #8]
 801520c:	45cb      	cmp	fp, r9
 801520e:	dd47      	ble.n	80152a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015210:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015214:	d444      	bmi.n	80152a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8015216:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801521a:	4556      	cmp	r6, sl
 801521c:	dd40      	ble.n	80152a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801521e:	fa0f f68b 	sxth.w	r6, fp
 8015222:	fb0a 9906 	mla	r9, sl, r6, r9
 8015226:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801522a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801522e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015232:	fb1b fb05 	smulbb	fp, fp, r5
 8015236:	eb08 0a09 	add.w	sl, r8, r9
 801523a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801523e:	fb09 b90e 	mla	r9, r9, lr, fp
 8015242:	fa1f f989 	uxth.w	r9, r9
 8015246:	f109 0b01 	add.w	fp, r9, #1
 801524a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801524e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015252:	f804 9006 	strb.w	r9, [r4, r6]
 8015256:	4426      	add	r6, r4
 8015258:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801525c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015260:	fb1b fb05 	smulbb	fp, fp, r5
 8015264:	fb09 b90e 	mla	r9, r9, lr, fp
 8015268:	fa1f f989 	uxth.w	r9, r9
 801526c:	f109 0b01 	add.w	fp, r9, #1
 8015270:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015274:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015278:	f886 9001 	strb.w	r9, [r6, #1]
 801527c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015280:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015284:	fb1a fa05 	smulbb	sl, sl, r5
 8015288:	fb09 a90e 	mla	r9, r9, lr, sl
 801528c:	fa1f f989 	uxth.w	r9, r9
 8015290:	f109 0a01 	add.w	sl, r9, #1
 8015294:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015298:	ea4f 2929 	mov.w	r9, r9, asr #8
 801529c:	f886 9002 	strb.w	r9, [r6, #2]
 80152a0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80152a2:	3701      	adds	r7, #1
 80152a4:	4430      	add	r0, r6
 80152a6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80152a8:	4432      	add	r2, r6
 80152aa:	e767      	b.n	801517c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80152ac:	b003      	add	sp, #12
 80152ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152b2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80152b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152b6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80152b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80152bc:	9201      	str	r2, [sp, #4]
 80152be:	6868      	ldr	r0, [r5, #4]
 80152c0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80152c2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80152c6:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80152ca:	fb00 2404 	mla	r4, r0, r4, r2
 80152ce:	682a      	ldr	r2, [r5, #0]
 80152d0:	f8d7 8000 	ldr.w	r8, [r7]
 80152d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80152d8:	4414      	add	r4, r2
 80152da:	2900      	cmp	r1, #0
 80152dc:	dc03      	bgt.n	80152e6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80152de:	9a01      	ldr	r2, [sp, #4]
 80152e0:	2a00      	cmp	r2, #0
 80152e2:	f340 80af 	ble.w	8015444 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80152e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152e8:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80152ec:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80152f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80152f2:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80152f6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	dd0c      	ble.n	8015318 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80152fe:	1405      	asrs	r5, r0, #16
 8015300:	d405      	bmi.n	801530e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015302:	4555      	cmp	r5, sl
 8015304:	da03      	bge.n	801530e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015306:	1415      	asrs	r5, r2, #16
 8015308:	d401      	bmi.n	801530e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801530a:	454d      	cmp	r5, r9
 801530c:	db05      	blt.n	801531a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801530e:	4470      	add	r0, lr
 8015310:	4462      	add	r2, ip
 8015312:	3b01      	subs	r3, #1
 8015314:	3403      	adds	r4, #3
 8015316:	e7f0      	b.n	80152fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015318:	d038      	beq.n	801538c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801531a:	1e5d      	subs	r5, r3, #1
 801531c:	fb0e 0605 	mla	r6, lr, r5, r0
 8015320:	1436      	asrs	r6, r6, #16
 8015322:	d42a      	bmi.n	801537a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015324:	4556      	cmp	r6, sl
 8015326:	da28      	bge.n	801537a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015328:	fb0c 2505 	mla	r5, ip, r5, r2
 801532c:	142d      	asrs	r5, r5, #16
 801532e:	d424      	bmi.n	801537a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015330:	454d      	cmp	r5, r9
 8015332:	da22      	bge.n	801537a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8015334:	1ce6      	adds	r6, r4, #3
 8015336:	4699      	mov	r9, r3
 8015338:	f1b9 0f00 	cmp.w	r9, #0
 801533c:	f106 0603 	add.w	r6, r6, #3
 8015340:	dd1f      	ble.n	8015382 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8015342:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8015346:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801534a:	1415      	asrs	r5, r2, #16
 801534c:	4470      	add	r0, lr
 801534e:	4462      	add	r2, ip
 8015350:	f109 39ff 	add.w	r9, r9, #4294967295
 8015354:	fb0b a505 	mla	r5, fp, r5, sl
 8015358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801535c:	eb08 0a05 	add.w	sl, r8, r5
 8015360:	f818 5005 	ldrb.w	r5, [r8, r5]
 8015364:	f806 5c06 	strb.w	r5, [r6, #-6]
 8015368:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801536c:	f806 5c05 	strb.w	r5, [r6, #-5]
 8015370:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8015374:	f806 5c04 	strb.w	r5, [r6, #-4]
 8015378:	e7de      	b.n	8015338 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801537a:	2600      	movs	r6, #0
 801537c:	1b9d      	subs	r5, r3, r6
 801537e:	2d00      	cmp	r5, #0
 8015380:	dc38      	bgt.n	80153f4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015386:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801538a:	441c      	add	r4, r3
 801538c:	2900      	cmp	r1, #0
 801538e:	dd59      	ble.n	8015444 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8015390:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015396:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801539a:	3901      	subs	r1, #1
 801539c:	eeb0 6a62 	vmov.f32	s12, s5
 80153a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80153a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80153a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80153ac:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80153b0:	eeb0 6a43 	vmov.f32	s12, s6
 80153b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80153b8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80153bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80153c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80153c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80153c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80153cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80153d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80153d4:	ee12 2a90 	vmov	r2, s5
 80153d8:	eef0 2a47 	vmov.f32	s5, s14
 80153dc:	fb92 fef3 	sdiv	lr, r2, r3
 80153e0:	ee13 2a10 	vmov	r2, s6
 80153e4:	eeb0 3a67 	vmov.f32	s6, s15
 80153e8:	fb92 fcf3 	sdiv	ip, r2, r3
 80153ec:	9a01      	ldr	r2, [sp, #4]
 80153ee:	bf08      	it	eq
 80153f0:	4613      	moveq	r3, r2
 80153f2:	e772      	b.n	80152da <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80153f4:	ea5f 4920 	movs.w	r9, r0, asr #16
 80153f8:	d420      	bmi.n	801543c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80153fa:	f8d7 b008 	ldr.w	fp, [r7, #8]
 80153fe:	45cb      	cmp	fp, r9
 8015400:	dd1c      	ble.n	801543c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015402:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015406:	d419      	bmi.n	801543c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015408:	68fd      	ldr	r5, [r7, #12]
 801540a:	4555      	cmp	r5, sl
 801540c:	dd16      	ble.n	801543c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801540e:	fa0f f58b 	sxth.w	r5, fp
 8015412:	fb0a 9505 	mla	r5, sl, r5, r9
 8015416:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801541a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801541e:	eb08 0b05 	add.w	fp, r8, r5
 8015422:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8015426:	f804 9005 	strb.w	r9, [r4, r5]
 801542a:	4425      	add	r5, r4
 801542c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8015430:	f885 9001 	strb.w	r9, [r5, #1]
 8015434:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8015438:	f885 9002 	strb.w	r9, [r5, #2]
 801543c:	4470      	add	r0, lr
 801543e:	4462      	add	r2, ip
 8015440:	3601      	adds	r6, #1
 8015442:	e79b      	b.n	801537c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8015444:	b003      	add	sp, #12
 8015446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801544a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801544a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801544e:	b085      	sub	sp, #20
 8015450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015454:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015456:	9202      	str	r2, [sp, #8]
 8015458:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801545c:	6860      	ldr	r0, [r4, #4]
 801545e:	9203      	str	r2, [sp, #12]
 8015460:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015464:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8015468:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801546c:	fb00 2505 	mla	r5, r0, r5, r2
 8015470:	6822      	ldr	r2, [r4, #0]
 8015472:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015476:	4415      	add	r5, r2
 8015478:	f8dc 2000 	ldr.w	r2, [ip]
 801547c:	9201      	str	r2, [sp, #4]
 801547e:	2900      	cmp	r1, #0
 8015480:	dc03      	bgt.n	801548a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8015482:	9a02      	ldr	r2, [sp, #8]
 8015484:	2a00      	cmp	r2, #0
 8015486:	f340 8122 	ble.w	80156ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801548a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801548c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015490:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015496:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801549a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801549e:	2b00      	cmp	r3, #0
 80154a0:	dd0d      	ble.n	80154be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80154a2:	1422      	asrs	r2, r4, #16
 80154a4:	d405      	bmi.n	80154b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80154a6:	4542      	cmp	r2, r8
 80154a8:	da03      	bge.n	80154b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80154aa:	1402      	asrs	r2, r0, #16
 80154ac:	d401      	bmi.n	80154b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80154ae:	42ba      	cmp	r2, r7
 80154b0:	db06      	blt.n	80154c0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80154b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154b4:	4474      	add	r4, lr
 80154b6:	3b01      	subs	r3, #1
 80154b8:	3503      	adds	r5, #3
 80154ba:	4410      	add	r0, r2
 80154bc:	e7ef      	b.n	801549e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80154be:	d072      	beq.n	80155a6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80154c0:	1e5a      	subs	r2, r3, #1
 80154c2:	fb0e 4602 	mla	r6, lr, r2, r4
 80154c6:	1436      	asrs	r6, r6, #16
 80154c8:	d462      	bmi.n	8015590 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80154ca:	4546      	cmp	r6, r8
 80154cc:	da60      	bge.n	8015590 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80154ce:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80154d0:	fb06 0202 	mla	r2, r6, r2, r0
 80154d4:	1412      	asrs	r2, r2, #16
 80154d6:	d45b      	bmi.n	8015590 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80154d8:	42ba      	cmp	r2, r7
 80154da:	da59      	bge.n	8015590 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80154dc:	1cef      	adds	r7, r5, #3
 80154de:	4699      	mov	r9, r3
 80154e0:	f1b9 0f00 	cmp.w	r9, #0
 80154e4:	dd5a      	ble.n	801559c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80154e6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80154ea:	1426      	asrs	r6, r4, #16
 80154ec:	1402      	asrs	r2, r0, #16
 80154ee:	fb08 6202 	mla	r2, r8, r2, r6
 80154f2:	9e01      	ldr	r6, [sp, #4]
 80154f4:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80154f8:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80154fc:	d041      	beq.n	8015582 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80154fe:	9a03      	ldr	r2, [sp, #12]
 8015500:	fa5f fb86 	uxtb.w	fp, r6
 8015504:	fb02 f808 	mul.w	r8, r2, r8
 8015508:	f108 0201 	add.w	r2, r8, #1
 801550c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015510:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8015514:	1212      	asrs	r2, r2, #8
 8015516:	fa1f fa82 	uxth.w	sl, r2
 801551a:	43d2      	mvns	r2, r2
 801551c:	fb1b fb0a 	smulbb	fp, fp, sl
 8015520:	b2d2      	uxtb	r2, r2
 8015522:	fb08 b802 	mla	r8, r8, r2, fp
 8015526:	fa1f f888 	uxth.w	r8, r8
 801552a:	f108 0b01 	add.w	fp, r8, #1
 801552e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015532:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015536:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801553a:	fb1b fb0a 	smulbb	fp, fp, sl
 801553e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015542:	fb16 fa0a 	smulbb	sl, r6, sl
 8015546:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801554a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801554e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8015552:	fb06 aa02 	mla	sl, r6, r2, sl
 8015556:	fb08 b802 	mla	r8, r8, r2, fp
 801555a:	fa1f fa8a 	uxth.w	sl, sl
 801555e:	fa1f f888 	uxth.w	r8, r8
 8015562:	f10a 0601 	add.w	r6, sl, #1
 8015566:	f108 0b01 	add.w	fp, r8, #1
 801556a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801556e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015572:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015576:	ea4f 2828 	mov.w	r8, r8, asr #8
 801557a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801557e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8015582:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015584:	4474      	add	r4, lr
 8015586:	3703      	adds	r7, #3
 8015588:	f109 39ff 	add.w	r9, r9, #4294967295
 801558c:	4410      	add	r0, r2
 801558e:	e7a7      	b.n	80154e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015590:	f04f 0800 	mov.w	r8, #0
 8015594:	eba3 0208 	sub.w	r2, r3, r8
 8015598:	2a00      	cmp	r2, #0
 801559a:	dc3b      	bgt.n	8015614 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801559c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80155a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80155a4:	441d      	add	r5, r3
 80155a6:	2900      	cmp	r1, #0
 80155a8:	f340 8091 	ble.w	80156ce <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80155ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80155b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80155b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80155b6:	3901      	subs	r1, #1
 80155b8:	eeb0 6a62 	vmov.f32	s12, s5
 80155bc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80155c0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80155c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80155c8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80155cc:	eeb0 6a43 	vmov.f32	s12, s6
 80155d0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80155d4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80155d8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80155dc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80155e0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80155e4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80155e8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80155ec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80155f0:	ee12 2a90 	vmov	r2, s5
 80155f4:	eef0 2a47 	vmov.f32	s5, s14
 80155f8:	fb92 fef3 	sdiv	lr, r2, r3
 80155fc:	ee13 2a10 	vmov	r2, s6
 8015600:	eeb0 3a67 	vmov.f32	s6, s15
 8015604:	fb92 f3f3 	sdiv	r3, r2, r3
 8015608:	9a02      	ldr	r2, [sp, #8]
 801560a:	9312      	str	r3, [sp, #72]	; 0x48
 801560c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801560e:	bf08      	it	eq
 8015610:	4613      	moveq	r3, r2
 8015612:	e734      	b.n	801547e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8015614:	1427      	asrs	r7, r4, #16
 8015616:	d454      	bmi.n	80156c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015618:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801561c:	42be      	cmp	r6, r7
 801561e:	dd50      	ble.n	80156c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015620:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015624:	d44d      	bmi.n	80156c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8015626:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801562a:	454a      	cmp	r2, r9
 801562c:	dd49      	ble.n	80156c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801562e:	b236      	sxth	r6, r6
 8015630:	9a01      	ldr	r2, [sp, #4]
 8015632:	fb09 7606 	mla	r6, r9, r6, r7
 8015636:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801563a:	0e3a      	lsrs	r2, r7, #24
 801563c:	d041      	beq.n	80156c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801563e:	9e03      	ldr	r6, [sp, #12]
 8015640:	fa5f fb87 	uxtb.w	fp, r7
 8015644:	4372      	muls	r2, r6
 8015646:	1c56      	adds	r6, r2, #1
 8015648:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801564c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8015650:	1212      	asrs	r2, r2, #8
 8015652:	f815 9006 	ldrb.w	r9, [r5, r6]
 8015656:	fa1f fa82 	uxth.w	sl, r2
 801565a:	43d2      	mvns	r2, r2
 801565c:	fb1b fb0a 	smulbb	fp, fp, sl
 8015660:	b2d2      	uxtb	r2, r2
 8015662:	fb09 b902 	mla	r9, r9, r2, fp
 8015666:	fa1f f989 	uxth.w	r9, r9
 801566a:	f109 0b01 	add.w	fp, r9, #1
 801566e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015672:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015676:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801567a:	fb1b fb0a 	smulbb	fp, fp, sl
 801567e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015682:	fb17 fa0a 	smulbb	sl, r7, sl
 8015686:	f805 9006 	strb.w	r9, [r5, r6]
 801568a:	442e      	add	r6, r5
 801568c:	78b7      	ldrb	r7, [r6, #2]
 801568e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015692:	fb07 aa02 	mla	sl, r7, r2, sl
 8015696:	fb09 b902 	mla	r9, r9, r2, fp
 801569a:	fa1f fa8a 	uxth.w	sl, sl
 801569e:	fa1f f989 	uxth.w	r9, r9
 80156a2:	f10a 0701 	add.w	r7, sl, #1
 80156a6:	f109 0b01 	add.w	fp, r9, #1
 80156aa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80156ae:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80156b2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80156b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80156ba:	f886 a002 	strb.w	sl, [r6, #2]
 80156be:	f886 9001 	strb.w	r9, [r6, #1]
 80156c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156c4:	4474      	add	r4, lr
 80156c6:	f108 0801 	add.w	r8, r8, #1
 80156ca:	4410      	add	r0, r2
 80156cc:	e762      	b.n	8015594 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80156ce:	b005      	add	sp, #20
 80156d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080156d4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80156d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156d8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80156da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80156de:	9201      	str	r2, [sp, #4]
 80156e0:	6860      	ldr	r0, [r4, #4]
 80156e2:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 80156e6:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 80156ea:	fb00 2505 	mla	r5, r0, r5, r2
 80156ee:	6822      	ldr	r2, [r4, #0]
 80156f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80156f4:	4415      	add	r5, r2
 80156f6:	f8dc 2000 	ldr.w	r2, [ip]
 80156fa:	9200      	str	r2, [sp, #0]
 80156fc:	2900      	cmp	r1, #0
 80156fe:	dc03      	bgt.n	8015708 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8015700:	9a01      	ldr	r2, [sp, #4]
 8015702:	2a00      	cmp	r2, #0
 8015704:	f340 812b 	ble.w	801595e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015708:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801570a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801570e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015714:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015718:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801571c:	2b00      	cmp	r3, #0
 801571e:	dd0e      	ble.n	801573e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8015720:	1422      	asrs	r2, r4, #16
 8015722:	d405      	bmi.n	8015730 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015724:	4572      	cmp	r2, lr
 8015726:	da03      	bge.n	8015730 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015728:	1402      	asrs	r2, r0, #16
 801572a:	d401      	bmi.n	8015730 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801572c:	42ba      	cmp	r2, r7
 801572e:	db07      	blt.n	8015740 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8015730:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015732:	3b01      	subs	r3, #1
 8015734:	3503      	adds	r5, #3
 8015736:	4414      	add	r4, r2
 8015738:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801573a:	4410      	add	r0, r2
 801573c:	e7ee      	b.n	801571c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801573e:	d06f      	beq.n	8015820 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8015740:	1e5a      	subs	r2, r3, #1
 8015742:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8015744:	fb06 4602 	mla	r6, r6, r2, r4
 8015748:	1436      	asrs	r6, r6, #16
 801574a:	d45e      	bmi.n	801580a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801574c:	4576      	cmp	r6, lr
 801574e:	da5c      	bge.n	801580a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8015750:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015752:	fb06 0202 	mla	r2, r6, r2, r0
 8015756:	1412      	asrs	r2, r2, #16
 8015758:	d457      	bmi.n	801580a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801575a:	42ba      	cmp	r2, r7
 801575c:	da55      	bge.n	801580a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801575e:	1cee      	adds	r6, r5, #3
 8015760:	469a      	mov	sl, r3
 8015762:	f1ba 0f00 	cmp.w	sl, #0
 8015766:	dd56      	ble.n	8015816 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015768:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801576c:	1427      	asrs	r7, r4, #16
 801576e:	1402      	asrs	r2, r0, #16
 8015770:	fb0e 7202 	mla	r2, lr, r2, r7
 8015774:	9f00      	ldr	r7, [sp, #0]
 8015776:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801577a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801577e:	d03c      	beq.n	80157fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8015780:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015784:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015788:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801578c:	fa5f f28e 	uxtb.w	r2, lr
 8015790:	b2ff      	uxtb	r7, r7
 8015792:	f000 80dd 	beq.w	8015950 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8015796:	fa1f f882 	uxth.w	r8, r2
 801579a:	43d2      	mvns	r2, r2
 801579c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80157a0:	fb17 f708 	smulbb	r7, r7, r8
 80157a4:	b2d2      	uxtb	r2, r2
 80157a6:	fb19 f908 	smulbb	r9, r9, r8
 80157aa:	fb0e 7702 	mla	r7, lr, r2, r7
 80157ae:	fb1b f808 	smulbb	r8, fp, r8
 80157b2:	b2bf      	uxth	r7, r7
 80157b4:	f107 0e01 	add.w	lr, r7, #1
 80157b8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80157bc:	123f      	asrs	r7, r7, #8
 80157be:	f806 7c03 	strb.w	r7, [r6, #-3]
 80157c2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80157c6:	fb07 9902 	mla	r9, r7, r2, r9
 80157ca:	fa1f f989 	uxth.w	r9, r9
 80157ce:	f109 0701 	add.w	r7, r9, #1
 80157d2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80157d6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 80157da:	fb07 8802 	mla	r8, r7, r2, r8
 80157de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80157e2:	fa1f f888 	uxth.w	r8, r8
 80157e6:	f806 9c02 	strb.w	r9, [r6, #-2]
 80157ea:	f108 0201 	add.w	r2, r8, #1
 80157ee:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80157f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80157f6:	f806 8c01 	strb.w	r8, [r6, #-1]
 80157fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80157fc:	3603      	adds	r6, #3
 80157fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015802:	4414      	add	r4, r2
 8015804:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015806:	4410      	add	r0, r2
 8015808:	e7ab      	b.n	8015762 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801580a:	f04f 0e00 	mov.w	lr, #0
 801580e:	eba3 020e 	sub.w	r2, r3, lr
 8015812:	2a00      	cmp	r2, #0
 8015814:	dc3d      	bgt.n	8015892 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8015816:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801581a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801581e:	441d      	add	r5, r3
 8015820:	2900      	cmp	r1, #0
 8015822:	f340 809c 	ble.w	801595e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015826:	ee30 0a04 	vadd.f32	s0, s0, s8
 801582a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801582c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015830:	3901      	subs	r1, #1
 8015832:	eeb0 6a62 	vmov.f32	s12, s5
 8015836:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801583a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801583e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015842:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015846:	eeb0 6a43 	vmov.f32	s12, s6
 801584a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801584e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015852:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015856:	ee61 7a27 	vmul.f32	s15, s2, s15
 801585a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801585e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015862:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015866:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801586a:	ee12 2a90 	vmov	r2, s5
 801586e:	eef0 2a47 	vmov.f32	s5, s14
 8015872:	fb92 f3f3 	sdiv	r3, r2, r3
 8015876:	ee13 2a10 	vmov	r2, s6
 801587a:	930f      	str	r3, [sp, #60]	; 0x3c
 801587c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801587e:	eeb0 3a67 	vmov.f32	s6, s15
 8015882:	fb92 f3f3 	sdiv	r3, r2, r3
 8015886:	9a01      	ldr	r2, [sp, #4]
 8015888:	9310      	str	r3, [sp, #64]	; 0x40
 801588a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801588c:	bf08      	it	eq
 801588e:	4613      	moveq	r3, r2
 8015890:	e734      	b.n	80156fc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8015892:	1427      	asrs	r7, r4, #16
 8015894:	d44d      	bmi.n	8015932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015896:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801589a:	42be      	cmp	r6, r7
 801589c:	dd49      	ble.n	8015932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801589e:	ea5f 4820 	movs.w	r8, r0, asr #16
 80158a2:	d446      	bmi.n	8015932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80158a4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80158a8:	4542      	cmp	r2, r8
 80158aa:	dd42      	ble.n	8015932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80158ac:	b236      	sxth	r6, r6
 80158ae:	9a00      	ldr	r2, [sp, #0]
 80158b0:	fb08 7606 	mla	r6, r8, r6, r7
 80158b4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80158b8:	0e3a      	lsrs	r2, r7, #24
 80158ba:	d03a      	beq.n	8015932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80158bc:	2aff      	cmp	r2, #255	; 0xff
 80158be:	b2d6      	uxtb	r6, r2
 80158c0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80158c4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80158c8:	ea4f 024e 	mov.w	r2, lr, lsl #1
 80158cc:	b2ff      	uxtb	r7, r7
 80158ce:	d037      	beq.n	8015940 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 80158d0:	fa1f f986 	uxth.w	r9, r6
 80158d4:	4472      	add	r2, lr
 80158d6:	43f6      	mvns	r6, r6
 80158d8:	f815 8002 	ldrb.w	r8, [r5, r2]
 80158dc:	fb17 f709 	smulbb	r7, r7, r9
 80158e0:	fb1a fa09 	smulbb	sl, sl, r9
 80158e4:	b2f6      	uxtb	r6, r6
 80158e6:	fb1b f909 	smulbb	r9, fp, r9
 80158ea:	fb08 7706 	mla	r7, r8, r6, r7
 80158ee:	b2bf      	uxth	r7, r7
 80158f0:	f107 0801 	add.w	r8, r7, #1
 80158f4:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 80158f8:	123f      	asrs	r7, r7, #8
 80158fa:	54af      	strb	r7, [r5, r2]
 80158fc:	442a      	add	r2, r5
 80158fe:	7857      	ldrb	r7, [r2, #1]
 8015900:	fb07 aa06 	mla	sl, r7, r6, sl
 8015904:	fa1f fa8a 	uxth.w	sl, sl
 8015908:	f10a 0701 	add.w	r7, sl, #1
 801590c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015910:	7897      	ldrb	r7, [r2, #2]
 8015912:	fb07 9906 	mla	r9, r7, r6, r9
 8015916:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801591a:	fa1f f989 	uxth.w	r9, r9
 801591e:	f882 a001 	strb.w	sl, [r2, #1]
 8015922:	f109 0601 	add.w	r6, r9, #1
 8015926:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801592a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801592e:	f882 9002 	strb.w	r9, [r2, #2]
 8015932:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015934:	f10e 0e01 	add.w	lr, lr, #1
 8015938:	4414      	add	r4, r2
 801593a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801593c:	4410      	add	r0, r2
 801593e:	e766      	b.n	801580e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015940:	4472      	add	r2, lr
 8015942:	54af      	strb	r7, [r5, r2]
 8015944:	442a      	add	r2, r5
 8015946:	f882 a001 	strb.w	sl, [r2, #1]
 801594a:	f882 b002 	strb.w	fp, [r2, #2]
 801594e:	e7f0      	b.n	8015932 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015950:	f806 7c03 	strb.w	r7, [r6, #-3]
 8015954:	f806 9c02 	strb.w	r9, [r6, #-2]
 8015958:	f806 bc01 	strb.w	fp, [r6, #-1]
 801595c:	e74d      	b.n	80157fa <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801595e:	b003      	add	sp, #12
 8015960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015964 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015968:	b087      	sub	sp, #28
 801596a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801596e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015970:	9204      	str	r2, [sp, #16]
 8015972:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015976:	6860      	ldr	r0, [r4, #4]
 8015978:	9205      	str	r2, [sp, #20]
 801597a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801597e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8015982:	9101      	str	r1, [sp, #4]
 8015984:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8015988:	fb00 2505 	mla	r5, r0, r5, r2
 801598c:	6822      	ldr	r2, [r4, #0]
 801598e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015992:	4415      	add	r5, r2
 8015994:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015998:	3201      	adds	r2, #1
 801599a:	f022 0201 	bic.w	r2, r2, #1
 801599e:	9202      	str	r2, [sp, #8]
 80159a0:	f8dc 2000 	ldr.w	r2, [ip]
 80159a4:	9203      	str	r2, [sp, #12]
 80159a6:	9a01      	ldr	r2, [sp, #4]
 80159a8:	2a00      	cmp	r2, #0
 80159aa:	dc03      	bgt.n	80159b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80159ac:	9a04      	ldr	r2, [sp, #16]
 80159ae:	2a00      	cmp	r2, #0
 80159b0:	f340 8135 	ble.w	8015c1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 80159b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80159b6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80159ba:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80159be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80159c0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80159c4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	dd0d      	ble.n	80159e8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80159cc:	1422      	asrs	r2, r4, #16
 80159ce:	d405      	bmi.n	80159dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80159d0:	4542      	cmp	r2, r8
 80159d2:	da03      	bge.n	80159dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80159d4:	1402      	asrs	r2, r0, #16
 80159d6:	d401      	bmi.n	80159dc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80159d8:	42ba      	cmp	r2, r7
 80159da:	db06      	blt.n	80159ea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80159dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80159de:	4474      	add	r4, lr
 80159e0:	3b01      	subs	r3, #1
 80159e2:	3503      	adds	r5, #3
 80159e4:	4410      	add	r0, r2
 80159e6:	e7ef      	b.n	80159c8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 80159e8:	d077      	beq.n	8015ada <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 80159ea:	1e5a      	subs	r2, r3, #1
 80159ec:	fb0e 4602 	mla	r6, lr, r2, r4
 80159f0:	1436      	asrs	r6, r6, #16
 80159f2:	d469      	bmi.n	8015ac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80159f4:	4546      	cmp	r6, r8
 80159f6:	da67      	bge.n	8015ac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80159f8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80159fa:	fb06 0202 	mla	r2, r6, r2, r0
 80159fe:	1412      	asrs	r2, r2, #16
 8015a00:	d462      	bmi.n	8015ac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015a02:	42ba      	cmp	r2, r7
 8015a04:	da60      	bge.n	8015ac8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015a06:	1cee      	adds	r6, r5, #3
 8015a08:	4699      	mov	r9, r3
 8015a0a:	f1b9 0f00 	cmp.w	r9, #0
 8015a0e:	dd5f      	ble.n	8015ad0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8015a10:	1422      	asrs	r2, r4, #16
 8015a12:	9902      	ldr	r1, [sp, #8]
 8015a14:	1407      	asrs	r7, r0, #16
 8015a16:	fb01 2707 	mla	r7, r1, r7, r2
 8015a1a:	9903      	ldr	r1, [sp, #12]
 8015a1c:	087a      	lsrs	r2, r7, #1
 8015a1e:	5c8a      	ldrb	r2, [r1, r2]
 8015a20:	07f9      	lsls	r1, r7, #31
 8015a22:	bf54      	ite	pl
 8015a24:	f002 020f 	andpl.w	r2, r2, #15
 8015a28:	1112      	asrmi	r2, r2, #4
 8015a2a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015a2e:	b2d2      	uxtb	r2, r2
 8015a30:	2a00      	cmp	r2, #0
 8015a32:	d042      	beq.n	8015aba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8015a34:	497b      	ldr	r1, [pc, #492]	; (8015c24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8015a36:	680f      	ldr	r7, [r1, #0]
 8015a38:	9905      	ldr	r1, [sp, #20]
 8015a3a:	fa5f fb87 	uxtb.w	fp, r7
 8015a3e:	434a      	muls	r2, r1
 8015a40:	f102 0801 	add.w	r8, r2, #1
 8015a44:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8015a48:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8015a4c:	1212      	asrs	r2, r2, #8
 8015a4e:	fa1f fa82 	uxth.w	sl, r2
 8015a52:	43d2      	mvns	r2, r2
 8015a54:	fb1b fb0a 	smulbb	fp, fp, sl
 8015a58:	b2d2      	uxtb	r2, r2
 8015a5a:	fb08 b802 	mla	r8, r8, r2, fp
 8015a5e:	fa1f f888 	uxth.w	r8, r8
 8015a62:	f108 0b01 	add.w	fp, r8, #1
 8015a66:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015a6a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015a6e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8015a72:	fb1b fb0a 	smulbb	fp, fp, sl
 8015a76:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015a7a:	fb17 fa0a 	smulbb	sl, r7, sl
 8015a7e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8015a82:	f806 8c03 	strb.w	r8, [r6, #-3]
 8015a86:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8015a8a:	fb07 aa02 	mla	sl, r7, r2, sl
 8015a8e:	fb08 b802 	mla	r8, r8, r2, fp
 8015a92:	fa1f fa8a 	uxth.w	sl, sl
 8015a96:	fa1f f888 	uxth.w	r8, r8
 8015a9a:	f10a 0701 	add.w	r7, sl, #1
 8015a9e:	f108 0b01 	add.w	fp, r8, #1
 8015aa2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015aa6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015aaa:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015aae:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015ab2:	f806 ac01 	strb.w	sl, [r6, #-1]
 8015ab6:	f806 8c02 	strb.w	r8, [r6, #-2]
 8015aba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015abc:	4474      	add	r4, lr
 8015abe:	3603      	adds	r6, #3
 8015ac0:	f109 39ff 	add.w	r9, r9, #4294967295
 8015ac4:	4410      	add	r0, r2
 8015ac6:	e7a0      	b.n	8015a0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8015ac8:	2700      	movs	r7, #0
 8015aca:	1bda      	subs	r2, r3, r7
 8015acc:	2a00      	cmp	r2, #0
 8015ace:	dc3e      	bgt.n	8015b4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015ad0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015ad4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015ad8:	441d      	add	r5, r3
 8015ada:	9b01      	ldr	r3, [sp, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	f340 809e 	ble.w	8015c1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015ae2:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015ae6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ae8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015aec:	eeb0 6a62 	vmov.f32	s12, s5
 8015af0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015af4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015af8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015afc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015b00:	eeb0 6a43 	vmov.f32	s12, s6
 8015b04:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015b08:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8015b0c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015b10:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015b14:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015b18:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015b1c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015b20:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015b24:	ee12 2a90 	vmov	r2, s5
 8015b28:	eef0 2a47 	vmov.f32	s5, s14
 8015b2c:	fb92 fef3 	sdiv	lr, r2, r3
 8015b30:	ee13 2a10 	vmov	r2, s6
 8015b34:	eeb0 3a67 	vmov.f32	s6, s15
 8015b38:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b3c:	9314      	str	r3, [sp, #80]	; 0x50
 8015b3e:	9b01      	ldr	r3, [sp, #4]
 8015b40:	9a04      	ldr	r2, [sp, #16]
 8015b42:	3b01      	subs	r3, #1
 8015b44:	9301      	str	r3, [sp, #4]
 8015b46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015b48:	bf08      	it	eq
 8015b4a:	4613      	moveq	r3, r2
 8015b4c:	e72b      	b.n	80159a6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8015b4e:	1426      	asrs	r6, r4, #16
 8015b50:	d460      	bmi.n	8015c14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015b52:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015b56:	42b2      	cmp	r2, r6
 8015b58:	dd5c      	ble.n	8015c14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015b5a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015b5e:	d459      	bmi.n	8015c14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015b60:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015b64:	4542      	cmp	r2, r8
 8015b66:	dd55      	ble.n	8015c14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015b68:	9a02      	ldr	r2, [sp, #8]
 8015b6a:	9903      	ldr	r1, [sp, #12]
 8015b6c:	fb08 6602 	mla	r6, r8, r2, r6
 8015b70:	0872      	lsrs	r2, r6, #1
 8015b72:	07f6      	lsls	r6, r6, #31
 8015b74:	5c8a      	ldrb	r2, [r1, r2]
 8015b76:	bf54      	ite	pl
 8015b78:	f002 020f 	andpl.w	r2, r2, #15
 8015b7c:	1112      	asrmi	r2, r2, #4
 8015b7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015b82:	b2d2      	uxtb	r2, r2
 8015b84:	2a00      	cmp	r2, #0
 8015b86:	d045      	beq.n	8015c14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015b88:	4926      	ldr	r1, [pc, #152]	; (8015c24 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8015b8a:	f8d1 8000 	ldr.w	r8, [r1]
 8015b8e:	9905      	ldr	r1, [sp, #20]
 8015b90:	fa5f fb88 	uxtb.w	fp, r8
 8015b94:	434a      	muls	r2, r1
 8015b96:	1c56      	adds	r6, r2, #1
 8015b98:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8015b9c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015ba0:	1212      	asrs	r2, r2, #8
 8015ba2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8015ba6:	fa1f fa82 	uxth.w	sl, r2
 8015baa:	43d2      	mvns	r2, r2
 8015bac:	fb1b fb0a 	smulbb	fp, fp, sl
 8015bb0:	b2d2      	uxtb	r2, r2
 8015bb2:	fb09 b902 	mla	r9, r9, r2, fp
 8015bb6:	fa1f f989 	uxth.w	r9, r9
 8015bba:	f109 0b01 	add.w	fp, r9, #1
 8015bbe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015bc2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8015bc6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8015bca:	fb1b fb0a 	smulbb	fp, fp, sl
 8015bce:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015bd2:	fb18 fa0a 	smulbb	sl, r8, sl
 8015bd6:	f805 9006 	strb.w	r9, [r5, r6]
 8015bda:	442e      	add	r6, r5
 8015bdc:	f896 8002 	ldrb.w	r8, [r6, #2]
 8015be0:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015be4:	fb08 aa02 	mla	sl, r8, r2, sl
 8015be8:	fb09 b902 	mla	r9, r9, r2, fp
 8015bec:	fa1f fa8a 	uxth.w	sl, sl
 8015bf0:	fa1f f989 	uxth.w	r9, r9
 8015bf4:	f10a 0801 	add.w	r8, sl, #1
 8015bf8:	f109 0b01 	add.w	fp, r9, #1
 8015bfc:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8015c00:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015c04:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015c08:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c0c:	f886 a002 	strb.w	sl, [r6, #2]
 8015c10:	f886 9001 	strb.w	r9, [r6, #1]
 8015c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c16:	4474      	add	r4, lr
 8015c18:	3701      	adds	r7, #1
 8015c1a:	4410      	add	r0, r2
 8015c1c:	e755      	b.n	8015aca <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8015c1e:	b007      	add	sp, #28
 8015c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c24:	2401aa80 	.word	0x2401aa80

08015c28 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2c:	b085      	sub	sp, #20
 8015c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c32:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8015c34:	9203      	str	r2, [sp, #12]
 8015c36:	6860      	ldr	r0, [r4, #4]
 8015c38:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015c3c:	9100      	str	r1, [sp, #0]
 8015c3e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8015c42:	fb00 2606 	mla	r6, r0, r6, r2
 8015c46:	6822      	ldr	r2, [r4, #0]
 8015c48:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015c4c:	4416      	add	r6, r2
 8015c4e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015c52:	3201      	adds	r2, #1
 8015c54:	f022 0201 	bic.w	r2, r2, #1
 8015c58:	9201      	str	r2, [sp, #4]
 8015c5a:	f8dc 2000 	ldr.w	r2, [ip]
 8015c5e:	9202      	str	r2, [sp, #8]
 8015c60:	9a00      	ldr	r2, [sp, #0]
 8015c62:	2a00      	cmp	r2, #0
 8015c64:	dc03      	bgt.n	8015c6e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8015c66:	9a03      	ldr	r2, [sp, #12]
 8015c68:	2a00      	cmp	r2, #0
 8015c6a:	f340 8140 	ble.w	8015eee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c70:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015c74:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8015c78:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c7a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015c7e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	dd0e      	ble.n	8015ca4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015c86:	142a      	asrs	r2, r5, #16
 8015c88:	d405      	bmi.n	8015c96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015c8a:	4572      	cmp	r2, lr
 8015c8c:	da03      	bge.n	8015c96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015c8e:	1422      	asrs	r2, r4, #16
 8015c90:	d401      	bmi.n	8015c96 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015c92:	42ba      	cmp	r2, r7
 8015c94:	db07      	blt.n	8015ca6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015c96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c98:	3b01      	subs	r3, #1
 8015c9a:	3603      	adds	r6, #3
 8015c9c:	4415      	add	r5, r2
 8015c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015ca0:	4414      	add	r4, r2
 8015ca2:	e7ee      	b.n	8015c82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015ca4:	d072      	beq.n	8015d8c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015ca6:	1e5a      	subs	r2, r3, #1
 8015ca8:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015caa:	fb00 5002 	mla	r0, r0, r2, r5
 8015cae:	1400      	asrs	r0, r0, #16
 8015cb0:	d463      	bmi.n	8015d7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015cb2:	4570      	cmp	r0, lr
 8015cb4:	da61      	bge.n	8015d7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015cb6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015cb8:	fb00 4202 	mla	r2, r0, r2, r4
 8015cbc:	1412      	asrs	r2, r2, #16
 8015cbe:	d45c      	bmi.n	8015d7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015cc0:	42ba      	cmp	r2, r7
 8015cc2:	da5a      	bge.n	8015d7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015cc4:	1cf0      	adds	r0, r6, #3
 8015cc6:	469a      	mov	sl, r3
 8015cc8:	f1ba 0f00 	cmp.w	sl, #0
 8015ccc:	dd59      	ble.n	8015d82 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8015cce:	142a      	asrs	r2, r5, #16
 8015cd0:	9901      	ldr	r1, [sp, #4]
 8015cd2:	1427      	asrs	r7, r4, #16
 8015cd4:	fb01 2707 	mla	r7, r1, r7, r2
 8015cd8:	9902      	ldr	r1, [sp, #8]
 8015cda:	087a      	lsrs	r2, r7, #1
 8015cdc:	5c8a      	ldrb	r2, [r1, r2]
 8015cde:	07f9      	lsls	r1, r7, #31
 8015ce0:	bf54      	ite	pl
 8015ce2:	f002 020f 	andpl.w	r2, r2, #15
 8015ce6:	1112      	asrmi	r2, r2, #4
 8015ce8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015cec:	b2d2      	uxtb	r2, r2
 8015cee:	2a00      	cmp	r2, #0
 8015cf0:	d03b      	beq.n	8015d6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015cf2:	4980      	ldr	r1, [pc, #512]	; (8015ef4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015cf4:	2aff      	cmp	r2, #255	; 0xff
 8015cf6:	680f      	ldr	r7, [r1, #0]
 8015cf8:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015cfc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015d00:	b2ff      	uxtb	r7, r7
 8015d02:	f000 80ed 	beq.w	8015ee0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8015d06:	fa1f f882 	uxth.w	r8, r2
 8015d0a:	43d2      	mvns	r2, r2
 8015d0c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8015d10:	fb17 f708 	smulbb	r7, r7, r8
 8015d14:	b2d2      	uxtb	r2, r2
 8015d16:	fb19 f908 	smulbb	r9, r9, r8
 8015d1a:	fb0e 7702 	mla	r7, lr, r2, r7
 8015d1e:	fb1b f808 	smulbb	r8, fp, r8
 8015d22:	b2bf      	uxth	r7, r7
 8015d24:	f107 0e01 	add.w	lr, r7, #1
 8015d28:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8015d2c:	123f      	asrs	r7, r7, #8
 8015d2e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015d32:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8015d36:	fb07 9902 	mla	r9, r7, r2, r9
 8015d3a:	fa1f f989 	uxth.w	r9, r9
 8015d3e:	f109 0701 	add.w	r7, r9, #1
 8015d42:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8015d46:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8015d4a:	fb07 8802 	mla	r8, r7, r2, r8
 8015d4e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d52:	fa1f f888 	uxth.w	r8, r8
 8015d56:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015d5a:	f108 0201 	add.w	r2, r8, #1
 8015d5e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015d62:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015d66:	f800 8c01 	strb.w	r8, [r0, #-1]
 8015d6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d6c:	3003      	adds	r0, #3
 8015d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015d72:	4415      	add	r5, r2
 8015d74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d76:	4414      	add	r4, r2
 8015d78:	e7a6      	b.n	8015cc8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015d7a:	2700      	movs	r7, #0
 8015d7c:	1bda      	subs	r2, r3, r7
 8015d7e:	2a00      	cmp	r2, #0
 8015d80:	dc40      	bgt.n	8015e04 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8015d82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d8a:	441e      	add	r6, r3
 8015d8c:	9b00      	ldr	r3, [sp, #0]
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	f340 80ad 	ble.w	8015eee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015d94:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015d98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015d9e:	eeb0 6a62 	vmov.f32	s12, s5
 8015da2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015da6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015daa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015dae:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015db2:	eeb0 6a43 	vmov.f32	s12, s6
 8015db6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015dba:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015dbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015dc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015dc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015dca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015dce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015dd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015dd6:	ee12 2a90 	vmov	r2, s5
 8015dda:	eef0 2a47 	vmov.f32	s5, s14
 8015dde:	fb92 f3f3 	sdiv	r3, r2, r3
 8015de2:	ee13 2a10 	vmov	r2, s6
 8015de6:	9311      	str	r3, [sp, #68]	; 0x44
 8015de8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dea:	eeb0 3a67 	vmov.f32	s6, s15
 8015dee:	fb92 f3f3 	sdiv	r3, r2, r3
 8015df2:	9312      	str	r3, [sp, #72]	; 0x48
 8015df4:	9b00      	ldr	r3, [sp, #0]
 8015df6:	9a03      	ldr	r2, [sp, #12]
 8015df8:	3b01      	subs	r3, #1
 8015dfa:	9300      	str	r3, [sp, #0]
 8015dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015dfe:	bf08      	it	eq
 8015e00:	4613      	moveq	r3, r2
 8015e02:	e72d      	b.n	8015c60 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015e04:	1428      	asrs	r0, r5, #16
 8015e06:	d45c      	bmi.n	8015ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015e08:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015e0c:	4282      	cmp	r2, r0
 8015e0e:	dd58      	ble.n	8015ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015e10:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8015e14:	d455      	bmi.n	8015ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015e16:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015e1a:	4572      	cmp	r2, lr
 8015e1c:	dd51      	ble.n	8015ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015e1e:	9a01      	ldr	r2, [sp, #4]
 8015e20:	9902      	ldr	r1, [sp, #8]
 8015e22:	fb0e 0002 	mla	r0, lr, r2, r0
 8015e26:	0842      	lsrs	r2, r0, #1
 8015e28:	07c0      	lsls	r0, r0, #31
 8015e2a:	5c8a      	ldrb	r2, [r1, r2]
 8015e2c:	bf54      	ite	pl
 8015e2e:	f002 020f 	andpl.w	r2, r2, #15
 8015e32:	1112      	asrmi	r2, r2, #4
 8015e34:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015e38:	b2d2      	uxtb	r2, r2
 8015e3a:	2a00      	cmp	r2, #0
 8015e3c:	d041      	beq.n	8015ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015e3e:	492d      	ldr	r1, [pc, #180]	; (8015ef4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015e40:	2aff      	cmp	r2, #255	; 0xff
 8015e42:	6808      	ldr	r0, [r1, #0]
 8015e44:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8015e48:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015e4c:	fa5f fe80 	uxtb.w	lr, r0
 8015e50:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8015e54:	d03b      	beq.n	8015ece <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8015e56:	fa1f f982 	uxth.w	r9, r2
 8015e5a:	4438      	add	r0, r7
 8015e5c:	43d2      	mvns	r2, r2
 8015e5e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8015e62:	fb1e fe09 	smulbb	lr, lr, r9
 8015e66:	fb1a fa09 	smulbb	sl, sl, r9
 8015e6a:	b2d2      	uxtb	r2, r2
 8015e6c:	fb1b f909 	smulbb	r9, fp, r9
 8015e70:	fb08 ee02 	mla	lr, r8, r2, lr
 8015e74:	fa1f fe8e 	uxth.w	lr, lr
 8015e78:	f10e 0801 	add.w	r8, lr, #1
 8015e7c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8015e80:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015e84:	f806 e000 	strb.w	lr, [r6, r0]
 8015e88:	4430      	add	r0, r6
 8015e8a:	f890 e001 	ldrb.w	lr, [r0, #1]
 8015e8e:	fb0e aa02 	mla	sl, lr, r2, sl
 8015e92:	fa1f fa8a 	uxth.w	sl, sl
 8015e96:	f10a 0e01 	add.w	lr, sl, #1
 8015e9a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8015e9e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8015ea2:	fb0e 9902 	mla	r9, lr, r2, r9
 8015ea6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015eaa:	fa1f f989 	uxth.w	r9, r9
 8015eae:	f880 a001 	strb.w	sl, [r0, #1]
 8015eb2:	f109 0201 	add.w	r2, r9, #1
 8015eb6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8015eba:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015ebe:	f880 9002 	strb.w	r9, [r0, #2]
 8015ec2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015ec4:	3701      	adds	r7, #1
 8015ec6:	4415      	add	r5, r2
 8015ec8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015eca:	4414      	add	r4, r2
 8015ecc:	e756      	b.n	8015d7c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015ece:	4438      	add	r0, r7
 8015ed0:	f806 e000 	strb.w	lr, [r6, r0]
 8015ed4:	4430      	add	r0, r6
 8015ed6:	f880 a001 	strb.w	sl, [r0, #1]
 8015eda:	f880 b002 	strb.w	fp, [r0, #2]
 8015ede:	e7f0      	b.n	8015ec2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015ee0:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015ee4:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015ee8:	f800 bc01 	strb.w	fp, [r0, #-1]
 8015eec:	e73d      	b.n	8015d6a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015eee:	b005      	add	sp, #20
 8015ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ef4:	2401aa80 	.word	0x2401aa80

08015ef8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8015ef8:	4770      	bx	lr

08015efa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8015efa:	4770      	bx	lr

08015efc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8015efc:	4770      	bx	lr

08015efe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015efe:	4770      	bx	lr

08015f00 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015f00:	4770      	bx	lr

08015f02 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015f02:	4770      	bx	lr

08015f04 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015f04:	4770      	bx	lr

08015f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015f06:	4770      	bx	lr

08015f08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015f08:	4770      	bx	lr

08015f0a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015f0a:	4770      	bx	lr

08015f0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015f0c:	4770      	bx	lr

08015f0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015f0e:	4770      	bx	lr

08015f10 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015f10:	4770      	bx	lr

08015f12 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015f12:	4770      	bx	lr

08015f14 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015f14:	4770      	bx	lr

08015f16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015f16:	4770      	bx	lr

08015f18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015f18:	4770      	bx	lr

08015f1a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015f1a:	4770      	bx	lr

08015f1c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015f1c:	4770      	bx	lr

08015f1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015f1e:	4770      	bx	lr

08015f20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015f20:	4770      	bx	lr

08015f22 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015f22:	4770      	bx	lr

08015f24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015f24:	4770      	bx	lr
	...

08015f28 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f2a:	4606      	mov	r6, r0
 8015f2c:	b087      	sub	sp, #28
 8015f2e:	4615      	mov	r5, r2
 8015f30:	461f      	mov	r7, r3
 8015f32:	b353      	cbz	r3, 8015f8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f34:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	dd26      	ble.n	8015f8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f3c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	dd22      	ble.n	8015f8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015f44:	6808      	ldr	r0, [r1, #0]
 8015f46:	aa04      	add	r2, sp, #16
 8015f48:	6849      	ldr	r1, [r1, #4]
 8015f4a:	4c1b      	ldr	r4, [pc, #108]	; (8015fb8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015f4c:	c203      	stmia	r2!, {r0, r1}
 8015f4e:	a804      	add	r0, sp, #16
 8015f50:	f7fb fa5c 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	6803      	ldr	r3, [r0, #0]
 8015f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f5a:	4798      	blx	r3
 8015f5c:	2fff      	cmp	r7, #255	; 0xff
 8015f5e:	d016      	beq.n	8015f8e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015f60:	f010 0f08 	tst.w	r0, #8
 8015f64:	6820      	ldr	r0, [r4, #0]
 8015f66:	d015      	beq.n	8015f94 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015f68:	2400      	movs	r4, #0
 8015f6a:	6801      	ldr	r1, [r0, #0]
 8015f6c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015f70:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015f74:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015f78:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015f7c:	9401      	str	r4, [sp, #4]
 8015f7e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015f82:	9400      	str	r4, [sp, #0]
 8015f84:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8015f86:	4629      	mov	r1, r5
 8015f88:	47a0      	blx	r4
 8015f8a:	b007      	add	sp, #28
 8015f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f8e:	f010 0f02 	tst.w	r0, #2
 8015f92:	e7e7      	b.n	8015f64 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015f94:	6803      	ldr	r3, [r0, #0]
 8015f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f98:	4798      	blx	r3
 8015f9a:	4b08      	ldr	r3, [pc, #32]	; (8015fbc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015f9c:	4601      	mov	r1, r0
 8015f9e:	4630      	mov	r0, r6
 8015fa0:	881a      	ldrh	r2, [r3, #0]
 8015fa2:	6833      	ldr	r3, [r6, #0]
 8015fa4:	e9cd 5700 	strd	r5, r7, [sp]
 8015fa8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015faa:	ab04      	add	r3, sp, #16
 8015fac:	47a8      	blx	r5
 8015fae:	6820      	ldr	r0, [r4, #0]
 8015fb0:	6803      	ldr	r3, [r0, #0]
 8015fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fb4:	4798      	blx	r3
 8015fb6:	e7e8      	b.n	8015f8a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015fb8:	2401aa78 	.word	0x2401aa78
 8015fbc:	2401aa72 	.word	0x2401aa72

08015fc0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	b08b      	sub	sp, #44	; 0x2c
 8015fc6:	460d      	mov	r5, r1
 8015fc8:	4616      	mov	r6, r2
 8015fca:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015fce:	f1b8 0f00 	cmp.w	r8, #0
 8015fd2:	d047      	beq.n	8016064 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015fd4:	6810      	ldr	r0, [r2, #0]
 8015fd6:	ac06      	add	r4, sp, #24
 8015fd8:	6851      	ldr	r1, [r2, #4]
 8015fda:	4f51      	ldr	r7, [pc, #324]	; (8016120 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8015fdc:	c403      	stmia	r4!, {r0, r1}
 8015fde:	6818      	ldr	r0, [r3, #0]
 8015fe0:	ac08      	add	r4, sp, #32
 8015fe2:	6859      	ldr	r1, [r3, #4]
 8015fe4:	c403      	stmia	r4!, {r0, r1}
 8015fe6:	a806      	add	r0, sp, #24
 8015fe8:	f7fb fa10 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015fec:	4631      	mov	r1, r6
 8015fee:	a808      	add	r0, sp, #32
 8015ff0:	f7fb fa34 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015ff4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015ff8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015ffc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8016000:	6838      	ldr	r0, [r7, #0]
 8016002:	fb11 2103 	smlabb	r1, r1, r3, r2
 8016006:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801600a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801600e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016012:	440d      	add	r5, r1
 8016014:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8016018:	440a      	add	r2, r1
 801601a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801601e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8016022:	4413      	add	r3, r2
 8016024:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8016028:	6803      	ldr	r3, [r0, #0]
 801602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801602c:	4798      	blx	r3
 801602e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016032:	d01a      	beq.n	801606a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8016034:	f010 0f04 	tst.w	r0, #4
 8016038:	6838      	ldr	r0, [r7, #0]
 801603a:	d019      	beq.n	8016070 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801603c:	2100      	movs	r1, #0
 801603e:	6807      	ldr	r7, [r0, #0]
 8016040:	b2a4      	uxth	r4, r4
 8016042:	f8cd 800c 	str.w	r8, [sp, #12]
 8016046:	b2b6      	uxth	r6, r6
 8016048:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801604c:	9401      	str	r4, [sp, #4]
 801604e:	9600      	str	r6, [sp, #0]
 8016050:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8016054:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8016058:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801605c:	9102      	str	r1, [sp, #8]
 801605e:	4629      	mov	r1, r5
 8016060:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8016062:	47a0      	blx	r4
 8016064:	b00b      	add	sp, #44	; 0x2c
 8016066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801606a:	f010 0f01 	tst.w	r0, #1
 801606e:	e7e3      	b.n	8016038 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8016070:	6803      	ldr	r3, [r0, #0]
 8016072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016074:	4798      	blx	r3
 8016076:	4a2b      	ldr	r2, [pc, #172]	; (8016124 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8016078:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801607c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8016080:	8813      	ldrh	r3, [r2, #0]
 8016082:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8016086:	fb03 f404 	mul.w	r4, r3, r4
 801608a:	fb03 c101 	mla	r1, r3, r1, ip
 801608e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016092:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016096:	4408      	add	r0, r1
 8016098:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801609c:	4404      	add	r4, r0
 801609e:	d02e      	beq.n	80160fe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80160a0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80160a4:	1b9b      	subs	r3, r3, r6
 80160a6:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80160aa:	1b96      	subs	r6, r2, r6
 80160ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160b0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80160b4:	42a0      	cmp	r0, r4
 80160b6:	d22d      	bcs.n	8016114 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80160b8:	eb00 0e01 	add.w	lr, r0, r1
 80160bc:	4570      	cmp	r0, lr
 80160be:	d210      	bcs.n	80160e2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80160c0:	f890 9000 	ldrb.w	r9, [r0]
 80160c4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80160c8:	fb19 f90c 	smulbb	r9, r9, ip
 80160cc:	fb02 9208 	mla	r2, r2, r8, r9
 80160d0:	b292      	uxth	r2, r2
 80160d2:	f102 0901 	add.w	r9, r2, #1
 80160d6:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80160da:	1212      	asrs	r2, r2, #8
 80160dc:	f800 2b01 	strb.w	r2, [r0], #1
 80160e0:	e7ec      	b.n	80160bc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80160e2:	4418      	add	r0, r3
 80160e4:	4435      	add	r5, r6
 80160e6:	e7e5      	b.n	80160b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80160e8:	8813      	ldrh	r3, [r2, #0]
 80160ea:	1b9b      	subs	r3, r3, r6
 80160ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160f0:	4418      	add	r0, r3
 80160f2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80160f6:	1b9b      	subs	r3, r3, r6
 80160f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80160fc:	441d      	add	r5, r3
 80160fe:	42a0      	cmp	r0, r4
 8016100:	d208      	bcs.n	8016114 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8016102:	eb00 0c01 	add.w	ip, r0, r1
 8016106:	4560      	cmp	r0, ip
 8016108:	d2ee      	bcs.n	80160e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801610a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801610e:	f800 3b01 	strb.w	r3, [r0], #1
 8016112:	e7f8      	b.n	8016106 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8016114:	6838      	ldr	r0, [r7, #0]
 8016116:	6803      	ldr	r3, [r0, #0]
 8016118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801611a:	4798      	blx	r3
 801611c:	e7a2      	b.n	8016064 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801611e:	bf00      	nop
 8016120:	2401aa78 	.word	0x2401aa78
 8016124:	2401aa72 	.word	0x2401aa72

08016128 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8016128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801612a:	2300      	movs	r3, #0
 801612c:	b085      	sub	sp, #20
 801612e:	9300      	str	r3, [sp, #0]
 8016130:	4b41      	ldr	r3, [pc, #260]	; (8016238 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d136      	bne.n	80161a6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8016138:	4a40      	ldr	r2, [pc, #256]	; (801623c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801613a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801613e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016142:	2b00      	cmp	r3, #0
 8016144:	d131      	bne.n	80161aa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8016146:	4b3e      	ldr	r3, [pc, #248]	; (8016240 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8016148:	f9b3 3000 	ldrsh.w	r3, [r3]
 801614c:	ac02      	add	r4, sp, #8
 801614e:	6808      	ldr	r0, [r1, #0]
 8016150:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016154:	ab02      	add	r3, sp, #8
 8016156:	6849      	ldr	r1, [r1, #4]
 8016158:	4d3a      	ldr	r5, [pc, #232]	; (8016244 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801615a:	c303      	stmia	r3!, {r0, r1}
 801615c:	4669      	mov	r1, sp
 801615e:	4620      	mov	r0, r4
 8016160:	f7fb f97c 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016164:	4668      	mov	r0, sp
 8016166:	f7fb f951 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801616a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801616e:	f8bd 2000 	ldrh.w	r2, [sp]
 8016172:	462e      	mov	r6, r5
 8016174:	6828      	ldr	r0, [r5, #0]
 8016176:	4413      	add	r3, r2
 8016178:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801617c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8016180:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8016184:	4413      	add	r3, r2
 8016186:	f8ad 300a 	strh.w	r3, [sp, #10]
 801618a:	6803      	ldr	r3, [r0, #0]
 801618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801618e:	4798      	blx	r3
 8016190:	f010 0f01 	tst.w	r0, #1
 8016194:	d00b      	beq.n	80161ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8016196:	6828      	ldr	r0, [r5, #0]
 8016198:	6803      	ldr	r3, [r0, #0]
 801619a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801619e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80161a0:	4798      	blx	r3
 80161a2:	b005      	add	sp, #20
 80161a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161a6:	4a26      	ldr	r2, [pc, #152]	; (8016240 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80161a8:	e7c7      	b.n	801613a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80161aa:	4b24      	ldr	r3, [pc, #144]	; (801623c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80161ac:	e7cc      	b.n	8016148 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80161ae:	6830      	ldr	r0, [r6, #0]
 80161b0:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80161b4:	6803      	ldr	r3, [r0, #0]
 80161b6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80161ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161bc:	4798      	blx	r3
 80161be:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80161c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80161c6:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80161ca:	fb14 3402 	smlabb	r4, r4, r2, r3
 80161ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80161d2:	4404      	add	r4, r0
 80161d4:	6830      	ldr	r0, [r6, #0]
 80161d6:	6803      	ldr	r3, [r0, #0]
 80161d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161da:	4798      	blx	r3
 80161dc:	4917      	ldr	r1, [pc, #92]	; (801623c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80161de:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80161e2:	880b      	ldrh	r3, [r1, #0]
 80161e4:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80161e8:	fb03 c202 	mla	r2, r3, r2, ip
 80161ec:	437b      	muls	r3, r7
 80161ee:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80161f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80161f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80161fa:	4410      	add	r0, r2
 80161fc:	18c2      	adds	r2, r0, r3
 80161fe:	4290      	cmp	r0, r2
 8016200:	d214      	bcs.n	801622c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8016202:	eb00 0c07 	add.w	ip, r0, r7
 8016206:	4560      	cmp	r0, ip
 8016208:	d204      	bcs.n	8016214 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801620a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801620e:	f800 3b01 	strb.w	r3, [r0], #1
 8016212:	e7f8      	b.n	8016206 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8016214:	880b      	ldrh	r3, [r1, #0]
 8016216:	1b5b      	subs	r3, r3, r5
 8016218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801621c:	4418      	add	r0, r3
 801621e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8016222:	1b5b      	subs	r3, r3, r5
 8016224:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016228:	441c      	add	r4, r3
 801622a:	e7e8      	b.n	80161fe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801622c:	6830      	ldr	r0, [r6, #0]
 801622e:	6803      	ldr	r3, [r0, #0]
 8016230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016232:	4798      	blx	r3
 8016234:	e7b5      	b.n	80161a2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8016236:	bf00      	nop
 8016238:	2401aa70 	.word	0x2401aa70
 801623c:	2401aa72 	.word	0x2401aa72
 8016240:	2401aa74 	.word	0x2401aa74
 8016244:	2401aa78 	.word	0x2401aa78

08016248 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8016248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801624c:	b08f      	sub	sp, #60	; 0x3c
 801624e:	461c      	mov	r4, r3
 8016250:	9203      	str	r2, [sp, #12]
 8016252:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016256:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016258:	6820      	ldr	r0, [r4, #0]
 801625a:	9100      	str	r1, [sp, #0]
 801625c:	9204      	str	r2, [sp, #16]
 801625e:	aa0a      	add	r2, sp, #40	; 0x28
 8016260:	6861      	ldr	r1, [r4, #4]
 8016262:	c203      	stmia	r2!, {r0, r1}
 8016264:	6818      	ldr	r0, [r3, #0]
 8016266:	aa0c      	add	r2, sp, #48	; 0x30
 8016268:	6859      	ldr	r1, [r3, #4]
 801626a:	c203      	stmia	r2!, {r0, r1}
 801626c:	a80a      	add	r0, sp, #40	; 0x28
 801626e:	f7fb f8cd 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016272:	4621      	mov	r1, r4
 8016274:	a80c      	add	r0, sp, #48	; 0x30
 8016276:	f7fb f8f1 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801627a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801627e:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8016282:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016286:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801628a:	bfdb      	ittet	le
 801628c:	b2b3      	uxthle	r3, r6
 801628e:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8016292:	2301      	movgt	r3, #1
 8016294:	fb92 f3f3 	sdivle	r3, r2, r3
 8016298:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801629c:	441d      	add	r5, r3
 801629e:	fb92 f1f3 	sdiv	r1, r2, r3
 80162a2:	fa1f fc81 	uxth.w	ip, r1
 80162a6:	3d01      	subs	r5, #1
 80162a8:	fb0c 2413 	mls	r4, ip, r3, r2
 80162ac:	4661      	mov	r1, ip
 80162ae:	fb14 f406 	smulbb	r4, r4, r6
 80162b2:	4404      	add	r4, r0
 80162b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80162b8:	b2a4      	uxth	r4, r4
 80162ba:	b131      	cbz	r1, 80162ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80162bc:	9b03      	ldr	r3, [sp, #12]
 80162be:	9900      	ldr	r1, [sp, #0]
 80162c0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80162c4:	ba1b      	rev	r3, r3
 80162c6:	4419      	add	r1, r3
 80162c8:	9100      	str	r1, [sp, #0]
 80162ca:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80162ce:	b2ad      	uxth	r5, r5
 80162d0:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80162d4:	4418      	add	r0, r3
 80162d6:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80162da:	00ad      	lsls	r5, r5, #2
 80162dc:	441a      	add	r2, r3
 80162de:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80162e2:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80162e6:	9301      	str	r3, [sp, #4]
 80162e8:	4b79      	ldr	r3, [pc, #484]	; (80164d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80162ea:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80162ee:	6818      	ldr	r0, [r3, #0]
 80162f0:	6803      	ldr	r3, [r0, #0]
 80162f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80162f4:	4798      	blx	r3
 80162f6:	4a77      	ldr	r2, [pc, #476]	; (80164d4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 80162f8:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80162fc:	2c00      	cmp	r4, #0
 80162fe:	8813      	ldrh	r3, [r2, #0]
 8016300:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8016304:	9209      	str	r2, [sp, #36]	; 0x24
 8016306:	fb03 c101 	mla	r1, r3, r1, ip
 801630a:	fb06 f303 	mul.w	r3, r6, r3
 801630e:	bf18      	it	ne
 8016310:	2600      	movne	r6, #0
 8016312:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801631a:	4408      	add	r0, r1
 801631c:	4403      	add	r3, r0
 801631e:	9306      	str	r3, [sp, #24]
 8016320:	f105 0304 	add.w	r3, r5, #4
 8016324:	9305      	str	r3, [sp, #20]
 8016326:	9b01      	ldr	r3, [sp, #4]
 8016328:	bf08      	it	eq
 801632a:	461e      	moveq	r6, r3
 801632c:	2300      	movs	r3, #0
 801632e:	b2b6      	uxth	r6, r6
 8016330:	9302      	str	r3, [sp, #8]
 8016332:	9a06      	ldr	r2, [sp, #24]
 8016334:	4290      	cmp	r0, r2
 8016336:	f080 80c2 	bcs.w	80164be <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801633a:	b963      	cbnz	r3, 8016356 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801633c:	9b00      	ldr	r3, [sp, #0]
 801633e:	781a      	ldrb	r2, [r3, #0]
 8016340:	0993      	lsrs	r3, r2, #6
 8016342:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016346:	9202      	str	r2, [sp, #8]
 8016348:	1e5a      	subs	r2, r3, #1
 801634a:	2a02      	cmp	r2, #2
 801634c:	d815      	bhi.n	801637a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801634e:	9a00      	ldr	r2, [sp, #0]
 8016350:	b29b      	uxth	r3, r3
 8016352:	3201      	adds	r2, #1
 8016354:	9200      	str	r2, [sp, #0]
 8016356:	b1b4      	cbz	r4, 8016386 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8016358:	429c      	cmp	r4, r3
 801635a:	bf91      	iteee	ls
 801635c:	1b1c      	subls	r4, r3, r4
 801635e:	1ae4      	subhi	r4, r4, r3
 8016360:	4635      	movhi	r5, r6
 8016362:	f04f 0e00 	movhi.w	lr, #0
 8016366:	bf9b      	ittet	ls
 8016368:	fa1f fe84 	uxthls.w	lr, r4
 801636c:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8016370:	b2a4      	uxthhi	r4, r4
 8016372:	2400      	movls	r4, #0
 8016374:	4673      	mov	r3, lr
 8016376:	462e      	mov	r6, r5
 8016378:	e7db      	b.n	8016332 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801637a:	9a00      	ldr	r2, [sp, #0]
 801637c:	9b00      	ldr	r3, [sp, #0]
 801637e:	3202      	adds	r2, #2
 8016380:	785b      	ldrb	r3, [r3, #1]
 8016382:	9200      	str	r2, [sp, #0]
 8016384:	e7e7      	b.n	8016356 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8016386:	2204      	movs	r2, #4
 8016388:	9905      	ldr	r1, [sp, #20]
 801638a:	429e      	cmp	r6, r3
 801638c:	4615      	mov	r5, r2
 801638e:	9a02      	ldr	r2, [sp, #8]
 8016390:	bf94      	ite	ls
 8016392:	eba3 0e06 	subls.w	lr, r3, r6
 8016396:	46a6      	movhi	lr, r4
 8016398:	fb15 1202 	smlabb	r2, r5, r2, r1
 801639c:	9903      	ldr	r1, [sp, #12]
 801639e:	bf8c      	ite	hi
 80163a0:	1af5      	subhi	r5, r6, r3
 80163a2:	fa1f fe8e 	uxthls.w	lr, lr
 80163a6:	f851 c002 	ldr.w	ip, [r1, r2]
 80163aa:	bf9a      	itte	ls
 80163ac:	4625      	movls	r5, r4
 80163ae:	4632      	movls	r2, r6
 80163b0:	b2ad      	uxthhi	r5, r5
 80163b2:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80163b6:	bf88      	it	hi
 80163b8:	461a      	movhi	r2, r3
 80163ba:	b179      	cbz	r1, 80163dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80163bc:	29ff      	cmp	r1, #255	; 0xff
 80163be:	fa5f f98c 	uxtb.w	r9, ip
 80163c2:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80163c6:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80163ca:	d126      	bne.n	801641a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80163cc:	9f04      	ldr	r7, [sp, #16]
 80163ce:	2fff      	cmp	r7, #255	; 0xff
 80163d0:	d123      	bne.n	801641a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80163d2:	4682      	mov	sl, r0
 80163d4:	4611      	mov	r1, r2
 80163d6:	f10a 0a03 	add.w	sl, sl, #3
 80163da:	b9a9      	cbnz	r1, 8016408 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80163dc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80163e0:	429e      	cmp	r6, r3
 80163e2:	4410      	add	r0, r2
 80163e4:	d8c6      	bhi.n	8016374 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80163e6:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80163ea:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80163ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163f0:	1b64      	subs	r4, r4, r5
 80163f2:	9a01      	ldr	r2, [sp, #4]
 80163f4:	881b      	ldrh	r3, [r3, #0]
 80163f6:	b2a4      	uxth	r4, r4
 80163f8:	1a9b      	subs	r3, r3, r2
 80163fa:	2c00      	cmp	r4, #0
 80163fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016400:	bf18      	it	ne
 8016402:	2500      	movne	r5, #0
 8016404:	4418      	add	r0, r3
 8016406:	e7b5      	b.n	8016374 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8016408:	3901      	subs	r1, #1
 801640a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801640e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8016412:	f80a cc01 	strb.w	ip, [sl, #-1]
 8016416:	b289      	uxth	r1, r1
 8016418:	e7dd      	b.n	80163d6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801641a:	9f04      	ldr	r7, [sp, #16]
 801641c:	fb07 fa01 	mul.w	sl, r7, r1
 8016420:	f10a 0101 	add.w	r1, sl, #1
 8016424:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8016428:	1209      	asrs	r1, r1, #8
 801642a:	ea6f 0a01 	mvn.w	sl, r1
 801642e:	b289      	uxth	r1, r1
 8016430:	fb19 f901 	smulbb	r9, r9, r1
 8016434:	fa5f fa8a 	uxtb.w	sl, sl
 8016438:	fb18 f801 	smulbb	r8, r8, r1
 801643c:	fb1c f101 	smulbb	r1, ip, r1
 8016440:	fa1f f789 	uxth.w	r7, r9
 8016444:	4684      	mov	ip, r0
 8016446:	4691      	mov	r9, r2
 8016448:	9707      	str	r7, [sp, #28]
 801644a:	b289      	uxth	r1, r1
 801644c:	fa1f f788 	uxth.w	r7, r8
 8016450:	9708      	str	r7, [sp, #32]
 8016452:	f10c 0c03 	add.w	ip, ip, #3
 8016456:	f1b9 0f00 	cmp.w	r9, #0
 801645a:	d0bf      	beq.n	80163dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801645c:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8016460:	f109 39ff 	add.w	r9, r9, #4294967295
 8016464:	9f07      	ldr	r7, [sp, #28]
 8016466:	fa1f f989 	uxth.w	r9, r9
 801646a:	fb08 780a 	mla	r8, r8, sl, r7
 801646e:	9f08      	ldr	r7, [sp, #32]
 8016470:	fa1f f888 	uxth.w	r8, r8
 8016474:	f108 0b01 	add.w	fp, r8, #1
 8016478:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801647c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016480:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8016484:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8016488:	fb08 780a 	mla	r8, r8, sl, r7
 801648c:	fa1f f888 	uxth.w	r8, r8
 8016490:	f108 0b01 	add.w	fp, r8, #1
 8016494:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016498:	ea4f 2828 	mov.w	r8, r8, asr #8
 801649c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80164a0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80164a4:	fb08 180a 	mla	r8, r8, sl, r1
 80164a8:	fa1f f888 	uxth.w	r8, r8
 80164ac:	f108 0b01 	add.w	fp, r8, #1
 80164b0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80164b4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80164b8:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80164bc:	e7c9      	b.n	8016452 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80164be:	4b04      	ldr	r3, [pc, #16]	; (80164d0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80164c0:	6818      	ldr	r0, [r3, #0]
 80164c2:	6803      	ldr	r3, [r0, #0]
 80164c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164c6:	4798      	blx	r3
 80164c8:	b00f      	add	sp, #60	; 0x3c
 80164ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164ce:	bf00      	nop
 80164d0:	2401aa78 	.word	0x2401aa78
 80164d4:	2401aa72 	.word	0x2401aa72

080164d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80164d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164dc:	b089      	sub	sp, #36	; 0x24
 80164de:	4607      	mov	r7, r0
 80164e0:	4689      	mov	r9, r1
 80164e2:	4692      	mov	sl, r2
 80164e4:	ac08      	add	r4, sp, #32
 80164e6:	461e      	mov	r6, r3
 80164e8:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80164ec:	4620      	mov	r0, r4
 80164ee:	f7fd ffa5 	bl	801443c <_ZNK8touchgfx6Bitmap7getDataEv>
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	4605      	mov	r5, r0
 80164f6:	4620      	mov	r0, r4
 80164f8:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80164fc:	f7fd feea 	bl	80142d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016500:	4683      	mov	fp, r0
 8016502:	4620      	mov	r0, r4
 8016504:	f7fd ff1a 	bl	801433c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016508:	4653      	mov	r3, sl
 801650a:	464a      	mov	r2, r9
 801650c:	4639      	mov	r1, r7
 801650e:	9500      	str	r5, [sp, #0]
 8016510:	e9cd b001 	strd	fp, r0, [sp, #4]
 8016514:	a806      	add	r0, sp, #24
 8016516:	47c0      	blx	r8
 8016518:	a906      	add	r1, sp, #24
 801651a:	4630      	mov	r0, r6
 801651c:	f7fd fdbe 	bl	801409c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8016520:	4628      	mov	r0, r5
 8016522:	b009      	add	sp, #36	; 0x24
 8016524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016528 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8016528:	b510      	push	{r4, lr}
 801652a:	4604      	mov	r4, r0
 801652c:	2104      	movs	r1, #4
 801652e:	f007 f928 	bl	801d782 <_ZdlPvj>
 8016532:	4620      	mov	r0, r4
 8016534:	bd10      	pop	{r4, pc}

08016536 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8016536:	b510      	push	{r4, lr}
 8016538:	4604      	mov	r4, r0
 801653a:	2104      	movs	r1, #4
 801653c:	f007 f921 	bl	801d782 <_ZdlPvj>
 8016540:	4620      	mov	r0, r4
 8016542:	bd10      	pop	{r4, pc}

08016544 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8016544:	b510      	push	{r4, lr}
 8016546:	4604      	mov	r4, r0
 8016548:	f640 0144 	movw	r1, #2116	; 0x844
 801654c:	f007 f919 	bl	801d782 <_ZdlPvj>
 8016550:	4620      	mov	r0, r4
 8016552:	bd10      	pop	{r4, pc}

08016554 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8016554:	b510      	push	{r4, lr}
 8016556:	4604      	mov	r4, r0
 8016558:	2104      	movs	r1, #4
 801655a:	f007 f912 	bl	801d782 <_ZdlPvj>
 801655e:	4620      	mov	r0, r4
 8016560:	bd10      	pop	{r4, pc}

08016562 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8016562:	b510      	push	{r4, lr}
 8016564:	4604      	mov	r4, r0
 8016566:	2104      	movs	r1, #4
 8016568:	f007 f90b 	bl	801d782 <_ZdlPvj>
 801656c:	4620      	mov	r0, r4
 801656e:	bd10      	pop	{r4, pc}

08016570 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016570:	b510      	push	{r4, lr}
 8016572:	4604      	mov	r4, r0
 8016574:	2104      	movs	r1, #4
 8016576:	f007 f904 	bl	801d782 <_ZdlPvj>
 801657a:	4620      	mov	r0, r4
 801657c:	bd10      	pop	{r4, pc}

0801657e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801657e:	b510      	push	{r4, lr}
 8016580:	4604      	mov	r4, r0
 8016582:	2104      	movs	r1, #4
 8016584:	f007 f8fd 	bl	801d782 <_ZdlPvj>
 8016588:	4620      	mov	r0, r4
 801658a:	bd10      	pop	{r4, pc}

0801658c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801658c:	b510      	push	{r4, lr}
 801658e:	4604      	mov	r4, r0
 8016590:	2104      	movs	r1, #4
 8016592:	f007 f8f6 	bl	801d782 <_ZdlPvj>
 8016596:	4620      	mov	r0, r4
 8016598:	bd10      	pop	{r4, pc}

0801659a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801659a:	b510      	push	{r4, lr}
 801659c:	4604      	mov	r4, r0
 801659e:	2104      	movs	r1, #4
 80165a0:	f007 f8ef 	bl	801d782 <_ZdlPvj>
 80165a4:	4620      	mov	r0, r4
 80165a6:	bd10      	pop	{r4, pc}

080165a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80165a8:	b510      	push	{r4, lr}
 80165aa:	4604      	mov	r4, r0
 80165ac:	2104      	movs	r1, #4
 80165ae:	f007 f8e8 	bl	801d782 <_ZdlPvj>
 80165b2:	4620      	mov	r0, r4
 80165b4:	bd10      	pop	{r4, pc}

080165b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80165b6:	b510      	push	{r4, lr}
 80165b8:	4604      	mov	r4, r0
 80165ba:	2104      	movs	r1, #4
 80165bc:	f007 f8e1 	bl	801d782 <_ZdlPvj>
 80165c0:	4620      	mov	r0, r4
 80165c2:	bd10      	pop	{r4, pc}

080165c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80165c4:	b510      	push	{r4, lr}
 80165c6:	4604      	mov	r4, r0
 80165c8:	2104      	movs	r1, #4
 80165ca:	f007 f8da 	bl	801d782 <_ZdlPvj>
 80165ce:	4620      	mov	r0, r4
 80165d0:	bd10      	pop	{r4, pc}

080165d2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80165d2:	b510      	push	{r4, lr}
 80165d4:	4604      	mov	r4, r0
 80165d6:	2104      	movs	r1, #4
 80165d8:	f007 f8d3 	bl	801d782 <_ZdlPvj>
 80165dc:	4620      	mov	r0, r4
 80165de:	bd10      	pop	{r4, pc}

080165e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80165e0:	b510      	push	{r4, lr}
 80165e2:	4604      	mov	r4, r0
 80165e4:	2104      	movs	r1, #4
 80165e6:	f007 f8cc 	bl	801d782 <_ZdlPvj>
 80165ea:	4620      	mov	r0, r4
 80165ec:	bd10      	pop	{r4, pc}

080165ee <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80165ee:	b510      	push	{r4, lr}
 80165f0:	4604      	mov	r4, r0
 80165f2:	2104      	movs	r1, #4
 80165f4:	f007 f8c5 	bl	801d782 <_ZdlPvj>
 80165f8:	4620      	mov	r0, r4
 80165fa:	bd10      	pop	{r4, pc}

080165fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80165fc:	b510      	push	{r4, lr}
 80165fe:	4604      	mov	r4, r0
 8016600:	2104      	movs	r1, #4
 8016602:	f007 f8be 	bl	801d782 <_ZdlPvj>
 8016606:	4620      	mov	r0, r4
 8016608:	bd10      	pop	{r4, pc}

0801660a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801660a:	b510      	push	{r4, lr}
 801660c:	4604      	mov	r4, r0
 801660e:	2104      	movs	r1, #4
 8016610:	f007 f8b7 	bl	801d782 <_ZdlPvj>
 8016614:	4620      	mov	r0, r4
 8016616:	bd10      	pop	{r4, pc}

08016618 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8016618:	b510      	push	{r4, lr}
 801661a:	4604      	mov	r4, r0
 801661c:	2104      	movs	r1, #4
 801661e:	f007 f8b0 	bl	801d782 <_ZdlPvj>
 8016622:	4620      	mov	r0, r4
 8016624:	bd10      	pop	{r4, pc}

08016626 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8016626:	b510      	push	{r4, lr}
 8016628:	4604      	mov	r4, r0
 801662a:	2104      	movs	r1, #4
 801662c:	f007 f8a9 	bl	801d782 <_ZdlPvj>
 8016630:	4620      	mov	r0, r4
 8016632:	bd10      	pop	{r4, pc}

08016634 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8016634:	b510      	push	{r4, lr}
 8016636:	4604      	mov	r4, r0
 8016638:	2104      	movs	r1, #4
 801663a:	f007 f8a2 	bl	801d782 <_ZdlPvj>
 801663e:	4620      	mov	r0, r4
 8016640:	bd10      	pop	{r4, pc}

08016642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8016642:	b510      	push	{r4, lr}
 8016644:	4604      	mov	r4, r0
 8016646:	2104      	movs	r1, #4
 8016648:	f007 f89b 	bl	801d782 <_ZdlPvj>
 801664c:	4620      	mov	r0, r4
 801664e:	bd10      	pop	{r4, pc}

08016650 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8016650:	b510      	push	{r4, lr}
 8016652:	4604      	mov	r4, r0
 8016654:	2104      	movs	r1, #4
 8016656:	f007 f894 	bl	801d782 <_ZdlPvj>
 801665a:	4620      	mov	r0, r4
 801665c:	bd10      	pop	{r4, pc}

0801665e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801665e:	b510      	push	{r4, lr}
 8016660:	4604      	mov	r4, r0
 8016662:	2104      	movs	r1, #4
 8016664:	f007 f88d 	bl	801d782 <_ZdlPvj>
 8016668:	4620      	mov	r0, r4
 801666a:	bd10      	pop	{r4, pc}

0801666c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016670:	b08f      	sub	sp, #60	; 0x3c
 8016672:	461c      	mov	r4, r3
 8016674:	460e      	mov	r6, r1
 8016676:	9206      	str	r2, [sp, #24]
 8016678:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801667c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801667e:	9202      	str	r2, [sp, #8]
 8016680:	2a00      	cmp	r2, #0
 8016682:	f000 8128 	beq.w	80168d6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8016686:	6820      	ldr	r0, [r4, #0]
 8016688:	aa0a      	add	r2, sp, #40	; 0x28
 801668a:	6861      	ldr	r1, [r4, #4]
 801668c:	c203      	stmia	r2!, {r0, r1}
 801668e:	6818      	ldr	r0, [r3, #0]
 8016690:	aa0c      	add	r2, sp, #48	; 0x30
 8016692:	6859      	ldr	r1, [r3, #4]
 8016694:	c203      	stmia	r2!, {r0, r1}
 8016696:	a80a      	add	r0, sp, #40	; 0x28
 8016698:	f7fa feb8 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801669c:	4621      	mov	r1, r4
 801669e:	a80c      	add	r0, sp, #48	; 0x30
 80166a0:	f7fa fedc 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80166a4:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 80166a8:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 80166ac:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80166b0:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 80166b4:	bfdb      	ittet	le
 80166b6:	b2bb      	uxthle	r3, r7
 80166b8:	f44f 6280 	movle.w	r2, #1024	; 0x400
 80166bc:	2301      	movgt	r3, #1
 80166be:	fb92 f3f3 	sdivle	r3, r2, r3
 80166c2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80166c6:	441d      	add	r5, r3
 80166c8:	fb92 f1f3 	sdiv	r1, r2, r3
 80166cc:	fa1f fc81 	uxth.w	ip, r1
 80166d0:	3d01      	subs	r5, #1
 80166d2:	fb0c 2413 	mls	r4, ip, r3, r2
 80166d6:	4661      	mov	r1, ip
 80166d8:	fb14 f407 	smulbb	r4, r4, r7
 80166dc:	4404      	add	r4, r0
 80166de:	fb95 f5f3 	sdiv	r5, r5, r3
 80166e2:	b2a4      	uxth	r4, r4
 80166e4:	b121      	cbz	r1, 80166f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 80166e6:	9b06      	ldr	r3, [sp, #24]
 80166e8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80166ec:	ba1b      	rev	r3, r3
 80166ee:	441e      	add	r6, r3
 80166f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80166f4:	b2ad      	uxth	r5, r5
 80166f6:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 80166fa:	4418      	add	r0, r3
 80166fc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8016700:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 8016704:	00ad      	lsls	r5, r5, #2
 8016706:	441a      	add	r2, r3
 8016708:	4b74      	ldr	r3, [pc, #464]	; (80168dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801670a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801670e:	6818      	ldr	r0, [r3, #0]
 8016710:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016714:	6803      	ldr	r3, [r0, #0]
 8016716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016718:	4798      	blx	r3
 801671a:	4a71      	ldr	r2, [pc, #452]	; (80168e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801671c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8016720:	2c00      	cmp	r4, #0
 8016722:	8813      	ldrh	r3, [r2, #0]
 8016724:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8016728:	9209      	str	r2, [sp, #36]	; 0x24
 801672a:	fb03 c101 	mla	r1, r3, r1, ip
 801672e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8016732:	fb03 f307 	mul.w	r3, r3, r7
 8016736:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801673a:	9204      	str	r2, [sp, #16]
 801673c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016740:	9a02      	ldr	r2, [sp, #8]
 8016742:	4408      	add	r0, r1
 8016744:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8016748:	4403      	add	r3, r0
 801674a:	b292      	uxth	r2, r2
 801674c:	9307      	str	r3, [sp, #28]
 801674e:	f105 0304 	add.w	r3, r5, #4
 8016752:	bf0c      	ite	eq
 8016754:	4645      	moveq	r5, r8
 8016756:	2500      	movne	r5, #0
 8016758:	9308      	str	r3, [sp, #32]
 801675a:	2300      	movs	r3, #0
 801675c:	b2ad      	uxth	r5, r5
 801675e:	9205      	str	r2, [sp, #20]
 8016760:	9303      	str	r3, [sp, #12]
 8016762:	9a07      	ldr	r2, [sp, #28]
 8016764:	4282      	cmp	r2, r0
 8016766:	f240 80b1 	bls.w	80168cc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801676a:	b95b      	cbnz	r3, 8016784 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801676c:	7832      	ldrb	r2, [r6, #0]
 801676e:	0993      	lsrs	r3, r2, #6
 8016770:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016774:	9203      	str	r2, [sp, #12]
 8016776:	1e5a      	subs	r2, r3, #1
 8016778:	2a02      	cmp	r2, #2
 801677a:	bf8d      	iteet	hi
 801677c:	7873      	ldrbhi	r3, [r6, #1]
 801677e:	3601      	addls	r6, #1
 8016780:	b29b      	uxthls	r3, r3
 8016782:	3602      	addhi	r6, #2
 8016784:	b184      	cbz	r4, 80167a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8016786:	429c      	cmp	r4, r3
 8016788:	bf91      	iteee	ls
 801678a:	1b1c      	subls	r4, r3, r4
 801678c:	1ae4      	subhi	r4, r4, r3
 801678e:	4629      	movhi	r1, r5
 8016790:	f04f 0e00 	movhi.w	lr, #0
 8016794:	bf9b      	ittet	ls
 8016796:	fa1f fe84 	uxthls.w	lr, r4
 801679a:	2400      	movls	r4, #0
 801679c:	b2a4      	uxthhi	r4, r4
 801679e:	fa1f f188 	uxthls.w	r1, r8
 80167a2:	4673      	mov	r3, lr
 80167a4:	460d      	mov	r5, r1
 80167a6:	e7dc      	b.n	8016762 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80167a8:	2203      	movs	r2, #3
 80167aa:	9908      	ldr	r1, [sp, #32]
 80167ac:	42ab      	cmp	r3, r5
 80167ae:	4617      	mov	r7, r2
 80167b0:	9a03      	ldr	r2, [sp, #12]
 80167b2:	bf24      	itt	cs
 80167b4:	eba3 0e05 	subcs.w	lr, r3, r5
 80167b8:	9501      	strcs	r5, [sp, #4]
 80167ba:	fb17 1702 	smlabb	r7, r7, r2, r1
 80167be:	9a06      	ldr	r2, [sp, #24]
 80167c0:	bf34      	ite	cc
 80167c2:	1ae9      	subcc	r1, r5, r3
 80167c4:	fa1f fe8e 	uxthcs.w	lr, lr
 80167c8:	4417      	add	r7, r2
 80167ca:	9a02      	ldr	r2, [sp, #8]
 80167cc:	bf2f      	iteee	cs
 80167ce:	4621      	movcs	r1, r4
 80167d0:	b289      	uxthcc	r1, r1
 80167d2:	9301      	strcc	r3, [sp, #4]
 80167d4:	46a6      	movcc	lr, r4
 80167d6:	2aff      	cmp	r2, #255	; 0xff
 80167d8:	d11e      	bne.n	8016818 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 80167da:	4681      	mov	r9, r0
 80167dc:	f8dd c004 	ldr.w	ip, [sp, #4]
 80167e0:	f109 0903 	add.w	r9, r9, #3
 80167e4:	f1bc 0f00 	cmp.w	ip, #0
 80167e8:	d15f      	bne.n	80168aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 80167ea:	9a01      	ldr	r2, [sp, #4]
 80167ec:	42ab      	cmp	r3, r5
 80167ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80167f2:	4410      	add	r0, r2
 80167f4:	d3d5      	bcc.n	80167a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80167f6:	fa1f f188 	uxth.w	r1, r8
 80167fa:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80167fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016800:	1a64      	subs	r4, r4, r1
 8016802:	881b      	ldrh	r3, [r3, #0]
 8016804:	b2a4      	uxth	r4, r4
 8016806:	eba3 0308 	sub.w	r3, r3, r8
 801680a:	2c00      	cmp	r4, #0
 801680c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016810:	bf18      	it	ne
 8016812:	2100      	movne	r1, #0
 8016814:	4418      	add	r0, r3
 8016816:	e7c4      	b.n	80167a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8016818:	4684      	mov	ip, r0
 801681a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801681e:	f10c 0c03 	add.w	ip, ip, #3
 8016822:	f1ba 0f00 	cmp.w	sl, #0
 8016826:	d0e0      	beq.n	80167ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8016828:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801682c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016830:	9a05      	ldr	r2, [sp, #20]
 8016832:	f897 9000 	ldrb.w	r9, [r7]
 8016836:	fa1f fa8a 	uxth.w	sl, sl
 801683a:	fb1b fb02 	smulbb	fp, fp, r2
 801683e:	9a04      	ldr	r2, [sp, #16]
 8016840:	fb09 b902 	mla	r9, r9, r2, fp
 8016844:	9a05      	ldr	r2, [sp, #20]
 8016846:	fa1f f989 	uxth.w	r9, r9
 801684a:	f109 0b01 	add.w	fp, r9, #1
 801684e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016852:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8016856:	fb1b fb02 	smulbb	fp, fp, r2
 801685a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801685e:	9a04      	ldr	r2, [sp, #16]
 8016860:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8016864:	f897 9001 	ldrb.w	r9, [r7, #1]
 8016868:	fb09 b902 	mla	r9, r9, r2, fp
 801686c:	9a05      	ldr	r2, [sp, #20]
 801686e:	fa1f f989 	uxth.w	r9, r9
 8016872:	f109 0b01 	add.w	fp, r9, #1
 8016876:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801687a:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801687e:	fb1b fb02 	smulbb	fp, fp, r2
 8016882:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016886:	9a04      	ldr	r2, [sp, #16]
 8016888:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801688c:	f897 9002 	ldrb.w	r9, [r7, #2]
 8016890:	fb09 b902 	mla	r9, r9, r2, fp
 8016894:	fa1f f989 	uxth.w	r9, r9
 8016898:	f109 0b01 	add.w	fp, r9, #1
 801689c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80168a0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80168a4:	f80c 9c01 	strb.w	r9, [ip, #-1]
 80168a8:	e7b9      	b.n	801681e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 80168aa:	f897 a000 	ldrb.w	sl, [r7]
 80168ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 80168b2:	f809 ac03 	strb.w	sl, [r9, #-3]
 80168b6:	fa1f fc8c 	uxth.w	ip, ip
 80168ba:	f897 a001 	ldrb.w	sl, [r7, #1]
 80168be:	f809 ac02 	strb.w	sl, [r9, #-2]
 80168c2:	f897 a002 	ldrb.w	sl, [r7, #2]
 80168c6:	f809 ac01 	strb.w	sl, [r9, #-1]
 80168ca:	e789      	b.n	80167e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 80168cc:	4b03      	ldr	r3, [pc, #12]	; (80168dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 80168ce:	6818      	ldr	r0, [r3, #0]
 80168d0:	6803      	ldr	r3, [r0, #0]
 80168d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168d4:	4798      	blx	r3
 80168d6:	b00f      	add	sp, #60	; 0x3c
 80168d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168dc:	2401aa78 	.word	0x2401aa78
 80168e0:	2401aa72 	.word	0x2401aa72

080168e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80168e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168e8:	b09b      	sub	sp, #108	; 0x6c
 80168ea:	461d      	mov	r5, r3
 80168ec:	4604      	mov	r4, r0
 80168ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80168f0:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 80168f4:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 80168f8:	9208      	str	r2, [sp, #32]
 80168fa:	2a00      	cmp	r2, #0
 80168fc:	f000 81f3 	beq.w	8016ce6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8016900:	6828      	ldr	r0, [r5, #0]
 8016902:	aa16      	add	r2, sp, #88	; 0x58
 8016904:	6869      	ldr	r1, [r5, #4]
 8016906:	c203      	stmia	r2!, {r0, r1}
 8016908:	6818      	ldr	r0, [r3, #0]
 801690a:	aa18      	add	r2, sp, #96	; 0x60
 801690c:	6859      	ldr	r1, [r3, #4]
 801690e:	c203      	stmia	r2!, {r0, r1}
 8016910:	a816      	add	r0, sp, #88	; 0x58
 8016912:	f7fa fd7b 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016916:	4629      	mov	r1, r5
 8016918:	a818      	add	r0, sp, #96	; 0x60
 801691a:	f7fa fd9f 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801691e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8016922:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 8016926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801692a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 801692e:	bfdb      	ittet	le
 8016930:	b29a      	uxthle	r2, r3
 8016932:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8016936:	f04f 0a01 	movgt.w	sl, #1
 801693a:	fb91 faf2 	sdivle	sl, r1, r2
 801693e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8016942:	4456      	add	r6, sl
 8016944:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8016948:	3e01      	subs	r6, #1
 801694a:	fb92 f0fa 	sdiv	r0, r2, sl
 801694e:	b280      	uxth	r0, r0
 8016950:	fb00 281a 	mls	r8, r0, sl, r2
 8016954:	900e      	str	r0, [sp, #56]	; 0x38
 8016956:	fb18 f803 	smulbb	r8, r8, r3
 801695a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801695e:	4488      	add	r8, r1
 8016960:	4419      	add	r1, r3
 8016962:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 8016966:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 801696a:	fa1f f888 	uxth.w	r8, r8
 801696e:	441a      	add	r2, r3
 8016970:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8016974:	9303      	str	r3, [sp, #12]
 8016976:	4b9c      	ldr	r3, [pc, #624]	; (8016be8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8016978:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 801697c:	6818      	ldr	r0, [r3, #0]
 801697e:	6803      	ldr	r3, [r0, #0]
 8016980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016982:	4798      	blx	r3
 8016984:	4b99      	ldr	r3, [pc, #612]	; (8016bec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8016986:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 801698a:	f1b8 0f00 	cmp.w	r8, #0
 801698e:	881a      	ldrh	r2, [r3, #0]
 8016990:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 8016994:	fb02 f505 	mul.w	r5, r2, r5
 8016998:	fb02 7101 	mla	r1, r2, r1, r7
 801699c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169a0:	9314      	str	r3, [sp, #80]	; 0x50
 80169a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80169a6:	9b08      	ldr	r3, [sp, #32]
 80169a8:	fb96 f6fa 	sdiv	r6, r6, sl
 80169ac:	4408      	add	r0, r1
 80169ae:	f106 0601 	add.w	r6, r6, #1
 80169b2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80169b6:	f04f 0100 	mov.w	r1, #0
 80169ba:	eb00 0205 	add.w	r2, r0, r5
 80169be:	b2b6      	uxth	r6, r6
 80169c0:	b29b      	uxth	r3, r3
 80169c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80169c4:	9209      	str	r2, [sp, #36]	; 0x24
 80169c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80169c8:	930d      	str	r3, [sp, #52]	; 0x34
 80169ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80169ce:	4b88      	ldr	r3, [pc, #544]	; (8016bf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 80169d0:	f106 0204 	add.w	r2, r6, #4
 80169d4:	eba3 0304 	sub.w	r3, r3, r4
 80169d8:	9205      	str	r2, [sp, #20]
 80169da:	9a03      	ldr	r2, [sp, #12]
 80169dc:	bf18      	it	ne
 80169de:	2200      	movne	r2, #0
 80169e0:	9315      	str	r3, [sp, #84]	; 0x54
 80169e2:	b292      	uxth	r2, r2
 80169e4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80169e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169e8:	fa11 f383 	uxtah	r3, r1, r3
 80169ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80169ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80169f2:	3304      	adds	r3, #4
 80169f4:	9306      	str	r3, [sp, #24]
 80169f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169f8:	4283      	cmp	r3, r0
 80169fa:	f240 816f 	bls.w	8016cdc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 80169fe:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016a02:	f04f 0900 	mov.w	r9, #0
 8016a06:	9d06      	ldr	r5, [sp, #24]
 8016a08:	fbb8 f3f3 	udiv	r3, r8, r3
 8016a0c:	ebaa 0303 	sub.w	r3, sl, r3
 8016a10:	782d      	ldrb	r5, [r5, #0]
 8016a12:	b29b      	uxth	r3, r3
 8016a14:	950f      	str	r5, [sp, #60]	; 0x3c
 8016a16:	3501      	adds	r5, #1
 8016a18:	9312      	str	r3, [sp, #72]	; 0x48
 8016a1a:	9b06      	ldr	r3, [sp, #24]
 8016a1c:	9504      	str	r5, [sp, #16]
 8016a1e:	7859      	ldrb	r1, [r3, #1]
 8016a20:	789b      	ldrb	r3, [r3, #2]
 8016a22:	021b      	lsls	r3, r3, #8
 8016a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8016a28:	9906      	ldr	r1, [sp, #24]
 8016a2a:	78c9      	ldrb	r1, [r1, #3]
 8016a2c:	430b      	orrs	r3, r1
 8016a2e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8016a30:	4419      	add	r1, r3
 8016a32:	1c4d      	adds	r5, r1, #1
 8016a34:	7849      	ldrb	r1, [r1, #1]
 8016a36:	9502      	str	r5, [sp, #8]
 8016a38:	0209      	lsls	r1, r1, #8
 8016a3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8016a3c:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8016a40:	5ceb      	ldrb	r3, [r5, r3]
 8016a42:	4319      	orrs	r1, r3
 8016a44:	b28b      	uxth	r3, r1
 8016a46:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8016a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	9307      	str	r3, [sp, #28]
 8016a50:	2301      	movs	r3, #1
 8016a52:	e9cd 3300 	strd	r3, r3, [sp]
 8016a56:	469c      	mov	ip, r3
 8016a58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8016a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a5e:	f1b8 0f00 	cmp.w	r8, #0
 8016a62:	f000 8082 	beq.w	8016b6a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8016a66:	45c4      	cmp	ip, r8
 8016a68:	d270      	bcs.n	8016b4c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8016a6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a6c:	eba8 080c 	sub.w	r8, r8, ip
 8016a70:	4611      	mov	r1, r2
 8016a72:	4283      	cmp	r3, r0
 8016a74:	fa1f f888 	uxth.w	r8, r8
 8016a78:	d802      	bhi.n	8016a80 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8016a7a:	e074      	b.n	8016b66 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d15f      	bne.n	8016b40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8016a80:	9b02      	ldr	r3, [sp, #8]
 8016a82:	9a01      	ldr	r2, [sp, #4]
 8016a84:	785b      	ldrb	r3, [r3, #1]
 8016a86:	f1c2 0207 	rsb	r2, r2, #7
 8016a8a:	9d01      	ldr	r5, [sp, #4]
 8016a8c:	4093      	lsls	r3, r2
 8016a8e:	005b      	lsls	r3, r3, #1
 8016a90:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8016a94:	9b02      	ldr	r3, [sp, #8]
 8016a96:	781b      	ldrb	r3, [r3, #0]
 8016a98:	412b      	asrs	r3, r5
 8016a9a:	b2db      	uxtb	r3, r3
 8016a9c:	4313      	orrs	r3, r2
 8016a9e:	462a      	mov	r2, r5
 8016aa0:	3201      	adds	r2, #1
 8016aa2:	b29e      	uxth	r6, r3
 8016aa4:	b2d2      	uxtb	r2, r2
 8016aa6:	2a08      	cmp	r2, #8
 8016aa8:	9201      	str	r2, [sp, #4]
 8016aaa:	9a02      	ldr	r2, [sp, #8]
 8016aac:	bf09      	itett	eq
 8016aae:	3202      	addeq	r2, #2
 8016ab0:	3201      	addne	r2, #1
 8016ab2:	9202      	streq	r2, [sp, #8]
 8016ab4:	2200      	moveq	r2, #0
 8016ab6:	bf14      	ite	ne
 8016ab8:	9202      	strne	r2, [sp, #8]
 8016aba:	9201      	streq	r2, [sp, #4]
 8016abc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016abe:	42b2      	cmp	r2, r6
 8016ac0:	d309      	bcc.n	8016ad6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8016ac2:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8016ac6:	2301      	movs	r3, #1
 8016ac8:	9a04      	ldr	r2, [sp, #16]
 8016aca:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8016ace:	d30e      	bcc.n	8016aee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	2500      	movs	r5, #0
 8016ad4:	e035      	b.n	8016b42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8016ad6:	9b04      	ldr	r3, [sp, #16]
 8016ad8:	429e      	cmp	r6, r3
 8016ada:	d318      	bcc.n	8016b0e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8016adc:	9b00      	ldr	r3, [sp, #0]
 8016ade:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 8016ae2:	18e3      	adds	r3, r4, r3
 8016ae4:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 8016ae8:	9b00      	ldr	r3, [sp, #0]
 8016aea:	3301      	adds	r3, #1
 8016aec:	b29b      	uxth	r3, r3
 8016aee:	9a04      	ldr	r2, [sp, #16]
 8016af0:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 8016af4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016af8:	9f00      	ldr	r7, [sp, #0]
 8016afa:	7115      	strb	r5, [r2, #4]
 8016afc:	3701      	adds	r7, #1
 8016afe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016b00:	7157      	strb	r7, [r2, #5]
 8016b02:	80d5      	strh	r5, [r2, #6]
 8016b04:	9a04      	ldr	r2, [sp, #16]
 8016b06:	3201      	adds	r2, #1
 8016b08:	b292      	uxth	r2, r2
 8016b0a:	9204      	str	r2, [sp, #16]
 8016b0c:	e7e0      	b.n	8016ad0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8016b0e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016b12:	4632      	mov	r2, r6
 8016b14:	795b      	ldrb	r3, [r3, #5]
 8016b16:	f603 0504 	addw	r5, r3, #2052	; 0x804
 8016b1a:	4425      	add	r5, r4
 8016b1c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8016b1e:	eb07 0c05 	add.w	ip, r7, r5
 8016b22:	f1bc 0f00 	cmp.w	ip, #0
 8016b26:	dd07      	ble.n	8016b38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8016b28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016b2c:	f892 c004 	ldrb.w	ip, [r2, #4]
 8016b30:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8016b34:	88d2      	ldrh	r2, [r2, #6]
 8016b36:	e7f1      	b.n	8016b1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8016b38:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8016b3c:	b29b      	uxth	r3, r3
 8016b3e:	e7c3      	b.n	8016ac8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8016b40:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016b42:	460a      	mov	r2, r1
 8016b44:	960a      	str	r6, [sp, #40]	; 0x28
 8016b46:	46a9      	mov	r9, r5
 8016b48:	469c      	mov	ip, r3
 8016b4a:	e788      	b.n	8016a5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8016b4c:	ebac 0308 	sub.w	r3, ip, r8
 8016b50:	eb09 0508 	add.w	r5, r9, r8
 8016b54:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8016b58:	b29b      	uxth	r3, r3
 8016b5a:	b2ad      	uxth	r5, r5
 8016b5c:	f04f 0800 	mov.w	r8, #0
 8016b60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016b62:	4282      	cmp	r2, r0
 8016b64:	d88a      	bhi.n	8016a7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8016b66:	460a      	mov	r2, r1
 8016b68:	e745      	b.n	80169f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8016b6a:	4594      	cmp	ip, r2
 8016b6c:	9d08      	ldr	r5, [sp, #32]
 8016b6e:	4686      	mov	lr, r0
 8016b70:	bf27      	ittee	cs
 8016b72:	ebac 0302 	subcs.w	r3, ip, r2
 8016b76:	4616      	movcs	r6, r2
 8016b78:	eba2 010c 	subcc.w	r1, r2, ip
 8016b7c:	4666      	movcc	r6, ip
 8016b7e:	bf27      	ittee	cs
 8016b80:	b29b      	uxthcs	r3, r3
 8016b82:	4641      	movcs	r1, r8
 8016b84:	b289      	uxthcc	r1, r1
 8016b86:	4643      	movcc	r3, r8
 8016b88:	2dff      	cmp	r5, #255	; 0xff
 8016b8a:	eb09 0506 	add.w	r5, r9, r6
 8016b8e:	b2ad      	uxth	r5, r5
 8016b90:	d130      	bne.n	8016bf4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8016b92:	45a9      	cmp	r9, r5
 8016b94:	f10e 0e03 	add.w	lr, lr, #3
 8016b98:	d17a      	bne.n	8016c90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8016b9a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016b9e:	4594      	cmp	ip, r2
 8016ba0:	4430      	add	r0, r6
 8016ba2:	d3db      	bcc.n	8016b5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8016ba4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ba6:	9903      	ldr	r1, [sp, #12]
 8016ba8:	8812      	ldrh	r2, [r2, #0]
 8016baa:	1a52      	subs	r2, r2, r1
 8016bac:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016bae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016bb2:	4410      	add	r0, r2
 8016bb4:	9a07      	ldr	r2, [sp, #28]
 8016bb6:	3201      	adds	r2, #1
 8016bb8:	428a      	cmp	r2, r1
 8016bba:	9207      	str	r2, [sp, #28]
 8016bbc:	f040 8081 	bne.w	8016cc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8016bc0:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8016bc4:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 8016bc8:	9b03      	ldr	r3, [sp, #12]
 8016bca:	eba8 080c 	sub.w	r8, r8, ip
 8016bce:	fa1f f888 	uxth.w	r8, r8
 8016bd2:	f1b8 0f00 	cmp.w	r8, #0
 8016bd6:	bf08      	it	eq
 8016bd8:	461a      	moveq	r2, r3
 8016bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bdc:	bf18      	it	ne
 8016bde:	2200      	movne	r2, #0
 8016be0:	3301      	adds	r3, #1
 8016be2:	b292      	uxth	r2, r2
 8016be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016be6:	e6fd      	b.n	80169e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8016be8:	2401aa78 	.word	0x2401aa78
 8016bec:	2401aa72 	.word	0x2401aa72
 8016bf0:	fffff7fb 	.word	0xfffff7fb
 8016bf4:	45a9      	cmp	r9, r5
 8016bf6:	f10e 0e03 	add.w	lr, lr, #3
 8016bfa:	d0ce      	beq.n	8016b9a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8016bfc:	f109 0701 	add.w	r7, r9, #1
 8016c00:	44a1      	add	r9, r4
 8016c02:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8016c06:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 8016c0a:	9713      	str	r7, [sp, #76]	; 0x4c
 8016c0c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016c10:	9f05      	ldr	r7, [sp, #20]
 8016c12:	eb07 0908 	add.w	r9, r7, r8
 8016c16:	f817 8008 	ldrb.w	r8, [r7, r8]
 8016c1a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016c1c:	fb1b fb07 	smulbb	fp, fp, r7
 8016c20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016c22:	fb08 b807 	mla	r8, r8, r7, fp
 8016c26:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016c28:	fa1f f888 	uxth.w	r8, r8
 8016c2c:	f108 0b01 	add.w	fp, r8, #1
 8016c30:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016c34:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8016c38:	fb1b fb07 	smulbb	fp, fp, r7
 8016c3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c40:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016c42:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8016c46:	f899 8001 	ldrb.w	r8, [r9, #1]
 8016c4a:	fb08 b807 	mla	r8, r8, r7, fp
 8016c4e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8016c50:	fa1f f888 	uxth.w	r8, r8
 8016c54:	f108 0b01 	add.w	fp, r8, #1
 8016c58:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016c5c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c60:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8016c64:	f899 8002 	ldrb.w	r8, [r9, #2]
 8016c68:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8016c6c:	fb19 f907 	smulbb	r9, r9, r7
 8016c70:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016c72:	fb08 9807 	mla	r8, r8, r7, r9
 8016c76:	fa1f f888 	uxth.w	r8, r8
 8016c7a:	f108 0901 	add.w	r9, r8, #1
 8016c7e:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8016c82:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8016c86:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016c8a:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8016c8e:	e7b1      	b.n	8016bf4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8016c90:	f109 0b01 	add.w	fp, r9, #1
 8016c94:	44a1      	add	r9, r4
 8016c96:	9f05      	ldr	r7, [sp, #20]
 8016c98:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 8016c9c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016ca0:	eb07 0908 	add.w	r9, r7, r8
 8016ca4:	f817 8008 	ldrb.w	r8, [r7, r8]
 8016ca8:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8016cac:	f899 8001 	ldrb.w	r8, [r9, #1]
 8016cb0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8016cb4:	f899 8002 	ldrb.w	r8, [r9, #2]
 8016cb8:	fa1f f98b 	uxth.w	r9, fp
 8016cbc:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8016cc0:	e767      	b.n	8016b92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8016cc2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8016cc6:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 8016cca:	eba8 0801 	sub.w	r8, r8, r1
 8016cce:	fa1f f888 	uxth.w	r8, r8
 8016cd2:	f1b8 0f00 	cmp.w	r8, #0
 8016cd6:	bf18      	it	ne
 8016cd8:	2100      	movne	r1, #0
 8016cda:	e741      	b.n	8016b60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8016cdc:	4b03      	ldr	r3, [pc, #12]	; (8016cec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8016cde:	6818      	ldr	r0, [r3, #0]
 8016ce0:	6803      	ldr	r3, [r0, #0]
 8016ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ce4:	4798      	blx	r3
 8016ce6:	b01b      	add	sp, #108	; 0x6c
 8016ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cec:	2401aa78 	.word	0x2401aa78

08016cf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8016cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cf4:	b09d      	sub	sp, #116	; 0x74
 8016cf6:	461d      	mov	r5, r3
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016cfc:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8016d00:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 8016d04:	920c      	str	r2, [sp, #48]	; 0x30
 8016d06:	2a00      	cmp	r2, #0
 8016d08:	f000 81de 	beq.w	80170c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8016d0c:	6828      	ldr	r0, [r5, #0]
 8016d0e:	aa18      	add	r2, sp, #96	; 0x60
 8016d10:	6869      	ldr	r1, [r5, #4]
 8016d12:	c203      	stmia	r2!, {r0, r1}
 8016d14:	6818      	ldr	r0, [r3, #0]
 8016d16:	aa1a      	add	r2, sp, #104	; 0x68
 8016d18:	6859      	ldr	r1, [r3, #4]
 8016d1a:	c203      	stmia	r2!, {r0, r1}
 8016d1c:	a818      	add	r0, sp, #96	; 0x60
 8016d1e:	f7fa fb75 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016d22:	4629      	mov	r1, r5
 8016d24:	a81a      	add	r0, sp, #104	; 0x68
 8016d26:	f7fa fb99 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016d2a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8016d2e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 8016d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016d36:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 8016d3a:	bfdb      	ittet	le
 8016d3c:	b29a      	uxthle	r2, r3
 8016d3e:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8016d42:	2201      	movgt	r2, #1
 8016d44:	fb91 f2f2 	sdivle	r2, r1, r2
 8016d48:	9201      	str	r2, [sp, #4]
 8016d4a:	9801      	ldr	r0, [sp, #4]
 8016d4c:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8016d50:	9901      	ldr	r1, [sp, #4]
 8016d52:	fb92 f0f0 	sdiv	r0, r2, r0
 8016d56:	b280      	uxth	r0, r0
 8016d58:	440f      	add	r7, r1
 8016d5a:	900d      	str	r0, [sp, #52]	; 0x34
 8016d5c:	3f01      	subs	r7, #1
 8016d5e:	9801      	ldr	r0, [sp, #4]
 8016d60:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016d62:	fb05 2510 	mls	r5, r5, r0, r2
 8016d66:	fb97 f7f1 	sdiv	r7, r7, r1
 8016d6a:	fb15 f503 	smulbb	r5, r5, r3
 8016d6e:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8016d72:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016d76:	3701      	adds	r7, #1
 8016d78:	440d      	add	r5, r1
 8016d7a:	4419      	add	r1, r3
 8016d7c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8016d80:	b2bf      	uxth	r7, r7
 8016d82:	441a      	add	r2, r3
 8016d84:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8016d88:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 8016d8c:	00bf      	lsls	r7, r7, #2
 8016d8e:	9304      	str	r3, [sp, #16]
 8016d90:	b2ad      	uxth	r5, r5
 8016d92:	4bb0      	ldr	r3, [pc, #704]	; (8017054 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8016d94:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 8016d98:	6818      	ldr	r0, [r3, #0]
 8016d9a:	6803      	ldr	r3, [r0, #0]
 8016d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d9e:	4798      	blx	r3
 8016da0:	4bad      	ldr	r3, [pc, #692]	; (8017058 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8016da2:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 8016da6:	2d00      	cmp	r5, #0
 8016da8:	881a      	ldrh	r2, [r3, #0]
 8016daa:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8016dae:	fb02 f606 	mul.w	r6, r2, r6
 8016db2:	fb02 c101 	mla	r1, r2, r1, ip
 8016db6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016dba:	9316      	str	r3, [sp, #88]	; 0x58
 8016dbc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016dc0:	4ba6      	ldr	r3, [pc, #664]	; (801705c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8016dc2:	eb00 0801 	add.w	r8, r0, r1
 8016dc6:	bf18      	it	ne
 8016dc8:	2100      	movne	r1, #0
 8016dca:	eba3 0304 	sub.w	r3, r3, r4
 8016dce:	eb08 0206 	add.w	r2, r8, r6
 8016dd2:	9317      	str	r3, [sp, #92]	; 0x5c
 8016dd4:	9208      	str	r2, [sp, #32]
 8016dd6:	f107 0204 	add.w	r2, r7, #4
 8016dda:	9211      	str	r2, [sp, #68]	; 0x44
 8016ddc:	9a04      	ldr	r2, [sp, #16]
 8016dde:	bf08      	it	eq
 8016de0:	4611      	moveq	r1, r2
 8016de2:	2200      	movs	r2, #0
 8016de4:	b289      	uxth	r1, r1
 8016de6:	920b      	str	r2, [sp, #44]	; 0x2c
 8016de8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dec:	fa12 f383 	uxtah	r3, r2, r3
 8016df0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016df6:	3304      	adds	r3, #4
 8016df8:	9306      	str	r3, [sp, #24]
 8016dfa:	9b08      	ldr	r3, [sp, #32]
 8016dfc:	4543      	cmp	r3, r8
 8016dfe:	f240 815e 	bls.w	80170be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8016e02:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8016e06:	f04f 0b01 	mov.w	fp, #1
 8016e0a:	9a01      	ldr	r2, [sp, #4]
 8016e0c:	9806      	ldr	r0, [sp, #24]
 8016e0e:	465e      	mov	r6, fp
 8016e10:	f8cd b008 	str.w	fp, [sp, #8]
 8016e14:	7800      	ldrb	r0, [r0, #0]
 8016e16:	fbb5 f3f3 	udiv	r3, r5, r3
 8016e1a:	1ad3      	subs	r3, r2, r3
 8016e1c:	900e      	str	r0, [sp, #56]	; 0x38
 8016e1e:	3001      	adds	r0, #1
 8016e20:	b29b      	uxth	r3, r3
 8016e22:	9005      	str	r0, [sp, #20]
 8016e24:	9312      	str	r3, [sp, #72]	; 0x48
 8016e26:	9b06      	ldr	r3, [sp, #24]
 8016e28:	785a      	ldrb	r2, [r3, #1]
 8016e2a:	789b      	ldrb	r3, [r3, #2]
 8016e2c:	021b      	lsls	r3, r3, #8
 8016e2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e32:	9a06      	ldr	r2, [sp, #24]
 8016e34:	78d2      	ldrb	r2, [r2, #3]
 8016e36:	4313      	orrs	r3, r2
 8016e38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e3a:	441a      	add	r2, r3
 8016e3c:	1c50      	adds	r0, r2, #1
 8016e3e:	7852      	ldrb	r2, [r2, #1]
 8016e40:	9003      	str	r0, [sp, #12]
 8016e42:	0212      	lsls	r2, r2, #8
 8016e44:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016e46:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8016e4a:	5cc3      	ldrb	r3, [r0, r3]
 8016e4c:	431a      	orrs	r2, r3
 8016e4e:	b293      	uxth	r3, r2
 8016e50:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8016e54:	930a      	str	r3, [sp, #40]	; 0x28
 8016e56:	2300      	movs	r3, #0
 8016e58:	461a      	mov	r2, r3
 8016e5a:	9307      	str	r3, [sp, #28]
 8016e5c:	2d00      	cmp	r5, #0
 8016e5e:	d07c      	beq.n	8016f5a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8016e60:	42ae      	cmp	r6, r5
 8016e62:	d26c      	bcs.n	8016f3e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8016e64:	9b08      	ldr	r3, [sp, #32]
 8016e66:	1bad      	subs	r5, r5, r6
 8016e68:	4608      	mov	r0, r1
 8016e6a:	4543      	cmp	r3, r8
 8016e6c:	b2ad      	uxth	r5, r5
 8016e6e:	d802      	bhi.n	8016e76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8016e70:	e071      	b.n	8016f56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d15d      	bne.n	8016f32 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8016e76:	9b03      	ldr	r3, [sp, #12]
 8016e78:	9a02      	ldr	r2, [sp, #8]
 8016e7a:	785b      	ldrb	r3, [r3, #1]
 8016e7c:	f1c2 0207 	rsb	r2, r2, #7
 8016e80:	9902      	ldr	r1, [sp, #8]
 8016e82:	4093      	lsls	r3, r2
 8016e84:	005b      	lsls	r3, r3, #1
 8016e86:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8016e8a:	9b03      	ldr	r3, [sp, #12]
 8016e8c:	781b      	ldrb	r3, [r3, #0]
 8016e8e:	410b      	asrs	r3, r1
 8016e90:	3101      	adds	r1, #1
 8016e92:	b2c9      	uxtb	r1, r1
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	2908      	cmp	r1, #8
 8016e98:	9102      	str	r1, [sp, #8]
 8016e9a:	9903      	ldr	r1, [sp, #12]
 8016e9c:	ea43 0302 	orr.w	r3, r3, r2
 8016ea0:	bf0c      	ite	eq
 8016ea2:	3102      	addeq	r1, #2
 8016ea4:	3101      	addne	r1, #1
 8016ea6:	b29a      	uxth	r2, r3
 8016ea8:	bf05      	ittet	eq
 8016eaa:	9103      	streq	r1, [sp, #12]
 8016eac:	2100      	moveq	r1, #0
 8016eae:	9103      	strne	r1, [sp, #12]
 8016eb0:	9102      	streq	r1, [sp, #8]
 8016eb2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016eb4:	4291      	cmp	r1, r2
 8016eb6:	d30a      	bcc.n	8016ece <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8016eb8:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	9905      	ldr	r1, [sp, #20]
 8016ec0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016ec4:	d30f      	bcc.n	8016ee6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8016ec6:	469b      	mov	fp, r3
 8016ec8:	f04f 0c00 	mov.w	ip, #0
 8016ecc:	e032      	b.n	8016f34 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8016ece:	9b05      	ldr	r3, [sp, #20]
 8016ed0:	429a      	cmp	r2, r3
 8016ed2:	d318      	bcc.n	8016f06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8016ed4:	eb04 030b 	add.w	r3, r4, fp
 8016ed8:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 8016edc:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8016ee0:	f10b 0301 	add.w	r3, fp, #1
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	9905      	ldr	r1, [sp, #20]
 8016ee8:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8016eec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016ef0:	710e      	strb	r6, [r1, #4]
 8016ef2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016ef4:	80ce      	strh	r6, [r1, #6]
 8016ef6:	f10b 0601 	add.w	r6, fp, #1
 8016efa:	714e      	strb	r6, [r1, #5]
 8016efc:	9905      	ldr	r1, [sp, #20]
 8016efe:	3101      	adds	r1, #1
 8016f00:	b289      	uxth	r1, r1
 8016f02:	9105      	str	r1, [sp, #20]
 8016f04:	e7df      	b.n	8016ec6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8016f06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016f0a:	4611      	mov	r1, r2
 8016f0c:	795b      	ldrb	r3, [r3, #5]
 8016f0e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8016f12:	4426      	add	r6, r4
 8016f14:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016f16:	4437      	add	r7, r6
 8016f18:	2f00      	cmp	r7, #0
 8016f1a:	dd06      	ble.n	8016f2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8016f1c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016f20:	790f      	ldrb	r7, [r1, #4]
 8016f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016f26:	88c9      	ldrh	r1, [r1, #6]
 8016f28:	e7f4      	b.n	8016f14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8016f2a:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	e7c5      	b.n	8016ebe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8016f32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f34:	920a      	str	r2, [sp, #40]	; 0x28
 8016f36:	4601      	mov	r1, r0
 8016f38:	4662      	mov	r2, ip
 8016f3a:	461e      	mov	r6, r3
 8016f3c:	e78e      	b.n	8016e5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8016f3e:	1b73      	subs	r3, r6, r5
 8016f40:	eb02 0c05 	add.w	ip, r2, r5
 8016f44:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	fa1f fc8c 	uxth.w	ip, ip
 8016f4e:	2500      	movs	r5, #0
 8016f50:	9a08      	ldr	r2, [sp, #32]
 8016f52:	4542      	cmp	r2, r8
 8016f54:	d88d      	bhi.n	8016e72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8016f56:	4601      	mov	r1, r0
 8016f58:	e74f      	b.n	8016dfa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8016f5a:	428e      	cmp	r6, r1
 8016f5c:	bf2b      	itete	cs
 8016f5e:	468e      	movcs	lr, r1
 8016f60:	46b6      	movcc	lr, r6
 8016f62:	1a73      	subcs	r3, r6, r1
 8016f64:	1b88      	subcc	r0, r1, r6
 8016f66:	eb02 0c0e 	add.w	ip, r2, lr
 8016f6a:	bf2b      	itete	cs
 8016f6c:	4628      	movcs	r0, r5
 8016f6e:	462b      	movcc	r3, r5
 8016f70:	b29b      	uxthcs	r3, r3
 8016f72:	b280      	uxthcc	r0, r0
 8016f74:	f108 0503 	add.w	r5, r8, #3
 8016f78:	fa1f fc8c 	uxth.w	ip, ip
 8016f7c:	4562      	cmp	r2, ip
 8016f7e:	d06f      	beq.n	8017060 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8016f80:	1c57      	adds	r7, r2, #1
 8016f82:	4422      	add	r2, r4
 8016f84:	b2bf      	uxth	r7, r7
 8016f86:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 8016f8a:	9713      	str	r7, [sp, #76]	; 0x4c
 8016f8c:	2704      	movs	r7, #4
 8016f8e:	46b9      	mov	r9, r7
 8016f90:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016f92:	fb19 7202 	smlabb	r2, r9, r2, r7
 8016f96:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016f98:	58bf      	ldr	r7, [r7, r2]
 8016f9a:	0e3a      	lsrs	r2, r7, #24
 8016f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8016f9e:	d016      	beq.n	8016fce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8016fa0:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016fa4:	fa5f fa87 	uxtb.w	sl, r7
 8016fa8:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016fac:	fa5f f289 	uxtb.w	r2, r9
 8016fb0:	9214      	str	r2, [sp, #80]	; 0x50
 8016fb2:	b2fa      	uxtb	r2, r7
 8016fb4:	9215      	str	r2, [sp, #84]	; 0x54
 8016fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fb8:	2aff      	cmp	r2, #255	; 0xff
 8016fba:	d10b      	bne.n	8016fd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8016fbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016fbe:	2aff      	cmp	r2, #255	; 0xff
 8016fc0:	d108      	bne.n	8016fd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8016fc2:	f805 ac03 	strb.w	sl, [r5, #-3]
 8016fc6:	f805 9c02 	strb.w	r9, [r5, #-2]
 8016fca:	f805 7c01 	strb.w	r7, [r5, #-1]
 8016fce:	3503      	adds	r5, #3
 8016fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016fd2:	e7d3      	b.n	8016f7c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8016fd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016fd8:	437a      	muls	r2, r7
 8016fda:	1c57      	adds	r7, r2, #1
 8016fdc:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8016fe0:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8016fe4:	1212      	asrs	r2, r2, #8
 8016fe6:	fa1f f982 	uxth.w	r9, r2
 8016fea:	43d2      	mvns	r2, r2
 8016fec:	fb1a fa09 	smulbb	sl, sl, r9
 8016ff0:	b2d2      	uxtb	r2, r2
 8016ff2:	fb07 a702 	mla	r7, r7, r2, sl
 8016ff6:	9209      	str	r2, [sp, #36]	; 0x24
 8016ff8:	b2bf      	uxth	r7, r7
 8016ffa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016ffc:	f107 0a01 	add.w	sl, r7, #1
 8017000:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017004:	fb12 fa09 	smulbb	sl, r2, r9
 8017008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801700a:	123f      	asrs	r7, r7, #8
 801700c:	f805 7c03 	strb.w	r7, [r5, #-3]
 8017010:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8017014:	fb07 aa02 	mla	sl, r7, r2, sl
 8017018:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801701a:	fb12 f909 	smulbb	r9, r2, r9
 801701e:	fa1f fa8a 	uxth.w	sl, sl
 8017022:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017024:	f10a 0701 	add.w	r7, sl, #1
 8017028:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801702c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8017030:	fb07 9902 	mla	r9, r7, r2, r9
 8017034:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017038:	fa1f f989 	uxth.w	r9, r9
 801703c:	f805 ac02 	strb.w	sl, [r5, #-2]
 8017040:	f109 0201 	add.w	r2, r9, #1
 8017044:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8017048:	ea4f 2929 	mov.w	r9, r9, asr #8
 801704c:	f805 9c01 	strb.w	r9, [r5, #-1]
 8017050:	e7bd      	b.n	8016fce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8017052:	bf00      	nop
 8017054:	2401aa78 	.word	0x2401aa78
 8017058:	2401aa72 	.word	0x2401aa72
 801705c:	fffff7fb 	.word	0xfffff7fb
 8017060:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017064:	428e      	cmp	r6, r1
 8017066:	44f0      	add	r8, lr
 8017068:	f4ff af71 	bcc.w	8016f4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801706c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801706e:	9904      	ldr	r1, [sp, #16]
 8017070:	8812      	ldrh	r2, [r2, #0]
 8017072:	1a52      	subs	r2, r2, r1
 8017074:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017076:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801707a:	4490      	add	r8, r2
 801707c:	9a07      	ldr	r2, [sp, #28]
 801707e:	3201      	adds	r2, #1
 8017080:	428a      	cmp	r2, r1
 8017082:	9207      	str	r2, [sp, #28]
 8017084:	d111      	bne.n	80170aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8017086:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801708a:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 801708e:	9b04      	ldr	r3, [sp, #16]
 8017090:	eba5 050c 	sub.w	r5, r5, ip
 8017094:	b2ad      	uxth	r5, r5
 8017096:	2d00      	cmp	r5, #0
 8017098:	bf08      	it	eq
 801709a:	4619      	moveq	r1, r3
 801709c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801709e:	bf18      	it	ne
 80170a0:	2100      	movne	r1, #0
 80170a2:	3301      	adds	r3, #1
 80170a4:	b289      	uxth	r1, r1
 80170a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80170a8:	e69e      	b.n	8016de8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80170aa:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80170ae:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80170b2:	1a2d      	subs	r5, r5, r0
 80170b4:	b2ad      	uxth	r5, r5
 80170b6:	2d00      	cmp	r5, #0
 80170b8:	bf18      	it	ne
 80170ba:	2000      	movne	r0, #0
 80170bc:	e748      	b.n	8016f50 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80170be:	4b04      	ldr	r3, [pc, #16]	; (80170d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80170c0:	6818      	ldr	r0, [r3, #0]
 80170c2:	6803      	ldr	r3, [r0, #0]
 80170c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c6:	4798      	blx	r3
 80170c8:	b01d      	add	sp, #116	; 0x74
 80170ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ce:	bf00      	nop
 80170d0:	2401aa78 	.word	0x2401aa78

080170d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80170d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170d8:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80170dc:	9c06      	ldr	r4, [sp, #24]
 80170de:	2800      	cmp	r0, #0
 80170e0:	d06e      	beq.n	80171c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80170e2:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80170e6:	2d00      	cmp	r5, #0
 80170e8:	dd6a      	ble.n	80171c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80170ea:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80170ee:	f1bc 0f00 	cmp.w	ip, #0
 80170f2:	dd65      	ble.n	80171c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80170f4:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80170f8:	28ff      	cmp	r0, #255	; 0xff
 80170fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80170fe:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8017102:	fb02 3306 	mla	r3, r2, r6, r3
 8017106:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801710a:	b2e4      	uxtb	r4, r4
 801710c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017110:	4419      	add	r1, r3
 8017112:	fb02 f30c 	mul.w	r3, r2, ip
 8017116:	eba2 0205 	sub.w	r2, r2, r5
 801711a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801711e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017122:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017126:	440b      	add	r3, r1
 8017128:	d03e      	beq.n	80171a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801712a:	fa1f fc80 	uxth.w	ip, r0
 801712e:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017132:	fb06 f60c 	mul.w	r6, r6, ip
 8017136:	b280      	uxth	r0, r0
 8017138:	fb07 f70c 	mul.w	r7, r7, ip
 801713c:	fb04 f40c 	mul.w	r4, r4, ip
 8017140:	4299      	cmp	r1, r3
 8017142:	d23d      	bcs.n	80171c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8017144:	eb01 0c05 	add.w	ip, r1, r5
 8017148:	458c      	cmp	ip, r1
 801714a:	f101 0e03 	add.w	lr, r1, #3
 801714e:	d928      	bls.n	80171a2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8017150:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8017154:	fb11 f100 	smulbb	r1, r1, r0
 8017158:	4421      	add	r1, r4
 801715a:	b289      	uxth	r1, r1
 801715c:	f101 0801 	add.w	r8, r1, #1
 8017160:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017164:	1209      	asrs	r1, r1, #8
 8017166:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801716a:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801716e:	fb11 f100 	smulbb	r1, r1, r0
 8017172:	4439      	add	r1, r7
 8017174:	b289      	uxth	r1, r1
 8017176:	f101 0801 	add.w	r8, r1, #1
 801717a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801717e:	1209      	asrs	r1, r1, #8
 8017180:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8017184:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8017188:	fb11 f100 	smulbb	r1, r1, r0
 801718c:	4431      	add	r1, r6
 801718e:	b289      	uxth	r1, r1
 8017190:	f101 0801 	add.w	r8, r1, #1
 8017194:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017198:	1209      	asrs	r1, r1, #8
 801719a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801719e:	4671      	mov	r1, lr
 80171a0:	e7d2      	b.n	8017148 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80171a2:	4411      	add	r1, r2
 80171a4:	e7cc      	b.n	8017140 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80171a6:	4411      	add	r1, r2
 80171a8:	4299      	cmp	r1, r3
 80171aa:	d209      	bcs.n	80171c0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80171ac:	1948      	adds	r0, r1, r5
 80171ae:	4281      	cmp	r1, r0
 80171b0:	d2f9      	bcs.n	80171a6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80171b2:	700c      	strb	r4, [r1, #0]
 80171b4:	3103      	adds	r1, #3
 80171b6:	f801 7c02 	strb.w	r7, [r1, #-2]
 80171ba:	f801 6c01 	strb.w	r6, [r1, #-1]
 80171be:	e7f6      	b.n	80171ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80171c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80171c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171c8:	b093      	sub	sp, #76	; 0x4c
 80171ca:	4699      	mov	r9, r3
 80171cc:	4617      	mov	r7, r2
 80171ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80171d2:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 80171d6:	4604      	mov	r4, r0
 80171d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80171dc:	a80c      	add	r0, sp, #48	; 0x30
 80171de:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 80171e2:	460d      	mov	r5, r1
 80171e4:	4649      	mov	r1, r9
 80171e6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80171ea:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80171ee:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 80171f2:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 80171f6:	f7f6 ffd7 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 80171fa:	4639      	mov	r1, r7
 80171fc:	a80c      	add	r0, sp, #48	; 0x30
 80171fe:	f7f6 ffd3 	bl	800e1a8 <_ZN8touchgfx4RectaNERKS0_>
 8017202:	4b78      	ldr	r3, [pc, #480]	; (80173e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8017204:	8818      	ldrh	r0, [r3, #0]
 8017206:	4b78      	ldr	r3, [pc, #480]	; (80173e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8017208:	b202      	sxth	r2, r0
 801720a:	8819      	ldrh	r1, [r3, #0]
 801720c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017210:	b20f      	sxth	r7, r1
 8017212:	2b00      	cmp	r3, #0
 8017214:	da07      	bge.n	8017226 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8017216:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801721a:	4463      	add	r3, ip
 801721c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017220:	2300      	movs	r3, #0
 8017222:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017226:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801722a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 801722e:	1ad2      	subs	r2, r2, r3
 8017230:	4594      	cmp	ip, r2
 8017232:	bfc4      	itt	gt
 8017234:	1ac2      	subgt	r2, r0, r3
 8017236:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801723a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801723e:	2a00      	cmp	r2, #0
 8017240:	da07      	bge.n	8017252 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8017242:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8017246:	4462      	add	r2, ip
 8017248:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 801724c:	2200      	movs	r2, #0
 801724e:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017252:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017256:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801725a:	1abf      	subs	r7, r7, r2
 801725c:	45bc      	cmp	ip, r7
 801725e:	f8df c190 	ldr.w	ip, [pc, #400]	; 80173f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8017262:	bfc8      	it	gt
 8017264:	1a8f      	subgt	r7, r1, r2
 8017266:	f89c c000 	ldrb.w	ip, [ip]
 801726a:	bfc8      	it	gt
 801726c:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8017270:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8017274:	f1bc 0f00 	cmp.w	ip, #0
 8017278:	d176      	bne.n	8017368 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801727a:	4287      	cmp	r7, r0
 801727c:	bf14      	ite	ne
 801727e:	2100      	movne	r1, #0
 8017280:	2101      	moveq	r1, #1
 8017282:	2f00      	cmp	r7, #0
 8017284:	9107      	str	r1, [sp, #28]
 8017286:	dd73      	ble.n	8017370 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8017288:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 801728c:	2900      	cmp	r1, #0
 801728e:	9104      	str	r1, [sp, #16]
 8017290:	dd6e      	ble.n	8017370 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8017292:	f8b9 1000 	ldrh.w	r1, [r9]
 8017296:	a80e      	add	r0, sp, #56	; 0x38
 8017298:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 801729c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80172a0:	1a5b      	subs	r3, r3, r1
 80172a2:	a910      	add	r1, sp, #64	; 0x40
 80172a4:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80172a8:	b21b      	sxth	r3, r3
 80172aa:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80172ae:	f8df a144 	ldr.w	sl, [pc, #324]	; 80173f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80172b2:	9305      	str	r3, [sp, #20]
 80172b4:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80172b8:	1ad2      	subs	r2, r2, r3
 80172ba:	b213      	sxth	r3, r2
 80172bc:	9306      	str	r3, [sp, #24]
 80172be:	9b05      	ldr	r3, [sp, #20]
 80172c0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80172c4:	9b06      	ldr	r3, [sp, #24]
 80172c6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80172ca:	9b04      	ldr	r3, [sp, #16]
 80172cc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80172d0:	2300      	movs	r3, #0
 80172d2:	9310      	str	r3, [sp, #64]	; 0x40
 80172d4:	f7fa f8c2 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80172d8:	4640      	mov	r0, r8
 80172da:	f7fa f897 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80172de:	a810      	add	r0, sp, #64	; 0x40
 80172e0:	f7fa f894 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80172e4:	4b41      	ldr	r3, [pc, #260]	; (80173ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80172e6:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80172ea:	4628      	mov	r0, r5
 80172ec:	881b      	ldrh	r3, [r3, #0]
 80172ee:	9308      	str	r3, [sp, #32]
 80172f0:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 80172f4:	b21b      	sxth	r3, r3
 80172f6:	9303      	str	r3, [sp, #12]
 80172f8:	682b      	ldr	r3, [r5, #0]
 80172fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172fc:	4798      	blx	r3
 80172fe:	9a03      	ldr	r2, [sp, #12]
 8017300:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017304:	4681      	mov	r9, r0
 8017306:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801730a:	fb13 f302 	smulbb	r3, r3, r2
 801730e:	2203      	movs	r2, #3
 8017310:	f8da 0000 	ldr.w	r0, [sl]
 8017314:	fb15 3302 	smlabb	r3, r5, r2, r3
 8017318:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801731a:	920b      	str	r2, [sp, #44]	; 0x2c
 801731c:	441d      	add	r5, r3
 801731e:	6803      	ldr	r3, [r0, #0]
 8017320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017322:	4798      	blx	r3
 8017324:	9009      	str	r0, [sp, #36]	; 0x24
 8017326:	f8da 0000 	ldr.w	r0, [sl]
 801732a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801732e:	6803      	ldr	r3, [r0, #0]
 8017330:	910a      	str	r1, [sp, #40]	; 0x28
 8017332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017334:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8017338:	4798      	blx	r3
 801733a:	f010 0f01 	tst.w	r0, #1
 801733e:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017342:	d01e      	beq.n	8017382 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8017344:	f8da 0000 	ldr.w	r0, [sl]
 8017348:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801734c:	6803      	ldr	r3, [r0, #0]
 801734e:	9200      	str	r2, [sp, #0]
 8017350:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017352:	462b      	mov	r3, r5
 8017354:	e898 0006 	ldmia.w	r8, {r1, r2}
 8017358:	47b0      	blx	r6
 801735a:	9b05      	ldr	r3, [sp, #20]
 801735c:	80a7      	strh	r7, [r4, #4]
 801735e:	8023      	strh	r3, [r4, #0]
 8017360:	9b06      	ldr	r3, [sp, #24]
 8017362:	8063      	strh	r3, [r4, #2]
 8017364:	9b04      	ldr	r3, [sp, #16]
 8017366:	e007      	b.n	8017378 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8017368:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 801736c:	4288      	cmp	r0, r1
 801736e:	e785      	b.n	801727c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8017370:	2300      	movs	r3, #0
 8017372:	8023      	strh	r3, [r4, #0]
 8017374:	8063      	strh	r3, [r4, #2]
 8017376:	80a3      	strh	r3, [r4, #4]
 8017378:	4620      	mov	r0, r4
 801737a:	80e3      	strh	r3, [r4, #6]
 801737c:	b013      	add	sp, #76	; 0x4c
 801737e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017382:	fb09 f606 	mul.w	r6, r9, r6
 8017386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017388:	fb11 6602 	smlabb	r6, r1, r2, r6
 801738c:	9a07      	ldr	r2, [sp, #28]
 801738e:	4433      	add	r3, r6
 8017390:	461e      	mov	r6, r3
 8017392:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017396:	b16a      	cbz	r2, 80173b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017398:	9a08      	ldr	r2, [sp, #32]
 801739a:	4593      	cmp	fp, r2
 801739c:	d10a      	bne.n	80173b4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801739e:	f8da 0000 	ldr.w	r0, [sl]
 80173a2:	fb09 f303 	mul.w	r3, r9, r3
 80173a6:	4629      	mov	r1, r5
 80173a8:	6802      	ldr	r2, [r0, #0]
 80173aa:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80173ae:	4632      	mov	r2, r6
 80173b0:	47d0      	blx	sl
 80173b2:	e7d2      	b.n	801735a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80173b4:	9a03      	ldr	r2, [sp, #12]
 80173b6:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80173f4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80173ba:	fb02 5803 	mla	r8, r2, r3, r5
 80173be:	4545      	cmp	r5, r8
 80173c0:	d2cb      	bcs.n	801735a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80173c2:	f8db 0000 	ldr.w	r0, [fp]
 80173c6:	4629      	mov	r1, r5
 80173c8:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80173cc:	6802      	ldr	r2, [r0, #0]
 80173ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173d2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80173d6:	4632      	mov	r2, r6
 80173d8:	47d0      	blx	sl
 80173da:	9b03      	ldr	r3, [sp, #12]
 80173dc:	444e      	add	r6, r9
 80173de:	441d      	add	r5, r3
 80173e0:	e7ed      	b.n	80173be <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80173e2:	bf00      	nop
 80173e4:	2401aa6c 	.word	0x2401aa6c
 80173e8:	2401aa6e 	.word	0x2401aa6e
 80173ec:	2401aa72 	.word	0x2401aa72
 80173f0:	2401aa70 	.word	0x2401aa70
 80173f4:	2401aa78 	.word	0x2401aa78

080173f8 <_ZN8touchgfx8LCD24bppC1Ev>:
 80173f8:	2200      	movs	r2, #0
 80173fa:	490d      	ldr	r1, [pc, #52]	; (8017430 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 80173fc:	6042      	str	r2, [r0, #4]
 80173fe:	6001      	str	r1, [r0, #0]
 8017400:	6602      	str	r2, [r0, #96]	; 0x60
 8017402:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017406:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801740a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801740e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017412:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017416:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801741a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801741e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017422:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017426:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801742a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801742e:	4770      	bx	lr
 8017430:	0802048c 	.word	0x0802048c

08017434 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	b091      	sub	sp, #68	; 0x44
 801743a:	4607      	mov	r7, r0
 801743c:	4688      	mov	r8, r1
 801743e:	6810      	ldr	r0, [r2, #0]
 8017440:	6851      	ldr	r1, [r2, #4]
 8017442:	ac0c      	add	r4, sp, #48	; 0x30
 8017444:	4616      	mov	r6, r2
 8017446:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801744a:	4d64      	ldr	r5, [pc, #400]	; (80175dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801744c:	f8df a190 	ldr.w	sl, [pc, #400]	; 80175e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8017450:	c403      	stmia	r4!, {r0, r1}
 8017452:	6818      	ldr	r0, [r3, #0]
 8017454:	ac0e      	add	r4, sp, #56	; 0x38
 8017456:	6859      	ldr	r1, [r3, #4]
 8017458:	c403      	stmia	r4!, {r0, r1}
 801745a:	a80c      	add	r0, sp, #48	; 0x30
 801745c:	f7f9 ffd6 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017460:	4631      	mov	r1, r6
 8017462:	a80e      	add	r0, sp, #56	; 0x38
 8017464:	f7f9 fffa 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017468:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801746c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017470:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017474:	6828      	ldr	r0, [r5, #0]
 8017476:	fb11 2103 	smlabb	r1, r1, r3, r2
 801747a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801747e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017482:	440f      	add	r7, r1
 8017484:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017488:	440a      	add	r2, r1
 801748a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801748e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017492:	4413      	add	r3, r2
 8017494:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017498:	6803      	ldr	r3, [r0, #0]
 801749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801749c:	4798      	blx	r3
 801749e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80174a2:	6828      	ldr	r0, [r5, #0]
 80174a4:	d01f      	beq.n	80174e6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80174a6:	2201      	movs	r2, #1
 80174a8:	2500      	movs	r5, #0
 80174aa:	6801      	ldr	r1, [r0, #0]
 80174ac:	b2a4      	uxth	r4, r4
 80174ae:	b2b6      	uxth	r6, r6
 80174b0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80174b4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80174b8:	250b      	movs	r5, #11
 80174ba:	9507      	str	r5, [sp, #28]
 80174bc:	f8ba 5000 	ldrh.w	r5, [sl]
 80174c0:	f8cd 9010 	str.w	r9, [sp, #16]
 80174c4:	9602      	str	r6, [sp, #8]
 80174c6:	9401      	str	r4, [sp, #4]
 80174c8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80174cc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80174d0:	9203      	str	r2, [sp, #12]
 80174d2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80174d6:	9200      	str	r2, [sp, #0]
 80174d8:	4642      	mov	r2, r8
 80174da:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80174dc:	4639      	mov	r1, r7
 80174de:	47a0      	blx	r4
 80174e0:	b011      	add	sp, #68	; 0x44
 80174e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174e6:	6803      	ldr	r3, [r0, #0]
 80174e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174ea:	4798      	blx	r3
 80174ec:	f8ba 5000 	ldrh.w	r5, [sl]
 80174f0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80174f4:	f04f 0e04 	mov.w	lr, #4
 80174f8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80174fc:	436e      	muls	r6, r5
 80174fe:	fb05 2303 	mla	r3, r5, r3, r2
 8017502:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017506:	1b2d      	subs	r5, r5, r4
 8017508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801750c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017510:	4418      	add	r0, r3
 8017512:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017516:	1982      	adds	r2, r0, r6
 8017518:	1b1b      	subs	r3, r3, r4
 801751a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801751e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017520:	4290      	cmp	r0, r2
 8017522:	d254      	bcs.n	80175ce <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017524:	eb00 0a04 	add.w	sl, r0, r4
 8017528:	4550      	cmp	r0, sl
 801752a:	d24c      	bcs.n	80175c6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801752c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017530:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017534:	eb08 0c01 	add.w	ip, r8, r1
 8017538:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801753c:	b173      	cbz	r3, 801755c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801753e:	2bff      	cmp	r3, #255	; 0xff
 8017540:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017544:	d10c      	bne.n	8017560 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017546:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801754a:	d109      	bne.n	8017560 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801754c:	f880 b000 	strb.w	fp, [r0]
 8017550:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017554:	7043      	strb	r3, [r0, #1]
 8017556:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801755a:	7083      	strb	r3, [r0, #2]
 801755c:	3003      	adds	r0, #3
 801755e:	e7e3      	b.n	8017528 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8017560:	fb09 f103 	mul.w	r1, r9, r3
 8017564:	1c4b      	adds	r3, r1, #1
 8017566:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801756a:	7801      	ldrb	r1, [r0, #0]
 801756c:	121b      	asrs	r3, r3, #8
 801756e:	b29e      	uxth	r6, r3
 8017570:	43db      	mvns	r3, r3
 8017572:	fb1b fb06 	smulbb	fp, fp, r6
 8017576:	b2db      	uxtb	r3, r3
 8017578:	fb01 b103 	mla	r1, r1, r3, fp
 801757c:	b289      	uxth	r1, r1
 801757e:	f101 0b01 	add.w	fp, r1, #1
 8017582:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017586:	f890 b001 	ldrb.w	fp, [r0, #1]
 801758a:	fb1b fb03 	smulbb	fp, fp, r3
 801758e:	1209      	asrs	r1, r1, #8
 8017590:	7001      	strb	r1, [r0, #0]
 8017592:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017596:	fb01 b106 	mla	r1, r1, r6, fp
 801759a:	b289      	uxth	r1, r1
 801759c:	f101 0b01 	add.w	fp, r1, #1
 80175a0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80175a4:	1209      	asrs	r1, r1, #8
 80175a6:	7041      	strb	r1, [r0, #1]
 80175a8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80175ac:	f890 c002 	ldrb.w	ip, [r0, #2]
 80175b0:	fb1c f303 	smulbb	r3, ip, r3
 80175b4:	fb01 3606 	mla	r6, r1, r6, r3
 80175b8:	b2b6      	uxth	r6, r6
 80175ba:	1c73      	adds	r3, r6, #1
 80175bc:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80175c0:	1236      	asrs	r6, r6, #8
 80175c2:	7086      	strb	r6, [r0, #2]
 80175c4:	e7ca      	b.n	801755c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80175c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175c8:	4428      	add	r0, r5
 80175ca:	441f      	add	r7, r3
 80175cc:	e7a8      	b.n	8017520 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80175ce:	4b03      	ldr	r3, [pc, #12]	; (80175dc <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80175d0:	6818      	ldr	r0, [r3, #0]
 80175d2:	6803      	ldr	r3, [r0, #0]
 80175d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80175d6:	4798      	blx	r3
 80175d8:	e782      	b.n	80174e0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80175da:	bf00      	nop
 80175dc:	2401aa78 	.word	0x2401aa78
 80175e0:	2401aa72 	.word	0x2401aa72

080175e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80175e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e8:	b091      	sub	sp, #68	; 0x44
 80175ea:	4680      	mov	r8, r0
 80175ec:	460e      	mov	r6, r1
 80175ee:	6810      	ldr	r0, [r2, #0]
 80175f0:	6851      	ldr	r1, [r2, #4]
 80175f2:	ad0c      	add	r5, sp, #48	; 0x30
 80175f4:	4614      	mov	r4, r2
 80175f6:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 80175fa:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8017794 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 80175fe:	f8df a198 	ldr.w	sl, [pc, #408]	; 8017798 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8017602:	c503      	stmia	r5!, {r0, r1}
 8017604:	6818      	ldr	r0, [r3, #0]
 8017606:	ad0e      	add	r5, sp, #56	; 0x38
 8017608:	6859      	ldr	r1, [r3, #4]
 801760a:	c503      	stmia	r5!, {r0, r1}
 801760c:	a80c      	add	r0, sp, #48	; 0x30
 801760e:	f7f9 fefd 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017612:	4621      	mov	r1, r4
 8017614:	a80e      	add	r0, sp, #56	; 0x38
 8017616:	f7f9 ff21 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801761a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801761e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017622:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017626:	f8d9 0000 	ldr.w	r0, [r9]
 801762a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801762e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017632:	eb08 0401 	add.w	r4, r8, r1
 8017636:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801763a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801763e:	440a      	add	r2, r1
 8017640:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017644:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017648:	4413      	add	r3, r2
 801764a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801764e:	6803      	ldr	r3, [r0, #0]
 8017650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017652:	4798      	blx	r3
 8017654:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017658:	f8d9 0000 	ldr.w	r0, [r9]
 801765c:	d022      	beq.n	80176a4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801765e:	2200      	movs	r2, #0
 8017660:	f04f 0c01 	mov.w	ip, #1
 8017664:	6801      	ldr	r1, [r0, #0]
 8017666:	b2ad      	uxth	r5, r5
 8017668:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801766c:	e9cd c208 	strd	ip, r2, [sp, #32]
 8017670:	f04f 0c0b 	mov.w	ip, #11
 8017674:	f8cd c01c 	str.w	ip, [sp, #28]
 8017678:	f8ba c000 	ldrh.w	ip, [sl]
 801767c:	9704      	str	r7, [sp, #16]
 801767e:	9502      	str	r5, [sp, #8]
 8017680:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8017684:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017688:	9203      	str	r2, [sp, #12]
 801768a:	fa1f f288 	uxth.w	r2, r8
 801768e:	9201      	str	r2, [sp, #4]
 8017690:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017694:	9200      	str	r2, [sp, #0]
 8017696:	4632      	mov	r2, r6
 8017698:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801769a:	4621      	mov	r1, r4
 801769c:	47a8      	blx	r5
 801769e:	b011      	add	sp, #68	; 0x44
 80176a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176a4:	6803      	ldr	r3, [r0, #0]
 80176a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176a8:	4798      	blx	r3
 80176aa:	f8ba 2000 	ldrh.w	r2, [sl]
 80176ae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80176b2:	f04f 0e03 	mov.w	lr, #3
 80176b6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 80176ba:	4355      	muls	r5, r2
 80176bc:	fa1f fc87 	uxth.w	ip, r7
 80176c0:	fb02 1303 	mla	r3, r2, r3, r1
 80176c4:	eba2 0208 	sub.w	r2, r2, r8
 80176c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80176d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176d4:	4418      	add	r0, r3
 80176d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80176d8:	1943      	adds	r3, r0, r5
 80176da:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 80176de:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 80176e2:	eba2 0208 	sub.w	r2, r2, r8
 80176e6:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80176ea:	b2ad      	uxth	r5, r5
 80176ec:	4298      	cmp	r0, r3
 80176ee:	d24a      	bcs.n	8017786 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 80176f0:	eb00 0908 	add.w	r9, r0, r8
 80176f4:	4621      	mov	r1, r4
 80176f6:	4548      	cmp	r0, r9
 80176f8:	460c      	mov	r4, r1
 80176fa:	d240      	bcs.n	801777e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 80176fc:	f04f 0a04 	mov.w	sl, #4
 8017700:	7824      	ldrb	r4, [r4, #0]
 8017702:	2fff      	cmp	r7, #255	; 0xff
 8017704:	f101 0101 	add.w	r1, r1, #1
 8017708:	fb1e a404 	smlabb	r4, lr, r4, sl
 801770c:	eb06 0a04 	add.w	sl, r6, r4
 8017710:	f816 b004 	ldrb.w	fp, [r6, r4]
 8017714:	d02b      	beq.n	801776e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8017716:	7804      	ldrb	r4, [r0, #0]
 8017718:	fb14 f405 	smulbb	r4, r4, r5
 801771c:	fb0b 440c 	mla	r4, fp, ip, r4
 8017720:	b2a4      	uxth	r4, r4
 8017722:	f104 0b01 	add.w	fp, r4, #1
 8017726:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801772a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801772e:	fb1b fb05 	smulbb	fp, fp, r5
 8017732:	1224      	asrs	r4, r4, #8
 8017734:	7004      	strb	r4, [r0, #0]
 8017736:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801773a:	fb04 b40c 	mla	r4, r4, ip, fp
 801773e:	b2a4      	uxth	r4, r4
 8017740:	f104 0b01 	add.w	fp, r4, #1
 8017744:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017748:	1224      	asrs	r4, r4, #8
 801774a:	7044      	strb	r4, [r0, #1]
 801774c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017750:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017754:	fb1a fa05 	smulbb	sl, sl, r5
 8017758:	fb04 a40c 	mla	r4, r4, ip, sl
 801775c:	b2a4      	uxth	r4, r4
 801775e:	f104 0a01 	add.w	sl, r4, #1
 8017762:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8017766:	1224      	asrs	r4, r4, #8
 8017768:	7084      	strb	r4, [r0, #2]
 801776a:	3003      	adds	r0, #3
 801776c:	e7c3      	b.n	80176f6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801776e:	f880 b000 	strb.w	fp, [r0]
 8017772:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017776:	7044      	strb	r4, [r0, #1]
 8017778:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801777c:	e7f4      	b.n	8017768 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801777e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017780:	4420      	add	r0, r4
 8017782:	188c      	adds	r4, r1, r2
 8017784:	e7b2      	b.n	80176ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8017786:	4b03      	ldr	r3, [pc, #12]	; (8017794 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8017788:	6818      	ldr	r0, [r3, #0]
 801778a:	6803      	ldr	r3, [r0, #0]
 801778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801778e:	4798      	blx	r3
 8017790:	e785      	b.n	801769e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8017792:	bf00      	nop
 8017794:	2401aa78 	.word	0x2401aa78
 8017798:	2401aa72 	.word	0x2401aa72

0801779c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801779c:	b4f0      	push	{r4, r5, r6, r7}
 801779e:	460c      	mov	r4, r1
 80177a0:	4611      	mov	r1, r2
 80177a2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80177a6:	461a      	mov	r2, r3
 80177a8:	780f      	ldrb	r7, [r1, #0]
 80177aa:	9b04      	ldr	r3, [sp, #16]
 80177ac:	784e      	ldrb	r6, [r1, #1]
 80177ae:	b11f      	cbz	r7, 80177b8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 80177b0:	2f01      	cmp	r7, #1
 80177b2:	d01d      	beq.n	80177f0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 80177b4:	bcf0      	pop	{r4, r5, r6, r7}
 80177b6:	4770      	bx	lr
 80177b8:	2e03      	cmp	r6, #3
 80177ba:	d8fb      	bhi.n	80177b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80177bc:	e8df f006 	tbb	[pc, r6]
 80177c0:	16140702 	.word	0x16140702
 80177c4:	9504      	str	r5, [sp, #16]
 80177c6:	4620      	mov	r0, r4
 80177c8:	bcf0      	pop	{r4, r5, r6, r7}
 80177ca:	f7ff be33 	b.w	8017434 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80177ce:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80177d0:	2800      	cmp	r0, #0
 80177d2:	d0ef      	beq.n	80177b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80177d4:	6806      	ldr	r6, [r0, #0]
 80177d6:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80177da:	68f5      	ldr	r5, [r6, #12]
 80177dc:	4613      	mov	r3, r2
 80177de:	46ac      	mov	ip, r5
 80177e0:	460a      	mov	r2, r1
 80177e2:	4621      	mov	r1, r4
 80177e4:	bcf0      	pop	{r4, r5, r6, r7}
 80177e6:	4760      	bx	ip
 80177e8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80177ea:	e7f1      	b.n	80177d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80177ec:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80177ee:	e7ef      	b.n	80177d0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 80177f0:	2e03      	cmp	r6, #3
 80177f2:	d8df      	bhi.n	80177b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80177f4:	e8df f006 	tbb	[pc, r6]
 80177f8:	110f0702 	.word	0x110f0702
 80177fc:	9504      	str	r5, [sp, #16]
 80177fe:	4620      	mov	r0, r4
 8017800:	bcf0      	pop	{r4, r5, r6, r7}
 8017802:	f7ff beef 	b.w	80175e4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8017806:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017808:	2800      	cmp	r0, #0
 801780a:	d0d3      	beq.n	80177b4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801780c:	6806      	ldr	r6, [r0, #0]
 801780e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8017812:	68b5      	ldr	r5, [r6, #8]
 8017814:	e7e2      	b.n	80177dc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8017816:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017818:	e7f6      	b.n	8017808 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801781a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801781c:	e7f4      	b.n	8017808 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08017820 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8017820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017824:	4605      	mov	r5, r0
 8017826:	b08f      	sub	sp, #60	; 0x3c
 8017828:	460c      	mov	r4, r1
 801782a:	461f      	mov	r7, r3
 801782c:	2b00      	cmp	r3, #0
 801782e:	d052      	beq.n	80178d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8017830:	6808      	ldr	r0, [r1, #0]
 8017832:	ab0a      	add	r3, sp, #40	; 0x28
 8017834:	6849      	ldr	r1, [r1, #4]
 8017836:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8017a00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801783a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8017a04 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801783e:	c303      	stmia	r3!, {r0, r1}
 8017840:	6810      	ldr	r0, [r2, #0]
 8017842:	ab0c      	add	r3, sp, #48	; 0x30
 8017844:	6851      	ldr	r1, [r2, #4]
 8017846:	c303      	stmia	r3!, {r0, r1}
 8017848:	a80a      	add	r0, sp, #40	; 0x28
 801784a:	f7f9 fddf 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801784e:	4621      	mov	r1, r4
 8017850:	a80c      	add	r0, sp, #48	; 0x30
 8017852:	f7f9 fe03 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017856:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801785a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801785e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8017862:	f8d8 0000 	ldr.w	r0, [r8]
 8017866:	fb11 2103 	smlabb	r1, r1, r3, r2
 801786a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 801786e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8017872:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8017876:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801787a:	440a      	add	r2, r1
 801787c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017880:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8017884:	4413      	add	r3, r2
 8017886:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801788a:	6803      	ldr	r3, [r0, #0]
 801788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801788e:	4798      	blx	r3
 8017890:	2fff      	cmp	r7, #255	; 0xff
 8017892:	d023      	beq.n	80178dc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8017894:	f010 0f04 	tst.w	r0, #4
 8017898:	f8d8 0000 	ldr.w	r0, [r8]
 801789c:	d021      	beq.n	80178e2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801789e:	2100      	movs	r1, #0
 80178a0:	f04f 0e01 	mov.w	lr, #1
 80178a4:	f8d0 c000 	ldr.w	ip, [r0]
 80178a8:	b2a4      	uxth	r4, r4
 80178aa:	9106      	str	r1, [sp, #24]
 80178ac:	b2b6      	uxth	r6, r6
 80178ae:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80178b2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80178b6:	e9cd e107 	strd	lr, r1, [sp, #28]
 80178ba:	f8b9 e000 	ldrh.w	lr, [r9]
 80178be:	9703      	str	r7, [sp, #12]
 80178c0:	9401      	str	r4, [sp, #4]
 80178c2:	9600      	str	r6, [sp, #0]
 80178c4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80178c8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80178cc:	9102      	str	r1, [sp, #8]
 80178ce:	4629      	mov	r1, r5
 80178d0:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 80178d4:	47a0      	blx	r4
 80178d6:	b00f      	add	sp, #60	; 0x3c
 80178d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178dc:	f010 0f01 	tst.w	r0, #1
 80178e0:	e7da      	b.n	8017898 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 80178e2:	6803      	ldr	r3, [r0, #0]
 80178e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178e6:	4798      	blx	r3
 80178e8:	f8b9 1000 	ldrh.w	r1, [r9]
 80178ec:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80178f0:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 80178f4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80178f8:	434c      	muls	r4, r1
 80178fa:	2fff      	cmp	r7, #255	; 0xff
 80178fc:	fb01 2303 	mla	r3, r1, r3, r2
 8017900:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017904:	eba1 0106 	sub.w	r1, r1, r6
 8017908:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801790c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017910:	4418      	add	r0, r3
 8017912:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8017916:	eba3 0606 	sub.w	r6, r3, r6
 801791a:	4404      	add	r4, r0
 801791c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8017920:	d04a      	beq.n	80179b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8017922:	43fa      	mvns	r2, r7
 8017924:	b2bb      	uxth	r3, r7
 8017926:	b2d7      	uxtb	r7, r2
 8017928:	42a0      	cmp	r0, r4
 801792a:	d263      	bcs.n	80179f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801792c:	eb00 0e0c 	add.w	lr, r0, ip
 8017930:	4586      	cmp	lr, r0
 8017932:	f100 0803 	add.w	r8, r0, #3
 8017936:	d93a      	bls.n	80179ae <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8017938:	f835 2b02 	ldrh.w	r2, [r5], #2
 801793c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8017940:	00d0      	lsls	r0, r2, #3
 8017942:	fb19 f907 	smulbb	r9, r9, r7
 8017946:	b2c0      	uxtb	r0, r0
 8017948:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801794c:	fb00 9003 	mla	r0, r0, r3, r9
 8017950:	b280      	uxth	r0, r0
 8017952:	f100 0901 	add.w	r9, r0, #1
 8017956:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801795a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801795e:	fb19 f907 	smulbb	r9, r9, r7
 8017962:	1200      	asrs	r0, r0, #8
 8017964:	f808 0c03 	strb.w	r0, [r8, #-3]
 8017968:	10d0      	asrs	r0, r2, #3
 801796a:	1212      	asrs	r2, r2, #8
 801796c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8017970:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8017974:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8017978:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801797c:	fb00 9003 	mla	r0, r0, r3, r9
 8017980:	b280      	uxth	r0, r0
 8017982:	f100 0901 	add.w	r9, r0, #1
 8017986:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801798a:	1200      	asrs	r0, r0, #8
 801798c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8017990:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8017994:	fb10 f007 	smulbb	r0, r0, r7
 8017998:	fb02 0203 	mla	r2, r2, r3, r0
 801799c:	b292      	uxth	r2, r2
 801799e:	1c50      	adds	r0, r2, #1
 80179a0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80179a4:	4640      	mov	r0, r8
 80179a6:	1212      	asrs	r2, r2, #8
 80179a8:	f808 2c01 	strb.w	r2, [r8, #-1]
 80179ac:	e7c0      	b.n	8017930 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80179ae:	4408      	add	r0, r1
 80179b0:	4435      	add	r5, r6
 80179b2:	e7b9      	b.n	8017928 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80179b4:	4408      	add	r0, r1
 80179b6:	4435      	add	r5, r6
 80179b8:	42a0      	cmp	r0, r4
 80179ba:	d21b      	bcs.n	80179f4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80179bc:	eb00 070c 	add.w	r7, r0, ip
 80179c0:	42b8      	cmp	r0, r7
 80179c2:	d2f7      	bcs.n	80179b4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80179c4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80179c8:	3003      	adds	r0, #3
 80179ca:	00da      	lsls	r2, r3, #3
 80179cc:	b2d2      	uxtb	r2, r2
 80179ce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80179d2:	f800 2c03 	strb.w	r2, [r0, #-3]
 80179d6:	10da      	asrs	r2, r3, #3
 80179d8:	121b      	asrs	r3, r3, #8
 80179da:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80179de:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80179e2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80179e6:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80179ea:	f800 2c02 	strb.w	r2, [r0, #-2]
 80179ee:	f800 3c01 	strb.w	r3, [r0, #-1]
 80179f2:	e7e5      	b.n	80179c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 80179f4:	4b02      	ldr	r3, [pc, #8]	; (8017a00 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 80179f6:	6818      	ldr	r0, [r3, #0]
 80179f8:	6803      	ldr	r3, [r0, #0]
 80179fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179fc:	4798      	blx	r3
 80179fe:	e76a      	b.n	80178d6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8017a00:	2401aa78 	.word	0x2401aa78
 8017a04:	2401aa72 	.word	0x2401aa72

08017a08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8017a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a0c:	b08a      	sub	sp, #40	; 0x28
 8017a0e:	460d      	mov	r5, r1
 8017a10:	4604      	mov	r4, r0
 8017a12:	461e      	mov	r6, r3
 8017a14:	6808      	ldr	r0, [r1, #0]
 8017a16:	ab06      	add	r3, sp, #24
 8017a18:	6849      	ldr	r1, [r1, #4]
 8017a1a:	4f5d      	ldr	r7, [pc, #372]	; (8017b90 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8017a1c:	c303      	stmia	r3!, {r0, r1}
 8017a1e:	6810      	ldr	r0, [r2, #0]
 8017a20:	ab08      	add	r3, sp, #32
 8017a22:	6851      	ldr	r1, [r2, #4]
 8017a24:	c303      	stmia	r3!, {r0, r1}
 8017a26:	a806      	add	r0, sp, #24
 8017a28:	f7f9 fcf0 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017a2c:	4629      	mov	r1, r5
 8017a2e:	a808      	add	r0, sp, #32
 8017a30:	f7f9 fd14 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017a34:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017a38:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017a3c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017a40:	6838      	ldr	r0, [r7, #0]
 8017a42:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017a46:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8017a4a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8017a4e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8017a52:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017a56:	440a      	add	r2, r1
 8017a58:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017a5c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017a60:	4413      	add	r3, r2
 8017a62:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017a66:	6803      	ldr	r3, [r0, #0]
 8017a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a6a:	4798      	blx	r3
 8017a6c:	2eff      	cmp	r6, #255	; 0xff
 8017a6e:	d119      	bne.n	8017aa4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8017a70:	f010 0f20 	tst.w	r0, #32
 8017a74:	6838      	ldr	r0, [r7, #0]
 8017a76:	d018      	beq.n	8017aaa <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8017a78:	b2ad      	uxth	r5, r5
 8017a7a:	2700      	movs	r7, #0
 8017a7c:	6801      	ldr	r1, [r0, #0]
 8017a7e:	9501      	str	r5, [sp, #4]
 8017a80:	fa1f f588 	uxth.w	r5, r8
 8017a84:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017a88:	9500      	str	r5, [sp, #0]
 8017a8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017a8e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8017a92:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017a96:	9602      	str	r6, [sp, #8]
 8017a98:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8017a9a:	4621      	mov	r1, r4
 8017a9c:	47a8      	blx	r5
 8017a9e:	b00a      	add	sp, #40	; 0x28
 8017aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aa4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017aa8:	e7e4      	b.n	8017a74 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8017aaa:	6803      	ldr	r3, [r0, #0]
 8017aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aae:	4798      	blx	r3
 8017ab0:	4b38      	ldr	r3, [pc, #224]	; (8017b94 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8017ab2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017ab6:	f8b3 c000 	ldrh.w	ip, [r3]
 8017aba:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017abe:	fb0c f505 	mul.w	r5, ip, r5
 8017ac2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8017ac6:	fb0c 2303 	mla	r3, ip, r3, r2
 8017aca:	ebac 0c08 	sub.w	ip, ip, r8
 8017ace:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ad2:	ebae 0e08 	sub.w	lr, lr, r8
 8017ad6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ada:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8017ade:	4418      	add	r0, r3
 8017ae0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8017ae4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8017ae8:	4405      	add	r5, r0
 8017aea:	42a8      	cmp	r0, r5
 8017aec:	d24a      	bcs.n	8017b84 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8017aee:	eb00 0803 	add.w	r8, r0, r3
 8017af2:	4540      	cmp	r0, r8
 8017af4:	d243      	bcs.n	8017b7e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8017af6:	78e2      	ldrb	r2, [r4, #3]
 8017af8:	b15a      	cbz	r2, 8017b12 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8017afa:	2aff      	cmp	r2, #255	; 0xff
 8017afc:	f894 9000 	ldrb.w	r9, [r4]
 8017b00:	d10a      	bne.n	8017b18 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8017b02:	2eff      	cmp	r6, #255	; 0xff
 8017b04:	d108      	bne.n	8017b18 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8017b06:	f880 9000 	strb.w	r9, [r0]
 8017b0a:	7862      	ldrb	r2, [r4, #1]
 8017b0c:	7042      	strb	r2, [r0, #1]
 8017b0e:	78a2      	ldrb	r2, [r4, #2]
 8017b10:	7082      	strb	r2, [r0, #2]
 8017b12:	3003      	adds	r0, #3
 8017b14:	3404      	adds	r4, #4
 8017b16:	e7ec      	b.n	8017af2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8017b18:	4372      	muls	r2, r6
 8017b1a:	1c51      	adds	r1, r2, #1
 8017b1c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8017b20:	1209      	asrs	r1, r1, #8
 8017b22:	fa1f fa81 	uxth.w	sl, r1
 8017b26:	43c9      	mvns	r1, r1
 8017b28:	fb19 f90a 	smulbb	r9, r9, sl
 8017b2c:	b2ca      	uxtb	r2, r1
 8017b2e:	7801      	ldrb	r1, [r0, #0]
 8017b30:	fb01 9902 	mla	r9, r1, r2, r9
 8017b34:	fa1f f989 	uxth.w	r9, r9
 8017b38:	f109 0101 	add.w	r1, r9, #1
 8017b3c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8017b40:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b44:	f880 9000 	strb.w	r9, [r0]
 8017b48:	f890 9001 	ldrb.w	r9, [r0, #1]
 8017b4c:	7861      	ldrb	r1, [r4, #1]
 8017b4e:	fb19 f902 	smulbb	r9, r9, r2
 8017b52:	fb01 910a 	mla	r1, r1, sl, r9
 8017b56:	b289      	uxth	r1, r1
 8017b58:	f101 0901 	add.w	r9, r1, #1
 8017b5c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8017b60:	1209      	asrs	r1, r1, #8
 8017b62:	7041      	strb	r1, [r0, #1]
 8017b64:	7881      	ldrb	r1, [r0, #2]
 8017b66:	f894 9002 	ldrb.w	r9, [r4, #2]
 8017b6a:	fb11 f202 	smulbb	r2, r1, r2
 8017b6e:	fb09 220a 	mla	r2, r9, sl, r2
 8017b72:	b292      	uxth	r2, r2
 8017b74:	1c51      	adds	r1, r2, #1
 8017b76:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8017b7a:	1212      	asrs	r2, r2, #8
 8017b7c:	e7c8      	b.n	8017b10 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8017b7e:	4460      	add	r0, ip
 8017b80:	4474      	add	r4, lr
 8017b82:	e7b2      	b.n	8017aea <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8017b84:	6838      	ldr	r0, [r7, #0]
 8017b86:	6803      	ldr	r3, [r0, #0]
 8017b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b8a:	4798      	blx	r3
 8017b8c:	e787      	b.n	8017a9e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8017b8e:	bf00      	nop
 8017b90:	2401aa78 	.word	0x2401aa78
 8017b94:	2401aa72 	.word	0x2401aa72

08017b98 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8017b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b9c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8017ba0:	4607      	mov	r7, r0
 8017ba2:	460c      	mov	r4, r1
 8017ba4:	4692      	mov	sl, r2
 8017ba6:	4699      	mov	r9, r3
 8017ba8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017baa:	b31d      	cbz	r5, 8017bf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017bac:	4608      	mov	r0, r1
 8017bae:	f7fc fb91 	bl	80142d4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017bb2:	4680      	mov	r8, r0
 8017bb4:	4620      	mov	r0, r4
 8017bb6:	f7fc fbc1 	bl	801433c <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017bba:	f8ad 000e 	strh.w	r0, [sp, #14]
 8017bbe:	4620      	mov	r0, r4
 8017bc0:	f8ad a008 	strh.w	sl, [sp, #8]
 8017bc4:	f8ad 900a 	strh.w	r9, [sp, #10]
 8017bc8:	f8ad 800c 	strh.w	r8, [sp, #12]
 8017bcc:	f7fc fcba 	bl	8014544 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017bd0:	280b      	cmp	r0, #11
 8017bd2:	d80f      	bhi.n	8017bf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017bd4:	e8df f000 	tbb	[pc, r0]
 8017bd8:	0e062a21 	.word	0x0e062a21
 8017bdc:	0e0e0e0e 	.word	0x0e0e0e0e
 8017be0:	110e0e0e 	.word	0x110e0e0e
 8017be4:	4620      	mov	r0, r4
 8017be6:	f7fc fc29 	bl	801443c <_ZNK8touchgfx6Bitmap7getDataEv>
 8017bea:	462b      	mov	r3, r5
 8017bec:	4632      	mov	r2, r6
 8017bee:	a902      	add	r1, sp, #8
 8017bf0:	f7ff ff0a 	bl	8017a08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017bf4:	b004      	add	sp, #16
 8017bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bfa:	4620      	mov	r0, r4
 8017bfc:	f7fc fc1e 	bl	801443c <_ZNK8touchgfx6Bitmap7getDataEv>
 8017c00:	4680      	mov	r8, r0
 8017c02:	4620      	mov	r0, r4
 8017c04:	f7fc fc4a 	bl	801449c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8017c08:	ab02      	add	r3, sp, #8
 8017c0a:	4602      	mov	r2, r0
 8017c0c:	4641      	mov	r1, r8
 8017c0e:	4638      	mov	r0, r7
 8017c10:	e9cd 6500 	strd	r6, r5, [sp]
 8017c14:	f7ff fdc2 	bl	801779c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8017c18:	e7ec      	b.n	8017bf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017c1a:	4620      	mov	r0, r4
 8017c1c:	f7fc fc0e 	bl	801443c <_ZNK8touchgfx6Bitmap7getDataEv>
 8017c20:	462b      	mov	r3, r5
 8017c22:	4632      	mov	r2, r6
 8017c24:	a902      	add	r1, sp, #8
 8017c26:	f7ff fdfb 	bl	8017820 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8017c2a:	e7e3      	b.n	8017bf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	4620      	mov	r0, r4
 8017c30:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8017c34:	f7fc fc02 	bl	801443c <_ZNK8touchgfx6Bitmap7getDataEv>
 8017c38:	2300      	movs	r3, #0
 8017c3a:	4601      	mov	r1, r0
 8017c3c:	aa02      	add	r2, sp, #8
 8017c3e:	4638      	mov	r0, r7
 8017c40:	e9cd 5300 	strd	r5, r3, [sp]
 8017c44:	4633      	mov	r3, r6
 8017c46:	47c0      	blx	r8
 8017c48:	e7d4      	b.n	8017bf4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

08017c4a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8017c4a:	b4f0      	push	{r4, r5, r6, r7}
 8017c4c:	4616      	mov	r6, r2
 8017c4e:	461c      	mov	r4, r3
 8017c50:	460d      	mov	r5, r1
 8017c52:	9a04      	ldr	r2, [sp, #16]
 8017c54:	2e01      	cmp	r6, #1
 8017c56:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8017c5a:	d00e      	beq.n	8017c7a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8017c5c:	d303      	bcc.n	8017c66 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8017c5e:	2e02      	cmp	r6, #2
 8017c60:	d006      	beq.n	8017c70 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8017c62:	bcf0      	pop	{r4, r5, r6, r7}
 8017c64:	4770      	bx	lr
 8017c66:	4621      	mov	r1, r4
 8017c68:	4628      	mov	r0, r5
 8017c6a:	bcf0      	pop	{r4, r5, r6, r7}
 8017c6c:	f7ff bdd8 	b.w	8017820 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8017c70:	4621      	mov	r1, r4
 8017c72:	4628      	mov	r0, r5
 8017c74:	bcf0      	pop	{r4, r5, r6, r7}
 8017c76:	f7ff bec7 	b.w	8017a08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017c7a:	6805      	ldr	r5, [r0, #0]
 8017c7c:	2600      	movs	r6, #0
 8017c7e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8017c82:	68ed      	ldr	r5, [r5, #12]
 8017c84:	4613      	mov	r3, r2
 8017c86:	4622      	mov	r2, r4
 8017c88:	46ac      	mov	ip, r5
 8017c8a:	bcf0      	pop	{r4, r5, r6, r7}
 8017c8c:	4760      	bx	ip
	...

08017c90 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8017c90:	b160      	cbz	r0, 8017cac <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8017c92:	2903      	cmp	r1, #3
 8017c94:	d818      	bhi.n	8017cc8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8017c96:	e8df f001 	tbb	[pc, r1]
 8017c9a:	1902      	.short	0x1902
 8017c9c:	1b06      	.short	0x1b06
 8017c9e:	4b0e      	ldr	r3, [pc, #56]	; (8017cd8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8017ca0:	8818      	ldrh	r0, [r3, #0]
 8017ca2:	4240      	negs	r0, r0
 8017ca4:	4770      	bx	lr
 8017ca6:	4b0c      	ldr	r3, [pc, #48]	; (8017cd8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8017ca8:	8818      	ldrh	r0, [r3, #0]
 8017caa:	4770      	bx	lr
 8017cac:	2903      	cmp	r1, #3
 8017cae:	d80b      	bhi.n	8017cc8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8017cb0:	a301      	add	r3, pc, #4	; (adr r3, 8017cb8 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8017cb2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017cb6:	bf00      	nop
 8017cb8:	08017ccd 	.word	0x08017ccd
 8017cbc:	08017ca7 	.word	0x08017ca7
 8017cc0:	08017cd1 	.word	0x08017cd1
 8017cc4:	08017c9f 	.word	0x08017c9f
 8017cc8:	2000      	movs	r0, #0
 8017cca:	4770      	bx	lr
 8017ccc:	2001      	movs	r0, #1
 8017cce:	4770      	bx	lr
 8017cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd4:	4770      	bx	lr
 8017cd6:	bf00      	nop
 8017cd8:	2401aa72 	.word	0x2401aa72

08017cdc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8017cdc:	b160      	cbz	r0, 8017cf8 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8017cde:	2903      	cmp	r1, #3
 8017ce0:	d818      	bhi.n	8017d14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8017ce2:	e8df f001 	tbb	[pc, r1]
 8017ce6:	0219      	.short	0x0219
 8017ce8:	051b      	.short	0x051b
 8017cea:	4b0e      	ldr	r3, [pc, #56]	; (8017d24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8017cec:	8818      	ldrh	r0, [r3, #0]
 8017cee:	4770      	bx	lr
 8017cf0:	4b0c      	ldr	r3, [pc, #48]	; (8017d24 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8017cf2:	8818      	ldrh	r0, [r3, #0]
 8017cf4:	4240      	negs	r0, r0
 8017cf6:	4770      	bx	lr
 8017cf8:	2903      	cmp	r1, #3
 8017cfa:	d80b      	bhi.n	8017d14 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8017cfc:	a301      	add	r3, pc, #4	; (adr r3, 8017d04 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8017cfe:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017d02:	bf00      	nop
 8017d04:	08017ceb 	.word	0x08017ceb
 8017d08:	08017d1d 	.word	0x08017d1d
 8017d0c:	08017cf1 	.word	0x08017cf1
 8017d10:	08017d19 	.word	0x08017d19
 8017d14:	2000      	movs	r0, #0
 8017d16:	4770      	bx	lr
 8017d18:	2001      	movs	r0, #1
 8017d1a:	4770      	bx	lr
 8017d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017d20:	4770      	bx	lr
 8017d22:	bf00      	nop
 8017d24:	2401aa72 	.word	0x2401aa72

08017d28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8017d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d2c:	b097      	sub	sp, #92	; 0x5c
 8017d2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017d30:	a912      	add	r1, sp, #72	; 0x48
 8017d32:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 8017d36:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 8017d3a:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8017d3e:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8017d42:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 8017d46:	e881 000c 	stmia.w	r1, {r2, r3}
 8017d4a:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8017d4e:	930a      	str	r3, [sp, #40]	; 0x28
 8017d50:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8017d54:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8017d58:	9311      	str	r3, [sp, #68]	; 0x44
 8017d5a:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8017d5e:	798d      	ldrb	r5, [r1, #6]
 8017d60:	930c      	str	r3, [sp, #48]	; 0x30
 8017d62:	7b4b      	ldrb	r3, [r1, #13]
 8017d64:	0158      	lsls	r0, r3, #5
 8017d66:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8017d6a:	4328      	orrs	r0, r5
 8017d6c:	9009      	str	r0, [sp, #36]	; 0x24
 8017d6e:	f000 817c 	beq.w	801806a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017d72:	011b      	lsls	r3, r3, #4
 8017d74:	79c8      	ldrb	r0, [r1, #7]
 8017d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d7a:	4303      	orrs	r3, r0
 8017d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8017d7e:	f000 8174 	beq.w	801806a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017d82:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8017d86:	b29b      	uxth	r3, r3
 8017d88:	2f00      	cmp	r7, #0
 8017d8a:	f000 8116 	beq.w	8017fba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8017d8e:	1aff      	subs	r7, r7, r3
 8017d90:	b2bf      	uxth	r7, r7
 8017d92:	043b      	lsls	r3, r7, #16
 8017d94:	d502      	bpl.n	8017d9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017d96:	1bf6      	subs	r6, r6, r7
 8017d98:	2700      	movs	r7, #0
 8017d9a:	b236      	sxth	r6, r6
 8017d9c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017da0:	a812      	add	r0, sp, #72	; 0x48
 8017da2:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8017da6:	428e      	cmp	r6, r1
 8017da8:	b28b      	uxth	r3, r1
 8017daa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8017dae:	bfbf      	itttt	lt
 8017db0:	18ff      	addlt	r7, r7, r3
 8017db2:	1bbe      	sublt	r6, r7, r6
 8017db4:	b2b7      	uxthlt	r7, r6
 8017db6:	460e      	movlt	r6, r1
 8017db8:	8891      	ldrh	r1, [r2, #4]
 8017dba:	440b      	add	r3, r1
 8017dbc:	4631      	mov	r1, r6
 8017dbe:	b21b      	sxth	r3, r3
 8017dc0:	9310      	str	r3, [sp, #64]	; 0x40
 8017dc2:	88d3      	ldrh	r3, [r2, #6]
 8017dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dc6:	449a      	add	sl, r3
 8017dc8:	fa0f f38a 	sxth.w	r3, sl
 8017dcc:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017dd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8017dd2:	4bb5      	ldr	r3, [pc, #724]	; (80180a8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8017dd4:	f893 b000 	ldrb.w	fp, [r3]
 8017dd8:	f10b 3cff 	add.w	ip, fp, #4294967295
 8017ddc:	f1dc 0300 	rsbs	r3, ip, #0
 8017de0:	eb43 030c 	adc.w	r3, r3, ip
 8017de4:	930d      	str	r3, [sp, #52]	; 0x34
 8017de6:	464b      	mov	r3, r9
 8017de8:	f7f9 f985 	bl	80110f6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8017dec:	4631      	mov	r1, r6
 8017dee:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8017df2:	464b      	mov	r3, r9
 8017df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017df6:	a812      	add	r0, sp, #72	; 0x48
 8017df8:	f7f9 f99a 	bl	8011130 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8017dfc:	a916      	add	r1, sp, #88	; 0x58
 8017dfe:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8017e02:	a815      	add	r0, sp, #84	; 0x54
 8017e04:	f7f9 fac0 	bl	8011388 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8017e08:	f1b9 0f00 	cmp.w	r9, #0
 8017e0c:	f040 80d8 	bne.w	8017fc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8017e10:	f1bb 0f01 	cmp.w	fp, #1
 8017e14:	f040 80dc 	bne.w	8017fd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8017e18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017e1a:	b153      	cbz	r3, 8017e32 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8017e1c:	2508      	movs	r5, #8
 8017e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017e20:	fb95 f3f8 	sdiv	r3, r5, r8
 8017e24:	1e5d      	subs	r5, r3, #1
 8017e26:	4415      	add	r5, r2
 8017e28:	fb95 f5f3 	sdiv	r5, r5, r3
 8017e2c:	fb15 f503 	smulbb	r5, r5, r3
 8017e30:	b2ad      	uxth	r5, r5
 8017e32:	b907      	cbnz	r7, 8017e36 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8017e34:	b16c      	cbz	r4, 8017e52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8017e36:	fb04 7305 	mla	r3, r4, r5, r7
 8017e3a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017e3c:	ebaa 0a04 	sub.w	sl, sl, r4
 8017e40:	fb08 f303 	mul.w	r3, r8, r3
 8017e44:	fa1f fa8a 	uxth.w	sl, sl
 8017e48:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8017e4c:	f003 0407 	and.w	r4, r3, #7
 8017e50:	9226      	str	r2, [sp, #152]	; 0x98
 8017e52:	4649      	mov	r1, r9
 8017e54:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017e56:	f7ff ff1b 	bl	8017c90 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8017e5a:	4683      	mov	fp, r0
 8017e5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017e5e:	f7ff ff3d 	bl	8017cdc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8017e62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017e64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e66:	4681      	mov	r9, r0
 8017e68:	1a9b      	subs	r3, r3, r2
 8017e6a:	459a      	cmp	sl, r3
 8017e6c:	bfa8      	it	ge
 8017e6e:	469a      	movge	sl, r3
 8017e70:	f1ba 0f00 	cmp.w	sl, #0
 8017e74:	f340 80f9 	ble.w	801806a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017e78:	1bf6      	subs	r6, r6, r7
 8017e7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e7c:	1b9e      	subs	r6, r3, r6
 8017e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e80:	429e      	cmp	r6, r3
 8017e82:	bfd4      	ite	le
 8017e84:	ebc7 0706 	rsble	r7, r7, r6
 8017e88:	ebc7 0703 	rsbgt	r7, r7, r3
 8017e8c:	2f00      	cmp	r7, #0
 8017e8e:	f340 80ec 	ble.w	801806a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017e92:	1bed      	subs	r5, r5, r7
 8017e94:	fb08 f305 	mul.w	r3, r8, r5
 8017e98:	930d      	str	r3, [sp, #52]	; 0x34
 8017e9a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e9c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8017ea0:	930e      	str	r3, [sp, #56]	; 0x38
 8017ea2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017ea4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8017eaa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017eac:	b2db      	uxtb	r3, r3
 8017eae:	9310      	str	r3, [sp, #64]	; 0x40
 8017eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	f040 80de 	bne.w	8018074 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8017eb8:	4b7c      	ldr	r3, [pc, #496]	; (80180ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8017eba:	6818      	ldr	r0, [r3, #0]
 8017ebc:	6803      	ldr	r3, [r0, #0]
 8017ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ec0:	4798      	blx	r3
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	4a7a      	ldr	r2, [pc, #488]	; (80180b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8017ec6:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8017eca:	fb07 9b1b 	mls	fp, r7, fp, r9
 8017ece:	fa03 f308 	lsl.w	r3, r3, r8
 8017ed2:	8811      	ldrh	r1, [r2, #0]
 8017ed4:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8017ed8:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8017edc:	3b01      	subs	r3, #1
 8017ede:	fb06 bb07 	mla	fp, r6, r7, fp
 8017ee2:	b2db      	uxtb	r3, r3
 8017ee4:	930a      	str	r3, [sp, #40]	; 0x28
 8017ee6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8017eea:	fb01 2303 	mla	r3, r1, r3, r2
 8017eee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ef2:	18c3      	adds	r3, r0, r3
 8017ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ef6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017ef8:	781a      	ldrb	r2, [r3, #0]
 8017efa:	4122      	asrs	r2, r4
 8017efc:	b2d2      	uxtb	r2, r2
 8017efe:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8017f02:	f0c0 80d7 	bcc.w	80180b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8017f06:	46be      	mov	lr, r7
 8017f08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f0a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8017f0e:	f0c0 80ba 	bcc.w	8018086 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8017f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017f14:	4013      	ands	r3, r2
 8017f16:	d041      	beq.n	8017f9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8017f18:	20ff      	movs	r0, #255	; 0xff
 8017f1a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017f1c:	fb90 f5f5 	sdiv	r5, r0, r5
 8017f20:	436b      	muls	r3, r5
 8017f22:	2bfe      	cmp	r3, #254	; 0xfe
 8017f24:	dd03      	ble.n	8017f2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8017f26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f28:	4285      	cmp	r5, r0
 8017f2a:	f000 80a5 	beq.w	8018078 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8017f2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f30:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017f32:	fb15 f303 	smulbb	r3, r5, r3
 8017f36:	b29b      	uxth	r3, r3
 8017f38:	1c5d      	adds	r5, r3, #1
 8017f3a:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8017f3e:	780d      	ldrb	r5, [r1, #0]
 8017f40:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017f44:	fa1f fc83 	uxth.w	ip, r3
 8017f48:	43db      	mvns	r3, r3
 8017f4a:	fb10 f90c 	smulbb	r9, r0, ip
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017f52:	fb05 9503 	mla	r5, r5, r3, r9
 8017f56:	b2ad      	uxth	r5, r5
 8017f58:	f105 0901 	add.w	r9, r5, #1
 8017f5c:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017f60:	fb10 f90c 	smulbb	r9, r0, ip
 8017f64:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017f66:	122d      	asrs	r5, r5, #8
 8017f68:	fb10 fc0c 	smulbb	ip, r0, ip
 8017f6c:	700d      	strb	r5, [r1, #0]
 8017f6e:	784d      	ldrb	r5, [r1, #1]
 8017f70:	fb05 9503 	mla	r5, r5, r3, r9
 8017f74:	b2ad      	uxth	r5, r5
 8017f76:	f105 0901 	add.w	r9, r5, #1
 8017f7a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017f7e:	122d      	asrs	r5, r5, #8
 8017f80:	704d      	strb	r5, [r1, #1]
 8017f82:	788d      	ldrb	r5, [r1, #2]
 8017f84:	fb05 cc03 	mla	ip, r5, r3, ip
 8017f88:	fa1f fc8c 	uxth.w	ip, ip
 8017f8c:	f10c 0301 	add.w	r3, ip, #1
 8017f90:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017f94:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017f98:	f881 c002 	strb.w	ip, [r1, #2]
 8017f9c:	4444      	add	r4, r8
 8017f9e:	4431      	add	r1, r6
 8017fa0:	b2a4      	uxth	r4, r4
 8017fa2:	2c07      	cmp	r4, #7
 8017fa4:	bf89      	itett	hi
 8017fa6:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8017fa8:	fa42 f208 	asrls.w	r2, r2, r8
 8017fac:	2400      	movhi	r4, #0
 8017fae:	785a      	ldrbhi	r2, [r3, #1]
 8017fb0:	bf8a      	itet	hi
 8017fb2:	3301      	addhi	r3, #1
 8017fb4:	b2d2      	uxtbls	r2, r2
 8017fb6:	9326      	strhi	r3, [sp, #152]	; 0x98
 8017fb8:	e7a7      	b.n	8017f0a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8017fba:	441e      	add	r6, r3
 8017fbc:	b236      	sxth	r6, r6
 8017fbe:	e6ed      	b.n	8017d9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017fc0:	f1b9 0f01 	cmp.w	r9, #1
 8017fc4:	f47f af28 	bne.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017fc8:	f1bb 0f01 	cmp.w	fp, #1
 8017fcc:	f47f af24 	bne.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017fd0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80180ac <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8017fd4:	f8db 0000 	ldr.w	r0, [fp]
 8017fd8:	6803      	ldr	r3, [r0, #0]
 8017fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fdc:	4798      	blx	r3
 8017fde:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8017fe2:	465a      	mov	r2, fp
 8017fe4:	d006      	beq.n	8017ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8017fe6:	f1b8 0f04 	cmp.w	r8, #4
 8017fea:	d141      	bne.n	8018070 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8017fec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017fee:	3300      	adds	r3, #0
 8017ff0:	bf18      	it	ne
 8017ff2:	2301      	movne	r3, #1
 8017ff4:	0580      	lsls	r0, r0, #22
 8017ff6:	d566      	bpl.n	80180c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017ff8:	f1b8 0f08 	cmp.w	r8, #8
 8017ffc:	d163      	bne.n	80180c6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	bf0c      	ite	eq
 8018002:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8018006:	f44f 7180 	movne.w	r1, #256	; 0x100
 801800a:	2f00      	cmp	r7, #0
 801800c:	f47f af04 	bne.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018010:	2c00      	cmp	r4, #0
 8018012:	f47f af01 	bne.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018018:	9810      	ldr	r0, [sp, #64]	; 0x40
 801801a:	18f3      	adds	r3, r6, r3
 801801c:	4283      	cmp	r3, r0
 801801e:	f73f aefb 	bgt.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018026:	4403      	add	r3, r0
 8018028:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801802a:	4283      	cmp	r3, r0
 801802c:	f73f aef4 	bgt.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018030:	f1b8 0f08 	cmp.w	r8, #8
 8018034:	6810      	ldr	r0, [r2, #0]
 8018036:	f04f 0600 	mov.w	r6, #0
 801803a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801803e:	bf18      	it	ne
 8018040:	3501      	addne	r5, #1
 8018042:	6804      	ldr	r4, [r0, #0]
 8018044:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8018048:	bf18      	it	ne
 801804a:	f025 0501 	bicne.w	r5, r5, #1
 801804e:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8018052:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018054:	bf18      	it	ne
 8018056:	b2ad      	uxthne	r5, r5
 8018058:	9104      	str	r1, [sp, #16]
 801805a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801805c:	e9cd 5a00 	strd	r5, sl, [sp]
 8018060:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018064:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018066:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8018068:	47a0      	blx	r4
 801806a:	b017      	add	sp, #92	; 0x5c
 801806c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018070:	2300      	movs	r3, #0
 8018072:	e7bf      	b.n	8017ff4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8018074:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018076:	e724      	b.n	8017ec2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8018078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801807a:	700b      	strb	r3, [r1, #0]
 801807c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801807e:	704b      	strb	r3, [r1, #1]
 8018080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018082:	708b      	strb	r3, [r1, #2]
 8018084:	e78a      	b.n	8017f9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8018086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018088:	b153      	cbz	r3, 80180a0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801808a:	441c      	add	r4, r3
 801808c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801808e:	b2a4      	uxth	r4, r4
 8018090:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8018094:	f004 0407 	and.w	r4, r4, #7
 8018098:	781a      	ldrb	r2, [r3, #0]
 801809a:	9326      	str	r3, [sp, #152]	; 0x98
 801809c:	4122      	asrs	r2, r4
 801809e:	b2d2      	uxtb	r2, r2
 80180a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180a2:	445b      	add	r3, fp
 80180a4:	9309      	str	r3, [sp, #36]	; 0x24
 80180a6:	e72a      	b.n	8017efe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80180a8:	2401aa70 	.word	0x2401aa70
 80180ac:	2401aa78 	.word	0x2401aa78
 80180b0:	2401aa72 	.word	0x2401aa72
 80180b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d1d7      	bne.n	801806a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80180ba:	4b06      	ldr	r3, [pc, #24]	; (80180d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80180bc:	6818      	ldr	r0, [r3, #0]
 80180be:	6803      	ldr	r3, [r0, #0]
 80180c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80180c2:	4798      	blx	r3
 80180c4:	e7d1      	b.n	801806a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	f43f aea6 	beq.w	8017e18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80180cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80180d0:	e79b      	b.n	801800a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80180d2:	bf00      	nop
 80180d4:	2401aa78 	.word	0x2401aa78

080180d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80180d8:	b538      	push	{r3, r4, r5, lr}
 80180da:	4c15      	ldr	r4, [pc, #84]	; (8018130 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80180dc:	4605      	mov	r5, r0
 80180de:	7823      	ldrb	r3, [r4, #0]
 80180e0:	f3bf 8f5b 	dmb	ish
 80180e4:	07da      	lsls	r2, r3, #31
 80180e6:	d40b      	bmi.n	8018100 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80180e8:	4620      	mov	r0, r4
 80180ea:	f005 fb4c 	bl	801d786 <__cxa_guard_acquire>
 80180ee:	b138      	cbz	r0, 8018100 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80180f0:	4620      	mov	r0, r4
 80180f2:	f005 fb54 	bl	801d79e <__cxa_guard_release>
 80180f6:	4a0f      	ldr	r2, [pc, #60]	; (8018134 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80180f8:	490f      	ldr	r1, [pc, #60]	; (8018138 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 80180fa:	4810      	ldr	r0, [pc, #64]	; (801813c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80180fc:	f005 fb3c 	bl	801d778 <__aeabi_atexit>
 8018100:	4c0f      	ldr	r4, [pc, #60]	; (8018140 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8018102:	7823      	ldrb	r3, [r4, #0]
 8018104:	f3bf 8f5b 	dmb	ish
 8018108:	07db      	lsls	r3, r3, #31
 801810a:	d40b      	bmi.n	8018124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801810c:	4620      	mov	r0, r4
 801810e:	f005 fb3a 	bl	801d786 <__cxa_guard_acquire>
 8018112:	b138      	cbz	r0, 8018124 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8018114:	4620      	mov	r0, r4
 8018116:	f005 fb42 	bl	801d79e <__cxa_guard_release>
 801811a:	4a06      	ldr	r2, [pc, #24]	; (8018134 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801811c:	4909      	ldr	r1, [pc, #36]	; (8018144 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801811e:	480a      	ldr	r0, [pc, #40]	; (8018148 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8018120:	f005 fb2a 	bl	801d778 <__aeabi_atexit>
 8018124:	4b05      	ldr	r3, [pc, #20]	; (801813c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8018126:	612b      	str	r3, [r5, #16]
 8018128:	4b07      	ldr	r3, [pc, #28]	; (8018148 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801812a:	616b      	str	r3, [r5, #20]
 801812c:	bd38      	pop	{r3, r4, r5, pc}
 801812e:	bf00      	nop
 8018130:	2401ab50 	.word	0x2401ab50
 8018134:	24000000 	.word	0x24000000
 8018138:	08015f21 	.word	0x08015f21
 801813c:	2400006c 	.word	0x2400006c
 8018140:	2401ab54 	.word	0x2401ab54
 8018144:	08015f1f 	.word	0x08015f1f
 8018148:	24000070 	.word	0x24000070

0801814c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801814c:	b538      	push	{r3, r4, r5, lr}
 801814e:	4c15      	ldr	r4, [pc, #84]	; (80181a4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8018150:	4605      	mov	r5, r0
 8018152:	7823      	ldrb	r3, [r4, #0]
 8018154:	f3bf 8f5b 	dmb	ish
 8018158:	07da      	lsls	r2, r3, #31
 801815a:	d40b      	bmi.n	8018174 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801815c:	4620      	mov	r0, r4
 801815e:	f005 fb12 	bl	801d786 <__cxa_guard_acquire>
 8018162:	b138      	cbz	r0, 8018174 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018164:	4620      	mov	r0, r4
 8018166:	f005 fb1a 	bl	801d79e <__cxa_guard_release>
 801816a:	4a0f      	ldr	r2, [pc, #60]	; (80181a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801816c:	490f      	ldr	r1, [pc, #60]	; (80181ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801816e:	4810      	ldr	r0, [pc, #64]	; (80181b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018170:	f005 fb02 	bl	801d778 <__aeabi_atexit>
 8018174:	4c0f      	ldr	r4, [pc, #60]	; (80181b4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018176:	7823      	ldrb	r3, [r4, #0]
 8018178:	f3bf 8f5b 	dmb	ish
 801817c:	07db      	lsls	r3, r3, #31
 801817e:	d40b      	bmi.n	8018198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018180:	4620      	mov	r0, r4
 8018182:	f005 fb00 	bl	801d786 <__cxa_guard_acquire>
 8018186:	b138      	cbz	r0, 8018198 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018188:	4620      	mov	r0, r4
 801818a:	f005 fb08 	bl	801d79e <__cxa_guard_release>
 801818e:	4a06      	ldr	r2, [pc, #24]	; (80181a8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018190:	4909      	ldr	r1, [pc, #36]	; (80181b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018192:	480a      	ldr	r0, [pc, #40]	; (80181bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018194:	f005 faf0 	bl	801d778 <__aeabi_atexit>
 8018198:	4b05      	ldr	r3, [pc, #20]	; (80181b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801819a:	60ab      	str	r3, [r5, #8]
 801819c:	4b07      	ldr	r3, [pc, #28]	; (80181bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801819e:	60eb      	str	r3, [r5, #12]
 80181a0:	bd38      	pop	{r3, r4, r5, pc}
 80181a2:	bf00      	nop
 80181a4:	2401ab30 	.word	0x2401ab30
 80181a8:	24000000 	.word	0x24000000
 80181ac:	08015f25 	.word	0x08015f25
 80181b0:	2400004c 	.word	0x2400004c
 80181b4:	2401ab34 	.word	0x2401ab34
 80181b8:	08015f23 	.word	0x08015f23
 80181bc:	24000050 	.word	0x24000050

080181c0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80181c0:	b510      	push	{r4, lr}
 80181c2:	4604      	mov	r4, r0
 80181c4:	f7ff ff88 	bl	80180d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80181c8:	4620      	mov	r0, r4
 80181ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181ce:	f7ff bfbd 	b.w	801814c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080181d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80181d4:	b538      	push	{r3, r4, r5, lr}
 80181d6:	4c15      	ldr	r4, [pc, #84]	; (801822c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80181d8:	4605      	mov	r5, r0
 80181da:	7823      	ldrb	r3, [r4, #0]
 80181dc:	f3bf 8f5b 	dmb	ish
 80181e0:	07da      	lsls	r2, r3, #31
 80181e2:	d40b      	bmi.n	80181fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80181e4:	4620      	mov	r0, r4
 80181e6:	f005 face 	bl	801d786 <__cxa_guard_acquire>
 80181ea:	b138      	cbz	r0, 80181fc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80181ec:	4620      	mov	r0, r4
 80181ee:	f005 fad6 	bl	801d79e <__cxa_guard_release>
 80181f2:	4a0f      	ldr	r2, [pc, #60]	; (8018230 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80181f4:	490f      	ldr	r1, [pc, #60]	; (8018234 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 80181f6:	4810      	ldr	r0, [pc, #64]	; (8018238 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80181f8:	f005 fabe 	bl	801d778 <__aeabi_atexit>
 80181fc:	4c0f      	ldr	r4, [pc, #60]	; (801823c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 80181fe:	7823      	ldrb	r3, [r4, #0]
 8018200:	f3bf 8f5b 	dmb	ish
 8018204:	07db      	lsls	r3, r3, #31
 8018206:	d40b      	bmi.n	8018220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018208:	4620      	mov	r0, r4
 801820a:	f005 fabc 	bl	801d786 <__cxa_guard_acquire>
 801820e:	b138      	cbz	r0, 8018220 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8018210:	4620      	mov	r0, r4
 8018212:	f005 fac4 	bl	801d79e <__cxa_guard_release>
 8018216:	4a06      	ldr	r2, [pc, #24]	; (8018230 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018218:	4909      	ldr	r1, [pc, #36]	; (8018240 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801821a:	480a      	ldr	r0, [pc, #40]	; (8018244 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801821c:	f005 faac 	bl	801d778 <__aeabi_atexit>
 8018220:	4b05      	ldr	r3, [pc, #20]	; (8018238 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018222:	622b      	str	r3, [r5, #32]
 8018224:	4b07      	ldr	r3, [pc, #28]	; (8018244 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8018226:	626b      	str	r3, [r5, #36]	; 0x24
 8018228:	bd38      	pop	{r3, r4, r5, pc}
 801822a:	bf00      	nop
 801822c:	2401ab58 	.word	0x2401ab58
 8018230:	24000000 	.word	0x24000000
 8018234:	08015f19 	.word	0x08015f19
 8018238:	24000074 	.word	0x24000074
 801823c:	2401ab5c 	.word	0x2401ab5c
 8018240:	08015f17 	.word	0x08015f17
 8018244:	24000078 	.word	0x24000078

08018248 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	4c15      	ldr	r4, [pc, #84]	; (80182a0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801824c:	4605      	mov	r5, r0
 801824e:	7823      	ldrb	r3, [r4, #0]
 8018250:	f3bf 8f5b 	dmb	ish
 8018254:	07da      	lsls	r2, r3, #31
 8018256:	d40b      	bmi.n	8018270 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018258:	4620      	mov	r0, r4
 801825a:	f005 fa94 	bl	801d786 <__cxa_guard_acquire>
 801825e:	b138      	cbz	r0, 8018270 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018260:	4620      	mov	r0, r4
 8018262:	f005 fa9c 	bl	801d79e <__cxa_guard_release>
 8018266:	4a0f      	ldr	r2, [pc, #60]	; (80182a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018268:	490f      	ldr	r1, [pc, #60]	; (80182a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801826a:	4810      	ldr	r0, [pc, #64]	; (80182ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801826c:	f005 fa84 	bl	801d778 <__aeabi_atexit>
 8018270:	4c0f      	ldr	r4, [pc, #60]	; (80182b0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018272:	7823      	ldrb	r3, [r4, #0]
 8018274:	f3bf 8f5b 	dmb	ish
 8018278:	07db      	lsls	r3, r3, #31
 801827a:	d40b      	bmi.n	8018294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801827c:	4620      	mov	r0, r4
 801827e:	f005 fa82 	bl	801d786 <__cxa_guard_acquire>
 8018282:	b138      	cbz	r0, 8018294 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018284:	4620      	mov	r0, r4
 8018286:	f005 fa8a 	bl	801d79e <__cxa_guard_release>
 801828a:	4a06      	ldr	r2, [pc, #24]	; (80182a4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801828c:	4909      	ldr	r1, [pc, #36]	; (80182b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801828e:	480a      	ldr	r0, [pc, #40]	; (80182b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018290:	f005 fa72 	bl	801d778 <__aeabi_atexit>
 8018294:	4b05      	ldr	r3, [pc, #20]	; (80182ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018296:	61ab      	str	r3, [r5, #24]
 8018298:	4b07      	ldr	r3, [pc, #28]	; (80182b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801829a:	61eb      	str	r3, [r5, #28]
 801829c:	bd38      	pop	{r3, r4, r5, pc}
 801829e:	bf00      	nop
 80182a0:	2401ab38 	.word	0x2401ab38
 80182a4:	24000000 	.word	0x24000000
 80182a8:	08015f1d 	.word	0x08015f1d
 80182ac:	24000054 	.word	0x24000054
 80182b0:	2401ab3c 	.word	0x2401ab3c
 80182b4:	08015f1b 	.word	0x08015f1b
 80182b8:	24000058 	.word	0x24000058

080182bc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80182bc:	b510      	push	{r4, lr}
 80182be:	4604      	mov	r4, r0
 80182c0:	f7ff ff88 	bl	80181d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80182c4:	4620      	mov	r0, r4
 80182c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182ca:	f7ff bfbd 	b.w	8018248 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080182d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80182d0:	b538      	push	{r3, r4, r5, lr}
 80182d2:	4c15      	ldr	r4, [pc, #84]	; (8018328 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80182d4:	4605      	mov	r5, r0
 80182d6:	7823      	ldrb	r3, [r4, #0]
 80182d8:	f3bf 8f5b 	dmb	ish
 80182dc:	07da      	lsls	r2, r3, #31
 80182de:	d40b      	bmi.n	80182f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80182e0:	4620      	mov	r0, r4
 80182e2:	f005 fa50 	bl	801d786 <__cxa_guard_acquire>
 80182e6:	b138      	cbz	r0, 80182f8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80182e8:	4620      	mov	r0, r4
 80182ea:	f005 fa58 	bl	801d79e <__cxa_guard_release>
 80182ee:	4a0f      	ldr	r2, [pc, #60]	; (801832c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80182f0:	490f      	ldr	r1, [pc, #60]	; (8018330 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80182f2:	4810      	ldr	r0, [pc, #64]	; (8018334 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80182f4:	f005 fa40 	bl	801d778 <__aeabi_atexit>
 80182f8:	4c0f      	ldr	r4, [pc, #60]	; (8018338 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80182fa:	7823      	ldrb	r3, [r4, #0]
 80182fc:	f3bf 8f5b 	dmb	ish
 8018300:	07db      	lsls	r3, r3, #31
 8018302:	d40b      	bmi.n	801831c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018304:	4620      	mov	r0, r4
 8018306:	f005 fa3e 	bl	801d786 <__cxa_guard_acquire>
 801830a:	b138      	cbz	r0, 801831c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801830c:	4620      	mov	r0, r4
 801830e:	f005 fa46 	bl	801d79e <__cxa_guard_release>
 8018312:	4a06      	ldr	r2, [pc, #24]	; (801832c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018314:	4909      	ldr	r1, [pc, #36]	; (801833c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018316:	480a      	ldr	r0, [pc, #40]	; (8018340 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018318:	f005 fa2e 	bl	801d778 <__aeabi_atexit>
 801831c:	4b05      	ldr	r3, [pc, #20]	; (8018334 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801831e:	632b      	str	r3, [r5, #48]	; 0x30
 8018320:	4b07      	ldr	r3, [pc, #28]	; (8018340 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018322:	636b      	str	r3, [r5, #52]	; 0x34
 8018324:	bd38      	pop	{r3, r4, r5, pc}
 8018326:	bf00      	nop
 8018328:	2401ab40 	.word	0x2401ab40
 801832c:	24000000 	.word	0x24000000
 8018330:	08015f11 	.word	0x08015f11
 8018334:	2400005c 	.word	0x2400005c
 8018338:	2401ab44 	.word	0x2401ab44
 801833c:	08015f0f 	.word	0x08015f0f
 8018340:	24000060 	.word	0x24000060

08018344 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018344:	b538      	push	{r3, r4, r5, lr}
 8018346:	4c15      	ldr	r4, [pc, #84]	; (801839c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018348:	4605      	mov	r5, r0
 801834a:	7823      	ldrb	r3, [r4, #0]
 801834c:	f3bf 8f5b 	dmb	ish
 8018350:	07da      	lsls	r2, r3, #31
 8018352:	d40b      	bmi.n	801836c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018354:	4620      	mov	r0, r4
 8018356:	f005 fa16 	bl	801d786 <__cxa_guard_acquire>
 801835a:	b138      	cbz	r0, 801836c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801835c:	4620      	mov	r0, r4
 801835e:	f005 fa1e 	bl	801d79e <__cxa_guard_release>
 8018362:	4a0f      	ldr	r2, [pc, #60]	; (80183a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018364:	490f      	ldr	r1, [pc, #60]	; (80183a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018366:	4810      	ldr	r0, [pc, #64]	; (80183a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018368:	f005 fa06 	bl	801d778 <__aeabi_atexit>
 801836c:	4c0f      	ldr	r4, [pc, #60]	; (80183ac <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801836e:	7823      	ldrb	r3, [r4, #0]
 8018370:	f3bf 8f5b 	dmb	ish
 8018374:	07db      	lsls	r3, r3, #31
 8018376:	d40b      	bmi.n	8018390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018378:	4620      	mov	r0, r4
 801837a:	f005 fa04 	bl	801d786 <__cxa_guard_acquire>
 801837e:	b138      	cbz	r0, 8018390 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018380:	4620      	mov	r0, r4
 8018382:	f005 fa0c 	bl	801d79e <__cxa_guard_release>
 8018386:	4a06      	ldr	r2, [pc, #24]	; (80183a0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018388:	4909      	ldr	r1, [pc, #36]	; (80183b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801838a:	480a      	ldr	r0, [pc, #40]	; (80183b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801838c:	f005 f9f4 	bl	801d778 <__aeabi_atexit>
 8018390:	4b05      	ldr	r3, [pc, #20]	; (80183a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018392:	62ab      	str	r3, [r5, #40]	; 0x28
 8018394:	4b07      	ldr	r3, [pc, #28]	; (80183b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018396:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018398:	bd38      	pop	{r3, r4, r5, pc}
 801839a:	bf00      	nop
 801839c:	2401ab18 	.word	0x2401ab18
 80183a0:	24000000 	.word	0x24000000
 80183a4:	08015f15 	.word	0x08015f15
 80183a8:	24000034 	.word	0x24000034
 80183ac:	2401ab1c 	.word	0x2401ab1c
 80183b0:	08015f13 	.word	0x08015f13
 80183b4:	24000038 	.word	0x24000038

080183b8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80183b8:	b510      	push	{r4, lr}
 80183ba:	4604      	mov	r4, r0
 80183bc:	f7ff ff88 	bl	80182d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80183c0:	4620      	mov	r0, r4
 80183c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80183c6:	f7ff bfbd 	b.w	8018344 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080183cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80183cc:	b538      	push	{r3, r4, r5, lr}
 80183ce:	4c15      	ldr	r4, [pc, #84]	; (8018424 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80183d0:	4605      	mov	r5, r0
 80183d2:	7823      	ldrb	r3, [r4, #0]
 80183d4:	f3bf 8f5b 	dmb	ish
 80183d8:	07da      	lsls	r2, r3, #31
 80183da:	d40b      	bmi.n	80183f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80183dc:	4620      	mov	r0, r4
 80183de:	f005 f9d2 	bl	801d786 <__cxa_guard_acquire>
 80183e2:	b138      	cbz	r0, 80183f4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80183e4:	4620      	mov	r0, r4
 80183e6:	f005 f9da 	bl	801d79e <__cxa_guard_release>
 80183ea:	4a0f      	ldr	r2, [pc, #60]	; (8018428 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80183ec:	490f      	ldr	r1, [pc, #60]	; (801842c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 80183ee:	4810      	ldr	r0, [pc, #64]	; (8018430 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80183f0:	f005 f9c2 	bl	801d778 <__aeabi_atexit>
 80183f4:	4c0f      	ldr	r4, [pc, #60]	; (8018434 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 80183f6:	7823      	ldrb	r3, [r4, #0]
 80183f8:	f3bf 8f5b 	dmb	ish
 80183fc:	07db      	lsls	r3, r3, #31
 80183fe:	d40b      	bmi.n	8018418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018400:	4620      	mov	r0, r4
 8018402:	f005 f9c0 	bl	801d786 <__cxa_guard_acquire>
 8018406:	b138      	cbz	r0, 8018418 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018408:	4620      	mov	r0, r4
 801840a:	f005 f9c8 	bl	801d79e <__cxa_guard_release>
 801840e:	4a06      	ldr	r2, [pc, #24]	; (8018428 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018410:	4909      	ldr	r1, [pc, #36]	; (8018438 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018412:	480a      	ldr	r0, [pc, #40]	; (801843c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018414:	f005 f9b0 	bl	801d778 <__aeabi_atexit>
 8018418:	4b05      	ldr	r3, [pc, #20]	; (8018430 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801841a:	642b      	str	r3, [r5, #64]	; 0x40
 801841c:	4b07      	ldr	r3, [pc, #28]	; (801843c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801841e:	646b      	str	r3, [r5, #68]	; 0x44
 8018420:	bd38      	pop	{r3, r4, r5, pc}
 8018422:	bf00      	nop
 8018424:	2401ab48 	.word	0x2401ab48
 8018428:	24000000 	.word	0x24000000
 801842c:	08015f09 	.word	0x08015f09
 8018430:	24000064 	.word	0x24000064
 8018434:	2401ab4c 	.word	0x2401ab4c
 8018438:	08015f07 	.word	0x08015f07
 801843c:	24000068 	.word	0x24000068

08018440 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018440:	b538      	push	{r3, r4, r5, lr}
 8018442:	4c15      	ldr	r4, [pc, #84]	; (8018498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018444:	4605      	mov	r5, r0
 8018446:	7823      	ldrb	r3, [r4, #0]
 8018448:	f3bf 8f5b 	dmb	ish
 801844c:	07da      	lsls	r2, r3, #31
 801844e:	d40b      	bmi.n	8018468 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018450:	4620      	mov	r0, r4
 8018452:	f005 f998 	bl	801d786 <__cxa_guard_acquire>
 8018456:	b138      	cbz	r0, 8018468 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018458:	4620      	mov	r0, r4
 801845a:	f005 f9a0 	bl	801d79e <__cxa_guard_release>
 801845e:	4a0f      	ldr	r2, [pc, #60]	; (801849c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018460:	490f      	ldr	r1, [pc, #60]	; (80184a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018462:	4810      	ldr	r0, [pc, #64]	; (80184a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018464:	f005 f988 	bl	801d778 <__aeabi_atexit>
 8018468:	4c0f      	ldr	r4, [pc, #60]	; (80184a8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801846a:	7823      	ldrb	r3, [r4, #0]
 801846c:	f3bf 8f5b 	dmb	ish
 8018470:	07db      	lsls	r3, r3, #31
 8018472:	d40b      	bmi.n	801848c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018474:	4620      	mov	r0, r4
 8018476:	f005 f986 	bl	801d786 <__cxa_guard_acquire>
 801847a:	b138      	cbz	r0, 801848c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801847c:	4620      	mov	r0, r4
 801847e:	f005 f98e 	bl	801d79e <__cxa_guard_release>
 8018482:	4a06      	ldr	r2, [pc, #24]	; (801849c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018484:	4909      	ldr	r1, [pc, #36]	; (80184ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018486:	480a      	ldr	r0, [pc, #40]	; (80184b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018488:	f005 f976 	bl	801d778 <__aeabi_atexit>
 801848c:	4b05      	ldr	r3, [pc, #20]	; (80184a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801848e:	63ab      	str	r3, [r5, #56]	; 0x38
 8018490:	4b07      	ldr	r3, [pc, #28]	; (80184b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018492:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018494:	bd38      	pop	{r3, r4, r5, pc}
 8018496:	bf00      	nop
 8018498:	2401ab28 	.word	0x2401ab28
 801849c:	24000000 	.word	0x24000000
 80184a0:	08015f0d 	.word	0x08015f0d
 80184a4:	24000044 	.word	0x24000044
 80184a8:	2401ab2c 	.word	0x2401ab2c
 80184ac:	08015f0b 	.word	0x08015f0b
 80184b0:	24000048 	.word	0x24000048

080184b4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80184b4:	b510      	push	{r4, lr}
 80184b6:	4604      	mov	r4, r0
 80184b8:	f7ff ff88 	bl	80183cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80184bc:	4620      	mov	r0, r4
 80184be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80184c2:	f7ff bfbd 	b.w	8018440 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080184c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80184c8:	b538      	push	{r3, r4, r5, lr}
 80184ca:	4c15      	ldr	r4, [pc, #84]	; (8018520 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80184cc:	4605      	mov	r5, r0
 80184ce:	7823      	ldrb	r3, [r4, #0]
 80184d0:	f3bf 8f5b 	dmb	ish
 80184d4:	07da      	lsls	r2, r3, #31
 80184d6:	d40b      	bmi.n	80184f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80184d8:	4620      	mov	r0, r4
 80184da:	f005 f954 	bl	801d786 <__cxa_guard_acquire>
 80184de:	b138      	cbz	r0, 80184f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80184e0:	4620      	mov	r0, r4
 80184e2:	f005 f95c 	bl	801d79e <__cxa_guard_release>
 80184e6:	4a0f      	ldr	r2, [pc, #60]	; (8018524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80184e8:	490f      	ldr	r1, [pc, #60]	; (8018528 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80184ea:	4810      	ldr	r0, [pc, #64]	; (801852c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80184ec:	f005 f944 	bl	801d778 <__aeabi_atexit>
 80184f0:	4c0f      	ldr	r4, [pc, #60]	; (8018530 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 80184f2:	7823      	ldrb	r3, [r4, #0]
 80184f4:	f3bf 8f5b 	dmb	ish
 80184f8:	07db      	lsls	r3, r3, #31
 80184fa:	d40b      	bmi.n	8018514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 80184fc:	4620      	mov	r0, r4
 80184fe:	f005 f942 	bl	801d786 <__cxa_guard_acquire>
 8018502:	b138      	cbz	r0, 8018514 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018504:	4620      	mov	r0, r4
 8018506:	f005 f94a 	bl	801d79e <__cxa_guard_release>
 801850a:	4a06      	ldr	r2, [pc, #24]	; (8018524 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801850c:	4909      	ldr	r1, [pc, #36]	; (8018534 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801850e:	480a      	ldr	r0, [pc, #40]	; (8018538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018510:	f005 f932 	bl	801d778 <__aeabi_atexit>
 8018514:	4b05      	ldr	r3, [pc, #20]	; (801852c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018516:	652b      	str	r3, [r5, #80]	; 0x50
 8018518:	4b07      	ldr	r3, [pc, #28]	; (8018538 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801851a:	656b      	str	r3, [r5, #84]	; 0x54
 801851c:	bd38      	pop	{r3, r4, r5, pc}
 801851e:	bf00      	nop
 8018520:	2401ab20 	.word	0x2401ab20
 8018524:	24000000 	.word	0x24000000
 8018528:	08015f01 	.word	0x08015f01
 801852c:	2400003c 	.word	0x2400003c
 8018530:	2401ab24 	.word	0x2401ab24
 8018534:	08015eff 	.word	0x08015eff
 8018538:	24000040 	.word	0x24000040

0801853c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801853c:	b538      	push	{r3, r4, r5, lr}
 801853e:	4c15      	ldr	r4, [pc, #84]	; (8018594 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018540:	4605      	mov	r5, r0
 8018542:	7823      	ldrb	r3, [r4, #0]
 8018544:	f3bf 8f5b 	dmb	ish
 8018548:	07da      	lsls	r2, r3, #31
 801854a:	d40b      	bmi.n	8018564 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801854c:	4620      	mov	r0, r4
 801854e:	f005 f91a 	bl	801d786 <__cxa_guard_acquire>
 8018552:	b138      	cbz	r0, 8018564 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018554:	4620      	mov	r0, r4
 8018556:	f005 f922 	bl	801d79e <__cxa_guard_release>
 801855a:	4a0f      	ldr	r2, [pc, #60]	; (8018598 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801855c:	490f      	ldr	r1, [pc, #60]	; (801859c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801855e:	4810      	ldr	r0, [pc, #64]	; (80185a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018560:	f005 f90a 	bl	801d778 <__aeabi_atexit>
 8018564:	4c0f      	ldr	r4, [pc, #60]	; (80185a4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018566:	7823      	ldrb	r3, [r4, #0]
 8018568:	f3bf 8f5b 	dmb	ish
 801856c:	07db      	lsls	r3, r3, #31
 801856e:	d40b      	bmi.n	8018588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018570:	4620      	mov	r0, r4
 8018572:	f005 f908 	bl	801d786 <__cxa_guard_acquire>
 8018576:	b138      	cbz	r0, 8018588 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018578:	4620      	mov	r0, r4
 801857a:	f005 f910 	bl	801d79e <__cxa_guard_release>
 801857e:	4a06      	ldr	r2, [pc, #24]	; (8018598 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018580:	4909      	ldr	r1, [pc, #36]	; (80185a8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018582:	480a      	ldr	r0, [pc, #40]	; (80185ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018584:	f005 f8f8 	bl	801d778 <__aeabi_atexit>
 8018588:	4b05      	ldr	r3, [pc, #20]	; (80185a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801858a:	64ab      	str	r3, [r5, #72]	; 0x48
 801858c:	4b07      	ldr	r3, [pc, #28]	; (80185ac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801858e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018590:	bd38      	pop	{r3, r4, r5, pc}
 8018592:	bf00      	nop
 8018594:	2401ab10 	.word	0x2401ab10
 8018598:	24000000 	.word	0x24000000
 801859c:	08015f05 	.word	0x08015f05
 80185a0:	2400002c 	.word	0x2400002c
 80185a4:	2401ab14 	.word	0x2401ab14
 80185a8:	08015f03 	.word	0x08015f03
 80185ac:	24000030 	.word	0x24000030

080185b0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 80185b0:	b510      	push	{r4, lr}
 80185b2:	4604      	mov	r4, r0
 80185b4:	f7ff ff88 	bl	80184c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80185b8:	4620      	mov	r0, r4
 80185ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185be:	f7ff bfbd 	b.w	801853c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

080185c2 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 80185c2:	b510      	push	{r4, lr}
 80185c4:	4604      	mov	r4, r0
 80185c6:	f7ff fff3 	bl	80185b0 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 80185ca:	4620      	mov	r0, r4
 80185cc:	f7ff ff72 	bl	80184b4 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 80185d0:	4620      	mov	r0, r4
 80185d2:	f7ff fe73 	bl	80182bc <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 80185d6:	4620      	mov	r0, r4
 80185d8:	f7ff fdf2 	bl	80181c0 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 80185dc:	4620      	mov	r0, r4
 80185de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80185e2:	f7ff bee9 	b.w	80183b8 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

080185e8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 80185e8:	b538      	push	{r3, r4, r5, lr}
 80185ea:	4c0b      	ldr	r4, [pc, #44]	; (8018618 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 80185ec:	4605      	mov	r5, r0
 80185ee:	7823      	ldrb	r3, [r4, #0]
 80185f0:	f3bf 8f5b 	dmb	ish
 80185f4:	07db      	lsls	r3, r3, #31
 80185f6:	d40b      	bmi.n	8018610 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 80185f8:	4620      	mov	r0, r4
 80185fa:	f005 f8c4 	bl	801d786 <__cxa_guard_acquire>
 80185fe:	b138      	cbz	r0, 8018610 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8018600:	4620      	mov	r0, r4
 8018602:	f005 f8cc 	bl	801d79e <__cxa_guard_release>
 8018606:	4a05      	ldr	r2, [pc, #20]	; (801861c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8018608:	4905      	ldr	r1, [pc, #20]	; (8018620 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801860a:	4806      	ldr	r0, [pc, #24]	; (8018624 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801860c:	f005 f8b4 	bl	801d778 <__aeabi_atexit>
 8018610:	4b04      	ldr	r3, [pc, #16]	; (8018624 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8018612:	65ab      	str	r3, [r5, #88]	; 0x58
 8018614:	bd38      	pop	{r3, r4, r5, pc}
 8018616:	bf00      	nop
 8018618:	2401ab04 	.word	0x2401ab04
 801861c:	24000000 	.word	0x24000000
 8018620:	08015efd 	.word	0x08015efd
 8018624:	24000024 	.word	0x24000024

08018628 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8018628:	b538      	push	{r3, r4, r5, lr}
 801862a:	4c0b      	ldr	r4, [pc, #44]	; (8018658 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801862c:	4605      	mov	r5, r0
 801862e:	7823      	ldrb	r3, [r4, #0]
 8018630:	f3bf 8f5b 	dmb	ish
 8018634:	07db      	lsls	r3, r3, #31
 8018636:	d40b      	bmi.n	8018650 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8018638:	4620      	mov	r0, r4
 801863a:	f005 f8a4 	bl	801d786 <__cxa_guard_acquire>
 801863e:	b138      	cbz	r0, 8018650 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8018640:	4620      	mov	r0, r4
 8018642:	f005 f8ac 	bl	801d79e <__cxa_guard_release>
 8018646:	4a05      	ldr	r2, [pc, #20]	; (801865c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8018648:	4905      	ldr	r1, [pc, #20]	; (8018660 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801864a:	4806      	ldr	r0, [pc, #24]	; (8018664 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801864c:	f005 f894 	bl	801d778 <__aeabi_atexit>
 8018650:	4b04      	ldr	r3, [pc, #16]	; (8018664 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8018652:	65eb      	str	r3, [r5, #92]	; 0x5c
 8018654:	bd38      	pop	{r3, r4, r5, pc}
 8018656:	bf00      	nop
 8018658:	2401ab08 	.word	0x2401ab08
 801865c:	24000000 	.word	0x24000000
 8018660:	08015efb 	.word	0x08015efb
 8018664:	24000028 	.word	0x24000028

08018668 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8018668:	b570      	push	{r4, r5, r6, lr}
 801866a:	4d0c      	ldr	r5, [pc, #48]	; (801869c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801866c:	4606      	mov	r6, r0
 801866e:	4c0c      	ldr	r4, [pc, #48]	; (80186a0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8018670:	782b      	ldrb	r3, [r5, #0]
 8018672:	f3bf 8f5b 	dmb	ish
 8018676:	f013 0f01 	tst.w	r3, #1
 801867a:	d10d      	bne.n	8018698 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801867c:	4628      	mov	r0, r5
 801867e:	f005 f882 	bl	801d786 <__cxa_guard_acquire>
 8018682:	b148      	cbz	r0, 8018698 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8018684:	4b07      	ldr	r3, [pc, #28]	; (80186a4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8018686:	4628      	mov	r0, r5
 8018688:	6023      	str	r3, [r4, #0]
 801868a:	f005 f888 	bl	801d79e <__cxa_guard_release>
 801868e:	4a06      	ldr	r2, [pc, #24]	; (80186a8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8018690:	4620      	mov	r0, r4
 8018692:	4906      	ldr	r1, [pc, #24]	; (80186ac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8018694:	f005 f870 	bl	801d778 <__aeabi_atexit>
 8018698:	6634      	str	r4, [r6, #96]	; 0x60
 801869a:	bd70      	pop	{r4, r5, r6, pc}
 801869c:	2401ab0c 	.word	0x2401ab0c
 80186a0:	2401ab60 	.word	0x2401ab60
 80186a4:	080202e4 	.word	0x080202e4
 80186a8:	24000000 	.word	0x24000000
 80186ac:	08015ef9 	.word	0x08015ef9

080186b0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 80186b0:	b510      	push	{r4, lr}
 80186b2:	4604      	mov	r4, r0
 80186b4:	f7ff ff98 	bl	80185e8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 80186b8:	4620      	mov	r0, r4
 80186ba:	f7ff ffb5 	bl	8018628 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 80186be:	4620      	mov	r0, r4
 80186c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186c4:	f7ff bfd0 	b.w	8018668 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

080186c8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 80186c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186cc:	b087      	sub	sp, #28
 80186ce:	788d      	ldrb	r5, [r1, #2]
 80186d0:	f891 9000 	ldrb.w	r9, [r1]
 80186d4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 80186d8:	9501      	str	r5, [sp, #4]
 80186da:	784d      	ldrb	r5, [r1, #1]
 80186dc:	9203      	str	r2, [sp, #12]
 80186de:	9502      	str	r5, [sp, #8]
 80186e0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80186e4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80186e8:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80186ec:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 80186f0:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 80186f4:	fb06 0708 	mla	r7, r6, r8, r0
 80186f8:	2e00      	cmp	r6, #0
 80186fa:	eb02 0a07 	add.w	sl, r2, r7
 80186fe:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8018702:	9d01      	ldr	r5, [sp, #4]
 8018704:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8018708:	ea45 0509 	orr.w	r5, r5, r9
 801870c:	9505      	str	r5, [sp, #20]
 801870e:	f2c0 80b2 	blt.w	8018876 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018712:	45b3      	cmp	fp, r6
 8018714:	f340 80af 	ble.w	8018876 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018718:	2800      	cmp	r0, #0
 801871a:	f2c0 80aa 	blt.w	8018872 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801871e:	4580      	cmp	r8, r0
 8018720:	f340 80a7 	ble.w	8018872 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018724:	9a03      	ldr	r2, [sp, #12]
 8018726:	5dd7      	ldrb	r7, [r2, r7]
 8018728:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801872c:	441f      	add	r7, r3
 801872e:	1c42      	adds	r2, r0, #1
 8018730:	f100 80a4 	bmi.w	801887c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018734:	4590      	cmp	r8, r2
 8018736:	f340 80a1 	ble.w	801887c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801873a:	2c00      	cmp	r4, #0
 801873c:	f000 809e 	beq.w	801887c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018740:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018748:	441d      	add	r5, r3
 801874a:	3601      	adds	r6, #1
 801874c:	f100 809a 	bmi.w	8018884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018750:	45b3      	cmp	fp, r6
 8018752:	f340 8097 	ble.w	8018884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018756:	f1bc 0f00 	cmp.w	ip, #0
 801875a:	f000 8093 	beq.w	8018884 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801875e:	2800      	cmp	r0, #0
 8018760:	f2c0 808e 	blt.w	8018880 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018764:	4580      	cmp	r8, r0
 8018766:	f340 808b 	ble.w	8018880 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801876a:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801876e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018772:	441e      	add	r6, r3
 8018774:	3001      	adds	r0, #1
 8018776:	f100 8088 	bmi.w	801888a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801877a:	4580      	cmp	r8, r0
 801877c:	f340 8085 	ble.w	801888a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018780:	2c00      	cmp	r4, #0
 8018782:	f000 8082 	beq.w	801888a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018786:	44d0      	add	r8, sl
 8018788:	f898 2001 	ldrb.w	r2, [r8, #1]
 801878c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018790:	4413      	add	r3, r2
 8018792:	b2a4      	uxth	r4, r4
 8018794:	f895 a000 	ldrb.w	sl, [r5]
 8018798:	fa1f fc8c 	uxth.w	ip, ip
 801879c:	fb04 fb0c 	mul.w	fp, r4, ip
 80187a0:	0124      	lsls	r4, r4, #4
 80187a2:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 80187a6:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 80187aa:	eba4 040b 	sub.w	r4, r4, fp
 80187ae:	fa1f f08c 	uxth.w	r0, ip
 80187b2:	b2a2      	uxth	r2, r4
 80187b4:	783c      	ldrb	r4, [r7, #0]
 80187b6:	eba8 0800 	sub.w	r8, r8, r0
 80187ba:	fa1f fc8e 	uxth.w	ip, lr
 80187be:	fb02 fa0a 	mul.w	sl, r2, sl
 80187c2:	ea6f 0e0e 	mvn.w	lr, lr
 80187c6:	fa1f f888 	uxth.w	r8, r8
 80187ca:	fa5f fe8e 	uxtb.w	lr, lr
 80187ce:	fb08 aa04 	mla	sl, r8, r4, sl
 80187d2:	7834      	ldrb	r4, [r6, #0]
 80187d4:	fb19 f90e 	smulbb	r9, r9, lr
 80187d8:	fb00 aa04 	mla	sl, r0, r4, sl
 80187dc:	781c      	ldrb	r4, [r3, #0]
 80187de:	fb0b a404 	mla	r4, fp, r4, sl
 80187e2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80187e6:	fb04 990c 	mla	r9, r4, ip, r9
 80187ea:	fa1f f989 	uxth.w	r9, r9
 80187ee:	f109 0401 	add.w	r4, r9, #1
 80187f2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 80187f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80187fa:	f881 9000 	strb.w	r9, [r1]
 80187fe:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018802:	787c      	ldrb	r4, [r7, #1]
 8018804:	fb02 f909 	mul.w	r9, r2, r9
 8018808:	fb08 9904 	mla	r9, r8, r4, r9
 801880c:	7874      	ldrb	r4, [r6, #1]
 801880e:	fb00 9904 	mla	r9, r0, r4, r9
 8018812:	785c      	ldrb	r4, [r3, #1]
 8018814:	fb0b 9404 	mla	r4, fp, r4, r9
 8018818:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801881c:	9c02      	ldr	r4, [sp, #8]
 801881e:	fb14 f90e 	smulbb	r9, r4, lr
 8018822:	fb0a 940c 	mla	r4, sl, ip, r9
 8018826:	b2a4      	uxth	r4, r4
 8018828:	f104 0901 	add.w	r9, r4, #1
 801882c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8018830:	1224      	asrs	r4, r4, #8
 8018832:	704c      	strb	r4, [r1, #1]
 8018834:	78ad      	ldrb	r5, [r5, #2]
 8018836:	78bc      	ldrb	r4, [r7, #2]
 8018838:	436a      	muls	r2, r5
 801883a:	789b      	ldrb	r3, [r3, #2]
 801883c:	fb08 2204 	mla	r2, r8, r4, r2
 8018840:	78b4      	ldrb	r4, [r6, #2]
 8018842:	fb00 2004 	mla	r0, r0, r4, r2
 8018846:	fb0b 0b03 	mla	fp, fp, r3, r0
 801884a:	9b01      	ldr	r3, [sp, #4]
 801884c:	fb13 fe0e 	smulbb	lr, r3, lr
 8018850:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8018854:	fb0b ec0c 	mla	ip, fp, ip, lr
 8018858:	fa1f fc8c 	uxth.w	ip, ip
 801885c:	f10c 0e01 	add.w	lr, ip, #1
 8018860:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8018864:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018868:	f881 c002 	strb.w	ip, [r1, #2]
 801886c:	b007      	add	sp, #28
 801886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018872:	af05      	add	r7, sp, #20
 8018874:	e75b      	b.n	801872e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8018876:	ad05      	add	r5, sp, #20
 8018878:	462f      	mov	r7, r5
 801887a:	e766      	b.n	801874a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801887c:	ad05      	add	r5, sp, #20
 801887e:	e764      	b.n	801874a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8018880:	ae05      	add	r6, sp, #20
 8018882:	e777      	b.n	8018774 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8018884:	ab05      	add	r3, sp, #20
 8018886:	461e      	mov	r6, r3
 8018888:	e783      	b.n	8018792 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801888a:	ab05      	add	r3, sp, #20
 801888c:	e781      	b.n	8018792 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801888e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801888e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018892:	b093      	sub	sp, #76	; 0x4c
 8018894:	9210      	str	r2, [sp, #64]	; 0x40
 8018896:	9309      	str	r3, [sp, #36]	; 0x24
 8018898:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801889a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801889e:	9011      	str	r0, [sp, #68]	; 0x44
 80188a0:	930e      	str	r3, [sp, #56]	; 0x38
 80188a2:	6850      	ldr	r0, [r2, #4]
 80188a4:	910d      	str	r1, [sp, #52]	; 0x34
 80188a6:	6812      	ldr	r2, [r2, #0]
 80188a8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80188ac:	fb00 1303 	mla	r3, r0, r3, r1
 80188b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80188b4:	18d3      	adds	r3, r2, r3
 80188b6:	930a      	str	r3, [sp, #40]	; 0x28
 80188b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	930c      	str	r3, [sp, #48]	; 0x30
 80188be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80188c0:	685c      	ldr	r4, [r3, #4]
 80188c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188c4:	3404      	adds	r4, #4
 80188c6:	43db      	mvns	r3, r3
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80188cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	dc03      	bgt.n	80188da <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80188d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	f340 8250 	ble.w	8018d7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80188da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80188dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80188e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80188e4:	1e48      	subs	r0, r1, #1
 80188e6:	1e55      	subs	r5, r2, #1
 80188e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	f340 80ee 	ble.w	8018acc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 80188f0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80188f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80188f4:	1436      	asrs	r6, r6, #16
 80188f6:	ea4f 4323 	mov.w	r3, r3, asr #16
 80188fa:	d406      	bmi.n	801890a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80188fc:	4286      	cmp	r6, r0
 80188fe:	da04      	bge.n	801890a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018900:	2b00      	cmp	r3, #0
 8018902:	db02      	blt.n	801890a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018904:	42ab      	cmp	r3, r5
 8018906:	f2c0 80e2 	blt.w	8018ace <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801890a:	3601      	adds	r6, #1
 801890c:	f100 80cf 	bmi.w	8018aae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018910:	42b1      	cmp	r1, r6
 8018912:	f2c0 80cc 	blt.w	8018aae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018916:	3301      	adds	r3, #1
 8018918:	f100 80c9 	bmi.w	8018aae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801891c:	429a      	cmp	r2, r3
 801891e:	f2c0 80c6 	blt.w	8018aae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018922:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8018926:	f1bb 0f00 	cmp.w	fp, #0
 801892a:	f340 80f1 	ble.w	8018b10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801892e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018930:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018932:	9824      	ldr	r0, [sp, #144]	; 0x90
 8018934:	141d      	asrs	r5, r3, #16
 8018936:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018938:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801893c:	68c7      	ldr	r7, [r0, #12]
 801893e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018940:	1418      	asrs	r0, r3, #16
 8018942:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8018946:	6892      	ldr	r2, [r2, #8]
 8018948:	f100 8137 	bmi.w	8018bba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801894c:	f102 3cff 	add.w	ip, r2, #4294967295
 8018950:	4560      	cmp	r0, ip
 8018952:	f280 8132 	bge.w	8018bba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018956:	2d00      	cmp	r5, #0
 8018958:	f2c0 812f 	blt.w	8018bba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801895c:	f107 3cff 	add.w	ip, r7, #4294967295
 8018960:	4565      	cmp	r5, ip
 8018962:	f280 812a 	bge.w	8018bba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8018966:	b212      	sxth	r2, r2
 8018968:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801896a:	fb05 0002 	mla	r0, r5, r2, r0
 801896e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018970:	f817 c000 	ldrb.w	ip, [r7, r0]
 8018974:	4405      	add	r5, r0
 8018976:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801897a:	eb04 0e0c 	add.w	lr, r4, ip
 801897e:	f1b8 0f00 	cmp.w	r8, #0
 8018982:	f000 810c 	beq.w	8018b9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8018986:	786f      	ldrb	r7, [r5, #1]
 8018988:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801898c:	4427      	add	r7, r4
 801898e:	2900      	cmp	r1, #0
 8018990:	f000 810d 	beq.w	8018bae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8018994:	18a8      	adds	r0, r5, r2
 8018996:	5caa      	ldrb	r2, [r5, r2]
 8018998:	7840      	ldrb	r0, [r0, #1]
 801899a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801899e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80189a2:	4422      	add	r2, r4
 80189a4:	4420      	add	r0, r4
 80189a6:	fa1f f388 	uxth.w	r3, r8
 80189aa:	f814 a00c 	ldrb.w	sl, [r4, ip]
 80189ae:	b289      	uxth	r1, r1
 80189b0:	f897 c000 	ldrb.w	ip, [r7]
 80189b4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 80189b8:	fb03 f901 	mul.w	r9, r3, r1
 80189bc:	011b      	lsls	r3, r3, #4
 80189be:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80189c2:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 80189c6:	eba3 0309 	sub.w	r3, r3, r9
 80189ca:	b289      	uxth	r1, r1
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	eba8 0801 	sub.w	r8, r8, r1
 80189d2:	fb03 fc0c 	mul.w	ip, r3, ip
 80189d6:	fa1f f888 	uxth.w	r8, r8
 80189da:	930f      	str	r3, [sp, #60]	; 0x3c
 80189dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80189de:	fb08 cc0a 	mla	ip, r8, sl, ip
 80189e2:	f892 a000 	ldrb.w	sl, [r2]
 80189e6:	fb01 cc0a 	mla	ip, r1, sl, ip
 80189ea:	f890 a000 	ldrb.w	sl, [r0]
 80189ee:	fb09 cc0a 	mla	ip, r9, sl, ip
 80189f2:	f896 a000 	ldrb.w	sl, [r6]
 80189f6:	fb1a fa03 	smulbb	sl, sl, r3
 80189fa:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80189fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a00:	fb0c ac05 	mla	ip, ip, r5, sl
 8018a04:	fa1f fc8c 	uxth.w	ip, ip
 8018a08:	f10c 0a01 	add.w	sl, ip, #1
 8018a0c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8018a10:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018a14:	f886 a000 	strb.w	sl, [r6]
 8018a18:	f897 c001 	ldrb.w	ip, [r7, #1]
 8018a1c:	f89e a001 	ldrb.w	sl, [lr, #1]
 8018a20:	fb03 fc0c 	mul.w	ip, r3, ip
 8018a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a26:	fb08 cc0a 	mla	ip, r8, sl, ip
 8018a2a:	f892 a001 	ldrb.w	sl, [r2, #1]
 8018a2e:	fb01 cc0a 	mla	ip, r1, sl, ip
 8018a32:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018a36:	fb09 cc0a 	mla	ip, r9, sl, ip
 8018a3a:	f896 a001 	ldrb.w	sl, [r6, #1]
 8018a3e:	fb1a fa03 	smulbb	sl, sl, r3
 8018a42:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8018a46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018a48:	fb0c ac05 	mla	ip, ip, r5, sl
 8018a4c:	fa1f fc8c 	uxth.w	ip, ip
 8018a50:	f10c 0a01 	add.w	sl, ip, #1
 8018a54:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8018a58:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018a5c:	f886 c001 	strb.w	ip, [r6, #1]
 8018a60:	78bf      	ldrb	r7, [r7, #2]
 8018a62:	f89e c002 	ldrb.w	ip, [lr, #2]
 8018a66:	437b      	muls	r3, r7
 8018a68:	fb08 330c 	mla	r3, r8, ip, r3
 8018a6c:	f892 c002 	ldrb.w	ip, [r2, #2]
 8018a70:	7882      	ldrb	r2, [r0, #2]
 8018a72:	fb01 310c 	mla	r1, r1, ip, r3
 8018a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018a78:	fb09 1902 	mla	r9, r9, r2, r1
 8018a7c:	78b1      	ldrb	r1, [r6, #2]
 8018a7e:	fb11 f103 	smulbb	r1, r1, r3
 8018a82:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018a86:	fb09 1505 	mla	r5, r9, r5, r1
 8018a8a:	b2ad      	uxth	r5, r5
 8018a8c:	1c6b      	adds	r3, r5, #1
 8018a8e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8018a92:	122d      	asrs	r5, r5, #8
 8018a94:	70b5      	strb	r5, [r6, #2]
 8018a96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018a98:	3603      	adds	r6, #3
 8018a9a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018a9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018aa0:	4413      	add	r3, r2
 8018aa2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018aa4:	931d      	str	r3, [sp, #116]	; 0x74
 8018aa6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018aa8:	4413      	add	r3, r2
 8018aaa:	931e      	str	r3, [sp, #120]	; 0x78
 8018aac:	e73b      	b.n	8018926 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018aae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ab0:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8018ab2:	4433      	add	r3, r6
 8018ab4:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8018ab6:	931d      	str	r3, [sp, #116]	; 0x74
 8018ab8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018aba:	4433      	add	r3, r6
 8018abc:	931e      	str	r3, [sp, #120]	; 0x78
 8018abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ac0:	3b01      	subs	r3, #1
 8018ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8018ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ac6:	3303      	adds	r3, #3
 8018ac8:	930a      	str	r3, [sp, #40]	; 0x28
 8018aca:	e70d      	b.n	80188e8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018acc:	d028      	beq.n	8018b20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8018ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ad0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018ad2:	3b01      	subs	r3, #1
 8018ad4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018ad6:	fb00 5003 	mla	r0, r0, r3, r5
 8018ada:	1400      	asrs	r0, r0, #16
 8018adc:	f53f af21 	bmi.w	8018922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018ae0:	3901      	subs	r1, #1
 8018ae2:	4288      	cmp	r0, r1
 8018ae4:	f6bf af1d 	bge.w	8018922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018ae8:	9920      	ldr	r1, [sp, #128]	; 0x80
 8018aea:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018aec:	fb01 0303 	mla	r3, r1, r3, r0
 8018af0:	141b      	asrs	r3, r3, #16
 8018af2:	f53f af16 	bmi.w	8018922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018af6:	3a01      	subs	r2, #1
 8018af8:	4293      	cmp	r3, r2
 8018afa:	f6bf af12 	bge.w	8018922 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b00:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018b04:	1cdf      	adds	r7, r3, #3
 8018b06:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8018b0a:	f1b9 0f00 	cmp.w	r9, #0
 8018b0e:	dc73      	bgt.n	8018bf8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8018b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b18:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b1c:	441a      	add	r2, r3
 8018b1e:	920a      	str	r2, [sp, #40]	; 0x28
 8018b20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	f340 8129 	ble.w	8018d7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8018b28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018b2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018b2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b36:	eef0 6a62 	vmov.f32	s13, s5
 8018b3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018b3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018b42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018b46:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8018b4a:	eef0 6a43 	vmov.f32	s13, s6
 8018b4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018b52:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8018b56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018b5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018b5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018b66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018b6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018b6e:	ee12 2a90 	vmov	r2, s5
 8018b72:	eef0 2a47 	vmov.f32	s5, s14
 8018b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b7a:	ee13 2a10 	vmov	r2, s6
 8018b7e:	931f      	str	r3, [sp, #124]	; 0x7c
 8018b80:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018b82:	eeb0 3a67 	vmov.f32	s6, s15
 8018b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b8a:	9320      	str	r3, [sp, #128]	; 0x80
 8018b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b8e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018b90:	3b01      	subs	r3, #1
 8018b92:	930d      	str	r3, [sp, #52]	; 0x34
 8018b94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018b96:	bf08      	it	eq
 8018b98:	4613      	moveq	r3, r2
 8018b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8018b9c:	e696      	b.n	80188cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018b9e:	b149      	cbz	r1, 8018bb4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8018ba0:	5caa      	ldrb	r2, [r5, r2]
 8018ba2:	4670      	mov	r0, lr
 8018ba4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ba8:	4422      	add	r2, r4
 8018baa:	4677      	mov	r7, lr
 8018bac:	e6fb      	b.n	80189a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8018bae:	4670      	mov	r0, lr
 8018bb0:	4672      	mov	r2, lr
 8018bb2:	e6f8      	b.n	80189a6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8018bb4:	4670      	mov	r0, lr
 8018bb6:	4672      	mov	r2, lr
 8018bb8:	e7f7      	b.n	8018baa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8018bba:	f110 0c01 	adds.w	ip, r0, #1
 8018bbe:	f53f af6a 	bmi.w	8018a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018bc2:	4562      	cmp	r2, ip
 8018bc4:	f6ff af67 	blt.w	8018a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018bc8:	f115 0c01 	adds.w	ip, r5, #1
 8018bcc:	f53f af63 	bmi.w	8018a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018bd0:	4567      	cmp	r7, ip
 8018bd2:	f6ff af60 	blt.w	8018a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018bd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018bd8:	b23f      	sxth	r7, r7
 8018bda:	b212      	sxth	r2, r2
 8018bdc:	9002      	str	r0, [sp, #8]
 8018bde:	9701      	str	r7, [sp, #4]
 8018be0:	9200      	str	r2, [sp, #0]
 8018be2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018be4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018be6:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8018bea:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8018bee:	4623      	mov	r3, r4
 8018bf0:	4631      	mov	r1, r6
 8018bf2:	f7ff fd69 	bl	80186c8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8018bf6:	e74e      	b.n	8018a96 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018bf8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018bfa:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018bfc:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018c00:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018c02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018c04:	1400      	asrs	r0, r0, #16
 8018c06:	142d      	asrs	r5, r5, #16
 8018c08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018c0a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8018c0e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8018c12:	fb02 5000 	mla	r0, r2, r0, r5
 8018c16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018c18:	f815 e000 	ldrb.w	lr, [r5, r0]
 8018c1c:	eb05 0c00 	add.w	ip, r5, r0
 8018c20:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018c24:	eb04 060e 	add.w	r6, r4, lr
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	f000 8097 	beq.w	8018d5c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8018c2e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8018c32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018c36:	4425      	add	r5, r4
 8018c38:	2900      	cmp	r1, #0
 8018c3a:	f000 8098 	beq.w	8018d6e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8018c3e:	eb0c 0002 	add.w	r0, ip, r2
 8018c42:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018c46:	7840      	ldrb	r0, [r0, #1]
 8018c48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018c4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018c50:	4422      	add	r2, r4
 8018c52:	4420      	add	r0, r4
 8018c54:	b29b      	uxth	r3, r3
 8018c56:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8018c5a:	b289      	uxth	r1, r1
 8018c5c:	f895 e000 	ldrb.w	lr, [r5]
 8018c60:	3703      	adds	r7, #3
 8018c62:	f109 39ff 	add.w	r9, r9, #4294967295
 8018c66:	fb03 f801 	mul.w	r8, r3, r1
 8018c6a:	011b      	lsls	r3, r3, #4
 8018c6c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8018c70:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8018c74:	eba3 0308 	sub.w	r3, r3, r8
 8018c78:	b289      	uxth	r1, r1
 8018c7a:	b29b      	uxth	r3, r3
 8018c7c:	ebac 0c01 	sub.w	ip, ip, r1
 8018c80:	fb03 fe0e 	mul.w	lr, r3, lr
 8018c84:	fa1f fc8c 	uxth.w	ip, ip
 8018c88:	930f      	str	r3, [sp, #60]	; 0x3c
 8018c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c8c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018c90:	f892 b000 	ldrb.w	fp, [r2]
 8018c94:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018c98:	f890 b000 	ldrb.w	fp, [r0]
 8018c9c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8018ca0:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8018ca4:	fb1b fb03 	smulbb	fp, fp, r3
 8018ca8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018cac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cae:	fb0e be0a 	mla	lr, lr, sl, fp
 8018cb2:	fa1f fe8e 	uxth.w	lr, lr
 8018cb6:	f10e 0b01 	add.w	fp, lr, #1
 8018cba:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8018cbe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018cc2:	f807 ec06 	strb.w	lr, [r7, #-6]
 8018cc6:	f895 e001 	ldrb.w	lr, [r5, #1]
 8018cca:	f896 b001 	ldrb.w	fp, [r6, #1]
 8018cce:	fb03 fe0e 	mul.w	lr, r3, lr
 8018cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018cd4:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018cd8:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018cdc:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018ce0:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018ce4:	fb08 ee0b 	mla	lr, r8, fp, lr
 8018ce8:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8018cec:	fb1b fb03 	smulbb	fp, fp, r3
 8018cf0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018cf6:	fb0e be0a 	mla	lr, lr, sl, fp
 8018cfa:	fa1f fe8e 	uxth.w	lr, lr
 8018cfe:	f10e 0b01 	add.w	fp, lr, #1
 8018d02:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8018d06:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018d0a:	f807 ec05 	strb.w	lr, [r7, #-5]
 8018d0e:	78ad      	ldrb	r5, [r5, #2]
 8018d10:	78b6      	ldrb	r6, [r6, #2]
 8018d12:	436b      	muls	r3, r5
 8018d14:	7895      	ldrb	r5, [r2, #2]
 8018d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018d18:	fb0c 3306 	mla	r3, ip, r6, r3
 8018d1c:	fb01 3305 	mla	r3, r1, r5, r3
 8018d20:	7885      	ldrb	r5, [r0, #2]
 8018d22:	fb08 3805 	mla	r8, r8, r5, r3
 8018d26:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 8018d2a:	fb13 f302 	smulbb	r3, r3, r2
 8018d2e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8018d32:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8018d34:	fb08 380a 	mla	r8, r8, sl, r3
 8018d38:	fa1f f888 	uxth.w	r8, r8
 8018d3c:	f108 0301 	add.w	r3, r8, #1
 8018d40:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8018d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018d46:	4413      	add	r3, r2
 8018d48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018d4a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018d4e:	931d      	str	r3, [sp, #116]	; 0x74
 8018d50:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018d52:	f807 8c04 	strb.w	r8, [r7, #-4]
 8018d56:	4413      	add	r3, r2
 8018d58:	931e      	str	r3, [sp, #120]	; 0x78
 8018d5a:	e6d6      	b.n	8018b0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8018d5c:	b151      	cbz	r1, 8018d74 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8018d5e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018d62:	4630      	mov	r0, r6
 8018d64:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018d68:	4422      	add	r2, r4
 8018d6a:	4635      	mov	r5, r6
 8018d6c:	e772      	b.n	8018c54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8018d6e:	4630      	mov	r0, r6
 8018d70:	4632      	mov	r2, r6
 8018d72:	e76f      	b.n	8018c54 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8018d74:	4630      	mov	r0, r6
 8018d76:	4632      	mov	r2, r6
 8018d78:	e7f7      	b.n	8018d6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8018d7a:	b013      	add	sp, #76	; 0x4c
 8018d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8018d80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d84:	784c      	ldrb	r4, [r1, #1]
 8018d86:	f891 a002 	ldrb.w	sl, [r1, #2]
 8018d8a:	0224      	lsls	r4, r4, #8
 8018d8c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018d90:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8018d94:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018d98:	f891 a000 	ldrb.w	sl, [r1]
 8018d9c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8018da0:	ea44 040a 	orr.w	r4, r4, sl
 8018da4:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8018da8:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8018dac:	9401      	str	r4, [sp, #4]
 8018dae:	fb05 c70e 	mla	r7, r5, lr, ip
 8018db2:	2d00      	cmp	r5, #0
 8018db4:	eb02 0807 	add.w	r8, r2, r7
 8018db8:	db72      	blt.n	8018ea0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8018dba:	45a9      	cmp	r9, r5
 8018dbc:	dd70      	ble.n	8018ea0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8018dbe:	f1bc 0f00 	cmp.w	ip, #0
 8018dc2:	db6b      	blt.n	8018e9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8018dc4:	45e6      	cmp	lr, ip
 8018dc6:	dd69      	ble.n	8018e9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8018dc8:	5dd7      	ldrb	r7, [r2, r7]
 8018dca:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018dce:	441f      	add	r7, r3
 8018dd0:	f11c 0201 	adds.w	r2, ip, #1
 8018dd4:	d467      	bmi.n	8018ea6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018dd6:	4596      	cmp	lr, r2
 8018dd8:	dd65      	ble.n	8018ea6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	d063      	beq.n	8018ea6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018dde:	f898 4001 	ldrb.w	r4, [r8, #1]
 8018de2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018de6:	441c      	add	r4, r3
 8018de8:	3501      	adds	r5, #1
 8018dea:	d460      	bmi.n	8018eae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018dec:	45a9      	cmp	r9, r5
 8018dee:	dd5e      	ble.n	8018eae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018df0:	2e00      	cmp	r6, #0
 8018df2:	d05c      	beq.n	8018eae <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018df4:	f1bc 0f00 	cmp.w	ip, #0
 8018df8:	db57      	blt.n	8018eaa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8018dfa:	45e6      	cmp	lr, ip
 8018dfc:	dd55      	ble.n	8018eaa <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8018dfe:	f818 500e 	ldrb.w	r5, [r8, lr]
 8018e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e06:	441d      	add	r5, r3
 8018e08:	f11c 0201 	adds.w	r2, ip, #1
 8018e0c:	d452      	bmi.n	8018eb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018e0e:	4596      	cmp	lr, r2
 8018e10:	dd50      	ble.n	8018eb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018e12:	2800      	cmp	r0, #0
 8018e14:	d04e      	beq.n	8018eb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018e16:	44c6      	add	lr, r8
 8018e18:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018e1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e20:	4413      	add	r3, r2
 8018e22:	b280      	uxth	r0, r0
 8018e24:	f897 8000 	ldrb.w	r8, [r7]
 8018e28:	b2b2      	uxth	r2, r6
 8018e2a:	fb00 f602 	mul.w	r6, r0, r2
 8018e2e:	0100      	lsls	r0, r0, #4
 8018e30:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8018e34:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8018e38:	1b80      	subs	r0, r0, r6
 8018e3a:	fa1f fc82 	uxth.w	ip, r2
 8018e3e:	b282      	uxth	r2, r0
 8018e40:	7820      	ldrb	r0, [r4, #0]
 8018e42:	ebae 0e0c 	sub.w	lr, lr, ip
 8018e46:	4350      	muls	r0, r2
 8018e48:	fa1f fe8e 	uxth.w	lr, lr
 8018e4c:	fb0e 0808 	mla	r8, lr, r8, r0
 8018e50:	7828      	ldrb	r0, [r5, #0]
 8018e52:	fb0c 8800 	mla	r8, ip, r0, r8
 8018e56:	7818      	ldrb	r0, [r3, #0]
 8018e58:	fb06 8000 	mla	r0, r6, r0, r8
 8018e5c:	1200      	asrs	r0, r0, #8
 8018e5e:	7008      	strb	r0, [r1, #0]
 8018e60:	7860      	ldrb	r0, [r4, #1]
 8018e62:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018e66:	4350      	muls	r0, r2
 8018e68:	fb0e 0808 	mla	r8, lr, r8, r0
 8018e6c:	7868      	ldrb	r0, [r5, #1]
 8018e6e:	fb0c 8800 	mla	r8, ip, r0, r8
 8018e72:	7858      	ldrb	r0, [r3, #1]
 8018e74:	fb06 8000 	mla	r0, r6, r0, r8
 8018e78:	1200      	asrs	r0, r0, #8
 8018e7a:	7048      	strb	r0, [r1, #1]
 8018e7c:	78a0      	ldrb	r0, [r4, #2]
 8018e7e:	78bf      	ldrb	r7, [r7, #2]
 8018e80:	4350      	muls	r0, r2
 8018e82:	78aa      	ldrb	r2, [r5, #2]
 8018e84:	fb0e 0007 	mla	r0, lr, r7, r0
 8018e88:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018e8c:	789a      	ldrb	r2, [r3, #2]
 8018e8e:	fb06 c202 	mla	r2, r6, r2, ip
 8018e92:	1212      	asrs	r2, r2, #8
 8018e94:	708a      	strb	r2, [r1, #2]
 8018e96:	b002      	add	sp, #8
 8018e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e9c:	af01      	add	r7, sp, #4
 8018e9e:	e797      	b.n	8018dd0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8018ea0:	ac01      	add	r4, sp, #4
 8018ea2:	4627      	mov	r7, r4
 8018ea4:	e7a0      	b.n	8018de8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8018ea6:	ac01      	add	r4, sp, #4
 8018ea8:	e79e      	b.n	8018de8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8018eaa:	ad01      	add	r5, sp, #4
 8018eac:	e7ac      	b.n	8018e08 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8018eae:	ab01      	add	r3, sp, #4
 8018eb0:	461d      	mov	r5, r3
 8018eb2:	e7b6      	b.n	8018e22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8018eb4:	ab01      	add	r3, sp, #4
 8018eb6:	e7b4      	b.n	8018e22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08018eb8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ebc:	b08d      	sub	sp, #52	; 0x34
 8018ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018ec2:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8018ec6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018ec8:	900b      	str	r0, [sp, #44]	; 0x2c
 8018eca:	9306      	str	r3, [sp, #24]
 8018ecc:	6850      	ldr	r0, [r2, #4]
 8018ece:	6812      	ldr	r2, [r2, #0]
 8018ed0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018ed2:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8018ed6:	fb00 1303 	mla	r3, r0, r3, r1
 8018eda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018ede:	18d3      	adds	r3, r2, r3
 8018ee0:	9307      	str	r3, [sp, #28]
 8018ee2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	9308      	str	r3, [sp, #32]
 8018ee8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018eea:	685d      	ldr	r5, [r3, #4]
 8018eec:	3504      	adds	r5, #4
 8018eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	dc03      	bgt.n	8018efc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	f340 81e6 	ble.w	80192c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8018efc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018efe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018f02:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018f06:	1e48      	subs	r0, r1, #1
 8018f08:	1e56      	subs	r6, r2, #1
 8018f0a:	9b06      	ldr	r3, [sp, #24]
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	f340 80bd 	ble.w	801908c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018f12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f14:	1427      	asrs	r7, r4, #16
 8018f16:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018f1a:	d406      	bmi.n	8018f2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018f1c:	4287      	cmp	r7, r0
 8018f1e:	da04      	bge.n	8018f2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	db02      	blt.n	8018f2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018f24:	42b3      	cmp	r3, r6
 8018f26:	f2c0 80b2 	blt.w	801908e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8018f2a:	3701      	adds	r7, #1
 8018f2c:	f100 80a1 	bmi.w	8019072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018f30:	42b9      	cmp	r1, r7
 8018f32:	f2c0 809e 	blt.w	8019072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018f36:	3301      	adds	r3, #1
 8018f38:	f100 809b 	bmi.w	8019072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	f2c0 8098 	blt.w	8019072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018f42:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8018f46:	f1bb 0f00 	cmp.w	fp, #0
 8018f4a:	f340 80bf 	ble.w	80190cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018f4e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018f50:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018f52:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f54:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018f58:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8018f5c:	1420      	asrs	r0, r4, #16
 8018f5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018f60:	ea4f 4723 	mov.w	r7, r3, asr #16
 8018f64:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8018f68:	6892      	ldr	r2, [r2, #8]
 8018f6a:	f100 8103 	bmi.w	8019174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018f6e:	f102 3eff 	add.w	lr, r2, #4294967295
 8018f72:	4570      	cmp	r0, lr
 8018f74:	f280 80fe 	bge.w	8019174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018f78:	2f00      	cmp	r7, #0
 8018f7a:	f2c0 80fb 	blt.w	8019174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018f7e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8018f82:	4577      	cmp	r7, lr
 8018f84:	f280 80f6 	bge.w	8019174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018f88:	b212      	sxth	r2, r2
 8018f8a:	fb07 0002 	mla	r0, r7, r2, r0
 8018f8e:	9f08      	ldr	r7, [sp, #32]
 8018f90:	f817 8000 	ldrb.w	r8, [r7, r0]
 8018f94:	eb07 0e00 	add.w	lr, r7, r0
 8018f98:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018f9c:	eb05 0c08 	add.w	ip, r5, r8
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	f000 80d8 	beq.w	8019156 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018fa6:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8018faa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018fae:	442f      	add	r7, r5
 8018fb0:	2900      	cmp	r1, #0
 8018fb2:	f000 80d9 	beq.w	8019168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018fb6:	eb0e 0002 	add.w	r0, lr, r2
 8018fba:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8018fbe:	7840      	ldrb	r0, [r0, #1]
 8018fc0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018fc4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018fc8:	442a      	add	r2, r5
 8018fca:	4428      	add	r0, r5
 8018fcc:	b29b      	uxth	r3, r3
 8018fce:	f815 a008 	ldrb.w	sl, [r5, r8]
 8018fd2:	b289      	uxth	r1, r1
 8018fd4:	f897 8000 	ldrb.w	r8, [r7]
 8018fd8:	fb03 f901 	mul.w	r9, r3, r1
 8018fdc:	011b      	lsls	r3, r3, #4
 8018fde:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018fe2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8018fe6:	eba3 0309 	sub.w	r3, r3, r9
 8018fea:	b289      	uxth	r1, r1
 8018fec:	b29b      	uxth	r3, r3
 8018fee:	ebae 0e01 	sub.w	lr, lr, r1
 8018ff2:	fb03 f808 	mul.w	r8, r3, r8
 8018ff6:	fa1f fe8e 	uxth.w	lr, lr
 8018ffa:	fb0e 880a 	mla	r8, lr, sl, r8
 8018ffe:	f892 a000 	ldrb.w	sl, [r2]
 8019002:	fb01 880a 	mla	r8, r1, sl, r8
 8019006:	f890 a000 	ldrb.w	sl, [r0]
 801900a:	fb09 880a 	mla	r8, r9, sl, r8
 801900e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8019012:	f886 8000 	strb.w	r8, [r6]
 8019016:	f897 8001 	ldrb.w	r8, [r7, #1]
 801901a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801901e:	fb03 f808 	mul.w	r8, r3, r8
 8019022:	fb0e 880a 	mla	r8, lr, sl, r8
 8019026:	f892 a001 	ldrb.w	sl, [r2, #1]
 801902a:	fb01 880a 	mla	r8, r1, sl, r8
 801902e:	f890 a001 	ldrb.w	sl, [r0, #1]
 8019032:	fb09 880a 	mla	r8, r9, sl, r8
 8019036:	ea4f 2828 	mov.w	r8, r8, asr #8
 801903a:	f886 8001 	strb.w	r8, [r6, #1]
 801903e:	78bf      	ldrb	r7, [r7, #2]
 8019040:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019044:	437b      	muls	r3, r7
 8019046:	7892      	ldrb	r2, [r2, #2]
 8019048:	fb0e 330c 	mla	r3, lr, ip, r3
 801904c:	fb01 3102 	mla	r1, r1, r2, r3
 8019050:	7882      	ldrb	r2, [r0, #2]
 8019052:	fb09 1902 	mla	r9, r9, r2, r1
 8019056:	ea4f 2929 	mov.w	r9, r9, asr #8
 801905a:	f886 9002 	strb.w	r9, [r6, #2]
 801905e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019060:	3603      	adds	r6, #3
 8019062:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019064:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019068:	441c      	add	r4, r3
 801906a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801906c:	4413      	add	r3, r2
 801906e:	9318      	str	r3, [sp, #96]	; 0x60
 8019070:	e769      	b.n	8018f46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019074:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019076:	441c      	add	r4, r3
 8019078:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801907a:	443b      	add	r3, r7
 801907c:	9318      	str	r3, [sp, #96]	; 0x60
 801907e:	9b06      	ldr	r3, [sp, #24]
 8019080:	3b01      	subs	r3, #1
 8019082:	9306      	str	r3, [sp, #24]
 8019084:	9b07      	ldr	r3, [sp, #28]
 8019086:	3303      	adds	r3, #3
 8019088:	9307      	str	r3, [sp, #28]
 801908a:	e73e      	b.n	8018f0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801908c:	d026      	beq.n	80190dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801908e:	9b06      	ldr	r3, [sp, #24]
 8019090:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019092:	3b01      	subs	r3, #1
 8019094:	fb00 4003 	mla	r0, r0, r3, r4
 8019098:	1400      	asrs	r0, r0, #16
 801909a:	f53f af52 	bmi.w	8018f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801909e:	3901      	subs	r1, #1
 80190a0:	4288      	cmp	r0, r1
 80190a2:	f6bf af4e 	bge.w	8018f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80190a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80190a8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80190aa:	fb01 0303 	mla	r3, r1, r3, r0
 80190ae:	141b      	asrs	r3, r3, #16
 80190b0:	f53f af47 	bmi.w	8018f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80190b4:	3a01      	subs	r2, #1
 80190b6:	4293      	cmp	r3, r2
 80190b8:	f6bf af43 	bge.w	8018f42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80190bc:	9b07      	ldr	r3, [sp, #28]
 80190be:	f8dd a018 	ldr.w	sl, [sp, #24]
 80190c2:	f103 0803 	add.w	r8, r3, #3
 80190c6:	f1ba 0f00 	cmp.w	sl, #0
 80190ca:	dc71      	bgt.n	80191b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80190cc:	9b06      	ldr	r3, [sp, #24]
 80190ce:	9a07      	ldr	r2, [sp, #28]
 80190d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80190d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80190d8:	441a      	add	r2, r3
 80190da:	9207      	str	r2, [sp, #28]
 80190dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190de:	2b00      	cmp	r3, #0
 80190e0:	f340 80f2 	ble.w	80192c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80190e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80190e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80190ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80190ee:	eeb0 6a62 	vmov.f32	s12, s5
 80190f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80190f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80190fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80190fe:	ee16 4a10 	vmov	r4, s12
 8019102:	eeb0 6a43 	vmov.f32	s12, s6
 8019106:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801910a:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 801910e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019112:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019116:	ee77 2a62 	vsub.f32	s5, s14, s5
 801911a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801911e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019122:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019126:	ee12 2a90 	vmov	r2, s5
 801912a:	eef0 2a47 	vmov.f32	s5, s14
 801912e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019132:	ee13 2a10 	vmov	r2, s6
 8019136:	9319      	str	r3, [sp, #100]	; 0x64
 8019138:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801913a:	eeb0 3a67 	vmov.f32	s6, s15
 801913e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019142:	931a      	str	r3, [sp, #104]	; 0x68
 8019144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019146:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019148:	3b01      	subs	r3, #1
 801914a:	9309      	str	r3, [sp, #36]	; 0x24
 801914c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801914e:	bf08      	it	eq
 8019150:	4613      	moveq	r3, r2
 8019152:	9306      	str	r3, [sp, #24]
 8019154:	e6cb      	b.n	8018eee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019156:	b151      	cbz	r1, 801916e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019158:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801915c:	4660      	mov	r0, ip
 801915e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019162:	442a      	add	r2, r5
 8019164:	4667      	mov	r7, ip
 8019166:	e731      	b.n	8018fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019168:	4660      	mov	r0, ip
 801916a:	4662      	mov	r2, ip
 801916c:	e72e      	b.n	8018fcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801916e:	4660      	mov	r0, ip
 8019170:	4662      	mov	r2, ip
 8019172:	e7f7      	b.n	8019164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8019174:	f110 0e01 	adds.w	lr, r0, #1
 8019178:	f53f af71 	bmi.w	801905e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801917c:	4572      	cmp	r2, lr
 801917e:	f6ff af6e 	blt.w	801905e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019182:	f117 0e01 	adds.w	lr, r7, #1
 8019186:	f53f af6a 	bmi.w	801905e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801918a:	45f4      	cmp	ip, lr
 801918c:	f6ff af67 	blt.w	801905e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019190:	b212      	sxth	r2, r2
 8019192:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019196:	fa0f f38c 	sxth.w	r3, ip
 801919a:	9200      	str	r2, [sp, #0]
 801919c:	4631      	mov	r1, r6
 801919e:	9a08      	ldr	r2, [sp, #32]
 80191a0:	9301      	str	r3, [sp, #4]
 80191a2:	462b      	mov	r3, r5
 80191a4:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80191a8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80191aa:	f7ff fde9 	bl	8018d80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80191ae:	e756      	b.n	801905e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80191b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80191b2:	1426      	asrs	r6, r4, #16
 80191b4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80191b6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80191ba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80191be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80191c0:	1400      	asrs	r0, r0, #16
 80191c2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80191c6:	fb02 6000 	mla	r0, r2, r0, r6
 80191ca:	9e08      	ldr	r6, [sp, #32]
 80191cc:	f816 e000 	ldrb.w	lr, [r6, r0]
 80191d0:	eb06 0c00 	add.w	ip, r6, r0
 80191d4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80191d8:	eb05 070e 	add.w	r7, r5, lr
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d064      	beq.n	80192aa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80191e0:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80191e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80191e8:	442e      	add	r6, r5
 80191ea:	2900      	cmp	r1, #0
 80191ec:	d066      	beq.n	80192bc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80191ee:	eb0c 0002 	add.w	r0, ip, r2
 80191f2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80191f6:	7840      	ldrb	r0, [r0, #1]
 80191f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80191fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019200:	442a      	add	r2, r5
 8019202:	4428      	add	r0, r5
 8019204:	b29b      	uxth	r3, r3
 8019206:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801920a:	b289      	uxth	r1, r1
 801920c:	f896 e000 	ldrb.w	lr, [r6]
 8019210:	f108 0803 	add.w	r8, r8, #3
 8019214:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019218:	fb03 f901 	mul.w	r9, r3, r1
 801921c:	011b      	lsls	r3, r3, #4
 801921e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019222:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019226:	eba3 0309 	sub.w	r3, r3, r9
 801922a:	b289      	uxth	r1, r1
 801922c:	b29b      	uxth	r3, r3
 801922e:	ebac 0c01 	sub.w	ip, ip, r1
 8019232:	fb03 fe0e 	mul.w	lr, r3, lr
 8019236:	fa1f fc8c 	uxth.w	ip, ip
 801923a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801923e:	f892 b000 	ldrb.w	fp, [r2]
 8019242:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019246:	f890 b000 	ldrb.w	fp, [r0]
 801924a:	fb09 ee0b 	mla	lr, r9, fp, lr
 801924e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019252:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019256:	f896 e001 	ldrb.w	lr, [r6, #1]
 801925a:	f897 b001 	ldrb.w	fp, [r7, #1]
 801925e:	fb03 fe0e 	mul.w	lr, r3, lr
 8019262:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019266:	f892 b001 	ldrb.w	fp, [r2, #1]
 801926a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801926e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019272:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019276:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801927a:	f808 ec05 	strb.w	lr, [r8, #-5]
 801927e:	78b6      	ldrb	r6, [r6, #2]
 8019280:	78bf      	ldrb	r7, [r7, #2]
 8019282:	4373      	muls	r3, r6
 8019284:	7896      	ldrb	r6, [r2, #2]
 8019286:	7882      	ldrb	r2, [r0, #2]
 8019288:	fb0c 3307 	mla	r3, ip, r7, r3
 801928c:	fb01 3306 	mla	r3, r1, r6, r3
 8019290:	fb09 3902 	mla	r9, r9, r2, r3
 8019294:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019296:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019298:	441c      	add	r4, r3
 801929a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801929c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80192a0:	4413      	add	r3, r2
 80192a2:	f808 9c04 	strb.w	r9, [r8, #-4]
 80192a6:	9318      	str	r3, [sp, #96]	; 0x60
 80192a8:	e70d      	b.n	80190c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80192aa:	b151      	cbz	r1, 80192c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80192ac:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80192b0:	4638      	mov	r0, r7
 80192b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192b6:	442a      	add	r2, r5
 80192b8:	463e      	mov	r6, r7
 80192ba:	e7a3      	b.n	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80192bc:	4638      	mov	r0, r7
 80192be:	463a      	mov	r2, r7
 80192c0:	e7a0      	b.n	8019204 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80192c2:	4638      	mov	r0, r7
 80192c4:	463a      	mov	r2, r7
 80192c6:	e7f7      	b.n	80192b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80192c8:	b00d      	add	sp, #52	; 0x34
 80192ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80192ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192d2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80192d6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80192da:	2d00      	cmp	r5, #0
 80192dc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80192e0:	fb05 700c 	mla	r0, r5, ip, r7
 80192e4:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80192e8:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80192ec:	eb02 0800 	add.w	r8, r2, r0
 80192f0:	f2c0 8118 	blt.w	8019524 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80192f4:	45a9      	cmp	r9, r5
 80192f6:	f340 8115 	ble.w	8019524 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80192fa:	2f00      	cmp	r7, #0
 80192fc:	f2c0 8110 	blt.w	8019520 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8019300:	45bc      	cmp	ip, r7
 8019302:	f340 810d 	ble.w	8019520 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8019306:	5c12      	ldrb	r2, [r2, r0]
 8019308:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801930c:	1c7a      	adds	r2, r7, #1
 801930e:	f100 810c 	bmi.w	801952a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019312:	4594      	cmp	ip, r2
 8019314:	f340 8109 	ble.w	801952a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8019318:	2c00      	cmp	r4, #0
 801931a:	f000 8108 	beq.w	801952e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801931e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019322:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019326:	3501      	adds	r5, #1
 8019328:	f100 8105 	bmi.w	8019536 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801932c:	45a9      	cmp	r9, r5
 801932e:	f340 8102 	ble.w	8019536 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8019332:	f1be 0f00 	cmp.w	lr, #0
 8019336:	f000 8101 	beq.w	801953c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801933a:	2f00      	cmp	r7, #0
 801933c:	f2c0 80f9 	blt.w	8019532 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019340:	45bc      	cmp	ip, r7
 8019342:	f340 80f6 	ble.w	8019532 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019346:	f818 200c 	ldrb.w	r2, [r8, ip]
 801934a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801934e:	3701      	adds	r7, #1
 8019350:	f100 80f7 	bmi.w	8019542 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019354:	45bc      	cmp	ip, r7
 8019356:	f340 80f4 	ble.w	8019542 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801935a:	2c00      	cmp	r4, #0
 801935c:	f000 80f3 	beq.w	8019546 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8019360:	44c4      	add	ip, r8
 8019362:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019366:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801936a:	fa1f fc84 	uxth.w	ip, r4
 801936e:	fa1f f48e 	uxth.w	r4, lr
 8019372:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019376:	fb04 fe0c 	mul.w	lr, r4, ip
 801937a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801937e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019382:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019386:	ebac 070e 	sub.w	r7, ip, lr
 801938a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801938e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019392:	b2a4      	uxth	r4, r4
 8019394:	b2bf      	uxth	r7, r7
 8019396:	1b1b      	subs	r3, r3, r4
 8019398:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801939c:	fb07 fc0a 	mul.w	ip, r7, sl
 80193a0:	b29b      	uxth	r3, r3
 80193a2:	fb03 cc0b 	mla	ip, r3, fp, ip
 80193a6:	9300      	str	r3, [sp, #0]
 80193a8:	fb04 cc09 	mla	ip, r4, r9, ip
 80193ac:	fb0e cc08 	mla	ip, lr, r8, ip
 80193b0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80193b4:	9301      	str	r3, [sp, #4]
 80193b6:	2b00      	cmp	r3, #0
 80193b8:	f000 80af 	beq.w	801951a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80193bc:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80193c0:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80193c4:	fb0b fc0c 	mul.w	ip, fp, ip
 80193c8:	fb0b f606 	mul.w	r6, fp, r6
 80193cc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80193d0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80193d4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80193d8:	44dc      	add	ip, fp
 80193da:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80193de:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80193e2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80193e6:	fb0a fb0b 	mul.w	fp, sl, fp
 80193ea:	fb0a fa00 	mul.w	sl, sl, r0
 80193ee:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80193f2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80193f6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80193fa:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80193fe:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019402:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019406:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801940a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801940e:	0a36      	lsrs	r6, r6, #8
 8019410:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019414:	44dc      	add	ip, fp
 8019416:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801941a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801941e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019422:	fb09 fb0b 	mul.w	fp, r9, fp
 8019426:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801942a:	fb09 f905 	mul.w	r9, r9, r5
 801942e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019432:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019436:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801943a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801943e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019442:	fb0c fc07 	mul.w	ip, ip, r7
 8019446:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801944a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801944e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019452:	4458      	add	r0, fp
 8019454:	fb08 f505 	mul.w	r5, r8, r5
 8019458:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801945c:	fb08 f802 	mul.w	r8, r8, r2
 8019460:	0a00      	lsrs	r0, r0, #8
 8019462:	0a2a      	lsrs	r2, r5, #8
 8019464:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019468:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801946c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019470:	4415      	add	r5, r2
 8019472:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019476:	0a2d      	lsrs	r5, r5, #8
 8019478:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801947c:	9a00      	ldr	r2, [sp, #0]
 801947e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019482:	fb03 cc02 	mla	ip, r3, r2, ip
 8019486:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801948a:	9b01      	ldr	r3, [sp, #4]
 801948c:	fb05 c50e 	mla	r5, r5, lr, ip
 8019490:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019494:	fb00 5004 	mla	r0, r0, r4, r5
 8019498:	0a00      	lsrs	r0, r0, #8
 801949a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801949e:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80194a2:	4378      	muls	r0, r7
 80194a4:	fb02 0006 	mla	r0, r2, r6, r0
 80194a8:	fb0e 0e08 	mla	lr, lr, r8, r0
 80194ac:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80194b0:	fb04 e000 	mla	r0, r4, r0, lr
 80194b4:	0a00      	lsrs	r0, r0, #8
 80194b6:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80194ba:	4328      	orrs	r0, r5
 80194bc:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80194c0:	b2ad      	uxth	r5, r5
 80194c2:	b2c4      	uxtb	r4, r0
 80194c4:	436b      	muls	r3, r5
 80194c6:	fb14 f405 	smulbb	r4, r4, r5
 80194ca:	1c5a      	adds	r2, r3, #1
 80194cc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80194d0:	780b      	ldrb	r3, [r1, #0]
 80194d2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80194d6:	b2d2      	uxtb	r2, r2
 80194d8:	fb03 4302 	mla	r3, r3, r2, r4
 80194dc:	b29b      	uxth	r3, r3
 80194de:	1c5c      	adds	r4, r3, #1
 80194e0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80194e4:	784c      	ldrb	r4, [r1, #1]
 80194e6:	fb14 f402 	smulbb	r4, r4, r2
 80194ea:	121b      	asrs	r3, r3, #8
 80194ec:	700b      	strb	r3, [r1, #0]
 80194ee:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80194f2:	fb03 4305 	mla	r3, r3, r5, r4
 80194f6:	b29b      	uxth	r3, r3
 80194f8:	1c5c      	adds	r4, r3, #1
 80194fa:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80194fe:	0c04      	lsrs	r4, r0, #16
 8019500:	7888      	ldrb	r0, [r1, #2]
 8019502:	121b      	asrs	r3, r3, #8
 8019504:	fb10 f002 	smulbb	r0, r0, r2
 8019508:	704b      	strb	r3, [r1, #1]
 801950a:	fb04 0005 	mla	r0, r4, r5, r0
 801950e:	b280      	uxth	r0, r0
 8019510:	1c43      	adds	r3, r0, #1
 8019512:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019516:	1200      	asrs	r0, r0, #8
 8019518:	7088      	strb	r0, [r1, #2]
 801951a:	b003      	add	sp, #12
 801951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019520:	2600      	movs	r6, #0
 8019522:	e6f3      	b.n	801930c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8019524:	2000      	movs	r0, #0
 8019526:	4606      	mov	r6, r0
 8019528:	e6fd      	b.n	8019326 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801952a:	2000      	movs	r0, #0
 801952c:	e6fb      	b.n	8019326 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801952e:	4620      	mov	r0, r4
 8019530:	e6f9      	b.n	8019326 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019532:	2500      	movs	r5, #0
 8019534:	e70b      	b.n	801934e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8019536:	2200      	movs	r2, #0
 8019538:	4615      	mov	r5, r2
 801953a:	e716      	b.n	801936a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801953c:	4672      	mov	r2, lr
 801953e:	4675      	mov	r5, lr
 8019540:	e713      	b.n	801936a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019542:	2200      	movs	r2, #0
 8019544:	e711      	b.n	801936a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019546:	4622      	mov	r2, r4
 8019548:	e70f      	b.n	801936a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801954a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801954a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801954e:	b09f      	sub	sp, #124	; 0x7c
 8019550:	921b      	str	r2, [sp, #108]	; 0x6c
 8019552:	9309      	str	r3, [sp, #36]	; 0x24
 8019554:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019556:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801955a:	901d      	str	r0, [sp, #116]	; 0x74
 801955c:	931c      	str	r3, [sp, #112]	; 0x70
 801955e:	6850      	ldr	r0, [r2, #4]
 8019560:	9119      	str	r1, [sp, #100]	; 0x64
 8019562:	6812      	ldr	r2, [r2, #0]
 8019564:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019566:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801956a:	fb00 1303 	mla	r3, r0, r3, r1
 801956e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019572:	18d3      	adds	r3, r2, r3
 8019574:	930c      	str	r3, [sp, #48]	; 0x30
 8019576:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	9312      	str	r3, [sp, #72]	; 0x48
 801957c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801957e:	685e      	ldr	r6, [r3, #4]
 8019580:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019584:	3604      	adds	r6, #4
 8019586:	930d      	str	r3, [sp, #52]	; 0x34
 8019588:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801958a:	2b00      	cmp	r3, #0
 801958c:	dc03      	bgt.n	8019596 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801958e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019590:	2b00      	cmp	r3, #0
 8019592:	f340 8378 	ble.w	8019c86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019596:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019598:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801959c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80195a0:	1e48      	subs	r0, r1, #1
 80195a2:	1e57      	subs	r7, r2, #1
 80195a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f340 818c 	ble.w	80198c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80195ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80195ae:	142b      	asrs	r3, r5, #16
 80195b0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80195b4:	d406      	bmi.n	80195c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80195b6:	4584      	cmp	ip, r0
 80195b8:	da04      	bge.n	80195c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	db02      	blt.n	80195c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80195be:	42bb      	cmp	r3, r7
 80195c0:	f2c0 8181 	blt.w	80198c6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80195c4:	f11c 0c01 	adds.w	ip, ip, #1
 80195c8:	f100 816f 	bmi.w	80198aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80195cc:	4561      	cmp	r1, ip
 80195ce:	f2c0 816c 	blt.w	80198aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80195d2:	3301      	adds	r3, #1
 80195d4:	f100 8169 	bmi.w	80198aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80195d8:	429a      	cmp	r2, r3
 80195da:	f2c0 8166 	blt.w	80198aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80195de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195e0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80195e2:	931a      	str	r3, [sp, #104]	; 0x68
 80195e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	f340 818c 	ble.w	8019904 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80195ec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80195ee:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80195f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80195f6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80195fa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80195fc:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019600:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019602:	141b      	asrs	r3, r3, #16
 8019604:	f100 81d0 	bmi.w	80199a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019608:	f100 38ff 	add.w	r8, r0, #4294967295
 801960c:	4543      	cmp	r3, r8
 801960e:	f280 81cb 	bge.w	80199a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019612:	f1bc 0f00 	cmp.w	ip, #0
 8019616:	f2c0 81c7 	blt.w	80199a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801961a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801961e:	45c4      	cmp	ip, r8
 8019620:	f280 81c2 	bge.w	80199a8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019624:	b200      	sxth	r0, r0
 8019626:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019628:	fb0c 3300 	mla	r3, ip, r0, r3
 801962c:	eb04 0803 	add.w	r8, r4, r3
 8019630:	5ce3      	ldrb	r3, [r4, r3]
 8019632:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019636:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801963a:	2a00      	cmp	r2, #0
 801963c:	f000 81a9 	beq.w	8019992 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8019640:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019644:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019648:	940e      	str	r4, [sp, #56]	; 0x38
 801964a:	0e24      	lsrs	r4, r4, #24
 801964c:	9415      	str	r4, [sp, #84]	; 0x54
 801964e:	b179      	cbz	r1, 8019670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019650:	eb08 0c00 	add.w	ip, r8, r0
 8019654:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019658:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801965c:	900a      	str	r0, [sp, #40]	; 0x28
 801965e:	0e00      	lsrs	r0, r0, #24
 8019660:	9013      	str	r0, [sp, #76]	; 0x4c
 8019662:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019666:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801966a:	900f      	str	r0, [sp, #60]	; 0x3c
 801966c:	0e00      	lsrs	r0, r0, #24
 801966e:	9016      	str	r0, [sp, #88]	; 0x58
 8019670:	b292      	uxth	r2, r2
 8019672:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019674:	b289      	uxth	r1, r1
 8019676:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019678:	fb02 f901 	mul.w	r9, r2, r1
 801967c:	0112      	lsls	r2, r2, #4
 801967e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019682:	eba2 0809 	sub.w	r8, r2, r9
 8019686:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801968a:	b289      	uxth	r1, r1
 801968c:	fa1f f888 	uxth.w	r8, r8
 8019690:	1a52      	subs	r2, r2, r1
 8019692:	fb08 f000 	mul.w	r0, r8, r0
 8019696:	b292      	uxth	r2, r2
 8019698:	fb02 000e 	mla	r0, r2, lr, r0
 801969c:	fb01 0004 	mla	r0, r1, r4, r0
 80196a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80196a2:	fb09 0004 	mla	r0, r9, r4, r0
 80196a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80196aa:	2800      	cmp	r0, #0
 80196ac:	f000 80f2 	beq.w	8019894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80196b0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80196b4:	d01b      	beq.n	80196ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80196b6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80196ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80196be:	fb0e fa0a 	mul.w	sl, lr, sl
 80196c2:	fb0e fe03 	mul.w	lr, lr, r3
 80196c6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80196ca:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80196ce:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80196d2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80196d6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80196da:	4453      	add	r3, sl
 80196dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80196e0:	0a1b      	lsrs	r3, r3, #8
 80196e2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80196e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80196ea:	ea43 030c 	orr.w	r3, r3, ip
 80196ee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80196f0:	2cff      	cmp	r4, #255	; 0xff
 80196f2:	d021      	beq.n	8019738 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80196f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80196f6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80196fa:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80196fc:	fb04 fb0b 	mul.w	fp, r4, fp
 8019700:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019702:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019706:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019708:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801970c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019710:	fb04 fa0a 	mul.w	sl, r4, sl
 8019714:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019718:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801971c:	44de      	add	lr, fp
 801971e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019722:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019726:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801972a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801972e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019732:	ea4e 040a 	orr.w	r4, lr, sl
 8019736:	940e      	str	r4, [sp, #56]	; 0x38
 8019738:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801973a:	2cff      	cmp	r4, #255	; 0xff
 801973c:	d021      	beq.n	8019782 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801973e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019740:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019744:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019746:	fb04 fb0b 	mul.w	fp, r4, fp
 801974a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801974c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019750:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019752:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019756:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801975a:	fb04 fa0a 	mul.w	sl, r4, sl
 801975e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019762:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019766:	44de      	add	lr, fp
 8019768:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801976c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019770:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019774:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019778:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801977c:	ea4e 040a 	orr.w	r4, lr, sl
 8019780:	940a      	str	r4, [sp, #40]	; 0x28
 8019782:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019784:	2cff      	cmp	r4, #255	; 0xff
 8019786:	d021      	beq.n	80197cc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8019788:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801978a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801978e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019790:	fb04 fb0b 	mul.w	fp, r4, fp
 8019794:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019796:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801979a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801979c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80197a0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80197a4:	fb04 fa0a 	mul.w	sl, r4, sl
 80197a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80197ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80197b0:	44de      	add	lr, fp
 80197b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80197b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80197ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80197be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80197c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80197c6:	ea4e 040a 	orr.w	r4, lr, sl
 80197ca:	940f      	str	r4, [sp, #60]	; 0x3c
 80197cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80197ce:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 80197d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80197d6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80197da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80197dc:	fb08 fc0c 	mul.w	ip, r8, ip
 80197e0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80197e4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80197e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80197ea:	fb01 cc0e 	mla	ip, r1, lr, ip
 80197ee:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 80197f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80197f4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80197f8:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80197fc:	fb08 f80e 	mul.w	r8, r8, lr
 8019800:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019804:	fb02 8303 	mla	r3, r2, r3, r8
 8019808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801980a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801980e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019812:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019814:	fb01 330a 	mla	r3, r1, sl, r3
 8019818:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801981c:	fb09 3901 	mla	r9, r9, r1, r3
 8019820:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019822:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019824:	4343      	muls	r3, r0
 8019826:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801982a:	1c58      	adds	r0, r3, #1
 801982c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019830:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019834:	ea4c 0c09 	orr.w	ip, ip, r9
 8019838:	783b      	ldrb	r3, [r7, #0]
 801983a:	fa5f f28c 	uxtb.w	r2, ip
 801983e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019842:	fb12 f201 	smulbb	r2, r2, r1
 8019846:	b2c0      	uxtb	r0, r0
 8019848:	fb03 2300 	mla	r3, r3, r0, r2
 801984c:	b29b      	uxth	r3, r3
 801984e:	1c5a      	adds	r2, r3, #1
 8019850:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019854:	787a      	ldrb	r2, [r7, #1]
 8019856:	fb12 f200 	smulbb	r2, r2, r0
 801985a:	121b      	asrs	r3, r3, #8
 801985c:	703b      	strb	r3, [r7, #0]
 801985e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019862:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019866:	fb03 2301 	mla	r3, r3, r1, r2
 801986a:	b29b      	uxth	r3, r3
 801986c:	1c5a      	adds	r2, r3, #1
 801986e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019872:	121b      	asrs	r3, r3, #8
 8019874:	707b      	strb	r3, [r7, #1]
 8019876:	78bb      	ldrb	r3, [r7, #2]
 8019878:	fb13 f000 	smulbb	r0, r3, r0
 801987c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019880:	fa1f fc8c 	uxth.w	ip, ip
 8019884:	f10c 0301 	add.w	r3, ip, #1
 8019888:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801988c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019890:	f887 c002 	strb.w	ip, [r7, #2]
 8019894:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019896:	3703      	adds	r7, #3
 8019898:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801989a:	441a      	add	r2, r3
 801989c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801989e:	441d      	add	r5, r3
 80198a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80198a2:	9229      	str	r2, [sp, #164]	; 0xa4
 80198a4:	3b01      	subs	r3, #1
 80198a6:	931a      	str	r3, [sp, #104]	; 0x68
 80198a8:	e69c      	b.n	80195e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80198aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80198ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80198ae:	441c      	add	r4, r3
 80198b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80198b2:	441d      	add	r5, r3
 80198b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198b6:	9429      	str	r4, [sp, #164]	; 0xa4
 80198b8:	3b01      	subs	r3, #1
 80198ba:	9309      	str	r3, [sp, #36]	; 0x24
 80198bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198be:	3303      	adds	r3, #3
 80198c0:	930c      	str	r3, [sp, #48]	; 0x30
 80198c2:	e66f      	b.n	80195a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80198c4:	d026      	beq.n	8019914 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80198c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198c8:	982b      	ldr	r0, [sp, #172]	; 0xac
 80198ca:	3b01      	subs	r3, #1
 80198cc:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80198ce:	fb00 4003 	mla	r0, r0, r3, r4
 80198d2:	1400      	asrs	r0, r0, #16
 80198d4:	f53f ae83 	bmi.w	80195de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80198d8:	3901      	subs	r1, #1
 80198da:	4288      	cmp	r0, r1
 80198dc:	f6bf ae7f 	bge.w	80195de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80198e0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80198e2:	fb01 5303 	mla	r3, r1, r3, r5
 80198e6:	141b      	asrs	r3, r3, #16
 80198e8:	f53f ae79 	bmi.w	80195de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80198ec:	3a01      	subs	r2, #1
 80198ee:	4293      	cmp	r3, r2
 80198f0:	f6bf ae75 	bge.w	80195de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80198f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80198f6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80198fa:	f103 0e03 	add.w	lr, r3, #3
 80198fe:	f1bb 0f00 	cmp.w	fp, #0
 8019902:	dc71      	bgt.n	80199e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8019904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019906:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801990a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801990c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019910:	4423      	add	r3, r4
 8019912:	930c      	str	r3, [sp, #48]	; 0x30
 8019914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019916:	2b00      	cmp	r3, #0
 8019918:	f340 81b5 	ble.w	8019c86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801991c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019920:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019922:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019926:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801992a:	eef0 6a62 	vmov.f32	s13, s5
 801992e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019932:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019936:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801993a:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801993e:	eef0 6a43 	vmov.f32	s13, s6
 8019942:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019946:	ee16 5a90 	vmov	r5, s13
 801994a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801994e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019952:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019956:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801995a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801995e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019962:	ee12 2a90 	vmov	r2, s5
 8019966:	eef0 2a47 	vmov.f32	s5, s14
 801996a:	fb92 f3f3 	sdiv	r3, r2, r3
 801996e:	ee13 2a10 	vmov	r2, s6
 8019972:	932b      	str	r3, [sp, #172]	; 0xac
 8019974:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019976:	eeb0 3a67 	vmov.f32	s6, s15
 801997a:	fb92 f3f3 	sdiv	r3, r2, r3
 801997e:	932c      	str	r3, [sp, #176]	; 0xb0
 8019980:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019982:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019984:	3b01      	subs	r3, #1
 8019986:	9319      	str	r3, [sp, #100]	; 0x64
 8019988:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801998a:	bf08      	it	eq
 801998c:	4613      	moveq	r3, r2
 801998e:	9309      	str	r3, [sp, #36]	; 0x24
 8019990:	e5fa      	b.n	8019588 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019992:	2900      	cmp	r1, #0
 8019994:	f43f ae6c 	beq.w	8019670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019998:	f818 0000 	ldrb.w	r0, [r8, r0]
 801999c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80199a0:	900a      	str	r0, [sp, #40]	; 0x28
 80199a2:	0e00      	lsrs	r0, r0, #24
 80199a4:	9013      	str	r0, [sp, #76]	; 0x4c
 80199a6:	e663      	b.n	8019670 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80199a8:	f113 0801 	adds.w	r8, r3, #1
 80199ac:	f53f af72 	bmi.w	8019894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80199b0:	4540      	cmp	r0, r8
 80199b2:	f6ff af6f 	blt.w	8019894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80199b6:	f11c 0801 	adds.w	r8, ip, #1
 80199ba:	f53f af6b 	bmi.w	8019894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80199be:	45c6      	cmp	lr, r8
 80199c0:	f6ff af68 	blt.w	8019894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80199c4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80199c6:	b200      	sxth	r0, r0
 80199c8:	9302      	str	r3, [sp, #8]
 80199ca:	fa0f f38e 	sxth.w	r3, lr
 80199ce:	9000      	str	r0, [sp, #0]
 80199d0:	9301      	str	r3, [sp, #4]
 80199d2:	4633      	mov	r3, r6
 80199d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80199d6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80199da:	e9cd c203 	strd	ip, r2, [sp, #12]
 80199de:	4639      	mov	r1, r7
 80199e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80199e2:	f7ff fc74 	bl	80192ce <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80199e6:	e755      	b.n	8019894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80199e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80199ea:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80199ee:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 80199f0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80199f4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 80199f6:	1427      	asrs	r7, r4, #16
 80199f8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80199fe:	142b      	asrs	r3, r5, #16
 8019a00:	fb01 7303 	mla	r3, r1, r3, r7
 8019a04:	18e7      	adds	r7, r4, r3
 8019a06:	5ce3      	ldrb	r3, [r4, r3]
 8019a08:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019a0c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019a10:	2a00      	cmp	r2, #0
 8019a12:	f000 812e 	beq.w	8019c72 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8019a16:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019a1a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8019a1e:	9410      	str	r4, [sp, #64]	; 0x40
 8019a20:	0e24      	lsrs	r4, r4, #24
 8019a22:	9417      	str	r4, [sp, #92]	; 0x5c
 8019a24:	b170      	cbz	r0, 8019a44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019a26:	eb07 0801 	add.w	r8, r7, r1
 8019a2a:	5c79      	ldrb	r1, [r7, r1]
 8019a2c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019a30:	910b      	str	r1, [sp, #44]	; 0x2c
 8019a32:	0e09      	lsrs	r1, r1, #24
 8019a34:	9114      	str	r1, [sp, #80]	; 0x50
 8019a36:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019a3a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019a3e:	9111      	str	r1, [sp, #68]	; 0x44
 8019a40:	0e09      	lsrs	r1, r1, #24
 8019a42:	9118      	str	r1, [sp, #96]	; 0x60
 8019a44:	b292      	uxth	r2, r2
 8019a46:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8019a48:	b280      	uxth	r0, r0
 8019a4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019a4c:	fb02 f900 	mul.w	r9, r2, r0
 8019a50:	0112      	lsls	r2, r2, #4
 8019a52:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019a56:	eba2 0809 	sub.w	r8, r2, r9
 8019a5a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019a5e:	b280      	uxth	r0, r0
 8019a60:	fa1f f888 	uxth.w	r8, r8
 8019a64:	1a12      	subs	r2, r2, r0
 8019a66:	fb08 f101 	mul.w	r1, r8, r1
 8019a6a:	b292      	uxth	r2, r2
 8019a6c:	fb02 110c 	mla	r1, r2, ip, r1
 8019a70:	fb00 1104 	mla	r1, r0, r4, r1
 8019a74:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019a76:	fb09 1104 	mla	r1, r9, r4, r1
 8019a7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019a7e:	2900      	cmp	r1, #0
 8019a80:	f000 80ec 	beq.w	8019c5c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8019a84:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019a88:	d019      	beq.n	8019abe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8019a8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019a8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019a92:	fb0c fa0a 	mul.w	sl, ip, sl
 8019a96:	fb0c fc03 	mul.w	ip, ip, r3
 8019a9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019a9e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019aa2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019aa6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019aaa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019aae:	4453      	add	r3, sl
 8019ab0:	0a3f      	lsrs	r7, r7, #8
 8019ab2:	0a1b      	lsrs	r3, r3, #8
 8019ab4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019ab8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019abc:	433b      	orrs	r3, r7
 8019abe:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019ac0:	2cff      	cmp	r4, #255	; 0xff
 8019ac2:	d020      	beq.n	8019b06 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8019ac4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019ac6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019aca:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019acc:	4367      	muls	r7, r4
 8019ace:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019ad0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019ad4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ad8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019ada:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019ade:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ae2:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ae6:	44bc      	add	ip, r7
 8019ae8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019aec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019af0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019af4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019af8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019afc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b00:	ea4c 040a 	orr.w	r4, ip, sl
 8019b04:	9410      	str	r4, [sp, #64]	; 0x40
 8019b06:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b08:	2cff      	cmp	r4, #255	; 0xff
 8019b0a:	d020      	beq.n	8019b4e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8019b0c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019b0e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019b12:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b14:	4367      	muls	r7, r4
 8019b16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019b18:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019b1c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019b20:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019b22:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019b26:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019b2a:	fb04 fa0a 	mul.w	sl, r4, sl
 8019b2e:	44bc      	add	ip, r7
 8019b30:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019b34:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019b38:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019b3c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019b40:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b44:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b48:	ea4c 040a 	orr.w	r4, ip, sl
 8019b4c:	940b      	str	r4, [sp, #44]	; 0x2c
 8019b4e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019b50:	2cff      	cmp	r4, #255	; 0xff
 8019b52:	d020      	beq.n	8019b96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8019b54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019b56:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019b5a:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019b5c:	4367      	muls	r7, r4
 8019b5e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019b60:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019b64:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019b68:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019b6a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019b6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019b72:	fb04 fa0a 	mul.w	sl, r4, sl
 8019b76:	44bc      	add	ip, r7
 8019b78:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019b7c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019b80:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019b84:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019b88:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019b8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b90:	ea4c 040a 	orr.w	r4, ip, sl
 8019b94:	9411      	str	r4, [sp, #68]	; 0x44
 8019b96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019b98:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019b9c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ba0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019ba4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019ba6:	fb08 f707 	mul.w	r7, r8, r7
 8019baa:	fb02 770c 	mla	r7, r2, ip, r7
 8019bae:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019bb2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019bb4:	fb00 770c 	mla	r7, r0, ip, r7
 8019bb8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019bbc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019bbe:	fb09 770c 	mla	r7, r9, ip, r7
 8019bc2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019bc6:	fb08 f80c 	mul.w	r8, r8, ip
 8019bca:	0a3f      	lsrs	r7, r7, #8
 8019bcc:	fb02 8303 	mla	r3, r2, r3, r8
 8019bd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019bd2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019bd6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019bda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019bdc:	fb00 330a 	mla	r3, r0, sl, r3
 8019be0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019be4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019be6:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019bf0:	434b      	muls	r3, r1
 8019bf2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019bf6:	1c59      	adds	r1, r3, #1
 8019bf8:	ea47 070c 	orr.w	r7, r7, ip
 8019bfc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019c00:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019c04:	b2fa      	uxtb	r2, r7
 8019c06:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019c0a:	fb12 f200 	smulbb	r2, r2, r0
 8019c0e:	b2c9      	uxtb	r1, r1
 8019c10:	fb03 2301 	mla	r3, r3, r1, r2
 8019c14:	b29b      	uxth	r3, r3
 8019c16:	1c5a      	adds	r2, r3, #1
 8019c18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019c1c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019c20:	fb12 f201 	smulbb	r2, r2, r1
 8019c24:	121b      	asrs	r3, r3, #8
 8019c26:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019c2a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8019c2e:	0c3f      	lsrs	r7, r7, #16
 8019c30:	fb03 2300 	mla	r3, r3, r0, r2
 8019c34:	b29b      	uxth	r3, r3
 8019c36:	1c5a      	adds	r2, r3, #1
 8019c38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019c3c:	121b      	asrs	r3, r3, #8
 8019c3e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019c42:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019c46:	fb13 f101 	smulbb	r1, r3, r1
 8019c4a:	fb07 1700 	mla	r7, r7, r0, r1
 8019c4e:	b2bf      	uxth	r7, r7
 8019c50:	1c7b      	adds	r3, r7, #1
 8019c52:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8019c56:	123f      	asrs	r7, r7, #8
 8019c58:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019c5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019c5e:	f10e 0e03 	add.w	lr, lr, #3
 8019c62:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019c64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019c68:	441a      	add	r2, r3
 8019c6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c6c:	9229      	str	r2, [sp, #164]	; 0xa4
 8019c6e:	441d      	add	r5, r3
 8019c70:	e645      	b.n	80198fe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8019c72:	2800      	cmp	r0, #0
 8019c74:	f43f aee6 	beq.w	8019a44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019c78:	5c79      	ldrb	r1, [r7, r1]
 8019c7a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019c7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8019c80:	0e09      	lsrs	r1, r1, #24
 8019c82:	9114      	str	r1, [sp, #80]	; 0x50
 8019c84:	e6de      	b.n	8019a44 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019c86:	b01f      	add	sp, #124	; 0x7c
 8019c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019c8c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8019c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c90:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8019c94:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019c98:	2d00      	cmp	r5, #0
 8019c9a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8019c9e:	fb05 700e 	mla	r0, r5, lr, r7
 8019ca2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8019ca6:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8019caa:	eb02 0800 	add.w	r8, r2, r0
 8019cae:	f2c0 8105 	blt.w	8019ebc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8019cb2:	45a9      	cmp	r9, r5
 8019cb4:	f340 8102 	ble.w	8019ebc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8019cb8:	2f00      	cmp	r7, #0
 8019cba:	f2c0 80fd 	blt.w	8019eb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8019cbe:	45be      	cmp	lr, r7
 8019cc0:	f340 80fa 	ble.w	8019eb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8019cc4:	5c12      	ldrb	r2, [r2, r0]
 8019cc6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019cca:	1c7a      	adds	r2, r7, #1
 8019ccc:	f100 80f9 	bmi.w	8019ec2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8019cd0:	4596      	cmp	lr, r2
 8019cd2:	f340 80f6 	ble.w	8019ec2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8019cd6:	2c00      	cmp	r4, #0
 8019cd8:	f000 80f5 	beq.w	8019ec6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8019cdc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019ce0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019ce4:	3501      	adds	r5, #1
 8019ce6:	f100 80f2 	bmi.w	8019ece <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8019cea:	45a9      	cmp	r9, r5
 8019cec:	f340 80ef 	ble.w	8019ece <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8019cf0:	f1bc 0f00 	cmp.w	ip, #0
 8019cf4:	f000 80ee 	beq.w	8019ed4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8019cf8:	2f00      	cmp	r7, #0
 8019cfa:	f2c0 80e6 	blt.w	8019eca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8019cfe:	45be      	cmp	lr, r7
 8019d00:	f340 80e3 	ble.w	8019eca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8019d04:	f818 200e 	ldrb.w	r2, [r8, lr]
 8019d08:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019d0c:	3701      	adds	r7, #1
 8019d0e:	f100 80e4 	bmi.w	8019eda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8019d12:	45be      	cmp	lr, r7
 8019d14:	f340 80e1 	ble.w	8019eda <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8019d18:	2c00      	cmp	r4, #0
 8019d1a:	f000 80e0 	beq.w	8019ede <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8019d1e:	44c6      	add	lr, r8
 8019d20:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8019d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019d28:	b2a3      	uxth	r3, r4
 8019d2a:	fa1f fc8c 	uxth.w	ip, ip
 8019d2e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019d32:	fb0c fe03 	mul.w	lr, ip, r3
 8019d36:	011b      	lsls	r3, r3, #4
 8019d38:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019d3c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8019d40:	eba3 070e 	sub.w	r7, r3, lr
 8019d44:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8019d48:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019d4c:	fa1f f48c 	uxth.w	r4, ip
 8019d50:	b2bf      	uxth	r7, r7
 8019d52:	1b1b      	subs	r3, r3, r4
 8019d54:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019d58:	fb07 fc0a 	mul.w	ip, r7, sl
 8019d5c:	b29b      	uxth	r3, r3
 8019d5e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019d62:	9300      	str	r3, [sp, #0]
 8019d64:	fb04 cc09 	mla	ip, r4, r9, ip
 8019d68:	fb0e cc08 	mla	ip, lr, r8, ip
 8019d6c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019d70:	9301      	str	r3, [sp, #4]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	f000 809d 	beq.w	8019eb2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8019d78:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019d7c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019d80:	fb0b fc0c 	mul.w	ip, fp, ip
 8019d84:	fb0b f606 	mul.w	r6, fp, r6
 8019d88:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019d8c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019d90:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019d94:	44dc      	add	ip, fp
 8019d96:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8019d9a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019d9e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019da2:	fb0a fb0b 	mul.w	fp, sl, fp
 8019da6:	fb0a fa00 	mul.w	sl, sl, r0
 8019daa:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019dae:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019db2:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019db6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019dba:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019dbe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019dc2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019dc6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019dca:	0a36      	lsrs	r6, r6, #8
 8019dcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019dd0:	44dc      	add	ip, fp
 8019dd2:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019dd6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019dda:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019dde:	fb09 fb0b 	mul.w	fp, r9, fp
 8019de2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019de6:	fb09 f905 	mul.w	r9, r9, r5
 8019dea:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019dee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019df2:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019df6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019dfa:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019dfe:	fb0c fc07 	mul.w	ip, ip, r7
 8019e02:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019e06:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019e0a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019e0e:	4458      	add	r0, fp
 8019e10:	fb08 f505 	mul.w	r5, r8, r5
 8019e14:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019e18:	fb08 f802 	mul.w	r8, r8, r2
 8019e1c:	0a00      	lsrs	r0, r0, #8
 8019e1e:	0a2a      	lsrs	r2, r5, #8
 8019e20:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019e24:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019e28:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019e2c:	4415      	add	r5, r2
 8019e2e:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019e32:	0a2d      	lsrs	r5, r5, #8
 8019e34:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019e38:	9a00      	ldr	r2, [sp, #0]
 8019e3a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019e3e:	fb03 cc02 	mla	ip, r3, r2, ip
 8019e42:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019e46:	9b01      	ldr	r3, [sp, #4]
 8019e48:	fb05 c50e 	mla	r5, r5, lr, ip
 8019e4c:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019e50:	43db      	mvns	r3, r3
 8019e52:	fb00 5004 	mla	r0, r0, r4, r5
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	0a00      	lsrs	r0, r0, #8
 8019e5a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8019e5e:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019e62:	4378      	muls	r0, r7
 8019e64:	fb02 0006 	mla	r0, r2, r6, r0
 8019e68:	780a      	ldrb	r2, [r1, #0]
 8019e6a:	fb0e 0e08 	mla	lr, lr, r8, r0
 8019e6e:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019e72:	fb04 e000 	mla	r0, r4, r0, lr
 8019e76:	fb02 f403 	mul.w	r4, r2, r3
 8019e7a:	0a00      	lsrs	r0, r0, #8
 8019e7c:	1c62      	adds	r2, r4, #1
 8019e7e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019e82:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019e86:	4328      	orrs	r0, r5
 8019e88:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019e8c:	700a      	strb	r2, [r1, #0]
 8019e8e:	784a      	ldrb	r2, [r1, #1]
 8019e90:	435a      	muls	r2, r3
 8019e92:	1c54      	adds	r4, r2, #1
 8019e94:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8019e98:	0a02      	lsrs	r2, r0, #8
 8019e9a:	0c00      	lsrs	r0, r0, #16
 8019e9c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019ea0:	704a      	strb	r2, [r1, #1]
 8019ea2:	788a      	ldrb	r2, [r1, #2]
 8019ea4:	4353      	muls	r3, r2
 8019ea6:	1c5a      	adds	r2, r3, #1
 8019ea8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019eac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019eb0:	7088      	strb	r0, [r1, #2]
 8019eb2:	b003      	add	sp, #12
 8019eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb8:	2600      	movs	r6, #0
 8019eba:	e706      	b.n	8019cca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8019ebc:	2000      	movs	r0, #0
 8019ebe:	4606      	mov	r6, r0
 8019ec0:	e710      	b.n	8019ce4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019ec2:	2000      	movs	r0, #0
 8019ec4:	e70e      	b.n	8019ce4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019ec6:	4620      	mov	r0, r4
 8019ec8:	e70c      	b.n	8019ce4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019eca:	2500      	movs	r5, #0
 8019ecc:	e71e      	b.n	8019d0c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8019ece:	2200      	movs	r2, #0
 8019ed0:	4615      	mov	r5, r2
 8019ed2:	e729      	b.n	8019d28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019ed4:	4662      	mov	r2, ip
 8019ed6:	4665      	mov	r5, ip
 8019ed8:	e726      	b.n	8019d28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019eda:	2200      	movs	r2, #0
 8019edc:	e724      	b.n	8019d28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019ede:	4622      	mov	r2, r4
 8019ee0:	e722      	b.n	8019d28 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08019ee2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019ee2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ee6:	b09b      	sub	sp, #108	; 0x6c
 8019ee8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019eec:	9218      	str	r2, [sp, #96]	; 0x60
 8019eee:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019ef0:	9019      	str	r0, [sp, #100]	; 0x64
 8019ef2:	9116      	str	r1, [sp, #88]	; 0x58
 8019ef4:	6850      	ldr	r0, [r2, #4]
 8019ef6:	9307      	str	r3, [sp, #28]
 8019ef8:	6812      	ldr	r2, [r2, #0]
 8019efa:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8019efc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019f00:	fb00 1303 	mla	r3, r0, r3, r1
 8019f04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019f08:	18d3      	adds	r3, r2, r3
 8019f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8019f0c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	930f      	str	r3, [sp, #60]	; 0x3c
 8019f12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019f14:	685e      	ldr	r6, [r3, #4]
 8019f16:	3604      	adds	r6, #4
 8019f18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	dc03      	bgt.n	8019f26 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019f1e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	f340 834f 	ble.w	801a5c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8019f26:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019f28:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019f2c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019f30:	1e48      	subs	r0, r1, #1
 8019f32:	1e57      	subs	r7, r2, #1
 8019f34:	9b07      	ldr	r3, [sp, #28]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	f340 8178 	ble.w	801a22c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019f3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019f3e:	142b      	asrs	r3, r5, #16
 8019f40:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019f44:	d406      	bmi.n	8019f54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f46:	4584      	cmp	ip, r0
 8019f48:	da04      	bge.n	8019f54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	db02      	blt.n	8019f54 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019f4e:	42bb      	cmp	r3, r7
 8019f50:	f2c0 816d 	blt.w	801a22e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8019f54:	f11c 0c01 	adds.w	ip, ip, #1
 8019f58:	f100 815b 	bmi.w	801a212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019f5c:	4561      	cmp	r1, ip
 8019f5e:	f2c0 8158 	blt.w	801a212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019f62:	3301      	adds	r3, #1
 8019f64:	f100 8155 	bmi.w	801a212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019f68:	429a      	cmp	r2, r3
 8019f6a:	f2c0 8152 	blt.w	801a212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019f6e:	9b07      	ldr	r3, [sp, #28]
 8019f70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019f72:	9317      	str	r3, [sp, #92]	; 0x5c
 8019f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	f340 8178 	ble.w	801a26c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8019f7c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019f7e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019f82:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019f86:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019f8a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019f8c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8019f90:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019f92:	141b      	asrs	r3, r3, #16
 8019f94:	f100 81ba 	bmi.w	801a30c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019f98:	f101 38ff 	add.w	r8, r1, #4294967295
 8019f9c:	4543      	cmp	r3, r8
 8019f9e:	f280 81b5 	bge.w	801a30c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019fa2:	f1bc 0f00 	cmp.w	ip, #0
 8019fa6:	f2c0 81b1 	blt.w	801a30c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019faa:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019fae:	45c4      	cmp	ip, r8
 8019fb0:	f280 81ac 	bge.w	801a30c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019fb4:	b209      	sxth	r1, r1
 8019fb6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019fb8:	fb0c 3301 	mla	r3, ip, r1, r3
 8019fbc:	eb04 0803 	add.w	r8, r4, r3
 8019fc0:	5ce3      	ldrb	r3, [r4, r3]
 8019fc2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019fc6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019fca:	2a00      	cmp	r2, #0
 8019fcc:	f000 8193 	beq.w	801a2f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8019fd0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019fd4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019fd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8019fda:	0e24      	lsrs	r4, r4, #24
 8019fdc:	9412      	str	r4, [sp, #72]	; 0x48
 8019fde:	b178      	cbz	r0, 801a000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019fe0:	eb08 0c01 	add.w	ip, r8, r1
 8019fe4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8019fe8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019fec:	9108      	str	r1, [sp, #32]
 8019fee:	0e09      	lsrs	r1, r1, #24
 8019ff0:	9110      	str	r1, [sp, #64]	; 0x40
 8019ff2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8019ff6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019ffa:	910c      	str	r1, [sp, #48]	; 0x30
 8019ffc:	0e09      	lsrs	r1, r1, #24
 8019ffe:	9113      	str	r1, [sp, #76]	; 0x4c
 801a000:	b292      	uxth	r2, r2
 801a002:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a004:	b280      	uxth	r0, r0
 801a006:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a008:	fb02 f900 	mul.w	r9, r2, r0
 801a00c:	0112      	lsls	r2, r2, #4
 801a00e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a012:	eba2 0809 	sub.w	r8, r2, r9
 801a016:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a01a:	b280      	uxth	r0, r0
 801a01c:	fa1f f888 	uxth.w	r8, r8
 801a020:	1a12      	subs	r2, r2, r0
 801a022:	fb08 f101 	mul.w	r1, r8, r1
 801a026:	b292      	uxth	r2, r2
 801a028:	fb02 110e 	mla	r1, r2, lr, r1
 801a02c:	fb00 1104 	mla	r1, r0, r4, r1
 801a030:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a032:	fb09 1104 	mla	r1, r9, r4, r1
 801a036:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a03a:	2900      	cmp	r1, #0
 801a03c:	f000 80de 	beq.w	801a1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a040:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a044:	d01b      	beq.n	801a07e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801a046:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a04a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a04e:	fb0e fa0a 	mul.w	sl, lr, sl
 801a052:	fb0e fe03 	mul.w	lr, lr, r3
 801a056:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a05a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a05e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a062:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a066:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a06a:	4453      	add	r3, sl
 801a06c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a070:	0a1b      	lsrs	r3, r3, #8
 801a072:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a076:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a07a:	ea43 030c 	orr.w	r3, r3, ip
 801a07e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a080:	2cff      	cmp	r4, #255	; 0xff
 801a082:	d021      	beq.n	801a0c8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a084:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a086:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a08a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a08c:	fb04 fb0b 	mul.w	fp, r4, fp
 801a090:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a092:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a096:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a098:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a09c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a0a0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a0a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a0ac:	44de      	add	lr, fp
 801a0ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a0b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a0b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a0ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a0c2:	ea4e 040a 	orr.w	r4, lr, sl
 801a0c6:	940b      	str	r4, [sp, #44]	; 0x2c
 801a0c8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a0ca:	2cff      	cmp	r4, #255	; 0xff
 801a0cc:	d021      	beq.n	801a112 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801a0ce:	9c08      	ldr	r4, [sp, #32]
 801a0d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a0d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a0d6:	fb04 fb0b 	mul.w	fp, r4, fp
 801a0da:	9c08      	ldr	r4, [sp, #32]
 801a0dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a0e0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a0e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a0e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a0ea:	fb04 fa0a 	mul.w	sl, r4, sl
 801a0ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a0f6:	44de      	add	lr, fp
 801a0f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a0fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a100:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a104:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a108:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a10c:	ea4e 040a 	orr.w	r4, lr, sl
 801a110:	9408      	str	r4, [sp, #32]
 801a112:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a114:	2cff      	cmp	r4, #255	; 0xff
 801a116:	d021      	beq.n	801a15c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a118:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a11a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a11e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a120:	fb04 fb0b 	mul.w	fp, r4, fp
 801a124:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a126:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a12a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a12c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a130:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a134:	fb04 fa0a 	mul.w	sl, r4, sl
 801a138:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a13c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a140:	44de      	add	lr, fp
 801a142:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a146:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a14a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a14e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a152:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a156:	ea4e 040a 	orr.w	r4, lr, sl
 801a15a:	940c      	str	r4, [sp, #48]	; 0x30
 801a15c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a15e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a166:	43c9      	mvns	r1, r1
 801a168:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a16c:	9c08      	ldr	r4, [sp, #32]
 801a16e:	b2c9      	uxtb	r1, r1
 801a170:	fb08 fc0c 	mul.w	ip, r8, ip
 801a174:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a178:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a17c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a17e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a182:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a186:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a188:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a18c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a190:	fb08 f80e 	mul.w	r8, r8, lr
 801a194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a198:	fb02 8303 	mla	r3, r2, r3, r8
 801a19c:	9a08      	ldr	r2, [sp, #32]
 801a19e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1a2:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a1a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a1a8:	fb00 330a 	mla	r3, r0, sl, r3
 801a1ac:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a1b0:	fb09 3900 	mla	r9, r9, r0, r3
 801a1b4:	783b      	ldrb	r3, [r7, #0]
 801a1b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a1ba:	fb03 f201 	mul.w	r2, r3, r1
 801a1be:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a1c2:	1c53      	adds	r3, r2, #1
 801a1c4:	ea4c 0c09 	orr.w	ip, ip, r9
 801a1c8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a1cc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801a1d0:	703b      	strb	r3, [r7, #0]
 801a1d2:	787b      	ldrb	r3, [r7, #1]
 801a1d4:	434b      	muls	r3, r1
 801a1d6:	1c5a      	adds	r2, r3, #1
 801a1d8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a1dc:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a1e0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a1e4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a1e8:	707b      	strb	r3, [r7, #1]
 801a1ea:	78bb      	ldrb	r3, [r7, #2]
 801a1ec:	4359      	muls	r1, r3
 801a1ee:	1c4b      	adds	r3, r1, #1
 801a1f0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a1f4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801a1f8:	f887 c002 	strb.w	ip, [r7, #2]
 801a1fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a1fe:	3703      	adds	r7, #3
 801a200:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a202:	441a      	add	r2, r3
 801a204:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a206:	441d      	add	r5, r3
 801a208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a20a:	9225      	str	r2, [sp, #148]	; 0x94
 801a20c:	3b01      	subs	r3, #1
 801a20e:	9317      	str	r3, [sp, #92]	; 0x5c
 801a210:	e6b0      	b.n	8019f74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a212:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a214:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a216:	441c      	add	r4, r3
 801a218:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a21a:	441d      	add	r5, r3
 801a21c:	9b07      	ldr	r3, [sp, #28]
 801a21e:	9425      	str	r4, [sp, #148]	; 0x94
 801a220:	3b01      	subs	r3, #1
 801a222:	9307      	str	r3, [sp, #28]
 801a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a226:	3303      	adds	r3, #3
 801a228:	930a      	str	r3, [sp, #40]	; 0x28
 801a22a:	e683      	b.n	8019f34 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a22c:	d026      	beq.n	801a27c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801a22e:	9b07      	ldr	r3, [sp, #28]
 801a230:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a232:	3b01      	subs	r3, #1
 801a234:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a236:	fb00 4003 	mla	r0, r0, r3, r4
 801a23a:	1400      	asrs	r0, r0, #16
 801a23c:	f53f ae97 	bmi.w	8019f6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a240:	3901      	subs	r1, #1
 801a242:	4288      	cmp	r0, r1
 801a244:	f6bf ae93 	bge.w	8019f6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a248:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a24a:	fb01 5303 	mla	r3, r1, r3, r5
 801a24e:	141b      	asrs	r3, r3, #16
 801a250:	f53f ae8d 	bmi.w	8019f6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a254:	3a01      	subs	r2, #1
 801a256:	4293      	cmp	r3, r2
 801a258:	f6bf ae89 	bge.w	8019f6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a25e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a262:	f103 0e03 	add.w	lr, r3, #3
 801a266:	f1bb 0f00 	cmp.w	fp, #0
 801a26a:	dc6d      	bgt.n	801a348 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801a26c:	9b07      	ldr	r3, [sp, #28]
 801a26e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a272:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a274:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a278:	4423      	add	r3, r4
 801a27a:	930a      	str	r3, [sp, #40]	; 0x28
 801a27c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a27e:	2b00      	cmp	r3, #0
 801a280:	f340 81a0 	ble.w	801a5c4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a284:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a288:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a28a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a28e:	eeb0 6a62 	vmov.f32	s12, s5
 801a292:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a296:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a29a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a29e:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801a2a2:	eeb0 6a43 	vmov.f32	s12, s6
 801a2a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a2aa:	ee16 5a10 	vmov	r5, s12
 801a2ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a2b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a2b6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a2ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a2be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a2c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a2c6:	ee12 2a90 	vmov	r2, s5
 801a2ca:	eef0 2a47 	vmov.f32	s5, s14
 801a2ce:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2d2:	ee13 2a10 	vmov	r2, s6
 801a2d6:	9327      	str	r3, [sp, #156]	; 0x9c
 801a2d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a2da:	eeb0 3a67 	vmov.f32	s6, s15
 801a2de:	fb92 f3f3 	sdiv	r3, r2, r3
 801a2e2:	9328      	str	r3, [sp, #160]	; 0xa0
 801a2e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a2e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a2e8:	3b01      	subs	r3, #1
 801a2ea:	9316      	str	r3, [sp, #88]	; 0x58
 801a2ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a2ee:	bf08      	it	eq
 801a2f0:	4613      	moveq	r3, r2
 801a2f2:	9307      	str	r3, [sp, #28]
 801a2f4:	e610      	b.n	8019f18 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a2f6:	2800      	cmp	r0, #0
 801a2f8:	f43f ae82 	beq.w	801a000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a2fc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a300:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a304:	9108      	str	r1, [sp, #32]
 801a306:	0e09      	lsrs	r1, r1, #24
 801a308:	9110      	str	r1, [sp, #64]	; 0x40
 801a30a:	e679      	b.n	801a000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a30c:	f113 0801 	adds.w	r8, r3, #1
 801a310:	f53f af74 	bmi.w	801a1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a314:	4541      	cmp	r1, r8
 801a316:	f6ff af71 	blt.w	801a1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a31a:	f11c 0801 	adds.w	r8, ip, #1
 801a31e:	f53f af6d 	bmi.w	801a1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a322:	45c6      	cmp	lr, r8
 801a324:	f6ff af6a 	blt.w	801a1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a328:	b209      	sxth	r1, r1
 801a32a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a32e:	fa0f f38e 	sxth.w	r3, lr
 801a332:	9100      	str	r1, [sp, #0]
 801a334:	4639      	mov	r1, r7
 801a336:	9301      	str	r3, [sp, #4]
 801a338:	4633      	mov	r3, r6
 801a33a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801a33e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a340:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a342:	f7ff fca3 	bl	8019c8c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801a346:	e759      	b.n	801a1fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a348:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a34a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a34e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a350:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a354:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a356:	1427      	asrs	r7, r4, #16
 801a358:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a35a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a35e:	142b      	asrs	r3, r5, #16
 801a360:	fb01 7303 	mla	r3, r1, r3, r7
 801a364:	18e7      	adds	r7, r4, r3
 801a366:	5ce3      	ldrb	r3, [r4, r3]
 801a368:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a36c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a370:	2a00      	cmp	r2, #0
 801a372:	f000 811d 	beq.w	801a5b0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801a376:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a37a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a37e:	940d      	str	r4, [sp, #52]	; 0x34
 801a380:	0e24      	lsrs	r4, r4, #24
 801a382:	9414      	str	r4, [sp, #80]	; 0x50
 801a384:	b170      	cbz	r0, 801a3a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a386:	eb07 0801 	add.w	r8, r7, r1
 801a38a:	5c79      	ldrb	r1, [r7, r1]
 801a38c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a390:	9109      	str	r1, [sp, #36]	; 0x24
 801a392:	0e09      	lsrs	r1, r1, #24
 801a394:	9111      	str	r1, [sp, #68]	; 0x44
 801a396:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a39a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a39e:	910e      	str	r1, [sp, #56]	; 0x38
 801a3a0:	0e09      	lsrs	r1, r1, #24
 801a3a2:	9115      	str	r1, [sp, #84]	; 0x54
 801a3a4:	b292      	uxth	r2, r2
 801a3a6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3a8:	b280      	uxth	r0, r0
 801a3aa:	fb02 f900 	mul.w	r9, r2, r0
 801a3ae:	0112      	lsls	r2, r2, #4
 801a3b0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a3b4:	eba2 0809 	sub.w	r8, r2, r9
 801a3b8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a3bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a3be:	b280      	uxth	r0, r0
 801a3c0:	fa1f f888 	uxth.w	r8, r8
 801a3c4:	1a09      	subs	r1, r1, r0
 801a3c6:	fb08 f202 	mul.w	r2, r8, r2
 801a3ca:	b289      	uxth	r1, r1
 801a3cc:	fb01 220c 	mla	r2, r1, ip, r2
 801a3d0:	fb00 2204 	mla	r2, r0, r4, r2
 801a3d4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a3d6:	fb09 2204 	mla	r2, r9, r4, r2
 801a3da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a3de:	2a00      	cmp	r2, #0
 801a3e0:	f000 80db 	beq.w	801a59a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801a3e4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a3e8:	d019      	beq.n	801a41e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801a3ea:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a3ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a3f2:	fb0c fa0a 	mul.w	sl, ip, sl
 801a3f6:	fb0c fc03 	mul.w	ip, ip, r3
 801a3fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a3fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a402:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a406:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a40a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a40e:	4453      	add	r3, sl
 801a410:	0a3f      	lsrs	r7, r7, #8
 801a412:	0a1b      	lsrs	r3, r3, #8
 801a414:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a418:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a41c:	433b      	orrs	r3, r7
 801a41e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a420:	2cff      	cmp	r4, #255	; 0xff
 801a422:	d020      	beq.n	801a466 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801a424:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a426:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a42a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a42c:	4367      	muls	r7, r4
 801a42e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a430:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a434:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a438:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a43a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a43e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a442:	fb04 fa0a 	mul.w	sl, r4, sl
 801a446:	44bc      	add	ip, r7
 801a448:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a44c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a450:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a454:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a458:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a45c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a460:	ea4c 040a 	orr.w	r4, ip, sl
 801a464:	940d      	str	r4, [sp, #52]	; 0x34
 801a466:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a468:	2cff      	cmp	r4, #255	; 0xff
 801a46a:	d020      	beq.n	801a4ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801a46c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a46e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a472:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a474:	4367      	muls	r7, r4
 801a476:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a478:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a47c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a480:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a482:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a486:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a48a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a48e:	44bc      	add	ip, r7
 801a490:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a494:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a498:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a49c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4a4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a4a8:	ea4c 040a 	orr.w	r4, ip, sl
 801a4ac:	9409      	str	r4, [sp, #36]	; 0x24
 801a4ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a4b0:	2cff      	cmp	r4, #255	; 0xff
 801a4b2:	d020      	beq.n	801a4f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801a4b4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a4b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a4ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a4bc:	4367      	muls	r7, r4
 801a4be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a4c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a4c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a4c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a4ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a4ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a4d6:	44bc      	add	ip, r7
 801a4d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a4dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a4e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a4f0:	ea4c 040a 	orr.w	r4, ip, sl
 801a4f4:	940e      	str	r4, [sp, #56]	; 0x38
 801a4f6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a4f8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a4fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a500:	43d2      	mvns	r2, r2
 801a502:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a506:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a508:	b2d2      	uxtb	r2, r2
 801a50a:	fb08 f707 	mul.w	r7, r8, r7
 801a50e:	fb01 770c 	mla	r7, r1, ip, r7
 801a512:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a516:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a518:	fb00 770c 	mla	r7, r0, ip, r7
 801a51c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a520:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a522:	fb09 770c 	mla	r7, r9, ip, r7
 801a526:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a52a:	fb08 f80c 	mul.w	r8, r8, ip
 801a52e:	0a3f      	lsrs	r7, r7, #8
 801a530:	fb01 8303 	mla	r3, r1, r3, r8
 801a534:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a536:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a53a:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a53e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a540:	fb00 330a 	mla	r3, r0, sl, r3
 801a544:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801a548:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a54c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a550:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a554:	fb03 f102 	mul.w	r1, r3, r2
 801a558:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a55c:	1c4b      	adds	r3, r1, #1
 801a55e:	ea47 070c 	orr.w	r7, r7, ip
 801a562:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a566:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801a56a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a56e:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801a572:	4353      	muls	r3, r2
 801a574:	1c59      	adds	r1, r3, #1
 801a576:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a57a:	0a3b      	lsrs	r3, r7, #8
 801a57c:	0c3f      	lsrs	r7, r7, #16
 801a57e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a582:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a586:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a58a:	435a      	muls	r2, r3
 801a58c:	1c53      	adds	r3, r2, #1
 801a58e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a592:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a596:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a59a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a59c:	f10e 0e03 	add.w	lr, lr, #3
 801a5a0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a5a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a5a6:	441a      	add	r2, r3
 801a5a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a5aa:	9225      	str	r2, [sp, #148]	; 0x94
 801a5ac:	441d      	add	r5, r3
 801a5ae:	e65a      	b.n	801a266 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801a5b0:	2800      	cmp	r0, #0
 801a5b2:	f43f aef7 	beq.w	801a3a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a5b6:	5c79      	ldrb	r1, [r7, r1]
 801a5b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a5bc:	9109      	str	r1, [sp, #36]	; 0x24
 801a5be:	0e09      	lsrs	r1, r1, #24
 801a5c0:	9111      	str	r1, [sp, #68]	; 0x44
 801a5c2:	e6ef      	b.n	801a3a4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a5c4:	b01b      	add	sp, #108	; 0x6c
 801a5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a5ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801a5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5ce:	b08d      	sub	sp, #52	; 0x34
 801a5d0:	468b      	mov	fp, r1
 801a5d2:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801a5d6:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801a5da:	fb0c 5703 	mla	r7, ip, r3, r5
 801a5de:	f1bc 0f00 	cmp.w	ip, #0
 801a5e2:	910b      	str	r1, [sp, #44]	; 0x2c
 801a5e4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a5e8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a5ec:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801a5f0:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801a5f4:	eb02 0607 	add.w	r6, r2, r7
 801a5f8:	f89b 4000 	ldrb.w	r4, [fp]
 801a5fc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801a600:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801a604:	f2c0 80c1 	blt.w	801a78a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801a608:	45e6      	cmp	lr, ip
 801a60a:	f340 80be 	ble.w	801a78a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801a60e:	2d00      	cmp	r5, #0
 801a610:	f2c0 80b7 	blt.w	801a782 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801a614:	42ab      	cmp	r3, r5
 801a616:	f340 80b4 	ble.w	801a782 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801a61a:	5dd2      	ldrb	r2, [r2, r7]
 801a61c:	9205      	str	r2, [sp, #20]
 801a61e:	7872      	ldrb	r2, [r6, #1]
 801a620:	9206      	str	r2, [sp, #24]
 801a622:	78b2      	ldrb	r2, [r6, #2]
 801a624:	9207      	str	r2, [sp, #28]
 801a626:	1c6a      	adds	r2, r5, #1
 801a628:	f100 80b6 	bmi.w	801a798 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a62c:	4293      	cmp	r3, r2
 801a62e:	f340 80b3 	ble.w	801a798 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a632:	f1b8 0f00 	cmp.w	r8, #0
 801a636:	f000 80af 	beq.w	801a798 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a63a:	78f2      	ldrb	r2, [r6, #3]
 801a63c:	9201      	str	r2, [sp, #4]
 801a63e:	7932      	ldrb	r2, [r6, #4]
 801a640:	9202      	str	r2, [sp, #8]
 801a642:	7972      	ldrb	r2, [r6, #5]
 801a644:	9203      	str	r2, [sp, #12]
 801a646:	f11c 0c01 	adds.w	ip, ip, #1
 801a64a:	f100 80ad 	bmi.w	801a7a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a64e:	45e6      	cmp	lr, ip
 801a650:	f340 80aa 	ble.w	801a7a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a654:	f1ba 0f00 	cmp.w	sl, #0
 801a658:	f000 80a6 	beq.w	801a7a8 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a65c:	2d00      	cmp	r5, #0
 801a65e:	f2c0 809f 	blt.w	801a7a0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801a662:	42ab      	cmp	r3, r5
 801a664:	f340 809c 	ble.w	801a7a0 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801a668:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a66c:	f816 9002 	ldrb.w	r9, [r6, r2]
 801a670:	2203      	movs	r2, #3
 801a672:	fb03 6c02 	mla	ip, r3, r2, r6
 801a676:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801a67a:	f89c e002 	ldrb.w	lr, [ip, #2]
 801a67e:	9704      	str	r7, [sp, #16]
 801a680:	3501      	adds	r5, #1
 801a682:	f100 8098 	bmi.w	801a7b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a686:	42ab      	cmp	r3, r5
 801a688:	f340 8095 	ble.w	801a7b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a68c:	f1b8 0f00 	cmp.w	r8, #0
 801a690:	f000 8091 	beq.w	801a7b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a694:	f04f 0c03 	mov.w	ip, #3
 801a698:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801a69c:	5cb5      	ldrb	r5, [r6, r2]
 801a69e:	fb03 620c 	mla	r2, r3, ip, r6
 801a6a2:	fb03 630c 	mla	r3, r3, ip, r6
 801a6a6:	7912      	ldrb	r2, [r2, #4]
 801a6a8:	795e      	ldrb	r6, [r3, #5]
 801a6aa:	fa1f f388 	uxth.w	r3, r8
 801a6ae:	fa1f fc8a 	uxth.w	ip, sl
 801a6b2:	fb03 f70c 	mul.w	r7, r3, ip
 801a6b6:	011b      	lsls	r3, r3, #4
 801a6b8:	9708      	str	r7, [sp, #32]
 801a6ba:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801a6be:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801a6c2:	1bdb      	subs	r3, r3, r7
 801a6c4:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801a6c8:	fa1f fc8c 	uxth.w	ip, ip
 801a6cc:	b29b      	uxth	r3, r3
 801a6ce:	9709      	str	r7, [sp, #36]	; 0x24
 801a6d0:	ebaa 0a0c 	sub.w	sl, sl, ip
 801a6d4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a6d6:	930a      	str	r3, [sp, #40]	; 0x28
 801a6d8:	fa1f fa8a 	uxth.w	sl, sl
 801a6dc:	ea6f 0807 	mvn.w	r8, r7
 801a6e0:	9f01      	ldr	r7, [sp, #4]
 801a6e2:	435f      	muls	r7, r3
 801a6e4:	9b05      	ldr	r3, [sp, #20]
 801a6e6:	fa5f f888 	uxtb.w	r8, r8
 801a6ea:	fb0a 7703 	mla	r7, sl, r3, r7
 801a6ee:	9b08      	ldr	r3, [sp, #32]
 801a6f0:	fb14 f408 	smulbb	r4, r4, r8
 801a6f4:	fb0c 7709 	mla	r7, ip, r9, r7
 801a6f8:	fb10 f008 	smulbb	r0, r0, r8
 801a6fc:	fb11 f108 	smulbb	r1, r1, r8
 801a700:	fb03 7705 	mla	r7, r3, r5, r7
 801a704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a706:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801a70a:	fb07 4703 	mla	r7, r7, r3, r4
 801a70e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a710:	b2bf      	uxth	r7, r7
 801a712:	1c7c      	adds	r4, r7, #1
 801a714:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801a718:	1224      	asrs	r4, r4, #8
 801a71a:	f88b 4000 	strb.w	r4, [fp]
 801a71e:	9c02      	ldr	r4, [sp, #8]
 801a720:	435c      	muls	r4, r3
 801a722:	9b06      	ldr	r3, [sp, #24]
 801a724:	fb0a 4403 	mla	r4, sl, r3, r4
 801a728:	9b04      	ldr	r3, [sp, #16]
 801a72a:	fb0c 4403 	mla	r4, ip, r3, r4
 801a72e:	9b08      	ldr	r3, [sp, #32]
 801a730:	fb03 4402 	mla	r4, r3, r2, r4
 801a734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a738:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a73c:	fb04 0403 	mla	r4, r4, r3, r0
 801a740:	9b03      	ldr	r3, [sp, #12]
 801a742:	435a      	muls	r2, r3
 801a744:	b2a4      	uxth	r4, r4
 801a746:	4613      	mov	r3, r2
 801a748:	9a07      	ldr	r2, [sp, #28]
 801a74a:	1c60      	adds	r0, r4, #1
 801a74c:	fb0a 3a02 	mla	sl, sl, r2, r3
 801a750:	9b08      	ldr	r3, [sp, #32]
 801a752:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801a756:	fb0c ac0e 	mla	ip, ip, lr, sl
 801a75a:	1224      	asrs	r4, r4, #8
 801a75c:	fb03 c606 	mla	r6, r3, r6, ip
 801a760:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a762:	f88b 4001 	strb.w	r4, [fp, #1]
 801a766:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a76a:	fb06 1103 	mla	r1, r6, r3, r1
 801a76e:	b289      	uxth	r1, r1
 801a770:	1c4e      	adds	r6, r1, #1
 801a772:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801a776:	1209      	asrs	r1, r1, #8
 801a778:	f88b 1002 	strb.w	r1, [fp, #2]
 801a77c:	b00d      	add	sp, #52	; 0x34
 801a77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a782:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a786:	9405      	str	r4, [sp, #20]
 801a788:	e74d      	b.n	801a626 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801a78a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a78e:	9401      	str	r4, [sp, #4]
 801a790:	9405      	str	r4, [sp, #20]
 801a792:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a796:	e756      	b.n	801a646 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801a798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a79c:	9401      	str	r4, [sp, #4]
 801a79e:	e752      	b.n	801a646 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801a7a0:	468e      	mov	lr, r1
 801a7a2:	9004      	str	r0, [sp, #16]
 801a7a4:	46a1      	mov	r9, r4
 801a7a6:	e76b      	b.n	801a680 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801a7a8:	460e      	mov	r6, r1
 801a7aa:	4602      	mov	r2, r0
 801a7ac:	4625      	mov	r5, r4
 801a7ae:	468e      	mov	lr, r1
 801a7b0:	9004      	str	r0, [sp, #16]
 801a7b2:	46a1      	mov	r9, r4
 801a7b4:	e779      	b.n	801a6aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801a7b6:	460e      	mov	r6, r1
 801a7b8:	4602      	mov	r2, r0
 801a7ba:	4625      	mov	r5, r4
 801a7bc:	e775      	b.n	801a6aa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801a7be <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a7be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7c2:	b09f      	sub	sp, #124	; 0x7c
 801a7c4:	920e      	str	r2, [sp, #56]	; 0x38
 801a7c6:	9307      	str	r3, [sp, #28]
 801a7c8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a7ca:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a7ce:	901d      	str	r0, [sp, #116]	; 0x74
 801a7d0:	930c      	str	r3, [sp, #48]	; 0x30
 801a7d2:	6850      	ldr	r0, [r2, #4]
 801a7d4:	910b      	str	r1, [sp, #44]	; 0x2c
 801a7d6:	6812      	ldr	r2, [r2, #0]
 801a7d8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a7dc:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801a7e0:	fb00 1303 	mla	r3, r0, r3, r1
 801a7e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a7e8:	18d3      	adds	r3, r2, r3
 801a7ea:	9308      	str	r3, [sp, #32]
 801a7ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	930a      	str	r3, [sp, #40]	; 0x28
 801a7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a7f4:	43db      	mvns	r3, r3
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	9309      	str	r3, [sp, #36]	; 0x24
 801a7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	dc03      	bgt.n	801a808 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a802:	2b00      	cmp	r3, #0
 801a804:	f340 81f5 	ble.w	801abf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801a808:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a80a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a80e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a812:	1e48      	subs	r0, r1, #1
 801a814:	1e54      	subs	r4, r2, #1
 801a816:	9b07      	ldr	r3, [sp, #28]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	f340 80d5 	ble.w	801a9c8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801a81e:	ea5f 452a 	movs.w	r5, sl, asr #16
 801a822:	ea4f 4328 	mov.w	r3, r8, asr #16
 801a826:	d406      	bmi.n	801a836 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a828:	4285      	cmp	r5, r0
 801a82a:	da04      	bge.n	801a836 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	db02      	blt.n	801a836 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a830:	42a3      	cmp	r3, r4
 801a832:	f2c0 80ca 	blt.w	801a9ca <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801a836:	3501      	adds	r5, #1
 801a838:	f100 80bb 	bmi.w	801a9b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a83c:	42a9      	cmp	r1, r5
 801a83e:	f2c0 80b8 	blt.w	801a9b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a842:	3301      	adds	r3, #1
 801a844:	f100 80b5 	bmi.w	801a9b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a848:	429a      	cmp	r2, r3
 801a84a:	f2c0 80b2 	blt.w	801a9b2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a84e:	9b07      	ldr	r3, [sp, #28]
 801a850:	9d08      	ldr	r5, [sp, #32]
 801a852:	930d      	str	r3, [sp, #52]	; 0x34
 801a854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a856:	2b00      	cmp	r3, #0
 801a858:	f340 80d6 	ble.w	801aa08 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801a85c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801a85e:	ea4f 4428 	mov.w	r4, r8, asr #16
 801a862:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a864:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801a868:	68c6      	ldr	r6, [r0, #12]
 801a86a:	ea5f 402a 	movs.w	r0, sl, asr #16
 801a86e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801a872:	689b      	ldr	r3, [r3, #8]
 801a874:	f100 810f 	bmi.w	801aa96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a878:	1e5f      	subs	r7, r3, #1
 801a87a:	42b8      	cmp	r0, r7
 801a87c:	f280 810b 	bge.w	801aa96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a880:	2c00      	cmp	r4, #0
 801a882:	f2c0 8108 	blt.w	801aa96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a886:	1e77      	subs	r7, r6, #1
 801a888:	42bc      	cmp	r4, r7
 801a88a:	f280 8104 	bge.w	801aa96 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a88e:	b21b      	sxth	r3, r3
 801a890:	fb04 0003 	mla	r0, r4, r3, r0
 801a894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a896:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a89a:	1826      	adds	r6, r4, r0
 801a89c:	5c24      	ldrb	r4, [r4, r0]
 801a89e:	78b7      	ldrb	r7, [r6, #2]
 801a8a0:	7870      	ldrb	r0, [r6, #1]
 801a8a2:	970f      	str	r7, [sp, #60]	; 0x3c
 801a8a4:	7977      	ldrb	r7, [r6, #5]
 801a8a6:	f896 e003 	ldrb.w	lr, [r6, #3]
 801a8aa:	f896 c004 	ldrb.w	ip, [r6, #4]
 801a8ae:	9710      	str	r7, [sp, #64]	; 0x40
 801a8b0:	b1c9      	cbz	r1, 801a8e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a8b2:	f04f 0b03 	mov.w	fp, #3
 801a8b6:	f06f 0904 	mvn.w	r9, #4
 801a8ba:	3605      	adds	r6, #5
 801a8bc:	fb13 930b 	smlabb	r3, r3, fp, r9
 801a8c0:	eb06 0b03 	add.w	fp, r6, r3
 801a8c4:	5cf3      	ldrb	r3, [r6, r3]
 801a8c6:	9311      	str	r3, [sp, #68]	; 0x44
 801a8c8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801a8cc:	9313      	str	r3, [sp, #76]	; 0x4c
 801a8ce:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a8d2:	9315      	str	r3, [sp, #84]	; 0x54
 801a8d4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801a8d8:	9312      	str	r3, [sp, #72]	; 0x48
 801a8da:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801a8de:	9314      	str	r3, [sp, #80]	; 0x50
 801a8e0:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801a8e4:	9316      	str	r3, [sp, #88]	; 0x58
 801a8e6:	b292      	uxth	r2, r2
 801a8e8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801a8ea:	b289      	uxth	r1, r1
 801a8ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a8f0:	fb02 f601 	mul.w	r6, r2, r1
 801a8f4:	0112      	lsls	r2, r2, #4
 801a8f6:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801a8fa:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801a8fe:	1b92      	subs	r2, r2, r6
 801a900:	b289      	uxth	r1, r1
 801a902:	b292      	uxth	r2, r2
 801a904:	eba9 0901 	sub.w	r9, r9, r1
 801a908:	fb02 fe0e 	mul.w	lr, r2, lr
 801a90c:	fa1f f989 	uxth.w	r9, r9
 801a910:	fb02 fc0c 	mul.w	ip, r2, ip
 801a914:	fb09 e404 	mla	r4, r9, r4, lr
 801a918:	f895 e000 	ldrb.w	lr, [r5]
 801a91c:	fb09 c000 	mla	r0, r9, r0, ip
 801a920:	fb01 4407 	mla	r4, r1, r7, r4
 801a924:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801a926:	fb06 4407 	mla	r4, r6, r7, r4
 801a92a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a92c:	fb1e fe07 	smulbb	lr, lr, r7
 801a930:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a934:	fb04 e403 	mla	r4, r4, r3, lr
 801a938:	b2a4      	uxth	r4, r4
 801a93a:	f104 0e01 	add.w	lr, r4, #1
 801a93e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801a942:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a944:	fb01 0004 	mla	r0, r1, r4, r0
 801a948:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a94a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a94e:	fb06 0004 	mla	r0, r6, r4, r0
 801a952:	786c      	ldrb	r4, [r5, #1]
 801a954:	f885 e000 	strb.w	lr, [r5]
 801a958:	fb14 f407 	smulbb	r4, r4, r7
 801a95c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a960:	fb00 4003 	mla	r0, r0, r3, r4
 801a964:	b280      	uxth	r0, r0
 801a966:	1c44      	adds	r4, r0, #1
 801a968:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801a96c:	1200      	asrs	r0, r0, #8
 801a96e:	7068      	strb	r0, [r5, #1]
 801a970:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a972:	4342      	muls	r2, r0
 801a974:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a976:	fb09 2200 	mla	r2, r9, r0, r2
 801a97a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a97c:	fb01 2100 	mla	r1, r1, r0, r2
 801a980:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a982:	fb06 1602 	mla	r6, r6, r2, r1
 801a986:	78a9      	ldrb	r1, [r5, #2]
 801a988:	fb11 f107 	smulbb	r1, r1, r7
 801a98c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a990:	fb06 1303 	mla	r3, r6, r3, r1
 801a994:	b29b      	uxth	r3, r3
 801a996:	1c5e      	adds	r6, r3, #1
 801a998:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801a99c:	121b      	asrs	r3, r3, #8
 801a99e:	70ab      	strb	r3, [r5, #2]
 801a9a0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a9a2:	3503      	adds	r5, #3
 801a9a4:	449a      	add	sl, r3
 801a9a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a9a8:	4498      	add	r8, r3
 801a9aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9ac:	3b01      	subs	r3, #1
 801a9ae:	930d      	str	r3, [sp, #52]	; 0x34
 801a9b0:	e750      	b.n	801a854 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a9b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a9b4:	449a      	add	sl, r3
 801a9b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a9b8:	4498      	add	r8, r3
 801a9ba:	9b07      	ldr	r3, [sp, #28]
 801a9bc:	3b01      	subs	r3, #1
 801a9be:	9307      	str	r3, [sp, #28]
 801a9c0:	9b08      	ldr	r3, [sp, #32]
 801a9c2:	3303      	adds	r3, #3
 801a9c4:	9308      	str	r3, [sp, #32]
 801a9c6:	e726      	b.n	801a816 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a9c8:	d026      	beq.n	801aa18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801a9ca:	9b07      	ldr	r3, [sp, #28]
 801a9cc:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a9ce:	3b01      	subs	r3, #1
 801a9d0:	fb00 a003 	mla	r0, r0, r3, sl
 801a9d4:	1400      	asrs	r0, r0, #16
 801a9d6:	f53f af3a 	bmi.w	801a84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a9da:	3901      	subs	r1, #1
 801a9dc:	4288      	cmp	r0, r1
 801a9de:	f6bf af36 	bge.w	801a84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a9e2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a9e4:	fb01 8303 	mla	r3, r1, r3, r8
 801a9e8:	141b      	asrs	r3, r3, #16
 801a9ea:	f53f af30 	bmi.w	801a84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a9ee:	3a01      	subs	r2, #1
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	f6bf af2c 	bge.w	801a84e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a9f6:	9b08      	ldr	r3, [sp, #32]
 801a9f8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a9fc:	1cdd      	adds	r5, r3, #3
 801a9fe:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801aa02:	f1bc 0f00 	cmp.w	ip, #0
 801aa06:	dc5f      	bgt.n	801aac8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801aa08:	9b07      	ldr	r3, [sp, #28]
 801aa0a:	9a08      	ldr	r2, [sp, #32]
 801aa0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aa10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa14:	441a      	add	r2, r3
 801aa16:	9208      	str	r2, [sp, #32]
 801aa18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	f340 80e9 	ble.w	801abf2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801aa20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801aa24:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aa26:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aa2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aa2e:	eef0 6a62 	vmov.f32	s13, s5
 801aa32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aa36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aa3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aa3e:	ee16 aa90 	vmov	sl, s13
 801aa42:	eef0 6a43 	vmov.f32	s13, s6
 801aa46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aa4a:	ee16 8a90 	vmov	r8, s13
 801aa4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa52:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa66:	ee12 2a90 	vmov	r2, s5
 801aa6a:	eef0 2a47 	vmov.f32	s5, s14
 801aa6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa72:	ee13 2a10 	vmov	r2, s6
 801aa76:	932b      	str	r3, [sp, #172]	; 0xac
 801aa78:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aa7a:	eeb0 3a67 	vmov.f32	s6, s15
 801aa7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa82:	932c      	str	r3, [sp, #176]	; 0xb0
 801aa84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aa88:	3b01      	subs	r3, #1
 801aa8a:	930b      	str	r3, [sp, #44]	; 0x2c
 801aa8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aa8e:	bf08      	it	eq
 801aa90:	4613      	moveq	r3, r2
 801aa92:	9307      	str	r3, [sp, #28]
 801aa94:	e6b1      	b.n	801a7fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801aa96:	1c47      	adds	r7, r0, #1
 801aa98:	d482      	bmi.n	801a9a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801aa9a:	42bb      	cmp	r3, r7
 801aa9c:	db80      	blt.n	801a9a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801aa9e:	1c67      	adds	r7, r4, #1
 801aaa0:	f53f af7e 	bmi.w	801a9a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801aaa4:	42be      	cmp	r6, r7
 801aaa6:	f6ff af7b 	blt.w	801a9a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801aaaa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801aaac:	b236      	sxth	r6, r6
 801aaae:	9001      	str	r0, [sp, #4]
 801aab0:	b21b      	sxth	r3, r3
 801aab2:	9600      	str	r6, [sp, #0]
 801aab4:	981d      	ldr	r0, [sp, #116]	; 0x74
 801aab6:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801aaba:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801aabe:	4629      	mov	r1, r5
 801aac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801aac2:	f7ff fd82 	bl	801a5ca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801aac6:	e76b      	b.n	801a9a0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801aac8:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801aaca:	ea4f 402a 	mov.w	r0, sl, asr #16
 801aace:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801aad2:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801aad6:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801aada:	ea4f 4128 	mov.w	r1, r8, asr #16
 801aade:	fb07 0101 	mla	r1, r7, r1, r0
 801aae2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801aae4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aae8:	1844      	adds	r4, r0, r1
 801aaea:	5c40      	ldrb	r0, [r0, r1]
 801aaec:	78a6      	ldrb	r6, [r4, #2]
 801aaee:	7861      	ldrb	r1, [r4, #1]
 801aaf0:	960f      	str	r6, [sp, #60]	; 0x3c
 801aaf2:	78e6      	ldrb	r6, [r4, #3]
 801aaf4:	910d      	str	r1, [sp, #52]	; 0x34
 801aaf6:	9610      	str	r6, [sp, #64]	; 0x40
 801aaf8:	f894 9004 	ldrb.w	r9, [r4, #4]
 801aafc:	f894 b005 	ldrb.w	fp, [r4, #5]
 801ab00:	b192      	cbz	r2, 801ab28 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801ab02:	f06f 0604 	mvn.w	r6, #4
 801ab06:	2103      	movs	r1, #3
 801ab08:	3405      	adds	r4, #5
 801ab0a:	fb17 6701 	smlabb	r7, r7, r1, r6
 801ab0e:	19e6      	adds	r6, r4, r7
 801ab10:	5de4      	ldrb	r4, [r4, r7]
 801ab12:	9417      	str	r4, [sp, #92]	; 0x5c
 801ab14:	7874      	ldrb	r4, [r6, #1]
 801ab16:	9419      	str	r4, [sp, #100]	; 0x64
 801ab18:	78b4      	ldrb	r4, [r6, #2]
 801ab1a:	941b      	str	r4, [sp, #108]	; 0x6c
 801ab1c:	78f4      	ldrb	r4, [r6, #3]
 801ab1e:	9418      	str	r4, [sp, #96]	; 0x60
 801ab20:	7934      	ldrb	r4, [r6, #4]
 801ab22:	941a      	str	r4, [sp, #104]	; 0x68
 801ab24:	7974      	ldrb	r4, [r6, #5]
 801ab26:	941c      	str	r4, [sp, #112]	; 0x70
 801ab28:	b29b      	uxth	r3, r3
 801ab2a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801ab2c:	b292      	uxth	r2, r2
 801ab2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ab30:	3503      	adds	r5, #3
 801ab32:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ab36:	fb03 f402 	mul.w	r4, r3, r2
 801ab3a:	011b      	lsls	r3, r3, #4
 801ab3c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801ab40:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801ab44:	1b1b      	subs	r3, r3, r4
 801ab46:	b292      	uxth	r2, r2
 801ab48:	b29b      	uxth	r3, r3
 801ab4a:	1ab6      	subs	r6, r6, r2
 801ab4c:	435f      	muls	r7, r3
 801ab4e:	b2b6      	uxth	r6, r6
 801ab50:	fb03 f909 	mul.w	r9, r3, r9
 801ab54:	fb03 fb0b 	mul.w	fp, r3, fp
 801ab58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ab5a:	fb06 7000 	mla	r0, r6, r0, r7
 801ab5e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801ab60:	fb06 bb03 	mla	fp, r6, r3, fp
 801ab64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ab66:	fb02 0007 	mla	r0, r2, r7, r0
 801ab6a:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801ab6c:	fb02 bb03 	mla	fp, r2, r3, fp
 801ab70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ab72:	fb04 0007 	mla	r0, r4, r7, r0
 801ab76:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801ab7a:	fb17 f701 	smulbb	r7, r7, r1
 801ab7e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ab82:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ab84:	fb00 700e 	mla	r0, r0, lr, r7
 801ab88:	fb06 9101 	mla	r1, r6, r1, r9
 801ab8c:	b280      	uxth	r0, r0
 801ab8e:	1c47      	adds	r7, r0, #1
 801ab90:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801ab94:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ab96:	1200      	asrs	r0, r0, #8
 801ab98:	f805 0c06 	strb.w	r0, [r5, #-6]
 801ab9c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ab9e:	fb02 1100 	mla	r1, r2, r0, r1
 801aba2:	981a      	ldr	r0, [sp, #104]	; 0x68
 801aba4:	fb04 1100 	mla	r1, r4, r0, r1
 801aba8:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801abac:	fb04 b403 	mla	r4, r4, r3, fp
 801abb0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801abb4:	fb10 f007 	smulbb	r0, r0, r7
 801abb8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801abbc:	fb13 f307 	smulbb	r3, r3, r7
 801abc0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801abc4:	fb01 010e 	mla	r1, r1, lr, r0
 801abc8:	fb04 340e 	mla	r4, r4, lr, r3
 801abcc:	b289      	uxth	r1, r1
 801abce:	b2a4      	uxth	r4, r4
 801abd0:	1c48      	adds	r0, r1, #1
 801abd2:	1c63      	adds	r3, r4, #1
 801abd4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801abd8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801abdc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801abde:	1209      	asrs	r1, r1, #8
 801abe0:	1224      	asrs	r4, r4, #8
 801abe2:	449a      	add	sl, r3
 801abe4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801abe6:	f805 1c05 	strb.w	r1, [r5, #-5]
 801abea:	f805 4c04 	strb.w	r4, [r5, #-4]
 801abee:	4498      	add	r8, r3
 801abf0:	e707      	b.n	801aa02 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801abf2:	b01f      	add	sp, #124	; 0x7c
 801abf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801abf8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801abf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abfc:	b087      	sub	sp, #28
 801abfe:	780d      	ldrb	r5, [r1, #0]
 801ac00:	784c      	ldrb	r4, [r1, #1]
 801ac02:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801ac06:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801ac0a:	9004      	str	r0, [sp, #16]
 801ac0c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801ac10:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801ac14:	9005      	str	r0, [sp, #20]
 801ac16:	fb06 bc03 	mla	ip, r6, r3, fp
 801ac1a:	2e00      	cmp	r6, #0
 801ac1c:	7888      	ldrb	r0, [r1, #2]
 801ac1e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ac22:	eb02 090c 	add.w	r9, r2, ip
 801ac26:	f2c0 8084 	blt.w	801ad32 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ac2a:	42b7      	cmp	r7, r6
 801ac2c:	f340 8081 	ble.w	801ad32 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801ac30:	f1bb 0f00 	cmp.w	fp, #0
 801ac34:	db79      	blt.n	801ad2a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ac36:	455b      	cmp	r3, fp
 801ac38:	dd77      	ble.n	801ad2a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801ac3a:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ac3e:	9201      	str	r2, [sp, #4]
 801ac40:	f899 2001 	ldrb.w	r2, [r9, #1]
 801ac44:	9202      	str	r2, [sp, #8]
 801ac46:	f899 2002 	ldrb.w	r2, [r9, #2]
 801ac4a:	9203      	str	r2, [sp, #12]
 801ac4c:	f11b 0201 	adds.w	r2, fp, #1
 801ac50:	d476      	bmi.n	801ad40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ac52:	4293      	cmp	r3, r2
 801ac54:	dd74      	ble.n	801ad40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ac56:	9a04      	ldr	r2, [sp, #16]
 801ac58:	2a00      	cmp	r2, #0
 801ac5a:	d071      	beq.n	801ad40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801ac5c:	f899 8003 	ldrb.w	r8, [r9, #3]
 801ac60:	f899 c004 	ldrb.w	ip, [r9, #4]
 801ac64:	f899 a005 	ldrb.w	sl, [r9, #5]
 801ac68:	3601      	adds	r6, #1
 801ac6a:	d471      	bmi.n	801ad50 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ac6c:	42b7      	cmp	r7, r6
 801ac6e:	dd6f      	ble.n	801ad50 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ac70:	9a05      	ldr	r2, [sp, #20]
 801ac72:	2a00      	cmp	r2, #0
 801ac74:	d06c      	beq.n	801ad50 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801ac76:	f1bb 0f00 	cmp.w	fp, #0
 801ac7a:	db65      	blt.n	801ad48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ac7c:	455b      	cmp	r3, fp
 801ac7e:	dd63      	ble.n	801ad48 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801ac80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ac84:	f819 e002 	ldrb.w	lr, [r9, r2]
 801ac88:	2203      	movs	r2, #3
 801ac8a:	fb03 9602 	mla	r6, r3, r2, r9
 801ac8e:	7877      	ldrb	r7, [r6, #1]
 801ac90:	78b6      	ldrb	r6, [r6, #2]
 801ac92:	f11b 0b01 	adds.w	fp, fp, #1
 801ac96:	d40c      	bmi.n	801acb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801ac98:	455b      	cmp	r3, fp
 801ac9a:	dd0a      	ble.n	801acb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801ac9c:	9a04      	ldr	r2, [sp, #16]
 801ac9e:	b142      	cbz	r2, 801acb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801aca0:	2203      	movs	r2, #3
 801aca2:	fb13 2002 	smlabb	r0, r3, r2, r2
 801aca6:	f819 5000 	ldrb.w	r5, [r9, r0]
 801acaa:	fb03 9002 	mla	r0, r3, r2, r9
 801acae:	7904      	ldrb	r4, [r0, #4]
 801acb0:	7940      	ldrb	r0, [r0, #5]
 801acb2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801acb6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801acba:	fb03 fb02 	mul.w	fp, r3, r2
 801acbe:	011b      	lsls	r3, r3, #4
 801acc0:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801acc4:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801acc8:	eba3 030b 	sub.w	r3, r3, fp
 801accc:	b292      	uxth	r2, r2
 801acce:	b29b      	uxth	r3, r3
 801acd0:	eba9 0902 	sub.w	r9, r9, r2
 801acd4:	9304      	str	r3, [sp, #16]
 801acd6:	fa1f f989 	uxth.w	r9, r9
 801acda:	fb03 f808 	mul.w	r8, r3, r8
 801acde:	9b01      	ldr	r3, [sp, #4]
 801ace0:	fb09 8803 	mla	r8, r9, r3, r8
 801ace4:	9b04      	ldr	r3, [sp, #16]
 801ace6:	fb03 fc0c 	mul.w	ip, r3, ip
 801acea:	9b02      	ldr	r3, [sp, #8]
 801acec:	fb02 880e 	mla	r8, r2, lr, r8
 801acf0:	fb09 cc03 	mla	ip, r9, r3, ip
 801acf4:	9b04      	ldr	r3, [sp, #16]
 801acf6:	fb0b 8805 	mla	r8, fp, r5, r8
 801acfa:	fb02 c707 	mla	r7, r2, r7, ip
 801acfe:	fb03 f30a 	mul.w	r3, r3, sl
 801ad02:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ad06:	fb0b 7404 	mla	r4, fp, r4, r7
 801ad0a:	f881 8000 	strb.w	r8, [r1]
 801ad0e:	1224      	asrs	r4, r4, #8
 801ad10:	704c      	strb	r4, [r1, #1]
 801ad12:	9c03      	ldr	r4, [sp, #12]
 801ad14:	fb09 3904 	mla	r9, r9, r4, r3
 801ad18:	fb02 9206 	mla	r2, r2, r6, r9
 801ad1c:	fb0b 2000 	mla	r0, fp, r0, r2
 801ad20:	1200      	asrs	r0, r0, #8
 801ad22:	7088      	strb	r0, [r1, #2]
 801ad24:	b007      	add	sp, #28
 801ad26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad2a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ad2e:	9501      	str	r5, [sp, #4]
 801ad30:	e78c      	b.n	801ac4c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801ad32:	4682      	mov	sl, r0
 801ad34:	46a4      	mov	ip, r4
 801ad36:	46a8      	mov	r8, r5
 801ad38:	9501      	str	r5, [sp, #4]
 801ad3a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ad3e:	e793      	b.n	801ac68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ad40:	4682      	mov	sl, r0
 801ad42:	46a4      	mov	ip, r4
 801ad44:	46a8      	mov	r8, r5
 801ad46:	e78f      	b.n	801ac68 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ad48:	4606      	mov	r6, r0
 801ad4a:	4627      	mov	r7, r4
 801ad4c:	46ae      	mov	lr, r5
 801ad4e:	e7a0      	b.n	801ac92 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801ad50:	4606      	mov	r6, r0
 801ad52:	4627      	mov	r7, r4
 801ad54:	46ae      	mov	lr, r5
 801ad56:	e7ac      	b.n	801acb2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801ad58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad5c:	b09b      	sub	sp, #108	; 0x6c
 801ad5e:	920b      	str	r2, [sp, #44]	; 0x2c
 801ad60:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801ad62:	9019      	str	r0, [sp, #100]	; 0x64
 801ad64:	9109      	str	r1, [sp, #36]	; 0x24
 801ad66:	6850      	ldr	r0, [r2, #4]
 801ad68:	9306      	str	r3, [sp, #24]
 801ad6a:	6812      	ldr	r2, [r2, #0]
 801ad6c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801ad70:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801ad74:	fb00 1303 	mla	r3, r0, r3, r1
 801ad78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad7c:	18d3      	adds	r3, r2, r3
 801ad7e:	9307      	str	r3, [sp, #28]
 801ad80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	9308      	str	r3, [sp, #32]
 801ad86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	dc03      	bgt.n	801ad94 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ad8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	f340 81ab 	ble.w	801b0ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ad94:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ad96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ad9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ad9e:	1e48      	subs	r0, r1, #1
 801ada0:	1e55      	subs	r5, r2, #1
 801ada2:	9b06      	ldr	r3, [sp, #24]
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	f340 80b1 	ble.w	801af0c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801adaa:	ea5f 462b 	movs.w	r6, fp, asr #16
 801adae:	ea4f 4324 	mov.w	r3, r4, asr #16
 801adb2:	d406      	bmi.n	801adc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801adb4:	4286      	cmp	r6, r0
 801adb6:	da04      	bge.n	801adc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801adb8:	2b00      	cmp	r3, #0
 801adba:	db02      	blt.n	801adc2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801adbc:	42ab      	cmp	r3, r5
 801adbe:	f2c0 80a6 	blt.w	801af0e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801adc2:	3601      	adds	r6, #1
 801adc4:	f100 8097 	bmi.w	801aef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801adc8:	42b1      	cmp	r1, r6
 801adca:	f2c0 8094 	blt.w	801aef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801adce:	3301      	adds	r3, #1
 801add0:	f100 8091 	bmi.w	801aef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801add4:	429a      	cmp	r2, r3
 801add6:	f2c0 808e 	blt.w	801aef6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801adda:	9b06      	ldr	r3, [sp, #24]
 801addc:	9e07      	ldr	r6, [sp, #28]
 801adde:	930a      	str	r3, [sp, #40]	; 0x28
 801ade0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	f340 80b0 	ble.w	801af48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ade8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801adea:	1425      	asrs	r5, r4, #16
 801adec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801adee:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801adf2:	68c7      	ldr	r7, [r0, #12]
 801adf4:	ea5f 402b 	movs.w	r0, fp, asr #16
 801adf8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801adfc:	689b      	ldr	r3, [r3, #8]
 801adfe:	f100 80ea 	bmi.w	801afd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ae02:	f103 3cff 	add.w	ip, r3, #4294967295
 801ae06:	4560      	cmp	r0, ip
 801ae08:	f280 80e5 	bge.w	801afd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ae0c:	2d00      	cmp	r5, #0
 801ae0e:	f2c0 80e2 	blt.w	801afd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ae12:	f107 3cff 	add.w	ip, r7, #4294967295
 801ae16:	4565      	cmp	r5, ip
 801ae18:	f280 80dd 	bge.w	801afd6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ae1c:	b21b      	sxth	r3, r3
 801ae1e:	fb05 0003 	mla	r0, r5, r3, r0
 801ae22:	9d08      	ldr	r5, [sp, #32]
 801ae24:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae28:	182f      	adds	r7, r5, r0
 801ae2a:	5c2d      	ldrb	r5, [r5, r0]
 801ae2c:	7878      	ldrb	r0, [r7, #1]
 801ae2e:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ae32:	900c      	str	r0, [sp, #48]	; 0x30
 801ae34:	f897 9003 	ldrb.w	r9, [r7, #3]
 801ae38:	f897 8004 	ldrb.w	r8, [r7, #4]
 801ae3c:	f897 a005 	ldrb.w	sl, [r7, #5]
 801ae40:	b1c9      	cbz	r1, 801ae76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ae42:	f04f 0c03 	mov.w	ip, #3
 801ae46:	f06f 0004 	mvn.w	r0, #4
 801ae4a:	3705      	adds	r7, #5
 801ae4c:	fb13 030c 	smlabb	r3, r3, ip, r0
 801ae50:	eb07 0c03 	add.w	ip, r7, r3
 801ae54:	5cfb      	ldrb	r3, [r7, r3]
 801ae56:	930d      	str	r3, [sp, #52]	; 0x34
 801ae58:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ae5c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ae5e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ae62:	9311      	str	r3, [sp, #68]	; 0x44
 801ae64:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ae68:	930e      	str	r3, [sp, #56]	; 0x38
 801ae6a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801ae6e:	9310      	str	r3, [sp, #64]	; 0x40
 801ae70:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801ae74:	9312      	str	r3, [sp, #72]	; 0x48
 801ae76:	b292      	uxth	r2, r2
 801ae78:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ae7a:	b289      	uxth	r1, r1
 801ae7c:	fb02 f301 	mul.w	r3, r2, r1
 801ae80:	0112      	lsls	r2, r2, #4
 801ae82:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ae86:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801ae8a:	1ad2      	subs	r2, r2, r3
 801ae8c:	b289      	uxth	r1, r1
 801ae8e:	b292      	uxth	r2, r2
 801ae90:	1a7f      	subs	r7, r7, r1
 801ae92:	fb02 f909 	mul.w	r9, r2, r9
 801ae96:	b2bf      	uxth	r7, r7
 801ae98:	fb02 f808 	mul.w	r8, r2, r8
 801ae9c:	fb02 fa0a 	mul.w	sl, r2, sl
 801aea0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801aea2:	fb07 9905 	mla	r9, r7, r5, r9
 801aea6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801aea8:	fb07 8800 	mla	r8, r7, r0, r8
 801aeac:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801aeae:	fb07 aa0e 	mla	sl, r7, lr, sl
 801aeb2:	fb01 9905 	mla	r9, r1, r5, r9
 801aeb6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801aeb8:	fb01 8800 	mla	r8, r1, r0, r8
 801aebc:	9810      	ldr	r0, [sp, #64]	; 0x40
 801aebe:	fb01 a102 	mla	r1, r1, r2, sl
 801aec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801aec4:	fb03 9905 	mla	r9, r3, r5, r9
 801aec8:	fb03 8800 	mla	r8, r3, r0, r8
 801aecc:	fb03 1302 	mla	r3, r3, r2, r1
 801aed0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801aed4:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aed8:	121b      	asrs	r3, r3, #8
 801aeda:	f886 9000 	strb.w	r9, [r6]
 801aede:	f886 8001 	strb.w	r8, [r6, #1]
 801aee2:	70b3      	strb	r3, [r6, #2]
 801aee4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aee6:	3603      	adds	r6, #3
 801aee8:	449b      	add	fp, r3
 801aeea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aeec:	441c      	add	r4, r3
 801aeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aef0:	3b01      	subs	r3, #1
 801aef2:	930a      	str	r3, [sp, #40]	; 0x28
 801aef4:	e774      	b.n	801ade0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801aef6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801aef8:	449b      	add	fp, r3
 801aefa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aefc:	441c      	add	r4, r3
 801aefe:	9b06      	ldr	r3, [sp, #24]
 801af00:	3b01      	subs	r3, #1
 801af02:	9306      	str	r3, [sp, #24]
 801af04:	9b07      	ldr	r3, [sp, #28]
 801af06:	3303      	adds	r3, #3
 801af08:	9307      	str	r3, [sp, #28]
 801af0a:	e74a      	b.n	801ada2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801af0c:	d024      	beq.n	801af58 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801af0e:	9b06      	ldr	r3, [sp, #24]
 801af10:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801af12:	3b01      	subs	r3, #1
 801af14:	fb00 b003 	mla	r0, r0, r3, fp
 801af18:	1400      	asrs	r0, r0, #16
 801af1a:	f53f af5e 	bmi.w	801adda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801af1e:	3901      	subs	r1, #1
 801af20:	4288      	cmp	r0, r1
 801af22:	f6bf af5a 	bge.w	801adda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801af26:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801af28:	fb01 4303 	mla	r3, r1, r3, r4
 801af2c:	141b      	asrs	r3, r3, #16
 801af2e:	f53f af54 	bmi.w	801adda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801af32:	3a01      	subs	r2, #1
 801af34:	4293      	cmp	r3, r2
 801af36:	f6bf af50 	bge.w	801adda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801af3a:	9b07      	ldr	r3, [sp, #28]
 801af3c:	f8dd e018 	ldr.w	lr, [sp, #24]
 801af40:	1cde      	adds	r6, r3, #3
 801af42:	f1be 0f00 	cmp.w	lr, #0
 801af46:	dc5f      	bgt.n	801b008 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af48:	9b06      	ldr	r3, [sp, #24]
 801af4a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801af4e:	9b07      	ldr	r3, [sp, #28]
 801af50:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801af54:	4423      	add	r3, r4
 801af56:	9307      	str	r3, [sp, #28]
 801af58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	f340 80c5 	ble.w	801b0ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801af60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801af64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801af66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af6e:	eef0 6a62 	vmov.f32	s13, s5
 801af72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801af76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801af7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af7e:	ee16 ba90 	vmov	fp, s13
 801af82:	eef0 6a43 	vmov.f32	s13, s6
 801af86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801af8a:	ee16 4a90 	vmov	r4, s13
 801af8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801af92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801af96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801af9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801af9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afa2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afa6:	ee12 2a90 	vmov	r2, s5
 801afaa:	eef0 2a47 	vmov.f32	s5, s14
 801afae:	fb92 f3f3 	sdiv	r3, r2, r3
 801afb2:	ee13 2a10 	vmov	r2, s6
 801afb6:	9327      	str	r3, [sp, #156]	; 0x9c
 801afb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801afba:	eeb0 3a67 	vmov.f32	s6, s15
 801afbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801afc2:	9328      	str	r3, [sp, #160]	; 0xa0
 801afc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801afc8:	3b01      	subs	r3, #1
 801afca:	9309      	str	r3, [sp, #36]	; 0x24
 801afcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801afce:	bf08      	it	eq
 801afd0:	4613      	moveq	r3, r2
 801afd2:	9306      	str	r3, [sp, #24]
 801afd4:	e6d7      	b.n	801ad86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801afd6:	f110 0c01 	adds.w	ip, r0, #1
 801afda:	d483      	bmi.n	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801afdc:	4563      	cmp	r3, ip
 801afde:	db81      	blt.n	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801afe0:	f115 0c01 	adds.w	ip, r5, #1
 801afe4:	f53f af7e 	bmi.w	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801afe8:	4567      	cmp	r7, ip
 801afea:	f6ff af7b 	blt.w	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801afee:	b23f      	sxth	r7, r7
 801aff0:	b21b      	sxth	r3, r3
 801aff2:	9700      	str	r7, [sp, #0]
 801aff4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801aff8:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801affc:	9a08      	ldr	r2, [sp, #32]
 801affe:	4631      	mov	r1, r6
 801b000:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b002:	f7ff fdf9 	bl	801abf8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b006:	e76d      	b.n	801aee4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b008:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b00a:	ea4f 402b 	mov.w	r0, fp, asr #16
 801b00e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b012:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b016:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801b01a:	1421      	asrs	r1, r4, #16
 801b01c:	930a      	str	r3, [sp, #40]	; 0x28
 801b01e:	fb0c 0101 	mla	r1, ip, r1, r0
 801b022:	9808      	ldr	r0, [sp, #32]
 801b024:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b028:	1845      	adds	r5, r0, r1
 801b02a:	5c40      	ldrb	r0, [r0, r1]
 801b02c:	796f      	ldrb	r7, [r5, #5]
 801b02e:	7869      	ldrb	r1, [r5, #1]
 801b030:	f895 8002 	ldrb.w	r8, [r5, #2]
 801b034:	f895 a003 	ldrb.w	sl, [r5, #3]
 801b038:	f895 9004 	ldrb.w	r9, [r5, #4]
 801b03c:	970c      	str	r7, [sp, #48]	; 0x30
 801b03e:	b1a2      	cbz	r2, 801b06a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801b040:	2703      	movs	r7, #3
 801b042:	f06f 0304 	mvn.w	r3, #4
 801b046:	3505      	adds	r5, #5
 801b048:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801b04c:	eb05 070c 	add.w	r7, r5, ip
 801b050:	f815 500c 	ldrb.w	r5, [r5, ip]
 801b054:	9513      	str	r5, [sp, #76]	; 0x4c
 801b056:	787d      	ldrb	r5, [r7, #1]
 801b058:	9515      	str	r5, [sp, #84]	; 0x54
 801b05a:	78bd      	ldrb	r5, [r7, #2]
 801b05c:	9517      	str	r5, [sp, #92]	; 0x5c
 801b05e:	78fd      	ldrb	r5, [r7, #3]
 801b060:	9514      	str	r5, [sp, #80]	; 0x50
 801b062:	793d      	ldrb	r5, [r7, #4]
 801b064:	9516      	str	r5, [sp, #88]	; 0x58
 801b066:	797d      	ldrb	r5, [r7, #5]
 801b068:	9518      	str	r5, [sp, #96]	; 0x60
 801b06a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b06e:	b292      	uxth	r2, r2
 801b070:	3603      	adds	r6, #3
 801b072:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b076:	fb03 f502 	mul.w	r5, r3, r2
 801b07a:	011b      	lsls	r3, r3, #4
 801b07c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801b080:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b084:	1b5b      	subs	r3, r3, r5
 801b086:	b292      	uxth	r2, r2
 801b088:	b29b      	uxth	r3, r3
 801b08a:	1abf      	subs	r7, r7, r2
 801b08c:	fb03 f909 	mul.w	r9, r3, r9
 801b090:	b2bf      	uxth	r7, r7
 801b092:	fb03 fa0a 	mul.w	sl, r3, sl
 801b096:	fb07 9901 	mla	r9, r7, r1, r9
 801b09a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b09c:	fb07 aa00 	mla	sl, r7, r0, sl
 801b0a0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b0a2:	fb02 9901 	mla	r9, r2, r1, r9
 801b0a6:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b0a8:	fb02 aa00 	mla	sl, r2, r0, sl
 801b0ac:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b0ae:	fb05 9901 	mla	r9, r5, r1, r9
 801b0b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b0b4:	fb05 aa00 	mla	sl, r5, r0, sl
 801b0b8:	434b      	muls	r3, r1
 801b0ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b0bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b0c0:	fb07 3308 	mla	r3, r7, r8, r3
 801b0c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b0c8:	f806 ac06 	strb.w	sl, [r6, #-6]
 801b0cc:	fb02 3201 	mla	r2, r2, r1, r3
 801b0d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b0d2:	f806 9c05 	strb.w	r9, [r6, #-5]
 801b0d6:	fb05 2503 	mla	r5, r5, r3, r2
 801b0da:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b0dc:	122d      	asrs	r5, r5, #8
 801b0de:	449b      	add	fp, r3
 801b0e0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0e2:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b0e6:	441c      	add	r4, r3
 801b0e8:	e72b      	b.n	801af42 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b0ea:	b01b      	add	sp, #108	; 0x6c
 801b0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f4:	b087      	sub	sp, #28
 801b0f6:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b0fa:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b0fe:	fb05 7003 	mla	r0, r5, r3, r7
 801b102:	2d00      	cmp	r5, #0
 801b104:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b108:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b10c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b110:	f2c0 811f 	blt.w	801b352 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b114:	45a8      	cmp	r8, r5
 801b116:	f340 811c 	ble.w	801b352 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b11a:	2f00      	cmp	r7, #0
 801b11c:	f2c0 8117 	blt.w	801b34e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b120:	42bb      	cmp	r3, r7
 801b122:	f340 8114 	ble.w	801b34e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b126:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b12a:	1c7a      	adds	r2, r7, #1
 801b12c:	f100 8114 	bmi.w	801b358 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b130:	4293      	cmp	r3, r2
 801b132:	f340 8111 	ble.w	801b358 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b136:	2c00      	cmp	r4, #0
 801b138:	f000 8110 	beq.w	801b35c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801b13c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b140:	3501      	adds	r5, #1
 801b142:	f100 810f 	bmi.w	801b364 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b146:	45a8      	cmp	r8, r5
 801b148:	f340 810c 	ble.w	801b364 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b14c:	f1be 0f00 	cmp.w	lr, #0
 801b150:	f000 810b 	beq.w	801b36a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801b154:	2f00      	cmp	r7, #0
 801b156:	f2c0 8103 	blt.w	801b360 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b15a:	42bb      	cmp	r3, r7
 801b15c:	f340 8100 	ble.w	801b360 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b160:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801b164:	3701      	adds	r7, #1
 801b166:	f100 8103 	bmi.w	801b370 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b16a:	42bb      	cmp	r3, r7
 801b16c:	f340 8100 	ble.w	801b370 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b170:	2c00      	cmp	r4, #0
 801b172:	f000 80ff 	beq.w	801b374 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801b176:	3301      	adds	r3, #1
 801b178:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b17c:	fa1f fc84 	uxth.w	ip, r4
 801b180:	fa1f fe8e 	uxth.w	lr, lr
 801b184:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b188:	fb0c f90e 	mul.w	r9, ip, lr
 801b18c:	0e13      	lsrs	r3, r2, #24
 801b18e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b192:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801b196:	9302      	str	r3, [sp, #8]
 801b198:	ebac 0709 	sub.w	r7, ip, r9
 801b19c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801b1a0:	fa1f f48e 	uxth.w	r4, lr
 801b1a4:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801b1a8:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b1ac:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801b1b0:	fb0a fe0e 	mul.w	lr, sl, lr
 801b1b4:	1b1b      	subs	r3, r3, r4
 801b1b6:	fb0a f606 	mul.w	r6, sl, r6
 801b1ba:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801b1be:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b1c2:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b1c6:	b29b      	uxth	r3, r3
 801b1c8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b1cc:	b2bf      	uxth	r7, r7
 801b1ce:	9301      	str	r3, [sp, #4]
 801b1d0:	44e6      	add	lr, ip
 801b1d2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b1d6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b1da:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b1de:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801b1e2:	9303      	str	r3, [sp, #12]
 801b1e4:	0a33      	lsrs	r3, r6, #8
 801b1e6:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801b1ea:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b1ee:	9304      	str	r3, [sp, #16]
 801b1f0:	fb0b f606 	mul.w	r6, fp, r6
 801b1f4:	fb0b f000 	mul.w	r0, fp, r0
 801b1f8:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801b1fc:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b200:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b204:	44b6      	add	lr, r6
 801b206:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801b20a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801b20e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801b212:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b216:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b21a:	fb08 f606 	mul.w	r6, r8, r6
 801b21e:	0a03      	lsrs	r3, r0, #8
 801b220:	fb08 f505 	mul.w	r5, r8, r5
 801b224:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b228:	0a30      	lsrs	r0, r6, #8
 801b22a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b22e:	9305      	str	r3, [sp, #20]
 801b230:	0e13      	lsrs	r3, r2, #24
 801b232:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b236:	fb0e fe07 	mul.w	lr, lr, r7
 801b23a:	4430      	add	r0, r6
 801b23c:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801b240:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b244:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801b248:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b24c:	0a00      	lsrs	r0, r0, #8
 801b24e:	435e      	muls	r6, r3
 801b250:	0a2d      	lsrs	r5, r5, #8
 801b252:	435a      	muls	r2, r3
 801b254:	9b03      	ldr	r3, [sp, #12]
 801b256:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b25a:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b25e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b262:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b266:	44b4      	add	ip, r6
 801b268:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801b26c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b270:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b274:	9e01      	ldr	r6, [sp, #4]
 801b276:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b27a:	fb03 ee06 	mla	lr, r3, r6, lr
 801b27e:	9b04      	ldr	r3, [sp, #16]
 801b280:	0a12      	lsrs	r2, r2, #8
 801b282:	fb0c ee09 	mla	lr, ip, r9, lr
 801b286:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801b28a:	9b05      	ldr	r3, [sp, #20]
 801b28c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b290:	fb00 ee04 	mla	lr, r0, r4, lr
 801b294:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b298:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801b29c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801b2a0:	9b01      	ldr	r3, [sp, #4]
 801b2a2:	fb07 fe0e 	mul.w	lr, r7, lr
 801b2a6:	fb07 f70b 	mul.w	r7, r7, fp
 801b2aa:	fb03 ee06 	mla	lr, r3, r6, lr
 801b2ae:	fb03 730a 	mla	r3, r3, sl, r7
 801b2b2:	fb09 e202 	mla	r2, r9, r2, lr
 801b2b6:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b2ba:	fb04 2e0e 	mla	lr, r4, lr, r2
 801b2be:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801b2c2:	fb04 3408 	mla	r4, r4, r8, r3
 801b2c6:	9b02      	ldr	r3, [sp, #8]
 801b2c8:	b292      	uxth	r2, r2
 801b2ca:	fb09 4903 	mla	r9, r9, r3, r4
 801b2ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b2d2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b2d6:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b2da:	fb09 f902 	mul.w	r9, r9, r2
 801b2de:	ea40 0e0e 	orr.w	lr, r0, lr
 801b2e2:	f109 0301 	add.w	r3, r9, #1
 801b2e6:	fa5f f08e 	uxtb.w	r0, lr
 801b2ea:	fb10 f002 	smulbb	r0, r0, r2
 801b2ee:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801b2f2:	780b      	ldrb	r3, [r1, #0]
 801b2f4:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801b2f8:	fa5f f989 	uxtb.w	r9, r9
 801b2fc:	fb03 0309 	mla	r3, r3, r9, r0
 801b300:	b29b      	uxth	r3, r3
 801b302:	1c58      	adds	r0, r3, #1
 801b304:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b308:	7848      	ldrb	r0, [r1, #1]
 801b30a:	fb10 f009 	smulbb	r0, r0, r9
 801b30e:	121b      	asrs	r3, r3, #8
 801b310:	700b      	strb	r3, [r1, #0]
 801b312:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801b316:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801b31a:	fb03 0302 	mla	r3, r3, r2, r0
 801b31e:	b29b      	uxth	r3, r3
 801b320:	1c58      	adds	r0, r3, #1
 801b322:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b326:	121b      	asrs	r3, r3, #8
 801b328:	704b      	strb	r3, [r1, #1]
 801b32a:	788b      	ldrb	r3, [r1, #2]
 801b32c:	fb13 f909 	smulbb	r9, r3, r9
 801b330:	fb0e 9e02 	mla	lr, lr, r2, r9
 801b334:	fa1f fe8e 	uxth.w	lr, lr
 801b338:	f10e 0301 	add.w	r3, lr, #1
 801b33c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801b340:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b344:	f881 e002 	strb.w	lr, [r1, #2]
 801b348:	b007      	add	sp, #28
 801b34a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b34e:	2600      	movs	r6, #0
 801b350:	e6eb      	b.n	801b12a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801b352:	2000      	movs	r0, #0
 801b354:	4606      	mov	r6, r0
 801b356:	e6f3      	b.n	801b140 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b358:	2000      	movs	r0, #0
 801b35a:	e6f1      	b.n	801b140 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b35c:	4620      	mov	r0, r4
 801b35e:	e6ef      	b.n	801b140 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801b360:	2500      	movs	r5, #0
 801b362:	e6ff      	b.n	801b164 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801b364:	2200      	movs	r2, #0
 801b366:	4615      	mov	r5, r2
 801b368:	e708      	b.n	801b17c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b36a:	4672      	mov	r2, lr
 801b36c:	4675      	mov	r5, lr
 801b36e:	e705      	b.n	801b17c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b370:	2200      	movs	r2, #0
 801b372:	e703      	b.n	801b17c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b374:	4622      	mov	r2, r4
 801b376:	e701      	b.n	801b17c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801b378 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b37c:	b09d      	sub	sp, #116	; 0x74
 801b37e:	9219      	str	r2, [sp, #100]	; 0x64
 801b380:	9307      	str	r3, [sp, #28]
 801b382:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b384:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801b388:	901b      	str	r0, [sp, #108]	; 0x6c
 801b38a:	931a      	str	r3, [sp, #104]	; 0x68
 801b38c:	6850      	ldr	r0, [r2, #4]
 801b38e:	9117      	str	r1, [sp, #92]	; 0x5c
 801b390:	6812      	ldr	r2, [r2, #0]
 801b392:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b396:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801b39a:	fb00 1303 	mla	r3, r0, r3, r1
 801b39e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b3a2:	18d3      	adds	r3, r2, r3
 801b3a4:	930a      	str	r3, [sp, #40]	; 0x28
 801b3a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	9310      	str	r3, [sp, #64]	; 0x40
 801b3ac:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801b3b0:	930b      	str	r3, [sp, #44]	; 0x2c
 801b3b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	dc03      	bgt.n	801b3c0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b3b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	f340 8368 	ble.w	801ba90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b3c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b3c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b3c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b3ca:	1e48      	subs	r0, r1, #1
 801b3cc:	1e57      	subs	r7, r2, #1
 801b3ce:	9b07      	ldr	r3, [sp, #28]
 801b3d0:	2b00      	cmp	r3, #0
 801b3d2:	f340 8187 	ble.w	801b6e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801b3d6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b3da:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b3de:	d406      	bmi.n	801b3ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3e0:	4584      	cmp	ip, r0
 801b3e2:	da04      	bge.n	801b3ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	db02      	blt.n	801b3ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b3e8:	42bb      	cmp	r3, r7
 801b3ea:	f2c0 817c 	blt.w	801b6e6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801b3ee:	f11c 0c01 	adds.w	ip, ip, #1
 801b3f2:	f100 816c 	bmi.w	801b6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b3f6:	4561      	cmp	r1, ip
 801b3f8:	f2c0 8169 	blt.w	801b6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b3fc:	3301      	adds	r3, #1
 801b3fe:	f100 8166 	bmi.w	801b6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b402:	429a      	cmp	r2, r3
 801b404:	f2c0 8163 	blt.w	801b6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b408:	9b07      	ldr	r3, [sp, #28]
 801b40a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b40c:	9318      	str	r3, [sp, #96]	; 0x60
 801b40e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b410:	2b00      	cmp	r3, #0
 801b412:	f340 8186 	ble.w	801b722 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801b416:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b418:	142a      	asrs	r2, r5, #16
 801b41a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801b41e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b422:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801b426:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801b42a:	f100 81cb 	bmi.w	801b7c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b42e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b432:	4542      	cmp	r2, r8
 801b434:	f280 81c6 	bge.w	801b7c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b438:	2800      	cmp	r0, #0
 801b43a:	f2c0 81c3 	blt.w	801b7c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b43e:	f103 38ff 	add.w	r8, r3, #4294967295
 801b442:	4540      	cmp	r0, r8
 801b444:	f280 81be 	bge.w	801b7c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b448:	fa0f f38e 	sxth.w	r3, lr
 801b44c:	fb00 2203 	mla	r2, r0, r3, r2
 801b450:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b452:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801b456:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801b45a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801b45e:	2900      	cmp	r1, #0
 801b460:	f000 81a6 	beq.w	801b7b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801b464:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b468:	900c      	str	r0, [sp, #48]	; 0x30
 801b46a:	0e00      	lsrs	r0, r0, #24
 801b46c:	9013      	str	r0, [sp, #76]	; 0x4c
 801b46e:	f1bc 0f00 	cmp.w	ip, #0
 801b472:	d00f      	beq.n	801b494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b474:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b478:	3b01      	subs	r3, #1
 801b47a:	009b      	lsls	r3, r3, #2
 801b47c:	3304      	adds	r3, #4
 801b47e:	eb08 0003 	add.w	r0, r8, r3
 801b482:	f858 3003 	ldr.w	r3, [r8, r3]
 801b486:	9308      	str	r3, [sp, #32]
 801b488:	0e1b      	lsrs	r3, r3, #24
 801b48a:	9311      	str	r3, [sp, #68]	; 0x44
 801b48c:	6843      	ldr	r3, [r0, #4]
 801b48e:	930d      	str	r3, [sp, #52]	; 0x34
 801b490:	0e1b      	lsrs	r3, r3, #24
 801b492:	9314      	str	r3, [sp, #80]	; 0x50
 801b494:	b289      	uxth	r1, r1
 801b496:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b498:	fa1f fc8c 	uxth.w	ip, ip
 801b49c:	0108      	lsls	r0, r1, #4
 801b49e:	fb01 f90c 	mul.w	r9, r1, ip
 801b4a2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801b4a6:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801b4aa:	eba0 0809 	sub.w	r8, r0, r9
 801b4ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b4b0:	fa1f f18c 	uxth.w	r1, ip
 801b4b4:	fa1f f888 	uxth.w	r8, r8
 801b4b8:	1a5b      	subs	r3, r3, r1
 801b4ba:	fb08 f000 	mul.w	r0, r8, r0
 801b4be:	b29b      	uxth	r3, r3
 801b4c0:	fb03 000e 	mla	r0, r3, lr, r0
 801b4c4:	fb01 0004 	mla	r0, r1, r4, r0
 801b4c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b4ca:	fb09 0004 	mla	r0, r9, r4, r0
 801b4ce:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b4d2:	2800      	cmp	r0, #0
 801b4d4:	f000 80f2 	beq.w	801b6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b4d8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b4dc:	d01b      	beq.n	801b516 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b4de:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801b4e2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b4e6:	fb0e fa0a 	mul.w	sl, lr, sl
 801b4ea:	fb0e fe02 	mul.w	lr, lr, r2
 801b4ee:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801b4f2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b4f6:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b4fa:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b4fe:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b502:	4452      	add	r2, sl
 801b504:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b508:	0a12      	lsrs	r2, r2, #8
 801b50a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b50e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b512:	ea42 020c 	orr.w	r2, r2, ip
 801b516:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b518:	2cff      	cmp	r4, #255	; 0xff
 801b51a:	d021      	beq.n	801b560 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b51c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b51e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b522:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b524:	fb04 fb0b 	mul.w	fp, r4, fp
 801b528:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b52a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b52e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b530:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b534:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b538:	fb04 fa0a 	mul.w	sl, r4, sl
 801b53c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b540:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b544:	44de      	add	lr, fp
 801b546:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b54a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b54e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b552:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b556:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b55a:	ea4e 040a 	orr.w	r4, lr, sl
 801b55e:	940c      	str	r4, [sp, #48]	; 0x30
 801b560:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b562:	2cff      	cmp	r4, #255	; 0xff
 801b564:	d021      	beq.n	801b5aa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b566:	9c08      	ldr	r4, [sp, #32]
 801b568:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b56c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b56e:	fb04 fb0b 	mul.w	fp, r4, fp
 801b572:	9c08      	ldr	r4, [sp, #32]
 801b574:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b578:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b57a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b57e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b582:	fb04 fa0a 	mul.w	sl, r4, sl
 801b586:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b58a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b58e:	44de      	add	lr, fp
 801b590:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b594:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b598:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b59c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b5a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b5a4:	ea4e 040a 	orr.w	r4, lr, sl
 801b5a8:	9408      	str	r4, [sp, #32]
 801b5aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b5ac:	2cff      	cmp	r4, #255	; 0xff
 801b5ae:	d021      	beq.n	801b5f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b5b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b5b2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b5b6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b5b8:	fb04 fb0b 	mul.w	fp, r4, fp
 801b5bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b5be:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b5c2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b5c4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b5c8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b5cc:	fb04 fa0a 	mul.w	sl, r4, sl
 801b5d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b5d4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b5d8:	44de      	add	lr, fp
 801b5da:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b5de:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b5e2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b5e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b5ea:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b5ee:	ea4e 040a 	orr.w	r4, lr, sl
 801b5f2:	940d      	str	r4, [sp, #52]	; 0x34
 801b5f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b5f6:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b5fa:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b5fe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b602:	9c08      	ldr	r4, [sp, #32]
 801b604:	fb08 fc0c 	mul.w	ip, r8, ip
 801b608:	fb03 cc0e 	mla	ip, r3, lr, ip
 801b60c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b610:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b612:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b616:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b61a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b61c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b620:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b624:	fb08 f80e 	mul.w	r8, r8, lr
 801b628:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b62c:	fb03 8202 	mla	r2, r3, r2, r8
 801b630:	9b08      	ldr	r3, [sp, #32]
 801b632:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b636:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801b63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b63c:	fb01 220a 	mla	r2, r1, sl, r2
 801b640:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801b644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b646:	fb09 2901 	mla	r9, r9, r1, r2
 801b64a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b64c:	4343      	muls	r3, r0
 801b64e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b652:	1c58      	adds	r0, r3, #1
 801b654:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b658:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b65c:	783b      	ldrb	r3, [r7, #0]
 801b65e:	ea4c 0c09 	orr.w	ip, ip, r9
 801b662:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b666:	fa5f f28c 	uxtb.w	r2, ip
 801b66a:	b2c0      	uxtb	r0, r0
 801b66c:	fb12 f201 	smulbb	r2, r2, r1
 801b670:	fb03 2300 	mla	r3, r3, r0, r2
 801b674:	b29b      	uxth	r3, r3
 801b676:	1c5a      	adds	r2, r3, #1
 801b678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b67c:	787a      	ldrb	r2, [r7, #1]
 801b67e:	fb12 f200 	smulbb	r2, r2, r0
 801b682:	121b      	asrs	r3, r3, #8
 801b684:	703b      	strb	r3, [r7, #0]
 801b686:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b68a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b68e:	fb03 2301 	mla	r3, r3, r1, r2
 801b692:	b29b      	uxth	r3, r3
 801b694:	1c5a      	adds	r2, r3, #1
 801b696:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b69a:	121b      	asrs	r3, r3, #8
 801b69c:	707b      	strb	r3, [r7, #1]
 801b69e:	78bb      	ldrb	r3, [r7, #2]
 801b6a0:	fb13 f000 	smulbb	r0, r3, r0
 801b6a4:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b6a8:	fa1f fc8c 	uxth.w	ip, ip
 801b6ac:	f10c 0301 	add.w	r3, ip, #1
 801b6b0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b6b4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b6b8:	f887 c002 	strb.w	ip, [r7, #2]
 801b6bc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b6be:	3703      	adds	r7, #3
 801b6c0:	441d      	add	r5, r3
 801b6c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b6c4:	441e      	add	r6, r3
 801b6c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b6c8:	3b01      	subs	r3, #1
 801b6ca:	9318      	str	r3, [sp, #96]	; 0x60
 801b6cc:	e69f      	b.n	801b40e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b6ce:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b6d0:	441d      	add	r5, r3
 801b6d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b6d4:	441e      	add	r6, r3
 801b6d6:	9b07      	ldr	r3, [sp, #28]
 801b6d8:	3b01      	subs	r3, #1
 801b6da:	9307      	str	r3, [sp, #28]
 801b6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b6de:	3303      	adds	r3, #3
 801b6e0:	930a      	str	r3, [sp, #40]	; 0x28
 801b6e2:	e674      	b.n	801b3ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b6e4:	d025      	beq.n	801b732 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801b6e6:	9b07      	ldr	r3, [sp, #28]
 801b6e8:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801b6ea:	3b01      	subs	r3, #1
 801b6ec:	fb00 5003 	mla	r0, r0, r3, r5
 801b6f0:	1400      	asrs	r0, r0, #16
 801b6f2:	f53f ae89 	bmi.w	801b408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6f6:	3901      	subs	r1, #1
 801b6f8:	4288      	cmp	r0, r1
 801b6fa:	f6bf ae85 	bge.w	801b408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b6fe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b700:	fb01 6303 	mla	r3, r1, r3, r6
 801b704:	141b      	asrs	r3, r3, #16
 801b706:	f53f ae7f 	bmi.w	801b408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b70a:	3a01      	subs	r2, #1
 801b70c:	4293      	cmp	r3, r2
 801b70e:	f6bf ae7b 	bge.w	801b408 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b714:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b718:	f103 0e03 	add.w	lr, r3, #3
 801b71c:	f1bb 0f00 	cmp.w	fp, #0
 801b720:	dc6e      	bgt.n	801b800 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801b722:	9b07      	ldr	r3, [sp, #28]
 801b724:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b72a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b72e:	4423      	add	r3, r4
 801b730:	930a      	str	r3, [sp, #40]	; 0x28
 801b732:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b734:	2b00      	cmp	r3, #0
 801b736:	f340 81ab 	ble.w	801ba90 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b73a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b73e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b740:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b744:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b748:	eef0 6a62 	vmov.f32	s13, s5
 801b74c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b750:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b754:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b758:	ee16 5a90 	vmov	r5, s13
 801b75c:	eef0 6a43 	vmov.f32	s13, s6
 801b760:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b764:	ee16 6a90 	vmov	r6, s13
 801b768:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b76c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b770:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b774:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b778:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b77c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b780:	ee12 2a90 	vmov	r2, s5
 801b784:	eef0 2a47 	vmov.f32	s5, s14
 801b788:	fb92 f3f3 	sdiv	r3, r2, r3
 801b78c:	ee13 2a10 	vmov	r2, s6
 801b790:	9329      	str	r3, [sp, #164]	; 0xa4
 801b792:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b794:	eeb0 3a67 	vmov.f32	s6, s15
 801b798:	fb92 f3f3 	sdiv	r3, r2, r3
 801b79c:	932a      	str	r3, [sp, #168]	; 0xa8
 801b79e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b7a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b7a2:	3b01      	subs	r3, #1
 801b7a4:	9317      	str	r3, [sp, #92]	; 0x5c
 801b7a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b7a8:	bf08      	it	eq
 801b7aa:	4613      	moveq	r3, r2
 801b7ac:	9307      	str	r3, [sp, #28]
 801b7ae:	e600      	b.n	801b3b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b7b0:	f1bc 0f00 	cmp.w	ip, #0
 801b7b4:	f43f ae6e 	beq.w	801b494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b7b8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b7bc:	9308      	str	r3, [sp, #32]
 801b7be:	0e1b      	lsrs	r3, r3, #24
 801b7c0:	9311      	str	r3, [sp, #68]	; 0x44
 801b7c2:	e667      	b.n	801b494 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b7c4:	f112 0801 	adds.w	r8, r2, #1
 801b7c8:	f53f af78 	bmi.w	801b6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b7cc:	45c6      	cmp	lr, r8
 801b7ce:	f6ff af75 	blt.w	801b6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b7d2:	f110 0801 	adds.w	r8, r0, #1
 801b7d6:	f53f af71 	bmi.w	801b6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b7da:	4543      	cmp	r3, r8
 801b7dc:	f6ff af6e 	blt.w	801b6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b7e0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b7e2:	b21b      	sxth	r3, r3
 801b7e4:	9201      	str	r2, [sp, #4]
 801b7e6:	9300      	str	r3, [sp, #0]
 801b7e8:	fa0f f38e 	sxth.w	r3, lr
 801b7ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b7ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b7f2:	e9cd c404 	strd	ip, r4, [sp, #16]
 801b7f6:	4639      	mov	r1, r7
 801b7f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b7fa:	f7ff fc79 	bl	801b0f0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801b7fe:	e75d      	b.n	801b6bc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b800:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b802:	142f      	asrs	r7, r5, #16
 801b804:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b806:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b80a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801b80e:	1433      	asrs	r3, r6, #16
 801b810:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b814:	fb02 7303 	mla	r3, r2, r3, r7
 801b818:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801b81c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b820:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b824:	2900      	cmp	r1, #0
 801b826:	f000 812a 	beq.w	801ba7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801b82a:	687c      	ldr	r4, [r7, #4]
 801b82c:	940e      	str	r4, [sp, #56]	; 0x38
 801b82e:	0e24      	lsrs	r4, r4, #24
 801b830:	9415      	str	r4, [sp, #84]	; 0x54
 801b832:	b178      	cbz	r0, 801b854 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b834:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801b838:	3a01      	subs	r2, #1
 801b83a:	0092      	lsls	r2, r2, #2
 801b83c:	3204      	adds	r2, #4
 801b83e:	eb07 0802 	add.w	r8, r7, r2
 801b842:	58ba      	ldr	r2, [r7, r2]
 801b844:	9209      	str	r2, [sp, #36]	; 0x24
 801b846:	0e12      	lsrs	r2, r2, #24
 801b848:	9212      	str	r2, [sp, #72]	; 0x48
 801b84a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b84e:	920f      	str	r2, [sp, #60]	; 0x3c
 801b850:	0e12      	lsrs	r2, r2, #24
 801b852:	9216      	str	r2, [sp, #88]	; 0x58
 801b854:	b289      	uxth	r1, r1
 801b856:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b858:	b280      	uxth	r0, r0
 801b85a:	fb01 f900 	mul.w	r9, r1, r0
 801b85e:	0109      	lsls	r1, r1, #4
 801b860:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b864:	eba1 0809 	sub.w	r8, r1, r9
 801b868:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801b86c:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b86e:	b280      	uxth	r0, r0
 801b870:	fa1f f888 	uxth.w	r8, r8
 801b874:	1a12      	subs	r2, r2, r0
 801b876:	fb08 f101 	mul.w	r1, r8, r1
 801b87a:	b292      	uxth	r2, r2
 801b87c:	fb02 110c 	mla	r1, r2, ip, r1
 801b880:	fb00 1104 	mla	r1, r0, r4, r1
 801b884:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b886:	fb09 1104 	mla	r1, r9, r4, r1
 801b88a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b88e:	2900      	cmp	r1, #0
 801b890:	f000 80ec 	beq.w	801ba6c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801b894:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b898:	d019      	beq.n	801b8ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801b89a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b89e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b8a2:	fb0c fa0a 	mul.w	sl, ip, sl
 801b8a6:	fb0c fc03 	mul.w	ip, ip, r3
 801b8aa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b8ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b8b2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801b8b6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b8ba:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b8be:	4453      	add	r3, sl
 801b8c0:	0a3f      	lsrs	r7, r7, #8
 801b8c2:	0a1b      	lsrs	r3, r3, #8
 801b8c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b8c8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b8cc:	433b      	orrs	r3, r7
 801b8ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b8d0:	2cff      	cmp	r4, #255	; 0xff
 801b8d2:	d020      	beq.n	801b916 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801b8d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b8d6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b8da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b8dc:	4367      	muls	r7, r4
 801b8de:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b8e0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b8e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b8e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b8ea:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b8ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b8f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801b8f6:	44bc      	add	ip, r7
 801b8f8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b8fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b900:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b904:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b908:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b90c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b910:	ea4c 040a 	orr.w	r4, ip, sl
 801b914:	940e      	str	r4, [sp, #56]	; 0x38
 801b916:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b918:	2cff      	cmp	r4, #255	; 0xff
 801b91a:	d020      	beq.n	801b95e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801b91c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b91e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b922:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b924:	4367      	muls	r7, r4
 801b926:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b928:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b92c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b930:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b932:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b936:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b93a:	fb04 fa0a 	mul.w	sl, r4, sl
 801b93e:	44bc      	add	ip, r7
 801b940:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b948:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b94c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b950:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b954:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b958:	ea4c 040a 	orr.w	r4, ip, sl
 801b95c:	9409      	str	r4, [sp, #36]	; 0x24
 801b95e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b960:	2cff      	cmp	r4, #255	; 0xff
 801b962:	d020      	beq.n	801b9a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801b964:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b966:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b96a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b96c:	4367      	muls	r7, r4
 801b96e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b970:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b974:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b978:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b97a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b97e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b982:	fb04 fa0a 	mul.w	sl, r4, sl
 801b986:	44bc      	add	ip, r7
 801b988:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b98c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b990:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b994:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b998:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b99c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b9a0:	ea4c 040a 	orr.w	r4, ip, sl
 801b9a4:	940f      	str	r4, [sp, #60]	; 0x3c
 801b9a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b9a8:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b9ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b9b0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b9b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b9b6:	fb08 f707 	mul.w	r7, r8, r7
 801b9ba:	fb02 770c 	mla	r7, r2, ip, r7
 801b9be:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b9c2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b9c4:	fb00 770c 	mla	r7, r0, ip, r7
 801b9c8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b9cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b9ce:	fb09 770c 	mla	r7, r9, ip, r7
 801b9d2:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801b9d6:	fb08 f80c 	mul.w	r8, r8, ip
 801b9da:	0a3f      	lsrs	r7, r7, #8
 801b9dc:	fb02 8303 	mla	r3, r2, r3, r8
 801b9e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9e2:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b9e6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801b9ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b9ec:	fb00 330a 	mla	r3, r0, sl, r3
 801b9f0:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b9f4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b9f6:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b9fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b9fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba00:	434b      	muls	r3, r1
 801ba02:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ba06:	1c59      	adds	r1, r3, #1
 801ba08:	ea47 070c 	orr.w	r7, r7, ip
 801ba0c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ba10:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ba14:	b2fa      	uxtb	r2, r7
 801ba16:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801ba1a:	fb12 f200 	smulbb	r2, r2, r0
 801ba1e:	b2c9      	uxtb	r1, r1
 801ba20:	fb03 2301 	mla	r3, r3, r1, r2
 801ba24:	b29b      	uxth	r3, r3
 801ba26:	1c5a      	adds	r2, r3, #1
 801ba28:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ba2c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801ba30:	fb12 f201 	smulbb	r2, r2, r1
 801ba34:	121b      	asrs	r3, r3, #8
 801ba36:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ba3a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ba3e:	0c3f      	lsrs	r7, r7, #16
 801ba40:	fb03 2300 	mla	r3, r3, r0, r2
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	1c5a      	adds	r2, r3, #1
 801ba48:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ba4c:	121b      	asrs	r3, r3, #8
 801ba4e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ba52:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ba56:	fb13 f101 	smulbb	r1, r3, r1
 801ba5a:	fb07 1700 	mla	r7, r7, r0, r1
 801ba5e:	b2bf      	uxth	r7, r7
 801ba60:	1c79      	adds	r1, r7, #1
 801ba62:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801ba66:	123f      	asrs	r7, r7, #8
 801ba68:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ba6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801ba6e:	f10e 0e03 	add.w	lr, lr, #3
 801ba72:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ba76:	441d      	add	r5, r3
 801ba78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba7a:	441e      	add	r6, r3
 801ba7c:	e64e      	b.n	801b71c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801ba7e:	2800      	cmp	r0, #0
 801ba80:	f43f aee8 	beq.w	801b854 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ba84:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801ba88:	9209      	str	r2, [sp, #36]	; 0x24
 801ba8a:	0e12      	lsrs	r2, r2, #24
 801ba8c:	9212      	str	r2, [sp, #72]	; 0x48
 801ba8e:	e6e1      	b.n	801b854 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ba90:	b01d      	add	sp, #116	; 0x74
 801ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba96 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801ba96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba9a:	b087      	sub	sp, #28
 801ba9c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801baa0:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801baa4:	fb05 7003 	mla	r0, r5, r3, r7
 801baa8:	2d00      	cmp	r5, #0
 801baaa:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801baae:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801bab2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801bab6:	f2c0 810a 	blt.w	801bcce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801baba:	45a8      	cmp	r8, r5
 801babc:	f340 8107 	ble.w	801bcce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801bac0:	2f00      	cmp	r7, #0
 801bac2:	f2c0 8102 	blt.w	801bcca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801bac6:	42bb      	cmp	r3, r7
 801bac8:	f340 80ff 	ble.w	801bcca <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801bacc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801bad0:	1c7a      	adds	r2, r7, #1
 801bad2:	f100 80ff 	bmi.w	801bcd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801bad6:	4293      	cmp	r3, r2
 801bad8:	f340 80fc 	ble.w	801bcd4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801badc:	2c00      	cmp	r4, #0
 801bade:	f000 80fb 	beq.w	801bcd8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801bae2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801bae6:	3501      	adds	r5, #1
 801bae8:	f100 80fa 	bmi.w	801bce0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801baec:	45a8      	cmp	r8, r5
 801baee:	f340 80f7 	ble.w	801bce0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801baf2:	f1be 0f00 	cmp.w	lr, #0
 801baf6:	f000 80f6 	beq.w	801bce6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801bafa:	2f00      	cmp	r7, #0
 801bafc:	f2c0 80ee 	blt.w	801bcdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801bb00:	42bb      	cmp	r3, r7
 801bb02:	f340 80eb 	ble.w	801bcdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801bb06:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801bb0a:	3701      	adds	r7, #1
 801bb0c:	f100 80ee 	bmi.w	801bcec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801bb10:	42bb      	cmp	r3, r7
 801bb12:	f340 80eb 	ble.w	801bcec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801bb16:	2c00      	cmp	r4, #0
 801bb18:	f000 80ea 	beq.w	801bcf0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801bb1c:	3301      	adds	r3, #1
 801bb1e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801bb22:	fa1f fc84 	uxth.w	ip, r4
 801bb26:	fa1f fe8e 	uxth.w	lr, lr
 801bb2a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801bb2e:	fb0c f90e 	mul.w	r9, ip, lr
 801bb32:	0e13      	lsrs	r3, r2, #24
 801bb34:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801bb38:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801bb3c:	9302      	str	r3, [sp, #8]
 801bb3e:	ebac 0709 	sub.w	r7, ip, r9
 801bb42:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801bb46:	fa1f f48e 	uxth.w	r4, lr
 801bb4a:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801bb4e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801bb52:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801bb56:	fb0a fe0e 	mul.w	lr, sl, lr
 801bb5a:	1b1b      	subs	r3, r3, r4
 801bb5c:	fb0a f606 	mul.w	r6, sl, r6
 801bb60:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801bb64:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801bb68:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801bb6c:	b29b      	uxth	r3, r3
 801bb6e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bb72:	b2bf      	uxth	r7, r7
 801bb74:	9301      	str	r3, [sp, #4]
 801bb76:	44e6      	add	lr, ip
 801bb78:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801bb7c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb80:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801bb84:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801bb88:	9303      	str	r3, [sp, #12]
 801bb8a:	0a33      	lsrs	r3, r6, #8
 801bb8c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801bb90:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801bb94:	9304      	str	r3, [sp, #16]
 801bb96:	fb0b f606 	mul.w	r6, fp, r6
 801bb9a:	fb0b f000 	mul.w	r0, fp, r0
 801bb9e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801bba2:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bba6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbaa:	44b6      	add	lr, r6
 801bbac:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801bbb0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801bbb4:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801bbb8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801bbbc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bbc0:	fb08 f606 	mul.w	r6, r8, r6
 801bbc4:	0a03      	lsrs	r3, r0, #8
 801bbc6:	fb08 f505 	mul.w	r5, r8, r5
 801bbca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbce:	0a30      	lsrs	r0, r6, #8
 801bbd0:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bbd4:	9305      	str	r3, [sp, #20]
 801bbd6:	0e13      	lsrs	r3, r2, #24
 801bbd8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bbdc:	fb0e fe07 	mul.w	lr, lr, r7
 801bbe0:	4430      	add	r0, r6
 801bbe2:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801bbe6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801bbea:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801bbee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bbf2:	0a00      	lsrs	r0, r0, #8
 801bbf4:	435e      	muls	r6, r3
 801bbf6:	0a2d      	lsrs	r5, r5, #8
 801bbf8:	435a      	muls	r2, r3
 801bbfa:	9b03      	ldr	r3, [sp, #12]
 801bbfc:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801bc00:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801bc04:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801bc08:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc0c:	44b4      	add	ip, r6
 801bc0e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801bc12:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc16:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801bc1a:	9e01      	ldr	r6, [sp, #4]
 801bc1c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc20:	fb03 ee06 	mla	lr, r3, r6, lr
 801bc24:	9b04      	ldr	r3, [sp, #16]
 801bc26:	0a12      	lsrs	r2, r2, #8
 801bc28:	fb0c ee09 	mla	lr, ip, r9, lr
 801bc2c:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801bc30:	9b05      	ldr	r3, [sp, #20]
 801bc32:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bc36:	fb00 ee04 	mla	lr, r0, r4, lr
 801bc3a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bc3e:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801bc42:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801bc46:	9b01      	ldr	r3, [sp, #4]
 801bc48:	fb07 fe0e 	mul.w	lr, r7, lr
 801bc4c:	fb07 f70b 	mul.w	r7, r7, fp
 801bc50:	fb03 ee06 	mla	lr, r3, r6, lr
 801bc54:	fb03 730a 	mla	r3, r3, sl, r7
 801bc58:	fb09 e202 	mla	r2, r9, r2, lr
 801bc5c:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801bc60:	fb04 2e0e 	mla	lr, r4, lr, r2
 801bc64:	fb04 3408 	mla	r4, r4, r8, r3
 801bc68:	9b02      	ldr	r3, [sp, #8]
 801bc6a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bc6e:	fb09 4903 	mla	r9, r9, r3, r4
 801bc72:	780b      	ldrb	r3, [r1, #0]
 801bc74:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bc78:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801bc7c:	ea40 0e0e 	orr.w	lr, r0, lr
 801bc80:	fa5f f989 	uxtb.w	r9, r9
 801bc84:	fb03 f209 	mul.w	r2, r3, r9
 801bc88:	1c53      	adds	r3, r2, #1
 801bc8a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bc8e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801bc92:	700b      	strb	r3, [r1, #0]
 801bc94:	784b      	ldrb	r3, [r1, #1]
 801bc96:	fb03 f309 	mul.w	r3, r3, r9
 801bc9a:	1c5a      	adds	r2, r3, #1
 801bc9c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801bca0:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801bca4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801bca8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801bcac:	704b      	strb	r3, [r1, #1]
 801bcae:	788b      	ldrb	r3, [r1, #2]
 801bcb0:	fb03 f909 	mul.w	r9, r3, r9
 801bcb4:	f109 0301 	add.w	r3, r9, #1
 801bcb8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801bcbc:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801bcc0:	f881 e002 	strb.w	lr, [r1, #2]
 801bcc4:	b007      	add	sp, #28
 801bcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcca:	2600      	movs	r6, #0
 801bccc:	e700      	b.n	801bad0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801bcce:	2000      	movs	r0, #0
 801bcd0:	4606      	mov	r6, r0
 801bcd2:	e708      	b.n	801bae6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801bcd4:	2000      	movs	r0, #0
 801bcd6:	e706      	b.n	801bae6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801bcd8:	4620      	mov	r0, r4
 801bcda:	e704      	b.n	801bae6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801bcdc:	2500      	movs	r5, #0
 801bcde:	e714      	b.n	801bb0a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801bce0:	2200      	movs	r2, #0
 801bce2:	4615      	mov	r5, r2
 801bce4:	e71d      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bce6:	4672      	mov	r2, lr
 801bce8:	4675      	mov	r5, lr
 801bcea:	e71a      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bcec:	2200      	movs	r2, #0
 801bcee:	e718      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801bcf0:	4622      	mov	r2, r4
 801bcf2:	e716      	b.n	801bb22 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801bcf4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bcf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcf8:	b099      	sub	sp, #100	; 0x64
 801bcfa:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801bcfe:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801bd00:	9017      	str	r0, [sp, #92]	; 0x5c
 801bd02:	9306      	str	r3, [sp, #24]
 801bd04:	6850      	ldr	r0, [r2, #4]
 801bd06:	6812      	ldr	r2, [r2, #0]
 801bd08:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801bd0c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801bd10:	fb00 1303 	mla	r3, r0, r3, r1
 801bd14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bd18:	18d3      	adds	r3, r2, r3
 801bd1a:	9309      	str	r3, [sp, #36]	; 0x24
 801bd1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	930e      	str	r3, [sp, #56]	; 0x38
 801bd22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	dc03      	bgt.n	801bd30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bd28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801bd2a:	2b00      	cmp	r3, #0
 801bd2c:	f340 8360 	ble.w	801c3f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801bd30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bd32:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bd36:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bd3a:	1e48      	subs	r0, r1, #1
 801bd3c:	1e57      	subs	r7, r2, #1
 801bd3e:	9b06      	ldr	r3, [sp, #24]
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	f340 817b 	ble.w	801c03c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801bd46:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801bd4a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801bd4e:	d406      	bmi.n	801bd5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bd50:	4584      	cmp	ip, r0
 801bd52:	da04      	bge.n	801bd5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	db02      	blt.n	801bd5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801bd58:	42bb      	cmp	r3, r7
 801bd5a:	f2c0 8170 	blt.w	801c03e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801bd5e:	f11c 0c01 	adds.w	ip, ip, #1
 801bd62:	f100 8160 	bmi.w	801c026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bd66:	4561      	cmp	r1, ip
 801bd68:	f2c0 815d 	blt.w	801c026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bd6c:	3301      	adds	r3, #1
 801bd6e:	f100 815a 	bmi.w	801c026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bd72:	429a      	cmp	r2, r3
 801bd74:	f2c0 8157 	blt.w	801c026 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bd78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801bd7c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801bd7e:	f1b8 0f00 	cmp.w	r8, #0
 801bd82:	f340 8179 	ble.w	801c078 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801bd86:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801bd88:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801bd8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bd8e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bd92:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801bd96:	142a      	asrs	r2, r5, #16
 801bd98:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801bd9c:	689b      	ldr	r3, [r3, #8]
 801bd9e:	f100 81be 	bmi.w	801c11e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bda2:	f103 39ff 	add.w	r9, r3, #4294967295
 801bda6:	454a      	cmp	r2, r9
 801bda8:	f280 81b9 	bge.w	801c11e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bdac:	f1bc 0f00 	cmp.w	ip, #0
 801bdb0:	f2c0 81b5 	blt.w	801c11e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bdb4:	f10e 39ff 	add.w	r9, lr, #4294967295
 801bdb8:	45cc      	cmp	ip, r9
 801bdba:	f280 81b0 	bge.w	801c11e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bdbe:	b21b      	sxth	r3, r3
 801bdc0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bdc2:	fb0c 2203 	mla	r2, ip, r3, r2
 801bdc6:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801bdca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bdce:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bdd2:	2900      	cmp	r1, #0
 801bdd4:	f000 8197 	beq.w	801c106 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801bdd8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801bddc:	940a      	str	r4, [sp, #40]	; 0x28
 801bdde:	0e24      	lsrs	r4, r4, #24
 801bde0:	9411      	str	r4, [sp, #68]	; 0x44
 801bde2:	b180      	cbz	r0, 801be06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801bde4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bde8:	3b01      	subs	r3, #1
 801bdea:	009b      	lsls	r3, r3, #2
 801bdec:	3304      	adds	r3, #4
 801bdee:	eb09 0c03 	add.w	ip, r9, r3
 801bdf2:	f859 3003 	ldr.w	r3, [r9, r3]
 801bdf6:	9307      	str	r3, [sp, #28]
 801bdf8:	0e1b      	lsrs	r3, r3, #24
 801bdfa:	930f      	str	r3, [sp, #60]	; 0x3c
 801bdfc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801be00:	930b      	str	r3, [sp, #44]	; 0x2c
 801be02:	0e1b      	lsrs	r3, r3, #24
 801be04:	9312      	str	r3, [sp, #72]	; 0x48
 801be06:	b289      	uxth	r1, r1
 801be08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be0a:	b280      	uxth	r0, r0
 801be0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801be0e:	fb01 fa00 	mul.w	sl, r1, r0
 801be12:	0109      	lsls	r1, r1, #4
 801be14:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801be18:	eba1 090a 	sub.w	r9, r1, sl
 801be1c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801be20:	b280      	uxth	r0, r0
 801be22:	fa1f f989 	uxth.w	r9, r9
 801be26:	1a09      	subs	r1, r1, r0
 801be28:	fb09 f303 	mul.w	r3, r9, r3
 801be2c:	b289      	uxth	r1, r1
 801be2e:	fb01 330e 	mla	r3, r1, lr, r3
 801be32:	fb00 3304 	mla	r3, r0, r4, r3
 801be36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801be38:	fb0a 3304 	mla	r3, sl, r4, r3
 801be3c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801be40:	2b00      	cmp	r3, #0
 801be42:	f000 80e8 	beq.w	801c016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801be46:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801be4a:	d01b      	beq.n	801be84 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801be4c:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801be50:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801be54:	fb0e fb0b 	mul.w	fp, lr, fp
 801be58:	fb0e fe02 	mul.w	lr, lr, r2
 801be5c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801be60:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801be64:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801be68:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801be6c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801be70:	445a      	add	r2, fp
 801be72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801be76:	0a12      	lsrs	r2, r2, #8
 801be78:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801be7c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801be80:	ea42 020c 	orr.w	r2, r2, ip
 801be84:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801be86:	2cff      	cmp	r4, #255	; 0xff
 801be88:	d021      	beq.n	801bece <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801be8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801be8c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801be90:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801be92:	fb04 fc0c 	mul.w	ip, r4, ip
 801be96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801be98:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801be9c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bea0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bea2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bea6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801beaa:	fb04 fb0b 	mul.w	fp, r4, fp
 801beae:	44e6      	add	lr, ip
 801beb0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801beb4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801beb8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bebc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bec0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bec4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bec8:	ea4e 040b 	orr.w	r4, lr, fp
 801becc:	940a      	str	r4, [sp, #40]	; 0x28
 801bece:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bed0:	2cff      	cmp	r4, #255	; 0xff
 801bed2:	d021      	beq.n	801bf18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801bed4:	9c07      	ldr	r4, [sp, #28]
 801bed6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801beda:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bedc:	fb04 fc0c 	mul.w	ip, r4, ip
 801bee0:	9c07      	ldr	r4, [sp, #28]
 801bee2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bee6:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801beea:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801beec:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bef0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bef4:	fb04 fb0b 	mul.w	fp, r4, fp
 801bef8:	44e6      	add	lr, ip
 801befa:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801befe:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf02:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bf06:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf0a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bf0e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bf12:	ea4e 040b 	orr.w	r4, lr, fp
 801bf16:	9407      	str	r4, [sp, #28]
 801bf18:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf1a:	2cff      	cmp	r4, #255	; 0xff
 801bf1c:	d021      	beq.n	801bf62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801bf1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bf20:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bf24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf26:	fb04 fc0c 	mul.w	ip, r4, ip
 801bf2a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bf2c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bf30:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bf34:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf36:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bf3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf3e:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf42:	44e6      	add	lr, ip
 801bf44:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801bf48:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf4c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bf50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf54:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bf58:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bf5c:	ea4e 040b 	orr.w	r4, lr, fp
 801bf60:	940b      	str	r4, [sp, #44]	; 0x2c
 801bf62:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bf64:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801bf68:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bf6c:	2bff      	cmp	r3, #255	; 0xff
 801bf6e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bf72:	9c07      	ldr	r4, [sp, #28]
 801bf74:	fb09 fc0c 	mul.w	ip, r9, ip
 801bf78:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bf7c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bf80:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bf82:	fb00 cc0e 	mla	ip, r0, lr, ip
 801bf86:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bf8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bf8c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801bf90:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bf94:	fb09 f90e 	mul.w	r9, r9, lr
 801bf98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf9c:	fb01 9202 	mla	r2, r1, r2, r9
 801bfa0:	9907      	ldr	r1, [sp, #28]
 801bfa2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bfa6:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801bfaa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bfac:	fb00 220b 	mla	r2, r0, fp, r2
 801bfb0:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801bfb4:	fb0a 2a00 	mla	sl, sl, r0, r2
 801bfb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bfbc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bfc0:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bfc4:	fa5f f08c 	uxtb.w	r0, ip
 801bfc8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801bfcc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bfd0:	f000 80a2 	beq.w	801c118 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801bfd4:	43db      	mvns	r3, r3
 801bfd6:	783a      	ldrb	r2, [r7, #0]
 801bfd8:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bfdc:	b2db      	uxtb	r3, r3
 801bfde:	fb02 fe03 	mul.w	lr, r2, r3
 801bfe2:	fb0a fa03 	mul.w	sl, sl, r3
 801bfe6:	f10e 0201 	add.w	r2, lr, #1
 801bfea:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801bfee:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bff2:	703a      	strb	r2, [r7, #0]
 801bff4:	787a      	ldrb	r2, [r7, #1]
 801bff6:	fb02 f003 	mul.w	r0, r2, r3
 801bffa:	f10a 0301 	add.w	r3, sl, #1
 801bffe:	1c42      	adds	r2, r0, #1
 801c000:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c004:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c008:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c00c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c010:	707a      	strb	r2, [r7, #1]
 801c012:	f887 c002 	strb.w	ip, [r7, #2]
 801c016:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c018:	3703      	adds	r7, #3
 801c01a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c01e:	441d      	add	r5, r3
 801c020:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c022:	441e      	add	r6, r3
 801c024:	e6ab      	b.n	801bd7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c026:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c028:	441d      	add	r5, r3
 801c02a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c02c:	441e      	add	r6, r3
 801c02e:	9b06      	ldr	r3, [sp, #24]
 801c030:	3b01      	subs	r3, #1
 801c032:	9306      	str	r3, [sp, #24]
 801c034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c036:	3303      	adds	r3, #3
 801c038:	9309      	str	r3, [sp, #36]	; 0x24
 801c03a:	e680      	b.n	801bd3e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c03c:	d024      	beq.n	801c088 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801c03e:	9b06      	ldr	r3, [sp, #24]
 801c040:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c042:	3b01      	subs	r3, #1
 801c044:	fb00 5003 	mla	r0, r0, r3, r5
 801c048:	1400      	asrs	r0, r0, #16
 801c04a:	f53f ae95 	bmi.w	801bd78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c04e:	3901      	subs	r1, #1
 801c050:	4288      	cmp	r0, r1
 801c052:	f6bf ae91 	bge.w	801bd78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c056:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c058:	fb01 6303 	mla	r3, r1, r3, r6
 801c05c:	141b      	asrs	r3, r3, #16
 801c05e:	f53f ae8b 	bmi.w	801bd78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c062:	3a01      	subs	r2, #1
 801c064:	4293      	cmp	r3, r2
 801c066:	f6bf ae87 	bge.w	801bd78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c06c:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c070:	1cdf      	adds	r7, r3, #3
 801c072:	f1bb 0f00 	cmp.w	fp, #0
 801c076:	dc6e      	bgt.n	801c156 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801c078:	9b06      	ldr	r3, [sp, #24]
 801c07a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c084:	4423      	add	r3, r4
 801c086:	9309      	str	r3, [sp, #36]	; 0x24
 801c088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	f340 81b0 	ble.w	801c3f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c090:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c094:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c096:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c09a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c09e:	eef0 6a62 	vmov.f32	s13, s5
 801c0a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c0a6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0ae:	ee16 5a90 	vmov	r5, s13
 801c0b2:	eef0 6a43 	vmov.f32	s13, s6
 801c0b6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c0ba:	ee16 6a90 	vmov	r6, s13
 801c0be:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c0c2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c0c6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c0ca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c0ce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c0d2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c0d6:	ee12 2a90 	vmov	r2, s5
 801c0da:	eef0 2a47 	vmov.f32	s5, s14
 801c0de:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0e2:	ee13 2a10 	vmov	r2, s6
 801c0e6:	9325      	str	r3, [sp, #148]	; 0x94
 801c0e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c0ea:	eeb0 3a67 	vmov.f32	s6, s15
 801c0ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801c0f2:	9326      	str	r3, [sp, #152]	; 0x98
 801c0f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c0f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c0f8:	3b01      	subs	r3, #1
 801c0fa:	9315      	str	r3, [sp, #84]	; 0x54
 801c0fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c0fe:	bf08      	it	eq
 801c100:	4613      	moveq	r3, r2
 801c102:	9306      	str	r3, [sp, #24]
 801c104:	e60d      	b.n	801bd22 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c106:	2800      	cmp	r0, #0
 801c108:	f43f ae7d 	beq.w	801be06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c10c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c110:	9307      	str	r3, [sp, #28]
 801c112:	0e1b      	lsrs	r3, r3, #24
 801c114:	930f      	str	r3, [sp, #60]	; 0x3c
 801c116:	e676      	b.n	801be06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c118:	7038      	strb	r0, [r7, #0]
 801c11a:	7079      	strb	r1, [r7, #1]
 801c11c:	e779      	b.n	801c012 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c11e:	f112 0901 	adds.w	r9, r2, #1
 801c122:	f53f af78 	bmi.w	801c016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c126:	454b      	cmp	r3, r9
 801c128:	f6ff af75 	blt.w	801c016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c12c:	f11c 0901 	adds.w	r9, ip, #1
 801c130:	f53f af71 	bmi.w	801c016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c134:	45ce      	cmp	lr, r9
 801c136:	f6ff af6e 	blt.w	801c016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c13a:	b21b      	sxth	r3, r3
 801c13c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801c140:	fa0f f28e 	sxth.w	r2, lr
 801c144:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801c148:	9200      	str	r2, [sp, #0]
 801c14a:	4639      	mov	r1, r7
 801c14c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c14e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c150:	f7ff fca1 	bl	801ba96 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801c154:	e75f      	b.n	801c016 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c156:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c158:	1429      	asrs	r1, r5, #16
 801c15a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c15c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c160:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801c164:	1433      	asrs	r3, r6, #16
 801c166:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c16a:	fb0c 1303 	mla	r3, ip, r3, r1
 801c16e:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c170:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c174:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c178:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c17c:	2a00      	cmp	r2, #0
 801c17e:	f000 8129 	beq.w	801c3d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801c182:	684c      	ldr	r4, [r1, #4]
 801c184:	940c      	str	r4, [sp, #48]	; 0x30
 801c186:	0e24      	lsrs	r4, r4, #24
 801c188:	9413      	str	r4, [sp, #76]	; 0x4c
 801c18a:	b198      	cbz	r0, 801c1b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c18c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801c190:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c194:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801c198:	f10c 0c04 	add.w	ip, ip, #4
 801c19c:	eb01 080c 	add.w	r8, r1, ip
 801c1a0:	f851 100c 	ldr.w	r1, [r1, ip]
 801c1a4:	9108      	str	r1, [sp, #32]
 801c1a6:	0e09      	lsrs	r1, r1, #24
 801c1a8:	9110      	str	r1, [sp, #64]	; 0x40
 801c1aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c1ae:	910d      	str	r1, [sp, #52]	; 0x34
 801c1b0:	0e09      	lsrs	r1, r1, #24
 801c1b2:	9114      	str	r1, [sp, #80]	; 0x50
 801c1b4:	b292      	uxth	r2, r2
 801c1b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c1b8:	b280      	uxth	r0, r0
 801c1ba:	fb02 f900 	mul.w	r9, r2, r0
 801c1be:	0112      	lsls	r2, r2, #4
 801c1c0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c1c4:	eba2 0809 	sub.w	r8, r2, r9
 801c1c8:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c1cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c1ce:	b280      	uxth	r0, r0
 801c1d0:	fa1f f888 	uxth.w	r8, r8
 801c1d4:	1a09      	subs	r1, r1, r0
 801c1d6:	fb08 f202 	mul.w	r2, r8, r2
 801c1da:	b289      	uxth	r1, r1
 801c1dc:	fb01 220e 	mla	r2, r1, lr, r2
 801c1e0:	fb00 2204 	mla	r2, r0, r4, r2
 801c1e4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c1e6:	fb09 2204 	mla	r2, r9, r4, r2
 801c1ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c1ee:	2a00      	cmp	r2, #0
 801c1f0:	f000 80e8 	beq.w	801c3c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801c1f4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c1f8:	d01b      	beq.n	801c232 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801c1fa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c1fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c202:	fb0e fa0a 	mul.w	sl, lr, sl
 801c206:	fb0e fe03 	mul.w	lr, lr, r3
 801c20a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c20e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c212:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c216:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c21a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c21e:	4453      	add	r3, sl
 801c220:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c224:	0a1b      	lsrs	r3, r3, #8
 801c226:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c22a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c22e:	ea43 030c 	orr.w	r3, r3, ip
 801c232:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c234:	2cff      	cmp	r4, #255	; 0xff
 801c236:	d021      	beq.n	801c27c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801c238:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c23a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c23e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c240:	fb04 fc0c 	mul.w	ip, r4, ip
 801c244:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c246:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c24a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c24e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c250:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c254:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c258:	fb04 fa0a 	mul.w	sl, r4, sl
 801c25c:	44e6      	add	lr, ip
 801c25e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c262:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c266:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c26a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c26e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c272:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c276:	ea4e 040a 	orr.w	r4, lr, sl
 801c27a:	940c      	str	r4, [sp, #48]	; 0x30
 801c27c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c27e:	2cff      	cmp	r4, #255	; 0xff
 801c280:	d021      	beq.n	801c2c6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801c282:	9c08      	ldr	r4, [sp, #32]
 801c284:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c288:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c28a:	fb04 fc0c 	mul.w	ip, r4, ip
 801c28e:	9c08      	ldr	r4, [sp, #32]
 801c290:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c294:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c296:	fb04 fa0e 	mul.w	sl, r4, lr
 801c29a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c29e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c2a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2a6:	44e6      	add	lr, ip
 801c2a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c2ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c2b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c2b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c2c0:	ea4e 040a 	orr.w	r4, lr, sl
 801c2c4:	9408      	str	r4, [sp, #32]
 801c2c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c2c8:	2cff      	cmp	r4, #255	; 0xff
 801c2ca:	d021      	beq.n	801c310 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801c2cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c2ce:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c2d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c2d4:	fb04 fc0c 	mul.w	ip, r4, ip
 801c2d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c2da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c2de:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c2e2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c2e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c2e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c2ec:	fb04 fa0a 	mul.w	sl, r4, sl
 801c2f0:	44e6      	add	lr, ip
 801c2f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c2f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c2fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c302:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c306:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c30a:	ea4e 040a 	orr.w	r4, lr, sl
 801c30e:	940d      	str	r4, [sp, #52]	; 0x34
 801c310:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c312:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c316:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c31a:	2aff      	cmp	r2, #255	; 0xff
 801c31c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c320:	9c08      	ldr	r4, [sp, #32]
 801c322:	fb08 fc0c 	mul.w	ip, r8, ip
 801c326:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c32a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c32e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c330:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c334:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c338:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c33a:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c33e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c342:	fb08 f80e 	mul.w	r8, r8, lr
 801c346:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c34a:	fb01 8303 	mla	r3, r1, r3, r8
 801c34e:	9908      	ldr	r1, [sp, #32]
 801c350:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c354:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801c358:	990d      	ldr	r1, [sp, #52]	; 0x34
 801c35a:	fb00 330a 	mla	r3, r0, sl, r3
 801c35e:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801c362:	fb09 3e0e 	mla	lr, r9, lr, r3
 801c366:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c36a:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c36e:	ea4c 0c0e 	orr.w	ip, ip, lr
 801c372:	fa5f f08c 	uxtb.w	r0, ip
 801c376:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c37a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c37e:	d032      	beq.n	801c3e6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801c380:	43d2      	mvns	r2, r2
 801c382:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801c386:	b2d2      	uxtb	r2, r2
 801c388:	fb0e fe02 	mul.w	lr, lr, r2
 801c38c:	f10e 0301 	add.w	r3, lr, #1
 801c390:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801c394:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c398:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801c39c:	4350      	muls	r0, r2
 801c39e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801c3a2:	1c43      	adds	r3, r0, #1
 801c3a4:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c3a8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c3ac:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801c3b0:	4353      	muls	r3, r2
 801c3b2:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c3b6:	1c5a      	adds	r2, r3, #1
 801c3b8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c3bc:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801c3c0:	f807 cc01 	strb.w	ip, [r7, #-1]
 801c3c4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c3c6:	3703      	adds	r7, #3
 801c3c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c3cc:	441d      	add	r5, r3
 801c3ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c3d0:	441e      	add	r6, r3
 801c3d2:	e64e      	b.n	801c072 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801c3d4:	2800      	cmp	r0, #0
 801c3d6:	f43f aeed 	beq.w	801c1b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c3da:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801c3de:	9108      	str	r1, [sp, #32]
 801c3e0:	0e09      	lsrs	r1, r1, #24
 801c3e2:	9110      	str	r1, [sp, #64]	; 0x40
 801c3e4:	e6e6      	b.n	801c1b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c3e6:	f807 0c03 	strb.w	r0, [r7, #-3]
 801c3ea:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c3ee:	e7e7      	b.n	801c3c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801c3f0:	b019      	add	sp, #100	; 0x64
 801c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c3f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3fc:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801c400:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c404:	2c00      	cmp	r4, #0
 801c406:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c40a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c40e:	fb00 4e03 	mla	lr, r0, r3, r4
 801c412:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801c416:	f2c0 80b8 	blt.w	801c58a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c41a:	45a1      	cmp	r9, r4
 801c41c:	f340 80b5 	ble.w	801c58a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c420:	2800      	cmp	r0, #0
 801c422:	f2c0 80b2 	blt.w	801c58a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c426:	4580      	cmp	r8, r0
 801c428:	f340 80af 	ble.w	801c58a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c42c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801c430:	f01e 0f01 	tst.w	lr, #1
 801c434:	5d56      	ldrb	r6, [r2, r5]
 801c436:	bf0c      	ite	eq
 801c438:	f006 060f 	andeq.w	r6, r6, #15
 801c43c:	1136      	asrne	r6, r6, #4
 801c43e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c442:	b2f6      	uxtb	r6, r6
 801c444:	f114 0a01 	adds.w	sl, r4, #1
 801c448:	f100 80a1 	bmi.w	801c58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c44c:	45d1      	cmp	r9, sl
 801c44e:	f340 809e 	ble.w	801c58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c452:	2800      	cmp	r0, #0
 801c454:	f2c0 809b 	blt.w	801c58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c458:	4580      	cmp	r8, r0
 801c45a:	f340 8098 	ble.w	801c58e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c45e:	2f00      	cmp	r7, #0
 801c460:	f000 8097 	beq.w	801c592 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801c464:	f10e 0b01 	add.w	fp, lr, #1
 801c468:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801c46c:	f01b 0f01 	tst.w	fp, #1
 801c470:	5d55      	ldrb	r5, [r2, r5]
 801c472:	bf0c      	ite	eq
 801c474:	f005 050f 	andeq.w	r5, r5, #15
 801c478:	112d      	asrne	r5, r5, #4
 801c47a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801c47e:	b2ed      	uxtb	r5, r5
 801c480:	f1bc 0f00 	cmp.w	ip, #0
 801c484:	f000 8089 	beq.w	801c59a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801c488:	2c00      	cmp	r4, #0
 801c48a:	f100 0001 	add.w	r0, r0, #1
 801c48e:	f2c0 8082 	blt.w	801c596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c492:	45a1      	cmp	r9, r4
 801c494:	dd7f      	ble.n	801c596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c496:	2800      	cmp	r0, #0
 801c498:	db7d      	blt.n	801c596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c49a:	4580      	cmp	r8, r0
 801c49c:	dd7b      	ble.n	801c596 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c49e:	eb03 0b0e 	add.w	fp, r3, lr
 801c4a2:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801c4a6:	f01b 0f01 	tst.w	fp, #1
 801c4aa:	5d14      	ldrb	r4, [r2, r4]
 801c4ac:	bf0c      	ite	eq
 801c4ae:	f004 040f 	andeq.w	r4, r4, #15
 801c4b2:	1124      	asrne	r4, r4, #4
 801c4b4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c4b8:	b2e4      	uxtb	r4, r4
 801c4ba:	f1ba 0f00 	cmp.w	sl, #0
 801c4be:	db6f      	blt.n	801c5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c4c0:	45d1      	cmp	r9, sl
 801c4c2:	dd6d      	ble.n	801c5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c4c4:	2800      	cmp	r0, #0
 801c4c6:	db6b      	blt.n	801c5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c4c8:	4580      	cmp	r8, r0
 801c4ca:	dd69      	ble.n	801c5a0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c4cc:	2f00      	cmp	r7, #0
 801c4ce:	d069      	beq.n	801c5a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801c4d0:	3301      	adds	r3, #1
 801c4d2:	449e      	add	lr, r3
 801c4d4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c4d8:	f01e 0f01 	tst.w	lr, #1
 801c4dc:	5cd0      	ldrb	r0, [r2, r3]
 801c4de:	bf0c      	ite	eq
 801c4e0:	f000 000f 	andeq.w	r0, r0, #15
 801c4e4:	1100      	asrne	r0, r0, #4
 801c4e6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c4ea:	b2c3      	uxtb	r3, r0
 801c4ec:	b2ba      	uxth	r2, r7
 801c4ee:	fa1f fc8c 	uxth.w	ip, ip
 801c4f2:	fb02 f00c 	mul.w	r0, r2, ip
 801c4f6:	0112      	lsls	r2, r2, #4
 801c4f8:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801c4fc:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801c500:	1a12      	subs	r2, r2, r0
 801c502:	fa1f fc8c 	uxth.w	ip, ip
 801c506:	b292      	uxth	r2, r2
 801c508:	eba7 070c 	sub.w	r7, r7, ip
 801c50c:	436a      	muls	r2, r5
 801c50e:	b2bf      	uxth	r7, r7
 801c510:	fb06 2207 	mla	r2, r6, r7, r2
 801c514:	fb0c 2404 	mla	r4, ip, r4, r2
 801c518:	fb00 4303 	mla	r3, r0, r3, r4
 801c51c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c520:	b38b      	cbz	r3, 801c586 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801c522:	4a21      	ldr	r2, [pc, #132]	; (801c5a8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801c524:	6814      	ldr	r4, [r2, #0]
 801c526:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801c52a:	b2e5      	uxtb	r5, r4
 801c52c:	4353      	muls	r3, r2
 801c52e:	1c5a      	adds	r2, r3, #1
 801c530:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c534:	1212      	asrs	r2, r2, #8
 801c536:	b290      	uxth	r0, r2
 801c538:	43d2      	mvns	r2, r2
 801c53a:	fb15 f500 	smulbb	r5, r5, r0
 801c53e:	b2d3      	uxtb	r3, r2
 801c540:	780a      	ldrb	r2, [r1, #0]
 801c542:	fb02 5203 	mla	r2, r2, r3, r5
 801c546:	b292      	uxth	r2, r2
 801c548:	1c55      	adds	r5, r2, #1
 801c54a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c54e:	784d      	ldrb	r5, [r1, #1]
 801c550:	fb15 f503 	smulbb	r5, r5, r3
 801c554:	1212      	asrs	r2, r2, #8
 801c556:	700a      	strb	r2, [r1, #0]
 801c558:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801c55c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801c560:	fb02 5200 	mla	r2, r2, r0, r5
 801c564:	b292      	uxth	r2, r2
 801c566:	1c55      	adds	r5, r2, #1
 801c568:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c56c:	1212      	asrs	r2, r2, #8
 801c56e:	704a      	strb	r2, [r1, #1]
 801c570:	788a      	ldrb	r2, [r1, #2]
 801c572:	fb12 f303 	smulbb	r3, r2, r3
 801c576:	fb04 3300 	mla	r3, r4, r0, r3
 801c57a:	b29b      	uxth	r3, r3
 801c57c:	1c5a      	adds	r2, r3, #1
 801c57e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c582:	121b      	asrs	r3, r3, #8
 801c584:	708b      	strb	r3, [r1, #2]
 801c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c58a:	2600      	movs	r6, #0
 801c58c:	e75a      	b.n	801c444 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801c58e:	2500      	movs	r5, #0
 801c590:	e776      	b.n	801c480 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801c592:	463d      	mov	r5, r7
 801c594:	e774      	b.n	801c480 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801c596:	2400      	movs	r4, #0
 801c598:	e78f      	b.n	801c4ba <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801c59a:	4663      	mov	r3, ip
 801c59c:	4664      	mov	r4, ip
 801c59e:	e7a5      	b.n	801c4ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c5a0:	2300      	movs	r3, #0
 801c5a2:	e7a3      	b.n	801c4ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c5a4:	463b      	mov	r3, r7
 801c5a6:	e7a1      	b.n	801c4ec <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c5a8:	2401aa80 	.word	0x2401aa80

0801c5ac <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c5b0:	b097      	sub	sp, #92	; 0x5c
 801c5b2:	9214      	str	r2, [sp, #80]	; 0x50
 801c5b4:	9309      	str	r3, [sp, #36]	; 0x24
 801c5b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c5b8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801c5bc:	9015      	str	r0, [sp, #84]	; 0x54
 801c5be:	910c      	str	r1, [sp, #48]	; 0x30
 801c5c0:	6850      	ldr	r0, [r2, #4]
 801c5c2:	930e      	str	r3, [sp, #56]	; 0x38
 801c5c4:	6812      	ldr	r2, [r2, #0]
 801c5c6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801c5ca:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801c5ce:	fb00 1303 	mla	r3, r0, r3, r1
 801c5d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c5d6:	eb02 0a03 	add.w	sl, r2, r3
 801c5da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c5dc:	689b      	ldr	r3, [r3, #8]
 801c5de:	3301      	adds	r3, #1
 801c5e0:	f023 0301 	bic.w	r3, r3, #1
 801c5e4:	930f      	str	r3, [sp, #60]	; 0x3c
 801c5e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c5e8:	681f      	ldr	r7, [r3, #0]
 801c5ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c5ec:	2b00      	cmp	r3, #0
 801c5ee:	dc03      	bgt.n	801c5f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c5f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	f340 8247 	ble.w	801ca86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801c5f8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c5fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c5fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c602:	1e48      	subs	r0, r1, #1
 801c604:	f102 3cff 	add.w	ip, r2, #4294967295
 801c608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c60a:	2b00      	cmp	r3, #0
 801c60c:	f340 80e5 	ble.w	801c7da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801c610:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801c614:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c618:	d406      	bmi.n	801c628 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c61a:	4586      	cmp	lr, r0
 801c61c:	da04      	bge.n	801c628 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c61e:	2b00      	cmp	r3, #0
 801c620:	db02      	blt.n	801c628 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c622:	4563      	cmp	r3, ip
 801c624:	f2c0 80da 	blt.w	801c7dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801c628:	f11e 0e01 	adds.w	lr, lr, #1
 801c62c:	f100 80cb 	bmi.w	801c7c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c630:	4571      	cmp	r1, lr
 801c632:	f2c0 80c8 	blt.w	801c7c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c636:	3301      	adds	r3, #1
 801c638:	f100 80c5 	bmi.w	801c7c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c63c:	429a      	cmp	r2, r3
 801c63e:	f2c0 80c2 	blt.w	801c7c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c644:	46d0      	mov	r8, sl
 801c646:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c64a:	930d      	str	r3, [sp, #52]	; 0x34
 801c64c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c64e:	2b00      	cmp	r3, #0
 801c650:	f340 80e3 	ble.w	801c81a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801c654:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c656:	1430      	asrs	r0, r6, #16
 801c658:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c65c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c660:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801c664:	142b      	asrs	r3, r5, #16
 801c666:	f100 812e 	bmi.w	801c8c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c66a:	f10c 3bff 	add.w	fp, ip, #4294967295
 801c66e:	455b      	cmp	r3, fp
 801c670:	f280 8129 	bge.w	801c8c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c674:	2800      	cmp	r0, #0
 801c676:	f2c0 8126 	blt.w	801c8c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c67a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801c67e:	4558      	cmp	r0, fp
 801c680:	f280 8121 	bge.w	801c8c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c684:	fb00 3309 	mla	r3, r0, r9, r3
 801c688:	0858      	lsrs	r0, r3, #1
 801c68a:	07dc      	lsls	r4, r3, #31
 801c68c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c690:	bf54      	ite	pl
 801c692:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c696:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c69a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c69e:	fa5f fc8c 	uxtb.w	ip, ip
 801c6a2:	2a00      	cmp	r2, #0
 801c6a4:	f000 80fe 	beq.w	801c8a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c6a8:	1c58      	adds	r0, r3, #1
 801c6aa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801c6ae:	07c0      	lsls	r0, r0, #31
 801c6b0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c6b4:	bf54      	ite	pl
 801c6b6:	f00e 0e0f 	andpl.w	lr, lr, #15
 801c6ba:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801c6be:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801c6c2:	fa5f f08e 	uxtb.w	r0, lr
 801c6c6:	9010      	str	r0, [sp, #64]	; 0x40
 801c6c8:	b1d9      	cbz	r1, 801c702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c6ca:	444b      	add	r3, r9
 801c6cc:	0858      	lsrs	r0, r3, #1
 801c6ce:	07dc      	lsls	r4, r3, #31
 801c6d0:	f103 0301 	add.w	r3, r3, #1
 801c6d4:	5c38      	ldrb	r0, [r7, r0]
 801c6d6:	bf54      	ite	pl
 801c6d8:	f000 000f 	andpl.w	r0, r0, #15
 801c6dc:	1100      	asrmi	r0, r0, #4
 801c6de:	07dc      	lsls	r4, r3, #31
 801c6e0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c6e4:	b2c0      	uxtb	r0, r0
 801c6e6:	900a      	str	r0, [sp, #40]	; 0x28
 801c6e8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801c6ec:	f817 e000 	ldrb.w	lr, [r7, r0]
 801c6f0:	bf54      	ite	pl
 801c6f2:	f00e 030f 	andpl.w	r3, lr, #15
 801c6f6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801c6fa:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c6fe:	b2db      	uxtb	r3, r3
 801c700:	9311      	str	r3, [sp, #68]	; 0x44
 801c702:	b292      	uxth	r2, r2
 801c704:	b289      	uxth	r1, r1
 801c706:	0113      	lsls	r3, r2, #4
 801c708:	fb02 f001 	mul.w	r0, r2, r1
 801c70c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c70e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c712:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801c716:	1a1b      	subs	r3, r3, r0
 801c718:	b289      	uxth	r1, r1
 801c71a:	b29b      	uxth	r3, r3
 801c71c:	ebae 0e01 	sub.w	lr, lr, r1
 801c720:	4353      	muls	r3, r2
 801c722:	fa1f fe8e 	uxth.w	lr, lr
 801c726:	fb0c 320e 	mla	r2, ip, lr, r3
 801c72a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c72c:	fb01 2203 	mla	r2, r1, r3, r2
 801c730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c732:	fb00 2203 	mla	r2, r0, r3, r2
 801c736:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c73a:	2a00      	cmp	r2, #0
 801c73c:	d039      	beq.n	801c7b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c73e:	4bc7      	ldr	r3, [pc, #796]	; (801ca5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801c740:	6819      	ldr	r1, [r3, #0]
 801c742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c744:	fa5f fc81 	uxtb.w	ip, r1
 801c748:	435a      	muls	r2, r3
 801c74a:	1c53      	adds	r3, r2, #1
 801c74c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c750:	1212      	asrs	r2, r2, #8
 801c752:	b290      	uxth	r0, r2
 801c754:	43d2      	mvns	r2, r2
 801c756:	fb1c fc00 	smulbb	ip, ip, r0
 801c75a:	b2d3      	uxtb	r3, r2
 801c75c:	f898 2000 	ldrb.w	r2, [r8]
 801c760:	fb02 c203 	mla	r2, r2, r3, ip
 801c764:	b292      	uxth	r2, r2
 801c766:	f102 0c01 	add.w	ip, r2, #1
 801c76a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c76e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c772:	fb1c fc03 	smulbb	ip, ip, r3
 801c776:	1212      	asrs	r2, r2, #8
 801c778:	f888 2000 	strb.w	r2, [r8]
 801c77c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801c780:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801c784:	fb02 c200 	mla	r2, r2, r0, ip
 801c788:	b292      	uxth	r2, r2
 801c78a:	f102 0c01 	add.w	ip, r2, #1
 801c78e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c792:	1212      	asrs	r2, r2, #8
 801c794:	f888 2001 	strb.w	r2, [r8, #1]
 801c798:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c79c:	fb12 f303 	smulbb	r3, r2, r3
 801c7a0:	fb01 3300 	mla	r3, r1, r0, r3
 801c7a4:	b29b      	uxth	r3, r3
 801c7a6:	1c5a      	adds	r2, r3, #1
 801c7a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c7ac:	121b      	asrs	r3, r3, #8
 801c7ae:	f888 3002 	strb.w	r3, [r8, #2]
 801c7b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c7b4:	f108 0803 	add.w	r8, r8, #3
 801c7b8:	441d      	add	r5, r3
 801c7ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c7bc:	441e      	add	r6, r3
 801c7be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c7c0:	3b01      	subs	r3, #1
 801c7c2:	930d      	str	r3, [sp, #52]	; 0x34
 801c7c4:	e742      	b.n	801c64c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c7c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c7c8:	f10a 0a03 	add.w	sl, sl, #3
 801c7cc:	441d      	add	r5, r3
 801c7ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c7d0:	441e      	add	r6, r3
 801c7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7d4:	3b01      	subs	r3, #1
 801c7d6:	9309      	str	r3, [sp, #36]	; 0x24
 801c7d8:	e716      	b.n	801c608 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c7da:	d024      	beq.n	801c826 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c7dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c7de:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801c7e0:	3b01      	subs	r3, #1
 801c7e2:	fb00 5003 	mla	r0, r0, r3, r5
 801c7e6:	1400      	asrs	r0, r0, #16
 801c7e8:	f53f af2b 	bmi.w	801c642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c7ec:	3901      	subs	r1, #1
 801c7ee:	4288      	cmp	r0, r1
 801c7f0:	f6bf af27 	bge.w	801c642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c7f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c7f6:	fb01 6303 	mla	r3, r1, r3, r6
 801c7fa:	141b      	asrs	r3, r3, #16
 801c7fc:	f53f af21 	bmi.w	801c642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c800:	3a01      	subs	r2, #1
 801c802:	4293      	cmp	r3, r2
 801c804:	f6bf af1d 	bge.w	801c642 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c808:	f10a 0e03 	add.w	lr, sl, #3
 801c80c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801c810:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c814:	f1b8 0f00 	cmp.w	r8, #0
 801c818:	dc76      	bgt.n	801c908 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801c81a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c81c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c820:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c824:	44a2      	add	sl, r4
 801c826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c828:	2b00      	cmp	r3, #0
 801c82a:	f340 812c 	ble.w	801ca86 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801c82e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c832:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c834:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c838:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c83c:	eef0 6a62 	vmov.f32	s13, s5
 801c840:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c844:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c848:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c84c:	ee16 5a90 	vmov	r5, s13
 801c850:	eef0 6a43 	vmov.f32	s13, s6
 801c854:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c858:	ee16 6a90 	vmov	r6, s13
 801c85c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c860:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c864:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c868:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c86c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c870:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c874:	ee12 2a90 	vmov	r2, s5
 801c878:	eef0 2a47 	vmov.f32	s5, s14
 801c87c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c880:	ee13 2a10 	vmov	r2, s6
 801c884:	9323      	str	r3, [sp, #140]	; 0x8c
 801c886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c888:	eeb0 3a67 	vmov.f32	s6, s15
 801c88c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c890:	9324      	str	r3, [sp, #144]	; 0x90
 801c892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c896:	3b01      	subs	r3, #1
 801c898:	930c      	str	r3, [sp, #48]	; 0x30
 801c89a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c89c:	bf08      	it	eq
 801c89e:	4613      	moveq	r3, r2
 801c8a0:	9309      	str	r3, [sp, #36]	; 0x24
 801c8a2:	e6a2      	b.n	801c5ea <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c8a4:	2900      	cmp	r1, #0
 801c8a6:	f43f af2c 	beq.w	801c702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c8aa:	eb09 0003 	add.w	r0, r9, r3
 801c8ae:	0843      	lsrs	r3, r0, #1
 801c8b0:	07c0      	lsls	r0, r0, #31
 801c8b2:	5cfb      	ldrb	r3, [r7, r3]
 801c8b4:	bf54      	ite	pl
 801c8b6:	f003 030f 	andpl.w	r3, r3, #15
 801c8ba:	111b      	asrmi	r3, r3, #4
 801c8bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c8c0:	b2db      	uxtb	r3, r3
 801c8c2:	930a      	str	r3, [sp, #40]	; 0x28
 801c8c4:	e71d      	b.n	801c702 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c8c6:	f113 0b01 	adds.w	fp, r3, #1
 801c8ca:	f53f af72 	bmi.w	801c7b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c8ce:	45dc      	cmp	ip, fp
 801c8d0:	f6ff af6f 	blt.w	801c7b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c8d4:	f110 0b01 	adds.w	fp, r0, #1
 801c8d8:	f53f af6b 	bmi.w	801c7b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c8dc:	45de      	cmp	lr, fp
 801c8de:	f6ff af68 	blt.w	801c7b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c8e2:	9302      	str	r3, [sp, #8]
 801c8e4:	fa0f f38e 	sxth.w	r3, lr
 801c8e8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c8ea:	9301      	str	r3, [sp, #4]
 801c8ec:	fa0f f38c 	sxth.w	r3, ip
 801c8f0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801c8f4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c8f8:	9300      	str	r3, [sp, #0]
 801c8fa:	463a      	mov	r2, r7
 801c8fc:	464b      	mov	r3, r9
 801c8fe:	4641      	mov	r1, r8
 801c900:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c902:	f7ff fd79 	bl	801c3f8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801c906:	e754      	b.n	801c7b2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c908:	142a      	asrs	r2, r5, #16
 801c90a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c90e:	1433      	asrs	r3, r6, #16
 801c910:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c914:	fb09 2303 	mla	r3, r9, r3, r2
 801c918:	085a      	lsrs	r2, r3, #1
 801c91a:	07dc      	lsls	r4, r3, #31
 801c91c:	5cba      	ldrb	r2, [r7, r2]
 801c91e:	bf54      	ite	pl
 801c920:	f002 020f 	andpl.w	r2, r2, #15
 801c924:	1112      	asrmi	r2, r2, #4
 801c926:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c92a:	b2d2      	uxtb	r2, r2
 801c92c:	2900      	cmp	r1, #0
 801c92e:	f000 8097 	beq.w	801ca60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801c932:	f103 0b01 	add.w	fp, r3, #1
 801c936:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801c93a:	f01b 0f01 	tst.w	fp, #1
 801c93e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c942:	bf0c      	ite	eq
 801c944:	f00c 0c0f 	andeq.w	ip, ip, #15
 801c948:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801c94c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c950:	fa5f f48c 	uxtb.w	r4, ip
 801c954:	9412      	str	r4, [sp, #72]	; 0x48
 801c956:	b300      	cbz	r0, 801c99a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c958:	444b      	add	r3, r9
 801c95a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c95e:	07dc      	lsls	r4, r3, #31
 801c960:	f103 0301 	add.w	r3, r3, #1
 801c964:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c968:	bf54      	ite	pl
 801c96a:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c96e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c972:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c976:	fa5f f48c 	uxtb.w	r4, ip
 801c97a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c97e:	940b      	str	r4, [sp, #44]	; 0x2c
 801c980:	07dc      	lsls	r4, r3, #31
 801c982:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c986:	bf54      	ite	pl
 801c988:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c98c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c990:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c994:	fa5f f38c 	uxtb.w	r3, ip
 801c998:	9313      	str	r3, [sp, #76]	; 0x4c
 801c99a:	b289      	uxth	r1, r1
 801c99c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c99e:	b280      	uxth	r0, r0
 801c9a0:	fb01 f300 	mul.w	r3, r1, r0
 801c9a4:	0109      	lsls	r1, r1, #4
 801c9a6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801c9aa:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801c9ae:	1ac9      	subs	r1, r1, r3
 801c9b0:	b280      	uxth	r0, r0
 801c9b2:	b289      	uxth	r1, r1
 801c9b4:	ebac 0c00 	sub.w	ip, ip, r0
 801c9b8:	4361      	muls	r1, r4
 801c9ba:	fa1f fc8c 	uxth.w	ip, ip
 801c9be:	fb02 120c 	mla	r2, r2, ip, r1
 801c9c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c9c4:	fb00 2001 	mla	r0, r0, r1, r2
 801c9c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c9ca:	fb03 0302 	mla	r3, r3, r2, r0
 801c9ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d039      	beq.n	801ca4a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c9d6:	4a21      	ldr	r2, [pc, #132]	; (801ca5c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801c9d8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801c9dc:	6810      	ldr	r0, [r2, #0]
 801c9de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c9e0:	fa5f fc80 	uxtb.w	ip, r0
 801c9e4:	4353      	muls	r3, r2
 801c9e6:	1c5a      	adds	r2, r3, #1
 801c9e8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c9ec:	121b      	asrs	r3, r3, #8
 801c9ee:	b29a      	uxth	r2, r3
 801c9f0:	43db      	mvns	r3, r3
 801c9f2:	fb1c fc02 	smulbb	ip, ip, r2
 801c9f6:	b2db      	uxtb	r3, r3
 801c9f8:	fb01 c103 	mla	r1, r1, r3, ip
 801c9fc:	b289      	uxth	r1, r1
 801c9fe:	f101 0c01 	add.w	ip, r1, #1
 801ca02:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801ca06:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801ca0a:	fb1c fc03 	smulbb	ip, ip, r3
 801ca0e:	1209      	asrs	r1, r1, #8
 801ca10:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801ca14:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801ca18:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801ca1c:	fb01 c102 	mla	r1, r1, r2, ip
 801ca20:	b289      	uxth	r1, r1
 801ca22:	f101 0c01 	add.w	ip, r1, #1
 801ca26:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801ca2a:	1209      	asrs	r1, r1, #8
 801ca2c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801ca30:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801ca34:	fb11 f303 	smulbb	r3, r1, r3
 801ca38:	fb00 3002 	mla	r0, r0, r2, r3
 801ca3c:	b280      	uxth	r0, r0
 801ca3e:	1c42      	adds	r2, r0, #1
 801ca40:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ca44:	1200      	asrs	r0, r0, #8
 801ca46:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801ca4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ca4c:	f10e 0e03 	add.w	lr, lr, #3
 801ca50:	f108 38ff 	add.w	r8, r8, #4294967295
 801ca54:	441d      	add	r5, r3
 801ca56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ca58:	441e      	add	r6, r3
 801ca5a:	e6db      	b.n	801c814 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ca5c:	2401aa80 	.word	0x2401aa80
 801ca60:	2800      	cmp	r0, #0
 801ca62:	d09a      	beq.n	801c99a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ca64:	444b      	add	r3, r9
 801ca66:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ca6a:	07db      	lsls	r3, r3, #31
 801ca6c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ca70:	bf54      	ite	pl
 801ca72:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ca76:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ca7a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ca7e:	fa5f f38c 	uxtb.w	r3, ip
 801ca82:	930b      	str	r3, [sp, #44]	; 0x2c
 801ca84:	e789      	b.n	801c99a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ca86:	b017      	add	sp, #92	; 0x5c
 801ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801ca8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca90:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801ca94:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ca98:	2d00      	cmp	r5, #0
 801ca9a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801ca9e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801caa2:	fb04 5e03 	mla	lr, r4, r3, r5
 801caa6:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801caaa:	f2c0 80b1 	blt.w	801cc10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801caae:	45a9      	cmp	r9, r5
 801cab0:	f340 80ae 	ble.w	801cc10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801cab4:	2c00      	cmp	r4, #0
 801cab6:	f2c0 80ab 	blt.w	801cc10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801caba:	45a0      	cmp	r8, r4
 801cabc:	f340 80a8 	ble.w	801cc10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801cac0:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801cac4:	f01e 0f01 	tst.w	lr, #1
 801cac8:	5d97      	ldrb	r7, [r2, r6]
 801caca:	bf0c      	ite	eq
 801cacc:	f007 070f 	andeq.w	r7, r7, #15
 801cad0:	113f      	asrne	r7, r7, #4
 801cad2:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801cad6:	b2ff      	uxtb	r7, r7
 801cad8:	f115 0a01 	adds.w	sl, r5, #1
 801cadc:	f100 809a 	bmi.w	801cc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801cae0:	45d1      	cmp	r9, sl
 801cae2:	f340 8097 	ble.w	801cc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801cae6:	2c00      	cmp	r4, #0
 801cae8:	f2c0 8094 	blt.w	801cc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801caec:	45a0      	cmp	r8, r4
 801caee:	f340 8091 	ble.w	801cc14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801caf2:	2800      	cmp	r0, #0
 801caf4:	f000 8090 	beq.w	801cc18 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801caf8:	f10e 0b01 	add.w	fp, lr, #1
 801cafc:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801cb00:	f01b 0f01 	tst.w	fp, #1
 801cb04:	5d96      	ldrb	r6, [r2, r6]
 801cb06:	bf0c      	ite	eq
 801cb08:	f006 060f 	andeq.w	r6, r6, #15
 801cb0c:	1136      	asrne	r6, r6, #4
 801cb0e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801cb12:	b2f6      	uxtb	r6, r6
 801cb14:	f1bc 0f00 	cmp.w	ip, #0
 801cb18:	f000 8082 	beq.w	801cc20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801cb1c:	2d00      	cmp	r5, #0
 801cb1e:	f104 0401 	add.w	r4, r4, #1
 801cb22:	db7b      	blt.n	801cc1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801cb24:	45a9      	cmp	r9, r5
 801cb26:	dd79      	ble.n	801cc1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801cb28:	2c00      	cmp	r4, #0
 801cb2a:	db77      	blt.n	801cc1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801cb2c:	45a0      	cmp	r8, r4
 801cb2e:	dd75      	ble.n	801cc1c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801cb30:	eb03 0b0e 	add.w	fp, r3, lr
 801cb34:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801cb38:	f01b 0f01 	tst.w	fp, #1
 801cb3c:	5d55      	ldrb	r5, [r2, r5]
 801cb3e:	bf0c      	ite	eq
 801cb40:	f005 050f 	andeq.w	r5, r5, #15
 801cb44:	112d      	asrne	r5, r5, #4
 801cb46:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801cb4a:	b2ed      	uxtb	r5, r5
 801cb4c:	f1ba 0f00 	cmp.w	sl, #0
 801cb50:	db69      	blt.n	801cc26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801cb52:	45d1      	cmp	r9, sl
 801cb54:	dd67      	ble.n	801cc26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801cb56:	2c00      	cmp	r4, #0
 801cb58:	db65      	blt.n	801cc26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801cb5a:	45a0      	cmp	r8, r4
 801cb5c:	dd63      	ble.n	801cc26 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801cb5e:	2800      	cmp	r0, #0
 801cb60:	d063      	beq.n	801cc2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801cb62:	3301      	adds	r3, #1
 801cb64:	449e      	add	lr, r3
 801cb66:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cb6a:	f01e 0f01 	tst.w	lr, #1
 801cb6e:	5cd4      	ldrb	r4, [r2, r3]
 801cb70:	bf0c      	ite	eq
 801cb72:	f004 040f 	andeq.w	r4, r4, #15
 801cb76:	1124      	asrne	r4, r4, #4
 801cb78:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cb7c:	b2e3      	uxtb	r3, r4
 801cb7e:	b282      	uxth	r2, r0
 801cb80:	fa1f fc8c 	uxth.w	ip, ip
 801cb84:	fb02 f40c 	mul.w	r4, r2, ip
 801cb88:	0112      	lsls	r2, r2, #4
 801cb8a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801cb8e:	fa1f f08c 	uxth.w	r0, ip
 801cb92:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801cb96:	1b12      	subs	r2, r2, r4
 801cb98:	ebac 0c00 	sub.w	ip, ip, r0
 801cb9c:	b292      	uxth	r2, r2
 801cb9e:	fa1f fc8c 	uxth.w	ip, ip
 801cba2:	4372      	muls	r2, r6
 801cba4:	fb07 220c 	mla	r2, r7, ip, r2
 801cba8:	fb00 2005 	mla	r0, r0, r5, r2
 801cbac:	fb04 0303 	mla	r3, r4, r3, r0
 801cbb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cbb4:	b353      	cbz	r3, 801cc0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801cbb6:	4a1e      	ldr	r2, [pc, #120]	; (801cc30 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801cbb8:	7808      	ldrb	r0, [r1, #0]
 801cbba:	6814      	ldr	r4, [r2, #0]
 801cbbc:	b29a      	uxth	r2, r3
 801cbbe:	43db      	mvns	r3, r3
 801cbc0:	b2e5      	uxtb	r5, r4
 801cbc2:	b2db      	uxtb	r3, r3
 801cbc4:	fb15 f502 	smulbb	r5, r5, r2
 801cbc8:	fb00 5003 	mla	r0, r0, r3, r5
 801cbcc:	b280      	uxth	r0, r0
 801cbce:	1c45      	adds	r5, r0, #1
 801cbd0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801cbd4:	784d      	ldrb	r5, [r1, #1]
 801cbd6:	fb15 f503 	smulbb	r5, r5, r3
 801cbda:	1200      	asrs	r0, r0, #8
 801cbdc:	7008      	strb	r0, [r1, #0]
 801cbde:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801cbe2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cbe6:	fb00 5002 	mla	r0, r0, r2, r5
 801cbea:	b280      	uxth	r0, r0
 801cbec:	1c45      	adds	r5, r0, #1
 801cbee:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801cbf2:	1200      	asrs	r0, r0, #8
 801cbf4:	7048      	strb	r0, [r1, #1]
 801cbf6:	7888      	ldrb	r0, [r1, #2]
 801cbf8:	fb10 f303 	smulbb	r3, r0, r3
 801cbfc:	fb04 3202 	mla	r2, r4, r2, r3
 801cc00:	b292      	uxth	r2, r2
 801cc02:	1c53      	adds	r3, r2, #1
 801cc04:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801cc08:	1212      	asrs	r2, r2, #8
 801cc0a:	708a      	strb	r2, [r1, #2]
 801cc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc10:	2700      	movs	r7, #0
 801cc12:	e761      	b.n	801cad8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801cc14:	2600      	movs	r6, #0
 801cc16:	e77d      	b.n	801cb14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801cc18:	4606      	mov	r6, r0
 801cc1a:	e77b      	b.n	801cb14 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801cc1c:	2500      	movs	r5, #0
 801cc1e:	e795      	b.n	801cb4c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801cc20:	4663      	mov	r3, ip
 801cc22:	4665      	mov	r5, ip
 801cc24:	e7ab      	b.n	801cb7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801cc26:	2300      	movs	r3, #0
 801cc28:	e7a9      	b.n	801cb7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	e7a7      	b.n	801cb7e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801cc2e:	bf00      	nop
 801cc30:	2401aa80 	.word	0x2401aa80

0801cc34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc38:	b093      	sub	sp, #76	; 0x4c
 801cc3a:	461c      	mov	r4, r3
 801cc3c:	920c      	str	r2, [sp, #48]	; 0x30
 801cc3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801cc40:	9011      	str	r0, [sp, #68]	; 0x44
 801cc42:	9107      	str	r1, [sp, #28]
 801cc44:	6850      	ldr	r0, [r2, #4]
 801cc46:	6812      	ldr	r2, [r2, #0]
 801cc48:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801cc4c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801cc50:	fb00 1303 	mla	r3, r0, r3, r1
 801cc54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc58:	eb02 0b03 	add.w	fp, r2, r3
 801cc5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc5e:	689b      	ldr	r3, [r3, #8]
 801cc60:	3301      	adds	r3, #1
 801cc62:	f023 0301 	bic.w	r3, r3, #1
 801cc66:	9309      	str	r3, [sp, #36]	; 0x24
 801cc68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc6a:	f8d3 8000 	ldr.w	r8, [r3]
 801cc6e:	9b07      	ldr	r3, [sp, #28]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	dc03      	bgt.n	801cc7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801cc74:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc76:	2b00      	cmp	r3, #0
 801cc78:	f340 822b 	ble.w	801d0d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801cc7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cc7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cc82:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cc86:	1e48      	subs	r0, r1, #1
 801cc88:	1e57      	subs	r7, r2, #1
 801cc8a:	2c00      	cmp	r4, #0
 801cc8c:	f340 80d7 	ble.w	801ce3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801cc90:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801cc94:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cc98:	d406      	bmi.n	801cca8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cc9a:	4584      	cmp	ip, r0
 801cc9c:	da04      	bge.n	801cca8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cc9e:	2b00      	cmp	r3, #0
 801cca0:	db02      	blt.n	801cca8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801cca2:	42bb      	cmp	r3, r7
 801cca4:	f2c0 80cc 	blt.w	801ce40 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801cca8:	f11c 0c01 	adds.w	ip, ip, #1
 801ccac:	f100 80bf 	bmi.w	801ce2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ccb0:	4561      	cmp	r1, ip
 801ccb2:	f2c0 80bc 	blt.w	801ce2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ccb6:	3301      	adds	r3, #1
 801ccb8:	f100 80b9 	bmi.w	801ce2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ccbc:	429a      	cmp	r2, r3
 801ccbe:	f2c0 80b6 	blt.w	801ce2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ccc2:	46a2      	mov	sl, r4
 801ccc4:	465f      	mov	r7, fp
 801ccc6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ccca:	f1ba 0f00 	cmp.w	sl, #0
 801ccce:	f340 80d4 	ble.w	801ce7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801ccd2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801ccd6:	1430      	asrs	r0, r6, #16
 801ccd8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ccdc:	9308      	str	r3, [sp, #32]
 801ccde:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cce0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801cce4:	142b      	asrs	r3, r5, #16
 801cce6:	f100 8124 	bmi.w	801cf32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ccea:	f10c 32ff 	add.w	r2, ip, #4294967295
 801ccee:	4293      	cmp	r3, r2
 801ccf0:	f280 811f 	bge.w	801cf32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ccf4:	2800      	cmp	r0, #0
 801ccf6:	f2c0 811c 	blt.w	801cf32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ccfa:	f10e 32ff 	add.w	r2, lr, #4294967295
 801ccfe:	4290      	cmp	r0, r2
 801cd00:	f280 8117 	bge.w	801cf32 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801cd04:	fb00 3309 	mla	r3, r0, r9, r3
 801cd08:	0858      	lsrs	r0, r3, #1
 801cd0a:	07da      	lsls	r2, r3, #31
 801cd0c:	9a08      	ldr	r2, [sp, #32]
 801cd0e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801cd12:	bf54      	ite	pl
 801cd14:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cd18:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cd1c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cd20:	fa5f fc8c 	uxtb.w	ip, ip
 801cd24:	2a00      	cmp	r2, #0
 801cd26:	f000 80ed 	beq.w	801cf04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801cd2a:	1c58      	adds	r0, r3, #1
 801cd2c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801cd30:	07c0      	lsls	r0, r0, #31
 801cd32:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801cd36:	bf54      	ite	pl
 801cd38:	f00e 0e0f 	andpl.w	lr, lr, #15
 801cd3c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801cd40:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801cd44:	fa5f fe8e 	uxtb.w	lr, lr
 801cd48:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801cd4c:	b1c9      	cbz	r1, 801cd82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cd4e:	444b      	add	r3, r9
 801cd50:	0858      	lsrs	r0, r3, #1
 801cd52:	07da      	lsls	r2, r3, #31
 801cd54:	f818 0000 	ldrb.w	r0, [r8, r0]
 801cd58:	bf54      	ite	pl
 801cd5a:	f000 000f 	andpl.w	r0, r0, #15
 801cd5e:	1100      	asrmi	r0, r0, #4
 801cd60:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cd64:	b2c0      	uxtb	r0, r0
 801cd66:	900a      	str	r0, [sp, #40]	; 0x28
 801cd68:	1c58      	adds	r0, r3, #1
 801cd6a:	0843      	lsrs	r3, r0, #1
 801cd6c:	07c2      	lsls	r2, r0, #31
 801cd6e:	f818 3003 	ldrb.w	r3, [r8, r3]
 801cd72:	bf54      	ite	pl
 801cd74:	f003 030f 	andpl.w	r3, r3, #15
 801cd78:	111b      	asrmi	r3, r3, #4
 801cd7a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	930e      	str	r3, [sp, #56]	; 0x38
 801cd82:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801cd86:	b289      	uxth	r1, r1
 801cd88:	fb02 f301 	mul.w	r3, r2, r1
 801cd8c:	0112      	lsls	r2, r2, #4
 801cd8e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801cd92:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801cd96:	1ad2      	subs	r2, r2, r3
 801cd98:	b289      	uxth	r1, r1
 801cd9a:	b292      	uxth	r2, r2
 801cd9c:	1a40      	subs	r0, r0, r1
 801cd9e:	fa1f fe80 	uxth.w	lr, r0
 801cda2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801cda4:	4342      	muls	r2, r0
 801cda6:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801cdaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cdac:	fb01 c102 	mla	r1, r1, r2, ip
 801cdb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cdb2:	fb03 1302 	mla	r3, r3, r2, r1
 801cdb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cdba:	b383      	cbz	r3, 801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cdbc:	4ac6      	ldr	r2, [pc, #792]	; (801d0d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801cdbe:	2bff      	cmp	r3, #255	; 0xff
 801cdc0:	6812      	ldr	r2, [r2, #0]
 801cdc2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801cdc6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801cdca:	b2d2      	uxtb	r2, r2
 801cdcc:	f000 80ac 	beq.w	801cf28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801cdd0:	b299      	uxth	r1, r3
 801cdd2:	43db      	mvns	r3, r3
 801cdd4:	f897 c000 	ldrb.w	ip, [r7]
 801cdd8:	fb12 f201 	smulbb	r2, r2, r1
 801cddc:	b2db      	uxtb	r3, r3
 801cdde:	fb10 f001 	smulbb	r0, r0, r1
 801cde2:	fb0c 2203 	mla	r2, ip, r3, r2
 801cde6:	fb1e f101 	smulbb	r1, lr, r1
 801cdea:	b292      	uxth	r2, r2
 801cdec:	f102 0c01 	add.w	ip, r2, #1
 801cdf0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cdf4:	1212      	asrs	r2, r2, #8
 801cdf6:	703a      	strb	r2, [r7, #0]
 801cdf8:	787a      	ldrb	r2, [r7, #1]
 801cdfa:	fb02 0003 	mla	r0, r2, r3, r0
 801cdfe:	b280      	uxth	r0, r0
 801ce00:	1c42      	adds	r2, r0, #1
 801ce02:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ce06:	78ba      	ldrb	r2, [r7, #2]
 801ce08:	fb02 1303 	mla	r3, r2, r3, r1
 801ce0c:	1200      	asrs	r0, r0, #8
 801ce0e:	b29b      	uxth	r3, r3
 801ce10:	7078      	strb	r0, [r7, #1]
 801ce12:	f103 0e01 	add.w	lr, r3, #1
 801ce16:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ce1a:	121b      	asrs	r3, r3, #8
 801ce1c:	70bb      	strb	r3, [r7, #2]
 801ce1e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ce20:	3703      	adds	r7, #3
 801ce22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ce26:	441d      	add	r5, r3
 801ce28:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce2a:	441e      	add	r6, r3
 801ce2c:	e74d      	b.n	801ccca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ce2e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ce30:	3c01      	subs	r4, #1
 801ce32:	f10b 0b03 	add.w	fp, fp, #3
 801ce36:	441d      	add	r5, r3
 801ce38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce3a:	441e      	add	r6, r3
 801ce3c:	e725      	b.n	801cc8a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ce3e:	d021      	beq.n	801ce84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ce40:	1e63      	subs	r3, r4, #1
 801ce42:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ce44:	fb00 5003 	mla	r0, r0, r3, r5
 801ce48:	1400      	asrs	r0, r0, #16
 801ce4a:	f53f af3a 	bmi.w	801ccc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ce4e:	3901      	subs	r1, #1
 801ce50:	4288      	cmp	r0, r1
 801ce52:	f6bf af36 	bge.w	801ccc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ce56:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ce58:	fb01 6303 	mla	r3, r1, r3, r6
 801ce5c:	141b      	asrs	r3, r3, #16
 801ce5e:	f53f af30 	bmi.w	801ccc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ce62:	3a01      	subs	r2, #1
 801ce64:	4293      	cmp	r3, r2
 801ce66:	f6bf af2c 	bge.w	801ccc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ce6a:	f10b 0c03 	add.w	ip, fp, #3
 801ce6e:	46a6      	mov	lr, r4
 801ce70:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801ce74:	f1be 0f00 	cmp.w	lr, #0
 801ce78:	dc79      	bgt.n	801cf6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801ce7a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801ce7e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce82:	44a3      	add	fp, r4
 801ce84:	9b07      	ldr	r3, [sp, #28]
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	f340 8123 	ble.w	801d0d2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ce8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ce90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce92:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce9a:	eef0 6a62 	vmov.f32	s13, s5
 801ce9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cea2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cea6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ceaa:	ee16 5a90 	vmov	r5, s13
 801ceae:	eef0 6a43 	vmov.f32	s13, s6
 801ceb2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ceb6:	ee16 6a90 	vmov	r6, s13
 801ceba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cebe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cec2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cec6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ceca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cece:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ced2:	ee12 2a90 	vmov	r2, s5
 801ced6:	eef0 2a47 	vmov.f32	s5, s14
 801ceda:	fb92 f3f3 	sdiv	r3, r2, r3
 801cede:	ee13 2a10 	vmov	r2, s6
 801cee2:	931f      	str	r3, [sp, #124]	; 0x7c
 801cee4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cee6:	eeb0 3a67 	vmov.f32	s6, s15
 801ceea:	fb92 f3f3 	sdiv	r3, r2, r3
 801ceee:	9320      	str	r3, [sp, #128]	; 0x80
 801cef0:	9b07      	ldr	r3, [sp, #28]
 801cef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cef4:	3b01      	subs	r3, #1
 801cef6:	9307      	str	r3, [sp, #28]
 801cef8:	bf08      	it	eq
 801cefa:	4614      	moveq	r4, r2
 801cefc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cefe:	bf18      	it	ne
 801cf00:	461c      	movne	r4, r3
 801cf02:	e6b4      	b.n	801cc6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cf04:	2900      	cmp	r1, #0
 801cf06:	f43f af3c 	beq.w	801cd82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cf0a:	eb09 0003 	add.w	r0, r9, r3
 801cf0e:	0843      	lsrs	r3, r0, #1
 801cf10:	07c0      	lsls	r0, r0, #31
 801cf12:	f818 3003 	ldrb.w	r3, [r8, r3]
 801cf16:	bf54      	ite	pl
 801cf18:	f003 030f 	andpl.w	r3, r3, #15
 801cf1c:	111b      	asrmi	r3, r3, #4
 801cf1e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cf22:	b2db      	uxtb	r3, r3
 801cf24:	930a      	str	r3, [sp, #40]	; 0x28
 801cf26:	e72c      	b.n	801cd82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cf28:	703a      	strb	r2, [r7, #0]
 801cf2a:	7078      	strb	r0, [r7, #1]
 801cf2c:	f887 e002 	strb.w	lr, [r7, #2]
 801cf30:	e775      	b.n	801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf32:	1c5a      	adds	r2, r3, #1
 801cf34:	f53f af73 	bmi.w	801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf38:	4594      	cmp	ip, r2
 801cf3a:	f6ff af70 	blt.w	801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf3e:	1c42      	adds	r2, r0, #1
 801cf40:	f53f af6d 	bmi.w	801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf44:	4596      	cmp	lr, r2
 801cf46:	f6ff af6a 	blt.w	801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf4a:	9302      	str	r3, [sp, #8]
 801cf4c:	fa0f f38e 	sxth.w	r3, lr
 801cf50:	9a08      	ldr	r2, [sp, #32]
 801cf52:	9301      	str	r3, [sp, #4]
 801cf54:	fa0f f38c 	sxth.w	r3, ip
 801cf58:	9105      	str	r1, [sp, #20]
 801cf5a:	4639      	mov	r1, r7
 801cf5c:	9300      	str	r3, [sp, #0]
 801cf5e:	464b      	mov	r3, r9
 801cf60:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801cf64:	4642      	mov	r2, r8
 801cf66:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cf68:	f7ff fd90 	bl	801ca8c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801cf6c:	e757      	b.n	801ce1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf6e:	142a      	asrs	r2, r5, #16
 801cf70:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cf74:	1433      	asrs	r3, r6, #16
 801cf76:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801cf7a:	fb09 2303 	mla	r3, r9, r3, r2
 801cf7e:	085a      	lsrs	r2, r3, #1
 801cf80:	07d9      	lsls	r1, r3, #31
 801cf82:	f818 2002 	ldrb.w	r2, [r8, r2]
 801cf86:	bf54      	ite	pl
 801cf88:	f002 020f 	andpl.w	r2, r2, #15
 801cf8c:	1112      	asrmi	r2, r2, #4
 801cf8e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cf92:	b2d2      	uxtb	r2, r2
 801cf94:	2800      	cmp	r0, #0
 801cf96:	f000 8085 	beq.w	801d0a4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801cf9a:	f103 0a01 	add.w	sl, r3, #1
 801cf9e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801cfa2:	f01a 0f01 	tst.w	sl, #1
 801cfa6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cfaa:	bf0c      	ite	eq
 801cfac:	f001 010f 	andeq.w	r1, r1, #15
 801cfb0:	1109      	asrne	r1, r1, #4
 801cfb2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cfb6:	b2c9      	uxtb	r1, r1
 801cfb8:	910f      	str	r1, [sp, #60]	; 0x3c
 801cfba:	b1df      	cbz	r7, 801cff4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cfbc:	444b      	add	r3, r9
 801cfbe:	0859      	lsrs	r1, r3, #1
 801cfc0:	f013 0f01 	tst.w	r3, #1
 801cfc4:	f103 0301 	add.w	r3, r3, #1
 801cfc8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cfcc:	bf0c      	ite	eq
 801cfce:	f001 010f 	andeq.w	r1, r1, #15
 801cfd2:	1109      	asrne	r1, r1, #4
 801cfd4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cfd8:	b2c9      	uxtb	r1, r1
 801cfda:	910b      	str	r1, [sp, #44]	; 0x2c
 801cfdc:	0859      	lsrs	r1, r3, #1
 801cfde:	07db      	lsls	r3, r3, #31
 801cfe0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cfe4:	bf54      	ite	pl
 801cfe6:	f001 010f 	andpl.w	r1, r1, #15
 801cfea:	1109      	asrmi	r1, r1, #4
 801cfec:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cff0:	b2c9      	uxtb	r1, r1
 801cff2:	9110      	str	r1, [sp, #64]	; 0x40
 801cff4:	b280      	uxth	r0, r0
 801cff6:	b2bf      	uxth	r7, r7
 801cff8:	fb00 f307 	mul.w	r3, r0, r7
 801cffc:	0100      	lsls	r0, r0, #4
 801cffe:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801d002:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d006:	1ac0      	subs	r0, r0, r3
 801d008:	b2bf      	uxth	r7, r7
 801d00a:	b280      	uxth	r0, r0
 801d00c:	1bc9      	subs	r1, r1, r7
 801d00e:	fa1f fa81 	uxth.w	sl, r1
 801d012:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d014:	4348      	muls	r0, r1
 801d016:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d018:	fb02 020a 	mla	r2, r2, sl, r0
 801d01c:	fb07 2701 	mla	r7, r7, r1, r2
 801d020:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d022:	fb03 7302 	mla	r3, r3, r2, r7
 801d026:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d02a:	b393      	cbz	r3, 801d092 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d02c:	4a2a      	ldr	r2, [pc, #168]	; (801d0d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d02e:	2bff      	cmp	r3, #255	; 0xff
 801d030:	6811      	ldr	r1, [r2, #0]
 801d032:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801d036:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801d03a:	b2c9      	uxtb	r1, r1
 801d03c:	d042      	beq.n	801d0c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d03e:	b298      	uxth	r0, r3
 801d040:	43db      	mvns	r3, r3
 801d042:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801d046:	fb11 f100 	smulbb	r1, r1, r0
 801d04a:	b2db      	uxtb	r3, r3
 801d04c:	fb17 f700 	smulbb	r7, r7, r0
 801d050:	fb02 1103 	mla	r1, r2, r3, r1
 801d054:	fb1a f000 	smulbb	r0, sl, r0
 801d058:	b289      	uxth	r1, r1
 801d05a:	1c4a      	adds	r2, r1, #1
 801d05c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d060:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801d064:	fb02 7703 	mla	r7, r2, r3, r7
 801d068:	1209      	asrs	r1, r1, #8
 801d06a:	b2bf      	uxth	r7, r7
 801d06c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d070:	1c7a      	adds	r2, r7, #1
 801d072:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d076:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801d07a:	fb02 0303 	mla	r3, r2, r3, r0
 801d07e:	123f      	asrs	r7, r7, #8
 801d080:	b29b      	uxth	r3, r3
 801d082:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d086:	1c5a      	adds	r2, r3, #1
 801d088:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d08c:	121b      	asrs	r3, r3, #8
 801d08e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801d092:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d094:	f10c 0c03 	add.w	ip, ip, #3
 801d098:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d09c:	441d      	add	r5, r3
 801d09e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d0a0:	441e      	add	r6, r3
 801d0a2:	e6e7      	b.n	801ce74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d0a4:	2f00      	cmp	r7, #0
 801d0a6:	d0a5      	beq.n	801cff4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d0a8:	444b      	add	r3, r9
 801d0aa:	0859      	lsrs	r1, r3, #1
 801d0ac:	07db      	lsls	r3, r3, #31
 801d0ae:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d0b2:	bf54      	ite	pl
 801d0b4:	f001 010f 	andpl.w	r1, r1, #15
 801d0b8:	1109      	asrmi	r1, r1, #4
 801d0ba:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d0be:	b2c9      	uxtb	r1, r1
 801d0c0:	910b      	str	r1, [sp, #44]	; 0x2c
 801d0c2:	e797      	b.n	801cff4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d0c4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d0c8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d0cc:	f80c ac01 	strb.w	sl, [ip, #-1]
 801d0d0:	e7df      	b.n	801d092 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d0d2:	b013      	add	sp, #76	; 0x4c
 801d0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0d8:	2401aa80 	.word	0x2401aa80

0801d0dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801d0dc:	b530      	push	{r4, r5, lr}
 801d0de:	b29d      	uxth	r5, r3
 801d0e0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801d0e4:	780c      	ldrb	r4, [r1, #0]
 801d0e6:	b298      	uxth	r0, r3
 801d0e8:	7813      	ldrb	r3, [r2, #0]
 801d0ea:	fb14 f405 	smulbb	r4, r4, r5
 801d0ee:	fb13 f300 	smulbb	r3, r3, r0
 801d0f2:	441c      	add	r4, r3
 801d0f4:	b2a4      	uxth	r4, r4
 801d0f6:	1c63      	adds	r3, r4, #1
 801d0f8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d0fc:	7853      	ldrb	r3, [r2, #1]
 801d0fe:	fb13 f300 	smulbb	r3, r3, r0
 801d102:	1224      	asrs	r4, r4, #8
 801d104:	7014      	strb	r4, [r2, #0]
 801d106:	784c      	ldrb	r4, [r1, #1]
 801d108:	fb14 f405 	smulbb	r4, r4, r5
 801d10c:	441c      	add	r4, r3
 801d10e:	b2a4      	uxth	r4, r4
 801d110:	1c63      	adds	r3, r4, #1
 801d112:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d116:	1224      	asrs	r4, r4, #8
 801d118:	7054      	strb	r4, [r2, #1]
 801d11a:	788b      	ldrb	r3, [r1, #2]
 801d11c:	7891      	ldrb	r1, [r2, #2]
 801d11e:	fb13 f305 	smulbb	r3, r3, r5
 801d122:	fb11 f000 	smulbb	r0, r1, r0
 801d126:	4403      	add	r3, r0
 801d128:	b29b      	uxth	r3, r3
 801d12a:	1c59      	adds	r1, r3, #1
 801d12c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d130:	121b      	asrs	r3, r3, #8
 801d132:	7093      	strb	r3, [r2, #2]
 801d134:	bd30      	pop	{r4, r5, pc}
	...

0801d138 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d13c:	461c      	mov	r4, r3
 801d13e:	b08b      	sub	sp, #44	; 0x2c
 801d140:	460e      	mov	r6, r1
 801d142:	4615      	mov	r5, r2
 801d144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d146:	4682      	mov	sl, r0
 801d148:	6861      	ldr	r1, [r4, #4]
 801d14a:	aa06      	add	r2, sp, #24
 801d14c:	6820      	ldr	r0, [r4, #0]
 801d14e:	2702      	movs	r7, #2
 801d150:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 801d154:	3504      	adds	r5, #4
 801d156:	c203      	stmia	r2!, {r0, r1}
 801d158:	6818      	ldr	r0, [r3, #0]
 801d15a:	aa08      	add	r2, sp, #32
 801d15c:	6859      	ldr	r1, [r3, #4]
 801d15e:	c203      	stmia	r2!, {r0, r1}
 801d160:	a806      	add	r0, sp, #24
 801d162:	f7f4 f953 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d166:	4621      	mov	r1, r4
 801d168:	a808      	add	r0, sp, #32
 801d16a:	f7f4 f977 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d16e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801d172:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 801d176:	f002 0301 	and.w	r3, r2, #1
 801d17a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801d17e:	9302      	str	r3, [sp, #8]
 801d180:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d184:	f003 0101 	and.w	r1, r3, #1
 801d188:	9101      	str	r1, [sp, #4]
 801d18a:	9801      	ldr	r0, [sp, #4]
 801d18c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801d190:	4403      	add	r3, r0
 801d192:	fb01 2303 	mla	r3, r1, r3, r2
 801d196:	fb93 f3f7 	sdiv	r3, r3, r7
 801d19a:	441e      	add	r6, r3
 801d19c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801d1a0:	441a      	add	r2, r3
 801d1a2:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801d1a6:	4419      	add	r1, r3
 801d1a8:	4b70      	ldr	r3, [pc, #448]	; (801d36c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801d1aa:	f8ad 2020 	strh.w	r2, [sp, #32]
 801d1ae:	6818      	ldr	r0, [r3, #0]
 801d1b0:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801d1b4:	6803      	ldr	r3, [r0, #0]
 801d1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1b8:	4798      	blx	r3
 801d1ba:	4a6d      	ldr	r2, [pc, #436]	; (801d370 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801d1bc:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801d1c0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801d1c4:	8813      	ldrh	r3, [r2, #0]
 801d1c6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801d1ca:	fb03 1404 	mla	r4, r3, r4, r1
 801d1ce:	4611      	mov	r1, r2
 801d1d0:	fb0b f303 	mul.w	r3, fp, r3
 801d1d4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d1d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1dc:	4404      	add	r4, r0
 801d1de:	4423      	add	r3, r4
 801d1e0:	d073      	beq.n	801d2ca <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801d1e2:	9705      	str	r7, [sp, #20]
 801d1e4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801d1e8:	9b03      	ldr	r3, [sp, #12]
 801d1ea:	429c      	cmp	r4, r3
 801d1ec:	f080 80b5 	bcs.w	801d35a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801d1f0:	9b02      	ldr	r3, [sp, #8]
 801d1f2:	b35b      	cbz	r3, 801d24c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801d1f4:	7831      	ldrb	r1, [r6, #0]
 801d1f6:	4622      	mov	r2, r4
 801d1f8:	1c77      	adds	r7, r6, #1
 801d1fa:	3403      	adds	r4, #3
 801d1fc:	f001 010f 	and.w	r1, r1, #15
 801d200:	f108 3bff 	add.w	fp, r8, #4294967295
 801d204:	464b      	mov	r3, r9
 801d206:	4650      	mov	r0, sl
 801d208:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d20c:	4429      	add	r1, r5
 801d20e:	f7ff ff65 	bl	801d0dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801d212:	f1bb 0f01 	cmp.w	fp, #1
 801d216:	dd1c      	ble.n	801d252 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801d218:	7839      	ldrb	r1, [r7, #0]
 801d21a:	4622      	mov	r2, r4
 801d21c:	464b      	mov	r3, r9
 801d21e:	4650      	mov	r0, sl
 801d220:	0909      	lsrs	r1, r1, #4
 801d222:	f1ab 0b02 	sub.w	fp, fp, #2
 801d226:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d22a:	4429      	add	r1, r5
 801d22c:	f7ff ff56 	bl	801d0dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801d230:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d234:	1ce2      	adds	r2, r4, #3
 801d236:	464b      	mov	r3, r9
 801d238:	f001 010f 	and.w	r1, r1, #15
 801d23c:	4650      	mov	r0, sl
 801d23e:	3406      	adds	r4, #6
 801d240:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d244:	4429      	add	r1, r5
 801d246:	f7ff ff49 	bl	801d0dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801d24a:	e7e2      	b.n	801d212 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801d24c:	4637      	mov	r7, r6
 801d24e:	46c3      	mov	fp, r8
 801d250:	e7df      	b.n	801d212 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801d252:	d10a      	bne.n	801d26a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801d254:	7839      	ldrb	r1, [r7, #0]
 801d256:	4622      	mov	r2, r4
 801d258:	3403      	adds	r4, #3
 801d25a:	464b      	mov	r3, r9
 801d25c:	0909      	lsrs	r1, r1, #4
 801d25e:	4650      	mov	r0, sl
 801d260:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d264:	4429      	add	r1, r5
 801d266:	f7ff ff39 	bl	801d0dc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801d26a:	9b04      	ldr	r3, [sp, #16]
 801d26c:	9a01      	ldr	r2, [sp, #4]
 801d26e:	881b      	ldrh	r3, [r3, #0]
 801d270:	eba3 0308 	sub.w	r3, r3, r8
 801d274:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d278:	441c      	add	r4, r3
 801d27a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801d27e:	4413      	add	r3, r2
 801d280:	9a05      	ldr	r2, [sp, #20]
 801d282:	fb93 f3f2 	sdiv	r3, r3, r2
 801d286:	441e      	add	r6, r3
 801d288:	e7ae      	b.n	801d1e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801d28a:	4632      	mov	r2, r6
 801d28c:	46c4      	mov	ip, r8
 801d28e:	e037      	b.n	801d300 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801d290:	d10e      	bne.n	801d2b0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801d292:	7812      	ldrb	r2, [r2, #0]
 801d294:	3003      	adds	r0, #3
 801d296:	0912      	lsrs	r2, r2, #4
 801d298:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d29c:	18ac      	adds	r4, r5, r2
 801d29e:	5caa      	ldrb	r2, [r5, r2]
 801d2a0:	f800 2c03 	strb.w	r2, [r0, #-3]
 801d2a4:	7862      	ldrb	r2, [r4, #1]
 801d2a6:	f800 2c02 	strb.w	r2, [r0, #-2]
 801d2aa:	78a2      	ldrb	r2, [r4, #2]
 801d2ac:	f800 2c01 	strb.w	r2, [r0, #-1]
 801d2b0:	880c      	ldrh	r4, [r1, #0]
 801d2b2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801d2b6:	eba4 0408 	sub.w	r4, r4, r8
 801d2ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d2be:	4404      	add	r4, r0
 801d2c0:	9801      	ldr	r0, [sp, #4]
 801d2c2:	4402      	add	r2, r0
 801d2c4:	fb92 f2f7 	sdiv	r2, r2, r7
 801d2c8:	4416      	add	r6, r2
 801d2ca:	429c      	cmp	r4, r3
 801d2cc:	d245      	bcs.n	801d35a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801d2ce:	9a02      	ldr	r2, [sp, #8]
 801d2d0:	2a00      	cmp	r2, #0
 801d2d2:	d0da      	beq.n	801d28a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801d2d4:	7830      	ldrb	r0, [r6, #0]
 801d2d6:	1c72      	adds	r2, r6, #1
 801d2d8:	3403      	adds	r4, #3
 801d2da:	f000 000f 	and.w	r0, r0, #15
 801d2de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d2e2:	eb05 0c00 	add.w	ip, r5, r0
 801d2e6:	5c28      	ldrb	r0, [r5, r0]
 801d2e8:	f804 0c03 	strb.w	r0, [r4, #-3]
 801d2ec:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801d2f0:	f804 0c02 	strb.w	r0, [r4, #-2]
 801d2f4:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801d2f8:	f108 3cff 	add.w	ip, r8, #4294967295
 801d2fc:	f804 0c01 	strb.w	r0, [r4, #-1]
 801d300:	f1bc 0f01 	cmp.w	ip, #1
 801d304:	4620      	mov	r0, r4
 801d306:	f104 0406 	add.w	r4, r4, #6
 801d30a:	ddc1      	ble.n	801d290 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801d30c:	7810      	ldrb	r0, [r2, #0]
 801d30e:	f1ac 0c02 	sub.w	ip, ip, #2
 801d312:	0900      	lsrs	r0, r0, #4
 801d314:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d318:	eb05 0e00 	add.w	lr, r5, r0
 801d31c:	5c28      	ldrb	r0, [r5, r0]
 801d31e:	f804 0c06 	strb.w	r0, [r4, #-6]
 801d322:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801d326:	f804 0c05 	strb.w	r0, [r4, #-5]
 801d32a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801d32e:	f804 0c04 	strb.w	r0, [r4, #-4]
 801d332:	f812 0b01 	ldrb.w	r0, [r2], #1
 801d336:	f000 000f 	and.w	r0, r0, #15
 801d33a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d33e:	eb05 0e00 	add.w	lr, r5, r0
 801d342:	5c28      	ldrb	r0, [r5, r0]
 801d344:	f804 0c03 	strb.w	r0, [r4, #-3]
 801d348:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801d34c:	f804 0c02 	strb.w	r0, [r4, #-2]
 801d350:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801d354:	f804 0c01 	strb.w	r0, [r4, #-1]
 801d358:	e7d2      	b.n	801d300 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801d35a:	4b04      	ldr	r3, [pc, #16]	; (801d36c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801d35c:	6818      	ldr	r0, [r3, #0]
 801d35e:	6803      	ldr	r3, [r0, #0]
 801d360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d362:	4798      	blx	r3
 801d364:	b00b      	add	sp, #44	; 0x2c
 801d366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d36a:	bf00      	nop
 801d36c:	2401aa78 	.word	0x2401aa78
 801d370:	2401aa72 	.word	0x2401aa72

0801d374 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801d374:	b530      	push	{r4, r5, lr}
 801d376:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801d37a:	780d      	ldrb	r5, [r1, #0]
 801d37c:	28ff      	cmp	r0, #255	; 0xff
 801d37e:	d107      	bne.n	801d390 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801d380:	2bff      	cmp	r3, #255	; 0xff
 801d382:	d105      	bne.n	801d390 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801d384:	7015      	strb	r5, [r2, #0]
 801d386:	784b      	ldrb	r3, [r1, #1]
 801d388:	7053      	strb	r3, [r2, #1]
 801d38a:	788b      	ldrb	r3, [r1, #2]
 801d38c:	7093      	strb	r3, [r2, #2]
 801d38e:	bd30      	pop	{r4, r5, pc}
 801d390:	fb10 f003 	smulbb	r0, r0, r3
 801d394:	b283      	uxth	r3, r0
 801d396:	1c58      	adds	r0, r3, #1
 801d398:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d39c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d3a0:	b284      	uxth	r4, r0
 801d3a2:	43c0      	mvns	r0, r0
 801d3a4:	fb15 f504 	smulbb	r5, r5, r4
 801d3a8:	b2c3      	uxtb	r3, r0
 801d3aa:	7810      	ldrb	r0, [r2, #0]
 801d3ac:	fb00 5003 	mla	r0, r0, r3, r5
 801d3b0:	b280      	uxth	r0, r0
 801d3b2:	1c45      	adds	r5, r0, #1
 801d3b4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d3b8:	7855      	ldrb	r5, [r2, #1]
 801d3ba:	fb15 f503 	smulbb	r5, r5, r3
 801d3be:	1200      	asrs	r0, r0, #8
 801d3c0:	7010      	strb	r0, [r2, #0]
 801d3c2:	7848      	ldrb	r0, [r1, #1]
 801d3c4:	fb00 5004 	mla	r0, r0, r4, r5
 801d3c8:	b280      	uxth	r0, r0
 801d3ca:	1c45      	adds	r5, r0, #1
 801d3cc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d3d0:	1200      	asrs	r0, r0, #8
 801d3d2:	7050      	strb	r0, [r2, #1]
 801d3d4:	7888      	ldrb	r0, [r1, #2]
 801d3d6:	7891      	ldrb	r1, [r2, #2]
 801d3d8:	fb11 f303 	smulbb	r3, r1, r3
 801d3dc:	fb00 3304 	mla	r3, r0, r4, r3
 801d3e0:	b29b      	uxth	r3, r3
 801d3e2:	1c59      	adds	r1, r3, #1
 801d3e4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d3e8:	121b      	asrs	r3, r3, #8
 801d3ea:	e7cf      	b.n	801d38c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801d3ec <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3f0:	461d      	mov	r5, r3
 801d3f2:	b08f      	sub	sp, #60	; 0x3c
 801d3f4:	460c      	mov	r4, r1
 801d3f6:	4616      	mov	r6, r2
 801d3f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d3fa:	4680      	mov	r8, r0
 801d3fc:	6869      	ldr	r1, [r5, #4]
 801d3fe:	aa0a      	add	r2, sp, #40	; 0x28
 801d400:	6828      	ldr	r0, [r5, #0]
 801d402:	3604      	adds	r6, #4
 801d404:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 801d408:	4f57      	ldr	r7, [pc, #348]	; (801d568 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801d40a:	c203      	stmia	r2!, {r0, r1}
 801d40c:	6818      	ldr	r0, [r3, #0]
 801d40e:	aa0c      	add	r2, sp, #48	; 0x30
 801d410:	6859      	ldr	r1, [r3, #4]
 801d412:	c203      	stmia	r2!, {r0, r1}
 801d414:	a80a      	add	r0, sp, #40	; 0x28
 801d416:	f7f3 fff9 	bl	801140c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d41a:	4629      	mov	r1, r5
 801d41c:	a80c      	add	r0, sp, #48	; 0x30
 801d41e:	2502      	movs	r5, #2
 801d420:	f7f4 f81c 	bl	801145c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d424:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d428:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 801d42c:	f002 0301 	and.w	r3, r2, #1
 801d430:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 801d434:	9304      	str	r3, [sp, #16]
 801d436:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d43a:	f003 0101 	and.w	r1, r3, #1
 801d43e:	9103      	str	r1, [sp, #12]
 801d440:	9803      	ldr	r0, [sp, #12]
 801d442:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801d446:	4403      	add	r3, r0
 801d448:	6838      	ldr	r0, [r7, #0]
 801d44a:	fb01 2303 	mla	r3, r1, r3, r2
 801d44e:	fb93 f3f5 	sdiv	r3, r3, r5
 801d452:	18e5      	adds	r5, r4, r3
 801d454:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801d458:	441a      	add	r2, r3
 801d45a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d45e:	4419      	add	r1, r3
 801d460:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d464:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 801d468:	6803      	ldr	r3, [r0, #0]
 801d46a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d46c:	4798      	blx	r3
 801d46e:	4a3f      	ldr	r2, [pc, #252]	; (801d56c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801d470:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801d474:	8813      	ldrh	r3, [r2, #0]
 801d476:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d47a:	9207      	str	r2, [sp, #28]
 801d47c:	fb03 1404 	mla	r4, r3, r4, r1
 801d480:	fb0a f303 	mul.w	r3, sl, r3
 801d484:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d48c:	4404      	add	r4, r0
 801d48e:	18e3      	adds	r3, r4, r3
 801d490:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801d494:	9b05      	ldr	r3, [sp, #20]
 801d496:	429c      	cmp	r4, r3
 801d498:	d25d      	bcs.n	801d556 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801d49a:	9b04      	ldr	r3, [sp, #16]
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d037      	beq.n	801d510 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801d4a0:	782b      	ldrb	r3, [r5, #0]
 801d4a2:	1c6f      	adds	r7, r5, #1
 801d4a4:	f003 030f 	and.w	r3, r3, #15
 801d4a8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d4ac:	9309      	str	r3, [sp, #36]	; 0x24
 801d4ae:	0e1b      	lsrs	r3, r3, #24
 801d4b0:	d006      	beq.n	801d4c0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801d4b2:	9300      	str	r3, [sp, #0]
 801d4b4:	4622      	mov	r2, r4
 801d4b6:	464b      	mov	r3, r9
 801d4b8:	a909      	add	r1, sp, #36	; 0x24
 801d4ba:	4640      	mov	r0, r8
 801d4bc:	f7ff ff5a 	bl	801d374 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d4c0:	3403      	adds	r4, #3
 801d4c2:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d4c6:	f1ba 0f01 	cmp.w	sl, #1
 801d4ca:	dd24      	ble.n	801d516 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801d4cc:	783b      	ldrb	r3, [r7, #0]
 801d4ce:	091b      	lsrs	r3, r3, #4
 801d4d0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d4d4:	9308      	str	r3, [sp, #32]
 801d4d6:	0e1b      	lsrs	r3, r3, #24
 801d4d8:	d006      	beq.n	801d4e8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801d4da:	9300      	str	r3, [sp, #0]
 801d4dc:	4622      	mov	r2, r4
 801d4de:	464b      	mov	r3, r9
 801d4e0:	a908      	add	r1, sp, #32
 801d4e2:	4640      	mov	r0, r8
 801d4e4:	f7ff ff46 	bl	801d374 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d4e8:	f817 3b01 	ldrb.w	r3, [r7], #1
 801d4ec:	f003 030f 	and.w	r3, r3, #15
 801d4f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d4f4:	9309      	str	r3, [sp, #36]	; 0x24
 801d4f6:	0e1b      	lsrs	r3, r3, #24
 801d4f8:	d006      	beq.n	801d508 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801d4fa:	9300      	str	r3, [sp, #0]
 801d4fc:	1ce2      	adds	r2, r4, #3
 801d4fe:	464b      	mov	r3, r9
 801d500:	a909      	add	r1, sp, #36	; 0x24
 801d502:	4640      	mov	r0, r8
 801d504:	f7ff ff36 	bl	801d374 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d508:	3406      	adds	r4, #6
 801d50a:	f1aa 0a02 	sub.w	sl, sl, #2
 801d50e:	e7da      	b.n	801d4c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801d510:	462f      	mov	r7, r5
 801d512:	46da      	mov	sl, fp
 801d514:	e7d7      	b.n	801d4c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801d516:	d10e      	bne.n	801d536 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801d518:	783b      	ldrb	r3, [r7, #0]
 801d51a:	091b      	lsrs	r3, r3, #4
 801d51c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d520:	9309      	str	r3, [sp, #36]	; 0x24
 801d522:	0e1b      	lsrs	r3, r3, #24
 801d524:	d006      	beq.n	801d534 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801d526:	9300      	str	r3, [sp, #0]
 801d528:	4622      	mov	r2, r4
 801d52a:	464b      	mov	r3, r9
 801d52c:	a909      	add	r1, sp, #36	; 0x24
 801d52e:	4640      	mov	r0, r8
 801d530:	f7ff ff20 	bl	801d374 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d534:	3403      	adds	r4, #3
 801d536:	9b07      	ldr	r3, [sp, #28]
 801d538:	9a03      	ldr	r2, [sp, #12]
 801d53a:	881b      	ldrh	r3, [r3, #0]
 801d53c:	eba3 030b 	sub.w	r3, r3, fp
 801d540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d544:	441c      	add	r4, r3
 801d546:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d54a:	4413      	add	r3, r2
 801d54c:	2202      	movs	r2, #2
 801d54e:	fb93 f3f2 	sdiv	r3, r3, r2
 801d552:	441d      	add	r5, r3
 801d554:	e79e      	b.n	801d494 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801d556:	9b06      	ldr	r3, [sp, #24]
 801d558:	6818      	ldr	r0, [r3, #0]
 801d55a:	6803      	ldr	r3, [r0, #0]
 801d55c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d55e:	4798      	blx	r3
 801d560:	b00f      	add	sp, #60	; 0x3c
 801d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d566:	bf00      	nop
 801d568:	2401aa78 	.word	0x2401aa78
 801d56c:	2401aa72 	.word	0x2401aa72

0801d570 <CRC_Lock>:
 801d570:	4a20      	ldr	r2, [pc, #128]	; (801d5f4 <CRC_Lock+0x84>)
 801d572:	b530      	push	{r4, r5, lr}
 801d574:	6813      	ldr	r3, [r2, #0]
 801d576:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d57a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d57e:	f023 0301 	bic.w	r3, r3, #1
 801d582:	6013      	str	r3, [r2, #0]
 801d584:	4b1c      	ldr	r3, [pc, #112]	; (801d5f8 <CRC_Lock+0x88>)
 801d586:	681a      	ldr	r2, [r3, #0]
 801d588:	4022      	ands	r2, r4
 801d58a:	42aa      	cmp	r2, r5
 801d58c:	d005      	beq.n	801d59a <CRC_Lock+0x2a>
 801d58e:	681b      	ldr	r3, [r3, #0]
 801d590:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d594:	4023      	ands	r3, r4
 801d596:	4293      	cmp	r3, r2
 801d598:	d124      	bne.n	801d5e4 <CRC_Lock+0x74>
 801d59a:	4b18      	ldr	r3, [pc, #96]	; (801d5fc <CRC_Lock+0x8c>)
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	bb0b      	cbnz	r3, 801d5e4 <CRC_Lock+0x74>
 801d5a0:	4b17      	ldr	r3, [pc, #92]	; (801d600 <CRC_Lock+0x90>)
 801d5a2:	681a      	ldr	r2, [r3, #0]
 801d5a4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d5a8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d5ac:	d00d      	beq.n	801d5ca <CRC_Lock+0x5a>
 801d5ae:	681a      	ldr	r2, [r3, #0]
 801d5b0:	f240 4483 	movw	r4, #1155	; 0x483
 801d5b4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d5b8:	42a2      	cmp	r2, r4
 801d5ba:	d006      	beq.n	801d5ca <CRC_Lock+0x5a>
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	f240 4285 	movw	r2, #1157	; 0x485
 801d5c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d5c6:	4293      	cmp	r3, r2
 801d5c8:	d10c      	bne.n	801d5e4 <CRC_Lock+0x74>
 801d5ca:	4b0e      	ldr	r3, [pc, #56]	; (801d604 <CRC_Lock+0x94>)
 801d5cc:	2201      	movs	r2, #1
 801d5ce:	601a      	str	r2, [r3, #0]
 801d5d0:	681a      	ldr	r2, [r3, #0]
 801d5d2:	2a00      	cmp	r2, #0
 801d5d4:	d1fc      	bne.n	801d5d0 <CRC_Lock+0x60>
 801d5d6:	4b0c      	ldr	r3, [pc, #48]	; (801d608 <CRC_Lock+0x98>)
 801d5d8:	6018      	str	r0, [r3, #0]
 801d5da:	6818      	ldr	r0, [r3, #0]
 801d5dc:	1a43      	subs	r3, r0, r1
 801d5de:	4258      	negs	r0, r3
 801d5e0:	4158      	adcs	r0, r3
 801d5e2:	bd30      	pop	{r4, r5, pc}
 801d5e4:	4b09      	ldr	r3, [pc, #36]	; (801d60c <CRC_Lock+0x9c>)
 801d5e6:	2201      	movs	r2, #1
 801d5e8:	601a      	str	r2, [r3, #0]
 801d5ea:	681a      	ldr	r2, [r3, #0]
 801d5ec:	2a00      	cmp	r2, #0
 801d5ee:	d1fc      	bne.n	801d5ea <CRC_Lock+0x7a>
 801d5f0:	4b07      	ldr	r3, [pc, #28]	; (801d610 <CRC_Lock+0xa0>)
 801d5f2:	e7f1      	b.n	801d5d8 <CRC_Lock+0x68>
 801d5f4:	e0002000 	.word	0xe0002000
 801d5f8:	e000ed00 	.word	0xe000ed00
 801d5fc:	e0042000 	.word	0xe0042000
 801d600:	5c001000 	.word	0x5c001000
 801d604:	58024c08 	.word	0x58024c08
 801d608:	58024c00 	.word	0x58024c00
 801d60c:	40023008 	.word	0x40023008
 801d610:	40023000 	.word	0x40023000

0801d614 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d614:	6101      	str	r1, [r0, #16]
 801d616:	4770      	bx	lr

0801d618 <_ZN8touchgfx8Gestures4tickEv>:
 801d618:	7b83      	ldrb	r3, [r0, #14]
 801d61a:	b14b      	cbz	r3, 801d630 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d61c:	8903      	ldrh	r3, [r0, #8]
 801d61e:	3301      	adds	r3, #1
 801d620:	b29b      	uxth	r3, r3
 801d622:	2b07      	cmp	r3, #7
 801d624:	8103      	strh	r3, [r0, #8]
 801d626:	bf81      	itttt	hi
 801d628:	2300      	movhi	r3, #0
 801d62a:	8143      	strhhi	r3, [r0, #10]
 801d62c:	8183      	strhhi	r3, [r0, #12]
 801d62e:	7383      	strbhi	r3, [r0, #14]
 801d630:	4770      	bx	lr
	...

0801d634 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d634:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d638:	4698      	mov	r8, r3
 801d63a:	8883      	ldrh	r3, [r0, #4]
 801d63c:	4604      	mov	r4, r0
 801d63e:	4617      	mov	r7, r2
 801d640:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d644:	eba8 0303 	sub.w	r3, r8, r3
 801d648:	4a19      	ldr	r2, [pc, #100]	; (801d6b0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801d64a:	460e      	mov	r6, r1
 801d64c:	b21b      	sxth	r3, r3
 801d64e:	88c1      	ldrh	r1, [r0, #6]
 801d650:	9200      	str	r2, [sp, #0]
 801d652:	2000      	movs	r0, #0
 801d654:	2b00      	cmp	r3, #0
 801d656:	8aa2      	ldrh	r2, [r4, #20]
 801d658:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d65c:	bfb8      	it	lt
 801d65e:	425b      	neglt	r3, r3
 801d660:	f88d 0004 	strb.w	r0, [sp, #4]
 801d664:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d668:	b21b      	sxth	r3, r3
 801d66a:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d66e:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d672:	4293      	cmp	r3, r2
 801d674:	dc07      	bgt.n	801d686 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801d676:	1a69      	subs	r1, r5, r1
 801d678:	b209      	sxth	r1, r1
 801d67a:	2900      	cmp	r1, #0
 801d67c:	bfb8      	it	lt
 801d67e:	4249      	neglt	r1, r1
 801d680:	b209      	sxth	r1, r1
 801d682:	428a      	cmp	r2, r1
 801d684:	da10      	bge.n	801d6a8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801d686:	6920      	ldr	r0, [r4, #16]
 801d688:	4669      	mov	r1, sp
 801d68a:	eba8 0606 	sub.w	r6, r8, r6
 801d68e:	1bef      	subs	r7, r5, r7
 801d690:	6803      	ldr	r3, [r0, #0]
 801d692:	685b      	ldr	r3, [r3, #4]
 801d694:	4798      	blx	r3
 801d696:	2300      	movs	r3, #0
 801d698:	2001      	movs	r0, #1
 801d69a:	8166      	strh	r6, [r4, #10]
 801d69c:	8123      	strh	r3, [r4, #8]
 801d69e:	81a7      	strh	r7, [r4, #12]
 801d6a0:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d6a4:	80e5      	strh	r5, [r4, #6]
 801d6a6:	73a0      	strb	r0, [r4, #14]
 801d6a8:	b004      	add	sp, #16
 801d6aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6ae:	bf00      	nop
 801d6b0:	08020258 	.word	0x08020258

0801d6b4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d6b6:	461e      	mov	r6, r3
 801d6b8:	1e4b      	subs	r3, r1, #1
 801d6ba:	b085      	sub	sp, #20
 801d6bc:	4604      	mov	r4, r0
 801d6be:	2b01      	cmp	r3, #1
 801d6c0:	460d      	mov	r5, r1
 801d6c2:	4617      	mov	r7, r2
 801d6c4:	d84b      	bhi.n	801d75e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d6c6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d6ca:	1cd3      	adds	r3, r2, #3
 801d6cc:	b29b      	uxth	r3, r3
 801d6ce:	2b06      	cmp	r3, #6
 801d6d0:	d916      	bls.n	801d700 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d6d2:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d774 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d6d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d6da:	f8cd c004 	str.w	ip, [sp, #4]
 801d6de:	f04f 0c00 	mov.w	ip, #0
 801d6e2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d6e6:	6900      	ldr	r0, [r0, #16]
 801d6e8:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d6ec:	a901      	add	r1, sp, #4
 801d6ee:	f88d c008 	strb.w	ip, [sp, #8]
 801d6f2:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d6f6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d6fa:	6803      	ldr	r3, [r0, #0]
 801d6fc:	689b      	ldr	r3, [r3, #8]
 801d6fe:	4798      	blx	r3
 801d700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d704:	1cd3      	adds	r3, r2, #3
 801d706:	b29b      	uxth	r3, r3
 801d708:	2b06      	cmp	r3, #6
 801d70a:	d916      	bls.n	801d73a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d70c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d774 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d710:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d714:	f8cd c004 	str.w	ip, [sp, #4]
 801d718:	f04f 0c01 	mov.w	ip, #1
 801d71c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d720:	6920      	ldr	r0, [r4, #16]
 801d722:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d726:	a901      	add	r1, sp, #4
 801d728:	f88d c008 	strb.w	ip, [sp, #8]
 801d72c:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d730:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d734:	6803      	ldr	r3, [r0, #0]
 801d736:	689b      	ldr	r3, [r3, #8]
 801d738:	4798      	blx	r3
 801d73a:	4b0d      	ldr	r3, [pc, #52]	; (801d770 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d73c:	a901      	add	r1, sp, #4
 801d73e:	6920      	ldr	r0, [r4, #16]
 801d740:	9301      	str	r3, [sp, #4]
 801d742:	2300      	movs	r3, #0
 801d744:	f88d 5008 	strb.w	r5, [sp, #8]
 801d748:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d74c:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d750:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d754:	6803      	ldr	r3, [r0, #0]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	4798      	blx	r3
 801d75a:	b005      	add	sp, #20
 801d75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d75e:	2900      	cmp	r1, #0
 801d760:	d1eb      	bne.n	801d73a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d762:	80a2      	strh	r2, [r4, #4]
 801d764:	80c6      	strh	r6, [r0, #6]
 801d766:	60a1      	str	r1, [r4, #8]
 801d768:	81a1      	strh	r1, [r4, #12]
 801d76a:	73a1      	strb	r1, [r4, #14]
 801d76c:	e7e5      	b.n	801d73a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d76e:	bf00      	nop
 801d770:	08020244 	.word	0x08020244
 801d774:	0802026c 	.word	0x0802026c

0801d778 <__aeabi_atexit>:
 801d778:	460b      	mov	r3, r1
 801d77a:	4601      	mov	r1, r0
 801d77c:	4618      	mov	r0, r3
 801d77e:	f000 b90f 	b.w	801d9a0 <__cxa_atexit>

0801d782 <_ZdlPvj>:
 801d782:	f000 b812 	b.w	801d7aa <_ZdlPv>

0801d786 <__cxa_guard_acquire>:
 801d786:	6803      	ldr	r3, [r0, #0]
 801d788:	07db      	lsls	r3, r3, #31
 801d78a:	d406      	bmi.n	801d79a <__cxa_guard_acquire+0x14>
 801d78c:	7843      	ldrb	r3, [r0, #1]
 801d78e:	b103      	cbz	r3, 801d792 <__cxa_guard_acquire+0xc>
 801d790:	deff      	udf	#255	; 0xff
 801d792:	2301      	movs	r3, #1
 801d794:	7043      	strb	r3, [r0, #1]
 801d796:	4618      	mov	r0, r3
 801d798:	4770      	bx	lr
 801d79a:	2000      	movs	r0, #0
 801d79c:	4770      	bx	lr

0801d79e <__cxa_guard_release>:
 801d79e:	2301      	movs	r3, #1
 801d7a0:	6003      	str	r3, [r0, #0]
 801d7a2:	4770      	bx	lr

0801d7a4 <__cxa_pure_virtual>:
 801d7a4:	b508      	push	{r3, lr}
 801d7a6:	f000 f80f 	bl	801d7c8 <_ZSt9terminatev>

0801d7aa <_ZdlPv>:
 801d7aa:	f000 b845 	b.w	801d838 <free>

0801d7ae <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d7ae:	b508      	push	{r3, lr}
 801d7b0:	4780      	blx	r0
 801d7b2:	f000 f80e 	bl	801d7d2 <abort>
	...

0801d7b8 <_ZSt13get_terminatev>:
 801d7b8:	4b02      	ldr	r3, [pc, #8]	; (801d7c4 <_ZSt13get_terminatev+0xc>)
 801d7ba:	6818      	ldr	r0, [r3, #0]
 801d7bc:	f3bf 8f5b 	dmb	ish
 801d7c0:	4770      	bx	lr
 801d7c2:	bf00      	nop
 801d7c4:	2400007c 	.word	0x2400007c

0801d7c8 <_ZSt9terminatev>:
 801d7c8:	b508      	push	{r3, lr}
 801d7ca:	f7ff fff5 	bl	801d7b8 <_ZSt13get_terminatev>
 801d7ce:	f7ff ffee 	bl	801d7ae <_ZN10__cxxabiv111__terminateEPFvvE>

0801d7d2 <abort>:
 801d7d2:	b508      	push	{r3, lr}
 801d7d4:	2006      	movs	r0, #6
 801d7d6:	f000 fa39 	bl	801dc4c <raise>
 801d7da:	2001      	movs	r0, #1
 801d7dc:	f7e3 fcdc 	bl	8001198 <_exit>

0801d7e0 <__assert_func>:
 801d7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d7e2:	4614      	mov	r4, r2
 801d7e4:	461a      	mov	r2, r3
 801d7e6:	4b09      	ldr	r3, [pc, #36]	; (801d80c <__assert_func+0x2c>)
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	4605      	mov	r5, r0
 801d7ec:	68d8      	ldr	r0, [r3, #12]
 801d7ee:	b14c      	cbz	r4, 801d804 <__assert_func+0x24>
 801d7f0:	4b07      	ldr	r3, [pc, #28]	; (801d810 <__assert_func+0x30>)
 801d7f2:	9100      	str	r1, [sp, #0]
 801d7f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d7f8:	4906      	ldr	r1, [pc, #24]	; (801d814 <__assert_func+0x34>)
 801d7fa:	462b      	mov	r3, r5
 801d7fc:	f000 f982 	bl	801db04 <fiprintf>
 801d800:	f7ff ffe7 	bl	801d7d2 <abort>
 801d804:	4b04      	ldr	r3, [pc, #16]	; (801d818 <__assert_func+0x38>)
 801d806:	461c      	mov	r4, r3
 801d808:	e7f3      	b.n	801d7f2 <__assert_func+0x12>
 801d80a:	bf00      	nop
 801d80c:	240000d8 	.word	0x240000d8
 801d810:	080204dc 	.word	0x080204dc
 801d814:	080204e9 	.word	0x080204e9
 801d818:	08020517 	.word	0x08020517

0801d81c <atexit>:
 801d81c:	2300      	movs	r3, #0
 801d81e:	4601      	mov	r1, r0
 801d820:	461a      	mov	r2, r3
 801d822:	4618      	mov	r0, r3
 801d824:	f000 bb16 	b.w	801de54 <__register_exitproc>

0801d828 <malloc>:
 801d828:	4b02      	ldr	r3, [pc, #8]	; (801d834 <malloc+0xc>)
 801d82a:	4601      	mov	r1, r0
 801d82c:	6818      	ldr	r0, [r3, #0]
 801d82e:	f000 b82b 	b.w	801d888 <_malloc_r>
 801d832:	bf00      	nop
 801d834:	240000d8 	.word	0x240000d8

0801d838 <free>:
 801d838:	4b02      	ldr	r3, [pc, #8]	; (801d844 <free+0xc>)
 801d83a:	4601      	mov	r1, r0
 801d83c:	6818      	ldr	r0, [r3, #0]
 801d83e:	f000 bb67 	b.w	801df10 <_free_r>
 801d842:	bf00      	nop
 801d844:	240000d8 	.word	0x240000d8

0801d848 <sbrk_aligned>:
 801d848:	b570      	push	{r4, r5, r6, lr}
 801d84a:	4e0e      	ldr	r6, [pc, #56]	; (801d884 <sbrk_aligned+0x3c>)
 801d84c:	460c      	mov	r4, r1
 801d84e:	6831      	ldr	r1, [r6, #0]
 801d850:	4605      	mov	r5, r0
 801d852:	b911      	cbnz	r1, 801d85a <sbrk_aligned+0x12>
 801d854:	f000 faa0 	bl	801dd98 <_sbrk_r>
 801d858:	6030      	str	r0, [r6, #0]
 801d85a:	4621      	mov	r1, r4
 801d85c:	4628      	mov	r0, r5
 801d85e:	f000 fa9b 	bl	801dd98 <_sbrk_r>
 801d862:	1c43      	adds	r3, r0, #1
 801d864:	d00a      	beq.n	801d87c <sbrk_aligned+0x34>
 801d866:	1cc4      	adds	r4, r0, #3
 801d868:	f024 0403 	bic.w	r4, r4, #3
 801d86c:	42a0      	cmp	r0, r4
 801d86e:	d007      	beq.n	801d880 <sbrk_aligned+0x38>
 801d870:	1a21      	subs	r1, r4, r0
 801d872:	4628      	mov	r0, r5
 801d874:	f000 fa90 	bl	801dd98 <_sbrk_r>
 801d878:	3001      	adds	r0, #1
 801d87a:	d101      	bne.n	801d880 <sbrk_aligned+0x38>
 801d87c:	f04f 34ff 	mov.w	r4, #4294967295
 801d880:	4620      	mov	r0, r4
 801d882:	bd70      	pop	{r4, r5, r6, pc}
 801d884:	2401b3a8 	.word	0x2401b3a8

0801d888 <_malloc_r>:
 801d888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d88c:	1ccd      	adds	r5, r1, #3
 801d88e:	f025 0503 	bic.w	r5, r5, #3
 801d892:	3508      	adds	r5, #8
 801d894:	2d0c      	cmp	r5, #12
 801d896:	bf38      	it	cc
 801d898:	250c      	movcc	r5, #12
 801d89a:	2d00      	cmp	r5, #0
 801d89c:	4607      	mov	r7, r0
 801d89e:	db01      	blt.n	801d8a4 <_malloc_r+0x1c>
 801d8a0:	42a9      	cmp	r1, r5
 801d8a2:	d905      	bls.n	801d8b0 <_malloc_r+0x28>
 801d8a4:	230c      	movs	r3, #12
 801d8a6:	603b      	str	r3, [r7, #0]
 801d8a8:	2600      	movs	r6, #0
 801d8aa:	4630      	mov	r0, r6
 801d8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d8b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d984 <_malloc_r+0xfc>
 801d8b4:	f000 f868 	bl	801d988 <__malloc_lock>
 801d8b8:	f8d8 3000 	ldr.w	r3, [r8]
 801d8bc:	461c      	mov	r4, r3
 801d8be:	bb5c      	cbnz	r4, 801d918 <_malloc_r+0x90>
 801d8c0:	4629      	mov	r1, r5
 801d8c2:	4638      	mov	r0, r7
 801d8c4:	f7ff ffc0 	bl	801d848 <sbrk_aligned>
 801d8c8:	1c43      	adds	r3, r0, #1
 801d8ca:	4604      	mov	r4, r0
 801d8cc:	d155      	bne.n	801d97a <_malloc_r+0xf2>
 801d8ce:	f8d8 4000 	ldr.w	r4, [r8]
 801d8d2:	4626      	mov	r6, r4
 801d8d4:	2e00      	cmp	r6, #0
 801d8d6:	d145      	bne.n	801d964 <_malloc_r+0xdc>
 801d8d8:	2c00      	cmp	r4, #0
 801d8da:	d048      	beq.n	801d96e <_malloc_r+0xe6>
 801d8dc:	6823      	ldr	r3, [r4, #0]
 801d8de:	4631      	mov	r1, r6
 801d8e0:	4638      	mov	r0, r7
 801d8e2:	eb04 0903 	add.w	r9, r4, r3
 801d8e6:	f000 fa57 	bl	801dd98 <_sbrk_r>
 801d8ea:	4581      	cmp	r9, r0
 801d8ec:	d13f      	bne.n	801d96e <_malloc_r+0xe6>
 801d8ee:	6821      	ldr	r1, [r4, #0]
 801d8f0:	1a6d      	subs	r5, r5, r1
 801d8f2:	4629      	mov	r1, r5
 801d8f4:	4638      	mov	r0, r7
 801d8f6:	f7ff ffa7 	bl	801d848 <sbrk_aligned>
 801d8fa:	3001      	adds	r0, #1
 801d8fc:	d037      	beq.n	801d96e <_malloc_r+0xe6>
 801d8fe:	6823      	ldr	r3, [r4, #0]
 801d900:	442b      	add	r3, r5
 801d902:	6023      	str	r3, [r4, #0]
 801d904:	f8d8 3000 	ldr.w	r3, [r8]
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d038      	beq.n	801d97e <_malloc_r+0xf6>
 801d90c:	685a      	ldr	r2, [r3, #4]
 801d90e:	42a2      	cmp	r2, r4
 801d910:	d12b      	bne.n	801d96a <_malloc_r+0xe2>
 801d912:	2200      	movs	r2, #0
 801d914:	605a      	str	r2, [r3, #4]
 801d916:	e00f      	b.n	801d938 <_malloc_r+0xb0>
 801d918:	6822      	ldr	r2, [r4, #0]
 801d91a:	1b52      	subs	r2, r2, r5
 801d91c:	d41f      	bmi.n	801d95e <_malloc_r+0xd6>
 801d91e:	2a0b      	cmp	r2, #11
 801d920:	d917      	bls.n	801d952 <_malloc_r+0xca>
 801d922:	1961      	adds	r1, r4, r5
 801d924:	42a3      	cmp	r3, r4
 801d926:	6025      	str	r5, [r4, #0]
 801d928:	bf18      	it	ne
 801d92a:	6059      	strne	r1, [r3, #4]
 801d92c:	6863      	ldr	r3, [r4, #4]
 801d92e:	bf08      	it	eq
 801d930:	f8c8 1000 	streq.w	r1, [r8]
 801d934:	5162      	str	r2, [r4, r5]
 801d936:	604b      	str	r3, [r1, #4]
 801d938:	4638      	mov	r0, r7
 801d93a:	f104 060b 	add.w	r6, r4, #11
 801d93e:	f000 f829 	bl	801d994 <__malloc_unlock>
 801d942:	f026 0607 	bic.w	r6, r6, #7
 801d946:	1d23      	adds	r3, r4, #4
 801d948:	1af2      	subs	r2, r6, r3
 801d94a:	d0ae      	beq.n	801d8aa <_malloc_r+0x22>
 801d94c:	1b9b      	subs	r3, r3, r6
 801d94e:	50a3      	str	r3, [r4, r2]
 801d950:	e7ab      	b.n	801d8aa <_malloc_r+0x22>
 801d952:	42a3      	cmp	r3, r4
 801d954:	6862      	ldr	r2, [r4, #4]
 801d956:	d1dd      	bne.n	801d914 <_malloc_r+0x8c>
 801d958:	f8c8 2000 	str.w	r2, [r8]
 801d95c:	e7ec      	b.n	801d938 <_malloc_r+0xb0>
 801d95e:	4623      	mov	r3, r4
 801d960:	6864      	ldr	r4, [r4, #4]
 801d962:	e7ac      	b.n	801d8be <_malloc_r+0x36>
 801d964:	4634      	mov	r4, r6
 801d966:	6876      	ldr	r6, [r6, #4]
 801d968:	e7b4      	b.n	801d8d4 <_malloc_r+0x4c>
 801d96a:	4613      	mov	r3, r2
 801d96c:	e7cc      	b.n	801d908 <_malloc_r+0x80>
 801d96e:	230c      	movs	r3, #12
 801d970:	603b      	str	r3, [r7, #0]
 801d972:	4638      	mov	r0, r7
 801d974:	f000 f80e 	bl	801d994 <__malloc_unlock>
 801d978:	e797      	b.n	801d8aa <_malloc_r+0x22>
 801d97a:	6025      	str	r5, [r4, #0]
 801d97c:	e7dc      	b.n	801d938 <_malloc_r+0xb0>
 801d97e:	605b      	str	r3, [r3, #4]
 801d980:	deff      	udf	#255	; 0xff
 801d982:	bf00      	nop
 801d984:	2401b3a4 	.word	0x2401b3a4

0801d988 <__malloc_lock>:
 801d988:	4801      	ldr	r0, [pc, #4]	; (801d990 <__malloc_lock+0x8>)
 801d98a:	f000 ba52 	b.w	801de32 <__retarget_lock_acquire_recursive>
 801d98e:	bf00      	nop
 801d990:	2401b4ed 	.word	0x2401b4ed

0801d994 <__malloc_unlock>:
 801d994:	4801      	ldr	r0, [pc, #4]	; (801d99c <__malloc_unlock+0x8>)
 801d996:	f000 ba4d 	b.w	801de34 <__retarget_lock_release_recursive>
 801d99a:	bf00      	nop
 801d99c:	2401b4ed 	.word	0x2401b4ed

0801d9a0 <__cxa_atexit>:
 801d9a0:	b510      	push	{r4, lr}
 801d9a2:	4c05      	ldr	r4, [pc, #20]	; (801d9b8 <__cxa_atexit+0x18>)
 801d9a4:	4613      	mov	r3, r2
 801d9a6:	b12c      	cbz	r4, 801d9b4 <__cxa_atexit+0x14>
 801d9a8:	460a      	mov	r2, r1
 801d9aa:	4601      	mov	r1, r0
 801d9ac:	2002      	movs	r0, #2
 801d9ae:	f000 fa51 	bl	801de54 <__register_exitproc>
 801d9b2:	bd10      	pop	{r4, pc}
 801d9b4:	4620      	mov	r0, r4
 801d9b6:	e7fc      	b.n	801d9b2 <__cxa_atexit+0x12>
 801d9b8:	0801de55 	.word	0x0801de55

0801d9bc <std>:
 801d9bc:	2300      	movs	r3, #0
 801d9be:	b510      	push	{r4, lr}
 801d9c0:	4604      	mov	r4, r0
 801d9c2:	e9c0 3300 	strd	r3, r3, [r0]
 801d9c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d9ca:	6083      	str	r3, [r0, #8]
 801d9cc:	8181      	strh	r1, [r0, #12]
 801d9ce:	6643      	str	r3, [r0, #100]	; 0x64
 801d9d0:	81c2      	strh	r2, [r0, #14]
 801d9d2:	6183      	str	r3, [r0, #24]
 801d9d4:	4619      	mov	r1, r3
 801d9d6:	2208      	movs	r2, #8
 801d9d8:	305c      	adds	r0, #92	; 0x5c
 801d9da:	f000 f906 	bl	801dbea <memset>
 801d9de:	4b0d      	ldr	r3, [pc, #52]	; (801da14 <std+0x58>)
 801d9e0:	6263      	str	r3, [r4, #36]	; 0x24
 801d9e2:	4b0d      	ldr	r3, [pc, #52]	; (801da18 <std+0x5c>)
 801d9e4:	62a3      	str	r3, [r4, #40]	; 0x28
 801d9e6:	4b0d      	ldr	r3, [pc, #52]	; (801da1c <std+0x60>)
 801d9e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d9ea:	4b0d      	ldr	r3, [pc, #52]	; (801da20 <std+0x64>)
 801d9ec:	6323      	str	r3, [r4, #48]	; 0x30
 801d9ee:	4b0d      	ldr	r3, [pc, #52]	; (801da24 <std+0x68>)
 801d9f0:	6224      	str	r4, [r4, #32]
 801d9f2:	429c      	cmp	r4, r3
 801d9f4:	d006      	beq.n	801da04 <std+0x48>
 801d9f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d9fa:	4294      	cmp	r4, r2
 801d9fc:	d002      	beq.n	801da04 <std+0x48>
 801d9fe:	33d0      	adds	r3, #208	; 0xd0
 801da00:	429c      	cmp	r4, r3
 801da02:	d105      	bne.n	801da10 <std+0x54>
 801da04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801da08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da0c:	f000 ba10 	b.w	801de30 <__retarget_lock_init_recursive>
 801da10:	bd10      	pop	{r4, pc}
 801da12:	bf00      	nop
 801da14:	0801db65 	.word	0x0801db65
 801da18:	0801db87 	.word	0x0801db87
 801da1c:	0801dbbf 	.word	0x0801dbbf
 801da20:	0801dbe3 	.word	0x0801dbe3
 801da24:	2401b3ac 	.word	0x2401b3ac

0801da28 <stdio_exit_handler>:
 801da28:	4a02      	ldr	r2, [pc, #8]	; (801da34 <stdio_exit_handler+0xc>)
 801da2a:	4903      	ldr	r1, [pc, #12]	; (801da38 <stdio_exit_handler+0x10>)
 801da2c:	4803      	ldr	r0, [pc, #12]	; (801da3c <stdio_exit_handler+0x14>)
 801da2e:	f000 b87b 	b.w	801db28 <_fwalk_sglue>
 801da32:	bf00      	nop
 801da34:	24000080 	.word	0x24000080
 801da38:	0801e65d 	.word	0x0801e65d
 801da3c:	2400008c 	.word	0x2400008c

0801da40 <cleanup_stdio>:
 801da40:	6841      	ldr	r1, [r0, #4]
 801da42:	4b0c      	ldr	r3, [pc, #48]	; (801da74 <cleanup_stdio+0x34>)
 801da44:	4299      	cmp	r1, r3
 801da46:	b510      	push	{r4, lr}
 801da48:	4604      	mov	r4, r0
 801da4a:	d001      	beq.n	801da50 <cleanup_stdio+0x10>
 801da4c:	f000 fe06 	bl	801e65c <_fflush_r>
 801da50:	68a1      	ldr	r1, [r4, #8]
 801da52:	4b09      	ldr	r3, [pc, #36]	; (801da78 <cleanup_stdio+0x38>)
 801da54:	4299      	cmp	r1, r3
 801da56:	d002      	beq.n	801da5e <cleanup_stdio+0x1e>
 801da58:	4620      	mov	r0, r4
 801da5a:	f000 fdff 	bl	801e65c <_fflush_r>
 801da5e:	68e1      	ldr	r1, [r4, #12]
 801da60:	4b06      	ldr	r3, [pc, #24]	; (801da7c <cleanup_stdio+0x3c>)
 801da62:	4299      	cmp	r1, r3
 801da64:	d004      	beq.n	801da70 <cleanup_stdio+0x30>
 801da66:	4620      	mov	r0, r4
 801da68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801da6c:	f000 bdf6 	b.w	801e65c <_fflush_r>
 801da70:	bd10      	pop	{r4, pc}
 801da72:	bf00      	nop
 801da74:	2401b3ac 	.word	0x2401b3ac
 801da78:	2401b414 	.word	0x2401b414
 801da7c:	2401b47c 	.word	0x2401b47c

0801da80 <global_stdio_init.part.0>:
 801da80:	b510      	push	{r4, lr}
 801da82:	4b0b      	ldr	r3, [pc, #44]	; (801dab0 <global_stdio_init.part.0+0x30>)
 801da84:	4c0b      	ldr	r4, [pc, #44]	; (801dab4 <global_stdio_init.part.0+0x34>)
 801da86:	4a0c      	ldr	r2, [pc, #48]	; (801dab8 <global_stdio_init.part.0+0x38>)
 801da88:	601a      	str	r2, [r3, #0]
 801da8a:	4620      	mov	r0, r4
 801da8c:	2200      	movs	r2, #0
 801da8e:	2104      	movs	r1, #4
 801da90:	f7ff ff94 	bl	801d9bc <std>
 801da94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801da98:	2201      	movs	r2, #1
 801da9a:	2109      	movs	r1, #9
 801da9c:	f7ff ff8e 	bl	801d9bc <std>
 801daa0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801daa4:	2202      	movs	r2, #2
 801daa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daaa:	2112      	movs	r1, #18
 801daac:	f7ff bf86 	b.w	801d9bc <std>
 801dab0:	2401b4e4 	.word	0x2401b4e4
 801dab4:	2401b3ac 	.word	0x2401b3ac
 801dab8:	0801da29 	.word	0x0801da29

0801dabc <__sfp_lock_acquire>:
 801dabc:	4801      	ldr	r0, [pc, #4]	; (801dac4 <__sfp_lock_acquire+0x8>)
 801dabe:	f000 b9b8 	b.w	801de32 <__retarget_lock_acquire_recursive>
 801dac2:	bf00      	nop
 801dac4:	2401b4ee 	.word	0x2401b4ee

0801dac8 <__sfp_lock_release>:
 801dac8:	4801      	ldr	r0, [pc, #4]	; (801dad0 <__sfp_lock_release+0x8>)
 801daca:	f000 b9b3 	b.w	801de34 <__retarget_lock_release_recursive>
 801dace:	bf00      	nop
 801dad0:	2401b4ee 	.word	0x2401b4ee

0801dad4 <__sinit>:
 801dad4:	b510      	push	{r4, lr}
 801dad6:	4604      	mov	r4, r0
 801dad8:	f7ff fff0 	bl	801dabc <__sfp_lock_acquire>
 801dadc:	6a23      	ldr	r3, [r4, #32]
 801dade:	b11b      	cbz	r3, 801dae8 <__sinit+0x14>
 801dae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dae4:	f7ff bff0 	b.w	801dac8 <__sfp_lock_release>
 801dae8:	4b04      	ldr	r3, [pc, #16]	; (801dafc <__sinit+0x28>)
 801daea:	6223      	str	r3, [r4, #32]
 801daec:	4b04      	ldr	r3, [pc, #16]	; (801db00 <__sinit+0x2c>)
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	2b00      	cmp	r3, #0
 801daf2:	d1f5      	bne.n	801dae0 <__sinit+0xc>
 801daf4:	f7ff ffc4 	bl	801da80 <global_stdio_init.part.0>
 801daf8:	e7f2      	b.n	801dae0 <__sinit+0xc>
 801dafa:	bf00      	nop
 801dafc:	0801da41 	.word	0x0801da41
 801db00:	2401b4e4 	.word	0x2401b4e4

0801db04 <fiprintf>:
 801db04:	b40e      	push	{r1, r2, r3}
 801db06:	b503      	push	{r0, r1, lr}
 801db08:	4601      	mov	r1, r0
 801db0a:	ab03      	add	r3, sp, #12
 801db0c:	4805      	ldr	r0, [pc, #20]	; (801db24 <fiprintf+0x20>)
 801db0e:	f853 2b04 	ldr.w	r2, [r3], #4
 801db12:	6800      	ldr	r0, [r0, #0]
 801db14:	9301      	str	r3, [sp, #4]
 801db16:	f000 fa71 	bl	801dffc <_vfiprintf_r>
 801db1a:	b002      	add	sp, #8
 801db1c:	f85d eb04 	ldr.w	lr, [sp], #4
 801db20:	b003      	add	sp, #12
 801db22:	4770      	bx	lr
 801db24:	240000d8 	.word	0x240000d8

0801db28 <_fwalk_sglue>:
 801db28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db2c:	4607      	mov	r7, r0
 801db2e:	4688      	mov	r8, r1
 801db30:	4614      	mov	r4, r2
 801db32:	2600      	movs	r6, #0
 801db34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801db38:	f1b9 0901 	subs.w	r9, r9, #1
 801db3c:	d505      	bpl.n	801db4a <_fwalk_sglue+0x22>
 801db3e:	6824      	ldr	r4, [r4, #0]
 801db40:	2c00      	cmp	r4, #0
 801db42:	d1f7      	bne.n	801db34 <_fwalk_sglue+0xc>
 801db44:	4630      	mov	r0, r6
 801db46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db4a:	89ab      	ldrh	r3, [r5, #12]
 801db4c:	2b01      	cmp	r3, #1
 801db4e:	d907      	bls.n	801db60 <_fwalk_sglue+0x38>
 801db50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801db54:	3301      	adds	r3, #1
 801db56:	d003      	beq.n	801db60 <_fwalk_sglue+0x38>
 801db58:	4629      	mov	r1, r5
 801db5a:	4638      	mov	r0, r7
 801db5c:	47c0      	blx	r8
 801db5e:	4306      	orrs	r6, r0
 801db60:	3568      	adds	r5, #104	; 0x68
 801db62:	e7e9      	b.n	801db38 <_fwalk_sglue+0x10>

0801db64 <__sread>:
 801db64:	b510      	push	{r4, lr}
 801db66:	460c      	mov	r4, r1
 801db68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db6c:	f000 f8ee 	bl	801dd4c <_read_r>
 801db70:	2800      	cmp	r0, #0
 801db72:	bfab      	itete	ge
 801db74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801db76:	89a3      	ldrhlt	r3, [r4, #12]
 801db78:	181b      	addge	r3, r3, r0
 801db7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801db7e:	bfac      	ite	ge
 801db80:	6563      	strge	r3, [r4, #84]	; 0x54
 801db82:	81a3      	strhlt	r3, [r4, #12]
 801db84:	bd10      	pop	{r4, pc}

0801db86 <__swrite>:
 801db86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801db8a:	461f      	mov	r7, r3
 801db8c:	898b      	ldrh	r3, [r1, #12]
 801db8e:	05db      	lsls	r3, r3, #23
 801db90:	4605      	mov	r5, r0
 801db92:	460c      	mov	r4, r1
 801db94:	4616      	mov	r6, r2
 801db96:	d505      	bpl.n	801dba4 <__swrite+0x1e>
 801db98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db9c:	2302      	movs	r3, #2
 801db9e:	2200      	movs	r2, #0
 801dba0:	f000 f8c2 	bl	801dd28 <_lseek_r>
 801dba4:	89a3      	ldrh	r3, [r4, #12]
 801dba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dbaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dbae:	81a3      	strh	r3, [r4, #12]
 801dbb0:	4632      	mov	r2, r6
 801dbb2:	463b      	mov	r3, r7
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dbba:	f000 b8fd 	b.w	801ddb8 <_write_r>

0801dbbe <__sseek>:
 801dbbe:	b510      	push	{r4, lr}
 801dbc0:	460c      	mov	r4, r1
 801dbc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbc6:	f000 f8af 	bl	801dd28 <_lseek_r>
 801dbca:	1c43      	adds	r3, r0, #1
 801dbcc:	89a3      	ldrh	r3, [r4, #12]
 801dbce:	bf15      	itete	ne
 801dbd0:	6560      	strne	r0, [r4, #84]	; 0x54
 801dbd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801dbd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dbda:	81a3      	strheq	r3, [r4, #12]
 801dbdc:	bf18      	it	ne
 801dbde:	81a3      	strhne	r3, [r4, #12]
 801dbe0:	bd10      	pop	{r4, pc}

0801dbe2 <__sclose>:
 801dbe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dbe6:	f000 b839 	b.w	801dc5c <_close_r>

0801dbea <memset>:
 801dbea:	4402      	add	r2, r0
 801dbec:	4603      	mov	r3, r0
 801dbee:	4293      	cmp	r3, r2
 801dbf0:	d100      	bne.n	801dbf4 <memset+0xa>
 801dbf2:	4770      	bx	lr
 801dbf4:	f803 1b01 	strb.w	r1, [r3], #1
 801dbf8:	e7f9      	b.n	801dbee <memset+0x4>

0801dbfa <_raise_r>:
 801dbfa:	291f      	cmp	r1, #31
 801dbfc:	b538      	push	{r3, r4, r5, lr}
 801dbfe:	4604      	mov	r4, r0
 801dc00:	460d      	mov	r5, r1
 801dc02:	d904      	bls.n	801dc0e <_raise_r+0x14>
 801dc04:	2316      	movs	r3, #22
 801dc06:	6003      	str	r3, [r0, #0]
 801dc08:	f04f 30ff 	mov.w	r0, #4294967295
 801dc0c:	bd38      	pop	{r3, r4, r5, pc}
 801dc0e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801dc10:	b112      	cbz	r2, 801dc18 <_raise_r+0x1e>
 801dc12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dc16:	b94b      	cbnz	r3, 801dc2c <_raise_r+0x32>
 801dc18:	4620      	mov	r0, r4
 801dc1a:	f000 f8bb 	bl	801dd94 <_getpid_r>
 801dc1e:	462a      	mov	r2, r5
 801dc20:	4601      	mov	r1, r0
 801dc22:	4620      	mov	r0, r4
 801dc24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dc28:	f000 b8a2 	b.w	801dd70 <_kill_r>
 801dc2c:	2b01      	cmp	r3, #1
 801dc2e:	d00a      	beq.n	801dc46 <_raise_r+0x4c>
 801dc30:	1c59      	adds	r1, r3, #1
 801dc32:	d103      	bne.n	801dc3c <_raise_r+0x42>
 801dc34:	2316      	movs	r3, #22
 801dc36:	6003      	str	r3, [r0, #0]
 801dc38:	2001      	movs	r0, #1
 801dc3a:	e7e7      	b.n	801dc0c <_raise_r+0x12>
 801dc3c:	2400      	movs	r4, #0
 801dc3e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dc42:	4628      	mov	r0, r5
 801dc44:	4798      	blx	r3
 801dc46:	2000      	movs	r0, #0
 801dc48:	e7e0      	b.n	801dc0c <_raise_r+0x12>
	...

0801dc4c <raise>:
 801dc4c:	4b02      	ldr	r3, [pc, #8]	; (801dc58 <raise+0xc>)
 801dc4e:	4601      	mov	r1, r0
 801dc50:	6818      	ldr	r0, [r3, #0]
 801dc52:	f7ff bfd2 	b.w	801dbfa <_raise_r>
 801dc56:	bf00      	nop
 801dc58:	240000d8 	.word	0x240000d8

0801dc5c <_close_r>:
 801dc5c:	b538      	push	{r3, r4, r5, lr}
 801dc5e:	4d06      	ldr	r5, [pc, #24]	; (801dc78 <_close_r+0x1c>)
 801dc60:	2300      	movs	r3, #0
 801dc62:	4604      	mov	r4, r0
 801dc64:	4608      	mov	r0, r1
 801dc66:	602b      	str	r3, [r5, #0]
 801dc68:	f7e3 fad9 	bl	800121e <_close>
 801dc6c:	1c43      	adds	r3, r0, #1
 801dc6e:	d102      	bne.n	801dc76 <_close_r+0x1a>
 801dc70:	682b      	ldr	r3, [r5, #0]
 801dc72:	b103      	cbz	r3, 801dc76 <_close_r+0x1a>
 801dc74:	6023      	str	r3, [r4, #0]
 801dc76:	bd38      	pop	{r3, r4, r5, pc}
 801dc78:	2401b4e8 	.word	0x2401b4e8

0801dc7c <_reclaim_reent>:
 801dc7c:	4b29      	ldr	r3, [pc, #164]	; (801dd24 <_reclaim_reent+0xa8>)
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	4283      	cmp	r3, r0
 801dc82:	b570      	push	{r4, r5, r6, lr}
 801dc84:	4604      	mov	r4, r0
 801dc86:	d04b      	beq.n	801dd20 <_reclaim_reent+0xa4>
 801dc88:	69c3      	ldr	r3, [r0, #28]
 801dc8a:	b143      	cbz	r3, 801dc9e <_reclaim_reent+0x22>
 801dc8c:	68db      	ldr	r3, [r3, #12]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d144      	bne.n	801dd1c <_reclaim_reent+0xa0>
 801dc92:	69e3      	ldr	r3, [r4, #28]
 801dc94:	6819      	ldr	r1, [r3, #0]
 801dc96:	b111      	cbz	r1, 801dc9e <_reclaim_reent+0x22>
 801dc98:	4620      	mov	r0, r4
 801dc9a:	f000 f939 	bl	801df10 <_free_r>
 801dc9e:	6961      	ldr	r1, [r4, #20]
 801dca0:	b111      	cbz	r1, 801dca8 <_reclaim_reent+0x2c>
 801dca2:	4620      	mov	r0, r4
 801dca4:	f000 f934 	bl	801df10 <_free_r>
 801dca8:	69e1      	ldr	r1, [r4, #28]
 801dcaa:	b111      	cbz	r1, 801dcb2 <_reclaim_reent+0x36>
 801dcac:	4620      	mov	r0, r4
 801dcae:	f000 f92f 	bl	801df10 <_free_r>
 801dcb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801dcb4:	b111      	cbz	r1, 801dcbc <_reclaim_reent+0x40>
 801dcb6:	4620      	mov	r0, r4
 801dcb8:	f000 f92a 	bl	801df10 <_free_r>
 801dcbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dcbe:	b111      	cbz	r1, 801dcc6 <_reclaim_reent+0x4a>
 801dcc0:	4620      	mov	r0, r4
 801dcc2:	f000 f925 	bl	801df10 <_free_r>
 801dcc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801dcc8:	b111      	cbz	r1, 801dcd0 <_reclaim_reent+0x54>
 801dcca:	4620      	mov	r0, r4
 801dccc:	f000 f920 	bl	801df10 <_free_r>
 801dcd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801dcd2:	b111      	cbz	r1, 801dcda <_reclaim_reent+0x5e>
 801dcd4:	4620      	mov	r0, r4
 801dcd6:	f000 f91b 	bl	801df10 <_free_r>
 801dcda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801dcdc:	b111      	cbz	r1, 801dce4 <_reclaim_reent+0x68>
 801dcde:	4620      	mov	r0, r4
 801dce0:	f000 f916 	bl	801df10 <_free_r>
 801dce4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801dce6:	b111      	cbz	r1, 801dcee <_reclaim_reent+0x72>
 801dce8:	4620      	mov	r0, r4
 801dcea:	f000 f911 	bl	801df10 <_free_r>
 801dcee:	6a23      	ldr	r3, [r4, #32]
 801dcf0:	b1b3      	cbz	r3, 801dd20 <_reclaim_reent+0xa4>
 801dcf2:	4620      	mov	r0, r4
 801dcf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dcf8:	4718      	bx	r3
 801dcfa:	5949      	ldr	r1, [r1, r5]
 801dcfc:	b941      	cbnz	r1, 801dd10 <_reclaim_reent+0x94>
 801dcfe:	3504      	adds	r5, #4
 801dd00:	69e3      	ldr	r3, [r4, #28]
 801dd02:	2d80      	cmp	r5, #128	; 0x80
 801dd04:	68d9      	ldr	r1, [r3, #12]
 801dd06:	d1f8      	bne.n	801dcfa <_reclaim_reent+0x7e>
 801dd08:	4620      	mov	r0, r4
 801dd0a:	f000 f901 	bl	801df10 <_free_r>
 801dd0e:	e7c0      	b.n	801dc92 <_reclaim_reent+0x16>
 801dd10:	680e      	ldr	r6, [r1, #0]
 801dd12:	4620      	mov	r0, r4
 801dd14:	f000 f8fc 	bl	801df10 <_free_r>
 801dd18:	4631      	mov	r1, r6
 801dd1a:	e7ef      	b.n	801dcfc <_reclaim_reent+0x80>
 801dd1c:	2500      	movs	r5, #0
 801dd1e:	e7ef      	b.n	801dd00 <_reclaim_reent+0x84>
 801dd20:	bd70      	pop	{r4, r5, r6, pc}
 801dd22:	bf00      	nop
 801dd24:	240000d8 	.word	0x240000d8

0801dd28 <_lseek_r>:
 801dd28:	b538      	push	{r3, r4, r5, lr}
 801dd2a:	4d07      	ldr	r5, [pc, #28]	; (801dd48 <_lseek_r+0x20>)
 801dd2c:	4604      	mov	r4, r0
 801dd2e:	4608      	mov	r0, r1
 801dd30:	4611      	mov	r1, r2
 801dd32:	2200      	movs	r2, #0
 801dd34:	602a      	str	r2, [r5, #0]
 801dd36:	461a      	mov	r2, r3
 801dd38:	f7e3 fa98 	bl	800126c <_lseek>
 801dd3c:	1c43      	adds	r3, r0, #1
 801dd3e:	d102      	bne.n	801dd46 <_lseek_r+0x1e>
 801dd40:	682b      	ldr	r3, [r5, #0]
 801dd42:	b103      	cbz	r3, 801dd46 <_lseek_r+0x1e>
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	bd38      	pop	{r3, r4, r5, pc}
 801dd48:	2401b4e8 	.word	0x2401b4e8

0801dd4c <_read_r>:
 801dd4c:	b538      	push	{r3, r4, r5, lr}
 801dd4e:	4d07      	ldr	r5, [pc, #28]	; (801dd6c <_read_r+0x20>)
 801dd50:	4604      	mov	r4, r0
 801dd52:	4608      	mov	r0, r1
 801dd54:	4611      	mov	r1, r2
 801dd56:	2200      	movs	r2, #0
 801dd58:	602a      	str	r2, [r5, #0]
 801dd5a:	461a      	mov	r2, r3
 801dd5c:	f7e3 fa26 	bl	80011ac <_read>
 801dd60:	1c43      	adds	r3, r0, #1
 801dd62:	d102      	bne.n	801dd6a <_read_r+0x1e>
 801dd64:	682b      	ldr	r3, [r5, #0]
 801dd66:	b103      	cbz	r3, 801dd6a <_read_r+0x1e>
 801dd68:	6023      	str	r3, [r4, #0]
 801dd6a:	bd38      	pop	{r3, r4, r5, pc}
 801dd6c:	2401b4e8 	.word	0x2401b4e8

0801dd70 <_kill_r>:
 801dd70:	b538      	push	{r3, r4, r5, lr}
 801dd72:	4d07      	ldr	r5, [pc, #28]	; (801dd90 <_kill_r+0x20>)
 801dd74:	2300      	movs	r3, #0
 801dd76:	4604      	mov	r4, r0
 801dd78:	4608      	mov	r0, r1
 801dd7a:	4611      	mov	r1, r2
 801dd7c:	602b      	str	r3, [r5, #0]
 801dd7e:	f7e3 f9fb 	bl	8001178 <_kill>
 801dd82:	1c43      	adds	r3, r0, #1
 801dd84:	d102      	bne.n	801dd8c <_kill_r+0x1c>
 801dd86:	682b      	ldr	r3, [r5, #0]
 801dd88:	b103      	cbz	r3, 801dd8c <_kill_r+0x1c>
 801dd8a:	6023      	str	r3, [r4, #0]
 801dd8c:	bd38      	pop	{r3, r4, r5, pc}
 801dd8e:	bf00      	nop
 801dd90:	2401b4e8 	.word	0x2401b4e8

0801dd94 <_getpid_r>:
 801dd94:	f7e3 b9e8 	b.w	8001168 <_getpid>

0801dd98 <_sbrk_r>:
 801dd98:	b538      	push	{r3, r4, r5, lr}
 801dd9a:	4d06      	ldr	r5, [pc, #24]	; (801ddb4 <_sbrk_r+0x1c>)
 801dd9c:	2300      	movs	r3, #0
 801dd9e:	4604      	mov	r4, r0
 801dda0:	4608      	mov	r0, r1
 801dda2:	602b      	str	r3, [r5, #0]
 801dda4:	f7e3 fa70 	bl	8001288 <_sbrk>
 801dda8:	1c43      	adds	r3, r0, #1
 801ddaa:	d102      	bne.n	801ddb2 <_sbrk_r+0x1a>
 801ddac:	682b      	ldr	r3, [r5, #0]
 801ddae:	b103      	cbz	r3, 801ddb2 <_sbrk_r+0x1a>
 801ddb0:	6023      	str	r3, [r4, #0]
 801ddb2:	bd38      	pop	{r3, r4, r5, pc}
 801ddb4:	2401b4e8 	.word	0x2401b4e8

0801ddb8 <_write_r>:
 801ddb8:	b538      	push	{r3, r4, r5, lr}
 801ddba:	4d07      	ldr	r5, [pc, #28]	; (801ddd8 <_write_r+0x20>)
 801ddbc:	4604      	mov	r4, r0
 801ddbe:	4608      	mov	r0, r1
 801ddc0:	4611      	mov	r1, r2
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	602a      	str	r2, [r5, #0]
 801ddc6:	461a      	mov	r2, r3
 801ddc8:	f7e3 fa0d 	bl	80011e6 <_write>
 801ddcc:	1c43      	adds	r3, r0, #1
 801ddce:	d102      	bne.n	801ddd6 <_write_r+0x1e>
 801ddd0:	682b      	ldr	r3, [r5, #0]
 801ddd2:	b103      	cbz	r3, 801ddd6 <_write_r+0x1e>
 801ddd4:	6023      	str	r3, [r4, #0]
 801ddd6:	bd38      	pop	{r3, r4, r5, pc}
 801ddd8:	2401b4e8 	.word	0x2401b4e8

0801dddc <__errno>:
 801dddc:	4b01      	ldr	r3, [pc, #4]	; (801dde4 <__errno+0x8>)
 801ddde:	6818      	ldr	r0, [r3, #0]
 801dde0:	4770      	bx	lr
 801dde2:	bf00      	nop
 801dde4:	240000d8 	.word	0x240000d8

0801dde8 <__libc_init_array>:
 801dde8:	b570      	push	{r4, r5, r6, lr}
 801ddea:	4d0d      	ldr	r5, [pc, #52]	; (801de20 <__libc_init_array+0x38>)
 801ddec:	4c0d      	ldr	r4, [pc, #52]	; (801de24 <__libc_init_array+0x3c>)
 801ddee:	1b64      	subs	r4, r4, r5
 801ddf0:	10a4      	asrs	r4, r4, #2
 801ddf2:	2600      	movs	r6, #0
 801ddf4:	42a6      	cmp	r6, r4
 801ddf6:	d109      	bne.n	801de0c <__libc_init_array+0x24>
 801ddf8:	4d0b      	ldr	r5, [pc, #44]	; (801de28 <__libc_init_array+0x40>)
 801ddfa:	4c0c      	ldr	r4, [pc, #48]	; (801de2c <__libc_init_array+0x44>)
 801ddfc:	f000 fd70 	bl	801e8e0 <_init>
 801de00:	1b64      	subs	r4, r4, r5
 801de02:	10a4      	asrs	r4, r4, #2
 801de04:	2600      	movs	r6, #0
 801de06:	42a6      	cmp	r6, r4
 801de08:	d105      	bne.n	801de16 <__libc_init_array+0x2e>
 801de0a:	bd70      	pop	{r4, r5, r6, pc}
 801de0c:	f855 3b04 	ldr.w	r3, [r5], #4
 801de10:	4798      	blx	r3
 801de12:	3601      	adds	r6, #1
 801de14:	e7ee      	b.n	801ddf4 <__libc_init_array+0xc>
 801de16:	f855 3b04 	ldr.w	r3, [r5], #4
 801de1a:	4798      	blx	r3
 801de1c:	3601      	adds	r6, #1
 801de1e:	e7f2      	b.n	801de06 <__libc_init_array+0x1e>
 801de20:	0809302c 	.word	0x0809302c
 801de24:	0809302c 	.word	0x0809302c
 801de28:	0809302c 	.word	0x0809302c
 801de2c:	08093040 	.word	0x08093040

0801de30 <__retarget_lock_init_recursive>:
 801de30:	4770      	bx	lr

0801de32 <__retarget_lock_acquire_recursive>:
 801de32:	4770      	bx	lr

0801de34 <__retarget_lock_release_recursive>:
 801de34:	4770      	bx	lr

0801de36 <memcpy>:
 801de36:	440a      	add	r2, r1
 801de38:	4291      	cmp	r1, r2
 801de3a:	f100 33ff 	add.w	r3, r0, #4294967295
 801de3e:	d100      	bne.n	801de42 <memcpy+0xc>
 801de40:	4770      	bx	lr
 801de42:	b510      	push	{r4, lr}
 801de44:	f811 4b01 	ldrb.w	r4, [r1], #1
 801de48:	f803 4f01 	strb.w	r4, [r3, #1]!
 801de4c:	4291      	cmp	r1, r2
 801de4e:	d1f9      	bne.n	801de44 <memcpy+0xe>
 801de50:	bd10      	pop	{r4, pc}
	...

0801de54 <__register_exitproc>:
 801de54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801de58:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801df0c <__register_exitproc+0xb8>
 801de5c:	4606      	mov	r6, r0
 801de5e:	f8d8 0000 	ldr.w	r0, [r8]
 801de62:	461f      	mov	r7, r3
 801de64:	460d      	mov	r5, r1
 801de66:	4691      	mov	r9, r2
 801de68:	f7ff ffe3 	bl	801de32 <__retarget_lock_acquire_recursive>
 801de6c:	4b23      	ldr	r3, [pc, #140]	; (801defc <__register_exitproc+0xa8>)
 801de6e:	681c      	ldr	r4, [r3, #0]
 801de70:	b934      	cbnz	r4, 801de80 <__register_exitproc+0x2c>
 801de72:	4c23      	ldr	r4, [pc, #140]	; (801df00 <__register_exitproc+0xac>)
 801de74:	601c      	str	r4, [r3, #0]
 801de76:	4b23      	ldr	r3, [pc, #140]	; (801df04 <__register_exitproc+0xb0>)
 801de78:	b113      	cbz	r3, 801de80 <__register_exitproc+0x2c>
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801de80:	6863      	ldr	r3, [r4, #4]
 801de82:	2b1f      	cmp	r3, #31
 801de84:	dd07      	ble.n	801de96 <__register_exitproc+0x42>
 801de86:	f8d8 0000 	ldr.w	r0, [r8]
 801de8a:	f7ff ffd3 	bl	801de34 <__retarget_lock_release_recursive>
 801de8e:	f04f 30ff 	mov.w	r0, #4294967295
 801de92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801de96:	b32e      	cbz	r6, 801dee4 <__register_exitproc+0x90>
 801de98:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801de9c:	b968      	cbnz	r0, 801deba <__register_exitproc+0x66>
 801de9e:	4b1a      	ldr	r3, [pc, #104]	; (801df08 <__register_exitproc+0xb4>)
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d0f0      	beq.n	801de86 <__register_exitproc+0x32>
 801dea4:	f44f 7084 	mov.w	r0, #264	; 0x108
 801dea8:	f7ff fcbe 	bl	801d828 <malloc>
 801deac:	2800      	cmp	r0, #0
 801deae:	d0ea      	beq.n	801de86 <__register_exitproc+0x32>
 801deb0:	2300      	movs	r3, #0
 801deb2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801deb6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801deba:	6863      	ldr	r3, [r4, #4]
 801debc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801dec0:	2201      	movs	r2, #1
 801dec2:	409a      	lsls	r2, r3
 801dec4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801dec8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801decc:	4313      	orrs	r3, r2
 801dece:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ded2:	2e02      	cmp	r6, #2
 801ded4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ded8:	bf02      	ittt	eq
 801deda:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801dede:	4313      	orreq	r3, r2
 801dee0:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801dee4:	6863      	ldr	r3, [r4, #4]
 801dee6:	f8d8 0000 	ldr.w	r0, [r8]
 801deea:	1c5a      	adds	r2, r3, #1
 801deec:	3302      	adds	r3, #2
 801deee:	6062      	str	r2, [r4, #4]
 801def0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801def4:	f7ff ff9e 	bl	801de34 <__retarget_lock_release_recursive>
 801def8:	2000      	movs	r0, #0
 801defa:	e7ca      	b.n	801de92 <__register_exitproc+0x3e>
 801defc:	2401b57c 	.word	0x2401b57c
 801df00:	2401b4f0 	.word	0x2401b4f0
 801df04:	08020518 	.word	0x08020518
 801df08:	0801d829 	.word	0x0801d829
 801df0c:	240000dc 	.word	0x240000dc

0801df10 <_free_r>:
 801df10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801df12:	2900      	cmp	r1, #0
 801df14:	d044      	beq.n	801dfa0 <_free_r+0x90>
 801df16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df1a:	9001      	str	r0, [sp, #4]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	f1a1 0404 	sub.w	r4, r1, #4
 801df22:	bfb8      	it	lt
 801df24:	18e4      	addlt	r4, r4, r3
 801df26:	f7ff fd2f 	bl	801d988 <__malloc_lock>
 801df2a:	4a1e      	ldr	r2, [pc, #120]	; (801dfa4 <_free_r+0x94>)
 801df2c:	9801      	ldr	r0, [sp, #4]
 801df2e:	6813      	ldr	r3, [r2, #0]
 801df30:	b933      	cbnz	r3, 801df40 <_free_r+0x30>
 801df32:	6063      	str	r3, [r4, #4]
 801df34:	6014      	str	r4, [r2, #0]
 801df36:	b003      	add	sp, #12
 801df38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df3c:	f7ff bd2a 	b.w	801d994 <__malloc_unlock>
 801df40:	42a3      	cmp	r3, r4
 801df42:	d908      	bls.n	801df56 <_free_r+0x46>
 801df44:	6825      	ldr	r5, [r4, #0]
 801df46:	1961      	adds	r1, r4, r5
 801df48:	428b      	cmp	r3, r1
 801df4a:	bf01      	itttt	eq
 801df4c:	6819      	ldreq	r1, [r3, #0]
 801df4e:	685b      	ldreq	r3, [r3, #4]
 801df50:	1949      	addeq	r1, r1, r5
 801df52:	6021      	streq	r1, [r4, #0]
 801df54:	e7ed      	b.n	801df32 <_free_r+0x22>
 801df56:	461a      	mov	r2, r3
 801df58:	685b      	ldr	r3, [r3, #4]
 801df5a:	b10b      	cbz	r3, 801df60 <_free_r+0x50>
 801df5c:	42a3      	cmp	r3, r4
 801df5e:	d9fa      	bls.n	801df56 <_free_r+0x46>
 801df60:	6811      	ldr	r1, [r2, #0]
 801df62:	1855      	adds	r5, r2, r1
 801df64:	42a5      	cmp	r5, r4
 801df66:	d10b      	bne.n	801df80 <_free_r+0x70>
 801df68:	6824      	ldr	r4, [r4, #0]
 801df6a:	4421      	add	r1, r4
 801df6c:	1854      	adds	r4, r2, r1
 801df6e:	42a3      	cmp	r3, r4
 801df70:	6011      	str	r1, [r2, #0]
 801df72:	d1e0      	bne.n	801df36 <_free_r+0x26>
 801df74:	681c      	ldr	r4, [r3, #0]
 801df76:	685b      	ldr	r3, [r3, #4]
 801df78:	6053      	str	r3, [r2, #4]
 801df7a:	440c      	add	r4, r1
 801df7c:	6014      	str	r4, [r2, #0]
 801df7e:	e7da      	b.n	801df36 <_free_r+0x26>
 801df80:	d902      	bls.n	801df88 <_free_r+0x78>
 801df82:	230c      	movs	r3, #12
 801df84:	6003      	str	r3, [r0, #0]
 801df86:	e7d6      	b.n	801df36 <_free_r+0x26>
 801df88:	6825      	ldr	r5, [r4, #0]
 801df8a:	1961      	adds	r1, r4, r5
 801df8c:	428b      	cmp	r3, r1
 801df8e:	bf04      	itt	eq
 801df90:	6819      	ldreq	r1, [r3, #0]
 801df92:	685b      	ldreq	r3, [r3, #4]
 801df94:	6063      	str	r3, [r4, #4]
 801df96:	bf04      	itt	eq
 801df98:	1949      	addeq	r1, r1, r5
 801df9a:	6021      	streq	r1, [r4, #0]
 801df9c:	6054      	str	r4, [r2, #4]
 801df9e:	e7ca      	b.n	801df36 <_free_r+0x26>
 801dfa0:	b003      	add	sp, #12
 801dfa2:	bd30      	pop	{r4, r5, pc}
 801dfa4:	2401b3a4 	.word	0x2401b3a4

0801dfa8 <__sfputc_r>:
 801dfa8:	6893      	ldr	r3, [r2, #8]
 801dfaa:	3b01      	subs	r3, #1
 801dfac:	2b00      	cmp	r3, #0
 801dfae:	b410      	push	{r4}
 801dfb0:	6093      	str	r3, [r2, #8]
 801dfb2:	da08      	bge.n	801dfc6 <__sfputc_r+0x1e>
 801dfb4:	6994      	ldr	r4, [r2, #24]
 801dfb6:	42a3      	cmp	r3, r4
 801dfb8:	db01      	blt.n	801dfbe <__sfputc_r+0x16>
 801dfba:	290a      	cmp	r1, #10
 801dfbc:	d103      	bne.n	801dfc6 <__sfputc_r+0x1e>
 801dfbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfc2:	f000 bb73 	b.w	801e6ac <__swbuf_r>
 801dfc6:	6813      	ldr	r3, [r2, #0]
 801dfc8:	1c58      	adds	r0, r3, #1
 801dfca:	6010      	str	r0, [r2, #0]
 801dfcc:	7019      	strb	r1, [r3, #0]
 801dfce:	4608      	mov	r0, r1
 801dfd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfd4:	4770      	bx	lr

0801dfd6 <__sfputs_r>:
 801dfd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfd8:	4606      	mov	r6, r0
 801dfda:	460f      	mov	r7, r1
 801dfdc:	4614      	mov	r4, r2
 801dfde:	18d5      	adds	r5, r2, r3
 801dfe0:	42ac      	cmp	r4, r5
 801dfe2:	d101      	bne.n	801dfe8 <__sfputs_r+0x12>
 801dfe4:	2000      	movs	r0, #0
 801dfe6:	e007      	b.n	801dff8 <__sfputs_r+0x22>
 801dfe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfec:	463a      	mov	r2, r7
 801dfee:	4630      	mov	r0, r6
 801dff0:	f7ff ffda 	bl	801dfa8 <__sfputc_r>
 801dff4:	1c43      	adds	r3, r0, #1
 801dff6:	d1f3      	bne.n	801dfe0 <__sfputs_r+0xa>
 801dff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dffc <_vfiprintf_r>:
 801dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e000:	460d      	mov	r5, r1
 801e002:	b09d      	sub	sp, #116	; 0x74
 801e004:	4614      	mov	r4, r2
 801e006:	4698      	mov	r8, r3
 801e008:	4606      	mov	r6, r0
 801e00a:	b118      	cbz	r0, 801e014 <_vfiprintf_r+0x18>
 801e00c:	6a03      	ldr	r3, [r0, #32]
 801e00e:	b90b      	cbnz	r3, 801e014 <_vfiprintf_r+0x18>
 801e010:	f7ff fd60 	bl	801dad4 <__sinit>
 801e014:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e016:	07d9      	lsls	r1, r3, #31
 801e018:	d405      	bmi.n	801e026 <_vfiprintf_r+0x2a>
 801e01a:	89ab      	ldrh	r3, [r5, #12]
 801e01c:	059a      	lsls	r2, r3, #22
 801e01e:	d402      	bmi.n	801e026 <_vfiprintf_r+0x2a>
 801e020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e022:	f7ff ff06 	bl	801de32 <__retarget_lock_acquire_recursive>
 801e026:	89ab      	ldrh	r3, [r5, #12]
 801e028:	071b      	lsls	r3, r3, #28
 801e02a:	d501      	bpl.n	801e030 <_vfiprintf_r+0x34>
 801e02c:	692b      	ldr	r3, [r5, #16]
 801e02e:	b99b      	cbnz	r3, 801e058 <_vfiprintf_r+0x5c>
 801e030:	4629      	mov	r1, r5
 801e032:	4630      	mov	r0, r6
 801e034:	f000 fb78 	bl	801e728 <__swsetup_r>
 801e038:	b170      	cbz	r0, 801e058 <_vfiprintf_r+0x5c>
 801e03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e03c:	07dc      	lsls	r4, r3, #31
 801e03e:	d504      	bpl.n	801e04a <_vfiprintf_r+0x4e>
 801e040:	f04f 30ff 	mov.w	r0, #4294967295
 801e044:	b01d      	add	sp, #116	; 0x74
 801e046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e04a:	89ab      	ldrh	r3, [r5, #12]
 801e04c:	0598      	lsls	r0, r3, #22
 801e04e:	d4f7      	bmi.n	801e040 <_vfiprintf_r+0x44>
 801e050:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e052:	f7ff feef 	bl	801de34 <__retarget_lock_release_recursive>
 801e056:	e7f3      	b.n	801e040 <_vfiprintf_r+0x44>
 801e058:	2300      	movs	r3, #0
 801e05a:	9309      	str	r3, [sp, #36]	; 0x24
 801e05c:	2320      	movs	r3, #32
 801e05e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e062:	f8cd 800c 	str.w	r8, [sp, #12]
 801e066:	2330      	movs	r3, #48	; 0x30
 801e068:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e21c <_vfiprintf_r+0x220>
 801e06c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e070:	f04f 0901 	mov.w	r9, #1
 801e074:	4623      	mov	r3, r4
 801e076:	469a      	mov	sl, r3
 801e078:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e07c:	b10a      	cbz	r2, 801e082 <_vfiprintf_r+0x86>
 801e07e:	2a25      	cmp	r2, #37	; 0x25
 801e080:	d1f9      	bne.n	801e076 <_vfiprintf_r+0x7a>
 801e082:	ebba 0b04 	subs.w	fp, sl, r4
 801e086:	d00b      	beq.n	801e0a0 <_vfiprintf_r+0xa4>
 801e088:	465b      	mov	r3, fp
 801e08a:	4622      	mov	r2, r4
 801e08c:	4629      	mov	r1, r5
 801e08e:	4630      	mov	r0, r6
 801e090:	f7ff ffa1 	bl	801dfd6 <__sfputs_r>
 801e094:	3001      	adds	r0, #1
 801e096:	f000 80a9 	beq.w	801e1ec <_vfiprintf_r+0x1f0>
 801e09a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e09c:	445a      	add	r2, fp
 801e09e:	9209      	str	r2, [sp, #36]	; 0x24
 801e0a0:	f89a 3000 	ldrb.w	r3, [sl]
 801e0a4:	2b00      	cmp	r3, #0
 801e0a6:	f000 80a1 	beq.w	801e1ec <_vfiprintf_r+0x1f0>
 801e0aa:	2300      	movs	r3, #0
 801e0ac:	f04f 32ff 	mov.w	r2, #4294967295
 801e0b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e0b4:	f10a 0a01 	add.w	sl, sl, #1
 801e0b8:	9304      	str	r3, [sp, #16]
 801e0ba:	9307      	str	r3, [sp, #28]
 801e0bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e0c0:	931a      	str	r3, [sp, #104]	; 0x68
 801e0c2:	4654      	mov	r4, sl
 801e0c4:	2205      	movs	r2, #5
 801e0c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0ca:	4854      	ldr	r0, [pc, #336]	; (801e21c <_vfiprintf_r+0x220>)
 801e0cc:	f7e2 f910 	bl	80002f0 <memchr>
 801e0d0:	9a04      	ldr	r2, [sp, #16]
 801e0d2:	b9d8      	cbnz	r0, 801e10c <_vfiprintf_r+0x110>
 801e0d4:	06d1      	lsls	r1, r2, #27
 801e0d6:	bf44      	itt	mi
 801e0d8:	2320      	movmi	r3, #32
 801e0da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0de:	0713      	lsls	r3, r2, #28
 801e0e0:	bf44      	itt	mi
 801e0e2:	232b      	movmi	r3, #43	; 0x2b
 801e0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e0e8:	f89a 3000 	ldrb.w	r3, [sl]
 801e0ec:	2b2a      	cmp	r3, #42	; 0x2a
 801e0ee:	d015      	beq.n	801e11c <_vfiprintf_r+0x120>
 801e0f0:	9a07      	ldr	r2, [sp, #28]
 801e0f2:	4654      	mov	r4, sl
 801e0f4:	2000      	movs	r0, #0
 801e0f6:	f04f 0c0a 	mov.w	ip, #10
 801e0fa:	4621      	mov	r1, r4
 801e0fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e100:	3b30      	subs	r3, #48	; 0x30
 801e102:	2b09      	cmp	r3, #9
 801e104:	d94d      	bls.n	801e1a2 <_vfiprintf_r+0x1a6>
 801e106:	b1b0      	cbz	r0, 801e136 <_vfiprintf_r+0x13a>
 801e108:	9207      	str	r2, [sp, #28]
 801e10a:	e014      	b.n	801e136 <_vfiprintf_r+0x13a>
 801e10c:	eba0 0308 	sub.w	r3, r0, r8
 801e110:	fa09 f303 	lsl.w	r3, r9, r3
 801e114:	4313      	orrs	r3, r2
 801e116:	9304      	str	r3, [sp, #16]
 801e118:	46a2      	mov	sl, r4
 801e11a:	e7d2      	b.n	801e0c2 <_vfiprintf_r+0xc6>
 801e11c:	9b03      	ldr	r3, [sp, #12]
 801e11e:	1d19      	adds	r1, r3, #4
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	9103      	str	r1, [sp, #12]
 801e124:	2b00      	cmp	r3, #0
 801e126:	bfbb      	ittet	lt
 801e128:	425b      	neglt	r3, r3
 801e12a:	f042 0202 	orrlt.w	r2, r2, #2
 801e12e:	9307      	strge	r3, [sp, #28]
 801e130:	9307      	strlt	r3, [sp, #28]
 801e132:	bfb8      	it	lt
 801e134:	9204      	strlt	r2, [sp, #16]
 801e136:	7823      	ldrb	r3, [r4, #0]
 801e138:	2b2e      	cmp	r3, #46	; 0x2e
 801e13a:	d10c      	bne.n	801e156 <_vfiprintf_r+0x15a>
 801e13c:	7863      	ldrb	r3, [r4, #1]
 801e13e:	2b2a      	cmp	r3, #42	; 0x2a
 801e140:	d134      	bne.n	801e1ac <_vfiprintf_r+0x1b0>
 801e142:	9b03      	ldr	r3, [sp, #12]
 801e144:	1d1a      	adds	r2, r3, #4
 801e146:	681b      	ldr	r3, [r3, #0]
 801e148:	9203      	str	r2, [sp, #12]
 801e14a:	2b00      	cmp	r3, #0
 801e14c:	bfb8      	it	lt
 801e14e:	f04f 33ff 	movlt.w	r3, #4294967295
 801e152:	3402      	adds	r4, #2
 801e154:	9305      	str	r3, [sp, #20]
 801e156:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e22c <_vfiprintf_r+0x230>
 801e15a:	7821      	ldrb	r1, [r4, #0]
 801e15c:	2203      	movs	r2, #3
 801e15e:	4650      	mov	r0, sl
 801e160:	f7e2 f8c6 	bl	80002f0 <memchr>
 801e164:	b138      	cbz	r0, 801e176 <_vfiprintf_r+0x17a>
 801e166:	9b04      	ldr	r3, [sp, #16]
 801e168:	eba0 000a 	sub.w	r0, r0, sl
 801e16c:	2240      	movs	r2, #64	; 0x40
 801e16e:	4082      	lsls	r2, r0
 801e170:	4313      	orrs	r3, r2
 801e172:	3401      	adds	r4, #1
 801e174:	9304      	str	r3, [sp, #16]
 801e176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e17a:	4829      	ldr	r0, [pc, #164]	; (801e220 <_vfiprintf_r+0x224>)
 801e17c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e180:	2206      	movs	r2, #6
 801e182:	f7e2 f8b5 	bl	80002f0 <memchr>
 801e186:	2800      	cmp	r0, #0
 801e188:	d03f      	beq.n	801e20a <_vfiprintf_r+0x20e>
 801e18a:	4b26      	ldr	r3, [pc, #152]	; (801e224 <_vfiprintf_r+0x228>)
 801e18c:	bb1b      	cbnz	r3, 801e1d6 <_vfiprintf_r+0x1da>
 801e18e:	9b03      	ldr	r3, [sp, #12]
 801e190:	3307      	adds	r3, #7
 801e192:	f023 0307 	bic.w	r3, r3, #7
 801e196:	3308      	adds	r3, #8
 801e198:	9303      	str	r3, [sp, #12]
 801e19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e19c:	443b      	add	r3, r7
 801e19e:	9309      	str	r3, [sp, #36]	; 0x24
 801e1a0:	e768      	b.n	801e074 <_vfiprintf_r+0x78>
 801e1a2:	fb0c 3202 	mla	r2, ip, r2, r3
 801e1a6:	460c      	mov	r4, r1
 801e1a8:	2001      	movs	r0, #1
 801e1aa:	e7a6      	b.n	801e0fa <_vfiprintf_r+0xfe>
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	3401      	adds	r4, #1
 801e1b0:	9305      	str	r3, [sp, #20]
 801e1b2:	4619      	mov	r1, r3
 801e1b4:	f04f 0c0a 	mov.w	ip, #10
 801e1b8:	4620      	mov	r0, r4
 801e1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e1be:	3a30      	subs	r2, #48	; 0x30
 801e1c0:	2a09      	cmp	r2, #9
 801e1c2:	d903      	bls.n	801e1cc <_vfiprintf_r+0x1d0>
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d0c6      	beq.n	801e156 <_vfiprintf_r+0x15a>
 801e1c8:	9105      	str	r1, [sp, #20]
 801e1ca:	e7c4      	b.n	801e156 <_vfiprintf_r+0x15a>
 801e1cc:	fb0c 2101 	mla	r1, ip, r1, r2
 801e1d0:	4604      	mov	r4, r0
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	e7f0      	b.n	801e1b8 <_vfiprintf_r+0x1bc>
 801e1d6:	ab03      	add	r3, sp, #12
 801e1d8:	9300      	str	r3, [sp, #0]
 801e1da:	462a      	mov	r2, r5
 801e1dc:	4b12      	ldr	r3, [pc, #72]	; (801e228 <_vfiprintf_r+0x22c>)
 801e1de:	a904      	add	r1, sp, #16
 801e1e0:	4630      	mov	r0, r6
 801e1e2:	f3af 8000 	nop.w
 801e1e6:	4607      	mov	r7, r0
 801e1e8:	1c78      	adds	r0, r7, #1
 801e1ea:	d1d6      	bne.n	801e19a <_vfiprintf_r+0x19e>
 801e1ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e1ee:	07d9      	lsls	r1, r3, #31
 801e1f0:	d405      	bmi.n	801e1fe <_vfiprintf_r+0x202>
 801e1f2:	89ab      	ldrh	r3, [r5, #12]
 801e1f4:	059a      	lsls	r2, r3, #22
 801e1f6:	d402      	bmi.n	801e1fe <_vfiprintf_r+0x202>
 801e1f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e1fa:	f7ff fe1b 	bl	801de34 <__retarget_lock_release_recursive>
 801e1fe:	89ab      	ldrh	r3, [r5, #12]
 801e200:	065b      	lsls	r3, r3, #25
 801e202:	f53f af1d 	bmi.w	801e040 <_vfiprintf_r+0x44>
 801e206:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e208:	e71c      	b.n	801e044 <_vfiprintf_r+0x48>
 801e20a:	ab03      	add	r3, sp, #12
 801e20c:	9300      	str	r3, [sp, #0]
 801e20e:	462a      	mov	r2, r5
 801e210:	4b05      	ldr	r3, [pc, #20]	; (801e228 <_vfiprintf_r+0x22c>)
 801e212:	a904      	add	r1, sp, #16
 801e214:	4630      	mov	r0, r6
 801e216:	f000 f879 	bl	801e30c <_printf_i>
 801e21a:	e7e4      	b.n	801e1e6 <_vfiprintf_r+0x1ea>
 801e21c:	0802051c 	.word	0x0802051c
 801e220:	08020526 	.word	0x08020526
 801e224:	00000000 	.word	0x00000000
 801e228:	0801dfd7 	.word	0x0801dfd7
 801e22c:	08020522 	.word	0x08020522

0801e230 <_printf_common>:
 801e230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e234:	4616      	mov	r6, r2
 801e236:	4699      	mov	r9, r3
 801e238:	688a      	ldr	r2, [r1, #8]
 801e23a:	690b      	ldr	r3, [r1, #16]
 801e23c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e240:	4293      	cmp	r3, r2
 801e242:	bfb8      	it	lt
 801e244:	4613      	movlt	r3, r2
 801e246:	6033      	str	r3, [r6, #0]
 801e248:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e24c:	4607      	mov	r7, r0
 801e24e:	460c      	mov	r4, r1
 801e250:	b10a      	cbz	r2, 801e256 <_printf_common+0x26>
 801e252:	3301      	adds	r3, #1
 801e254:	6033      	str	r3, [r6, #0]
 801e256:	6823      	ldr	r3, [r4, #0]
 801e258:	0699      	lsls	r1, r3, #26
 801e25a:	bf42      	ittt	mi
 801e25c:	6833      	ldrmi	r3, [r6, #0]
 801e25e:	3302      	addmi	r3, #2
 801e260:	6033      	strmi	r3, [r6, #0]
 801e262:	6825      	ldr	r5, [r4, #0]
 801e264:	f015 0506 	ands.w	r5, r5, #6
 801e268:	d106      	bne.n	801e278 <_printf_common+0x48>
 801e26a:	f104 0a19 	add.w	sl, r4, #25
 801e26e:	68e3      	ldr	r3, [r4, #12]
 801e270:	6832      	ldr	r2, [r6, #0]
 801e272:	1a9b      	subs	r3, r3, r2
 801e274:	42ab      	cmp	r3, r5
 801e276:	dc26      	bgt.n	801e2c6 <_printf_common+0x96>
 801e278:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e27c:	1e13      	subs	r3, r2, #0
 801e27e:	6822      	ldr	r2, [r4, #0]
 801e280:	bf18      	it	ne
 801e282:	2301      	movne	r3, #1
 801e284:	0692      	lsls	r2, r2, #26
 801e286:	d42b      	bmi.n	801e2e0 <_printf_common+0xb0>
 801e288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e28c:	4649      	mov	r1, r9
 801e28e:	4638      	mov	r0, r7
 801e290:	47c0      	blx	r8
 801e292:	3001      	adds	r0, #1
 801e294:	d01e      	beq.n	801e2d4 <_printf_common+0xa4>
 801e296:	6823      	ldr	r3, [r4, #0]
 801e298:	6922      	ldr	r2, [r4, #16]
 801e29a:	f003 0306 	and.w	r3, r3, #6
 801e29e:	2b04      	cmp	r3, #4
 801e2a0:	bf02      	ittt	eq
 801e2a2:	68e5      	ldreq	r5, [r4, #12]
 801e2a4:	6833      	ldreq	r3, [r6, #0]
 801e2a6:	1aed      	subeq	r5, r5, r3
 801e2a8:	68a3      	ldr	r3, [r4, #8]
 801e2aa:	bf0c      	ite	eq
 801e2ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e2b0:	2500      	movne	r5, #0
 801e2b2:	4293      	cmp	r3, r2
 801e2b4:	bfc4      	itt	gt
 801e2b6:	1a9b      	subgt	r3, r3, r2
 801e2b8:	18ed      	addgt	r5, r5, r3
 801e2ba:	2600      	movs	r6, #0
 801e2bc:	341a      	adds	r4, #26
 801e2be:	42b5      	cmp	r5, r6
 801e2c0:	d11a      	bne.n	801e2f8 <_printf_common+0xc8>
 801e2c2:	2000      	movs	r0, #0
 801e2c4:	e008      	b.n	801e2d8 <_printf_common+0xa8>
 801e2c6:	2301      	movs	r3, #1
 801e2c8:	4652      	mov	r2, sl
 801e2ca:	4649      	mov	r1, r9
 801e2cc:	4638      	mov	r0, r7
 801e2ce:	47c0      	blx	r8
 801e2d0:	3001      	adds	r0, #1
 801e2d2:	d103      	bne.n	801e2dc <_printf_common+0xac>
 801e2d4:	f04f 30ff 	mov.w	r0, #4294967295
 801e2d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e2dc:	3501      	adds	r5, #1
 801e2de:	e7c6      	b.n	801e26e <_printf_common+0x3e>
 801e2e0:	18e1      	adds	r1, r4, r3
 801e2e2:	1c5a      	adds	r2, r3, #1
 801e2e4:	2030      	movs	r0, #48	; 0x30
 801e2e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e2ea:	4422      	add	r2, r4
 801e2ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e2f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e2f4:	3302      	adds	r3, #2
 801e2f6:	e7c7      	b.n	801e288 <_printf_common+0x58>
 801e2f8:	2301      	movs	r3, #1
 801e2fa:	4622      	mov	r2, r4
 801e2fc:	4649      	mov	r1, r9
 801e2fe:	4638      	mov	r0, r7
 801e300:	47c0      	blx	r8
 801e302:	3001      	adds	r0, #1
 801e304:	d0e6      	beq.n	801e2d4 <_printf_common+0xa4>
 801e306:	3601      	adds	r6, #1
 801e308:	e7d9      	b.n	801e2be <_printf_common+0x8e>
	...

0801e30c <_printf_i>:
 801e30c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e310:	7e0f      	ldrb	r7, [r1, #24]
 801e312:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e314:	2f78      	cmp	r7, #120	; 0x78
 801e316:	4691      	mov	r9, r2
 801e318:	4680      	mov	r8, r0
 801e31a:	460c      	mov	r4, r1
 801e31c:	469a      	mov	sl, r3
 801e31e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e322:	d807      	bhi.n	801e334 <_printf_i+0x28>
 801e324:	2f62      	cmp	r7, #98	; 0x62
 801e326:	d80a      	bhi.n	801e33e <_printf_i+0x32>
 801e328:	2f00      	cmp	r7, #0
 801e32a:	f000 80d4 	beq.w	801e4d6 <_printf_i+0x1ca>
 801e32e:	2f58      	cmp	r7, #88	; 0x58
 801e330:	f000 80c0 	beq.w	801e4b4 <_printf_i+0x1a8>
 801e334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e338:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e33c:	e03a      	b.n	801e3b4 <_printf_i+0xa8>
 801e33e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e342:	2b15      	cmp	r3, #21
 801e344:	d8f6      	bhi.n	801e334 <_printf_i+0x28>
 801e346:	a101      	add	r1, pc, #4	; (adr r1, 801e34c <_printf_i+0x40>)
 801e348:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e34c:	0801e3a5 	.word	0x0801e3a5
 801e350:	0801e3b9 	.word	0x0801e3b9
 801e354:	0801e335 	.word	0x0801e335
 801e358:	0801e335 	.word	0x0801e335
 801e35c:	0801e335 	.word	0x0801e335
 801e360:	0801e335 	.word	0x0801e335
 801e364:	0801e3b9 	.word	0x0801e3b9
 801e368:	0801e335 	.word	0x0801e335
 801e36c:	0801e335 	.word	0x0801e335
 801e370:	0801e335 	.word	0x0801e335
 801e374:	0801e335 	.word	0x0801e335
 801e378:	0801e4bd 	.word	0x0801e4bd
 801e37c:	0801e3e5 	.word	0x0801e3e5
 801e380:	0801e477 	.word	0x0801e477
 801e384:	0801e335 	.word	0x0801e335
 801e388:	0801e335 	.word	0x0801e335
 801e38c:	0801e4df 	.word	0x0801e4df
 801e390:	0801e335 	.word	0x0801e335
 801e394:	0801e3e5 	.word	0x0801e3e5
 801e398:	0801e335 	.word	0x0801e335
 801e39c:	0801e335 	.word	0x0801e335
 801e3a0:	0801e47f 	.word	0x0801e47f
 801e3a4:	682b      	ldr	r3, [r5, #0]
 801e3a6:	1d1a      	adds	r2, r3, #4
 801e3a8:	681b      	ldr	r3, [r3, #0]
 801e3aa:	602a      	str	r2, [r5, #0]
 801e3ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e3b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e3b4:	2301      	movs	r3, #1
 801e3b6:	e09f      	b.n	801e4f8 <_printf_i+0x1ec>
 801e3b8:	6820      	ldr	r0, [r4, #0]
 801e3ba:	682b      	ldr	r3, [r5, #0]
 801e3bc:	0607      	lsls	r7, r0, #24
 801e3be:	f103 0104 	add.w	r1, r3, #4
 801e3c2:	6029      	str	r1, [r5, #0]
 801e3c4:	d501      	bpl.n	801e3ca <_printf_i+0xbe>
 801e3c6:	681e      	ldr	r6, [r3, #0]
 801e3c8:	e003      	b.n	801e3d2 <_printf_i+0xc6>
 801e3ca:	0646      	lsls	r6, r0, #25
 801e3cc:	d5fb      	bpl.n	801e3c6 <_printf_i+0xba>
 801e3ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e3d2:	2e00      	cmp	r6, #0
 801e3d4:	da03      	bge.n	801e3de <_printf_i+0xd2>
 801e3d6:	232d      	movs	r3, #45	; 0x2d
 801e3d8:	4276      	negs	r6, r6
 801e3da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e3de:	485a      	ldr	r0, [pc, #360]	; (801e548 <_printf_i+0x23c>)
 801e3e0:	230a      	movs	r3, #10
 801e3e2:	e012      	b.n	801e40a <_printf_i+0xfe>
 801e3e4:	682b      	ldr	r3, [r5, #0]
 801e3e6:	6820      	ldr	r0, [r4, #0]
 801e3e8:	1d19      	adds	r1, r3, #4
 801e3ea:	6029      	str	r1, [r5, #0]
 801e3ec:	0605      	lsls	r5, r0, #24
 801e3ee:	d501      	bpl.n	801e3f4 <_printf_i+0xe8>
 801e3f0:	681e      	ldr	r6, [r3, #0]
 801e3f2:	e002      	b.n	801e3fa <_printf_i+0xee>
 801e3f4:	0641      	lsls	r1, r0, #25
 801e3f6:	d5fb      	bpl.n	801e3f0 <_printf_i+0xe4>
 801e3f8:	881e      	ldrh	r6, [r3, #0]
 801e3fa:	4853      	ldr	r0, [pc, #332]	; (801e548 <_printf_i+0x23c>)
 801e3fc:	2f6f      	cmp	r7, #111	; 0x6f
 801e3fe:	bf0c      	ite	eq
 801e400:	2308      	moveq	r3, #8
 801e402:	230a      	movne	r3, #10
 801e404:	2100      	movs	r1, #0
 801e406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e40a:	6865      	ldr	r5, [r4, #4]
 801e40c:	60a5      	str	r5, [r4, #8]
 801e40e:	2d00      	cmp	r5, #0
 801e410:	bfa2      	ittt	ge
 801e412:	6821      	ldrge	r1, [r4, #0]
 801e414:	f021 0104 	bicge.w	r1, r1, #4
 801e418:	6021      	strge	r1, [r4, #0]
 801e41a:	b90e      	cbnz	r6, 801e420 <_printf_i+0x114>
 801e41c:	2d00      	cmp	r5, #0
 801e41e:	d04b      	beq.n	801e4b8 <_printf_i+0x1ac>
 801e420:	4615      	mov	r5, r2
 801e422:	fbb6 f1f3 	udiv	r1, r6, r3
 801e426:	fb03 6711 	mls	r7, r3, r1, r6
 801e42a:	5dc7      	ldrb	r7, [r0, r7]
 801e42c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e430:	4637      	mov	r7, r6
 801e432:	42bb      	cmp	r3, r7
 801e434:	460e      	mov	r6, r1
 801e436:	d9f4      	bls.n	801e422 <_printf_i+0x116>
 801e438:	2b08      	cmp	r3, #8
 801e43a:	d10b      	bne.n	801e454 <_printf_i+0x148>
 801e43c:	6823      	ldr	r3, [r4, #0]
 801e43e:	07de      	lsls	r6, r3, #31
 801e440:	d508      	bpl.n	801e454 <_printf_i+0x148>
 801e442:	6923      	ldr	r3, [r4, #16]
 801e444:	6861      	ldr	r1, [r4, #4]
 801e446:	4299      	cmp	r1, r3
 801e448:	bfde      	ittt	le
 801e44a:	2330      	movle	r3, #48	; 0x30
 801e44c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e450:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e454:	1b52      	subs	r2, r2, r5
 801e456:	6122      	str	r2, [r4, #16]
 801e458:	f8cd a000 	str.w	sl, [sp]
 801e45c:	464b      	mov	r3, r9
 801e45e:	aa03      	add	r2, sp, #12
 801e460:	4621      	mov	r1, r4
 801e462:	4640      	mov	r0, r8
 801e464:	f7ff fee4 	bl	801e230 <_printf_common>
 801e468:	3001      	adds	r0, #1
 801e46a:	d14a      	bne.n	801e502 <_printf_i+0x1f6>
 801e46c:	f04f 30ff 	mov.w	r0, #4294967295
 801e470:	b004      	add	sp, #16
 801e472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e476:	6823      	ldr	r3, [r4, #0]
 801e478:	f043 0320 	orr.w	r3, r3, #32
 801e47c:	6023      	str	r3, [r4, #0]
 801e47e:	4833      	ldr	r0, [pc, #204]	; (801e54c <_printf_i+0x240>)
 801e480:	2778      	movs	r7, #120	; 0x78
 801e482:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e486:	6823      	ldr	r3, [r4, #0]
 801e488:	6829      	ldr	r1, [r5, #0]
 801e48a:	061f      	lsls	r7, r3, #24
 801e48c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e490:	d402      	bmi.n	801e498 <_printf_i+0x18c>
 801e492:	065f      	lsls	r7, r3, #25
 801e494:	bf48      	it	mi
 801e496:	b2b6      	uxthmi	r6, r6
 801e498:	07df      	lsls	r7, r3, #31
 801e49a:	bf48      	it	mi
 801e49c:	f043 0320 	orrmi.w	r3, r3, #32
 801e4a0:	6029      	str	r1, [r5, #0]
 801e4a2:	bf48      	it	mi
 801e4a4:	6023      	strmi	r3, [r4, #0]
 801e4a6:	b91e      	cbnz	r6, 801e4b0 <_printf_i+0x1a4>
 801e4a8:	6823      	ldr	r3, [r4, #0]
 801e4aa:	f023 0320 	bic.w	r3, r3, #32
 801e4ae:	6023      	str	r3, [r4, #0]
 801e4b0:	2310      	movs	r3, #16
 801e4b2:	e7a7      	b.n	801e404 <_printf_i+0xf8>
 801e4b4:	4824      	ldr	r0, [pc, #144]	; (801e548 <_printf_i+0x23c>)
 801e4b6:	e7e4      	b.n	801e482 <_printf_i+0x176>
 801e4b8:	4615      	mov	r5, r2
 801e4ba:	e7bd      	b.n	801e438 <_printf_i+0x12c>
 801e4bc:	682b      	ldr	r3, [r5, #0]
 801e4be:	6826      	ldr	r6, [r4, #0]
 801e4c0:	6961      	ldr	r1, [r4, #20]
 801e4c2:	1d18      	adds	r0, r3, #4
 801e4c4:	6028      	str	r0, [r5, #0]
 801e4c6:	0635      	lsls	r5, r6, #24
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	d501      	bpl.n	801e4d0 <_printf_i+0x1c4>
 801e4cc:	6019      	str	r1, [r3, #0]
 801e4ce:	e002      	b.n	801e4d6 <_printf_i+0x1ca>
 801e4d0:	0670      	lsls	r0, r6, #25
 801e4d2:	d5fb      	bpl.n	801e4cc <_printf_i+0x1c0>
 801e4d4:	8019      	strh	r1, [r3, #0]
 801e4d6:	2300      	movs	r3, #0
 801e4d8:	6123      	str	r3, [r4, #16]
 801e4da:	4615      	mov	r5, r2
 801e4dc:	e7bc      	b.n	801e458 <_printf_i+0x14c>
 801e4de:	682b      	ldr	r3, [r5, #0]
 801e4e0:	1d1a      	adds	r2, r3, #4
 801e4e2:	602a      	str	r2, [r5, #0]
 801e4e4:	681d      	ldr	r5, [r3, #0]
 801e4e6:	6862      	ldr	r2, [r4, #4]
 801e4e8:	2100      	movs	r1, #0
 801e4ea:	4628      	mov	r0, r5
 801e4ec:	f7e1 ff00 	bl	80002f0 <memchr>
 801e4f0:	b108      	cbz	r0, 801e4f6 <_printf_i+0x1ea>
 801e4f2:	1b40      	subs	r0, r0, r5
 801e4f4:	6060      	str	r0, [r4, #4]
 801e4f6:	6863      	ldr	r3, [r4, #4]
 801e4f8:	6123      	str	r3, [r4, #16]
 801e4fa:	2300      	movs	r3, #0
 801e4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e500:	e7aa      	b.n	801e458 <_printf_i+0x14c>
 801e502:	6923      	ldr	r3, [r4, #16]
 801e504:	462a      	mov	r2, r5
 801e506:	4649      	mov	r1, r9
 801e508:	4640      	mov	r0, r8
 801e50a:	47d0      	blx	sl
 801e50c:	3001      	adds	r0, #1
 801e50e:	d0ad      	beq.n	801e46c <_printf_i+0x160>
 801e510:	6823      	ldr	r3, [r4, #0]
 801e512:	079b      	lsls	r3, r3, #30
 801e514:	d413      	bmi.n	801e53e <_printf_i+0x232>
 801e516:	68e0      	ldr	r0, [r4, #12]
 801e518:	9b03      	ldr	r3, [sp, #12]
 801e51a:	4298      	cmp	r0, r3
 801e51c:	bfb8      	it	lt
 801e51e:	4618      	movlt	r0, r3
 801e520:	e7a6      	b.n	801e470 <_printf_i+0x164>
 801e522:	2301      	movs	r3, #1
 801e524:	4632      	mov	r2, r6
 801e526:	4649      	mov	r1, r9
 801e528:	4640      	mov	r0, r8
 801e52a:	47d0      	blx	sl
 801e52c:	3001      	adds	r0, #1
 801e52e:	d09d      	beq.n	801e46c <_printf_i+0x160>
 801e530:	3501      	adds	r5, #1
 801e532:	68e3      	ldr	r3, [r4, #12]
 801e534:	9903      	ldr	r1, [sp, #12]
 801e536:	1a5b      	subs	r3, r3, r1
 801e538:	42ab      	cmp	r3, r5
 801e53a:	dcf2      	bgt.n	801e522 <_printf_i+0x216>
 801e53c:	e7eb      	b.n	801e516 <_printf_i+0x20a>
 801e53e:	2500      	movs	r5, #0
 801e540:	f104 0619 	add.w	r6, r4, #25
 801e544:	e7f5      	b.n	801e532 <_printf_i+0x226>
 801e546:	bf00      	nop
 801e548:	0802052d 	.word	0x0802052d
 801e54c:	0802053e 	.word	0x0802053e

0801e550 <__sflush_r>:
 801e550:	898a      	ldrh	r2, [r1, #12]
 801e552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e556:	4605      	mov	r5, r0
 801e558:	0710      	lsls	r0, r2, #28
 801e55a:	460c      	mov	r4, r1
 801e55c:	d458      	bmi.n	801e610 <__sflush_r+0xc0>
 801e55e:	684b      	ldr	r3, [r1, #4]
 801e560:	2b00      	cmp	r3, #0
 801e562:	dc05      	bgt.n	801e570 <__sflush_r+0x20>
 801e564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e566:	2b00      	cmp	r3, #0
 801e568:	dc02      	bgt.n	801e570 <__sflush_r+0x20>
 801e56a:	2000      	movs	r0, #0
 801e56c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e570:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e572:	2e00      	cmp	r6, #0
 801e574:	d0f9      	beq.n	801e56a <__sflush_r+0x1a>
 801e576:	2300      	movs	r3, #0
 801e578:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e57c:	682f      	ldr	r7, [r5, #0]
 801e57e:	6a21      	ldr	r1, [r4, #32]
 801e580:	602b      	str	r3, [r5, #0]
 801e582:	d032      	beq.n	801e5ea <__sflush_r+0x9a>
 801e584:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e586:	89a3      	ldrh	r3, [r4, #12]
 801e588:	075a      	lsls	r2, r3, #29
 801e58a:	d505      	bpl.n	801e598 <__sflush_r+0x48>
 801e58c:	6863      	ldr	r3, [r4, #4]
 801e58e:	1ac0      	subs	r0, r0, r3
 801e590:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e592:	b10b      	cbz	r3, 801e598 <__sflush_r+0x48>
 801e594:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e596:	1ac0      	subs	r0, r0, r3
 801e598:	2300      	movs	r3, #0
 801e59a:	4602      	mov	r2, r0
 801e59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e59e:	6a21      	ldr	r1, [r4, #32]
 801e5a0:	4628      	mov	r0, r5
 801e5a2:	47b0      	blx	r6
 801e5a4:	1c43      	adds	r3, r0, #1
 801e5a6:	89a3      	ldrh	r3, [r4, #12]
 801e5a8:	d106      	bne.n	801e5b8 <__sflush_r+0x68>
 801e5aa:	6829      	ldr	r1, [r5, #0]
 801e5ac:	291d      	cmp	r1, #29
 801e5ae:	d82b      	bhi.n	801e608 <__sflush_r+0xb8>
 801e5b0:	4a29      	ldr	r2, [pc, #164]	; (801e658 <__sflush_r+0x108>)
 801e5b2:	410a      	asrs	r2, r1
 801e5b4:	07d6      	lsls	r6, r2, #31
 801e5b6:	d427      	bmi.n	801e608 <__sflush_r+0xb8>
 801e5b8:	2200      	movs	r2, #0
 801e5ba:	6062      	str	r2, [r4, #4]
 801e5bc:	04d9      	lsls	r1, r3, #19
 801e5be:	6922      	ldr	r2, [r4, #16]
 801e5c0:	6022      	str	r2, [r4, #0]
 801e5c2:	d504      	bpl.n	801e5ce <__sflush_r+0x7e>
 801e5c4:	1c42      	adds	r2, r0, #1
 801e5c6:	d101      	bne.n	801e5cc <__sflush_r+0x7c>
 801e5c8:	682b      	ldr	r3, [r5, #0]
 801e5ca:	b903      	cbnz	r3, 801e5ce <__sflush_r+0x7e>
 801e5cc:	6560      	str	r0, [r4, #84]	; 0x54
 801e5ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e5d0:	602f      	str	r7, [r5, #0]
 801e5d2:	2900      	cmp	r1, #0
 801e5d4:	d0c9      	beq.n	801e56a <__sflush_r+0x1a>
 801e5d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e5da:	4299      	cmp	r1, r3
 801e5dc:	d002      	beq.n	801e5e4 <__sflush_r+0x94>
 801e5de:	4628      	mov	r0, r5
 801e5e0:	f7ff fc96 	bl	801df10 <_free_r>
 801e5e4:	2000      	movs	r0, #0
 801e5e6:	6360      	str	r0, [r4, #52]	; 0x34
 801e5e8:	e7c0      	b.n	801e56c <__sflush_r+0x1c>
 801e5ea:	2301      	movs	r3, #1
 801e5ec:	4628      	mov	r0, r5
 801e5ee:	47b0      	blx	r6
 801e5f0:	1c41      	adds	r1, r0, #1
 801e5f2:	d1c8      	bne.n	801e586 <__sflush_r+0x36>
 801e5f4:	682b      	ldr	r3, [r5, #0]
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d0c5      	beq.n	801e586 <__sflush_r+0x36>
 801e5fa:	2b1d      	cmp	r3, #29
 801e5fc:	d001      	beq.n	801e602 <__sflush_r+0xb2>
 801e5fe:	2b16      	cmp	r3, #22
 801e600:	d101      	bne.n	801e606 <__sflush_r+0xb6>
 801e602:	602f      	str	r7, [r5, #0]
 801e604:	e7b1      	b.n	801e56a <__sflush_r+0x1a>
 801e606:	89a3      	ldrh	r3, [r4, #12]
 801e608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e60c:	81a3      	strh	r3, [r4, #12]
 801e60e:	e7ad      	b.n	801e56c <__sflush_r+0x1c>
 801e610:	690f      	ldr	r7, [r1, #16]
 801e612:	2f00      	cmp	r7, #0
 801e614:	d0a9      	beq.n	801e56a <__sflush_r+0x1a>
 801e616:	0793      	lsls	r3, r2, #30
 801e618:	680e      	ldr	r6, [r1, #0]
 801e61a:	bf08      	it	eq
 801e61c:	694b      	ldreq	r3, [r1, #20]
 801e61e:	600f      	str	r7, [r1, #0]
 801e620:	bf18      	it	ne
 801e622:	2300      	movne	r3, #0
 801e624:	eba6 0807 	sub.w	r8, r6, r7
 801e628:	608b      	str	r3, [r1, #8]
 801e62a:	f1b8 0f00 	cmp.w	r8, #0
 801e62e:	dd9c      	ble.n	801e56a <__sflush_r+0x1a>
 801e630:	6a21      	ldr	r1, [r4, #32]
 801e632:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e634:	4643      	mov	r3, r8
 801e636:	463a      	mov	r2, r7
 801e638:	4628      	mov	r0, r5
 801e63a:	47b0      	blx	r6
 801e63c:	2800      	cmp	r0, #0
 801e63e:	dc06      	bgt.n	801e64e <__sflush_r+0xfe>
 801e640:	89a3      	ldrh	r3, [r4, #12]
 801e642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e646:	81a3      	strh	r3, [r4, #12]
 801e648:	f04f 30ff 	mov.w	r0, #4294967295
 801e64c:	e78e      	b.n	801e56c <__sflush_r+0x1c>
 801e64e:	4407      	add	r7, r0
 801e650:	eba8 0800 	sub.w	r8, r8, r0
 801e654:	e7e9      	b.n	801e62a <__sflush_r+0xda>
 801e656:	bf00      	nop
 801e658:	dfbffffe 	.word	0xdfbffffe

0801e65c <_fflush_r>:
 801e65c:	b538      	push	{r3, r4, r5, lr}
 801e65e:	690b      	ldr	r3, [r1, #16]
 801e660:	4605      	mov	r5, r0
 801e662:	460c      	mov	r4, r1
 801e664:	b913      	cbnz	r3, 801e66c <_fflush_r+0x10>
 801e666:	2500      	movs	r5, #0
 801e668:	4628      	mov	r0, r5
 801e66a:	bd38      	pop	{r3, r4, r5, pc}
 801e66c:	b118      	cbz	r0, 801e676 <_fflush_r+0x1a>
 801e66e:	6a03      	ldr	r3, [r0, #32]
 801e670:	b90b      	cbnz	r3, 801e676 <_fflush_r+0x1a>
 801e672:	f7ff fa2f 	bl	801dad4 <__sinit>
 801e676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d0f3      	beq.n	801e666 <_fflush_r+0xa>
 801e67e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e680:	07d0      	lsls	r0, r2, #31
 801e682:	d404      	bmi.n	801e68e <_fflush_r+0x32>
 801e684:	0599      	lsls	r1, r3, #22
 801e686:	d402      	bmi.n	801e68e <_fflush_r+0x32>
 801e688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e68a:	f7ff fbd2 	bl	801de32 <__retarget_lock_acquire_recursive>
 801e68e:	4628      	mov	r0, r5
 801e690:	4621      	mov	r1, r4
 801e692:	f7ff ff5d 	bl	801e550 <__sflush_r>
 801e696:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e698:	07da      	lsls	r2, r3, #31
 801e69a:	4605      	mov	r5, r0
 801e69c:	d4e4      	bmi.n	801e668 <_fflush_r+0xc>
 801e69e:	89a3      	ldrh	r3, [r4, #12]
 801e6a0:	059b      	lsls	r3, r3, #22
 801e6a2:	d4e1      	bmi.n	801e668 <_fflush_r+0xc>
 801e6a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e6a6:	f7ff fbc5 	bl	801de34 <__retarget_lock_release_recursive>
 801e6aa:	e7dd      	b.n	801e668 <_fflush_r+0xc>

0801e6ac <__swbuf_r>:
 801e6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6ae:	460e      	mov	r6, r1
 801e6b0:	4614      	mov	r4, r2
 801e6b2:	4605      	mov	r5, r0
 801e6b4:	b118      	cbz	r0, 801e6be <__swbuf_r+0x12>
 801e6b6:	6a03      	ldr	r3, [r0, #32]
 801e6b8:	b90b      	cbnz	r3, 801e6be <__swbuf_r+0x12>
 801e6ba:	f7ff fa0b 	bl	801dad4 <__sinit>
 801e6be:	69a3      	ldr	r3, [r4, #24]
 801e6c0:	60a3      	str	r3, [r4, #8]
 801e6c2:	89a3      	ldrh	r3, [r4, #12]
 801e6c4:	071a      	lsls	r2, r3, #28
 801e6c6:	d525      	bpl.n	801e714 <__swbuf_r+0x68>
 801e6c8:	6923      	ldr	r3, [r4, #16]
 801e6ca:	b31b      	cbz	r3, 801e714 <__swbuf_r+0x68>
 801e6cc:	6823      	ldr	r3, [r4, #0]
 801e6ce:	6922      	ldr	r2, [r4, #16]
 801e6d0:	1a98      	subs	r0, r3, r2
 801e6d2:	6963      	ldr	r3, [r4, #20]
 801e6d4:	b2f6      	uxtb	r6, r6
 801e6d6:	4283      	cmp	r3, r0
 801e6d8:	4637      	mov	r7, r6
 801e6da:	dc04      	bgt.n	801e6e6 <__swbuf_r+0x3a>
 801e6dc:	4621      	mov	r1, r4
 801e6de:	4628      	mov	r0, r5
 801e6e0:	f7ff ffbc 	bl	801e65c <_fflush_r>
 801e6e4:	b9e0      	cbnz	r0, 801e720 <__swbuf_r+0x74>
 801e6e6:	68a3      	ldr	r3, [r4, #8]
 801e6e8:	3b01      	subs	r3, #1
 801e6ea:	60a3      	str	r3, [r4, #8]
 801e6ec:	6823      	ldr	r3, [r4, #0]
 801e6ee:	1c5a      	adds	r2, r3, #1
 801e6f0:	6022      	str	r2, [r4, #0]
 801e6f2:	701e      	strb	r6, [r3, #0]
 801e6f4:	6962      	ldr	r2, [r4, #20]
 801e6f6:	1c43      	adds	r3, r0, #1
 801e6f8:	429a      	cmp	r2, r3
 801e6fa:	d004      	beq.n	801e706 <__swbuf_r+0x5a>
 801e6fc:	89a3      	ldrh	r3, [r4, #12]
 801e6fe:	07db      	lsls	r3, r3, #31
 801e700:	d506      	bpl.n	801e710 <__swbuf_r+0x64>
 801e702:	2e0a      	cmp	r6, #10
 801e704:	d104      	bne.n	801e710 <__swbuf_r+0x64>
 801e706:	4621      	mov	r1, r4
 801e708:	4628      	mov	r0, r5
 801e70a:	f7ff ffa7 	bl	801e65c <_fflush_r>
 801e70e:	b938      	cbnz	r0, 801e720 <__swbuf_r+0x74>
 801e710:	4638      	mov	r0, r7
 801e712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e714:	4621      	mov	r1, r4
 801e716:	4628      	mov	r0, r5
 801e718:	f000 f806 	bl	801e728 <__swsetup_r>
 801e71c:	2800      	cmp	r0, #0
 801e71e:	d0d5      	beq.n	801e6cc <__swbuf_r+0x20>
 801e720:	f04f 37ff 	mov.w	r7, #4294967295
 801e724:	e7f4      	b.n	801e710 <__swbuf_r+0x64>
	...

0801e728 <__swsetup_r>:
 801e728:	b538      	push	{r3, r4, r5, lr}
 801e72a:	4b2a      	ldr	r3, [pc, #168]	; (801e7d4 <__swsetup_r+0xac>)
 801e72c:	4605      	mov	r5, r0
 801e72e:	6818      	ldr	r0, [r3, #0]
 801e730:	460c      	mov	r4, r1
 801e732:	b118      	cbz	r0, 801e73c <__swsetup_r+0x14>
 801e734:	6a03      	ldr	r3, [r0, #32]
 801e736:	b90b      	cbnz	r3, 801e73c <__swsetup_r+0x14>
 801e738:	f7ff f9cc 	bl	801dad4 <__sinit>
 801e73c:	89a3      	ldrh	r3, [r4, #12]
 801e73e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e742:	0718      	lsls	r0, r3, #28
 801e744:	d422      	bmi.n	801e78c <__swsetup_r+0x64>
 801e746:	06d9      	lsls	r1, r3, #27
 801e748:	d407      	bmi.n	801e75a <__swsetup_r+0x32>
 801e74a:	2309      	movs	r3, #9
 801e74c:	602b      	str	r3, [r5, #0]
 801e74e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e752:	81a3      	strh	r3, [r4, #12]
 801e754:	f04f 30ff 	mov.w	r0, #4294967295
 801e758:	e034      	b.n	801e7c4 <__swsetup_r+0x9c>
 801e75a:	0758      	lsls	r0, r3, #29
 801e75c:	d512      	bpl.n	801e784 <__swsetup_r+0x5c>
 801e75e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e760:	b141      	cbz	r1, 801e774 <__swsetup_r+0x4c>
 801e762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e766:	4299      	cmp	r1, r3
 801e768:	d002      	beq.n	801e770 <__swsetup_r+0x48>
 801e76a:	4628      	mov	r0, r5
 801e76c:	f7ff fbd0 	bl	801df10 <_free_r>
 801e770:	2300      	movs	r3, #0
 801e772:	6363      	str	r3, [r4, #52]	; 0x34
 801e774:	89a3      	ldrh	r3, [r4, #12]
 801e776:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e77a:	81a3      	strh	r3, [r4, #12]
 801e77c:	2300      	movs	r3, #0
 801e77e:	6063      	str	r3, [r4, #4]
 801e780:	6923      	ldr	r3, [r4, #16]
 801e782:	6023      	str	r3, [r4, #0]
 801e784:	89a3      	ldrh	r3, [r4, #12]
 801e786:	f043 0308 	orr.w	r3, r3, #8
 801e78a:	81a3      	strh	r3, [r4, #12]
 801e78c:	6923      	ldr	r3, [r4, #16]
 801e78e:	b94b      	cbnz	r3, 801e7a4 <__swsetup_r+0x7c>
 801e790:	89a3      	ldrh	r3, [r4, #12]
 801e792:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e79a:	d003      	beq.n	801e7a4 <__swsetup_r+0x7c>
 801e79c:	4621      	mov	r1, r4
 801e79e:	4628      	mov	r0, r5
 801e7a0:	f000 f840 	bl	801e824 <__smakebuf_r>
 801e7a4:	89a0      	ldrh	r0, [r4, #12]
 801e7a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e7aa:	f010 0301 	ands.w	r3, r0, #1
 801e7ae:	d00a      	beq.n	801e7c6 <__swsetup_r+0x9e>
 801e7b0:	2300      	movs	r3, #0
 801e7b2:	60a3      	str	r3, [r4, #8]
 801e7b4:	6963      	ldr	r3, [r4, #20]
 801e7b6:	425b      	negs	r3, r3
 801e7b8:	61a3      	str	r3, [r4, #24]
 801e7ba:	6923      	ldr	r3, [r4, #16]
 801e7bc:	b943      	cbnz	r3, 801e7d0 <__swsetup_r+0xa8>
 801e7be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e7c2:	d1c4      	bne.n	801e74e <__swsetup_r+0x26>
 801e7c4:	bd38      	pop	{r3, r4, r5, pc}
 801e7c6:	0781      	lsls	r1, r0, #30
 801e7c8:	bf58      	it	pl
 801e7ca:	6963      	ldrpl	r3, [r4, #20]
 801e7cc:	60a3      	str	r3, [r4, #8]
 801e7ce:	e7f4      	b.n	801e7ba <__swsetup_r+0x92>
 801e7d0:	2000      	movs	r0, #0
 801e7d2:	e7f7      	b.n	801e7c4 <__swsetup_r+0x9c>
 801e7d4:	240000d8 	.word	0x240000d8

0801e7d8 <__swhatbuf_r>:
 801e7d8:	b570      	push	{r4, r5, r6, lr}
 801e7da:	460c      	mov	r4, r1
 801e7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7e0:	2900      	cmp	r1, #0
 801e7e2:	b096      	sub	sp, #88	; 0x58
 801e7e4:	4615      	mov	r5, r2
 801e7e6:	461e      	mov	r6, r3
 801e7e8:	da0d      	bge.n	801e806 <__swhatbuf_r+0x2e>
 801e7ea:	89a3      	ldrh	r3, [r4, #12]
 801e7ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e7f0:	f04f 0100 	mov.w	r1, #0
 801e7f4:	bf0c      	ite	eq
 801e7f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e7fa:	2340      	movne	r3, #64	; 0x40
 801e7fc:	2000      	movs	r0, #0
 801e7fe:	6031      	str	r1, [r6, #0]
 801e800:	602b      	str	r3, [r5, #0]
 801e802:	b016      	add	sp, #88	; 0x58
 801e804:	bd70      	pop	{r4, r5, r6, pc}
 801e806:	466a      	mov	r2, sp
 801e808:	f000 f848 	bl	801e89c <_fstat_r>
 801e80c:	2800      	cmp	r0, #0
 801e80e:	dbec      	blt.n	801e7ea <__swhatbuf_r+0x12>
 801e810:	9901      	ldr	r1, [sp, #4]
 801e812:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e816:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e81a:	4259      	negs	r1, r3
 801e81c:	4159      	adcs	r1, r3
 801e81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e822:	e7eb      	b.n	801e7fc <__swhatbuf_r+0x24>

0801e824 <__smakebuf_r>:
 801e824:	898b      	ldrh	r3, [r1, #12]
 801e826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e828:	079d      	lsls	r5, r3, #30
 801e82a:	4606      	mov	r6, r0
 801e82c:	460c      	mov	r4, r1
 801e82e:	d507      	bpl.n	801e840 <__smakebuf_r+0x1c>
 801e830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e834:	6023      	str	r3, [r4, #0]
 801e836:	6123      	str	r3, [r4, #16]
 801e838:	2301      	movs	r3, #1
 801e83a:	6163      	str	r3, [r4, #20]
 801e83c:	b002      	add	sp, #8
 801e83e:	bd70      	pop	{r4, r5, r6, pc}
 801e840:	ab01      	add	r3, sp, #4
 801e842:	466a      	mov	r2, sp
 801e844:	f7ff ffc8 	bl	801e7d8 <__swhatbuf_r>
 801e848:	9900      	ldr	r1, [sp, #0]
 801e84a:	4605      	mov	r5, r0
 801e84c:	4630      	mov	r0, r6
 801e84e:	f7ff f81b 	bl	801d888 <_malloc_r>
 801e852:	b948      	cbnz	r0, 801e868 <__smakebuf_r+0x44>
 801e854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e858:	059a      	lsls	r2, r3, #22
 801e85a:	d4ef      	bmi.n	801e83c <__smakebuf_r+0x18>
 801e85c:	f023 0303 	bic.w	r3, r3, #3
 801e860:	f043 0302 	orr.w	r3, r3, #2
 801e864:	81a3      	strh	r3, [r4, #12]
 801e866:	e7e3      	b.n	801e830 <__smakebuf_r+0xc>
 801e868:	89a3      	ldrh	r3, [r4, #12]
 801e86a:	6020      	str	r0, [r4, #0]
 801e86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e870:	81a3      	strh	r3, [r4, #12]
 801e872:	9b00      	ldr	r3, [sp, #0]
 801e874:	6163      	str	r3, [r4, #20]
 801e876:	9b01      	ldr	r3, [sp, #4]
 801e878:	6120      	str	r0, [r4, #16]
 801e87a:	b15b      	cbz	r3, 801e894 <__smakebuf_r+0x70>
 801e87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e880:	4630      	mov	r0, r6
 801e882:	f000 f81d 	bl	801e8c0 <_isatty_r>
 801e886:	b128      	cbz	r0, 801e894 <__smakebuf_r+0x70>
 801e888:	89a3      	ldrh	r3, [r4, #12]
 801e88a:	f023 0303 	bic.w	r3, r3, #3
 801e88e:	f043 0301 	orr.w	r3, r3, #1
 801e892:	81a3      	strh	r3, [r4, #12]
 801e894:	89a3      	ldrh	r3, [r4, #12]
 801e896:	431d      	orrs	r5, r3
 801e898:	81a5      	strh	r5, [r4, #12]
 801e89a:	e7cf      	b.n	801e83c <__smakebuf_r+0x18>

0801e89c <_fstat_r>:
 801e89c:	b538      	push	{r3, r4, r5, lr}
 801e89e:	4d07      	ldr	r5, [pc, #28]	; (801e8bc <_fstat_r+0x20>)
 801e8a0:	2300      	movs	r3, #0
 801e8a2:	4604      	mov	r4, r0
 801e8a4:	4608      	mov	r0, r1
 801e8a6:	4611      	mov	r1, r2
 801e8a8:	602b      	str	r3, [r5, #0]
 801e8aa:	f7e2 fcc4 	bl	8001236 <_fstat>
 801e8ae:	1c43      	adds	r3, r0, #1
 801e8b0:	d102      	bne.n	801e8b8 <_fstat_r+0x1c>
 801e8b2:	682b      	ldr	r3, [r5, #0]
 801e8b4:	b103      	cbz	r3, 801e8b8 <_fstat_r+0x1c>
 801e8b6:	6023      	str	r3, [r4, #0]
 801e8b8:	bd38      	pop	{r3, r4, r5, pc}
 801e8ba:	bf00      	nop
 801e8bc:	2401b4e8 	.word	0x2401b4e8

0801e8c0 <_isatty_r>:
 801e8c0:	b538      	push	{r3, r4, r5, lr}
 801e8c2:	4d06      	ldr	r5, [pc, #24]	; (801e8dc <_isatty_r+0x1c>)
 801e8c4:	2300      	movs	r3, #0
 801e8c6:	4604      	mov	r4, r0
 801e8c8:	4608      	mov	r0, r1
 801e8ca:	602b      	str	r3, [r5, #0]
 801e8cc:	f7e2 fcc3 	bl	8001256 <_isatty>
 801e8d0:	1c43      	adds	r3, r0, #1
 801e8d2:	d102      	bne.n	801e8da <_isatty_r+0x1a>
 801e8d4:	682b      	ldr	r3, [r5, #0]
 801e8d6:	b103      	cbz	r3, 801e8da <_isatty_r+0x1a>
 801e8d8:	6023      	str	r3, [r4, #0]
 801e8da:	bd38      	pop	{r3, r4, r5, pc}
 801e8dc:	2401b4e8 	.word	0x2401b4e8

0801e8e0 <_init>:
 801e8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8e2:	bf00      	nop
 801e8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8e6:	bc08      	pop	{r3}
 801e8e8:	469e      	mov	lr, r3
 801e8ea:	4770      	bx	lr

0801e8ec <_fini>:
 801e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e8ee:	bf00      	nop
 801e8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e8f2:	bc08      	pop	{r3}
 801e8f4:	469e      	mov	lr, r3
 801e8f6:	4770      	bx	lr
