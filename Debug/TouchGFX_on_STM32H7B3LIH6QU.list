
TouchGFX_on_STM32H7B3LIH6QU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001cb5c  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aec  0801ce0c  0801ce0c  0002ce0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0801e8f8  0801e8f8  0002e8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0801eaa0  0801eaa0  0002eaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 0005fa00  0801eab8  0801eab8  0002eab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  0807e4b8  0807e4b8  0008e4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000014  0807e4c8  0807e4c8  0008e4c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  0807e4dc  0807e4dc  0008e4dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  24000000  0807e4e4  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001b4e8  240000e0  0807e5c4  000900e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2401b5c8  0807e5c4  0009b5c8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000900e0  2**0
                  CONTENTS, READONLY
 13 .comment      000000c2  00000000  00000000  0009010e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0007cf49  00000000  00000000  000901d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ea1f  00000000  00000000  0010d119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003280  00000000  00000000  0011bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000258a  00000000  00000000  0011edb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003cabd  00000000  00000000  00121342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00039c21  00000000  00000000  0015ddff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016eeca  00000000  00000000  00197a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000de34  00000000  00000000  003068ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  00314720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000e0 	.word	0x240000e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801cdf4 	.word	0x0801cdf4

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000e4 	.word	0x240000e4
 80002ec:	0801cdf4 	.word	0x0801cdf4

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
	...

080003a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a4:	f000 ffd6 	bl	8001354 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003a8:	f000 fb3c 	bl	8000a24 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ac:	f000 f832 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b0:	f000 fa14 	bl	80007dc <MX_GPIO_Init>
  MX_DMA2D_Init();
 80003b4:	f000 f8c4 	bl	8000540 <MX_DMA2D_Init>
  MX_FMC_Init();
 80003b8:	f000 f9be 	bl	8000738 <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 80003bc:	f000 f97c 	bl	80006b8 <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 80003c0:	f000 f89c 	bl	80004fc <MX_CRC_Init>
  MX_LTDC_Init();
 80003c4:	f000 f8f6 	bl	80005b4 <MX_LTDC_Init>
  MX_TouchGFX_Init();
 80003c8:	f008 feb1 	bl	800912e <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80003cc:	f008 fea8 	bl	8009120 <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80003d0:	f005 fab4 	bl	800593c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80003d4:	4a09      	ldr	r2, [pc, #36]	; (80003fc <main+0x5c>)
 80003d6:	2100      	movs	r1, #0
 80003d8:	4809      	ldr	r0, [pc, #36]	; (8000400 <main+0x60>)
 80003da:	f005 faf9 	bl	80059d0 <osThreadNew>
 80003de:	4603      	mov	r3, r0
 80003e0:	4a08      	ldr	r2, [pc, #32]	; (8000404 <main+0x64>)
 80003e2:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUI_Task_attributes);
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <main+0x68>)
 80003e6:	2100      	movs	r1, #0
 80003e8:	4808      	ldr	r0, [pc, #32]	; (800040c <main+0x6c>)
 80003ea:	f005 faf1 	bl	80059d0 <osThreadNew>
 80003ee:	4603      	mov	r3, r0
 80003f0:	4a07      	ldr	r2, [pc, #28]	; (8000410 <main+0x70>)
 80003f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80003f4:	f005 fac6 	bl	8005984 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <main+0x58>
 80003fa:	bf00      	nop
 80003fc:	0801d7dc 	.word	0x0801d7dc
 8000400:	08000a05 	.word	0x08000a05
 8000404:	240002c0 	.word	0x240002c0
 8000408:	0801d800 	.word	0x0801d800
 800040c:	0800913f 	.word	0x0800913f
 8000410:	240002c4 	.word	0x240002c4

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b09c      	sub	sp, #112	; 0x70
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041e:	224c      	movs	r2, #76	; 0x4c
 8000420:	2100      	movs	r1, #0
 8000422:	4618      	mov	r0, r3
 8000424:	f01b fe6b 	bl	801c0fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2220      	movs	r2, #32
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f01b fe65 	bl	801c0fe <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000434:	4b2f      	ldr	r3, [pc, #188]	; (80004f4 <SystemClock_Config+0xe0>)
 8000436:	f04f 32ff 	mov.w	r2, #4294967295
 800043a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800043e:	2004      	movs	r0, #4
 8000440:	f002 faf6 	bl	8002a30 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000444:	2300      	movs	r3, #0
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	4b2b      	ldr	r3, [pc, #172]	; (80004f8 <SystemClock_Config+0xe4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a2a      	ldr	r2, [pc, #168]	; (80004f8 <SystemClock_Config+0xe4>)
 800044e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b28      	ldr	r3, [pc, #160]	; (80004f8 <SystemClock_Config+0xe4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000460:	bf00      	nop
 8000462:	4b25      	ldr	r3, [pc, #148]	; (80004f8 <SystemClock_Config+0xe4>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046e:	d1f8      	bne.n	8000462 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000470:	2301      	movs	r3, #1
 8000472:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000478:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	2302      	movs	r3, #2
 8000480:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000482:	2303      	movs	r3, #3
 8000484:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000486:	2346      	movs	r3, #70	; 0x46
 8000488:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800048a:	2302      	movs	r3, #2
 800048c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800048e:	2302      	movs	r3, #2
 8000490:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000492:	2302      	movs	r3, #2
 8000494:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000496:	230c      	movs	r3, #12
 8000498:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800049a:	2300      	movs	r3, #0
 800049c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 fb1c 	bl	8002ae4 <HAL_RCC_OscConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80004b2:	f000 faf5 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	233f      	movs	r3, #63	; 0x3f
 80004b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ba:	2303      	movs	r3, #3
 80004bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80004c6:	2340      	movs	r3, #64	; 0x40
 80004c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80004ca:	2340      	movs	r3, #64	; 0x40
 80004cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80004ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80004d4:	2340      	movs	r3, #64	; 0x40
 80004d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2106      	movs	r1, #6
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 ff33 	bl	8003348 <HAL_RCC_ClockConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80004e8:	f000 fada 	bl	8000aa0 <Error_Handler>
  }
}
 80004ec:	bf00      	nop
 80004ee:	3770      	adds	r7, #112	; 0x70
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	58024400 	.word	0x58024400
 80004f8:	58024800 	.word	0x58024800

080004fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_CRC_Init+0x3c>)
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <MX_CRC_Init+0x40>)
 8000504:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_CRC_Init+0x3c>)
 8000508:	2200      	movs	r2, #0
 800050a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_CRC_Init+0x3c>)
 800050e:	2200      	movs	r2, #0
 8000510:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_CRC_Init+0x3c>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <MX_CRC_Init+0x3c>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_CRC_Init+0x3c>)
 8000520:	2201      	movs	r2, #1
 8000522:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_CRC_Init+0x3c>)
 8000526:	f001 f8cd 	bl	80016c4 <HAL_CRC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000530:	f000 fab6 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	240000fc 	.word	0x240000fc
 800053c:	40023000 	.word	0x40023000

08000540 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000544:	4b19      	ldr	r3, [pc, #100]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000546:	4a1a      	ldr	r2, [pc, #104]	; (80005b0 <MX_DMA2D_Init+0x70>)
 8000548:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800054a:	4b18      	ldr	r3, [pc, #96]	; (80005ac <MX_DMA2D_Init+0x6c>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000550:	4b16      	ldr	r3, [pc, #88]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000552:	2201      	movs	r2, #1
 8000554:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000558:	2200      	movs	r2, #0
 800055a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <MX_DMA2D_Init+0x6c>)
 800055e:	2200      	movs	r2, #0
 8000560:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 8000562:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000564:	2201      	movs	r2, #1
 8000566:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_DMA2D_Init+0x6c>)
 800056a:	2200      	movs	r2, #0
 800056c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000570:	2200      	movs	r2, #0
 8000572:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8000574:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000576:	2200      	movs	r2, #0
 8000578:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 800057a:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <MX_DMA2D_Init+0x6c>)
 800057c:	2200      	movs	r2, #0
 800057e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000580:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000582:	2200      	movs	r2, #0
 8000584:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <MX_DMA2D_Init+0x6c>)
 8000588:	f001 f98e 	bl	80018a8 <HAL_DMA2D_Init>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000592:	f000 fa85 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000596:	2101      	movs	r1, #1
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <MX_DMA2D_Init+0x6c>)
 800059a:	f001 faf9 	bl	8001b90 <HAL_DMA2D_ConfigLayer>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 80005a4:	f000 fa7c 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	24000120 	.word	0x24000120
 80005b0:	52001000 	.word	0x52001000

080005b4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08e      	sub	sp, #56	; 0x38
 80005b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2234      	movs	r2, #52	; 0x34
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f01b fd9c 	bl	801c0fe <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80005c6:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005c8:	4a3a      	ldr	r2, [pc, #232]	; (80006b4 <MX_LTDC_Init+0x100>)
 80005ca:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80005cc:	4b38      	ldr	r3, [pc, #224]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80005d2:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80005d8:	4b35      	ldr	r3, [pc, #212]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80005de:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80005e4:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005e6:	2228      	movs	r2, #40	; 0x28
 80005e8:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80005ea:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005ec:	2209      	movs	r2, #9
 80005ee:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005f2:	222a      	movs	r2, #42	; 0x2a
 80005f4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80005f6:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005f8:	220b      	movs	r2, #11
 80005fa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <MX_LTDC_Init+0xfc>)
 80005fe:	f240 220a 	movw	r2, #522	; 0x20a
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000604:	4b2a      	ldr	r3, [pc, #168]	; (80006b0 <MX_LTDC_Init+0xfc>)
 8000606:	f240 121b 	movw	r2, #283	; 0x11b
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_LTDC_Init+0xfc>)
 800060e:	f240 222a 	movw	r2, #554	; 0x22a
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <MX_LTDC_Init+0xfc>)
 8000616:	f240 121d 	movw	r2, #285	; 0x11d
 800061a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800061c:	4b24      	ldr	r3, [pc, #144]	; (80006b0 <MX_LTDC_Init+0xfc>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000624:	4b22      	ldr	r3, [pc, #136]	; (80006b0 <MX_LTDC_Init+0xfc>)
 8000626:	2200      	movs	r2, #0
 8000628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800062c:	4b20      	ldr	r3, [pc, #128]	; (80006b0 <MX_LTDC_Init+0xfc>)
 800062e:	2200      	movs	r2, #0
 8000630:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000634:	481e      	ldr	r0, [pc, #120]	; (80006b0 <MX_LTDC_Init+0xfc>)
 8000636:	f001 fd61 	bl	80020fc <HAL_LTDC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000640:	f000 fa2e 	bl	8000aa0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000648:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800064c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000652:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000656:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800065c:	23ff      	movs	r3, #255	; 0xff
 800065e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000668:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800066a:	2305      	movs	r3, #5
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800066e:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000674:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000678:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800067a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800067e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000680:	23ff      	movs	r3, #255	; 0xff
 8000682:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	2200      	movs	r2, #0
 8000696:	4619      	mov	r1, r3
 8000698:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_LTDC_Init+0xfc>)
 800069a:	f001 feb7 	bl	800240c <HAL_LTDC_ConfigLayer>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80006a4:	f000 f9fc 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80006a8:	bf00      	nop
 80006aa:	3738      	adds	r7, #56	; 0x38
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	24000188 	.word	0x24000188
 80006b4:	50001000 	.word	0x50001000

080006b8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006be:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <MX_OCTOSPI1_Init+0x7c>)
 80006c0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006d6:	221a      	movs	r2, #26
 80006d8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006dc:	2202      	movs	r2, #2
 80006de:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80006ec:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 800070c:	2208      	movs	r2, #8
 800070e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 8000712:	2200      	movs	r2, #0
 8000714:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_OCTOSPI1_Init+0x78>)
 800071e:	f002 f885 	bl	800282c <HAL_OSPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000728:	f000 f9ba 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	24000230 	.word	0x24000230
 8000734:	52005000 	.word	0x52005000

08000738 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]
 800074c:	615a      	str	r2, [r3, #20]
 800074e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000752:	4a21      	ldr	r2, [pc, #132]	; (80007d8 <MX_FMC_Init+0xa0>)
 8000754:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000758:	2201      	movs	r2, #1
 800075a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800075c:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_FMC_Init+0x9c>)
 800075e:	2201      	movs	r2, #1
 8000760:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000764:	2204      	movs	r2, #4
 8000766:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000768:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_FMC_Init+0x9c>)
 800076a:	2210      	movs	r2, #16
 800076c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800076e:	4b19      	ldr	r3, [pc, #100]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000770:	2240      	movs	r2, #64	; 0x40
 8000772:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800077a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_FMC_Init+0x9c>)
 800077e:	2200      	movs	r2, #0
 8000780:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000784:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000788:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_FMC_Init+0x9c>)
 800078c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_FMC_Init+0x9c>)
 8000794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800079e:	2307      	movs	r3, #7
 80007a0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80007aa:	2303      	movs	r3, #3
 80007ac:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_FMC_Init+0x9c>)
 80007bc:	f004 fc9e 	bl	80050fc <HAL_SDRAM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 80007c6:	f000 f96b 	bl	8000aa0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007ca:	bf00      	nop
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2400028c 	.word	0x2400028c
 80007d8:	52004140 	.word	0x52004140

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	4b7f      	ldr	r3, [pc, #508]	; (80009f0 <MX_GPIO_Init+0x214>)
 80007f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f8:	4a7d      	ldr	r2, [pc, #500]	; (80009f0 <MX_GPIO_Init+0x214>)
 80007fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000802:	4b7b      	ldr	r3, [pc, #492]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000804:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800080c:	623b      	str	r3, [r7, #32]
 800080e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000810:	4b77      	ldr	r3, [pc, #476]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000812:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000816:	4a76      	ldr	r2, [pc, #472]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800081c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000820:	4b73      	ldr	r3, [pc, #460]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000822:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800082a:	61fb      	str	r3, [r7, #28]
 800082c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b70      	ldr	r3, [pc, #448]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000830:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000834:	4a6e      	ldr	r2, [pc, #440]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000836:	f043 0308 	orr.w	r3, r3, #8
 800083a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083e:	4b6c      	ldr	r3, [pc, #432]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000840:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084c:	4b68      	ldr	r3, [pc, #416]	; (80009f0 <MX_GPIO_Init+0x214>)
 800084e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000852:	4a67      	ldr	r2, [pc, #412]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085c:	4b64      	ldr	r3, [pc, #400]	; (80009f0 <MX_GPIO_Init+0x214>)
 800085e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	617b      	str	r3, [r7, #20]
 8000868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800086a:	4b61      	ldr	r3, [pc, #388]	; (80009f0 <MX_GPIO_Init+0x214>)
 800086c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000870:	4a5f      	ldr	r2, [pc, #380]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000876:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087a:	4b5d      	ldr	r3, [pc, #372]	; (80009f0 <MX_GPIO_Init+0x214>)
 800087c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b59      	ldr	r3, [pc, #356]	; (80009f0 <MX_GPIO_Init+0x214>)
 800088a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088e:	4a58      	ldr	r2, [pc, #352]	; (80009f0 <MX_GPIO_Init+0x214>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000898:	4b55      	ldr	r3, [pc, #340]	; (80009f0 <MX_GPIO_Init+0x214>)
 800089a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b52      	ldr	r3, [pc, #328]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ac:	4a50      	ldr	r2, [pc, #320]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008b6:	4b4e      	ldr	r3, [pc, #312]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008c4:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ca:	4a49      	ldr	r2, [pc, #292]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d4:	4b46      	ldr	r3, [pc, #280]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4b43      	ldr	r3, [pc, #268]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008e8:	4a41      	ldr	r2, [pc, #260]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008ea:	f043 0320 	orr.w	r3, r3, #32
 80008ee:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f2:	4b3f      	ldr	r3, [pc, #252]	; (80009f0 <MX_GPIO_Init+0x214>)
 80008f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008f8:	f003 0320 	and.w	r3, r3, #32
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 8000906:	483b      	ldr	r0, [pc, #236]	; (80009f4 <MX_GPIO_Init+0x218>)
 8000908:	f001 fba0 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000912:	4839      	ldr	r0, [pc, #228]	; (80009f8 <MX_GPIO_Init+0x21c>)
 8000914:	f001 fb9a 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED2_GPIO_Port, USER_LED2_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2104      	movs	r1, #4
 800091c:	4837      	ldr	r0, [pc, #220]	; (80009fc <MX_GPIO_Init+0x220>)
 800091e:	f001 fb95 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2106      	movs	r1, #6
 8000926:	4836      	ldr	r0, [pc, #216]	; (8000a00 <MX_GPIO_Init+0x224>)
 8000928:	f001 fb90 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 800092c:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000932:	2301      	movs	r3, #1
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800093e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000942:	4619      	mov	r1, r3
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <MX_GPIO_Init+0x218>)
 8000946:	f001 f9d1 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 800094a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000958:	2303      	movs	r3, #3
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000960:	4619      	mov	r1, r3
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <MX_GPIO_Init+0x21c>)
 8000964:	f001 f9c2 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED2_Pin */
  GPIO_InitStruct.Pin = USER_LED2_Pin;
 8000968:	2304      	movs	r3, #4
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USER_LED2_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	481f      	ldr	r0, [pc, #124]	; (80009fc <MX_GPIO_Init+0x220>)
 8000980:	f001 f9b4 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000984:	2304      	movs	r3, #4
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000988:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098e:	2301      	movs	r3, #1
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4816      	ldr	r0, [pc, #88]	; (80009f4 <MX_GPIO_Init+0x218>)
 800099a:	f001 f9a7 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800099e:	2302      	movs	r3, #2
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <MX_GPIO_Init+0x224>)
 80009b6:	f001 f999 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 80009ba:	2304      	movs	r3, #4
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	; (8000a00 <MX_GPIO_Init+0x224>)
 80009d2:	f001 f98b 	bl	8001cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2008      	movs	r0, #8
 80009dc:	f000 fdce 	bl	800157c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009e0:	2008      	movs	r0, #8
 80009e2:	f000 fde5 	bl	80015b0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	3738      	adds	r7, #56	; 0x38
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	58024400 	.word	0x58024400
 80009f4:	58021c00 	.word	0x58021c00
 80009f8:	58022000 	.word	0x58022000
 80009fc:	58021800 	.word	0x58021800
 8000a00:	58020000 	.word	0x58020000

08000a04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(300);
 8000a0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a10:	f005 f870 	bl	8005af4 <osDelay>
    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_2);
 8000a14:	2104      	movs	r1, #4
 8000a16:	4802      	ldr	r0, [pc, #8]	; (8000a20 <StartDefaultTask+0x1c>)
 8000a18:	f001 fb31 	bl	800207e <HAL_GPIO_TogglePin>
    osDelay(300);
 8000a1c:	e7f6      	b.n	8000a0c <StartDefaultTask+0x8>
 8000a1e:	bf00      	nop
 8000a20:	58021800 	.word	0x58021800

08000a24 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a36:	f000 fdc9 	bl	80015cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a46:	231f      	movs	r3, #31
 8000a48:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a4a:	2387      	movs	r3, #135	; 0x87
 8000a4c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a52:	2300      	movs	r3, #0
 8000a54:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a56:	2301      	movs	r3, #1
 8000a58:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a66:	463b      	mov	r3, r7
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fde7 	bl	800163c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a6e:	2004      	movs	r0, #4
 8000a70:	f000 fdc4 	bl	80015fc <HAL_MPU_Enable>

}
 8000a74:	bf00      	nop
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8e:	f000 fc9d 	bl	80013cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40001000 	.word	0x40001000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x38>)
 8000ab4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_MspInit+0x38>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x38>)
 8000ac4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f06f 0001 	mvn.w	r0, #1
 8000ad8:	f000 fd50 	bl	800157c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <HAL_CRC_MspInit+0x3c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d10e      	bne.n	8000b18 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_CRC_MspInit+0x40>)
 8000afc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <HAL_CRC_MspInit+0x40>)
 8000b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b06:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <HAL_CRC_MspInit+0x40>)
 8000b0c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40023000 	.word	0x40023000
 8000b28:	58024400 	.word	0x58024400

08000b2c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <HAL_DMA2D_MspInit+0x48>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d116      	bne.n	8000b6c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_DMA2D_MspInit+0x4c>)
 8000b40:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000b44:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_DMA2D_MspInit+0x4c>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_DMA2D_MspInit+0x4c>)
 8000b50:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2105      	movs	r1, #5
 8000b60:	205a      	movs	r0, #90	; 0x5a
 8000b62:	f000 fd0b 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000b66:	205a      	movs	r0, #90	; 0x5a
 8000b68:	f000 fd22 	bl	80015b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	52001000 	.word	0x52001000
 8000b78:	58024400 	.word	0x58024400

08000b7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0bc      	sub	sp, #240	; 0xf0
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f01b faae 	bl	801c0fe <memset>
  if(hltdc->Instance==LTDC)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a57      	ldr	r2, [pc, #348]	; (8000d04 <HAL_LTDC_MspInit+0x188>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	f040 80a7 	bne.w	8000cfc <HAL_LTDC_MspInit+0x180>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000bae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 10;
 8000bbe:	230a      	movs	r3, #10
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000bce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462.0;
 8000bd8:	f241 5356 	movw	r3, #5462	; 0x1556
 8000bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 ff68 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8000bee:	f7ff ff57 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000bf2:	4b45      	ldr	r3, [pc, #276]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000bf4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000bf8:	4a43      	ldr	r2, [pc, #268]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000c02:	4b41      	ldr	r3, [pc, #260]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c04:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000c08:	f003 0308 	and.w	r3, r3, #8
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000c10:	4b3d      	ldr	r3, [pc, #244]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c16:	4a3c      	ldr	r2, [pc, #240]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c20:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c2e:	4b36      	ldr	r3, [pc, #216]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c34:	4a34      	ldr	r2, [pc, #208]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_LTDC_MspInit+0x18c>)
 8000c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8000c6a:	23fd      	movs	r3, #253	; 0xfd
 8000c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c82:	230e      	movs	r3, #14
 8000c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481f      	ldr	r0, [pc, #124]	; (8000d0c <HAL_LTDC_MspInit+0x190>)
 8000c90:	f001 f82c 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cae:	230e      	movs	r3, #14
 8000cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4815      	ldr	r0, [pc, #84]	; (8000d10 <HAL_LTDC_MspInit+0x194>)
 8000cbc:	f001 f816 	bl	8001cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13
 8000cc0:	f24f 0302 	movw	r3, #61442	; 0xf002
 8000cc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000cda:	230e      	movs	r3, #14
 8000cdc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ce0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480b      	ldr	r0, [pc, #44]	; (8000d14 <HAL_LTDC_MspInit+0x198>)
 8000ce8:	f001 f800 	bl	8001cec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2058      	movs	r0, #88	; 0x58
 8000cf2:	f000 fc43 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000cf6:	2058      	movs	r0, #88	; 0x58
 8000cf8:	f000 fc5a 	bl	80015b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	37f0      	adds	r7, #240	; 0xf0
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	50001000 	.word	0x50001000
 8000d08:	58024400 	.word	0x58024400
 8000d0c:	58022800 	.word	0x58022800
 8000d10:	58022400 	.word	0x58022400
 8000d14:	58022000 	.word	0x58022000

08000d18 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0b4      	sub	sp, #208	; 0xd0
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	22c0      	movs	r2, #192	; 0xc0
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f01b f9e8 	bl	801c0fe <memset>
  if(hospi->Instance==OCTOSPI1)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_OSPI_MspInit+0x88>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d12f      	bne.n	8000d98 <HAL_OSPI_MspInit+0x80>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000d38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 feb3 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_OSPI_MspInit+0x44>
    {
      Error_Handler();
 8000d58:	f7ff fea2 	bl	8000aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_OSPI_MspInit+0x8c>)
 8000d5e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_OSPI_MspInit+0x8c>)
 8000d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d68:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_OSPI_MspInit+0x8c>)
 8000d6e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <HAL_OSPI_MspInit+0x8c>)
 8000d7c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000d80:	4a08      	ldr	r2, [pc, #32]	; (8000da4 <HAL_OSPI_MspInit+0x8c>)
 8000d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d86:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_OSPI_MspInit+0x8c>)
 8000d8c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	37d0      	adds	r7, #208	; 0xd0
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	52005000 	.word	0x52005000
 8000da4:	58024400 	.word	0x58024400

08000da8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0b8      	sub	sp, #224	; 0xe0
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000dae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000dbe:	4b51      	ldr	r3, [pc, #324]	; (8000f04 <HAL_FMC_MspInit+0x15c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8099 	bne.w	8000efa <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 8000dc8:	4b4e      	ldr	r3, [pc, #312]	; (8000f04 <HAL_FMC_MspInit+0x15c>)
 8000dca:	2201      	movs	r2, #1
 8000dcc:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	22c0      	movs	r2, #192	; 0xc0
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f01b f991 	bl	801c0fe <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000ddc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dec:	f107 0308 	add.w	r3, r7, #8
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 fe61 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8000dfc:	f7ff fe50 	bl	8000aa0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e00:	4b41      	ldr	r3, [pc, #260]	; (8000f08 <HAL_FMC_MspInit+0x160>)
 8000e02:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e06:	4a40      	ldr	r2, [pc, #256]	; (8000f08 <HAL_FMC_MspInit+0x160>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000e10:	4b3d      	ldr	r3, [pc, #244]	; (8000f08 <HAL_FMC_MspInit+0x160>)
 8000e12:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
  PG0   ------> FMC_A10
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000e1e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000e22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e38:	230c      	movs	r3, #12
 8000e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e42:	4619      	mov	r1, r3
 8000e44:	4831      	ldr	r0, [pc, #196]	; (8000f0c <HAL_FMC_MspInit+0x164>)
 8000e46:	f000 ff51 	bl	8001cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8000e4a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e64:	230c      	movs	r3, #12
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4827      	ldr	r0, [pc, #156]	; (8000f10 <HAL_FMC_MspInit+0x168>)
 8000e72:	f000 ff3b 	bl	8001cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 8000e76:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e90:	230c      	movs	r3, #12
 8000e92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e96:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481d      	ldr	r0, [pc, #116]	; (8000f14 <HAL_FMC_MspInit+0x16c>)
 8000e9e:	f000 ff25 	bl	8001cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8000ea2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ec2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <HAL_FMC_MspInit+0x170>)
 8000eca:	f000 ff0f 	bl	8001cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 8000ece:	23e0      	movs	r3, #224	; 0xe0
 8000ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee6:	230c      	movs	r3, #12
 8000ee8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000eec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480a      	ldr	r0, [pc, #40]	; (8000f1c <HAL_FMC_MspInit+0x174>)
 8000ef4:	f000 fefa 	bl	8001cec <HAL_GPIO_Init>
 8000ef8:	e000      	b.n	8000efc <HAL_FMC_MspInit+0x154>
    return;
 8000efa:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000efc:	37e0      	adds	r7, #224	; 0xe0
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	240002c8 	.word	0x240002c8
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58021800 	.word	0x58021800
 8000f10:	58020c00 	.word	0x58020c00
 8000f14:	58021000 	.word	0x58021000
 8000f18:	58021400 	.word	0x58021400
 8000f1c:	58021c00 	.word	0x58021c00

08000f20 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f28:	f7ff ff3e 	bl	8000da8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b090      	sub	sp, #64	; 0x40
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b0f      	cmp	r3, #15
 8000f40:	d827      	bhi.n	8000f92 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000f42:	2200      	movs	r2, #0
 8000f44:	6879      	ldr	r1, [r7, #4]
 8000f46:	2036      	movs	r0, #54	; 0x36
 8000f48:	f000 fb18 	bl	800157c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f4c:	2036      	movs	r0, #54	; 0x36
 8000f4e:	f000 fb2f 	bl	80015b0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f52:	4a29      	ldr	r2, [pc, #164]	; (8000ff8 <HAL_InitTick+0xc4>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f58:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <HAL_InitTick+0xc8>)
 8000f5a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f5e:	4a27      	ldr	r2, [pc, #156]	; (8000ffc <HAL_InitTick+0xc8>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000f68:	4b24      	ldr	r3, [pc, #144]	; (8000ffc <HAL_InitTick+0xc8>)
 8000f6a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000f6e:	f003 0310 	and.w	r3, r3, #16
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f76:	f107 0210 	add.w	r2, r7, #16
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4611      	mov	r1, r2
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fd57 	bl	8003a34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d106      	bne.n	8000f9e <HAL_InitTick+0x6a>
 8000f90:	e001      	b.n	8000f96 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e02b      	b.n	8000fee <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f96:	f002 fd37 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8000f9a:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000f9c:	e004      	b.n	8000fa8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f9e:	f002 fd33 	bl	8003a08 <HAL_RCC_GetPCLK1Freq>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000faa:	4a15      	ldr	r2, [pc, #84]	; (8001000 <HAL_InitTick+0xcc>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9b      	lsrs	r3, r3, #18
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_InitTick+0xd0>)
 8000fb8:	4a13      	ldr	r2, [pc, #76]	; (8001008 <HAL_InitTick+0xd4>)
 8000fba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_InitTick+0xd0>)
 8000fbe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fc2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000fc4:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <HAL_InitTick+0xd0>)
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <HAL_InitTick+0xd0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <HAL_InitTick+0xd0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000fd6:	480b      	ldr	r0, [pc, #44]	; (8001004 <HAL_InitTick+0xd0>)
 8000fd8:	f004 f8cc 	bl	8005174 <HAL_TIM_Base_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d104      	bne.n	8000fec <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <HAL_InitTick+0xd0>)
 8000fe4:	f004 f928 	bl	8005238 <HAL_TIM_Base_Start_IT>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	e000      	b.n	8000fee <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3740      	adds	r7, #64	; 0x40
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2400000c 	.word	0x2400000c
 8000ffc:	58024400 	.word	0x58024400
 8001000:	431bde83 	.word	0x431bde83
 8001004:	240002cc 	.word	0x240002cc
 8001008:	40001000 	.word	0x40001000

0800100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001010:	e7fe      	b.n	8001010 <NMI_Handler+0x4>

08001012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001012:	b480      	push	{r7}
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001016:	e7fe      	b.n	8001016 <HardFault_Handler+0x4>

08001018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800101c:	e7fe      	b.n	800101c <MemManage_Handler+0x4>

0800101e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <BusFault_Handler+0x4>

08001024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <UsageFault_Handler+0x4>

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 800103c:	2004      	movs	r0, #4
 800103e:	f001 f838 	bl	80020b2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <TIM6_DAC_IRQHandler+0x10>)
 800104e:	f004 f96b 	bl	8005328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	240002cc 	.word	0x240002cc

0800105c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <LTDC_IRQHandler+0x10>)
 8001062:	f001 f91b 	bl	800229c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	24000188 	.word	0x24000188

08001070 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA2D_IRQHandler+0x10>)
 8001076:	f000 fc7b 	bl	8001970 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	24000120 	.word	0x24000120

08001084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  return 1;
 8001088:	2301      	movs	r3, #1
}
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_kill>:

int _kill(int pid, int sig)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800109e:	f01b f927 	bl	801c2f0 <__errno>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2216      	movs	r2, #22
 80010a6:	601a      	str	r2, [r3, #0]
  return -1;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_exit>:

void _exit (int status)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ffe7 	bl	8001094 <_kill>
  while (1) {}    /* Make sure we hang here */
 80010c6:	e7fe      	b.n	80010c6 <_exit+0x12>

080010c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e00a      	b.n	80010f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010da:	f3af 8000 	nop.w
 80010de:	4601      	mov	r1, r0
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	b2ca      	uxtb	r2, r1
 80010e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3301      	adds	r3, #1
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	dbf0      	blt.n	80010da <_read+0x12>
  }

  return len;
 80010f8:	687b      	ldr	r3, [r7, #4]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	60f8      	str	r0, [r7, #12]
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	e009      	b.n	8001128 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	60ba      	str	r2, [r7, #8]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	3301      	adds	r3, #1
 8001126:	617b      	str	r3, [r7, #20]
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf1      	blt.n	8001114 <_write+0x12>
  }
  return len;
 8001130:	687b      	ldr	r3, [r7, #4]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <_close>:

int _close(int file)
{
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001162:	605a      	str	r2, [r3, #4]
  return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_isatty>:

int _isatty(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f01b f88c 	bl	801c2f0 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4413      	add	r3, r2
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	24100000 	.word	0x24100000
 8001204:	00000400 	.word	0x00000400
 8001208:	24000318 	.word	0x24000318
 800120c:	2401b5c8 	.word	0x2401b5c8

08001210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <SystemInit+0xd0>)
 8001216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800121a:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <SystemInit+0xd0>)
 800121c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001224:	4b2f      	ldr	r3, [pc, #188]	; (80012e4 <SystemInit+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	2b02      	cmp	r3, #2
 800122e:	d807      	bhi.n	8001240 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001230:	4b2c      	ldr	r3, [pc, #176]	; (80012e4 <SystemInit+0xd4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 030f 	bic.w	r3, r3, #15
 8001238:	4a2a      	ldr	r2, [pc, #168]	; (80012e4 <SystemInit+0xd4>)
 800123a:	f043 0303 	orr.w	r3, r3, #3
 800123e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001240:	4b29      	ldr	r3, [pc, #164]	; (80012e8 <SystemInit+0xd8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a28      	ldr	r2, [pc, #160]	; (80012e8 <SystemInit+0xd8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800124c:	4b26      	ldr	r3, [pc, #152]	; (80012e8 <SystemInit+0xd8>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <SystemInit+0xd8>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4924      	ldr	r1, [pc, #144]	; (80012e8 <SystemInit+0xd8>)
 8001258:	4b24      	ldr	r3, [pc, #144]	; (80012ec <SystemInit+0xdc>)
 800125a:	4013      	ands	r3, r2
 800125c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <SystemInit+0xd4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <SystemInit+0xd4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 030f 	bic.w	r3, r3, #15
 8001272:	4a1c      	ldr	r2, [pc, #112]	; (80012e4 <SystemInit+0xd4>)
 8001274:	f043 0303 	orr.w	r3, r3, #3
 8001278:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800127a:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <SystemInit+0xd8>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <SystemInit+0xd8>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <SystemInit+0xd8>)
 8001288:	2200      	movs	r2, #0
 800128a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800128c:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <SystemInit+0xd8>)
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <SystemInit+0xe0>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <SystemInit+0xd8>)
 8001294:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <SystemInit+0xe4>)
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <SystemInit+0xd8>)
 800129a:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <SystemInit+0xe8>)
 800129c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800129e:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <SystemInit+0xd8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <SystemInit+0xd8>)
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <SystemInit+0xe8>)
 80012a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <SystemInit+0xd8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <SystemInit+0xd8>)
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <SystemInit+0xe8>)
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <SystemInit+0xd8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <SystemInit+0xd8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <SystemInit+0xd8>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <SystemInit+0xd8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <SystemInit+0xec>)
 80012d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80012d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00
 80012e4:	52002000 	.word	0x52002000
 80012e8:	58024400 	.word	0x58024400
 80012ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80012f0:	02020200 	.word	0x02020200
 80012f4:	01ff0000 	.word	0x01ff0000
 80012f8:	01010280 	.word	0x01010280
 80012fc:	52004000 	.word	0x52004000

08001300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001304:	f7ff ff84 	bl	8001210 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800132e:	f01a ffe5 	bl	801c2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001332:	f7ff f835 	bl	80003a0 <main>
  bx  lr
 8001336:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001338:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 800133c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001340:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 8001344:	0807e4e4 	.word	0x0807e4e4
  ldr r2, =_sbss
 8001348:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 800134c:	2401b5c8 	.word	0x2401b5c8

08001350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC_IRQHandler>
	...

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135a:	2003      	movs	r0, #3
 800135c:	f000 f903 	bl	8001566 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001360:	f002 f9a8 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	4913      	ldr	r1, [pc, #76]	; (80013c0 <HAL_Init+0x6c>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_Init+0x68>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0e      	ldr	r2, [pc, #56]	; (80013c0 <HAL_Init+0x6c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	4a0b      	ldr	r2, [pc, #44]	; (80013c4 <HAL_Init+0x70>)
 8001396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_Init+0x74>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	200f      	movs	r0, #15
 80013a0:	f7ff fdc8 	bl	8000f34 <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e002      	b.n	80013b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ae:	f7ff fb7d 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	58024400 	.word	0x58024400
 80013c0:	0801d824 	.word	0x0801d824
 80013c4:	24000008 	.word	0x24000008
 80013c8:	24000004 	.word	0x24000004

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	24000010 	.word	0x24000010
 80013f0:	2400031c 	.word	0x2400031c

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	2400031c 	.word	0x2400031c

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	4313      	orrs	r3, r2
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x40>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0000 	.word	0x05fa0000

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff4c 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800158a:	f7ff ff63 	bl	8001454 <__NVIC_GetPriorityGrouping>
 800158e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	68b9      	ldr	r1, [r7, #8]
 8001594:	6978      	ldr	r0, [r7, #20]
 8001596:	f7ff ffb3 	bl	8001500 <NVIC_EncodePriority>
 800159a:	4602      	mov	r2, r0
 800159c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015a0:	4611      	mov	r1, r2
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ff82 	bl	80014ac <__NVIC_SetPriority>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff56 	bl	8001470 <__NVIC_EnableIRQ>
}
 80015c4:	bf00      	nop
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015d0:	f3bf 8f5f 	dmb	sy
}
 80015d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <HAL_MPU_Disable+0x28>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_MPU_Disable+0x28>)
 80015dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_MPU_Disable+0x2c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00
 80015f8:	e000ed90 	.word	0xe000ed90

080015fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_MPU_Enable+0x38>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_MPU_Enable+0x3c>)
 8001610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001612:	4a09      	ldr	r2, [pc, #36]	; (8001638 <HAL_MPU_Enable+0x3c>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800161a:	f3bf 8f4f 	dsb	sy
}
 800161e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001620:	f3bf 8f6f 	isb	sy
}
 8001624:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed90 	.word	0xe000ed90
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	785a      	ldrb	r2, [r3, #1]
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_MPU_ConfigRegion+0x84>)
 800164a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d029      	beq.n	80016a8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001654:	4a1a      	ldr	r2, [pc, #104]	; (80016c0 <HAL_MPU_ConfigRegion+0x84>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7b1b      	ldrb	r3, [r3, #12]
 8001660:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7adb      	ldrb	r3, [r3, #11]
 8001666:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001668:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7a9b      	ldrb	r3, [r3, #10]
 800166e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001670:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7b5b      	ldrb	r3, [r3, #13]
 8001676:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001678:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7b9b      	ldrb	r3, [r3, #14]
 800167e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001680:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7bdb      	ldrb	r3, [r3, #15]
 8001686:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001688:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	7a5b      	ldrb	r3, [r3, #9]
 800168e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001690:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	7a1b      	ldrb	r3, [r3, #8]
 8001696:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001698:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016a2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016a4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80016a6:	e005      	b.n	80016b4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <HAL_MPU_ConfigRegion+0x84>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <HAL_MPU_ConfigRegion+0x84>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed90 	.word	0xe000ed90

080016c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e054      	b.n	8001780 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7f5b      	ldrb	r3, [r3, #29]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff f9fe 	bl	8000ae8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2202      	movs	r2, #2
 80016f0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	791b      	ldrb	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10c      	bne.n	8001714 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a22      	ldr	r2, [pc, #136]	; (8001788 <HAL_CRC_Init+0xc4>)
 8001700:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0218 	bic.w	r2, r2, #24
 8001710:	609a      	str	r2, [r3, #8]
 8001712:	e00c      	b.n	800172e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6899      	ldr	r1, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	461a      	mov	r2, r3
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f834 	bl	800178c <HAL_CRCEx_Polynomial_Set>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e028      	b.n	8001780 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	795b      	ldrb	r3, [r3, #5]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f04f 32ff 	mov.w	r2, #4294967295
 800173e:	611a      	str	r2, [r3, #16]
 8001740:	e004      	b.n	800174c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6912      	ldr	r2, [r2, #16]
 800174a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	04c11db7 	.word	0x04c11db7

0800178c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800178c:	b480      	push	{r7}
 800178e:	b087      	sub	sp, #28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800179c:	231f      	movs	r3, #31
 800179e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
 80017ae:	e063      	b.n	8001878 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80017b0:	bf00      	nop
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1e5a      	subs	r2, r3, #1
 80017b6:	613a      	str	r2, [r7, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d009      	beq.n	80017d0 <HAL_CRCEx_Polynomial_Set+0x44>
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 031f 	and.w	r3, r3, #31
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	fa22 f303 	lsr.w	r3, r2, r3
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d846      	bhi.n	8001864 <HAL_CRCEx_Polynomial_Set+0xd8>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_CRCEx_Polynomial_Set+0x50>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	0800186b 	.word	0x0800186b
 80017e0:	08001865 	.word	0x08001865
 80017e4:	08001865 	.word	0x08001865
 80017e8:	08001865 	.word	0x08001865
 80017ec:	08001865 	.word	0x08001865
 80017f0:	08001865 	.word	0x08001865
 80017f4:	08001865 	.word	0x08001865
 80017f8:	08001865 	.word	0x08001865
 80017fc:	08001859 	.word	0x08001859
 8001800:	08001865 	.word	0x08001865
 8001804:	08001865 	.word	0x08001865
 8001808:	08001865 	.word	0x08001865
 800180c:	08001865 	.word	0x08001865
 8001810:	08001865 	.word	0x08001865
 8001814:	08001865 	.word	0x08001865
 8001818:	08001865 	.word	0x08001865
 800181c:	0800184d 	.word	0x0800184d
 8001820:	08001865 	.word	0x08001865
 8001824:	08001865 	.word	0x08001865
 8001828:	08001865 	.word	0x08001865
 800182c:	08001865 	.word	0x08001865
 8001830:	08001865 	.word	0x08001865
 8001834:	08001865 	.word	0x08001865
 8001838:	08001865 	.word	0x08001865
 800183c:	08001841 	.word	0x08001841
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b06      	cmp	r3, #6
 8001844:	d913      	bls.n	800186e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800184a:	e010      	b.n	800186e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	2b07      	cmp	r3, #7
 8001850:	d90f      	bls.n	8001872 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001856:	e00c      	b.n	8001872 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	d90b      	bls.n	8001876 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001862:	e008      	b.n	8001876 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	75fb      	strb	r3, [r7, #23]
        break;
 8001868:	e006      	b.n	8001878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800186a:	bf00      	nop
 800186c:	e004      	b.n	8001878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800186e:	bf00      	nop
 8001870:	e002      	b.n	8001878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001872:	bf00      	nop
 8001874:	e000      	b.n	8001878 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001876:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10d      	bne.n	800189a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f023 0118 	bic.w	r1, r3, #24
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800189a:	7dfb      	ldrb	r3, [r7, #23]
}
 800189c:	4618      	mov	r0, r3
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e04f      	b.n	800195a <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d106      	bne.n	80018d4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff f92c 	bl	8000b2c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_DMA2D_Init+0xbc>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6851      	ldr	r1, [r2, #4]
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	69d2      	ldr	r2, [r2, #28]
 80018ee:	4311      	orrs	r1, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_DMA2D_Init+0xc0>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6891      	ldr	r1, [r2, #8]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6992      	ldr	r2, [r2, #24]
 800190a:	4311      	orrs	r1, r2
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	430b      	orrs	r3, r1
 8001912:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <HAL_DMA2D_Init+0xc4>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68d1      	ldr	r1, [r2, #12]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	430b      	orrs	r3, r1
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001930:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	691b      	ldr	r3, [r3, #16]
 8001938:	051a      	lsls	r2, r3, #20
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	055b      	lsls	r3, r3, #21
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	fff8ffbf 	.word	0xfff8ffbf
 8001968:	fffffef8 	.word	0xfffffef8
 800196c:	ffff0000 	.word	0xffff0000

08001970 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d026      	beq.n	80019e0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d021      	beq.n	80019e0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019aa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019b0:	f043 0201 	orr.w	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2204      	movs	r2, #4
 80019c4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d026      	beq.n	8001a38 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d021      	beq.n	8001a38 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a02:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a10:	f043 0202 	orr.w	r2, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d026      	beq.n	8001a90 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d021      	beq.n	8001a90 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2208      	movs	r2, #8
 8001a62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a68:	f043 0204 	orr.w	r2, r3, #4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2204      	movs	r2, #4
 8001a74:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d013      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f853 	bl	8001b68 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d024      	beq.n	8001b16 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d01f      	beq.n	8001b16 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01f      	beq.n	8001b60 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d01a      	beq.n	8001b60 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b38:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2210      	movs	r2, #16
 8001b40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f80e 	bl	8001b7c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_DMA2D_ConfigLayer+0x24>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e092      	b.n	8001cda <HAL_DMA2D_ConfigLayer+0x14a>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	3328      	adds	r3, #40	; 0x28
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001be8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001bf4:	4b3c      	ldr	r3, [pc, #240]	; (8001ce8 <HAL_DMA2D_ConfigLayer+0x158>)
 8001bf6:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	2b0a      	cmp	r3, #10
 8001bfe:	d003      	beq.n	8001c08 <HAL_DMA2D_ConfigLayer+0x78>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e005      	b.n	8001c24 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	061b      	lsls	r3, r3, #24
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d120      	bne.n	8001c6c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	ea02 0103 	and.w	r1, r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b0a      	cmp	r3, #10
 8001c52:	d003      	beq.n	8001c5c <HAL_DMA2D_ConfigLayer+0xcc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b09      	cmp	r3, #9
 8001c5a:	d135      	bne.n	8001cc8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c68:	629a      	str	r2, [r3, #40]	; 0x28
 8001c6a:	e02d      	b.n	8001cc8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b0b      	cmp	r3, #11
 8001c72:	d109      	bne.n	8001c88 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	049b      	lsls	r3, r3, #18
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001c86:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69da      	ldr	r2, [r3, #28]
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	ea02 0103 	and.w	r1, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b0a      	cmp	r3, #10
 8001cb0:	d003      	beq.n	8001cba <HAL_DMA2D_ConfigLayer+0x12a>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b09      	cmp	r3, #9
 8001cb8:	d106      	bne.n	8001cc8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cc6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	ff33000f 	.word	0xff33000f

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cfa:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <HAL_GPIO_Init+0x234>)
 8001cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cfe:	e194      	b.n	800202a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8186 	beq.w	8002024 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d005      	beq.n	8001d30 <HAL_GPIO_Init+0x44>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d130      	bne.n	8001d92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d66:	2201      	movs	r2, #1
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4013      	ands	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 0201 	and.w	r2, r3, #1
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d017      	beq.n	8001dce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d123      	bne.n	8001e22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0203 	and.w	r2, r3, #3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80e0 	beq.w	8002024 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e64:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_GPIO_Init+0x238>)
 8001e66:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e6a:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <HAL_GPIO_Init+0x238>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_GPIO_Init+0x238>)
 8001e76:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e82:	4a29      	ldr	r2, [pc, #164]	; (8001f28 <HAL_GPIO_Init+0x23c>)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	089b      	lsrs	r3, r3, #2
 8001e88:	3302      	adds	r3, #2
 8001e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	220f      	movs	r2, #15
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a20      	ldr	r2, [pc, #128]	; (8001f2c <HAL_GPIO_Init+0x240>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d052      	beq.n	8001f54 <HAL_GPIO_Init+0x268>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_GPIO_Init+0x244>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d031      	beq.n	8001f1a <HAL_GPIO_Init+0x22e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a1e      	ldr	r2, [pc, #120]	; (8001f34 <HAL_GPIO_Init+0x248>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d02b      	beq.n	8001f16 <HAL_GPIO_Init+0x22a>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_GPIO_Init+0x24c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d025      	beq.n	8001f12 <HAL_GPIO_Init+0x226>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <HAL_GPIO_Init+0x250>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d01f      	beq.n	8001f0e <HAL_GPIO_Init+0x222>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x254>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d019      	beq.n	8001f0a <HAL_GPIO_Init+0x21e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_GPIO_Init+0x258>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d013      	beq.n	8001f06 <HAL_GPIO_Init+0x21a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_GPIO_Init+0x25c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00d      	beq.n	8001f02 <HAL_GPIO_Init+0x216>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_GPIO_Init+0x260>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d007      	beq.n	8001efe <HAL_GPIO_Init+0x212>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_GPIO_Init+0x264>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d101      	bne.n	8001efa <HAL_GPIO_Init+0x20e>
 8001ef6:	2309      	movs	r3, #9
 8001ef8:	e02d      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001efa:	230a      	movs	r3, #10
 8001efc:	e02b      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001efe:	2308      	movs	r3, #8
 8001f00:	e029      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f02:	2307      	movs	r3, #7
 8001f04:	e027      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f06:	2306      	movs	r3, #6
 8001f08:	e025      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f0a:	2305      	movs	r3, #5
 8001f0c:	e023      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f0e:	2304      	movs	r3, #4
 8001f10:	e021      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f12:	2303      	movs	r3, #3
 8001f14:	e01f      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f16:	2302      	movs	r3, #2
 8001f18:	e01d      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01b      	b.n	8001f56 <HAL_GPIO_Init+0x26a>
 8001f1e:	bf00      	nop
 8001f20:	58000080 	.word	0x58000080
 8001f24:	58024400 	.word	0x58024400
 8001f28:	58000400 	.word	0x58000400
 8001f2c:	58020000 	.word	0x58020000
 8001f30:	58020400 	.word	0x58020400
 8001f34:	58020800 	.word	0x58020800
 8001f38:	58020c00 	.word	0x58020c00
 8001f3c:	58021000 	.word	0x58021000
 8001f40:	58021400 	.word	0x58021400
 8001f44:	58021800 	.word	0x58021800
 8001f48:	58021c00 	.word	0x58021c00
 8001f4c:	58022000 	.word	0x58022000
 8001f50:	58022400 	.word	0x58022400
 8001f54:	2300      	movs	r3, #0
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	f002 0203 	and.w	r2, r2, #3
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	4093      	lsls	r3, r2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f66:	4938      	ldr	r1, [pc, #224]	; (8002048 <HAL_GPIO_Init+0x35c>)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3301      	adds	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	f47f ae63 	bne.w	8001d00 <HAL_GPIO_Init+0x14>
  }
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	3724      	adds	r7, #36	; 0x24
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	58000400 	.word	0x58000400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800207e:	b480      	push	{r7}
 8002080:	b085      	sub	sp, #20
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4013      	ands	r3, r2
 8002096:	041a      	lsls	r2, r3, #16
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	43d9      	mvns	r1, r3
 800209c:	887b      	ldrh	r3, [r7, #2]
 800209e:	400b      	ands	r3, r1
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	4013      	ands	r3, r2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f804 	bl	80020e6 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	4603      	mov	r3, r0
 80020ee:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0bf      	b.n	800228e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd2a 	bl	8000b7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800213e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6999      	ldr	r1, [r3, #24]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002154:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6899      	ldr	r1, [r3, #8]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_LTDC_Init+0x19c>)
 8002170:	400b      	ands	r3, r1
 8002172:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	041b      	lsls	r3, r3, #16
 800217a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6899      	ldr	r1, [r3, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	431a      	orrs	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68d9      	ldr	r1, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b3e      	ldr	r3, [pc, #248]	; (8002298 <HAL_LTDC_Init+0x19c>)
 800219e:	400b      	ands	r3, r1
 80021a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	4b33      	ldr	r3, [pc, #204]	; (8002298 <HAL_LTDC_Init+0x19c>)
 80021cc:	400b      	ands	r3, r1
 80021ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6919      	ldr	r1, [r3, #16]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6959      	ldr	r1, [r3, #20]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_LTDC_Init+0x19c>)
 80021fa:	400b      	ands	r3, r1
 80021fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6959      	ldr	r1, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002222:	021b      	lsls	r3, r3, #8
 8002224:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800223e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4313      	orrs	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0206 	orr.w	r2, r2, #6
 800226a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	f000f800 	.word	0xf000f800

0800229c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d023      	beq.n	8002306 <HAL_LTDC_IRQHandler+0x6a>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01e      	beq.n	8002306 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2204      	movs	r2, #4
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2204      	movs	r2, #4
 80022f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f86f 	bl	80023e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_LTDC_IRQHandler+0xbc>
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01e      	beq.n	8002358 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0202 	bic.w	r2, r2, #2
 8002328:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2202      	movs	r2, #2
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002338:	f043 0202 	orr.w	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f846 	bl	80023e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d01b      	beq.n	800239a <HAL_LTDC_IRQHandler+0xfe>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	2b00      	cmp	r3, #0
 800236a:	d016      	beq.n	800239a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0201 	bic.w	r2, r2, #1
 800237a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2201      	movs	r2, #1
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f00b f995 	bl	800d6c4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d01b      	beq.n	80023dc <HAL_LTDC_IRQHandler+0x140>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0208 	bic.w	r2, r2, #8
 80023bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2208      	movs	r2, #8
 80023c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f80e 	bl	80023f8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80023dc:	bf00      	nop
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_LTDC_ConfigLayer+0x1a>
 8002422:	2302      	movs	r3, #2
 8002424:	e02c      	b.n	8002480 <HAL_LTDC_ConfigLayer+0x74>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2134      	movs	r1, #52	; 0x34
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	4614      	mov	r4, r2
 800244a:	461d      	mov	r5, r3
 800244c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68b9      	ldr	r1, [r7, #8]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f849 	bl	80024f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2201      	movs	r2, #1
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bdb0      	pop	{r4, r5, r7, pc}

08002488 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_LTDC_ProgramLineEvent+0x18>
 800249c:	2302      	movs	r3, #2
 800249e:	e023      	b.n	80024e8 <HAL_LTDC_ProgramLineEvent+0x60>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 0201 	bic.w	r2, r2, #1
 80024be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80024c0:	4a0c      	ldr	r2, [pc, #48]	; (80024f4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0201 	orr.w	r2, r2, #1
 80024d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	50001000 	.word	0x50001000

080024f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	; 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002514:	4413      	add	r3, r2
 8002516:	041b      	lsls	r3, r3, #16
 8002518:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	01db      	lsls	r3, r3, #7
 8002524:	4413      	add	r3, r2
 8002526:	3384      	adds	r3, #132	; 0x84
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	6812      	ldr	r2, [r2, #0]
 800252e:	4611      	mov	r1, r2
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	01d2      	lsls	r2, r2, #7
 8002534:	440a      	add	r2, r1
 8002536:	3284      	adds	r2, #132	; 0x84
 8002538:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800253c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0c1b      	lsrs	r3, r3, #16
 800254a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800254e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002550:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	440b      	add	r3, r1
 800255e:	3384      	adds	r3, #132	; 0x84
 8002560:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002566:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002576:	4413      	add	r3, r2
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	01db      	lsls	r3, r3, #7
 8002586:	4413      	add	r3, r2
 8002588:	3384      	adds	r3, #132	; 0x84
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4611      	mov	r1, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	01d2      	lsls	r2, r2, #7
 8002596:	440a      	add	r2, r1
 8002598:	3284      	adds	r2, #132	; 0x84
 800259a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800259e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025ae:	4413      	add	r3, r2
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	01db      	lsls	r3, r3, #7
 80025bc:	440b      	add	r3, r1
 80025be:	3384      	adds	r3, #132	; 0x84
 80025c0:	4619      	mov	r1, r3
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	01db      	lsls	r3, r3, #7
 80025d2:	4413      	add	r3, r2
 80025d4:	3384      	adds	r3, #132	; 0x84
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4611      	mov	r1, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	01d2      	lsls	r2, r2, #7
 80025e2:	440a      	add	r2, r1
 80025e4:	3284      	adds	r2, #132	; 0x84
 80025e6:	f023 0307 	bic.w	r3, r3, #7
 80025ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	01db      	lsls	r3, r3, #7
 80025f6:	4413      	add	r3, r2
 80025f8:	3384      	adds	r3, #132	; 0x84
 80025fa:	461a      	mov	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002612:	041b      	lsls	r3, r3, #16
 8002614:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	061b      	lsls	r3, r3, #24
 800261c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	01db      	lsls	r3, r3, #7
 8002628:	4413      	add	r3, r2
 800262a:	3384      	adds	r3, #132	; 0x84
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	01db      	lsls	r3, r3, #7
 8002638:	4413      	add	r3, r2
 800263a:	3384      	adds	r3, #132	; 0x84
 800263c:	461a      	mov	r2, r3
 800263e:	2300      	movs	r3, #0
 8002640:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002648:	461a      	mov	r2, r3
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	431a      	orrs	r2, r3
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4619      	mov	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	01db      	lsls	r3, r3, #7
 800265c:	440b      	add	r3, r1
 800265e:	3384      	adds	r3, #132	; 0x84
 8002660:	4619      	mov	r1, r3
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	4313      	orrs	r3, r2
 8002666:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	01db      	lsls	r3, r3, #7
 8002672:	4413      	add	r3, r2
 8002674:	3384      	adds	r3, #132	; 0x84
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	4611      	mov	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	01d2      	lsls	r2, r2, #7
 8002682:	440a      	add	r2, r1
 8002684:	3284      	adds	r2, #132	; 0x84
 8002686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800268a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	01db      	lsls	r3, r3, #7
 8002696:	4413      	add	r3, r2
 8002698:	3384      	adds	r3, #132	; 0x84
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	01db      	lsls	r3, r3, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	3384      	adds	r3, #132	; 0x84
 80026b0:	69da      	ldr	r2, [r3, #28]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4619      	mov	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	01db      	lsls	r3, r3, #7
 80026bc:	440b      	add	r3, r1
 80026be:	3384      	adds	r3, #132	; 0x84
 80026c0:	4619      	mov	r1, r3
 80026c2:	4b58      	ldr	r3, [pc, #352]	; (8002824 <LTDC_SetConfig+0x32c>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	6809      	ldr	r1, [r1, #0]
 80026d4:	4608      	mov	r0, r1
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	01c9      	lsls	r1, r1, #7
 80026da:	4401      	add	r1, r0
 80026dc:	3184      	adds	r1, #132	; 0x84
 80026de:	4313      	orrs	r3, r2
 80026e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	01db      	lsls	r3, r3, #7
 80026ec:	4413      	add	r3, r2
 80026ee:	3384      	adds	r3, #132	; 0x84
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	01db      	lsls	r3, r3, #7
 80026fc:	4413      	add	r3, r2
 80026fe:	3384      	adds	r3, #132	; 0x84
 8002700:	461a      	mov	r2, r3
 8002702:	2300      	movs	r3, #0
 8002704:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	01db      	lsls	r3, r3, #7
 8002710:	4413      	add	r3, r2
 8002712:	3384      	adds	r3, #132	; 0x84
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002724:	2304      	movs	r3, #4
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	e01b      	b.n	8002762 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8002732:	2303      	movs	r3, #3
 8002734:	61fb      	str	r3, [r7, #28]
 8002736:	e014      	b.n	8002762 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d00b      	beq.n	8002758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002744:	2b02      	cmp	r3, #2
 8002746:	d007      	beq.n	8002758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800274c:	2b03      	cmp	r3, #3
 800274e:	d003      	beq.n	8002758 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002754:	2b07      	cmp	r3, #7
 8002756:	d102      	bne.n	800275e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002758:	2302      	movs	r3, #2
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	e001      	b.n	8002762 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800275e:	2301      	movs	r3, #1
 8002760:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	01db      	lsls	r3, r3, #7
 800276c:	4413      	add	r3, r2
 800276e:	3384      	adds	r3, #132	; 0x84
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	4611      	mov	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	01d2      	lsls	r2, r2, #7
 800277c:	440a      	add	r2, r1
 800277e:	3284      	adds	r2, #132	; 0x84
 8002780:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002784:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	041a      	lsls	r2, r3, #16
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1acb      	subs	r3, r1, r3
 800279c:	69f9      	ldr	r1, [r7, #28]
 800279e:	fb01 f303 	mul.w	r3, r1, r3
 80027a2:	3307      	adds	r3, #7
 80027a4:	68f9      	ldr	r1, [r7, #12]
 80027a6:	6809      	ldr	r1, [r1, #0]
 80027a8:	4608      	mov	r0, r1
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	01c9      	lsls	r1, r1, #7
 80027ae:	4401      	add	r1, r0
 80027b0:	3184      	adds	r1, #132	; 0x84
 80027b2:	4313      	orrs	r3, r2
 80027b4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	461a      	mov	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	01db      	lsls	r3, r3, #7
 80027c0:	4413      	add	r3, r2
 80027c2:	3384      	adds	r3, #132	; 0x84
 80027c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	01db      	lsls	r3, r3, #7
 80027d0:	440b      	add	r3, r1
 80027d2:	3384      	adds	r3, #132	; 0x84
 80027d4:	4619      	mov	r1, r3
 80027d6:	4b14      	ldr	r3, [pc, #80]	; (8002828 <LTDC_SetConfig+0x330>)
 80027d8:	4013      	ands	r3, r2
 80027da:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	01db      	lsls	r3, r3, #7
 80027e6:	4413      	add	r3, r2
 80027e8:	3384      	adds	r3, #132	; 0x84
 80027ea:	461a      	mov	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	01db      	lsls	r3, r3, #7
 80027fc:	4413      	add	r3, r2
 80027fe:	3384      	adds	r3, #132	; 0x84
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6812      	ldr	r2, [r2, #0]
 8002806:	4611      	mov	r1, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	01d2      	lsls	r2, r2, #7
 800280c:	440a      	add	r2, r1
 800280e:	3284      	adds	r2, #132	; 0x84
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	6013      	str	r3, [r2, #0]
}
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	fffff8f8 	.word	0xfffff8f8
 8002828:	fffff800 	.word	0xfffff800

0800282c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7fe fddc 	bl	80013f4 <HAL_GetTick>
 800283c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
 8002848:	e0a5      	b.n	8002996 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002854:	2b00      	cmp	r3, #0
 8002856:	f040 809e 	bne.w	8002996 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fa5c 	bl	8000d18 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002860:	f241 3188 	movw	r1, #5000	; 0x1388
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f89d 	bl	80029a4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_OSPI_Init+0x174>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68d1      	ldr	r1, [r2, #12]
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6912      	ldr	r2, [r2, #16]
 800287c:	3a01      	subs	r2, #1
 800287e:	0412      	lsls	r2, r2, #16
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6952      	ldr	r2, [r2, #20]
 8002886:	3a01      	subs	r2, #1
 8002888:	0212      	lsls	r2, r2, #8
 800288a:	4311      	orrs	r1, r2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002890:	4311      	orrs	r1, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	69d2      	ldr	r2, [r2, #28]
 8002896:	4311      	orrs	r1, r2
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	430b      	orrs	r3, r1
 800289e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028d0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	021a      	lsls	r2, r3, #8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2120      	movs	r1, #32
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f862 	bl	80029c2 <OSPI_WaitFlagStateUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d146      	bne.n	8002996 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1e5a      	subs	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800293e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d107      	bne.n	800297e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f042 0202 	orr.w	r2, r2, #2
 800297c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002986:	d103      	bne.n	8002990 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	651a      	str	r2, [r3, #80]	; 0x50
 800298e:	e002      	b.n	8002996 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002996:	7bfb      	ldrb	r3, [r7, #15]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	f8e0f8f4 	.word	0xf8e0f8f4

080029a4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b084      	sub	sp, #16
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	4613      	mov	r3, r2
 80029d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80029d2:	e01a      	b.n	8002a0a <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029da:	d016      	beq.n	8002a0a <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029dc:	f7fe fd0a 	bl	80013f4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d302      	bcc.n	80029f2 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f8:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0201 	orr.w	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00e      	b.n	8002a28 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a1a      	ldr	r2, [r3, #32]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bf14      	ite	ne
 8002a18:	2301      	movne	r3, #1
 8002a1a:	2300      	moveq	r3, #0
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d1d6      	bne.n	80029d4 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002a38:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d00a      	beq.n	8002a5a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d001      	beq.n	8002a56 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e040      	b.n	8002ad8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e03e      	b.n	8002ad8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002a62:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002a6a:	f7fe fcc3 	bl	80013f4 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a70:	e009      	b.n	8002a86 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a72:	f7fe fcbf 	bl	80013f4 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a80:	d901      	bls.n	8002a86 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e028      	b.n	8002ad8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	d1ee      	bne.n	8002a72 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b1e      	cmp	r3, #30
 8002a98:	d008      	beq.n	8002aac <HAL_PWREx_ConfigSupply+0x7c>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b2e      	cmp	r3, #46	; 0x2e
 8002a9e:	d005      	beq.n	8002aac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b1d      	cmp	r3, #29
 8002aa4:	d002      	beq.n	8002aac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b2d      	cmp	r3, #45	; 0x2d
 8002aaa:	d114      	bne.n	8002ad6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002aac:	f7fe fca2 	bl	80013f4 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ab2:	e009      	b.n	8002ac8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002ab4:	f7fe fc9e 	bl	80013f4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac2:	d901      	bls.n	8002ac8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d1ee      	bne.n	8002ab4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	58024800 	.word	0x58024800

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	; 0x30
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f000 bc1f 	b.w	8003336 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80b3 	beq.w	8002c6c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b06:	4b95      	ldr	r3, [pc, #596]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b10:	4b92      	ldr	r3, [pc, #584]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d007      	beq.n	8002b2c <HAL_RCC_OscConfig+0x48>
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	2b18      	cmp	r3, #24
 8002b20:	d112      	bne.n	8002b48 <HAL_RCC_OscConfig+0x64>
 8002b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8098 	beq.w	8002c6a <HAL_RCC_OscConfig+0x186>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 8093 	bne.w	8002c6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e3f6      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x7c>
 8002b52:	4b82      	ldr	r3, [pc, #520]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a81      	ldr	r2, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	e058      	b.n	8002c12 <HAL_RCC_OscConfig+0x12e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d112      	bne.n	8002b8e <HAL_RCC_OscConfig+0xaa>
 8002b68:	4b7c      	ldr	r3, [pc, #496]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a7b      	ldr	r2, [pc, #492]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	4b79      	ldr	r3, [pc, #484]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a78      	ldr	r2, [pc, #480]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a75      	ldr	r2, [pc, #468]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	e041      	b.n	8002c12 <HAL_RCC_OscConfig+0x12e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b96:	d112      	bne.n	8002bbe <HAL_RCC_OscConfig+0xda>
 8002b98:	4b70      	ldr	r3, [pc, #448]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6f      	ldr	r2, [pc, #444]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002b9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6c      	ldr	r2, [pc, #432]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002baa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a69      	ldr	r2, [pc, #420]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	e029      	b.n	8002c12 <HAL_RCC_OscConfig+0x12e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002bc6:	d112      	bne.n	8002bee <HAL_RCC_OscConfig+0x10a>
 8002bc8:	4b64      	ldr	r3, [pc, #400]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a63      	ldr	r2, [pc, #396]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a60      	ldr	r2, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b5e      	ldr	r3, [pc, #376]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a5d      	ldr	r2, [pc, #372]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002be6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	e011      	b.n	8002c12 <HAL_RCC_OscConfig+0x12e>
 8002bee:	4b5b      	ldr	r3, [pc, #364]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	4b58      	ldr	r3, [pc, #352]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a57      	ldr	r2, [pc, #348]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c04:	6013      	str	r3, [r2, #0]
 8002c06:	4b55      	ldr	r3, [pc, #340]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a54      	ldr	r2, [pc, #336]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d013      	beq.n	8002c42 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fbeb 	bl	80013f4 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c22:	f7fe fbe7 	bl	80013f4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e380      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c34:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x13e>
 8002c40:	e014      	b.n	8002c6c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe fbd7 	bl	80013f4 <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c4a:	f7fe fbd3 	bl	80013f4 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b64      	cmp	r3, #100	; 0x64
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e36c      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c5c:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1f0      	bne.n	8002c4a <HAL_RCC_OscConfig+0x166>
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 808c 	beq.w	8002d92 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7a:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c82:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c84:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x1bc>
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	2b18      	cmp	r3, #24
 8002c94:	d137      	bne.n	8002d06 <HAL_RCC_OscConfig+0x222>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d132      	bne.n	8002d06 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ca0:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1d4>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e33e      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cb8:	4b28      	ldr	r3, [pc, #160]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 0219 	bic.w	r2, r3, #25
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4925      	ldr	r1, [pc, #148]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fb93 	bl	80013f4 <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd2:	f7fe fb8f 	bl	80013f4 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e328      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	4917      	ldr	r1, [pc, #92]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d04:	e045      	b.n	8002d92 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d028      	beq.n	8002d60 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f023 0219 	bic.w	r2, r3, #25
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	4910      	ldr	r1, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7fe fb68 	bl	80013f4 <HAL_GetTick>
 8002d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d28:	f7fe fb64 	bl	80013f4 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e2fd      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b05      	ldr	r3, [pc, #20]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	061b      	lsls	r3, r3, #24
 8002d54:	4901      	ldr	r1, [pc, #4]	; (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
 8002d5a:	e01a      	b.n	8002d92 <HAL_RCC_OscConfig+0x2ae>
 8002d5c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d60:	4b97      	ldr	r3, [pc, #604]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a96      	ldr	r2, [pc, #600]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fb42 	bl	80013f4 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7fe fb3e 	bl	80013f4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e2d7      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d86:	4b8e      	ldr	r3, [pc, #568]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d06a      	beq.n	8002e74 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9e:	4b88      	ldr	r3, [pc, #544]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002da6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002da8:	4b85      	ldr	r3, [pc, #532]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d007      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x2e0>
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b18      	cmp	r3, #24
 8002db8:	d11b      	bne.n	8002df2 <HAL_RCC_OscConfig+0x30e>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d116      	bne.n	8002df2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2f8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	2b80      	cmp	r3, #128	; 0x80
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e2ac      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ddc:	4b78      	ldr	r3, [pc, #480]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	4975      	ldr	r1, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002df0:	e040      	b.n	8002e74 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d023      	beq.n	8002e42 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002dfa:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a70      	ldr	r2, [pc, #448]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e06:	f7fe faf5 	bl	80013f4 <HAL_GetTick>
 8002e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e0e:	f7fe faf1 	bl	80013f4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e28a      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e20:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e2c:	4b64      	ldr	r3, [pc, #400]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	061b      	lsls	r3, r3, #24
 8002e3a:	4961      	ldr	r1, [pc, #388]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
 8002e40:	e018      	b.n	8002e74 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e42:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a5e      	ldr	r2, [pc, #376]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fad1 	bl	80013f4 <HAL_GetTick>
 8002e52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e54:	e008      	b.n	8002e68 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e56:	f7fe facd 	bl	80013f4 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e266      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e68:	4b55      	ldr	r3, [pc, #340]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f0      	bne.n	8002e56 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d036      	beq.n	8002eee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d019      	beq.n	8002ebc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e88:	4b4d      	ldr	r3, [pc, #308]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8c:	4a4c      	ldr	r2, [pc, #304]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe faae 	bl	80013f4 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe faaa 	bl	80013f4 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e243      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002eae:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x3b8>
 8002eba:	e018      	b.n	8002eee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	4a3f      	ldr	r2, [pc, #252]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe fa94 	bl	80013f4 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed0:	f7fe fa90 	bl	80013f4 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e229      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a2e      	ldr	r2, [pc, #184]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f0e:	f7fe fa71 	bl	80013f4 <HAL_GetTick>
 8002f12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f16:	f7fe fa6d 	bl	80013f4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e206      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x432>
 8002f34:	e018      	b.n	8002f68 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f42:	f7fe fa57 	bl	80013f4 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f4a:	f7fe fa53 	bl	80013f4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1ec      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f5c:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f000 80af 	beq.w	80030d4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_RCC_OscConfig+0x4e0>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_RCC_OscConfig+0x4e0>)
 8002f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f82:	f7fe fa37 	bl	80013f4 <HAL_GetTick>
 8002f86:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8a:	f7fe fa33 	bl	80013f4 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b64      	cmp	r3, #100	; 0x64
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1cc      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_OscConfig+0x4e0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f0      	beq.n	8002f8a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10b      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4e4>
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a02      	ldr	r2, [pc, #8]	; (8002fc0 <HAL_RCC_OscConfig+0x4dc>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	e05b      	b.n	8003076 <HAL_RCC_OscConfig+0x592>
 8002fbe:	bf00      	nop
 8002fc0:	58024400 	.word	0x58024400
 8002fc4:	58024800 	.word	0x58024800
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d112      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x512>
 8002fd0:	4b9d      	ldr	r3, [pc, #628]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd4:	4a9c      	ldr	r2, [pc, #624]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6713      	str	r3, [r2, #112]	; 0x70
 8002fdc:	4b9a      	ldr	r3, [pc, #616]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	4a99      	ldr	r2, [pc, #612]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe8:	4b97      	ldr	r3, [pc, #604]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a96      	ldr	r2, [pc, #600]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8002fee:	f023 0304 	bic.w	r3, r3, #4
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	e03f      	b.n	8003076 <HAL_RCC_OscConfig+0x592>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b05      	cmp	r3, #5
 8002ffc:	d112      	bne.n	8003024 <HAL_RCC_OscConfig+0x540>
 8002ffe:	4b92      	ldr	r3, [pc, #584]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	4a91      	ldr	r2, [pc, #580]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6713      	str	r3, [r2, #112]	; 0x70
 800300a:	4b8f      	ldr	r3, [pc, #572]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a8e      	ldr	r2, [pc, #568]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
 8003016:	4b8c      	ldr	r3, [pc, #560]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	4a8b      	ldr	r2, [pc, #556]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6713      	str	r3, [r2, #112]	; 0x70
 8003022:	e028      	b.n	8003076 <HAL_RCC_OscConfig+0x592>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	2b85      	cmp	r3, #133	; 0x85
 800302a:	d112      	bne.n	8003052 <HAL_RCC_OscConfig+0x56e>
 800302c:	4b86      	ldr	r3, [pc, #536]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a85      	ldr	r2, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	4b83      	ldr	r3, [pc, #524]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a82      	ldr	r2, [pc, #520]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800303e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	4b80      	ldr	r3, [pc, #512]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4a7f      	ldr	r2, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	6713      	str	r3, [r2, #112]	; 0x70
 8003050:	e011      	b.n	8003076 <HAL_RCC_OscConfig+0x592>
 8003052:	4b7d      	ldr	r3, [pc, #500]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003056:	4a7c      	ldr	r2, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003058:	f023 0301 	bic.w	r3, r3, #1
 800305c:	6713      	str	r3, [r2, #112]	; 0x70
 800305e:	4b7a      	ldr	r3, [pc, #488]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003062:	4a79      	ldr	r2, [pc, #484]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6713      	str	r3, [r2, #112]	; 0x70
 800306a:	4b77      	ldr	r3, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a76      	ldr	r2, [pc, #472]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003070:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d015      	beq.n	80030aa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307e:	f7fe f9b9 	bl	80013f4 <HAL_GetTick>
 8003082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003084:	e00a      	b.n	800309c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003086:	f7fe f9b5 	bl	80013f4 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	f241 3288 	movw	r2, #5000	; 0x1388
 8003094:	4293      	cmp	r3, r2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e14c      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0ee      	beq.n	8003086 <HAL_RCC_OscConfig+0x5a2>
 80030a8:	e014      	b.n	80030d4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030aa:	f7fe f9a3 	bl	80013f4 <HAL_GetTick>
 80030ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe f99f 	bl	80013f4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e136      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80030c8:	4b5f      	ldr	r3, [pc, #380]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ee      	bne.n	80030b2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 812b 	beq.w	8003334 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80030de:	4b5a      	ldr	r3, [pc, #360]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e6:	2b18      	cmp	r3, #24
 80030e8:	f000 80bb 	beq.w	8003262 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f040 8095 	bne.w	8003220 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b54      	ldr	r3, [pc, #336]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a53      	ldr	r2, [pc, #332]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80030fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003100:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe f977 	bl	80013f4 <HAL_GetTick>
 8003106:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310a:	f7fe f973 	bl	80013f4 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e10c      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800311c:	4b4a      	ldr	r3, [pc, #296]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1f0      	bne.n	800310a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003128:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800312a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800312c:	4b47      	ldr	r3, [pc, #284]	; (800324c <HAL_RCC_OscConfig+0x768>)
 800312e:	4013      	ands	r3, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003138:	0112      	lsls	r2, r2, #4
 800313a:	430a      	orrs	r2, r1
 800313c:	4942      	ldr	r1, [pc, #264]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800313e:	4313      	orrs	r3, r2
 8003140:	628b      	str	r3, [r1, #40]	; 0x28
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	3b01      	subs	r3, #1
 8003148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	3b01      	subs	r3, #1
 8003152:	025b      	lsls	r3, r3, #9
 8003154:	b29b      	uxth	r3, r3
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	3b01      	subs	r3, #1
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	3b01      	subs	r3, #1
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003172:	4935      	ldr	r1, [pc, #212]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003174:	4313      	orrs	r3, r2
 8003176:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003178:	4b33      	ldr	r3, [pc, #204]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003184:	4b30      	ldr	r3, [pc, #192]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003188:	4b31      	ldr	r3, [pc, #196]	; (8003250 <HAL_RCC_OscConfig+0x76c>)
 800318a:	4013      	ands	r3, r2
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003190:	00d2      	lsls	r2, r2, #3
 8003192:	492d      	ldr	r1, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003194:	4313      	orrs	r3, r2
 8003196:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f023 020c 	bic.w	r2, r3, #12
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	4928      	ldr	r1, [pc, #160]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80031aa:	4b27      	ldr	r3, [pc, #156]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ae:	f023 0202 	bic.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	4924      	ldr	r1, [pc, #144]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80031bc:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c8:	4b1f      	ldr	r3, [pc, #124]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80031d4:	4b1c      	ldr	r3, [pc, #112]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	4a18      	ldr	r2, [pc, #96]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ec:	4b16      	ldr	r3, [pc, #88]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe f8fc 	bl	80013f4 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003200:	f7fe f8f8 	bl	80013f4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e091      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x71c>
 800321e:	e089      	b.n	8003334 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003220:	4b09      	ldr	r3, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a08      	ldr	r2, [pc, #32]	; (8003248 <HAL_RCC_OscConfig+0x764>)
 8003226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe f8e2 	bl	80013f4 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003232:	e00f      	b.n	8003254 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe f8de 	bl	80013f4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d908      	bls.n	8003254 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e077      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
 800324c:	fffffc0c 	.word	0xfffffc0c
 8003250:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003254:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e9      	bne.n	8003234 <HAL_RCC_OscConfig+0x750>
 8003260:	e068      	b.n	8003334 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003262:	4b37      	ldr	r3, [pc, #220]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003268:	4b35      	ldr	r3, [pc, #212]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	2b01      	cmp	r3, #1
 8003274:	d031      	beq.n	80032da <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0203 	and.w	r2, r3, #3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d12a      	bne.n	80032da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	091b      	lsrs	r3, r3, #4
 8003288:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d122      	bne.n	80032da <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d11a      	bne.n	80032da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	0a5b      	lsrs	r3, r3, #9
 80032a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d111      	bne.n	80032da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	0c1b      	lsrs	r3, r3, #16
 80032ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d108      	bne.n	80032da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	0e1b      	lsrs	r3, r3, #24
 80032cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d001      	beq.n	80032de <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e02b      	b.n	8003336 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80032de:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 80032e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e2:	08db      	lsrs	r3, r3, #3
 80032e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032e8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d01f      	beq.n	8003334 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a11      	ldr	r2, [pc, #68]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 80032fa:	f023 0301 	bic.w	r3, r3, #1
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003300:	f7fe f878 	bl	80013f4 <HAL_GetTick>
 8003304:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003306:	bf00      	nop
 8003308:	f7fe f874 	bl	80013f4 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	4293      	cmp	r3, r2
 8003312:	d0f9      	beq.n	8003308 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003314:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 8003316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003318:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_RCC_OscConfig+0x860>)
 800331a:	4013      	ands	r3, r2
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003320:	00d2      	lsls	r2, r2, #3
 8003322:	4907      	ldr	r1, [pc, #28]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 8003324:	4313      	orrs	r3, r2
 8003326:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_RCC_OscConfig+0x85c>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3730      	adds	r7, #48	; 0x30
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	58024400 	.word	0x58024400
 8003344:	ffff0007 	.word	0xffff0007

08003348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e19c      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800335c:	4b8a      	ldr	r3, [pc, #552]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d910      	bls.n	800338c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b87      	ldr	r3, [pc, #540]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 020f 	bic.w	r2, r3, #15
 8003372:	4985      	ldr	r1, [pc, #532]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b83      	ldr	r3, [pc, #524]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e184      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	4b7b      	ldr	r3, [pc, #492]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80033a8:	4b78      	ldr	r3, [pc, #480]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	4975      	ldr	r1, [pc, #468]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	4b70      	ldr	r3, [pc, #448]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d908      	bls.n	80033e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033d6:	4b6d      	ldr	r3, [pc, #436]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	496a      	ldr	r1, [pc, #424]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	4b64      	ldr	r3, [pc, #400]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003400:	429a      	cmp	r2, r3
 8003402:	d908      	bls.n	8003416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003404:	4b61      	ldr	r3, [pc, #388]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	495e      	ldr	r1, [pc, #376]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003412:	4313      	orrs	r3, r2
 8003414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b00      	cmp	r3, #0
 8003420:	d010      	beq.n	8003444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	4b59      	ldr	r3, [pc, #356]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800342e:	429a      	cmp	r2, r3
 8003430:	d908      	bls.n	8003444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003432:	4b56      	ldr	r3, [pc, #344]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	4953      	ldr	r1, [pc, #332]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003440:	4313      	orrs	r3, r2
 8003442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	429a      	cmp	r2, r3
 800345e:	d908      	bls.n	8003472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003460:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	f023 020f 	bic.w	r2, r3, #15
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4947      	ldr	r1, [pc, #284]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800346e:	4313      	orrs	r3, r2
 8003470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d055      	beq.n	800352a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	4940      	ldr	r1, [pc, #256]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800348c:	4313      	orrs	r3, r2
 800348e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b02      	cmp	r3, #2
 8003496:	d107      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003498:	4b3c      	ldr	r3, [pc, #240]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d121      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0f6      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d107      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034b0:	4b36      	ldr	r3, [pc, #216]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d115      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0ea      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d107      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0de      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0d6      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e8:	4b28      	ldr	r3, [pc, #160]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f023 0207 	bic.w	r2, r3, #7
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4925      	ldr	r1, [pc, #148]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fa:	f7fd ff7b 	bl	80013f4 <HAL_GetTick>
 80034fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003500:	e00a      	b.n	8003518 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003502:	f7fd ff77 	bl	80013f4 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003510:	4293      	cmp	r3, r2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e0be      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003518:	4b1c      	ldr	r3, [pc, #112]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	429a      	cmp	r2, r3
 8003528:	d1eb      	bne.n	8003502 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d010      	beq.n	8003558 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	429a      	cmp	r2, r3
 8003544:	d208      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f023 020f 	bic.w	r2, r3, #15
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	490e      	ldr	r1, [pc, #56]	; (800358c <HAL_RCC_ClockConfig+0x244>)
 8003554:	4313      	orrs	r3, r2
 8003556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003558:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	429a      	cmp	r2, r3
 8003564:	d214      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003566:	4b08      	ldr	r3, [pc, #32]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f023 020f 	bic.w	r2, r3, #15
 800356e:	4906      	ldr	r1, [pc, #24]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_RCC_ClockConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e086      	b.n	8003696 <HAL_RCC_ClockConfig+0x34e>
 8003588:	52002000 	.word	0x52002000
 800358c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	4b3f      	ldr	r3, [pc, #252]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d208      	bcs.n	80035be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80035ac:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	4939      	ldr	r1, [pc, #228]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	4b34      	ldr	r3, [pc, #208]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d208      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80035da:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	492e      	ldr	r1, [pc, #184]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d010      	beq.n	800361a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	699a      	ldr	r2, [r3, #24]
 80035fc:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003604:	429a      	cmp	r2, r3
 8003606:	d208      	bcs.n	800361a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	4922      	ldr	r1, [pc, #136]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 8003616:	4313      	orrs	r3, r2
 8003618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	4b1d      	ldr	r3, [pc, #116]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003632:	429a      	cmp	r2, r3
 8003634:	d208      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003636:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	4917      	ldr	r1, [pc, #92]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 8003644:	4313      	orrs	r3, r2
 8003646:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003648:	f000 f834 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800364c:	4602      	mov	r2, r0
 800364e:	4b14      	ldr	r3, [pc, #80]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	4912      	ldr	r1, [pc, #72]	; (80036a4 <HAL_RCC_ClockConfig+0x35c>)
 800365a:	5ccb      	ldrb	r3, [r1, r3]
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
 8003664:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003666:	4b0e      	ldr	r3, [pc, #56]	; (80036a0 <HAL_RCC_ClockConfig+0x358>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <HAL_RCC_ClockConfig+0x35c>)
 8003670:	5cd3      	ldrb	r3, [r2, r3]
 8003672:	f003 031f 	and.w	r3, r3, #31
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	fa22 f303 	lsr.w	r3, r2, r3
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_RCC_ClockConfig+0x360>)
 800367e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003680:	4a0a      	ldr	r2, [pc, #40]	; (80036ac <HAL_RCC_ClockConfig+0x364>)
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003686:	4b0a      	ldr	r3, [pc, #40]	; (80036b0 <HAL_RCC_ClockConfig+0x368>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fc52 	bl	8000f34 <HAL_InitTick>
 8003690:	4603      	mov	r3, r0
 8003692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	58024400 	.word	0x58024400
 80036a4:	0801d824 	.word	0x0801d824
 80036a8:	24000008 	.word	0x24000008
 80036ac:	24000004 	.word	0x24000004
 80036b0:	2400000c 	.word	0x2400000c

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036ba:	4bb3      	ldr	r3, [pc, #716]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036c2:	2b18      	cmp	r3, #24
 80036c4:	f200 8155 	bhi.w	8003972 <HAL_RCC_GetSysClockFreq+0x2be>
 80036c8:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003735 	.word	0x08003735
 80036d4:	08003973 	.word	0x08003973
 80036d8:	08003973 	.word	0x08003973
 80036dc:	08003973 	.word	0x08003973
 80036e0:	08003973 	.word	0x08003973
 80036e4:	08003973 	.word	0x08003973
 80036e8:	08003973 	.word	0x08003973
 80036ec:	08003973 	.word	0x08003973
 80036f0:	0800375b 	.word	0x0800375b
 80036f4:	08003973 	.word	0x08003973
 80036f8:	08003973 	.word	0x08003973
 80036fc:	08003973 	.word	0x08003973
 8003700:	08003973 	.word	0x08003973
 8003704:	08003973 	.word	0x08003973
 8003708:	08003973 	.word	0x08003973
 800370c:	08003973 	.word	0x08003973
 8003710:	08003761 	.word	0x08003761
 8003714:	08003973 	.word	0x08003973
 8003718:	08003973 	.word	0x08003973
 800371c:	08003973 	.word	0x08003973
 8003720:	08003973 	.word	0x08003973
 8003724:	08003973 	.word	0x08003973
 8003728:	08003973 	.word	0x08003973
 800372c:	08003973 	.word	0x08003973
 8003730:	08003767 	.word	0x08003767
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003734:	4b94      	ldr	r3, [pc, #592]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d009      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003740:	4b91      	ldr	r3, [pc, #580]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	08db      	lsrs	r3, r3, #3
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	4a90      	ldr	r2, [pc, #576]	; (800398c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
 8003750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003752:	e111      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003754:	4b8d      	ldr	r3, [pc, #564]	; (800398c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003756:	61bb      	str	r3, [r7, #24]
      break;
 8003758:	e10e      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800375a:	4b8d      	ldr	r3, [pc, #564]	; (8003990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800375c:	61bb      	str	r3, [r7, #24]
      break;
 800375e:	e10b      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003760:	4b8c      	ldr	r3, [pc, #560]	; (8003994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003762:	61bb      	str	r3, [r7, #24]
      break;
 8003764:	e108      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003766:	4b88      	ldr	r3, [pc, #544]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003770:	4b85      	ldr	r3, [pc, #532]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800377a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800377c:	4b82      	ldr	r3, [pc, #520]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003786:	4b80      	ldr	r3, [pc, #512]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	08db      	lsrs	r3, r3, #3
 800378c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80e1 	beq.w	800396c <HAL_RCC_GetSysClockFreq+0x2b8>
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	f000 8083 	beq.w	80038b8 <HAL_RCC_GetSysClockFreq+0x204>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	f200 80a1 	bhi.w	80038fc <HAL_RCC_GetSysClockFreq+0x248>
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x114>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d056      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x1c0>
 80037c6:	e099      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0320 	and.w	r3, r3, #32
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d02d      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037d4:	4b6c      	ldr	r3, [pc, #432]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	4a6b      	ldr	r2, [pc, #428]	; (800398c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80037e0:	fa22 f303 	lsr.w	r3, r2, r3
 80037e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	ee07 3a90 	vmov	s15, r3
 80037ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037fe:	4b62      	ldr	r3, [pc, #392]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003806:	ee07 3a90 	vmov	s15, r3
 800380a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800380e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003812:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800381a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800381e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800382a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800382e:	e087      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800383a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800399c <HAL_RCC_GetSysClockFreq+0x2e8>
 800383e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003842:	4b51      	ldr	r3, [pc, #324]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003852:	ed97 6a02 	vldr	s12, [r7, #8]
 8003856:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800385a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800386a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800386e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003872:	e065      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80039a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003886:	4b40      	ldr	r3, [pc, #256]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003896:	ed97 6a02 	vldr	s12, [r7, #8]
 800389a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800389e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038b6:	e043      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80039a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80038c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ca:	4b2f      	ldr	r3, [pc, #188]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038da:	ed97 6a02 	vldr	s12, [r7, #8]
 80038de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038fa:	e021      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003906:	eddf 6a26 	vldr	s13, [pc, #152]	; 80039a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800390a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800390e:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003922:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003998 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800392a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800392e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800393a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800393e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800394a:	3301      	adds	r3, #1
 800394c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003958:	edd7 6a07 	vldr	s13, [r7, #28]
 800395c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003964:	ee17 3a90 	vmov	r3, s15
 8003968:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800396a:	e005      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
      break;
 8003970:	e002      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003972:	4b07      	ldr	r3, [pc, #28]	; (8003990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003974:	61bb      	str	r3, [r7, #24]
      break;
 8003976:	bf00      	nop
  }

  return sysclockfreq;
 8003978:	69bb      	ldr	r3, [r7, #24]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3724      	adds	r7, #36	; 0x24
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	58024400 	.word	0x58024400
 800398c:	03d09000 	.word	0x03d09000
 8003990:	003d0900 	.word	0x003d0900
 8003994:	016e3600 	.word	0x016e3600
 8003998:	46000000 	.word	0x46000000
 800399c:	4c742400 	.word	0x4c742400
 80039a0:	4a742400 	.word	0x4a742400
 80039a4:	4bb71b00 	.word	0x4bb71b00

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80039ae:	f7ff fe81 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 80039b2:	4602      	mov	r2, r0
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	490f      	ldr	r1, [pc, #60]	; (80039fc <HAL_RCC_GetHCLKFreq+0x54>)
 80039c0:	5ccb      	ldrb	r3, [r1, r3]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 030f 	and.w	r3, r3, #15
 80039d4:	4a09      	ldr	r2, [pc, #36]	; (80039fc <HAL_RCC_GetHCLKFreq+0x54>)
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	fa22 f303 	lsr.w	r3, r2, r3
 80039e2:	4a07      	ldr	r2, [pc, #28]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80039e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039e6:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <HAL_RCC_GetHCLKFreq+0x5c>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCC_GetHCLKFreq+0x58>)
 80039ee:	681b      	ldr	r3, [r3, #0]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	58024400 	.word	0x58024400
 80039fc:	0801d824 	.word	0x0801d824
 8003a00:	24000008 	.word	0x24000008
 8003a04:	24000004 	.word	0x24000004

08003a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003a0c:	f7ff ffcc 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 8003a10:	4602      	mov	r2, r0
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	4904      	ldr	r1, [pc, #16]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a1e:	5ccb      	ldrb	r3, [r1, r3]
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	58024400 	.word	0x58024400
 8003a30:	0801d824 	.word	0x0801d824

08003a34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	223f      	movs	r2, #63	; 0x3f
 8003a42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a44:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0207 	and.w	r2, r3, #7
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003a50:	4b17      	ldr	r3, [pc, #92]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003a5c:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003a68:	4b11      	ldr	r3, [pc, #68]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003a74:	4b0e      	ldr	r3, [pc, #56]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003a8c:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_RCC_GetClockConfig+0x7c>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HAL_RCC_GetClockConfig+0x80>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 020f 	and.w	r2, r3, #15
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	601a      	str	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	58024400 	.word	0x58024400
 8003ab4:	52002000 	.word	0x52002000

08003ab8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0c8      	sub	sp, #288	; 0x120
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003aca:	2300      	movs	r3, #0
 8003acc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003adc:	2500      	movs	r5, #0
 8003ade:	ea54 0305 	orrs.w	r3, r4, r5
 8003ae2:	d049      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003ae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003aee:	d02f      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003af0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003af4:	d828      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003af6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003afa:	d01a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b00:	d822      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b0a:	d007      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0e:	4ba7      	ldr	r3, [pc, #668]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	4aa6      	ldr	r2, [pc, #664]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b1a:	e01a      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b20:	3308      	adds	r3, #8
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f985 	bl	8004e34 <RCCEx_PLL2_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b30:	e00f      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b36:	3328      	adds	r3, #40	; 0x28
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fa2c 	bl	8004f98 <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003b5a:	4b94      	ldr	r3, [pc, #592]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b68:	4a90      	ldr	r2, [pc, #576]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6513      	str	r3, [r2, #80]	; 0x50
 8003b6e:	e003      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003b78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003b84:	f04f 0900 	mov.w	r9, #0
 8003b88:	ea58 0309 	orrs.w	r3, r8, r9
 8003b8c:	d047      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d82a      	bhi.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bb5 	.word	0x08003bb5
 8003ba4:	08003bc3 	.word	0x08003bc3
 8003ba8:	08003bd9 	.word	0x08003bd9
 8003bac:	08003bf7 	.word	0x08003bf7
 8003bb0:	08003bf7 	.word	0x08003bf7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb4:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc0:	e01a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f932 	bl	8004e34 <RCCEx_PLL2_Config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bd6:	e00f      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bdc:	3328      	adds	r3, #40	; 0x28
 8003bde:	2100      	movs	r1, #0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f001 f9d9 	bl	8004f98 <RCCEx_PLL3_Config>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bec:	e004      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c00:	4b6a      	ldr	r3, [pc, #424]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c04:	f023 0107 	bic.w	r1, r3, #7
 8003c08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	4a67      	ldr	r2, [pc, #412]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6513      	str	r3, [r2, #80]	; 0x50
 8003c14:	e003      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003c1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003c2a:	f04f 0b00 	mov.w	fp, #0
 8003c2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c32:	d054      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003c34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003c3e:	d036      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003c40:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003c44:	d82f      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c4a:	d032      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d829      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c52:	2bc0      	cmp	r3, #192	; 0xc0
 8003c54:	d02f      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003c56:	2bc0      	cmp	r3, #192	; 0xc0
 8003c58:	d825      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c5a:	2b80      	cmp	r3, #128	; 0x80
 8003c5c:	d018      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d821      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d002      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d007      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003c6a:	e01c      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c6c:	4b4f      	ldr	r3, [pc, #316]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c70:	4a4e      	ldr	r2, [pc, #312]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003c78:	e01e      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2100      	movs	r1, #0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f8d6 	bl	8004e34 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003c8e:	e013      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c94:	3328      	adds	r3, #40	; 0x28
 8003c96:	2100      	movs	r1, #0
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f97d 	bl	8004f98 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cac:	e004      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e002      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e000      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003cb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d10a      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003cc0:	4b3a      	ldr	r3, [pc, #232]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003cc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cce:	4a37      	ldr	r2, [pc, #220]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd4:	e003      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cda:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003cea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003cf4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	d05c      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d04:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d08:	d03b      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d0a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d0e:	d834      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d14:	d037      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d1a:	d82e      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d20:	d033      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d22:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d26:	d828      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d01a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d822      	bhi.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3c:	d007      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003d3e:	e01c      	b.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d40:	4b1a      	ldr	r3, [pc, #104]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	4a19      	ldr	r2, [pc, #100]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003d4c:	e01e      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d52:	3308      	adds	r3, #8
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f86c 	bl	8004e34 <RCCEx_PLL2_Config>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003d62:	e013      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d68:	3328      	adds	r3, #40	; 0x28
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f913 	bl	8004f98 <RCCEx_PLL3_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003d78:	e008      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d80:	e004      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10d      	bne.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003d9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	4a02      	ldr	r2, [pc, #8]	; (8003dac <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6513      	str	r3, [r2, #80]	; 0x50
 8003da8:	e006      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003daa:	bf00      	nop
 8003dac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003db4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003dce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	d03a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003dd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	2b30      	cmp	r3, #48	; 0x30
 8003de0:	d01f      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003de2:	2b30      	cmp	r3, #48	; 0x30
 8003de4:	d819      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d815      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d019      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d111      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df6:	4bae      	ldr	r3, [pc, #696]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	4aad      	ldr	r2, [pc, #692]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e02:	e011      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e08:	3308      	adds	r3, #8
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 f811 	bl	8004e34 <RCCEx_PLL2_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e18:	e006      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e20:	e002      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003e22:	bf00      	nop
 8003e24:	e000      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e30:	4b9f      	ldr	r3, [pc, #636]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e3e:	4a9c      	ldr	r2, [pc, #624]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e40:	430b      	orrs	r3, r1
 8003e42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e44:	e003      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e46:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e56:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003e5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003e64:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d051      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e78:	d035      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003e7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e7e:	d82e      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003e80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e84:	d031      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003e86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003e8a:	d828      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e90:	d01a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	d822      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea0:	d007      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003ea2:	e01c      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4a81      	ldr	r2, [pc, #516]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003eb0:	e01c      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ffba 	bl	8004e34 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e011      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	3328      	adds	r3, #40	; 0x28
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f861 	bl	8004f98 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003edc:	e006      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e000      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003eea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ef4:	4b6e      	ldr	r3, [pc, #440]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003efc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f02:	4a6b      	ldr	r2, [pc, #428]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f04:	430b      	orrs	r3, r1
 8003f06:	6513      	str	r3, [r2, #80]	; 0x50
 8003f08:	e003      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f0e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003f1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f28:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	d053      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f3c:	d033      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f42:	d82c      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f48:	d02f      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003f4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f4e:	d826      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f54:	d02b      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003f56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f5a:	d820      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f60:	d012      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003f62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f66:	d81a      	bhi.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d022      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d115      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f76:	3308      	adds	r3, #8
 8003f78:	2101      	movs	r1, #1
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f000 ff5a 	bl	8004e34 <RCCEx_PLL2_Config>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f86:	e015      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f8c:	3328      	adds	r3, #40	; 0x28
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 f801 	bl	8004f98 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00a      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e004      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003faa:	bf00      	nop
 8003fac:	e002      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003fbc:	4b3c      	ldr	r3, [pc, #240]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003fc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fca:	4a39      	ldr	r2, [pc, #228]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ff0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d060      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ffa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004002:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004006:	d039      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004008:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800400c:	d832      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800400e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004012:	d035      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004018:	d82c      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d031      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004024:	d826      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800402a:	d02d      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800402c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004030:	d820      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004036:	d012      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403c:	d81a      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d024      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004046:	d115      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004048:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800404c:	3308      	adds	r3, #8
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f000 feef 	bl	8004e34 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800405c:	e017      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	3328      	adds	r3, #40	; 0x28
 8004064:	2101      	movs	r1, #1
 8004066:	4618      	mov	r0, r3
 8004068:	f000 ff96 	bl	8004f98 <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004072:	e00c      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800407a:	e008      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800407c:	bf00      	nop
 800407e:	e006      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004080:	bf00      	nop
 8004082:	e004      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004084:	bf00      	nop
 8004086:	e002      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004088:	bf00      	nop
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10e      	bne.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800409e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80040a6:	4a02      	ldr	r2, [pc, #8]	; (80040b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6593      	str	r3, [r2, #88]	; 0x58
 80040ac:	e006      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x604>
 80040ae:	bf00      	nop
 80040b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040b8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80040bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80040c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80040d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80040d6:	460b      	mov	r3, r1
 80040d8:	4313      	orrs	r3, r2
 80040da:	d037      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80040dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d00e      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80040e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040ec:	d816      	bhi.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d018      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80040f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f6:	d111      	bne.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f8:	4bc4      	ldr	r3, [pc, #784]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	4ac3      	ldr	r2, [pc, #780]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004104:	e00f      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410a:	3308      	adds	r3, #8
 800410c:	2101      	movs	r1, #1
 800410e:	4618      	mov	r0, r3
 8004110:	f000 fe90 	bl	8004e34 <RCCEx_PLL2_Config>
 8004114:	4603      	mov	r3, r0
 8004116:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800411a:	e004      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004126:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800412e:	4bb7      	ldr	r3, [pc, #732]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004132:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413c:	4ab3      	ldr	r2, [pc, #716]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6513      	str	r3, [r2, #80]	; 0x50
 8004142:	e003      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004148:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800414c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004154:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004158:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800415c:	2300      	movs	r3, #0
 800415e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004162:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d039      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800416c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004172:	2b03      	cmp	r3, #3
 8004174:	d81c      	bhi.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041b9 	.word	0x080041b9
 8004180:	0800418d 	.word	0x0800418d
 8004184:	0800419b 	.word	0x0800419b
 8004188:	080041b9 	.word	0x080041b9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800418c:	4b9f      	ldr	r3, [pc, #636]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	4a9e      	ldr	r2, [pc, #632]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004198:	e00f      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	3308      	adds	r3, #8
 80041a0:	2102      	movs	r1, #2
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fe46 	bl	8004e34 <RCCEx_PLL2_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10a      	bne.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c6:	f023 0103 	bic.w	r1, r3, #3
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d0:	4a8e      	ldr	r2, [pc, #568]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041d2:	430b      	orrs	r3, r1
 80041d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041d6:	e003      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80041ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041f0:	2300      	movs	r3, #0
 80041f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f000 8099 	beq.w	8004334 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004202:	4b83      	ldr	r3, [pc, #524]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a82      	ldr	r2, [pc, #520]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800420e:	f7fd f8f1 	bl	80013f4 <HAL_GetTick>
 8004212:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004216:	e00b      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004218:	f7fd f8ec 	bl	80013f4 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d903      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800422e:	e005      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004230:	4b77      	ldr	r3, [pc, #476]	; (8004410 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004238:	2b00      	cmp	r3, #0
 800423a:	d0ed      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800423c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004240:	2b00      	cmp	r3, #0
 8004242:	d173      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004244:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800424c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004250:	4053      	eors	r3, r2
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	2b00      	cmp	r3, #0
 8004258:	d015      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800425a:	4b6c      	ldr	r3, [pc, #432]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004262:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004266:	4b69      	ldr	r3, [pc, #420]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a68      	ldr	r2, [pc, #416]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800426c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004272:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a65      	ldr	r2, [pc, #404]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800427e:	4a63      	ldr	r2, [pc, #396]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004284:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800428e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004292:	d118      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fd f8ae 	bl	80013f4 <HAL_GetTick>
 8004298:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800429c:	e00d      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f7fd f8a9 	bl	80013f4 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80042a8:	1ad2      	subs	r2, r2, r3
 80042aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d903      	bls.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80042b8:	e005      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0eb      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80042c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d129      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042de:	d10e      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x846>
 80042e0:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f0:	091a      	lsrs	r2, r3, #4
 80042f2:	4b48      	ldr	r3, [pc, #288]	; (8004414 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	4a45      	ldr	r2, [pc, #276]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6113      	str	r3, [r2, #16]
 80042fc:	e005      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x852>
 80042fe:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	4a42      	ldr	r2, [pc, #264]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004304:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004308:	6113      	str	r3, [r2, #16]
 800430a:	4b40      	ldr	r3, [pc, #256]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800430c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800430e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800431a:	4a3c      	ldr	r2, [pc, #240]	; (800440c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800431c:	430b      	orrs	r3, r1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	e008      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004322:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004326:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800432a:	e003      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004330:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f002 0301 	and.w	r3, r2, #1
 8004340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004344:	2300      	movs	r3, #0
 8004346:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800434a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800434e:	460b      	mov	r3, r1
 8004350:	4313      	orrs	r3, r2
 8004352:	f000 8090 	beq.w	8004476 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435e:	2b28      	cmp	r3, #40	; 0x28
 8004360:	d870      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800444d 	.word	0x0800444d
 800436c:	08004445 	.word	0x08004445
 8004370:	08004445 	.word	0x08004445
 8004374:	08004445 	.word	0x08004445
 8004378:	08004445 	.word	0x08004445
 800437c:	08004445 	.word	0x08004445
 8004380:	08004445 	.word	0x08004445
 8004384:	08004445 	.word	0x08004445
 8004388:	08004419 	.word	0x08004419
 800438c:	08004445 	.word	0x08004445
 8004390:	08004445 	.word	0x08004445
 8004394:	08004445 	.word	0x08004445
 8004398:	08004445 	.word	0x08004445
 800439c:	08004445 	.word	0x08004445
 80043a0:	08004445 	.word	0x08004445
 80043a4:	08004445 	.word	0x08004445
 80043a8:	0800442f 	.word	0x0800442f
 80043ac:	08004445 	.word	0x08004445
 80043b0:	08004445 	.word	0x08004445
 80043b4:	08004445 	.word	0x08004445
 80043b8:	08004445 	.word	0x08004445
 80043bc:	08004445 	.word	0x08004445
 80043c0:	08004445 	.word	0x08004445
 80043c4:	08004445 	.word	0x08004445
 80043c8:	0800444d 	.word	0x0800444d
 80043cc:	08004445 	.word	0x08004445
 80043d0:	08004445 	.word	0x08004445
 80043d4:	08004445 	.word	0x08004445
 80043d8:	08004445 	.word	0x08004445
 80043dc:	08004445 	.word	0x08004445
 80043e0:	08004445 	.word	0x08004445
 80043e4:	08004445 	.word	0x08004445
 80043e8:	0800444d 	.word	0x0800444d
 80043ec:	08004445 	.word	0x08004445
 80043f0:	08004445 	.word	0x08004445
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004445 	.word	0x08004445
 8004400:	08004445 	.word	0x08004445
 8004404:	08004445 	.word	0x08004445
 8004408:	0800444d 	.word	0x0800444d
 800440c:	58024400 	.word	0x58024400
 8004410:	58024800 	.word	0x58024800
 8004414:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800441c:	3308      	adds	r3, #8
 800441e:	2101      	movs	r1, #1
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fd07 	bl	8004e34 <RCCEx_PLL2_Config>
 8004426:	4603      	mov	r3, r0
 8004428:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fdae 	bl	8004f98 <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004442:	e004      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800444c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004456:	4bc0      	ldr	r3, [pc, #768]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800445e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004466:	4abc      	ldr	r2, [pc, #752]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6553      	str	r3, [r2, #84]	; 0x54
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004472:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004476:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f002 0302 	and.w	r3, r2, #2
 8004482:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004486:	2300      	movs	r3, #0
 8004488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800448c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d043      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004496:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800449e:	2b05      	cmp	r3, #5
 80044a0:	d824      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044f5 	.word	0x080044f5
 80044ac:	080044c1 	.word	0x080044c1
 80044b0:	080044d7 	.word	0x080044d7
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044f5 	.word	0x080044f5
 80044bc:	080044f5 	.word	0x080044f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c4:	3308      	adds	r3, #8
 80044c6:	2101      	movs	r1, #1
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fcb3 	bl	8004e34 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044da:	3328      	adds	r3, #40	; 0x28
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fd5a 	bl	8004f98 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80044fe:	4b96      	ldr	r3, [pc, #600]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f023 0107 	bic.w	r1, r3, #7
 8004506:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800450a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800450e:	4a92      	ldr	r2, [pc, #584]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6553      	str	r3, [r2, #84]	; 0x54
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800451a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800451e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f002 0304 	and.w	r3, r2, #4
 800452a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800452e:	2300      	movs	r3, #0
 8004530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004534:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004538:	460b      	mov	r3, r1
 800453a:	4313      	orrs	r3, r2
 800453c:	d043      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800453e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004546:	2b05      	cmp	r3, #5
 8004548:	d824      	bhi.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800454a:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800454c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004550:	0800459d 	.word	0x0800459d
 8004554:	08004569 	.word	0x08004569
 8004558:	0800457f 	.word	0x0800457f
 800455c:	0800459d 	.word	0x0800459d
 8004560:	0800459d 	.word	0x0800459d
 8004564:	0800459d 	.word	0x0800459d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004568:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456c:	3308      	adds	r3, #8
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fc5f 	bl	8004e34 <RCCEx_PLL2_Config>
 8004576:	4603      	mov	r3, r0
 8004578:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800457c:	e00f      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004582:	3328      	adds	r3, #40	; 0x28
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f000 fd06 	bl	8004f98 <RCCEx_PLL3_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004592:	e004      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800459a:	e000      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800459c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800459e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045a6:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045aa:	f023 0107 	bic.w	r1, r3, #7
 80045ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045b6:	4a68      	ldr	r2, [pc, #416]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6593      	str	r3, [r2, #88]	; 0x58
 80045bc:	e003      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f002 0320 	and.w	r3, r2, #32
 80045d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045d6:	2300      	movs	r3, #0
 80045d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d055      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f2:	d033      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80045f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f8:	d82c      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d02f      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d826      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800460a:	d02b      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800460c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004610:	d820      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004616:	d012      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800461c:	d81a      	bhi.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d022      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004626:	d115      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462c:	3308      	adds	r3, #8
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f000 fbff 	bl	8004e34 <RCCEx_PLL2_Config>
 8004636:	4603      	mov	r3, r0
 8004638:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800463c:	e015      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800463e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004642:	3328      	adds	r3, #40	; 0x28
 8004644:	2102      	movs	r1, #2
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fca6 	bl	8004f98 <RCCEx_PLL3_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004652:	e00a      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800465a:	e006      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800465c:	bf00      	nop
 800465e:	e004      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004660:	bf00      	nop
 8004662:	e002      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004664:	bf00      	nop
 8004666:	e000      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800466a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800467a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004682:	4a35      	ldr	r2, [pc, #212]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004684:	430b      	orrs	r3, r1
 8004686:	6553      	str	r3, [r2, #84]	; 0x54
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800468e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004692:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800469e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046a2:	2300      	movs	r3, #0
 80046a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80046a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d058      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80046b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046be:	d033      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80046c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80046c4:	d82c      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d02f      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80046cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d0:	d826      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80046d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046d6:	d02b      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80046d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046dc:	d820      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80046de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e2:	d012      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xc52>
 80046e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046e8:	d81a      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d022      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80046ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f2:	d115      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f8:	3308      	adds	r3, #8
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fb99 	bl	8004e34 <RCCEx_PLL2_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004708:	e015      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800470a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470e:	3328      	adds	r3, #40	; 0x28
 8004710:	2102      	movs	r1, #2
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fc40 	bl	8004f98 <RCCEx_PLL3_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800471e:	e00a      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004726:	e006      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004728:	bf00      	nop
 800472a:	e004      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800472c:	bf00      	nop
 800472e:	e002      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004730:	bf00      	nop
 8004732:	e000      	b.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004736:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10e      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800473e:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004746:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800474e:	4a02      	ldr	r2, [pc, #8]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004750:	430b      	orrs	r3, r1
 8004752:	6593      	str	r3, [r2, #88]	; 0x58
 8004754:	e006      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800475c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004760:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800477a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800477e:	460b      	mov	r3, r1
 8004780:	4313      	orrs	r3, r2
 8004782:	d055      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004788:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800478c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004790:	d033      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004792:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004796:	d82c      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800479c:	d02f      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047a2:	d826      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047a8:	d02b      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80047aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047ae:	d820      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047b4:	d012      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80047b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047ba:	d81a      	bhi.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80047c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c4:	d115      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ca:	3308      	adds	r3, #8
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb30 	bl	8004e34 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047da:	e015      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e0:	3328      	adds	r3, #40	; 0x28
 80047e2:	2102      	movs	r1, #2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fbd7 	bl	8004f98 <RCCEx_PLL3_Config>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80047f0:	e00a      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80047f8:	e006      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80047fa:	bf00      	nop
 80047fc:	e004      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80047fe:	bf00      	nop
 8004800:	e002      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004808:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004810:	4ba1      	ldr	r3, [pc, #644]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004814:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004820:	4a9d      	ldr	r2, [pc, #628]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004822:	430b      	orrs	r3, r1
 8004824:	6593      	str	r3, [r2, #88]	; 0x58
 8004826:	e003      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004828:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800482c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004830:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004838:	f002 0308 	and.w	r3, r2, #8
 800483c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004840:	2300      	movs	r3, #0
 8004842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004846:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800484a:	460b      	mov	r3, r1
 800484c:	4313      	orrs	r3, r2
 800484e:	d01e      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004850:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d10c      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800485e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004862:	3328      	adds	r3, #40	; 0x28
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f000 fb96 	bl	8004f98 <RCCEx_PLL3_Config>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004878:	4b87      	ldr	r3, [pc, #540]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800487a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004880:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004888:	4a83      	ldr	r2, [pc, #524]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800488a:	430b      	orrs	r3, r1
 800488c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800488e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	f002 0310 	and.w	r3, r2, #16
 800489a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800489e:	2300      	movs	r3, #0
 80048a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80048a8:	460b      	mov	r3, r1
 80048aa:	4313      	orrs	r3, r2
 80048ac:	d01e      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ba:	d10c      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c0:	3328      	adds	r3, #40	; 0x28
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fb67 	bl	8004f98 <RCCEx_PLL3_Config>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048d6:	4b70      	ldr	r3, [pc, #448]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80048de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048e6:	4a6c      	ldr	r2, [pc, #432]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048e8:	430b      	orrs	r3, r1
 80048ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80048f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048fc:	2300      	movs	r3, #0
 80048fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004902:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004906:	460b      	mov	r3, r1
 8004908:	4313      	orrs	r3, r2
 800490a:	d03e      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800490c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004910:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004918:	d022      	beq.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800491a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491e:	d81b      	bhi.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d00b      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800492a:	e015      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	3308      	adds	r3, #8
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fa7d 	bl	8004e34 <RCCEx_PLL2_Config>
 800493a:	4603      	mov	r3, r0
 800493c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004940:	e00f      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	3328      	adds	r3, #40	; 0x28
 8004948:	2102      	movs	r1, #2
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fb24 	bl	8004f98 <RCCEx_PLL3_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004956:	e004      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800495e:	e000      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004962:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800496a:	4b4b      	ldr	r3, [pc, #300]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004976:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800497a:	4a47      	ldr	r2, [pc, #284]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800497c:	430b      	orrs	r3, r1
 800497e:	6593      	str	r3, [r2, #88]	; 0x58
 8004980:	e003      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004982:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004986:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004996:	67bb      	str	r3, [r7, #120]	; 0x78
 8004998:	2300      	movs	r3, #0
 800499a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800499c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d03b      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80049a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b2:	d01f      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80049b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80049b8:	d818      	bhi.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d003      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 80049c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049c4:	d007      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80049c6:	e011      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4b33      	ldr	r3, [pc, #204]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a32      	ldr	r2, [pc, #200]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80049d4:	e00f      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049da:	3328      	adds	r3, #40	; 0x28
 80049dc:	2101      	movs	r1, #1
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fada 	bl	8004f98 <RCCEx_PLL3_Config>
 80049e4:	4603      	mov	r3, r0
 80049e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 80049ea:	e004      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80049f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049fe:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a02:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6553      	str	r3, [r2, #84]	; 0x54
 8004a14:	e003      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	677b      	str	r3, [r7, #116]	; 0x74
 8004a30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004a34:	460b      	mov	r3, r1
 8004a36:	4313      	orrs	r3, r2
 8004a38:	d034      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d007      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004a4a:	e011      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4c:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	4a11      	ldr	r2, [pc, #68]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a58:	e00e      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5e:	3308      	adds	r3, #8
 8004a60:	2102      	movs	r1, #2
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 f9e6 	bl	8004e34 <RCCEx_PLL2_Config>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10d      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8e:	4a02      	ldr	r2, [pc, #8]	; (8004a98 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a90:	430b      	orrs	r3, r1
 8004a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a94:	e006      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004a96:	bf00      	nop
 8004a98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004aa0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004aa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004ab0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ab6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004aba:	460b      	mov	r3, r1
 8004abc:	4313      	orrs	r3, r2
 8004abe:	d00c      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ac0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac4:	3328      	adds	r3, #40	; 0x28
 8004ac6:	2102      	movs	r1, #2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fa65 	bl	8004f98 <RCCEx_PLL3_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8004ae8:	2300      	movs	r3, #0
 8004aea:	667b      	str	r3, [r7, #100]	; 0x64
 8004aec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d038      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b02:	d018      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b08:	d811      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b0e:	d014      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b14:	d80b      	bhi.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b20:	4bc3      	ldr	r3, [pc, #780]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	4ac2      	ldr	r2, [pc, #776]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b2c:	e008      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b34:	e004      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b36:	bf00      	nop
 8004b38:	e002      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b3a:	bf00      	nop
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b48:	4bb9      	ldr	r3, [pc, #740]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b58:	4ab5      	ldr	r2, [pc, #724]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6553      	str	r3, [r2, #84]	; 0x54
 8004b5e:	e003      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b64:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004b74:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b76:	2300      	movs	r3, #0
 8004b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b7a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4313      	orrs	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b84:	4baa      	ldr	r3, [pc, #680]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b92:	4aa7      	ldr	r2, [pc, #668]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8004baa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb4:	4b9e      	ldr	r3, [pc, #632]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a9b      	ldr	r2, [pc, #620]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004bc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004bd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004be4:	4b92      	ldr	r3, [pc, #584]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf2:	4a8f      	ldr	r2, [pc, #572]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004bf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c00:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
 8004c06:	2300      	movs	r3, #0
 8004c08:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4313      	orrs	r3, r2
 8004c12:	d00e      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c14:	4b86      	ldr	r3, [pc, #536]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	4a85      	ldr	r2, [pc, #532]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c1e:	6113      	str	r3, [r2, #16]
 8004c20:	4b83      	ldr	r3, [pc, #524]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c22:	6919      	ldr	r1, [r3, #16]
 8004c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c2c:	4a80      	ldr	r2, [pc, #512]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c40:	2300      	movs	r3, #0
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004c4e:	4b78      	ldr	r3, [pc, #480]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004c56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	4a74      	ldr	r2, [pc, #464]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004c62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c70:	2300      	movs	r3, #0
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
 8004c74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004c7e:	4b6c      	ldr	r3, [pc, #432]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c82:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004c86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8e:	4a68      	ldr	r2, [pc, #416]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d011      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cb4:	3308      	adds	r3, #8
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 f8bb 	bl	8004e34 <RCCEx_PLL2_Config>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004cc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	6239      	str	r1, [r7, #32]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d011      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f89b 	bl	8004e34 <RCCEx_PLL2_Config>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	61b9      	str	r1, [r7, #24]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	d011      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d34:	3308      	adds	r3, #8
 8004d36:	2102      	movs	r1, #2
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f000 f87b 	bl	8004e34 <RCCEx_PLL2_Config>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d44:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d50:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6139      	str	r1, [r7, #16]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	d011      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d74:	3328      	adds	r3, #40	; 0x28
 8004d76:	2100      	movs	r1, #0
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f90d 	bl	8004f98 <RCCEx_PLL3_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004d84:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	60b9      	str	r1, [r7, #8]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004daa:	460b      	mov	r3, r1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	d011      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004db0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db4:	3328      	adds	r3, #40	; 0x28
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 f8ed 	bl	8004f98 <RCCEx_PLL3_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004dc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dcc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dd0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6039      	str	r1, [r7, #0]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	607b      	str	r3, [r7, #4]
 8004de6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004dea:	460b      	mov	r3, r1
 8004dec:	4313      	orrs	r3, r2
 8004dee:	d011      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004df0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004df4:	3328      	adds	r3, #40	; 0x28
 8004df6:	2102      	movs	r1, #2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f8cd 	bl	8004f98 <RCCEx_PLL3_Config>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e04:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e0c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e10:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004e14:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e2e:	bf00      	nop
 8004e30:	58024400 	.word	0x58024400

08004e34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e42:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d101      	bne.n	8004e52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e099      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e52:	4b4f      	ldr	r3, [pc, #316]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a4e      	ldr	r2, [pc, #312]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5e:	f7fc fac9 	bl	80013f4 <HAL_GetTick>
 8004e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e64:	e008      	b.n	8004e78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e66:	f7fc fac5 	bl	80013f4 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e086      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e78:	4b45      	ldr	r3, [pc, #276]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1f0      	bne.n	8004e66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e84:	4b42      	ldr	r3, [pc, #264]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	493f      	ldr	r1, [pc, #252]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	628b      	str	r3, [r1, #40]	; 0x28
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	025b      	lsls	r3, r3, #9
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	061b      	lsls	r3, r3, #24
 8004ec4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ec8:	4931      	ldr	r1, [pc, #196]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ece:	4b30      	ldr	r3, [pc, #192]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	492d      	ldr	r1, [pc, #180]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	f023 0220 	bic.w	r2, r3, #32
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	4928      	ldr	r1, [pc, #160]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ef2:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	f023 0310 	bic.w	r3, r3, #16
 8004efc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f02:	4b24      	ldr	r3, [pc, #144]	; (8004f94 <RCCEx_PLL2_Config+0x160>)
 8004f04:	4013      	ands	r3, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	69d2      	ldr	r2, [r2, #28]
 8004f0a:	00d2      	lsls	r2, r2, #3
 8004f0c:	4920      	ldr	r1, [pc, #128]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f12:	4b1f      	ldr	r3, [pc, #124]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f18:	f043 0310 	orr.w	r3, r3, #16
 8004f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f30:	e00f      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	4a14      	ldr	r2, [pc, #80]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f44:	e005      	b.n	8004f52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	4a11      	ldr	r2, [pc, #68]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f52:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a0e      	ldr	r2, [pc, #56]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f5e:	f7fc fa49 	bl	80013f4 <HAL_GetTick>
 8004f62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f64:	e008      	b.n	8004f78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f66:	f7fc fa45 	bl	80013f4 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e006      	b.n	8004f86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58024400 	.word	0x58024400
 8004f94:	ffff0007 	.word	0xffff0007

08004f98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fa6:	4b53      	ldr	r3, [pc, #332]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d101      	bne.n	8004fb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e099      	b.n	80050ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a4e      	ldr	r2, [pc, #312]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc2:	f7fc fa17 	bl	80013f4 <HAL_GetTick>
 8004fc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fc8:	e008      	b.n	8004fdc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fca:	f7fc fa13 	bl	80013f4 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e086      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fdc:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f0      	bne.n	8004fca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fe8:	4b42      	ldr	r3, [pc, #264]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	051b      	lsls	r3, r3, #20
 8004ff6:	493f      	ldr	r1, [pc, #252]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	628b      	str	r3, [r1, #40]	; 0x28
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	3b01      	subs	r3, #1
 8005002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	3b01      	subs	r3, #1
 800500c:	025b      	lsls	r3, r3, #9
 800500e:	b29b      	uxth	r3, r3
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	3b01      	subs	r3, #1
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800502c:	4931      	ldr	r1, [pc, #196]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800502e:	4313      	orrs	r3, r2
 8005030:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005032:	4b30      	ldr	r3, [pc, #192]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	492d      	ldr	r1, [pc, #180]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005040:	4313      	orrs	r3, r2
 8005042:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005044:	4b2b      	ldr	r3, [pc, #172]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	4928      	ldr	r1, [pc, #160]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005052:	4313      	orrs	r3, r2
 8005054:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505a:	4a26      	ldr	r2, [pc, #152]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800505c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005060:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <RCCEx_PLL3_Config+0x160>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	69d2      	ldr	r2, [r2, #28]
 800506e:	00d2      	lsls	r2, r2, #3
 8005070:	4920      	ldr	r1, [pc, #128]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005076:	4b1f      	ldr	r3, [pc, #124]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005080:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005088:	4b1a      	ldr	r3, [pc, #104]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800508e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005092:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005094:	e00f      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d106      	bne.n	80050aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800509c:	4b15      	ldr	r3, [pc, #84]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	4a14      	ldr	r2, [pc, #80]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80050a8:	e005      	b.n	80050b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050aa:	4b12      	ldr	r3, [pc, #72]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ae:	4a11      	ldr	r2, [pc, #68]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050b6:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a0e      	ldr	r2, [pc, #56]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c2:	f7fc f997 	bl	80013f4 <HAL_GetTick>
 80050c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050c8:	e008      	b.n	80050dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ca:	f7fc f993 	bl	80013f4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e006      	b.n	80050ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <RCCEx_PLL3_Config+0x15c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0f0      	beq.n	80050ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	58024400 	.word	0x58024400
 80050f8:	ffff0007 	.word	0xffff0007

080050fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e02b      	b.n	8005168 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7fb fefb 	bl	8000f20 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2202      	movs	r2, #2
 800512e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	4619      	mov	r1, r3
 800513c:	4610      	mov	r0, r2
 800513e:	f000 faf3 	bl	8005728 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	461a      	mov	r2, r3
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	f000 fb47 	bl	80057e0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <HAL_SDRAM_Init+0x74>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a06      	ldr	r2, [pc, #24]	; (8005170 <HAL_SDRAM_Init+0x74>)
 8005158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800515c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	52004000 	.word	0x52004000

08005174 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e049      	b.n	800521a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d106      	bne.n	80051a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f841 	bl	8005222 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f000 fa00 	bl	80055b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b01      	cmp	r3, #1
 800524a:	d001      	beq.n	8005250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e054      	b.n	80052fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a26      	ldr	r2, [pc, #152]	; (8005308 <HAL_TIM_Base_Start_IT+0xd0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d022      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527a:	d01d      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a22      	ldr	r2, [pc, #136]	; (800530c <HAL_TIM_Base_Start_IT+0xd4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d018      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_TIM_Base_Start_IT+0xd8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d013      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <HAL_TIM_Base_Start_IT+0xdc>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d00e      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <HAL_TIM_Base_Start_IT+0xe0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d009      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1c      	ldr	r2, [pc, #112]	; (800531c <HAL_TIM_Base_Start_IT+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x80>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <HAL_TIM_Base_Start_IT+0xe8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d115      	bne.n	80052e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	4b19      	ldr	r3, [pc, #100]	; (8005324 <HAL_TIM_Base_Start_IT+0xec>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d015      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0xbe>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d0:	d011      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e2:	e008      	b.n	80052f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0201 	orr.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	e000      	b.n	80052f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3714      	adds	r7, #20
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40010000 	.word	0x40010000
 800530c:	40000400 	.word	0x40000400
 8005310:	40000800 	.word	0x40000800
 8005314:	40000c00 	.word	0x40000c00
 8005318:	40010400 	.word	0x40010400
 800531c:	40001800 	.word	0x40001800
 8005320:	40014000 	.word	0x40014000
 8005324:	00010007 	.word	0x00010007

08005328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	2b02      	cmp	r3, #2
 800533c:	d122      	bne.n	8005384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b02      	cmp	r3, #2
 800534a:	d11b      	bne.n	8005384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0202 	mvn.w	r2, #2
 8005354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f905 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 8005370:	e005      	b.n	800537e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f8f7 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f908 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b04      	cmp	r3, #4
 8005390:	d122      	bne.n	80053d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d11b      	bne.n	80053d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f06f 0204 	mvn.w	r2, #4
 80053a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f8db 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 80053c4:	e005      	b.n	80053d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f8cd 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f8de 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d122      	bne.n	800542c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f003 0308 	and.w	r3, r3, #8
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d11b      	bne.n	800542c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0208 	mvn.w	r2, #8
 80053fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2204      	movs	r2, #4
 8005402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f003 0303 	and.w	r3, r3, #3
 800540e:	2b00      	cmp	r3, #0
 8005410:	d003      	beq.n	800541a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8b1 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 8005418:	e005      	b.n	8005426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8a3 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8b4 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b10      	cmp	r3, #16
 8005438:	d122      	bne.n	8005480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b10      	cmp	r3, #16
 8005446:	d11b      	bne.n	8005480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0210 	mvn.w	r2, #16
 8005450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2208      	movs	r2, #8
 8005456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f887 	bl	800557a <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f879 	bl	8005566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f88a 	bl	800558e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b01      	cmp	r3, #1
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0201 	mvn.w	r2, #1
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7fb fae8 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b6:	2b80      	cmp	r3, #128	; 0x80
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d107      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f914 	bl	8005700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d10e      	bne.n	8005506 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	2b80      	cmp	r3, #128	; 0x80
 80054f4:	d107      	bne.n	8005506 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f907 	bl	8005714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b40      	cmp	r3, #64	; 0x40
 8005512:	d10e      	bne.n	8005532 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551e:	2b40      	cmp	r3, #64	; 0x40
 8005520:	d107      	bne.n	8005532 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f838 	bl	80055a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0320 	and.w	r3, r3, #32
 800553c:	2b20      	cmp	r3, #32
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b20      	cmp	r3, #32
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0220 	mvn.w	r2, #32
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8c7 	bl	80056ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005566:	b480      	push	{r7}
 8005568:	b083      	sub	sp, #12
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800556e:	bf00      	nop
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a40      	ldr	r2, [pc, #256]	; (80056cc <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <TIM_Base_SetConfig+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <TIM_Base_SetConfig+0x114>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01f      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d01b      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d017      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00f      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <TIM_Base_SetConfig+0x124>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00b      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <TIM_Base_SetConfig+0x128>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <TIM_Base_SetConfig+0x12c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <TIM_Base_SetConfig+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d108      	bne.n	8005664 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a10      	ldr	r2, [pc, #64]	; (80056cc <TIM_Base_SetConfig+0x114>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00f      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a12      	ldr	r2, [pc, #72]	; (80056dc <TIM_Base_SetConfig+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <TIM_Base_SetConfig+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a10      	ldr	r2, [pc, #64]	; (80056e4 <TIM_Base_SetConfig+0x12c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0f      	ldr	r2, [pc, #60]	; (80056e8 <TIM_Base_SetConfig+0x130>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	615a      	str	r2, [r3, #20]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40010400 	.word	0x40010400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800

080056ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d121      	bne.n	800577e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <FMC_SDRAM_Init+0xb4>)
 8005740:	4013      	ands	r3, r2
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	6851      	ldr	r1, [r2, #4]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	6892      	ldr	r2, [r2, #8]
 800574a:	4311      	orrs	r1, r2
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	68d2      	ldr	r2, [r2, #12]
 8005750:	4311      	orrs	r1, r2
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	6912      	ldr	r2, [r2, #16]
 8005756:	4311      	orrs	r1, r2
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	6952      	ldr	r2, [r2, #20]
 800575c:	4311      	orrs	r1, r2
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	6992      	ldr	r2, [r2, #24]
 8005762:	4311      	orrs	r1, r2
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	69d2      	ldr	r2, [r2, #28]
 8005768:	4311      	orrs	r1, r2
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	6a12      	ldr	r2, [r2, #32]
 800576e:	4311      	orrs	r1, r2
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005774:	430a      	orrs	r2, r1
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e026      	b.n	80057cc <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	69d9      	ldr	r1, [r3, #28]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	4319      	orrs	r1, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005794:	430b      	orrs	r3, r1
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <FMC_SDRAM_Init+0xb4>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	6851      	ldr	r1, [r2, #4]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	6892      	ldr	r2, [r2, #8]
 80057ac:	4311      	orrs	r1, r2
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	68d2      	ldr	r2, [r2, #12]
 80057b2:	4311      	orrs	r1, r2
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	6912      	ldr	r2, [r2, #16]
 80057b8:	4311      	orrs	r1, r2
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	6952      	ldr	r2, [r2, #20]
 80057be:	4311      	orrs	r1, r2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	6992      	ldr	r2, [r2, #24]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	ffff8000 	.word	0xffff8000

080057e0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d128      	bne.n	8005844 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1e59      	subs	r1, r3, #1
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	3b01      	subs	r3, #1
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	4319      	orrs	r1, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	3b01      	subs	r3, #1
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	4319      	orrs	r1, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	3b01      	subs	r3, #1
 800581a:	031b      	lsls	r3, r3, #12
 800581c:	4319      	orrs	r1, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	3b01      	subs	r3, #1
 8005824:	041b      	lsls	r3, r3, #16
 8005826:	4319      	orrs	r1, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	3b01      	subs	r3, #1
 800582e:	051b      	lsls	r3, r3, #20
 8005830:	4319      	orrs	r1, r3
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	3b01      	subs	r3, #1
 8005838:	061b      	lsls	r3, r3, #24
 800583a:	430b      	orrs	r3, r1
 800583c:	431a      	orrs	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	e02d      	b.n	80058a0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <FMC_SDRAM_Timing_Init+0xd0>)
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	68d2      	ldr	r2, [r2, #12]
 8005850:	3a01      	subs	r2, #1
 8005852:	0311      	lsls	r1, r2, #12
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	6952      	ldr	r2, [r2, #20]
 8005858:	3a01      	subs	r2, #1
 800585a:	0512      	lsls	r2, r2, #20
 800585c:	430a      	orrs	r2, r1
 800585e:	431a      	orrs	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	1e59      	subs	r1, r3, #1
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	3b01      	subs	r3, #1
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	4319      	orrs	r1, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	3b01      	subs	r3, #1
 8005882:	021b      	lsls	r3, r3, #8
 8005884:	4319      	orrs	r1, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	3b01      	subs	r3, #1
 800588c:	041b      	lsls	r3, r3, #16
 800588e:	4319      	orrs	r1, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	3b01      	subs	r3, #1
 8005896:	061b      	lsls	r3, r3, #24
 8005898:	430b      	orrs	r3, r1
 800589a:	431a      	orrs	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	ff0f0fff 	.word	0xff0f0fff

080058b4 <__NVIC_SetPriority>:
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	6039      	str	r1, [r7, #0]
 80058be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80058c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	db0a      	blt.n	80058de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	490c      	ldr	r1, [pc, #48]	; (8005900 <__NVIC_SetPriority+0x4c>)
 80058ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	440b      	add	r3, r1
 80058d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058dc:	e00a      	b.n	80058f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	4908      	ldr	r1, [pc, #32]	; (8005904 <__NVIC_SetPriority+0x50>)
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	3b04      	subs	r3, #4
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	440b      	add	r3, r1
 80058f2:	761a      	strb	r2, [r3, #24]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	e000e100 	.word	0xe000e100
 8005904:	e000ed00 	.word	0xe000ed00

08005908 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <SysTick_Handler+0x1c>)
 800590e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005910:	f002 faa0 	bl	8007e54 <xTaskGetSchedulerState>
 8005914:	4603      	mov	r3, r0
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800591a:	f003 f985 	bl	8008c28 <xPortSysTickHandler>
  }
}
 800591e:	bf00      	nop
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	e000e010 	.word	0xe000e010

08005928 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800592c:	2100      	movs	r1, #0
 800592e:	f06f 0004 	mvn.w	r0, #4
 8005932:	f7ff ffbf 	bl	80058b4 <__NVIC_SetPriority>
#endif
}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005942:	f3ef 8305 	mrs	r3, IPSR
 8005946:	603b      	str	r3, [r7, #0]
  return(result);
 8005948:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800594e:	f06f 0305 	mvn.w	r3, #5
 8005952:	607b      	str	r3, [r7, #4]
 8005954:	e00c      	b.n	8005970 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005956:	4b0a      	ldr	r3, [pc, #40]	; (8005980 <osKernelInitialize+0x44>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d105      	bne.n	800596a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800595e:	4b08      	ldr	r3, [pc, #32]	; (8005980 <osKernelInitialize+0x44>)
 8005960:	2201      	movs	r2, #1
 8005962:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005964:	2300      	movs	r3, #0
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e002      	b.n	8005970 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800596a:	f04f 33ff 	mov.w	r3, #4294967295
 800596e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005970:	687b      	ldr	r3, [r7, #4]
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	24000320 	.word	0x24000320

08005984 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800598a:	f3ef 8305 	mrs	r3, IPSR
 800598e:	603b      	str	r3, [r7, #0]
  return(result);
 8005990:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005996:	f06f 0305 	mvn.w	r3, #5
 800599a:	607b      	str	r3, [r7, #4]
 800599c:	e010      	b.n	80059c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800599e:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <osKernelStart+0x48>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d109      	bne.n	80059ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059a6:	f7ff ffbf 	bl	8005928 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <osKernelStart+0x48>)
 80059ac:	2202      	movs	r2, #2
 80059ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059b0:	f001 fdf2 	bl	8007598 <vTaskStartScheduler>
      stat = osOK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	607b      	str	r3, [r7, #4]
 80059b8:	e002      	b.n	80059c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80059ba:	f04f 33ff 	mov.w	r3, #4294967295
 80059be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80059c0:	687b      	ldr	r3, [r7, #4]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	24000320 	.word	0x24000320

080059d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08e      	sub	sp, #56	; 0x38
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059e0:	f3ef 8305 	mrs	r3, IPSR
 80059e4:	617b      	str	r3, [r7, #20]
  return(result);
 80059e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d17e      	bne.n	8005aea <osThreadNew+0x11a>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d07b      	beq.n	8005aea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059f6:	2318      	movs	r3, #24
 80059f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059fa:	2300      	movs	r3, #0
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80059fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005a02:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d045      	beq.n	8005a96 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <osThreadNew+0x48>
        name = attr->name;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d008      	beq.n	8005a3e <osThreadNew+0x6e>
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	2b38      	cmp	r3, #56	; 0x38
 8005a30:	d805      	bhi.n	8005a3e <osThreadNew+0x6e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <osThreadNew+0x72>
        return (NULL);
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e054      	b.n	8005aec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00e      	beq.n	8005a78 <osThreadNew+0xa8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2bab      	cmp	r3, #171	; 0xab
 8005a60:	d90a      	bls.n	8005a78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d006      	beq.n	8005a78 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d002      	beq.n	8005a78 <osThreadNew+0xa8>
        mem = 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e010      	b.n	8005a9a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10c      	bne.n	8005a9a <osThreadNew+0xca>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d108      	bne.n	8005a9a <osThreadNew+0xca>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d104      	bne.n	8005a9a <osThreadNew+0xca>
          mem = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e001      	b.n	8005a9a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d110      	bne.n	8005ac2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005aa8:	9202      	str	r2, [sp, #8]
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6a3a      	ldr	r2, [r7, #32]
 8005ab4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f001 fb7e 	bl	80071b8 <xTaskCreateStatic>
 8005abc:	4603      	mov	r3, r0
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	e013      	b.n	8005aea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005ac2:	69bb      	ldr	r3, [r7, #24]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d110      	bne.n	8005aea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f107 0310 	add.w	r3, r7, #16
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f001 fbc9 	bl	8007272 <xTaskCreate>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d001      	beq.n	8005aea <osThreadNew+0x11a>
            hTask = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005aea:	693b      	ldr	r3, [r7, #16]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3728      	adds	r7, #40	; 0x28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afc:	f3ef 8305 	mrs	r3, IPSR
 8005b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b02:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <osDelay+0x1c>
    stat = osErrorISR;
 8005b08:	f06f 0305 	mvn.w	r3, #5
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e007      	b.n	8005b20 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f001 fd08 	bl	8007530 <vTaskDelay>
    }
  }

  return (stat);
 8005b20:	68fb      	ldr	r3, [r7, #12]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b08a      	sub	sp, #40	; 0x28
 8005b2e:	af02      	add	r7, sp, #8
 8005b30:	60f8      	str	r0, [r7, #12]
 8005b32:	60b9      	str	r1, [r7, #8]
 8005b34:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3a:	f3ef 8305 	mrs	r3, IPSR
 8005b3e:	613b      	str	r3, [r7, #16]
  return(result);
 8005b40:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d175      	bne.n	8005c32 <osSemaphoreNew+0x108>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d072      	beq.n	8005c32 <osSemaphoreNew+0x108>
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d86e      	bhi.n	8005c32 <osSemaphoreNew+0x108>
    mem = -1;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
 8005b58:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d015      	beq.n	8005b8c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <osSemaphoreNew+0x4c>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	2b4f      	cmp	r3, #79	; 0x4f
 8005b6e:	d902      	bls.n	8005b76 <osSemaphoreNew+0x4c>
        mem = 1;
 8005b70:	2301      	movs	r3, #1
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e00c      	b.n	8005b90 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d108      	bne.n	8005b90 <osSemaphoreNew+0x66>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <osSemaphoreNew+0x66>
          mem = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	61bb      	str	r3, [r7, #24]
 8005b8a:	e001      	b.n	8005b90 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b96:	d04c      	beq.n	8005c32 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d128      	bne.n	8005bf0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d10a      	bne.n	8005bba <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	2203      	movs	r2, #3
 8005baa:	9200      	str	r2, [sp, #0]
 8005bac:	2200      	movs	r2, #0
 8005bae:	2100      	movs	r1, #0
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	f000 fb5b 	bl	800626c <xQueueGenericCreateStatic>
 8005bb6:	61f8      	str	r0, [r7, #28]
 8005bb8:	e005      	b.n	8005bc6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005bba:	2203      	movs	r2, #3
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f000 fbcc 	bl	800635c <xQueueGenericCreate>
 8005bc4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d022      	beq.n	8005c12 <osSemaphoreNew+0xe8>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d01f      	beq.n	8005c12 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	69f8      	ldr	r0, [r7, #28]
 8005bda:	f000 fc87 	bl	80064ec <xQueueGenericSend>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d016      	beq.n	8005c12 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005be4:	69f8      	ldr	r0, [r7, #28]
 8005be6:	f001 f913 	bl	8006e10 <vQueueDelete>
            hSemaphore = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	e010      	b.n	8005c12 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d108      	bne.n	8005c08 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 fc09 	bl	8006416 <xQueueCreateCountingSemaphoreStatic>
 8005c04:	61f8      	str	r0, [r7, #28]
 8005c06:	e004      	b.n	8005c12 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fc3a 	bl	8006484 <xQueueCreateCountingSemaphore>
 8005c10:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e001      	b.n	8005c2a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	69f8      	ldr	r0, [r7, #28]
 8005c2e:	f001 fa3b 	bl	80070a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005c32:	69fb      	ldr	r3, [r7, #28]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3720      	adds	r7, #32
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005c54:	f06f 0303 	mvn.w	r3, #3
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e039      	b.n	8005cd0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c5c:	f3ef 8305 	mrs	r3, IPSR
 8005c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d022      	beq.n	8005cae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005c6e:	f06f 0303 	mvn.w	r3, #3
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e02c      	b.n	8005cd0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005c7a:	f107 0308 	add.w	r3, r7, #8
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2100      	movs	r1, #0
 8005c82:	6938      	ldr	r0, [r7, #16]
 8005c84:	f001 f844 	bl	8006d10 <xQueueReceiveFromISR>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d003      	beq.n	8005c96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005c8e:	f06f 0302 	mvn.w	r3, #2
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e01c      	b.n	8005cd0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d019      	beq.n	8005cd0 <osSemaphoreAcquire+0x94>
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <osSemaphoreAcquire+0xa0>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	f3bf 8f6f 	isb	sy
 8005cac:	e010      	b.n	8005cd0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6938      	ldr	r0, [r7, #16]
 8005cb2:	f000 ff21 	bl	8006af8 <xQueueSemaphoreTake>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d009      	beq.n	8005cd0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005cc2:	f06f 0301 	mvn.w	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	e002      	b.n	8005cd0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005cca:	f06f 0302 	mvn.w	r3, #2
 8005cce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005cd0:	697b      	ldr	r3, [r7, #20]
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	e000ed04 	.word	0xe000ed04

08005ce0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005cf6:	f06f 0303 	mvn.w	r3, #3
 8005cfa:	617b      	str	r3, [r7, #20]
 8005cfc:	e02c      	b.n	8005d58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cfe:	f3ef 8305 	mrs	r3, IPSR
 8005d02:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01a      	beq.n	8005d40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005d0e:	f107 0308 	add.w	r3, r7, #8
 8005d12:	4619      	mov	r1, r3
 8005d14:	6938      	ldr	r0, [r7, #16]
 8005d16:	f000 fd82 	bl	800681e <xQueueGiveFromISR>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d003      	beq.n	8005d28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005d20:	f06f 0302 	mvn.w	r3, #2
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e017      	b.n	8005d58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d014      	beq.n	8005d58 <osSemaphoreRelease+0x78>
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <osSemaphoreRelease+0x84>)
 8005d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	e00b      	b.n	8005d58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d40:	2300      	movs	r3, #0
 8005d42:	2200      	movs	r2, #0
 8005d44:	2100      	movs	r1, #0
 8005d46:	6938      	ldr	r0, [r7, #16]
 8005d48:	f000 fbd0 	bl	80064ec <xQueueGenericSend>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d002      	beq.n	8005d58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005d52:	f06f 0302 	mvn.w	r3, #2
 8005d56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d58:	697b      	ldr	r3, [r7, #20]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08a      	sub	sp, #40	; 0x28
 8005d6c:	af02      	add	r7, sp, #8
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d78:	f3ef 8305 	mrs	r3, IPSR
 8005d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8005d7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d15f      	bne.n	8005e44 <osMessageQueueNew+0xdc>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d05c      	beq.n	8005e44 <osMessageQueueNew+0xdc>
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d059      	beq.n	8005e44 <osMessageQueueNew+0xdc>
    mem = -1;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d029      	beq.n	8005df0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d012      	beq.n	8005dca <osMessageQueueNew+0x62>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	2b4f      	cmp	r3, #79	; 0x4f
 8005daa:	d90e      	bls.n	8005dca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00a      	beq.n	8005dca <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	68b9      	ldr	r1, [r7, #8]
 8005dbc:	fb01 f303 	mul.w	r3, r1, r3
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <osMessageQueueNew+0x62>
        mem = 1;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e014      	b.n	8005df4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d110      	bne.n	8005df4 <osMessageQueueNew+0x8c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10c      	bne.n	8005df4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d108      	bne.n	8005df4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d104      	bne.n	8005df4 <osMessageQueueNew+0x8c>
          mem = 0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	61bb      	str	r3, [r7, #24]
 8005dee:	e001      	b.n	8005df4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10b      	bne.n	8005e12 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	2100      	movs	r1, #0
 8005e04:	9100      	str	r1, [sp, #0]
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 fa2f 	bl	800626c <xQueueGenericCreateStatic>
 8005e0e:	61f8      	str	r0, [r7, #28]
 8005e10:	e008      	b.n	8005e24 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d105      	bne.n	8005e24 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005e18:	2200      	movs	r2, #0
 8005e1a:	68b9      	ldr	r1, [r7, #8]
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 fa9d 	bl	800635c <xQueueGenericCreate>
 8005e22:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00c      	beq.n	8005e44 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e001      	b.n	8005e3c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005e3c:	6979      	ldr	r1, [r7, #20]
 8005e3e:	69f8      	ldr	r0, [r7, #28]
 8005e40:	f001 f932 	bl	80070a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005e44:	69fb      	ldr	r3, [r7, #28]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
	...

08005e50 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b088      	sub	sp, #32
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e68:	f3ef 8305 	mrs	r3, IPSR
 8005e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e6e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d028      	beq.n	8005ec6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d005      	beq.n	8005e86 <osMessageQueuePut+0x36>
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <osMessageQueuePut+0x36>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005e86:	f06f 0303 	mvn.w	r3, #3
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	e038      	b.n	8005f00 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005e92:	f107 0210 	add.w	r2, r7, #16
 8005e96:	2300      	movs	r3, #0
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	69b8      	ldr	r0, [r7, #24]
 8005e9c:	f000 fc24 	bl	80066e8 <xQueueGenericSendFromISR>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d003      	beq.n	8005eae <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005ea6:	f06f 0302 	mvn.w	r3, #2
 8005eaa:	61fb      	str	r3, [r7, #28]
 8005eac:	e028      	b.n	8005f00 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d025      	beq.n	8005f00 <osMessageQueuePut+0xb0>
 8005eb4:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <osMessageQueuePut+0xbc>)
 8005eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eba:	601a      	str	r2, [r3, #0]
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	e01c      	b.n	8005f00 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <osMessageQueuePut+0x82>
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d103      	bne.n	8005eda <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ed2:	f06f 0303 	mvn.w	r3, #3
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	e012      	b.n	8005f00 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005eda:	2300      	movs	r3, #0
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	69b8      	ldr	r0, [r7, #24]
 8005ee2:	f000 fb03 	bl	80064ec <xQueueGenericSend>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d009      	beq.n	8005f00 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005ef2:	f06f 0301 	mvn.w	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e002      	b.n	8005f00 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005efa:	f06f 0302 	mvn.w	r3, #2
 8005efe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f00:	69fb      	ldr	r3, [r7, #28]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f26:	f3ef 8305 	mrs	r3, IPSR
 8005f2a:	617b      	str	r3, [r7, #20]
  return(result);
 8005f2c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d028      	beq.n	8005f84 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <osMessageQueueGet+0x34>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <osMessageQueueGet+0x34>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005f44:	f06f 0303 	mvn.w	r3, #3
 8005f48:	61fb      	str	r3, [r7, #28]
 8005f4a:	e037      	b.n	8005fbc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005f50:	f107 0310 	add.w	r3, r7, #16
 8005f54:	461a      	mov	r2, r3
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	69b8      	ldr	r0, [r7, #24]
 8005f5a:	f000 fed9 	bl	8006d10 <xQueueReceiveFromISR>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d003      	beq.n	8005f6c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005f64:	f06f 0302 	mvn.w	r3, #2
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	e027      	b.n	8005fbc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d024      	beq.n	8005fbc <osMessageQueueGet+0xac>
 8005f72:	4b15      	ldr	r3, [pc, #84]	; (8005fc8 <osMessageQueueGet+0xb8>)
 8005f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	e01b      	b.n	8005fbc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d002      	beq.n	8005f90 <osMessageQueueGet+0x80>
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005f90:	f06f 0303 	mvn.w	r3, #3
 8005f94:	61fb      	str	r3, [r7, #28]
 8005f96:	e011      	b.n	8005fbc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f98:	683a      	ldr	r2, [r7, #0]
 8005f9a:	68b9      	ldr	r1, [r7, #8]
 8005f9c:	69b8      	ldr	r0, [r7, #24]
 8005f9e:	f000 fccb 	bl	8006938 <xQueueReceive>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d009      	beq.n	8005fbc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005fae:	f06f 0301 	mvn.w	r3, #1
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	e002      	b.n	8005fbc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005fb6:	f06f 0302 	mvn.w	r3, #2
 8005fba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3720      	adds	r7, #32
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a07      	ldr	r2, [pc, #28]	; (8005ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <vApplicationGetIdleTaskMemory+0x30>)
 8005fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	601a      	str	r2, [r3, #0]
}
 8005fea:	bf00      	nop
 8005fec:	3714      	adds	r7, #20
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	24000324 	.word	0x24000324
 8005ffc:	240003d0 	.word	0x240003d0

08006000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a07      	ldr	r2, [pc, #28]	; (800602c <vApplicationGetTimerTaskMemory+0x2c>)
 8006010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <vApplicationGetTimerTaskMemory+0x30>)
 8006016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	240005d0 	.word	0x240005d0
 8006030:	2400067c 	.word	0x2400067c

08006034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f103 0208 	add.w	r2, r3, #8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f04f 32ff 	mov.w	r2, #4294967295
 800604c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f103 0208 	add.w	r2, r3, #8
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f103 0208 	add.w	r2, r3, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006082:	bf00      	nop
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	683a      	ldr	r2, [r7, #0]
 80060b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	60fb      	str	r3, [r7, #12]
 80060f4:	e00c      	b.n	8006110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3308      	adds	r3, #8
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	e002      	b.n	8006104 <vListInsert+0x2e>
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d2f6      	bcs.n	80060fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	601a      	str	r2, [r3, #0]
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6892      	ldr	r2, [r2, #8]
 800615e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	6852      	ldr	r2, [r2, #4]
 8006168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	429a      	cmp	r2, r3
 8006172:	d103      	bne.n	800617c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	1e5a      	subs	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061c6:	f002 fc9d 	bl	8008b04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d2:	68f9      	ldr	r1, [r7, #12]
 80061d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061d6:	fb01 f303 	mul.w	r3, r1, r3
 80061da:	441a      	add	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061f6:	3b01      	subs	r3, #1
 80061f8:	68f9      	ldr	r1, [r7, #12]
 80061fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	22ff      	movs	r2, #255	; 0xff
 800620a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	22ff      	movs	r2, #255	; 0xff
 8006212:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d114      	bne.n	8006246 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d01a      	beq.n	800625a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3310      	adds	r3, #16
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fc4f 	bl	8007acc <xTaskRemoveFromEventList>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d012      	beq.n	800625a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <xQueueGenericReset+0xcc>)
 8006236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	e009      	b.n	800625a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3310      	adds	r3, #16
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff fef2 	bl	8006034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3324      	adds	r3, #36	; 0x24
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff feed 	bl	8006034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800625a:	f002 fc83 	bl	8008b64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800625e:	2301      	movs	r3, #1
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	e000ed04 	.word	0xe000ed04

0800626c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b08e      	sub	sp, #56	; 0x38
 8006270:	af02      	add	r7, sp, #8
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <xQueueGenericCreateStatic+0x52>
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <xQueueGenericCreateStatic+0x56>
 80062be:	2301      	movs	r3, #1
 80062c0:	e000      	b.n	80062c4 <xQueueGenericCreateStatic+0x58>
 80062c2:	2300      	movs	r3, #0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	623b      	str	r3, [r7, #32]
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d102      	bne.n	80062ea <xQueueGenericCreateStatic+0x7e>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <xQueueGenericCreateStatic+0x82>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xQueueGenericCreateStatic+0x84>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	61fb      	str	r3, [r7, #28]
}
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800630a:	2350      	movs	r3, #80	; 0x50
 800630c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b50      	cmp	r3, #80	; 0x50
 8006312:	d00a      	beq.n	800632a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	61bb      	str	r3, [r7, #24]
}
 8006326:	bf00      	nop
 8006328:	e7fe      	b.n	8006328 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800632a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00d      	beq.n	8006352 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	2201      	movs	r2, #1
 800633a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800633e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 f83f 	bl	80063d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006354:	4618      	mov	r0, r3
 8006356:	3730      	adds	r7, #48	; 0x30
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	613b      	str	r3, [r7, #16]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	3350      	adds	r3, #80	; 0x50
 8006394:	4618      	mov	r0, r3
 8006396:	f002 fcd7 	bl	8008d48 <pvPortMalloc>
 800639a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d011      	beq.n	80063c6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	3350      	adds	r3, #80	; 0x50
 80063aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063b4:	79fa      	ldrb	r2, [r7, #7]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	9300      	str	r3, [sp, #0]
 80063ba:	4613      	mov	r3, r2
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f805 	bl	80063d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063c6:	69bb      	ldr	r3, [r7, #24]
	}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e002      	b.n	80063f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063fe:	2101      	movs	r1, #1
 8006400:	69b8      	ldr	r0, [r7, #24]
 8006402:	f7ff fecb 	bl	800619c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006416:	b580      	push	{r7, lr}
 8006418:	b08a      	sub	sp, #40	; 0x28
 800641a:	af02      	add	r7, sp, #8
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61bb      	str	r3, [r7, #24]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800643e:	68ba      	ldr	r2, [r7, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	429a      	cmp	r2, r3
 8006444:	d90a      	bls.n	800645c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	617b      	str	r3, [r7, #20]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800645c:	2302      	movs	r3, #2
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	2100      	movs	r1, #0
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7ff ff00 	bl	800626c <xQueueGenericCreateStatic>
 800646c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800647a:	69fb      	ldr	r3, [r7, #28]
	}
 800647c:	4618      	mov	r0, r3
 800647e:	3720      	adds	r7, #32
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10a      	bne.n	80064aa <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	613b      	str	r3, [r7, #16]
}
 80064a6:	bf00      	nop
 80064a8:	e7fe      	b.n	80064a8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d90a      	bls.n	80064c8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	60fb      	str	r3, [r7, #12]
}
 80064c4:	bf00      	nop
 80064c6:	e7fe      	b.n	80064c6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80064c8:	2202      	movs	r2, #2
 80064ca:	2100      	movs	r1, #0
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7ff ff45 	bl	800635c <xQueueGenericCreate>
 80064d2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80064e0:	697b      	ldr	r3, [r7, #20]
	}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08e      	sub	sp, #56	; 0x38
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10a      	bne.n	800651e <xQueueGenericSend+0x32>
	__asm volatile
 8006508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650c:	f383 8811 	msr	BASEPRI, r3
 8006510:	f3bf 8f6f 	isb	sy
 8006514:	f3bf 8f4f 	dsb	sy
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800651a:	bf00      	nop
 800651c:	e7fe      	b.n	800651c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d103      	bne.n	800652c <xQueueGenericSend+0x40>
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d101      	bne.n	8006530 <xQueueGenericSend+0x44>
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <xQueueGenericSend+0x46>
 8006530:	2300      	movs	r3, #0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <xQueueGenericSend+0x60>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653a:	f383 8811 	msr	BASEPRI, r3
 800653e:	f3bf 8f6f 	isb	sy
 8006542:	f3bf 8f4f 	dsb	sy
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006548:	bf00      	nop
 800654a:	e7fe      	b.n	800654a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d103      	bne.n	800655a <xQueueGenericSend+0x6e>
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <xQueueGenericSend+0x72>
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <xQueueGenericSend+0x74>
 800655e:	2300      	movs	r3, #0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xQueueGenericSend+0x8e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	623b      	str	r3, [r7, #32]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800657a:	f001 fc6b 	bl	8007e54 <xTaskGetSchedulerState>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <xQueueGenericSend+0x9e>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <xQueueGenericSend+0xa2>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <xQueueGenericSend+0xa4>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueGenericSend+0xbe>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	61fb      	str	r3, [r7, #28]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065aa:	f002 faab 	bl	8008b04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d302      	bcc.n	80065c0 <xQueueGenericSend+0xd4>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d129      	bne.n	8006614 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065c6:	f000 fc5e 	bl	8006e86 <prvCopyDataToQueue>
 80065ca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d010      	beq.n	80065f6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 fa77 	bl	8007acc <xTaskRemoveFromEventList>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d013      	beq.n	800660c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80065e4:	4b3f      	ldr	r3, [pc, #252]	; (80066e4 <xQueueGenericSend+0x1f8>)
 80065e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ea:	601a      	str	r2, [r3, #0]
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	e00a      	b.n	800660c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80065fc:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <xQueueGenericSend+0x1f8>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800660c:	f002 faaa 	bl	8008b64 <vPortExitCritical>
				return pdPASS;
 8006610:	2301      	movs	r3, #1
 8006612:	e063      	b.n	80066dc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800661a:	f002 faa3 	bl	8008b64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800661e:	2300      	movs	r3, #0
 8006620:	e05c      	b.n	80066dc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d106      	bne.n	8006636 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006628:	f107 0314 	add.w	r3, r7, #20
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fab1 	bl	8007b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006632:	2301      	movs	r3, #1
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006636:	f002 fa95 	bl	8008b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800663a:	f001 f81d 	bl	8007678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800663e:	f002 fa61 	bl	8008b04 <vPortEnterCritical>
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006648:	b25b      	sxtb	r3, r3
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d103      	bne.n	8006658 <xQueueGenericSend+0x16c>
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800665e:	b25b      	sxtb	r3, r3
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d103      	bne.n	800666e <xQueueGenericSend+0x182>
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800666e:	f002 fa79 	bl	8008b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006672:	1d3a      	adds	r2, r7, #4
 8006674:	f107 0314 	add.w	r3, r7, #20
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f001 faa0 	bl	8007bc0 <xTaskCheckForTimeOut>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d124      	bne.n	80066d0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006688:	f000 fcf5 	bl	8007076 <prvIsQueueFull>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006694:	3310      	adds	r3, #16
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4611      	mov	r1, r2
 800669a:	4618      	mov	r0, r3
 800669c:	f001 f9c6 	bl	8007a2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80066a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066a2:	f000 fc80 	bl	8006fa6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80066a6:	f000 fff5 	bl	8007694 <xTaskResumeAll>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f47f af7c 	bne.w	80065aa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80066b2:	4b0c      	ldr	r3, [pc, #48]	; (80066e4 <xQueueGenericSend+0x1f8>)
 80066b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	e772      	b.n	80065aa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80066c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066c6:	f000 fc6e 	bl	8006fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066ca:	f000 ffe3 	bl	8007694 <xTaskResumeAll>
 80066ce:	e76c      	b.n	80065aa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80066d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066d2:	f000 fc68 	bl	8006fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80066d6:	f000 ffdd 	bl	8007694 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80066da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3738      	adds	r7, #56	; 0x38
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	e000ed04 	.word	0xe000ed04

080066e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b090      	sub	sp, #64	; 0x40
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80066fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10a      	bne.n	8006716 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d103      	bne.n	8006724 <xQueueGenericSendFromISR+0x3c>
 800671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d101      	bne.n	8006728 <xQueueGenericSendFromISR+0x40>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <xQueueGenericSendFromISR+0x42>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10a      	bne.n	8006744 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d103      	bne.n	8006752 <xQueueGenericSendFromISR+0x6a>
 800674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <xQueueGenericSendFromISR+0x6e>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <xQueueGenericSendFromISR+0x70>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10a      	bne.n	8006772 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	623b      	str	r3, [r7, #32]
}
 800676e:	bf00      	nop
 8006770:	e7fe      	b.n	8006770 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006772:	f002 faa9 	bl	8008cc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006776:	f3ef 8211 	mrs	r2, BASEPRI
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	61fa      	str	r2, [r7, #28]
 800678c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800678e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006790:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	429a      	cmp	r2, r3
 800679c:	d302      	bcc.n	80067a4 <xQueueGenericSendFromISR+0xbc>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d12f      	bne.n	8006804 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80067ba:	f000 fb64 	bl	8006e86 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d112      	bne.n	80067ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d016      	beq.n	80067fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d2:	3324      	adds	r3, #36	; 0x24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f979 	bl	8007acc <xTaskRemoveFromEventList>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e007      	b.n	80067fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	b25a      	sxtb	r2, r3
 80067f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067fe:	2301      	movs	r3, #1
 8006800:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006802:	e001      	b.n	8006808 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006804:	2300      	movs	r3, #0
 8006806:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006816:	4618      	mov	r0, r3
 8006818:	3740      	adds	r7, #64	; 0x40
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b08e      	sub	sp, #56	; 0x38
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	623b      	str	r3, [r7, #32]
}
 8006844:	bf00      	nop
 8006846:	e7fe      	b.n	8006846 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00a      	beq.n	8006866 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	61fb      	str	r3, [r7, #28]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d103      	bne.n	8006876 <xQueueGiveFromISR+0x58>
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <xQueueGiveFromISR+0x5c>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueGiveFromISR+0x5e>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61bb      	str	r3, [r7, #24]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006896:	f002 fa17 	bl	8008cc8 <vPortValidateInterruptPriority>
	__asm volatile
 800689a:	f3ef 8211 	mrs	r2, BASEPRI
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	617a      	str	r2, [r7, #20]
 80068b0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80068b2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d22b      	bcs.n	800691e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e0:	d112      	bne.n	8006908 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d016      	beq.n	8006918 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ec:	3324      	adds	r3, #36	; 0x24
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f8ec 	bl	8007acc <xTaskRemoveFromEventList>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00e      	beq.n	8006918 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00b      	beq.n	8006918 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2201      	movs	r2, #1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e007      	b.n	8006918 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800690c:	3301      	adds	r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	b25a      	sxtb	r2, r3
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006918:	2301      	movs	r3, #1
 800691a:	637b      	str	r3, [r7, #52]	; 0x34
 800691c:	e001      	b.n	8006922 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800691e:	2300      	movs	r3, #0
 8006920:	637b      	str	r3, [r7, #52]	; 0x34
 8006922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006924:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f383 8811 	msr	BASEPRI, r3
}
 800692c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006930:	4618      	mov	r0, r3
 8006932:	3738      	adds	r7, #56	; 0x38
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	; 0x30
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006944:	2300      	movs	r3, #0
 8006946:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <xQueueReceive+0x30>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	623b      	str	r3, [r7, #32]
}
 8006964:	bf00      	nop
 8006966:	e7fe      	b.n	8006966 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d103      	bne.n	8006976 <xQueueReceive+0x3e>
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <xQueueReceive+0x42>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xQueueReceive+0x44>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <xQueueReceive+0x5e>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	61fb      	str	r3, [r7, #28]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006996:	f001 fa5d 	bl	8007e54 <xTaskGetSchedulerState>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <xQueueReceive+0x6e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <xQueueReceive+0x72>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xQueueReceive+0x74>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <xQueueReceive+0x8e>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	61bb      	str	r3, [r7, #24]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069c6:	f002 f89d 	bl	8008b04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01f      	beq.n	8006a16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069da:	f000 fabe 	bl	8006f5a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	1e5a      	subs	r2, r3, #1
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00f      	beq.n	8006a0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	3310      	adds	r3, #16
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 f86a 	bl	8007acc <xTaskRemoveFromEventList>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069fe:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <xQueueReceive+0x1bc>)
 8006a00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a0e:	f002 f8a9 	bl	8008b64 <vPortExitCritical>
				return pdPASS;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e069      	b.n	8006aea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d103      	bne.n	8006a24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a1c:	f002 f8a2 	bl	8008b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e062      	b.n	8006aea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a2a:	f107 0310 	add.w	r3, r7, #16
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 f8b0 	bl	8007b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a34:	2301      	movs	r3, #1
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a38:	f002 f894 	bl	8008b64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a3c:	f000 fe1c 	bl	8007678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a40:	f002 f860 	bl	8008b04 <vPortEnterCritical>
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a4a:	b25b      	sxtb	r3, r3
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d103      	bne.n	8006a5a <xQueueReceive+0x122>
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a66:	d103      	bne.n	8006a70 <xQueueReceive+0x138>
 8006a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a70:	f002 f878 	bl	8008b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a74:	1d3a      	adds	r2, r7, #4
 8006a76:	f107 0310 	add.w	r3, r7, #16
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 f89f 	bl	8007bc0 <xTaskCheckForTimeOut>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d123      	bne.n	8006ad0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a8a:	f000 fade 	bl	800704a <prvIsQueueEmpty>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d017      	beq.n	8006ac4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	3324      	adds	r3, #36	; 0x24
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 ffc5 	bl	8007a2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006aa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa4:	f000 fa7f 	bl	8006fa6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aa8:	f000 fdf4 	bl	8007694 <xTaskResumeAll>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d189      	bne.n	80069c6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ab2:	4b10      	ldr	r3, [pc, #64]	; (8006af4 <xQueueReceive+0x1bc>)
 8006ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	e780      	b.n	80069c6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ac4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac6:	f000 fa6e 	bl	8006fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aca:	f000 fde3 	bl	8007694 <xTaskResumeAll>
 8006ace:	e77a      	b.n	80069c6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad2:	f000 fa68 	bl	8006fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ad6:	f000 fddd 	bl	8007694 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006adc:	f000 fab5 	bl	800704a <prvIsQueueEmpty>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f43f af6f 	beq.w	80069c6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3730      	adds	r7, #48	; 0x30
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08e      	sub	sp, #56	; 0x38
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	623b      	str	r3, [r7, #32]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b36:	f383 8811 	msr	BASEPRI, r3
 8006b3a:	f3bf 8f6f 	isb	sy
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	61fb      	str	r3, [r7, #28]
}
 8006b44:	bf00      	nop
 8006b46:	e7fe      	b.n	8006b46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b48:	f001 f984 	bl	8007e54 <xTaskGetSchedulerState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <xQueueSemaphoreTake+0x60>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <xQueueSemaphoreTake+0x64>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <xQueueSemaphoreTake+0x66>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	61bb      	str	r3, [r7, #24]
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b78:	f001 ffc4 	bl	8008b04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d024      	beq.n	8006bd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	1e5a      	subs	r2, r3, #1
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d104      	bne.n	8006ba2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b98:	f001 fad2 	bl	8008140 <pvTaskIncrementMutexHeldCount>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00f      	beq.n	8006bca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	3310      	adds	r3, #16
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ff8c 	bl	8007acc <xTaskRemoveFromEventList>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006bba:	4b54      	ldr	r3, [pc, #336]	; (8006d0c <xQueueSemaphoreTake+0x214>)
 8006bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006bca:	f001 ffcb 	bl	8008b64 <vPortExitCritical>
				return pdPASS;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e097      	b.n	8006d02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d111      	bne.n	8006bfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00a      	beq.n	8006bf4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	617b      	str	r3, [r7, #20]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006bf4:	f001 ffb6 	bl	8008b64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	e082      	b.n	8006d02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c02:	f107 030c 	add.w	r3, r7, #12
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 ffc4 	bl	8007b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c10:	f001 ffa8 	bl	8008b64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c14:	f000 fd30 	bl	8007678 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c18:	f001 ff74 	bl	8008b04 <vPortEnterCritical>
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c28:	d103      	bne.n	8006c32 <xQueueSemaphoreTake+0x13a>
 8006c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c38:	b25b      	sxtb	r3, r3
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d103      	bne.n	8006c48 <xQueueSemaphoreTake+0x150>
 8006c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c48:	f001 ff8c 	bl	8008b64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c4c:	463a      	mov	r2, r7
 8006c4e:	f107 030c 	add.w	r3, r7, #12
 8006c52:	4611      	mov	r1, r2
 8006c54:	4618      	mov	r0, r3
 8006c56:	f000 ffb3 	bl	8007bc0 <xTaskCheckForTimeOut>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d132      	bne.n	8006cc6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c62:	f000 f9f2 	bl	800704a <prvIsQueueEmpty>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d026      	beq.n	8006cba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d109      	bne.n	8006c88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c74:	f001 ff46 	bl	8008b04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f001 f907 	bl	8007e90 <xTaskPriorityInherit>
 8006c82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c84:	f001 ff6e 	bl	8008b64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8a:	3324      	adds	r3, #36	; 0x24
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f000 fecb 	bl	8007a2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c98:	f000 f985 	bl	8006fa6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c9c:	f000 fcfa 	bl	8007694 <xTaskResumeAll>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f47f af68 	bne.w	8006b78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006ca8:	4b18      	ldr	r3, [pc, #96]	; (8006d0c <xQueueSemaphoreTake+0x214>)
 8006caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	f3bf 8f4f 	dsb	sy
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	e75e      	b.n	8006b78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cbc:	f000 f973 	bl	8006fa6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cc0:	f000 fce8 	bl	8007694 <xTaskResumeAll>
 8006cc4:	e758      	b.n	8006b78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc8:	f000 f96d 	bl	8006fa6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ccc:	f000 fce2 	bl	8007694 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cd2:	f000 f9ba 	bl	800704a <prvIsQueueEmpty>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f43f af4d 	beq.w	8006b78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006ce4:	f001 ff0e 	bl	8008b04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006ce8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cea:	f000 f8b4 	bl	8006e56 <prvGetDisinheritPriorityAfterTimeout>
 8006cee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 f9a0 	bl	800803c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006cfc:	f001 ff32 	bl	8008b64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3738      	adds	r7, #56	; 0x38
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	e000ed04 	.word	0xe000ed04

08006d10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b08e      	sub	sp, #56	; 0x38
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10a      	bne.n	8006d3c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	623b      	str	r3, [r7, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d103      	bne.n	8006d4a <xQueueReceiveFromISR+0x3a>
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <xQueueReceiveFromISR+0x3e>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <xQueueReceiveFromISR+0x40>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	61fb      	str	r3, [r7, #28]
}
 8006d66:	bf00      	nop
 8006d68:	e7fe      	b.n	8006d68 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d6a:	f001 ffad 	bl	8008cc8 <vPortValidateInterruptPriority>
	__asm volatile
 8006d6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61ba      	str	r2, [r7, #24]
 8006d84:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006d86:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d02f      	beq.n	8006df6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da4:	f000 f8d9 	bl	8006f5a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006db0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db8:	d112      	bne.n	8006de0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d016      	beq.n	8006df0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	3310      	adds	r3, #16
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fe80 	bl	8007acc <xTaskRemoveFromEventList>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00e      	beq.n	8006df0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e007      	b.n	8006df0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006de0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de4:	3301      	adds	r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	b25a      	sxtb	r2, r3
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006df0:	2301      	movs	r3, #1
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
 8006df4:	e001      	b.n	8006dfa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f383 8811 	msr	BASEPRI, r3
}
 8006e04:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3738      	adds	r7, #56	; 0x38
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vQueueDelete+0x28>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	60bb      	str	r3, [r7, #8]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 f95f 	bl	80070fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f002 f849 	bl	8008ee0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006e4e:	bf00      	nop
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e56:	b480      	push	{r7}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d006      	beq.n	8006e74 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	e001      	b.n	8006e78 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006e78:	68fb      	ldr	r3, [r7, #12]
	}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	60f8      	str	r0, [r7, #12]
 8006e8e:	60b9      	str	r1, [r7, #8]
 8006e90:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10d      	bne.n	8006ec0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d14d      	bne.n	8006f48 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f001 f855 	bl	8007f60 <xTaskPriorityDisinherit>
 8006eb6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	609a      	str	r2, [r3, #8]
 8006ebe:	e043      	b.n	8006f48 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d119      	bne.n	8006efa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6858      	ldr	r0, [r3, #4]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	461a      	mov	r2, r3
 8006ed0:	68b9      	ldr	r1, [r7, #8]
 8006ed2:	f015 fa3a 	bl	801c34a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	441a      	add	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	685a      	ldr	r2, [r3, #4]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d32b      	bcc.n	8006f48 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	605a      	str	r2, [r3, #4]
 8006ef8:	e026      	b.n	8006f48 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	68d8      	ldr	r0, [r3, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f02:	461a      	mov	r2, r3
 8006f04:	68b9      	ldr	r1, [r7, #8]
 8006f06:	f015 fa20 	bl	801c34a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68da      	ldr	r2, [r3, #12]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f12:	425b      	negs	r3, r3
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d207      	bcs.n	8006f36 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	425b      	negs	r3, r3
 8006f30:	441a      	add	r2, r3
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d105      	bne.n	8006f48 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f50:	697b      	ldr	r3, [r7, #20]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d018      	beq.n	8006f9e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68da      	ldr	r2, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f74:	441a      	add	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68da      	ldr	r2, [r3, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d303      	bcc.n	8006f8e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68d9      	ldr	r1, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	461a      	mov	r2, r3
 8006f98:	6838      	ldr	r0, [r7, #0]
 8006f9a:	f015 f9d6 	bl	801c34a <memcpy>
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fae:	f001 fda9 	bl	8008b04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fba:	e011      	b.n	8006fe0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d012      	beq.n	8006fea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3324      	adds	r3, #36	; 0x24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fd7f 	bl	8007acc <xTaskRemoveFromEventList>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fd4:	f000 fe56 	bl	8007c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fd8:	7bfb      	ldrb	r3, [r7, #15]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	dce9      	bgt.n	8006fbc <prvUnlockQueue+0x16>
 8006fe8:	e000      	b.n	8006fec <prvUnlockQueue+0x46>
					break;
 8006fea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	22ff      	movs	r2, #255	; 0xff
 8006ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ff4:	f001 fdb6 	bl	8008b64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ff8:	f001 fd84 	bl	8008b04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007002:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007004:	e011      	b.n	800702a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d012      	beq.n	8007034 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	3310      	adds	r3, #16
 8007012:	4618      	mov	r0, r3
 8007014:	f000 fd5a 	bl	8007acc <xTaskRemoveFromEventList>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800701e:	f000 fe31 	bl	8007c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007022:	7bbb      	ldrb	r3, [r7, #14]
 8007024:	3b01      	subs	r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800702e:	2b00      	cmp	r3, #0
 8007030:	dce9      	bgt.n	8007006 <prvUnlockQueue+0x60>
 8007032:	e000      	b.n	8007036 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007034:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	22ff      	movs	r2, #255	; 0xff
 800703a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800703e:	f001 fd91 	bl	8008b64 <vPortExitCritical>
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b084      	sub	sp, #16
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007052:	f001 fd57 	bl	8008b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800705e:	2301      	movs	r3, #1
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	e001      	b.n	8007068 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007064:	2300      	movs	r3, #0
 8007066:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007068:	f001 fd7c 	bl	8008b64 <vPortExitCritical>

	return xReturn;
 800706c:	68fb      	ldr	r3, [r7, #12]
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800707e:	f001 fd41 	bl	8008b04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800708a:	429a      	cmp	r2, r3
 800708c:	d102      	bne.n	8007094 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800708e:	2301      	movs	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]
 8007092:	e001      	b.n	8007098 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007098:	f001 fd64 	bl	8008b64 <vPortExitCritical>

	return xReturn;
 800709c:	68fb      	ldr	r3, [r7, #12]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
 80070b6:	e014      	b.n	80070e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070b8:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <vQueueAddToRegistry+0x50>)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070c4:	490c      	ldr	r1, [pc, #48]	; (80070f8 <vQueueAddToRegistry+0x50>)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070ce:	4a0a      	ldr	r2, [pc, #40]	; (80070f8 <vQueueAddToRegistry+0x50>)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	4413      	add	r3, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070da:	e006      	b.n	80070ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3301      	adds	r3, #1
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2b07      	cmp	r3, #7
 80070e6:	d9e7      	bls.n	80070b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070e8:	bf00      	nop
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	24000a7c 	.word	0x24000a7c

080070fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007104:	2300      	movs	r3, #0
 8007106:	60fb      	str	r3, [r7, #12]
 8007108:	e016      	b.n	8007138 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800710a:	4a10      	ldr	r2, [pc, #64]	; (800714c <vQueueUnregisterQueue+0x50>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	4413      	add	r3, r2
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d10b      	bne.n	8007132 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800711a:	4a0c      	ldr	r2, [pc, #48]	; (800714c <vQueueUnregisterQueue+0x50>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2100      	movs	r1, #0
 8007120:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007124:	4a09      	ldr	r2, [pc, #36]	; (800714c <vQueueUnregisterQueue+0x50>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	4413      	add	r3, r2
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]
				break;
 8007130:	e006      	b.n	8007140 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	3301      	adds	r3, #1
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b07      	cmp	r3, #7
 800713c:	d9e5      	bls.n	800710a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	24000a7c 	.word	0x24000a7c

08007150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007160:	f001 fcd0 	bl	8008b04 <vPortEnterCritical>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800716a:	b25b      	sxtb	r3, r3
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d103      	bne.n	800717a <vQueueWaitForMessageRestricted+0x2a>
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007180:	b25b      	sxtb	r3, r3
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d103      	bne.n	8007190 <vQueueWaitForMessageRestricted+0x40>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007190:	f001 fce8 	bl	8008b64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d106      	bne.n	80071aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3324      	adds	r3, #36	; 0x24
 80071a0:	687a      	ldr	r2, [r7, #4]
 80071a2:	68b9      	ldr	r1, [r7, #8]
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fc65 	bl	8007a74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f7ff fefb 	bl	8006fa6 <prvUnlockQueue>
	}
 80071b0:	bf00      	nop
 80071b2:	3718      	adds	r7, #24
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b08e      	sub	sp, #56	; 0x38
 80071bc:	af04      	add	r7, sp, #16
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	623b      	str	r3, [r7, #32]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <xTaskCreateStatic+0x46>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	61fb      	str	r3, [r7, #28]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071fe:	23ac      	movs	r3, #172	; 0xac
 8007200:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2bac      	cmp	r3, #172	; 0xac
 8007206:	d00a      	beq.n	800721e <xTaskCreateStatic+0x66>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61bb      	str	r3, [r7, #24]
}
 800721a:	bf00      	nop
 800721c:	e7fe      	b.n	800721c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800721e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007222:	2b00      	cmp	r3, #0
 8007224:	d01e      	beq.n	8007264 <xTaskCreateStatic+0xac>
 8007226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007228:	2b00      	cmp	r3, #0
 800722a:	d01b      	beq.n	8007264 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800722c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007234:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007238:	2202      	movs	r2, #2
 800723a:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800723e:	2300      	movs	r3, #0
 8007240:	9303      	str	r3, [sp, #12]
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	9302      	str	r3, [sp, #8]
 8007246:	f107 0314 	add.w	r3, r7, #20
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f850 	bl	80072fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800725c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800725e:	f000 f8f7 	bl	8007450 <prvAddNewTaskToReadyList>
 8007262:	e001      	b.n	8007268 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007268:	697b      	ldr	r3, [r7, #20]
	}
 800726a:	4618      	mov	r0, r3
 800726c:	3728      	adds	r7, #40	; 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007272:	b580      	push	{r7, lr}
 8007274:	b08c      	sub	sp, #48	; 0x30
 8007276:	af04      	add	r7, sp, #16
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	603b      	str	r3, [r7, #0]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007282:	88fb      	ldrh	r3, [r7, #6]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4618      	mov	r0, r3
 8007288:	f001 fd5e 	bl	8008d48 <pvPortMalloc>
 800728c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00e      	beq.n	80072b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007294:	20ac      	movs	r0, #172	; 0xac
 8007296:	f001 fd57 	bl	8008d48 <pvPortMalloc>
 800729a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	631a      	str	r2, [r3, #48]	; 0x30
 80072a8:	e005      	b.n	80072b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072aa:	6978      	ldr	r0, [r7, #20]
 80072ac:	f001 fe18 	bl	8008ee0 <vPortFree>
 80072b0:	e001      	b.n	80072b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d017      	beq.n	80072ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072c4:	88fa      	ldrh	r2, [r7, #6]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	9302      	str	r3, [sp, #8]
 80072ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d0:	9301      	str	r3, [sp, #4]
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f80e 	bl	80072fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072e0:	69f8      	ldr	r0, [r7, #28]
 80072e2:	f000 f8b5 	bl	8007450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072e6:	2301      	movs	r3, #1
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e002      	b.n	80072f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
 80072f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072f2:	69bb      	ldr	r3, [r7, #24]
	}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3720      	adds	r7, #32
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	461a      	mov	r2, r3
 8007314:	21a5      	movs	r1, #165	; 0xa5
 8007316:	f014 fef2 	bl	801c0fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800731a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800731e:	6879      	ldr	r1, [r7, #4]
 8007320:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007324:	440b      	add	r3, r1
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800732c:	69bb      	ldr	r3, [r7, #24]
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	f003 0307 	and.w	r3, r3, #7
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <prvInitialiseNewTask+0x58>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	617b      	str	r3, [r7, #20]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d01f      	beq.n	800739a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800735a:	2300      	movs	r3, #0
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	e012      	b.n	8007386 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	7819      	ldrb	r1, [r3, #0]
 8007368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	3334      	adds	r3, #52	; 0x34
 8007370:	460a      	mov	r2, r1
 8007372:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	4413      	add	r3, r2
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d006      	beq.n	800738e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	3301      	adds	r3, #1
 8007384:	61fb      	str	r3, [r7, #28]
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	2b0f      	cmp	r3, #15
 800738a:	d9e9      	bls.n	8007360 <prvInitialiseNewTask+0x64>
 800738c:	e000      	b.n	8007390 <prvInitialiseNewTask+0x94>
			{
				break;
 800738e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007398:	e003      	b.n	80073a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80073a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a4:	2b37      	cmp	r3, #55	; 0x37
 80073a6:	d901      	bls.n	80073ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80073a8:	2337      	movs	r3, #55	; 0x37
 80073aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ba:	2200      	movs	r2, #0
 80073bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fe fe56 	bl	8006074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	3318      	adds	r3, #24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fe51 	bl	8006074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	2200      	movs	r2, #0
 80073ec:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2200      	movs	r2, #0
 80073f2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f8:	2200      	movs	r2, #0
 80073fa:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	3358      	adds	r3, #88	; 0x58
 8007402:	224c      	movs	r2, #76	; 0x4c
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f014 fe79 	bl	801c0fe <memset>
 800740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740e:	4a0d      	ldr	r2, [pc, #52]	; (8007444 <prvInitialiseNewTask+0x148>)
 8007410:	65da      	str	r2, [r3, #92]	; 0x5c
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	4a0c      	ldr	r2, [pc, #48]	; (8007448 <prvInitialiseNewTask+0x14c>)
 8007416:	661a      	str	r2, [r3, #96]	; 0x60
 8007418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741a:	4a0c      	ldr	r2, [pc, #48]	; (800744c <prvInitialiseNewTask+0x150>)
 800741c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	68f9      	ldr	r1, [r7, #12]
 8007422:	69b8      	ldr	r0, [r7, #24]
 8007424:	f001 fa42 	bl	80088ac <pxPortInitialiseStack>
 8007428:	4602      	mov	r2, r0
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800742e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007436:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800743a:	bf00      	nop
 800743c:	3720      	adds	r7, #32
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	2401b2ec 	.word	0x2401b2ec
 8007448:	2401b354 	.word	0x2401b354
 800744c:	2401b3bc 	.word	0x2401b3bc

08007450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007458:	f001 fb54 	bl	8008b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800745c:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <prvAddNewTaskToReadyList+0xc4>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	3301      	adds	r3, #1
 8007462:	4a2c      	ldr	r2, [pc, #176]	; (8007514 <prvAddNewTaskToReadyList+0xc4>)
 8007464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007466:	4b2c      	ldr	r3, [pc, #176]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d109      	bne.n	8007482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800746e:	4a2a      	ldr	r2, [pc, #168]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007474:	4b27      	ldr	r3, [pc, #156]	; (8007514 <prvAddNewTaskToReadyList+0xc4>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d110      	bne.n	800749e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800747c:	f000 fc28 	bl	8007cd0 <prvInitialiseTaskLists>
 8007480:	e00d      	b.n	800749e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007482:	4b26      	ldr	r3, [pc, #152]	; (800751c <prvAddNewTaskToReadyList+0xcc>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800748a:	4b23      	ldr	r3, [pc, #140]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	429a      	cmp	r2, r3
 8007496:	d802      	bhi.n	800749e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007498:	4a1f      	ldr	r2, [pc, #124]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800749e:	4b20      	ldr	r3, [pc, #128]	; (8007520 <prvAddNewTaskToReadyList+0xd0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <prvAddNewTaskToReadyList+0xd0>)
 80074a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80074a8:	4b1d      	ldr	r3, [pc, #116]	; (8007520 <prvAddNewTaskToReadyList+0xd0>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b4:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <prvAddNewTaskToReadyList+0xd4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d903      	bls.n	80074c4 <prvAddNewTaskToReadyList+0x74>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	4a18      	ldr	r2, [pc, #96]	; (8007524 <prvAddNewTaskToReadyList+0xd4>)
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4a15      	ldr	r2, [pc, #84]	; (8007528 <prvAddNewTaskToReadyList+0xd8>)
 80074d2:	441a      	add	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f7fe fdd7 	bl	800608e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074e0:	f001 fb40 	bl	8008b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074e4:	4b0d      	ldr	r3, [pc, #52]	; (800751c <prvAddNewTaskToReadyList+0xcc>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074ec:	4b0a      	ldr	r3, [pc, #40]	; (8007518 <prvAddNewTaskToReadyList+0xc8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d207      	bcs.n	800750a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074fa:	4b0c      	ldr	r3, [pc, #48]	; (800752c <prvAddNewTaskToReadyList+0xdc>)
 80074fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	24000f90 	.word	0x24000f90
 8007518:	24000abc 	.word	0x24000abc
 800751c:	24000f9c 	.word	0x24000f9c
 8007520:	24000fac 	.word	0x24000fac
 8007524:	24000f98 	.word	0x24000f98
 8007528:	24000ac0 	.word	0x24000ac0
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d017      	beq.n	8007572 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007542:	4b13      	ldr	r3, [pc, #76]	; (8007590 <vTaskDelay+0x60>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <vTaskDelay+0x30>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	60bb      	str	r3, [r7, #8]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007560:	f000 f88a 	bl	8007678 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007564:	2100      	movs	r1, #0
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 fdfe 	bl	8008168 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800756c:	f000 f892 	bl	8007694 <xTaskResumeAll>
 8007570:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d107      	bne.n	8007588 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <vTaskDelay+0x64>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007588:	bf00      	nop
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	24000fb8 	.word	0x24000fb8
 8007594:	e000ed04 	.word	0xe000ed04

08007598 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80075a6:	463a      	mov	r2, r7
 80075a8:	1d39      	adds	r1, r7, #4
 80075aa:	f107 0308 	add.w	r3, r7, #8
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd0c 	bl	8005fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80075b4:	6839      	ldr	r1, [r7, #0]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	9202      	str	r2, [sp, #8]
 80075bc:	9301      	str	r3, [sp, #4]
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	460a      	mov	r2, r1
 80075c6:	4924      	ldr	r1, [pc, #144]	; (8007658 <vTaskStartScheduler+0xc0>)
 80075c8:	4824      	ldr	r0, [pc, #144]	; (800765c <vTaskStartScheduler+0xc4>)
 80075ca:	f7ff fdf5 	bl	80071b8 <xTaskCreateStatic>
 80075ce:	4603      	mov	r3, r0
 80075d0:	4a23      	ldr	r2, [pc, #140]	; (8007660 <vTaskStartScheduler+0xc8>)
 80075d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80075d4:	4b22      	ldr	r3, [pc, #136]	; (8007660 <vTaskStartScheduler+0xc8>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075dc:	2301      	movs	r3, #1
 80075de:	617b      	str	r3, [r7, #20]
 80075e0:	e001      	b.n	80075e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075e2:	2300      	movs	r3, #0
 80075e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d102      	bne.n	80075f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075ec:	f000 fe10 	bl	8008210 <xTimerCreateTimerTask>
 80075f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d11b      	bne.n	8007630 <vTaskStartScheduler+0x98>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	613b      	str	r3, [r7, #16]
}
 800760a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800760c:	4b15      	ldr	r3, [pc, #84]	; (8007664 <vTaskStartScheduler+0xcc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3358      	adds	r3, #88	; 0x58
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <vTaskStartScheduler+0xd0>)
 8007614:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <vTaskStartScheduler+0xd4>)
 8007618:	f04f 32ff 	mov.w	r2, #4294967295
 800761c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800761e:	4b14      	ldr	r3, [pc, #80]	; (8007670 <vTaskStartScheduler+0xd8>)
 8007620:	2201      	movs	r2, #1
 8007622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <vTaskStartScheduler+0xdc>)
 8007626:	2200      	movs	r2, #0
 8007628:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800762a:	f001 f9c9 	bl	80089c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800762e:	e00e      	b.n	800764e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d10a      	bne.n	800764e <vTaskStartScheduler+0xb6>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60fb      	str	r3, [r7, #12]
}
 800764a:	bf00      	nop
 800764c:	e7fe      	b.n	800764c <vTaskStartScheduler+0xb4>
}
 800764e:	bf00      	nop
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	0801ce24 	.word	0x0801ce24
 800765c:	08007c9d 	.word	0x08007c9d
 8007660:	24000fb4 	.word	0x24000fb4
 8007664:	24000abc 	.word	0x24000abc
 8007668:	240000d8 	.word	0x240000d8
 800766c:	24000fb0 	.word	0x24000fb0
 8007670:	24000f9c 	.word	0x24000f9c
 8007674:	24000f94 	.word	0x24000f94

08007678 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800767c:	4b04      	ldr	r3, [pc, #16]	; (8007690 <vTaskSuspendAll+0x18>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3301      	adds	r3, #1
 8007682:	4a03      	ldr	r2, [pc, #12]	; (8007690 <vTaskSuspendAll+0x18>)
 8007684:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007686:	bf00      	nop
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr
 8007690:	24000fb8 	.word	0x24000fb8

08007694 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80076a2:	4b42      	ldr	r3, [pc, #264]	; (80077ac <xTaskResumeAll+0x118>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10a      	bne.n	80076c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	603b      	str	r3, [r7, #0]
}
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80076c0:	f001 fa20 	bl	8008b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80076c4:	4b39      	ldr	r3, [pc, #228]	; (80077ac <xTaskResumeAll+0x118>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3b01      	subs	r3, #1
 80076ca:	4a38      	ldr	r2, [pc, #224]	; (80077ac <xTaskResumeAll+0x118>)
 80076cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ce:	4b37      	ldr	r3, [pc, #220]	; (80077ac <xTaskResumeAll+0x118>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d162      	bne.n	800779c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80076d6:	4b36      	ldr	r3, [pc, #216]	; (80077b0 <xTaskResumeAll+0x11c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d05e      	beq.n	800779c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076de:	e02f      	b.n	8007740 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e0:	4b34      	ldr	r3, [pc, #208]	; (80077b4 <xTaskResumeAll+0x120>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3318      	adds	r3, #24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fd2b 	bl	8006148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3304      	adds	r3, #4
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7fe fd26 	bl	8006148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	4b2d      	ldr	r3, [pc, #180]	; (80077b8 <xTaskResumeAll+0x124>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d903      	bls.n	8007710 <xTaskResumeAll+0x7c>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	4a2a      	ldr	r2, [pc, #168]	; (80077b8 <xTaskResumeAll+0x124>)
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	4a27      	ldr	r2, [pc, #156]	; (80077bc <xTaskResumeAll+0x128>)
 800771e:	441a      	add	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3304      	adds	r3, #4
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	f7fe fcb1 	bl	800608e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007730:	4b23      	ldr	r3, [pc, #140]	; (80077c0 <xTaskResumeAll+0x12c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007736:	429a      	cmp	r2, r3
 8007738:	d302      	bcc.n	8007740 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800773a:	4b22      	ldr	r3, [pc, #136]	; (80077c4 <xTaskResumeAll+0x130>)
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007740:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <xTaskResumeAll+0x120>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1cb      	bne.n	80076e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800774e:	f000 fb61 	bl	8007e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007752:	4b1d      	ldr	r3, [pc, #116]	; (80077c8 <xTaskResumeAll+0x134>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d010      	beq.n	8007780 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800775e:	f000 f847 	bl	80077f0 <xTaskIncrementTick>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d002      	beq.n	800776e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007768:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <xTaskResumeAll+0x130>)
 800776a:	2201      	movs	r2, #1
 800776c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3b01      	subs	r3, #1
 8007772:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f1      	bne.n	800775e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800777a:	4b13      	ldr	r3, [pc, #76]	; (80077c8 <xTaskResumeAll+0x134>)
 800777c:	2200      	movs	r2, #0
 800777e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007780:	4b10      	ldr	r3, [pc, #64]	; (80077c4 <xTaskResumeAll+0x130>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007788:	2301      	movs	r3, #1
 800778a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800778c:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <xTaskResumeAll+0x138>)
 800778e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800779c:	f001 f9e2 	bl	8008b64 <vPortExitCritical>

	return xAlreadyYielded;
 80077a0:	68bb      	ldr	r3, [r7, #8]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	24000fb8 	.word	0x24000fb8
 80077b0:	24000f90 	.word	0x24000f90
 80077b4:	24000f50 	.word	0x24000f50
 80077b8:	24000f98 	.word	0x24000f98
 80077bc:	24000ac0 	.word	0x24000ac0
 80077c0:	24000abc 	.word	0x24000abc
 80077c4:	24000fa4 	.word	0x24000fa4
 80077c8:	24000fa0 	.word	0x24000fa0
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80077d6:	4b05      	ldr	r3, [pc, #20]	; (80077ec <xTaskGetTickCount+0x1c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80077dc:	687b      	ldr	r3, [r7, #4]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr
 80077ea:	bf00      	nop
 80077ec:	24000f94 	.word	0x24000f94

080077f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b086      	sub	sp, #24
 80077f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077fa:	4b4f      	ldr	r3, [pc, #316]	; (8007938 <xTaskIncrementTick+0x148>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f040 808f 	bne.w	8007922 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007804:	4b4d      	ldr	r3, [pc, #308]	; (800793c <xTaskIncrementTick+0x14c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800780c:	4a4b      	ldr	r2, [pc, #300]	; (800793c <xTaskIncrementTick+0x14c>)
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d120      	bne.n	800785a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007818:	4b49      	ldr	r3, [pc, #292]	; (8007940 <xTaskIncrementTick+0x150>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <xTaskIncrementTick+0x48>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	603b      	str	r3, [r7, #0]
}
 8007834:	bf00      	nop
 8007836:	e7fe      	b.n	8007836 <xTaskIncrementTick+0x46>
 8007838:	4b41      	ldr	r3, [pc, #260]	; (8007940 <xTaskIncrementTick+0x150>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]
 800783e:	4b41      	ldr	r3, [pc, #260]	; (8007944 <xTaskIncrementTick+0x154>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a3f      	ldr	r2, [pc, #252]	; (8007940 <xTaskIncrementTick+0x150>)
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	4a3f      	ldr	r2, [pc, #252]	; (8007944 <xTaskIncrementTick+0x154>)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	4b3e      	ldr	r3, [pc, #248]	; (8007948 <xTaskIncrementTick+0x158>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	4a3d      	ldr	r2, [pc, #244]	; (8007948 <xTaskIncrementTick+0x158>)
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	f000 fadd 	bl	8007e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800785a:	4b3c      	ldr	r3, [pc, #240]	; (800794c <xTaskIncrementTick+0x15c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	429a      	cmp	r2, r3
 8007862:	d349      	bcc.n	80078f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007864:	4b36      	ldr	r3, [pc, #216]	; (8007940 <xTaskIncrementTick+0x150>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786e:	4b37      	ldr	r3, [pc, #220]	; (800794c <xTaskIncrementTick+0x15c>)
 8007870:	f04f 32ff 	mov.w	r2, #4294967295
 8007874:	601a      	str	r2, [r3, #0]
					break;
 8007876:	e03f      	b.n	80078f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007878:	4b31      	ldr	r3, [pc, #196]	; (8007940 <xTaskIncrementTick+0x150>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d203      	bcs.n	8007898 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007890:	4a2e      	ldr	r2, [pc, #184]	; (800794c <xTaskIncrementTick+0x15c>)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007896:	e02f      	b.n	80078f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	3304      	adds	r3, #4
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fc53 	bl	8006148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d004      	beq.n	80078b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	3318      	adds	r3, #24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7fe fc4a 	bl	8006148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b8:	4b25      	ldr	r3, [pc, #148]	; (8007950 <xTaskIncrementTick+0x160>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d903      	bls.n	80078c8 <xTaskIncrementTick+0xd8>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c4:	4a22      	ldr	r2, [pc, #136]	; (8007950 <xTaskIncrementTick+0x160>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	4613      	mov	r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4a1f      	ldr	r2, [pc, #124]	; (8007954 <xTaskIncrementTick+0x164>)
 80078d6:	441a      	add	r2, r3
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	3304      	adds	r3, #4
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f7fe fbd5 	bl	800608e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e8:	4b1b      	ldr	r3, [pc, #108]	; (8007958 <xTaskIncrementTick+0x168>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d3b8      	bcc.n	8007864 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80078f2:	2301      	movs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078f6:	e7b5      	b.n	8007864 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80078f8:	4b17      	ldr	r3, [pc, #92]	; (8007958 <xTaskIncrementTick+0x168>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078fe:	4915      	ldr	r1, [pc, #84]	; (8007954 <xTaskIncrementTick+0x164>)
 8007900:	4613      	mov	r3, r2
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	4413      	add	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d901      	bls.n	8007914 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007910:	2301      	movs	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007914:	4b11      	ldr	r3, [pc, #68]	; (800795c <xTaskIncrementTick+0x16c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e004      	b.n	800792c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007922:	4b0f      	ldr	r3, [pc, #60]	; (8007960 <xTaskIncrementTick+0x170>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	3301      	adds	r3, #1
 8007928:	4a0d      	ldr	r2, [pc, #52]	; (8007960 <xTaskIncrementTick+0x170>)
 800792a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800792c:	697b      	ldr	r3, [r7, #20]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	24000fb8 	.word	0x24000fb8
 800793c:	24000f94 	.word	0x24000f94
 8007940:	24000f48 	.word	0x24000f48
 8007944:	24000f4c 	.word	0x24000f4c
 8007948:	24000fa8 	.word	0x24000fa8
 800794c:	24000fb0 	.word	0x24000fb0
 8007950:	24000f98 	.word	0x24000f98
 8007954:	24000ac0 	.word	0x24000ac0
 8007958:	24000abc 	.word	0x24000abc
 800795c:	24000fa4 	.word	0x24000fa4
 8007960:	24000fa0 	.word	0x24000fa0

08007964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800796a:	4b2a      	ldr	r3, [pc, #168]	; (8007a14 <vTaskSwitchContext+0xb0>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007972:	4b29      	ldr	r3, [pc, #164]	; (8007a18 <vTaskSwitchContext+0xb4>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007978:	e046      	b.n	8007a08 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800797a:	4b27      	ldr	r3, [pc, #156]	; (8007a18 <vTaskSwitchContext+0xb4>)
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007980:	4b26      	ldr	r3, [pc, #152]	; (8007a1c <vTaskSwitchContext+0xb8>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60fb      	str	r3, [r7, #12]
 8007986:	e010      	b.n	80079aa <vTaskSwitchContext+0x46>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	607b      	str	r3, [r7, #4]
}
 80079a0:	bf00      	nop
 80079a2:	e7fe      	b.n	80079a2 <vTaskSwitchContext+0x3e>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	491d      	ldr	r1, [pc, #116]	; (8007a20 <vTaskSwitchContext+0xbc>)
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	4613      	mov	r3, r2
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0e4      	beq.n	8007988 <vTaskSwitchContext+0x24>
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4a15      	ldr	r2, [pc, #84]	; (8007a20 <vTaskSwitchContext+0xbc>)
 80079ca:	4413      	add	r3, r2
 80079cc:	60bb      	str	r3, [r7, #8]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	605a      	str	r2, [r3, #4]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	3308      	adds	r3, #8
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d104      	bne.n	80079ee <vTaskSwitchContext+0x8a>
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	4a0b      	ldr	r2, [pc, #44]	; (8007a24 <vTaskSwitchContext+0xc0>)
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <vTaskSwitchContext+0xb8>)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80079fe:	4b09      	ldr	r3, [pc, #36]	; (8007a24 <vTaskSwitchContext+0xc0>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3358      	adds	r3, #88	; 0x58
 8007a04:	4a08      	ldr	r2, [pc, #32]	; (8007a28 <vTaskSwitchContext+0xc4>)
 8007a06:	6013      	str	r3, [r2, #0]
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	24000fb8 	.word	0x24000fb8
 8007a18:	24000fa4 	.word	0x24000fa4
 8007a1c:	24000f98 	.word	0x24000f98
 8007a20:	24000ac0 	.word	0x24000ac0
 8007a24:	24000abc 	.word	0x24000abc
 8007a28:	240000d8 	.word	0x240000d8

08007a2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10a      	bne.n	8007a52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	60fb      	str	r3, [r7, #12]
}
 8007a4e:	bf00      	nop
 8007a50:	e7fe      	b.n	8007a50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a52:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <vTaskPlaceOnEventList+0x44>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3318      	adds	r3, #24
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fe fb3b 	bl	80060d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007a60:	2101      	movs	r1, #1
 8007a62:	6838      	ldr	r0, [r7, #0]
 8007a64:	f000 fb80 	bl	8008168 <prvAddCurrentTaskToDelayedList>
}
 8007a68:	bf00      	nop
 8007a6a:	3710      	adds	r7, #16
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	24000abc 	.word	0x24000abc

08007a74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10a      	bne.n	8007a9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8a:	f383 8811 	msr	BASEPRI, r3
 8007a8e:	f3bf 8f6f 	isb	sy
 8007a92:	f3bf 8f4f 	dsb	sy
 8007a96:	617b      	str	r3, [r7, #20]
}
 8007a98:	bf00      	nop
 8007a9a:	e7fe      	b.n	8007a9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3318      	adds	r3, #24
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7fe faf2 	bl	800608e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ab4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	68b8      	ldr	r0, [r7, #8]
 8007aba:	f000 fb55 	bl	8008168 <prvAddCurrentTaskToDelayedList>
	}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	24000abc 	.word	0x24000abc

08007acc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60fb      	str	r3, [r7, #12]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	3318      	adds	r3, #24
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fe fb23 	bl	8006148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b02:	4b1e      	ldr	r3, [pc, #120]	; (8007b7c <xTaskRemoveFromEventList+0xb0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d11d      	bne.n	8007b46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fe fb1a 	bl	8006148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	4b19      	ldr	r3, [pc, #100]	; (8007b80 <xTaskRemoveFromEventList+0xb4>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d903      	bls.n	8007b28 <xTaskRemoveFromEventList+0x5c>
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <xTaskRemoveFromEventList+0xb4>)
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	4a13      	ldr	r2, [pc, #76]	; (8007b84 <xTaskRemoveFromEventList+0xb8>)
 8007b36:	441a      	add	r2, r3
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f7fe faa5 	bl	800608e <vListInsertEnd>
 8007b44:	e005      	b.n	8007b52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3318      	adds	r3, #24
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	480e      	ldr	r0, [pc, #56]	; (8007b88 <xTaskRemoveFromEventList+0xbc>)
 8007b4e:	f7fe fa9e 	bl	800608e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <xTaskRemoveFromEventList+0xc0>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d905      	bls.n	8007b6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007b64:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <xTaskRemoveFromEventList+0xc4>)
 8007b66:	2201      	movs	r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	e001      	b.n	8007b70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b70:	697b      	ldr	r3, [r7, #20]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	24000fb8 	.word	0x24000fb8
 8007b80:	24000f98 	.word	0x24000f98
 8007b84:	24000ac0 	.word	0x24000ac0
 8007b88:	24000f50 	.word	0x24000f50
 8007b8c:	24000abc 	.word	0x24000abc
 8007b90:	24000fa4 	.word	0x24000fa4

08007b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b9c:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <vTaskInternalSetTimeOutState+0x24>)
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ba4:	4b05      	ldr	r3, [pc, #20]	; (8007bbc <vTaskInternalSetTimeOutState+0x28>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	605a      	str	r2, [r3, #4]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	24000fa8 	.word	0x24000fa8
 8007bbc:	24000f94 	.word	0x24000f94

08007bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b088      	sub	sp, #32
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	613b      	str	r3, [r7, #16]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60fb      	str	r3, [r7, #12]
}
 8007bfe:	bf00      	nop
 8007c00:	e7fe      	b.n	8007c00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007c02:	f000 ff7f 	bl	8008b04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007c06:	4b1d      	ldr	r3, [pc, #116]	; (8007c7c <xTaskCheckForTimeOut+0xbc>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1e:	d102      	bne.n	8007c26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
 8007c24:	e023      	b.n	8007c6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	4b15      	ldr	r3, [pc, #84]	; (8007c80 <xTaskCheckForTimeOut+0xc0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d007      	beq.n	8007c42 <xTaskCheckForTimeOut+0x82>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	69ba      	ldr	r2, [r7, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d302      	bcc.n	8007c42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	61fb      	str	r3, [r7, #28]
 8007c40:	e015      	b.n	8007c6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d20b      	bcs.n	8007c64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	1ad2      	subs	r2, r2, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff ff9b 	bl	8007b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61fb      	str	r3, [r7, #28]
 8007c62:	e004      	b.n	8007c6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	2200      	movs	r2, #0
 8007c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c6e:	f000 ff79 	bl	8008b64 <vPortExitCritical>

	return xReturn;
 8007c72:	69fb      	ldr	r3, [r7, #28]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3720      	adds	r7, #32
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	24000f94 	.word	0x24000f94
 8007c80:	24000fa8 	.word	0x24000fa8

08007c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c88:	4b03      	ldr	r3, [pc, #12]	; (8007c98 <vTaskMissedYield+0x14>)
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	601a      	str	r2, [r3, #0]
}
 8007c8e:	bf00      	nop
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	24000fa4 	.word	0x24000fa4

08007c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ca4:	f000 f854 	bl	8007d50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ca8:	4b07      	ldr	r3, [pc, #28]	; (8007cc8 <prvIdleTask+0x2c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d907      	bls.n	8007cc0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007cb0:	4b06      	ldr	r3, [pc, #24]	; (8007ccc <prvIdleTask+0x30>)
 8007cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007cc0:	f7f8 fb66 	bl	8000390 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007cc4:	e7ee      	b.n	8007ca4 <prvIdleTask+0x8>
 8007cc6:	bf00      	nop
 8007cc8:	24000ac0 	.word	0x24000ac0
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	607b      	str	r3, [r7, #4]
 8007cda:	e00c      	b.n	8007cf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	4a12      	ldr	r2, [pc, #72]	; (8007d30 <prvInitialiseTaskLists+0x60>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7fe f9a2 	bl	8006034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b37      	cmp	r3, #55	; 0x37
 8007cfa:	d9ef      	bls.n	8007cdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cfc:	480d      	ldr	r0, [pc, #52]	; (8007d34 <prvInitialiseTaskLists+0x64>)
 8007cfe:	f7fe f999 	bl	8006034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d02:	480d      	ldr	r0, [pc, #52]	; (8007d38 <prvInitialiseTaskLists+0x68>)
 8007d04:	f7fe f996 	bl	8006034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d08:	480c      	ldr	r0, [pc, #48]	; (8007d3c <prvInitialiseTaskLists+0x6c>)
 8007d0a:	f7fe f993 	bl	8006034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d0e:	480c      	ldr	r0, [pc, #48]	; (8007d40 <prvInitialiseTaskLists+0x70>)
 8007d10:	f7fe f990 	bl	8006034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d14:	480b      	ldr	r0, [pc, #44]	; (8007d44 <prvInitialiseTaskLists+0x74>)
 8007d16:	f7fe f98d 	bl	8006034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d1a:	4b0b      	ldr	r3, [pc, #44]	; (8007d48 <prvInitialiseTaskLists+0x78>)
 8007d1c:	4a05      	ldr	r2, [pc, #20]	; (8007d34 <prvInitialiseTaskLists+0x64>)
 8007d1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	; (8007d4c <prvInitialiseTaskLists+0x7c>)
 8007d22:	4a05      	ldr	r2, [pc, #20]	; (8007d38 <prvInitialiseTaskLists+0x68>)
 8007d24:	601a      	str	r2, [r3, #0]
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	24000ac0 	.word	0x24000ac0
 8007d34:	24000f20 	.word	0x24000f20
 8007d38:	24000f34 	.word	0x24000f34
 8007d3c:	24000f50 	.word	0x24000f50
 8007d40:	24000f64 	.word	0x24000f64
 8007d44:	24000f7c 	.word	0x24000f7c
 8007d48:	24000f48 	.word	0x24000f48
 8007d4c:	24000f4c 	.word	0x24000f4c

08007d50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d56:	e019      	b.n	8007d8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d58:	f000 fed4 	bl	8008b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5c:	4b10      	ldr	r3, [pc, #64]	; (8007da0 <prvCheckTasksWaitingTermination+0x50>)
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe f9ed 	bl	8006148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	; (8007da4 <prvCheckTasksWaitingTermination+0x54>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	4a0b      	ldr	r2, [pc, #44]	; (8007da4 <prvCheckTasksWaitingTermination+0x54>)
 8007d76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d78:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <prvCheckTasksWaitingTermination+0x58>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4a0a      	ldr	r2, [pc, #40]	; (8007da8 <prvCheckTasksWaitingTermination+0x58>)
 8007d80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d82:	f000 feef 	bl	8008b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f810 	bl	8007dac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d8c:	4b06      	ldr	r3, [pc, #24]	; (8007da8 <prvCheckTasksWaitingTermination+0x58>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e1      	bne.n	8007d58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d94:	bf00      	nop
 8007d96:	bf00      	nop
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}
 8007d9e:	bf00      	nop
 8007da0:	24000f64 	.word	0x24000f64
 8007da4:	24000f90 	.word	0x24000f90
 8007da8:	24000f78 	.word	0x24000f78

08007dac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3358      	adds	r3, #88	; 0x58
 8007db8:	4618      	mov	r0, r3
 8007dba:	f014 f9e9 	bl	801c190 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d108      	bne.n	8007dda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f001 f887 	bl	8008ee0 <vPortFree>
				vPortFree( pxTCB );
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f001 f884 	bl	8008ee0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007dd8:	e018      	b.n	8007e0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d103      	bne.n	8007dec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 f87b 	bl	8008ee0 <vPortFree>
	}
 8007dea:	e00f      	b.n	8007e0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d00a      	beq.n	8007e0c <prvDeleteTCB+0x60>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60fb      	str	r3, [r7, #12]
}
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <prvDeleteTCB+0x5e>
	}
 8007e0c:	bf00      	nop
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	; (8007e4c <prvResetNextTaskUnblockTime+0x38>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e24:	4b0a      	ldr	r3, [pc, #40]	; (8007e50 <prvResetNextTaskUnblockTime+0x3c>)
 8007e26:	f04f 32ff 	mov.w	r2, #4294967295
 8007e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e2c:	e008      	b.n	8007e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <prvResetNextTaskUnblockTime+0x38>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <prvResetNextTaskUnblockTime+0x3c>)
 8007e3e:	6013      	str	r3, [r2, #0]
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	24000f48 	.word	0x24000f48
 8007e50:	24000fb0 	.word	0x24000fb0

08007e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <xTaskGetSchedulerState+0x34>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d102      	bne.n	8007e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e62:	2301      	movs	r3, #1
 8007e64:	607b      	str	r3, [r7, #4]
 8007e66:	e008      	b.n	8007e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e68:	4b08      	ldr	r3, [pc, #32]	; (8007e8c <xTaskGetSchedulerState+0x38>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e70:	2302      	movs	r3, #2
 8007e72:	607b      	str	r3, [r7, #4]
 8007e74:	e001      	b.n	8007e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e76:	2300      	movs	r3, #0
 8007e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e7a:	687b      	ldr	r3, [r7, #4]
	}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	370c      	adds	r7, #12
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	24000f9c 	.word	0x24000f9c
 8007e8c:	24000fb8 	.word	0x24000fb8

08007e90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d051      	beq.n	8007f4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eaa:	4b2a      	ldr	r3, [pc, #168]	; (8007f54 <xTaskPriorityInherit+0xc4>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d241      	bcs.n	8007f38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	db06      	blt.n	8007eca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebc:	4b25      	ldr	r3, [pc, #148]	; (8007f54 <xTaskPriorityInherit+0xc4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	6959      	ldr	r1, [r3, #20]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4a1f      	ldr	r2, [pc, #124]	; (8007f58 <xTaskPriorityInherit+0xc8>)
 8007edc:	4413      	add	r3, r2
 8007ede:	4299      	cmp	r1, r3
 8007ee0:	d122      	bne.n	8007f28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7fe f92e 	bl	8006148 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007eec:	4b19      	ldr	r3, [pc, #100]	; (8007f54 <xTaskPriorityInherit+0xc4>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <xTaskPriorityInherit+0xcc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d903      	bls.n	8007f0a <xTaskPriorityInherit+0x7a>
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f06:	4a15      	ldr	r2, [pc, #84]	; (8007f5c <xTaskPriorityInherit+0xcc>)
 8007f08:	6013      	str	r3, [r2, #0]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	4613      	mov	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4413      	add	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <xTaskPriorityInherit+0xc8>)
 8007f18:	441a      	add	r2, r3
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7fe f8b4 	bl	800608e <vListInsertEnd>
 8007f26:	e004      	b.n	8007f32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <xTaskPriorityInherit+0xc4>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	e008      	b.n	8007f4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <xTaskPriorityInherit+0xc4>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d201      	bcs.n	8007f4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f46:	2301      	movs	r3, #1
 8007f48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
	}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	24000abc 	.word	0x24000abc
 8007f58:	24000ac0 	.word	0x24000ac0
 8007f5c:	24000f98 	.word	0x24000f98

08007f60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d056      	beq.n	8008024 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f76:	4b2e      	ldr	r3, [pc, #184]	; (8008030 <xTaskPriorityDisinherit+0xd0>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d00a      	beq.n	8007f96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d10a      	bne.n	8007fb4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60bb      	str	r3, [r7, #8]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fb8:	1e5a      	subs	r2, r3, #1
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d02c      	beq.n	8008024 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d128      	bne.n	8008024 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe f8b6 	bl	8006148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <xTaskPriorityDisinherit+0xd4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d903      	bls.n	8008004 <xTaskPriorityDisinherit+0xa4>
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008000:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <xTaskPriorityDisinherit+0xd4>)
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	4613      	mov	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4a09      	ldr	r2, [pc, #36]	; (8008038 <xTaskPriorityDisinherit+0xd8>)
 8008012:	441a      	add	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	3304      	adds	r3, #4
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f7fe f837 	bl	800608e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008020:	2301      	movs	r3, #1
 8008022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008024:	697b      	ldr	r3, [r7, #20]
	}
 8008026:	4618      	mov	r0, r3
 8008028:	3718      	adds	r7, #24
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	24000abc 	.word	0x24000abc
 8008034:	24000f98 	.word	0x24000f98
 8008038:	24000ac0 	.word	0x24000ac0

0800803c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800804a:	2301      	movs	r3, #1
 800804c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d06a      	beq.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10a      	bne.n	8008072 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60fb      	str	r3, [r7, #12]
}
 800806e:	bf00      	nop
 8008070:	e7fe      	b.n	8008070 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d902      	bls.n	8008082 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	e002      	b.n	8008088 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008086:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	69fa      	ldr	r2, [r7, #28]
 800808e:	429a      	cmp	r2, r3
 8008090:	d04b      	beq.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	429a      	cmp	r2, r3
 800809a:	d146      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800809c:	4b25      	ldr	r3, [pc, #148]	; (8008134 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d10a      	bne.n	80080bc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60bb      	str	r3, [r7, #8]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	69fa      	ldr	r2, [r7, #28]
 80080c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	db04      	blt.n	80080da <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	6959      	ldr	r1, [r3, #20]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4a13      	ldr	r2, [pc, #76]	; (8008138 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80080ea:	4413      	add	r3, r2
 80080ec:	4299      	cmp	r1, r3
 80080ee:	d11c      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7fe f827 	bl	8006148 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	429a      	cmp	r2, r3
 8008104:	d903      	bls.n	800810e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	4a0c      	ldr	r2, [pc, #48]	; (800813c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4a07      	ldr	r2, [pc, #28]	; (8008138 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800811c:	441a      	add	r2, r3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	4610      	mov	r0, r2
 8008126:	f7fd ffb2 	bl	800608e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800812a:	bf00      	nop
 800812c:	3720      	adds	r7, #32
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	24000abc 	.word	0x24000abc
 8008138:	24000ac0 	.word	0x24000ac0
 800813c:	24000f98 	.word	0x24000f98

08008140 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008140:	b480      	push	{r7}
 8008142:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008144:	4b07      	ldr	r3, [pc, #28]	; (8008164 <pvTaskIncrementMutexHeldCount+0x24>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d004      	beq.n	8008156 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <pvTaskIncrementMutexHeldCount+0x24>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008152:	3201      	adds	r2, #1
 8008154:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <pvTaskIncrementMutexHeldCount+0x24>)
 8008158:	681b      	ldr	r3, [r3, #0]
	}
 800815a:	4618      	mov	r0, r3
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	24000abc 	.word	0x24000abc

08008168 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008172:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008178:	4b20      	ldr	r3, [pc, #128]	; (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3304      	adds	r3, #4
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd ffe2 	bl	8006148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d10a      	bne.n	80081a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d007      	beq.n	80081a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008192:	4b1a      	ldr	r3, [pc, #104]	; (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3304      	adds	r3, #4
 8008198:	4619      	mov	r1, r3
 800819a:	4819      	ldr	r0, [pc, #100]	; (8008200 <prvAddCurrentTaskToDelayedList+0x98>)
 800819c:	f7fd ff77 	bl	800608e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081a0:	e026      	b.n	80081f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4413      	add	r3, r2
 80081a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081aa:	4b14      	ldr	r3, [pc, #80]	; (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d209      	bcs.n	80081ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ba:	4b12      	ldr	r3, [pc, #72]	; (8008204 <prvAddCurrentTaskToDelayedList+0x9c>)
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4619      	mov	r1, r3
 80081c6:	4610      	mov	r0, r2
 80081c8:	f7fd ff85 	bl	80060d6 <vListInsert>
}
 80081cc:	e010      	b.n	80081f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081ce:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <prvAddCurrentTaskToDelayedList+0xa0>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvAddCurrentTaskToDelayedList+0x94>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4619      	mov	r1, r3
 80081da:	4610      	mov	r0, r2
 80081dc:	f7fd ff7b 	bl	80060d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <prvAddCurrentTaskToDelayedList+0xa4>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68ba      	ldr	r2, [r7, #8]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d202      	bcs.n	80081f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80081ea:	4a08      	ldr	r2, [pc, #32]	; (800820c <prvAddCurrentTaskToDelayedList+0xa4>)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	6013      	str	r3, [r2, #0]
}
 80081f0:	bf00      	nop
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	24000f94 	.word	0x24000f94
 80081fc:	24000abc 	.word	0x24000abc
 8008200:	24000f7c 	.word	0x24000f7c
 8008204:	24000f4c 	.word	0x24000f4c
 8008208:	24000f48 	.word	0x24000f48
 800820c:	24000fb0 	.word	0x24000fb0

08008210 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08a      	sub	sp, #40	; 0x28
 8008214:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800821a:	f000 fb07 	bl	800882c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800821e:	4b1c      	ldr	r3, [pc, #112]	; (8008290 <xTimerCreateTimerTask+0x80>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d021      	beq.n	800826a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800822a:	2300      	movs	r3, #0
 800822c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800822e:	1d3a      	adds	r2, r7, #4
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	f107 030c 	add.w	r3, r7, #12
 8008238:	4618      	mov	r0, r3
 800823a:	f7fd fee1 	bl	8006000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	9202      	str	r2, [sp, #8]
 8008246:	9301      	str	r3, [sp, #4]
 8008248:	2302      	movs	r3, #2
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	2300      	movs	r3, #0
 800824e:	460a      	mov	r2, r1
 8008250:	4910      	ldr	r1, [pc, #64]	; (8008294 <xTimerCreateTimerTask+0x84>)
 8008252:	4811      	ldr	r0, [pc, #68]	; (8008298 <xTimerCreateTimerTask+0x88>)
 8008254:	f7fe ffb0 	bl	80071b8 <xTaskCreateStatic>
 8008258:	4603      	mov	r3, r0
 800825a:	4a10      	ldr	r2, [pc, #64]	; (800829c <xTimerCreateTimerTask+0x8c>)
 800825c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <xTimerCreateTimerTask+0x8c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008266:	2301      	movs	r3, #1
 8008268:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10a      	bne.n	8008286 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
}
 8008282:	bf00      	nop
 8008284:	e7fe      	b.n	8008284 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008286:	697b      	ldr	r3, [r7, #20]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	24000fec 	.word	0x24000fec
 8008294:	0801ce2c 	.word	0x0801ce2c
 8008298:	080083d5 	.word	0x080083d5
 800829c:	24000ff0 	.word	0x24000ff0

080082a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08a      	sub	sp, #40	; 0x28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	623b      	str	r3, [r7, #32]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80082ce:	4b1a      	ldr	r3, [pc, #104]	; (8008338 <xTimerGenericCommand+0x98>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d02a      	beq.n	800832c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b05      	cmp	r3, #5
 80082e6:	dc18      	bgt.n	800831a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80082e8:	f7ff fdb4 	bl	8007e54 <xTaskGetSchedulerState>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b02      	cmp	r3, #2
 80082f0:	d109      	bne.n	8008306 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80082f2:	4b11      	ldr	r3, [pc, #68]	; (8008338 <xTimerGenericCommand+0x98>)
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	f107 0110 	add.w	r1, r7, #16
 80082fa:	2300      	movs	r3, #0
 80082fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082fe:	f7fe f8f5 	bl	80064ec <xQueueGenericSend>
 8008302:	6278      	str	r0, [r7, #36]	; 0x24
 8008304:	e012      	b.n	800832c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008306:	4b0c      	ldr	r3, [pc, #48]	; (8008338 <xTimerGenericCommand+0x98>)
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	f107 0110 	add.w	r1, r7, #16
 800830e:	2300      	movs	r3, #0
 8008310:	2200      	movs	r2, #0
 8008312:	f7fe f8eb 	bl	80064ec <xQueueGenericSend>
 8008316:	6278      	str	r0, [r7, #36]	; 0x24
 8008318:	e008      	b.n	800832c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800831a:	4b07      	ldr	r3, [pc, #28]	; (8008338 <xTimerGenericCommand+0x98>)
 800831c:	6818      	ldr	r0, [r3, #0]
 800831e:	f107 0110 	add.w	r1, r7, #16
 8008322:	2300      	movs	r3, #0
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	f7fe f9df 	bl	80066e8 <xQueueGenericSendFromISR>
 800832a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800832c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800832e:	4618      	mov	r0, r3
 8008330:	3728      	adds	r7, #40	; 0x28
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	24000fec 	.word	0x24000fec

0800833c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af02      	add	r7, sp, #8
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008346:	4b22      	ldr	r3, [pc, #136]	; (80083d0 <prvProcessExpiredTimer+0x94>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	3304      	adds	r3, #4
 8008354:	4618      	mov	r0, r3
 8008356:	f7fd fef7 	bl	8006148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d022      	beq.n	80083ae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	18d1      	adds	r1, r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	6978      	ldr	r0, [r7, #20]
 8008376:	f000 f8d1 	bl	800851c <prvInsertTimerInActiveList>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01f      	beq.n	80083c0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008380:	2300      	movs	r3, #0
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	2300      	movs	r3, #0
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	2100      	movs	r1, #0
 800838a:	6978      	ldr	r0, [r7, #20]
 800838c:	f7ff ff88 	bl	80082a0 <xTimerGenericCommand>
 8008390:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d113      	bne.n	80083c0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	60fb      	str	r3, [r7, #12]
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	b2da      	uxtb	r2, r3
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	6978      	ldr	r0, [r7, #20]
 80083c6:	4798      	blx	r3
}
 80083c8:	bf00      	nop
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	24000fe4 	.word	0x24000fe4

080083d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083dc:	f107 0308 	add.w	r3, r7, #8
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 f857 	bl	8008494 <prvGetNextExpireTime>
 80083e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	4619      	mov	r1, r3
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 f803 	bl	80083f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80083f2:	f000 f8d5 	bl	80085a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80083f6:	e7f1      	b.n	80083dc <prvTimerTask+0x8>

080083f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008402:	f7ff f939 	bl	8007678 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008406:	f107 0308 	add.w	r3, r7, #8
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f866 	bl	80084dc <prvSampleTimeNow>
 8008410:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d130      	bne.n	800847a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10a      	bne.n	8008434 <prvProcessTimerOrBlockTask+0x3c>
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	429a      	cmp	r2, r3
 8008424:	d806      	bhi.n	8008434 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008426:	f7ff f935 	bl	8007694 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800842a:	68f9      	ldr	r1, [r7, #12]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff ff85 	bl	800833c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008432:	e024      	b.n	800847e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800843a:	4b13      	ldr	r3, [pc, #76]	; (8008488 <prvProcessTimerOrBlockTask+0x90>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <prvProcessTimerOrBlockTask+0x50>
 8008444:	2301      	movs	r3, #1
 8008446:	e000      	b.n	800844a <prvProcessTimerOrBlockTask+0x52>
 8008448:	2300      	movs	r3, #0
 800844a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800844c:	4b0f      	ldr	r3, [pc, #60]	; (800848c <prvProcessTimerOrBlockTask+0x94>)
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	1ad3      	subs	r3, r2, r3
 8008456:	683a      	ldr	r2, [r7, #0]
 8008458:	4619      	mov	r1, r3
 800845a:	f7fe fe79 	bl	8007150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800845e:	f7ff f919 	bl	8007694 <xTaskResumeAll>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008468:	4b09      	ldr	r3, [pc, #36]	; (8008490 <prvProcessTimerOrBlockTask+0x98>)
 800846a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846e:	601a      	str	r2, [r3, #0]
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	f3bf 8f6f 	isb	sy
}
 8008478:	e001      	b.n	800847e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800847a:	f7ff f90b 	bl	8007694 <xTaskResumeAll>
}
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	24000fe8 	.word	0x24000fe8
 800848c:	24000fec 	.word	0x24000fec
 8008490:	e000ed04 	.word	0xe000ed04

08008494 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800849c:	4b0e      	ldr	r3, [pc, #56]	; (80084d8 <prvGetNextExpireTime+0x44>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d101      	bne.n	80084aa <prvGetNextExpireTime+0x16>
 80084a6:	2201      	movs	r2, #1
 80084a8:	e000      	b.n	80084ac <prvGetNextExpireTime+0x18>
 80084aa:	2200      	movs	r2, #0
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d105      	bne.n	80084c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084b8:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <prvGetNextExpireTime+0x44>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	60fb      	str	r3, [r7, #12]
 80084c2:	e001      	b.n	80084c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80084c8:	68fb      	ldr	r3, [r7, #12]
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	24000fe4 	.word	0x24000fe4

080084dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80084e4:	f7ff f974 	bl	80077d0 <xTaskGetTickCount>
 80084e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <prvSampleTimeNow+0x3c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d205      	bcs.n	8008500 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80084f4:	f000 f936 	bl	8008764 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e002      	b.n	8008506 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008506:	4a04      	ldr	r2, [pc, #16]	; (8008518 <prvSampleTimeNow+0x3c>)
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800850c:	68fb      	ldr	r3, [r7, #12]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop
 8008518:	24000ff4 	.word	0x24000ff4

0800851c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	d812      	bhi.n	8008568 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	429a      	cmp	r2, r3
 800854e:	d302      	bcc.n	8008556 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008550:	2301      	movs	r3, #1
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e01b      	b.n	800858e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008556:	4b10      	ldr	r3, [pc, #64]	; (8008598 <prvInsertTimerInActiveList+0x7c>)
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	3304      	adds	r3, #4
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f7fd fdb8 	bl	80060d6 <vListInsert>
 8008566:	e012      	b.n	800858e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d206      	bcs.n	800857e <prvInsertTimerInActiveList+0x62>
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d302      	bcc.n	800857e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008578:	2301      	movs	r3, #1
 800857a:	617b      	str	r3, [r7, #20]
 800857c:	e007      	b.n	800858e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800857e:	4b07      	ldr	r3, [pc, #28]	; (800859c <prvInsertTimerInActiveList+0x80>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3304      	adds	r3, #4
 8008586:	4619      	mov	r1, r3
 8008588:	4610      	mov	r0, r2
 800858a:	f7fd fda4 	bl	80060d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800858e:	697b      	ldr	r3, [r7, #20]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3718      	adds	r7, #24
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	24000fe8 	.word	0x24000fe8
 800859c:	24000fe4 	.word	0x24000fe4

080085a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b08e      	sub	sp, #56	; 0x38
 80085a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085a6:	e0ca      	b.n	800873e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da18      	bge.n	80085e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80085ae:	1d3b      	adds	r3, r7, #4
 80085b0:	3304      	adds	r3, #4
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10a      	bne.n	80085d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	61fb      	str	r3, [r7, #28]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d6:	6850      	ldr	r0, [r2, #4]
 80085d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085da:	6892      	ldr	r2, [r2, #8]
 80085dc:	4611      	mov	r1, r2
 80085de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f2c0 80ab 	blt.w	800873e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	695b      	ldr	r3, [r3, #20]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	3304      	adds	r3, #4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fd fda5 	bl	8006148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085fe:	463b      	mov	r3, r7
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff ff6b 	bl	80084dc <prvSampleTimeNow>
 8008606:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b09      	cmp	r3, #9
 800860c:	f200 8096 	bhi.w	800873c <prvProcessReceivedCommands+0x19c>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <prvProcessReceivedCommands+0x78>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008641 	.word	0x08008641
 800861c:	08008641 	.word	0x08008641
 8008620:	08008641 	.word	0x08008641
 8008624:	080086b5 	.word	0x080086b5
 8008628:	080086c9 	.word	0x080086c9
 800862c:	08008713 	.word	0x08008713
 8008630:	08008641 	.word	0x08008641
 8008634:	08008641 	.word	0x08008641
 8008638:	080086b5 	.word	0x080086b5
 800863c:	080086c9 	.word	0x080086c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008646:	f043 0301 	orr.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	18d1      	adds	r1, r2, r3
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008660:	f7ff ff5c 	bl	800851c <prvInsertTimerInActiveList>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d069      	beq.n	800873e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800866a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008670:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008678:	f003 0304 	and.w	r3, r3, #4
 800867c:	2b00      	cmp	r3, #0
 800867e:	d05e      	beq.n	800873e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	441a      	add	r2, r3
 8008688:	2300      	movs	r3, #0
 800868a:	9300      	str	r3, [sp, #0]
 800868c:	2300      	movs	r3, #0
 800868e:	2100      	movs	r1, #0
 8008690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008692:	f7ff fe05 	bl	80082a0 <xTimerGenericCommand>
 8008696:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008698:	6a3b      	ldr	r3, [r7, #32]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d14f      	bne.n	800873e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	61bb      	str	r3, [r7, #24]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ba:	f023 0301 	bic.w	r3, r3, #1
 80086be:	b2da      	uxtb	r2, r3
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80086c6:	e03a      	b.n	800873e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ce:	f043 0301 	orr.w	r3, r3, #1
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10a      	bne.n	80086fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	617b      	str	r3, [r7, #20]
}
 80086fa:	bf00      	nop
 80086fc:	e7fe      	b.n	80086fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80086fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	18d1      	adds	r1, r2, r3
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800870c:	f7ff ff06 	bl	800851c <prvInsertTimerInActiveList>
					break;
 8008710:	e015      	b.n	800873e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d103      	bne.n	8008728 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008722:	f000 fbdd 	bl	8008ee0 <vPortFree>
 8008726:	e00a      	b.n	800873e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800872e:	f023 0301 	bic.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800873a:	e000      	b.n	800873e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800873c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800873e:	4b08      	ldr	r3, [pc, #32]	; (8008760 <prvProcessReceivedCommands+0x1c0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	1d39      	adds	r1, r7, #4
 8008744:	2200      	movs	r2, #0
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe f8f6 	bl	8006938 <xQueueReceive>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	f47f af2a 	bne.w	80085a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	3730      	adds	r7, #48	; 0x30
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	24000fec 	.word	0x24000fec

08008764 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b088      	sub	sp, #32
 8008768:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800876a:	e048      	b.n	80087fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800876c:	4b2d      	ldr	r3, [pc, #180]	; (8008824 <prvSwitchTimerLists+0xc0>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008776:	4b2b      	ldr	r3, [pc, #172]	; (8008824 <prvSwitchTimerLists+0xc0>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3304      	adds	r3, #4
 8008784:	4618      	mov	r0, r3
 8008786:	f7fd fcdf 	bl	8006148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a1b      	ldr	r3, [r3, #32]
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d02e      	beq.n	80087fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4413      	add	r3, r2
 80087a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d90e      	bls.n	80087d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087be:	4b19      	ldr	r3, [pc, #100]	; (8008824 <prvSwitchTimerLists+0xc0>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	3304      	adds	r3, #4
 80087c6:	4619      	mov	r1, r3
 80087c8:	4610      	mov	r0, r2
 80087ca:	f7fd fc84 	bl	80060d6 <vListInsert>
 80087ce:	e016      	b.n	80087fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087d0:	2300      	movs	r3, #0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	2300      	movs	r3, #0
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	2100      	movs	r1, #0
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff fd60 	bl	80082a0 <xTimerGenericCommand>
 80087e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	603b      	str	r3, [r7, #0]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087fe:	4b09      	ldr	r3, [pc, #36]	; (8008824 <prvSwitchTimerLists+0xc0>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1b1      	bne.n	800876c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008808:	4b06      	ldr	r3, [pc, #24]	; (8008824 <prvSwitchTimerLists+0xc0>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <prvSwitchTimerLists+0xc4>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a04      	ldr	r2, [pc, #16]	; (8008824 <prvSwitchTimerLists+0xc0>)
 8008814:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008816:	4a04      	ldr	r2, [pc, #16]	; (8008828 <prvSwitchTimerLists+0xc4>)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6013      	str	r3, [r2, #0]
}
 800881c:	bf00      	nop
 800881e:	3718      	adds	r7, #24
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	24000fe4 	.word	0x24000fe4
 8008828:	24000fe8 	.word	0x24000fe8

0800882c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008832:	f000 f967 	bl	8008b04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008836:	4b15      	ldr	r3, [pc, #84]	; (800888c <prvCheckForValidListAndQueue+0x60>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d120      	bne.n	8008880 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800883e:	4814      	ldr	r0, [pc, #80]	; (8008890 <prvCheckForValidListAndQueue+0x64>)
 8008840:	f7fd fbf8 	bl	8006034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008844:	4813      	ldr	r0, [pc, #76]	; (8008894 <prvCheckForValidListAndQueue+0x68>)
 8008846:	f7fd fbf5 	bl	8006034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800884a:	4b13      	ldr	r3, [pc, #76]	; (8008898 <prvCheckForValidListAndQueue+0x6c>)
 800884c:	4a10      	ldr	r2, [pc, #64]	; (8008890 <prvCheckForValidListAndQueue+0x64>)
 800884e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008850:	4b12      	ldr	r3, [pc, #72]	; (800889c <prvCheckForValidListAndQueue+0x70>)
 8008852:	4a10      	ldr	r2, [pc, #64]	; (8008894 <prvCheckForValidListAndQueue+0x68>)
 8008854:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008856:	2300      	movs	r3, #0
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	4b11      	ldr	r3, [pc, #68]	; (80088a0 <prvCheckForValidListAndQueue+0x74>)
 800885c:	4a11      	ldr	r2, [pc, #68]	; (80088a4 <prvCheckForValidListAndQueue+0x78>)
 800885e:	2110      	movs	r1, #16
 8008860:	200a      	movs	r0, #10
 8008862:	f7fd fd03 	bl	800626c <xQueueGenericCreateStatic>
 8008866:	4603      	mov	r3, r0
 8008868:	4a08      	ldr	r2, [pc, #32]	; (800888c <prvCheckForValidListAndQueue+0x60>)
 800886a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800886c:	4b07      	ldr	r3, [pc, #28]	; (800888c <prvCheckForValidListAndQueue+0x60>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <prvCheckForValidListAndQueue+0x60>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	490b      	ldr	r1, [pc, #44]	; (80088a8 <prvCheckForValidListAndQueue+0x7c>)
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fc14 	bl	80070a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008880:	f000 f970 	bl	8008b64 <vPortExitCritical>
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	24000fec 	.word	0x24000fec
 8008890:	24000fbc 	.word	0x24000fbc
 8008894:	24000fd0 	.word	0x24000fd0
 8008898:	24000fe4 	.word	0x24000fe4
 800889c:	24000fe8 	.word	0x24000fe8
 80088a0:	24001098 	.word	0x24001098
 80088a4:	24000ff8 	.word	0x24000ff8
 80088a8:	0801ce34 	.word	0x0801ce34

080088ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	3b04      	subs	r3, #4
 80088bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80088c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3b04      	subs	r3, #4
 80088ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f023 0201 	bic.w	r2, r3, #1
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3b04      	subs	r3, #4
 80088da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80088dc:	4a0c      	ldr	r2, [pc, #48]	; (8008910 <pxPortInitialiseStack+0x64>)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	3b14      	subs	r3, #20
 80088e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3b04      	subs	r3, #4
 80088f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f06f 0202 	mvn.w	r2, #2
 80088fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	3b20      	subs	r3, #32
 8008900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008902:	68fb      	ldr	r3, [r7, #12]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	08008915 	.word	0x08008915

08008914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800891e:	4b12      	ldr	r3, [pc, #72]	; (8008968 <prvTaskExitError+0x54>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008926:	d00a      	beq.n	800893e <prvTaskExitError+0x2a>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	60fb      	str	r3, [r7, #12]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <prvTaskExitError+0x28>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60bb      	str	r3, [r7, #8]
}
 8008950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008952:	bf00      	nop
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d0fc      	beq.n	8008954 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800895a:	bf00      	nop
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	24000014 	.word	0x24000014
 800896c:	00000000 	.word	0x00000000

08008970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008970:	4b07      	ldr	r3, [pc, #28]	; (8008990 <pxCurrentTCBConst2>)
 8008972:	6819      	ldr	r1, [r3, #0]
 8008974:	6808      	ldr	r0, [r1, #0]
 8008976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897a:	f380 8809 	msr	PSP, r0
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f04f 0000 	mov.w	r0, #0
 8008986:	f380 8811 	msr	BASEPRI, r0
 800898a:	4770      	bx	lr
 800898c:	f3af 8000 	nop.w

08008990 <pxCurrentTCBConst2>:
 8008990:	24000abc 	.word	0x24000abc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop

08008998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008998:	4808      	ldr	r0, [pc, #32]	; (80089bc <prvPortStartFirstTask+0x24>)
 800899a:	6800      	ldr	r0, [r0, #0]
 800899c:	6800      	ldr	r0, [r0, #0]
 800899e:	f380 8808 	msr	MSP, r0
 80089a2:	f04f 0000 	mov.w	r0, #0
 80089a6:	f380 8814 	msr	CONTROL, r0
 80089aa:	b662      	cpsie	i
 80089ac:	b661      	cpsie	f
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	f3bf 8f6f 	isb	sy
 80089b6:	df00      	svc	0
 80089b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80089ba:	bf00      	nop
 80089bc:	e000ed08 	.word	0xe000ed08

080089c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80089c6:	4b46      	ldr	r3, [pc, #280]	; (8008ae0 <xPortStartScheduler+0x120>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a46      	ldr	r2, [pc, #280]	; (8008ae4 <xPortStartScheduler+0x124>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d10a      	bne.n	80089e6 <xPortStartScheduler+0x26>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	613b      	str	r3, [r7, #16]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80089e6:	4b3e      	ldr	r3, [pc, #248]	; (8008ae0 <xPortStartScheduler+0x120>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a3f      	ldr	r2, [pc, #252]	; (8008ae8 <xPortStartScheduler+0x128>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d10a      	bne.n	8008a06 <xPortStartScheduler+0x46>
	__asm volatile
 80089f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f4:	f383 8811 	msr	BASEPRI, r3
 80089f8:	f3bf 8f6f 	isb	sy
 80089fc:	f3bf 8f4f 	dsb	sy
 8008a00:	60fb      	str	r3, [r7, #12]
}
 8008a02:	bf00      	nop
 8008a04:	e7fe      	b.n	8008a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a06:	4b39      	ldr	r3, [pc, #228]	; (8008aec <xPortStartScheduler+0x12c>)
 8008a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	4b31      	ldr	r3, [pc, #196]	; (8008af0 <xPortStartScheduler+0x130>)
 8008a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a2e:	4b31      	ldr	r3, [pc, #196]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a30:	2207      	movs	r2, #7
 8008a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a34:	e009      	b.n	8008a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008a36:	4b2f      	ldr	r3, [pc, #188]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	4a2d      	ldr	r2, [pc, #180]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	005b      	lsls	r3, r3, #1
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a52:	2b80      	cmp	r3, #128	; 0x80
 8008a54:	d0ef      	beq.n	8008a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a56:	4b27      	ldr	r3, [pc, #156]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f1c3 0307 	rsb	r3, r3, #7
 8008a5e:	2b04      	cmp	r3, #4
 8008a60:	d00a      	beq.n	8008a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8008a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a66:	f383 8811 	msr	BASEPRI, r3
 8008a6a:	f3bf 8f6f 	isb	sy
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	60bb      	str	r3, [r7, #8]
}
 8008a74:	bf00      	nop
 8008a76:	e7fe      	b.n	8008a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a78:	4b1e      	ldr	r3, [pc, #120]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	021b      	lsls	r3, r3, #8
 8008a7e:	4a1d      	ldr	r2, [pc, #116]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a82:	4b1c      	ldr	r3, [pc, #112]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a8a:	4a1a      	ldr	r2, [pc, #104]	; (8008af4 <xPortStartScheduler+0x134>)
 8008a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <xPortStartScheduler+0x138>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a17      	ldr	r2, [pc, #92]	; (8008af8 <xPortStartScheduler+0x138>)
 8008a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aa2:	4b15      	ldr	r3, [pc, #84]	; (8008af8 <xPortStartScheduler+0x138>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a14      	ldr	r2, [pc, #80]	; (8008af8 <xPortStartScheduler+0x138>)
 8008aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008aae:	f000 f8dd 	bl	8008c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ab2:	4b12      	ldr	r3, [pc, #72]	; (8008afc <xPortStartScheduler+0x13c>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ab8:	f000 f8fc 	bl	8008cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008abc:	4b10      	ldr	r3, [pc, #64]	; (8008b00 <xPortStartScheduler+0x140>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a0f      	ldr	r2, [pc, #60]	; (8008b00 <xPortStartScheduler+0x140>)
 8008ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ac8:	f7ff ff66 	bl	8008998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008acc:	f7fe ff4a 	bl	8007964 <vTaskSwitchContext>
	prvTaskExitError();
 8008ad0:	f7ff ff20 	bl	8008914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	e000ed00 	.word	0xe000ed00
 8008ae4:	410fc271 	.word	0x410fc271
 8008ae8:	410fc270 	.word	0x410fc270
 8008aec:	e000e400 	.word	0xe000e400
 8008af0:	240010e8 	.word	0x240010e8
 8008af4:	240010ec 	.word	0x240010ec
 8008af8:	e000ed20 	.word	0xe000ed20
 8008afc:	24000014 	.word	0x24000014
 8008b00:	e000ef34 	.word	0xe000ef34

08008b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	607b      	str	r3, [r7, #4]
}
 8008b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b1e:	4b0f      	ldr	r3, [pc, #60]	; (8008b5c <vPortEnterCritical+0x58>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3301      	adds	r3, #1
 8008b24:	4a0d      	ldr	r2, [pc, #52]	; (8008b5c <vPortEnterCritical+0x58>)
 8008b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b28:	4b0c      	ldr	r3, [pc, #48]	; (8008b5c <vPortEnterCritical+0x58>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d10f      	bne.n	8008b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b30:	4b0b      	ldr	r3, [pc, #44]	; (8008b60 <vPortEnterCritical+0x5c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	603b      	str	r3, [r7, #0]
}
 8008b4c:	bf00      	nop
 8008b4e:	e7fe      	b.n	8008b4e <vPortEnterCritical+0x4a>
	}
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	24000014 	.word	0x24000014
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b6a:	4b12      	ldr	r3, [pc, #72]	; (8008bb4 <vPortExitCritical+0x50>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10a      	bne.n	8008b88 <vPortExitCritical+0x24>
	__asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	607b      	str	r3, [r7, #4]
}
 8008b84:	bf00      	nop
 8008b86:	e7fe      	b.n	8008b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <vPortExitCritical+0x50>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	4a09      	ldr	r2, [pc, #36]	; (8008bb4 <vPortExitCritical+0x50>)
 8008b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b92:	4b08      	ldr	r3, [pc, #32]	; (8008bb4 <vPortExitCritical+0x50>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d105      	bne.n	8008ba6 <vPortExitCritical+0x42>
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f383 8811 	msr	BASEPRI, r3
}
 8008ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	24000014 	.word	0x24000014
	...

08008bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008bc0:	f3ef 8009 	mrs	r0, PSP
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <pxCurrentTCBConst>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	f01e 0f10 	tst.w	lr, #16
 8008bd0:	bf08      	it	eq
 8008bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	6010      	str	r0, [r2, #0]
 8008bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008be4:	f380 8811 	msr	BASEPRI, r0
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f7fe feb8 	bl	8007964 <vTaskSwitchContext>
 8008bf4:	f04f 0000 	mov.w	r0, #0
 8008bf8:	f380 8811 	msr	BASEPRI, r0
 8008bfc:	bc09      	pop	{r0, r3}
 8008bfe:	6819      	ldr	r1, [r3, #0]
 8008c00:	6808      	ldr	r0, [r1, #0]
 8008c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c06:	f01e 0f10 	tst.w	lr, #16
 8008c0a:	bf08      	it	eq
 8008c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c10:	f380 8809 	msr	PSP, r0
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	f3af 8000 	nop.w

08008c20 <pxCurrentTCBConst>:
 8008c20:	24000abc 	.word	0x24000abc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop

08008c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	607b      	str	r3, [r7, #4]
}
 8008c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c42:	f7fe fdd5 	bl	80077f0 <xTaskIncrementTick>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <xPortSysTickHandler+0x40>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	2300      	movs	r3, #0
 8008c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f383 8811 	msr	BASEPRI, r3
}
 8008c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c70:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <vPortSetupTimerInterrupt+0x34>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c76:	4b0b      	ldr	r3, [pc, #44]	; (8008ca4 <vPortSetupTimerInterrupt+0x38>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ca8 <vPortSetupTimerInterrupt+0x3c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <vPortSetupTimerInterrupt+0x40>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	099b      	lsrs	r3, r3, #6
 8008c88:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <vPortSetupTimerInterrupt+0x44>)
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <vPortSetupTimerInterrupt+0x34>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	e000e010 	.word	0xe000e010
 8008ca4:	e000e018 	.word	0xe000e018
 8008ca8:	24000004 	.word	0x24000004
 8008cac:	10624dd3 	.word	0x10624dd3
 8008cb0:	e000e014 	.word	0xe000e014

08008cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008cc4 <vPortEnableVFP+0x10>
 8008cb8:	6801      	ldr	r1, [r0, #0]
 8008cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008cbe:	6001      	str	r1, [r0, #0]
 8008cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008cc2:	bf00      	nop
 8008cc4:	e000ed88 	.word	0xe000ed88

08008cc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cce:	f3ef 8305 	mrs	r3, IPSR
 8008cd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b0f      	cmp	r3, #15
 8008cd8:	d914      	bls.n	8008d04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cda:	4a17      	ldr	r2, [pc, #92]	; (8008d38 <vPortValidateInterruptPriority+0x70>)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	4413      	add	r3, r2
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ce4:	4b15      	ldr	r3, [pc, #84]	; (8008d3c <vPortValidateInterruptPriority+0x74>)
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	7afa      	ldrb	r2, [r7, #11]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d20a      	bcs.n	8008d04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d04:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <vPortValidateInterruptPriority+0x78>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d0c:	4b0d      	ldr	r3, [pc, #52]	; (8008d44 <vPortValidateInterruptPriority+0x7c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d90a      	bls.n	8008d2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	603b      	str	r3, [r7, #0]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <vPortValidateInterruptPriority+0x60>
	}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	e000e3f0 	.word	0xe000e3f0
 8008d3c:	240010e8 	.word	0x240010e8
 8008d40:	e000ed0c 	.word	0xe000ed0c
 8008d44:	240010ec 	.word	0x240010ec

08008d48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d50:	2300      	movs	r3, #0
 8008d52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d54:	f7fe fc90 	bl	8007678 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d58:	4b5b      	ldr	r3, [pc, #364]	; (8008ec8 <pvPortMalloc+0x180>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d60:	f000 f920 	bl	8008fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d64:	4b59      	ldr	r3, [pc, #356]	; (8008ecc <pvPortMalloc+0x184>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4013      	ands	r3, r2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f040 8093 	bne.w	8008e98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01d      	beq.n	8008db4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d78:	2208      	movs	r2, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4413      	add	r3, r2
 8008d7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d014      	beq.n	8008db4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f023 0307 	bic.w	r3, r3, #7
 8008d90:	3308      	adds	r3, #8
 8008d92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f003 0307 	and.w	r3, r3, #7
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <pvPortMalloc+0x6c>
	__asm volatile
 8008d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da2:	f383 8811 	msr	BASEPRI, r3
 8008da6:	f3bf 8f6f 	isb	sy
 8008daa:	f3bf 8f4f 	dsb	sy
 8008dae:	617b      	str	r3, [r7, #20]
}
 8008db0:	bf00      	nop
 8008db2:	e7fe      	b.n	8008db2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d06e      	beq.n	8008e98 <pvPortMalloc+0x150>
 8008dba:	4b45      	ldr	r3, [pc, #276]	; (8008ed0 <pvPortMalloc+0x188>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d869      	bhi.n	8008e98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008dc4:	4b43      	ldr	r3, [pc, #268]	; (8008ed4 <pvPortMalloc+0x18c>)
 8008dc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dc8:	4b42      	ldr	r3, [pc, #264]	; (8008ed4 <pvPortMalloc+0x18c>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dce:	e004      	b.n	8008dda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d903      	bls.n	8008dec <pvPortMalloc+0xa4>
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1f1      	bne.n	8008dd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dec:	4b36      	ldr	r3, [pc, #216]	; (8008ec8 <pvPortMalloc+0x180>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d050      	beq.n	8008e98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	4413      	add	r3, r2
 8008dfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	1ad2      	subs	r2, r2, r3
 8008e10:	2308      	movs	r3, #8
 8008e12:	005b      	lsls	r3, r3, #1
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d91f      	bls.n	8008e58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00a      	beq.n	8008e40 <pvPortMalloc+0xf8>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	613b      	str	r3, [r7, #16]
}
 8008e3c:	bf00      	nop
 8008e3e:	e7fe      	b.n	8008e3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e52:	69b8      	ldr	r0, [r7, #24]
 8008e54:	f000 f90a 	bl	800906c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e58:	4b1d      	ldr	r3, [pc, #116]	; (8008ed0 <pvPortMalloc+0x188>)
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	1ad3      	subs	r3, r2, r3
 8008e62:	4a1b      	ldr	r2, [pc, #108]	; (8008ed0 <pvPortMalloc+0x188>)
 8008e64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e66:	4b1a      	ldr	r3, [pc, #104]	; (8008ed0 <pvPortMalloc+0x188>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <pvPortMalloc+0x190>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d203      	bcs.n	8008e7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e72:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <pvPortMalloc+0x188>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a18      	ldr	r2, [pc, #96]	; (8008ed8 <pvPortMalloc+0x190>)
 8008e78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	4b13      	ldr	r3, [pc, #76]	; (8008ecc <pvPortMalloc+0x184>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	431a      	orrs	r2, r3
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e8e:	4b13      	ldr	r3, [pc, #76]	; (8008edc <pvPortMalloc+0x194>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3301      	adds	r3, #1
 8008e94:	4a11      	ldr	r2, [pc, #68]	; (8008edc <pvPortMalloc+0x194>)
 8008e96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e98:	f7fe fbfc 	bl	8007694 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <pvPortMalloc+0x174>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	60fb      	str	r3, [r7, #12]
}
 8008eb8:	bf00      	nop
 8008eba:	e7fe      	b.n	8008eba <pvPortMalloc+0x172>
	return pvReturn;
 8008ebc:	69fb      	ldr	r3, [r7, #28]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3728      	adds	r7, #40	; 0x28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	24019798 	.word	0x24019798
 8008ecc:	240197ac 	.word	0x240197ac
 8008ed0:	2401979c 	.word	0x2401979c
 8008ed4:	24019790 	.word	0x24019790
 8008ed8:	240197a0 	.word	0x240197a0
 8008edc:	240197a4 	.word	0x240197a4

08008ee0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d04d      	beq.n	8008f8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ef2:	2308      	movs	r3, #8
 8008ef4:	425b      	negs	r3, r3
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4413      	add	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <vPortFree+0xb8>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4013      	ands	r3, r2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10a      	bne.n	8008f24 <vPortFree+0x44>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	60fb      	str	r3, [r7, #12]
}
 8008f20:	bf00      	nop
 8008f22:	e7fe      	b.n	8008f22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00a      	beq.n	8008f42 <vPortFree+0x62>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	60bb      	str	r3, [r7, #8]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	685a      	ldr	r2, [r3, #4]
 8008f46:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <vPortFree+0xb8>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4013      	ands	r3, r2
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01e      	beq.n	8008f8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d11a      	bne.n	8008f8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <vPortFree+0xb8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	43db      	mvns	r3, r3
 8008f62:	401a      	ands	r2, r3
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f68:	f7fe fb86 	bl	8007678 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	685a      	ldr	r2, [r3, #4]
 8008f70:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <vPortFree+0xbc>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4413      	add	r3, r2
 8008f76:	4a09      	ldr	r2, [pc, #36]	; (8008f9c <vPortFree+0xbc>)
 8008f78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f7a:	6938      	ldr	r0, [r7, #16]
 8008f7c:	f000 f876 	bl	800906c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f80:	4b07      	ldr	r3, [pc, #28]	; (8008fa0 <vPortFree+0xc0>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	4a06      	ldr	r2, [pc, #24]	; (8008fa0 <vPortFree+0xc0>)
 8008f88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f8a:	f7fe fb83 	bl	8007694 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f8e:	bf00      	nop
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	240197ac 	.word	0x240197ac
 8008f9c:	2401979c 	.word	0x2401979c
 8008fa0:	240197a8 	.word	0x240197a8

08008fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008faa:	4b29      	ldr	r3, [pc, #164]	; (8009050 <prvHeapInit+0xac>)
 8008fac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fae:	4b29      	ldr	r3, [pc, #164]	; (8009054 <prvHeapInit+0xb0>)
 8008fb0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00c      	beq.n	8008fd6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	3307      	adds	r3, #7
 8008fc0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f023 0307 	bic.w	r3, r3, #7
 8008fc8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	1ad3      	subs	r3, r2, r3
 8008fd0:	4a20      	ldr	r2, [pc, #128]	; (8009054 <prvHeapInit+0xb0>)
 8008fd2:	4413      	add	r3, r2
 8008fd4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fda:	4a1f      	ldr	r2, [pc, #124]	; (8009058 <prvHeapInit+0xb4>)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fe0:	4b1d      	ldr	r3, [pc, #116]	; (8009058 <prvHeapInit+0xb4>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	4413      	add	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fee:	2208      	movs	r2, #8
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f023 0307 	bic.w	r3, r3, #7
 8008ffc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4a16      	ldr	r2, [pc, #88]	; (800905c <prvHeapInit+0xb8>)
 8009002:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009004:	4b15      	ldr	r3, [pc, #84]	; (800905c <prvHeapInit+0xb8>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2200      	movs	r2, #0
 800900a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800900c:	4b13      	ldr	r3, [pc, #76]	; (800905c <prvHeapInit+0xb8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	1ad2      	subs	r2, r2, r3
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009022:	4b0e      	ldr	r3, [pc, #56]	; (800905c <prvHeapInit+0xb8>)
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685b      	ldr	r3, [r3, #4]
 800902e:	4a0c      	ldr	r2, [pc, #48]	; (8009060 <prvHeapInit+0xbc>)
 8009030:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4a0b      	ldr	r2, [pc, #44]	; (8009064 <prvHeapInit+0xc0>)
 8009038:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800903a:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <prvHeapInit+0xc4>)
 800903c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009040:	601a      	str	r2, [r3, #0]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	000186a0 	.word	0x000186a0
 8009054:	240010f0 	.word	0x240010f0
 8009058:	24019790 	.word	0x24019790
 800905c:	24019798 	.word	0x24019798
 8009060:	240197a0 	.word	0x240197a0
 8009064:	2401979c 	.word	0x2401979c
 8009068:	240197ac 	.word	0x240197ac

0800906c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009074:	4b28      	ldr	r3, [pc, #160]	; (8009118 <prvInsertBlockIntoFreeList+0xac>)
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e002      	b.n	8009080 <prvInsertBlockIntoFreeList+0x14>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	429a      	cmp	r2, r3
 8009088:	d8f7      	bhi.n	800907a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	4413      	add	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	429a      	cmp	r2, r3
 800909a:	d108      	bne.n	80090ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	685a      	ldr	r2, [r3, #4]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	441a      	add	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	441a      	add	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d118      	bne.n	80090f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	4b15      	ldr	r3, [pc, #84]	; (800911c <prvInsertBlockIntoFreeList+0xb0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d00d      	beq.n	80090ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	441a      	add	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	e008      	b.n	80090fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090ea:	4b0c      	ldr	r3, [pc, #48]	; (800911c <prvInsertBlockIntoFreeList+0xb0>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	601a      	str	r2, [r3, #0]
 80090f2:	e003      	b.n	80090fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d002      	beq.n	800910a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800910a:	bf00      	nop
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	24019790 	.word	0x24019790
 800911c:	24019798 	.word	0x24019798

08009120 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
}
 8009124:	bf00      	nop
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8009132:	f003 fe5d 	bl	800cdf0 <touchgfx_components_init>
  touchgfx_init();
 8009136:	f003 fe31 	bl	800cd9c <touchgfx_init>
}
 800913a:	bf00      	nop
 800913c:	bd80      	pop	{r7, pc}

0800913e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 8009146:	f003 fe5b 	bl	800ce00 <touchgfx_taskEntry>
}
 800914a:	bf00      	nop
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
    {
 800915c:	4a04      	ldr	r2, [pc, #16]	; (8009170 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
    }
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	0801d850 	.word	0x0801d850

08009174 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
    }
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f7ff ffe9 	bl	8009154 <_ZN8touchgfx12FontProviderD1Ev>
 8009182:	2104      	movs	r1, #4
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f012 fd86 	bl	801bc96 <_ZdlPvj>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	460b      	mov	r3, r1
 800919e:	807b      	strh	r3, [r7, #2]
    switch (typography)
 80091a0:	887b      	ldrh	r3, [r7, #2]
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d010      	beq.n	80091c8 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	dc13      	bgt.n	80091d2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d005      	beq.n	80091be <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 80091b2:	e00e      	b.n	80091d2 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80091b4:	f002 f986 	bl	800b4c4 <_ZN17TypedTextDatabase8getFontsEv>
 80091b8:	4603      	mov	r3, r0
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	e00a      	b.n	80091d4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80091be:	f002 f981 	bl	800b4c4 <_ZN17TypedTextDatabase8getFontsEv>
 80091c2:	4603      	mov	r3, r0
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	e005      	b.n	80091d4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80091c8:	f002 f97c 	bl	800b4c4 <_ZN17TypedTextDatabase8getFontsEv>
 80091cc:	4603      	mov	r3, r0
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	e000      	b.n	80091d4 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 80091d2:	2300      	movs	r3, #0
    }
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	4a05      	ldr	r2, [pc, #20]	; (80091fc <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7ff ffb1 	bl	8009154 <_ZN8touchgfx12FontProviderD1Ev>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	0801d83c 	.word	0x0801d83c

08009200 <_ZN23ApplicationFontProviderD0Ev>:
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f7ff ffe7 	bl	80091dc <_ZN23ApplicationFontProviderD1Ev>
 800920e:	2104      	movs	r1, #4
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f012 fd40 	bl	801bc96 <_ZdlPvj>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4618      	mov	r0, r3
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
    {
 8009228:	4a04      	ldr	r2, [pc, #16]	; (800923c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]
    }
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4618      	mov	r0, r3
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	0801dcc4 	.word	0x0801dcc4

08009240 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
    }
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff ffe9 	bl	8009220 <_ZN8touchgfx4FontD1Ev>
 800924e:	2114      	movs	r1, #20
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f012 fd20 	bl	801bc96 <_ZdlPvj>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800926c:	887b      	ldrh	r3, [r7, #2]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8009272:	2300      	movs	r3, #0
 8009274:	e010      	b.n	8009298 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	681c      	ldr	r4, [r3, #0]
 8009286:	f107 030f 	add.w	r3, r7, #15
 800928a:	f107 0210 	add.w	r2, r7, #16
 800928e:	8879      	ldrh	r1, [r7, #2]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	47a0      	blx	r4
 8009294:	6178      	str	r0, [r7, #20]
        return glyph;
 8009296:	697b      	ldr	r3, [r7, #20]
    }
 8009298:	4618      	mov	r0, r3
 800929a:	371c      	adds	r7, #28
 800929c:	46bd      	mov	sp, r7
 800929e:	bd90      	pop	{r4, r7, pc}

080092a0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	89db      	ldrh	r3, [r3, #14]
    }
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8a1b      	ldrh	r3, [r3, #16]
    }
 80092c4:	4618      	mov	r0, r3
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 80092d0:	b480      	push	{r7}
 80092d2:	b083      	sub	sp, #12
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	88db      	ldrh	r3, [r3, #6]
    }
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	889b      	ldrh	r3, [r3, #4]
    }
 80092f4:	4618      	mov	r0, r3
 80092f6:	370c      	adds	r7, #12
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	7a9b      	ldrb	r3, [r3, #10]
 800930c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009310:	b2db      	uxtb	r3, r3
    }
 8009312:	4618      	mov	r0, r3
 8009314:	370c      	adds	r7, #12
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr

0800931e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800931e:	b480      	push	{r7}
 8009320:	b083      	sub	sp, #12
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	7a9b      	ldrb	r3, [r3, #10]
 800932a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800932e:	b2db      	uxtb	r3, r3
    }
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	4a05      	ldr	r2, [pc, #20]	; (800935c <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff ff67 	bl	8009220 <_ZN8touchgfx4FontD1Ev>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	0801e58c 	.word	0x0801e58c

08009360 <_ZN8touchgfx9ConstFontD0Ev>:
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ffe7 	bl	800933c <_ZN8touchgfx9ConstFontD1Ev>
 800936e:	211c      	movs	r1, #28
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f012 fc90 	bl	801bc96 <_ZdlPvj>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	f7ff ffd3 	bl	800933c <_ZN8touchgfx9ConstFontD1Ev>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	0801d864 	.word	0x0801d864

080093a4 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ffe7 	bl	8009380 <_ZN8touchgfx13GeneratedFontD1Ev>
 80093b2:	212c      	movs	r1, #44	; 0x2c
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f012 fc6e 	bl	801bc96 <_ZdlPvj>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 80093d0:	4618      	mov	r0, r3
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 80093e8:	4618      	mov	r0, r3
 80093ea:	370c      	adds	r7, #12
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr

080093f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08e      	sub	sp, #56	; 0x38
 80093f8:	af0a      	add	r7, sp, #40	; 0x28
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4611      	mov	r1, r2
 8009400:	461a      	mov	r2, r3
 8009402:	460b      	mov	r3, r1
 8009404:	80fb      	strh	r3, [r7, #6]
 8009406:	4613      	mov	r3, r2
 8009408:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	88b9      	ldrh	r1, [r7, #4]
 800940e:	88fa      	ldrh	r2, [r7, #6]
 8009410:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009414:	9308      	str	r3, [sp, #32]
 8009416:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800941e:	9306      	str	r3, [sp, #24]
 8009420:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009430:	9303      	str	r3, [sp, #12]
 8009432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	7f3b      	ldrb	r3, [r7, #28]
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	8b3b      	ldrh	r3, [r7, #24]
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	460b      	mov	r3, r1
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	f007 fdce 	bl	8010fe4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8009448:	4a09      	ldr	r2, [pc, #36]	; (8009470 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009452:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009458:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800945e:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009464:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	0801d864 	.word	0x0801d864

08009474 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	889b      	ldrh	r3, [r3, #4]
 8009488:	0adb      	lsrs	r3, r3, #11
 800948a:	b29b      	uxth	r3, r3
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4413      	add	r3, r2
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4413      	add	r3, r2
}
 800949a:	4618      	mov	r0, r3
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80094a6:	b480      	push	{r7}
 80094a8:	b089      	sub	sp, #36	; 0x24
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	460b      	mov	r3, r1
 80094b0:	607a      	str	r2, [r7, #4]
 80094b2:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d003      	beq.n	80094c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	7b1b      	ldrb	r3, [r3, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e031      	b.n	800952a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a1a      	ldr	r2, [r3, #32]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	7b5b      	ldrb	r3, [r3, #13]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	b21b      	sxth	r3, r3
 80094d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094da:	b219      	sxth	r1, r3
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	7adb      	ldrb	r3, [r3, #11]
 80094e0:	b21b      	sxth	r3, r3
 80094e2:	430b      	orrs	r3, r1
 80094e4:	b21b      	sxth	r3, r3
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	7b1b      	ldrb	r3, [r3, #12]
 80094f2:	837b      	strh	r3, [r7, #26]
 80094f4:	e013      	b.n	800951e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	881b      	ldrh	r3, [r3, #0]
 80094fa:	897a      	ldrh	r2, [r7, #10]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d103      	bne.n	8009508 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8009506:	e010      	b.n	800952a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	897a      	ldrh	r2, [r7, #10]
 800950e:	429a      	cmp	r2, r3
 8009510:	d309      	bcc.n	8009526 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8009512:	8b7b      	ldrh	r3, [r7, #26]
 8009514:	3b01      	subs	r3, #1
 8009516:	837b      	strh	r3, [r7, #26]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	3304      	adds	r3, #4
 800951c:	61fb      	str	r3, [r7, #28]
 800951e:	8b7b      	ldrh	r3, [r7, #26]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e8      	bne.n	80094f6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 8009524:	e000      	b.n	8009528 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 8009526:	bf00      	nop
        }
    }
    return 0;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3724      	adds	r7, #36	; 0x24
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
	...

08009538 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8009538:	b580      	push	{r7, lr}
 800953a:	af00      	add	r7, sp, #0
 800953c:	4801      	ldr	r0, [pc, #4]	; (8009544 <__tcf_0+0xc>)
 800953e:	f7ff ff1f 	bl	8009380 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009542:	bd80      	pop	{r7, pc}
 8009544:	240197b0 	.word	0x240197b0

08009548 <_Z23getFont_verdana_10_4bppv>:
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08e      	sub	sp, #56	; 0x38
 800954c:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800954e:	4b21      	ldr	r3, [pc, #132]	; (80095d4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f3bf 8f5b 	dmb	ish
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	bf0c      	ite	eq
 800955e:	2301      	moveq	r3, #1
 8009560:	2300      	movne	r3, #0
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d030      	beq.n	80095ca <_Z23getFont_verdana_10_4bppv+0x82>
 8009568:	481a      	ldr	r0, [pc, #104]	; (80095d4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800956a:	f012 fb96 	bl	801bc9a <__cxa_guard_acquire>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf14      	ite	ne
 8009574:	2301      	movne	r3, #1
 8009576:	2300      	moveq	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d025      	beq.n	80095ca <_Z23getFont_verdana_10_4bppv+0x82>
 800957e:	2300      	movs	r3, #0
 8009580:	930c      	str	r3, [sp, #48]	; 0x30
 8009582:	2300      	movs	r3, #0
 8009584:	930b      	str	r3, [sp, #44]	; 0x2c
 8009586:	2300      	movs	r3, #0
 8009588:	930a      	str	r3, [sp, #40]	; 0x28
 800958a:	233f      	movs	r3, #63	; 0x3f
 800958c:	9309      	str	r3, [sp, #36]	; 0x24
 800958e:	4b12      	ldr	r3, [pc, #72]	; (80095d8 <_Z23getFont_verdana_10_4bppv+0x90>)
 8009590:	9308      	str	r3, [sp, #32]
 8009592:	4b12      	ldr	r3, [pc, #72]	; (80095dc <_Z23getFont_verdana_10_4bppv+0x94>)
 8009594:	9307      	str	r3, [sp, #28]
 8009596:	2300      	movs	r3, #0
 8009598:	9306      	str	r3, [sp, #24]
 800959a:	2300      	movs	r3, #0
 800959c:	9305      	str	r3, [sp, #20]
 800959e:	2301      	movs	r3, #1
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	2304      	movs	r3, #4
 80095a4:	9303      	str	r3, [sp, #12]
 80095a6:	2300      	movs	r3, #0
 80095a8:	9302      	str	r3, [sp, #8]
 80095aa:	2300      	movs	r3, #0
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	230a      	movs	r3, #10
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	230a      	movs	r3, #10
 80095b4:	2201      	movs	r2, #1
 80095b6:	490a      	ldr	r1, [pc, #40]	; (80095e0 <_Z23getFont_verdana_10_4bppv+0x98>)
 80095b8:	480a      	ldr	r0, [pc, #40]	; (80095e4 <_Z23getFont_verdana_10_4bppv+0x9c>)
 80095ba:	f7ff ff1b 	bl	80093f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80095be:	480a      	ldr	r0, [pc, #40]	; (80095e8 <_Z23getFont_verdana_10_4bppv+0xa0>)
 80095c0:	f012 fbb6 	bl	801bd30 <atexit>
 80095c4:	4803      	ldr	r0, [pc, #12]	; (80095d4 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80095c6:	f012 fb74 	bl	801bcb2 <__cxa_guard_release>
    return verdana_10_4bpp;
 80095ca:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	240197dc 	.word	0x240197dc
 80095d8:	0801eaa0 	.word	0x0801eaa0
 80095dc:	0801eaac 	.word	0x0801eaac
 80095e0:	0801ea70 	.word	0x0801ea70
 80095e4:	240197b0 	.word	0x240197b0
 80095e8:	08009539 	.word	0x08009539

080095ec <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80095ec:	b580      	push	{r7, lr}
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__tcf_0+0xc>)
 80095f2:	f7ff fec5 	bl	8009380 <_ZN8touchgfx13GeneratedFontD1Ev>
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	240197e0 	.word	0x240197e0

080095fc <_Z23getFont_verdana_20_4bppv>:
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b08e      	sub	sp, #56	; 0x38
 8009600:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8009602:	4b21      	ldr	r3, [pc, #132]	; (8009688 <_Z23getFont_verdana_20_4bppv+0x8c>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f3bf 8f5b 	dmb	ish
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	bf0c      	ite	eq
 8009612:	2301      	moveq	r3, #1
 8009614:	2300      	movne	r3, #0
 8009616:	b2db      	uxtb	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d030      	beq.n	800967e <_Z23getFont_verdana_20_4bppv+0x82>
 800961c:	481a      	ldr	r0, [pc, #104]	; (8009688 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800961e:	f012 fb3c 	bl	801bc9a <__cxa_guard_acquire>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	bf14      	ite	ne
 8009628:	2301      	movne	r3, #1
 800962a:	2300      	moveq	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d025      	beq.n	800967e <_Z23getFont_verdana_20_4bppv+0x82>
 8009632:	2300      	movs	r3, #0
 8009634:	930c      	str	r3, [sp, #48]	; 0x30
 8009636:	2300      	movs	r3, #0
 8009638:	930b      	str	r3, [sp, #44]	; 0x2c
 800963a:	2300      	movs	r3, #0
 800963c:	930a      	str	r3, [sp, #40]	; 0x28
 800963e:	233f      	movs	r3, #63	; 0x3f
 8009640:	9309      	str	r3, [sp, #36]	; 0x24
 8009642:	4b12      	ldr	r3, [pc, #72]	; (800968c <_Z23getFont_verdana_20_4bppv+0x90>)
 8009644:	9308      	str	r3, [sp, #32]
 8009646:	4b12      	ldr	r3, [pc, #72]	; (8009690 <_Z23getFont_verdana_20_4bppv+0x94>)
 8009648:	9307      	str	r3, [sp, #28]
 800964a:	2300      	movs	r3, #0
 800964c:	9306      	str	r3, [sp, #24]
 800964e:	2300      	movs	r3, #0
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	2301      	movs	r3, #1
 8009654:	9304      	str	r3, [sp, #16]
 8009656:	2304      	movs	r3, #4
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	2300      	movs	r3, #0
 800965c:	9302      	str	r3, [sp, #8]
 800965e:	2300      	movs	r3, #0
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	2314      	movs	r3, #20
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	2314      	movs	r3, #20
 8009668:	2201      	movs	r2, #1
 800966a:	490a      	ldr	r1, [pc, #40]	; (8009694 <_Z23getFont_verdana_20_4bppv+0x98>)
 800966c:	480a      	ldr	r0, [pc, #40]	; (8009698 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800966e:	f7ff fec1 	bl	80093f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009672:	480a      	ldr	r0, [pc, #40]	; (800969c <_Z23getFont_verdana_20_4bppv+0xa0>)
 8009674:	f012 fb5c 	bl	801bd30 <atexit>
 8009678:	4803      	ldr	r0, [pc, #12]	; (8009688 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800967a:	f012 fb1a 	bl	801bcb2 <__cxa_guard_release>
    return verdana_20_4bpp;
 800967e:	4b06      	ldr	r3, [pc, #24]	; (8009698 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009680:	4618      	mov	r0, r3
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	2401980c 	.word	0x2401980c
 800968c:	0801eaa4 	.word	0x0801eaa4
 8009690:	0801eab0 	.word	0x0801eab0
 8009694:	0801ea80 	.word	0x0801ea80
 8009698:	240197e0 	.word	0x240197e0
 800969c:	080095ed 	.word	0x080095ed

080096a0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__tcf_0+0xc>)
 80096a6:	f7ff fe6b 	bl	8009380 <_ZN8touchgfx13GeneratedFontD1Ev>
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	24019810 	.word	0x24019810

080096b0 <_Z23getFont_verdana_40_4bppv>:
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08e      	sub	sp, #56	; 0x38
 80096b4:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80096b6:	4b21      	ldr	r3, [pc, #132]	; (800973c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f3bf 8f5b 	dmb	ish
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	bf0c      	ite	eq
 80096c6:	2301      	moveq	r3, #1
 80096c8:	2300      	movne	r3, #0
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d030      	beq.n	8009732 <_Z23getFont_verdana_40_4bppv+0x82>
 80096d0:	481a      	ldr	r0, [pc, #104]	; (800973c <_Z23getFont_verdana_40_4bppv+0x8c>)
 80096d2:	f012 fae2 	bl	801bc9a <__cxa_guard_acquire>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bf14      	ite	ne
 80096dc:	2301      	movne	r3, #1
 80096de:	2300      	moveq	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d025      	beq.n	8009732 <_Z23getFont_verdana_40_4bppv+0x82>
 80096e6:	2300      	movs	r3, #0
 80096e8:	930c      	str	r3, [sp, #48]	; 0x30
 80096ea:	2300      	movs	r3, #0
 80096ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80096ee:	2300      	movs	r3, #0
 80096f0:	930a      	str	r3, [sp, #40]	; 0x28
 80096f2:	233f      	movs	r3, #63	; 0x3f
 80096f4:	9309      	str	r3, [sp, #36]	; 0x24
 80096f6:	4b12      	ldr	r3, [pc, #72]	; (8009740 <_Z23getFont_verdana_40_4bppv+0x90>)
 80096f8:	9308      	str	r3, [sp, #32]
 80096fa:	4b12      	ldr	r3, [pc, #72]	; (8009744 <_Z23getFont_verdana_40_4bppv+0x94>)
 80096fc:	9307      	str	r3, [sp, #28]
 80096fe:	2300      	movs	r3, #0
 8009700:	9306      	str	r3, [sp, #24]
 8009702:	2300      	movs	r3, #0
 8009704:	9305      	str	r3, [sp, #20]
 8009706:	2301      	movs	r3, #1
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	2304      	movs	r3, #4
 800970c:	9303      	str	r3, [sp, #12]
 800970e:	2300      	movs	r3, #0
 8009710:	9302      	str	r3, [sp, #8]
 8009712:	2300      	movs	r3, #0
 8009714:	9301      	str	r3, [sp, #4]
 8009716:	2328      	movs	r3, #40	; 0x28
 8009718:	9300      	str	r3, [sp, #0]
 800971a:	2328      	movs	r3, #40	; 0x28
 800971c:	2201      	movs	r2, #1
 800971e:	490a      	ldr	r1, [pc, #40]	; (8009748 <_Z23getFont_verdana_40_4bppv+0x98>)
 8009720:	480a      	ldr	r0, [pc, #40]	; (800974c <_Z23getFont_verdana_40_4bppv+0x9c>)
 8009722:	f7ff fe67 	bl	80093f4 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009726:	480a      	ldr	r0, [pc, #40]	; (8009750 <_Z23getFont_verdana_40_4bppv+0xa0>)
 8009728:	f012 fb02 	bl	801bd30 <atexit>
 800972c:	4803      	ldr	r0, [pc, #12]	; (800973c <_Z23getFont_verdana_40_4bppv+0x8c>)
 800972e:	f012 fac0 	bl	801bcb2 <__cxa_guard_release>
    return verdana_40_4bpp;
 8009732:	4b06      	ldr	r3, [pc, #24]	; (800974c <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 8009734:	4618      	mov	r0, r3
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	2401983c 	.word	0x2401983c
 8009740:	0801eaa8 	.word	0x0801eaa8
 8009744:	0801eab4 	.word	0x0801eab4
 8009748:	0801ea90 	.word	0x0801ea90
 800974c:	24019810 	.word	0x24019810
 8009750:	080096a1 	.word	0x080096a1

08009754 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009776:	bf00      	nop
 8009778:	370c      	adds	r7, #12
 800977a:	46bd      	mov	sp, r7
 800977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009780:	4770      	bx	lr

08009782 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009782:	b480      	push	{r7}
 8009784:	b083      	sub	sp, #12
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 80097ae:	b480      	push	{r7}
 80097b0:	b083      	sub	sp, #12
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
 80097b6:	460b      	mov	r3, r1
 80097b8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80097ba:	bf00      	nop
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
    {
    }
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
    {
    }
 80097e2:	bf00      	nop
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
	...

080097f0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
    {
 80097f8:	4a04      	ldr	r2, [pc, #16]	; (800980c <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
    }
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	0801d9e4 	.word	0x0801d9e4

08009810 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
    }
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7ff ffe9 	bl	80097f0 <_ZN8touchgfx15UIEventListenerD1Ev>
 800981e:	2104      	movs	r1, #4
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f012 fa38 	bl	801bc96 <_ZdlPvj>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4618      	mov	r0, r3
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
    {
    }
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	683a      	ldr	r2, [r7, #0]
 800986a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800986e:	6810      	ldr	r0, [r2, #0]
 8009870:	6851      	ldr	r1, [r2, #4]
 8009872:	c303      	stmia	r3!, {r0, r1}
    }
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3304      	adds	r3, #4
 800988c:	4618      	mov	r0, r3
 800988e:	f006 faa8 	bl	800fde2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8009892:	bf00      	nop
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
    {
 80098a4:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	601a      	str	r2, [r3, #0]
    }
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	0801d9cc 	.word	0x0801d9cc

080098bc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
    }
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f7ff ffe9 	bl	800989c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 80098ca:	2104      	movs	r1, #4
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f012 f9e2 	bl	801bc96 <_ZdlPvj>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4618      	mov	r0, r3
 80098d6:	3708      	adds	r7, #8
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 80098dc:	b480      	push	{r7}
 80098de:	af00      	add	r7, sp, #0
    {
        return instance;
 80098e0:	4b03      	ldr	r3, [pc, #12]	; (80098f0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 80098e2:	681b      	ldr	r3, [r3, #0]
    }
 80098e4:	4618      	mov	r0, r3
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	2401a9b8 	.word	0x2401a9b8

080098f4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 80098f4:	b480      	push	{r7}
 80098f6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 80098f8:	4b0b      	ldr	r3, [pc, #44]	; (8009928 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8009904:	4b08      	ldr	r3, [pc, #32]	; (8009928 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d003      	beq.n	8009916 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800990e:	4b06      	ldr	r3, [pc, #24]	; (8009928 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009914:	e002      	b.n	800991c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8009916:	4b04      	ldr	r3, [pc, #16]	; (8009928 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
    }
 800991c:	4618      	mov	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop
 8009928:	2401a9b8 	.word	0x2401a9b8

0800992c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8009934:	4a07      	ldr	r2, [pc, #28]	; (8009954 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	601a      	str	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2200      	movs	r2, #0
 800993e:	605a      	str	r2, [r3, #4]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	721a      	strb	r2, [r3, #8]
    {
    }
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	0801d9a8 	.word	0x0801d9a8

08009958 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
    {
 8009960:	4a04      	ldr	r2, [pc, #16]	; (8009974 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	601a      	str	r2, [r3, #0]
    }
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4618      	mov	r0, r3
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	0801d9a8 	.word	0x0801d9a8

08009978 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
    }
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff ffe9 	bl	8009958 <_ZN8touchgfx10TransitionD1Ev>
 8009986:	210c      	movs	r1, #12
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f012 f984 	bl	801bc96 <_ZdlPvj>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
    {
    }
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
    {
    }
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
    {
    }
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 80099dc:	f006 f9dc 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 80099e0:	4603      	mov	r3, r0
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	323c      	adds	r2, #60	; 0x3c
 80099e6:	6812      	ldr	r2, [r2, #0]
 80099e8:	4618      	mov	r0, r3
 80099ea:	4790      	blx	r2
    }
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	605a      	str	r2, [r3, #4]
    }
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	4a05      	ldr	r2, [pc, #20]	; (8009a30 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff fee5 	bl	80097f0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	0801e4d0 	.word	0x0801e4d0

08009a34 <_ZN8touchgfx11ApplicationD0Ev>:
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f7ff ffe7 	bl	8009a10 <_ZN8touchgfx11ApplicationD1Ev>
 8009a42:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f012 f925 	bl	801bc96 <_ZdlPvj>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4618      	mov	r0, r3
 8009a64:	f006 fa5e 	bl	800ff24 <_ZN8touchgfx11ApplicationC1Ev>
 8009a68:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a04      	ldr	r2, [pc, #16]	; (8009a94 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8009a82:	6013      	str	r3, [r2, #0]
    }
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4618      	mov	r0, r3
 8009a88:	3708      	adds	r7, #8
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	0801d954 	.word	0x0801d954
 8009a94:	2401aa04 	.word	0x2401aa04

08009a98 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f804 	bl	8009aae <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00f      	beq.n	8009ae0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	330c      	adds	r3, #12
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4798      	blx	r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009adc:	2301      	movs	r3, #1
 8009ade:	e000      	b.n	8009ae2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00e      	beq.n	8009b04 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3308      	adds	r3, #8
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4610      	mov	r0, r2
 8009afa:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8009b04:	bf00      	nop
 8009b06:	3708      	adds	r7, #8
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	601a      	str	r2, [r3, #0]
    }
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	4a05      	ldr	r2, [pc, #20]	; (8009b48 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	601a      	str	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff ff69 	bl	8009a10 <_ZN8touchgfx11ApplicationD1Ev>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	0801d954 	.word	0x0801d954

08009b4c <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7ff ffe7 	bl	8009b28 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009b5a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f012 f899 	bl	801bc96 <_ZdlPvj>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
	...

08009b70 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	4a08      	ldr	r2, [pc, #32]	; (8009b9c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009b84:	4618      	mov	r0, r3
 8009b86:	f000 facb 	bl	800a120 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7ff ffcb 	bl	8009b28 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	0801d8e8 	.word	0x0801d8e8

08009ba0 <_ZN23FrontendApplicationBaseD0Ev>:
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ffe1 	bl	8009b70 <_ZN23FrontendApplicationBaseD1Ev>
 8009bae:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f012 f86f 	bl	801bc96 <_ZdlPvj>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f880 	bl	8009cd0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	721a      	strb	r2, [r3, #8]
    }
 8009be6:	bf00      	nop
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8009bf2:	b480      	push	{r7}
 8009bf4:	b083      	sub	sp, #12
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	6078      	str	r0, [r7, #4]
 8009bfa:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	605a      	str	r2, [r3, #4]
    }
 8009c02:	bf00      	nop
 8009c04:	370c      	adds	r7, #12
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
	...

08009c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7ff ff1a 	bl	8009a58 <_ZN8touchgfx14MVPApplicationC1Ev>
 8009c24:	4a15      	ldr	r2, [pc, #84]	; (8009c7c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6c>)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 f8a3 	bl	8009d7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8009c46:	f7ff fe49 	bl	80098dc <_ZN8touchgfx3HAL11getInstanceEv>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	3208      	adds	r2, #8
 8009c50:	6812      	ldr	r2, [r2, #0]
 8009c52:	2100      	movs	r1, #0
 8009c54:	4618      	mov	r0, r3
 8009c56:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8009c58:	f7ff fe4c 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f00c ff39 	bl	8016ad6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8009c64:	f7ff fe46 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f00c ffaa 	bl	8016bc4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	0801d8e8 	.word	0x0801d8e8

08009c80 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8009c80:	b480      	push	{r7}
 8009c82:	b083      	sub	sp, #12
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	6039      	str	r1, [r7, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	4611      	mov	r1, r2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff ffe9 	bl	8009c80 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	605a      	str	r2, [r3, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	3208      	adds	r2, #8
 8009cbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cc2:	e883 0003 	stmia.w	r3, {r0, r1}
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8009cd0:	b590      	push	{r4, r7, lr}
 8009cd2:	b089      	sub	sp, #36	; 0x24
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8009cde:	4b10      	ldr	r3, [pc, #64]	; (8009d20 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8009ce0:	61bb      	str	r3, [r7, #24]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61fb      	str	r3, [r7, #28]
 8009ce6:	f107 0008 	add.w	r0, r7, #8
 8009cea:	f107 0318 	add.w	r3, r7, #24
 8009cee:	cb0c      	ldmia	r3, {r2, r3}
 8009cf0:	6879      	ldr	r1, [r7, #4]
 8009cf2:	f000 f85f 	bl	8009db4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009cf6:	f107 0308 	add.w	r3, r7, #8
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	f7ff ffcb 	bl	8009c98 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fa0a 	bl	800a120 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8009d18:	bf00      	nop
 8009d1a:	3724      	adds	r7, #36	; 0x24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd90      	pop	{r4, r7, pc}
 8009d20:	08009d25 	.word	0x08009d25

08009d24 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af02      	add	r7, sp, #8
 8009d2a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009d38:	461a      	mov	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009d40:	9300      	str	r3, [sp, #0]
 8009d42:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8009d44:	4804      	ldr	r0, [pc, #16]	; (8009d58 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8009d46:	f000 f867 	bl	8009e18 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	2401a9f8 	.word	0x2401a9f8
 8009d58:	2401a9f4 	.word	0x2401a9f4

08009d5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	4a04      	ldr	r2, [pc, #16]	; (8009d78 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	601a      	str	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	0801d9cc 	.word	0x0801d9cc

08009d7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff ffe8 	bl	8009d5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8009d8c:	4a08      	ldr	r2, [pc, #32]	; (8009db0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2200      	movs	r2, #0
 8009d96:	605a      	str	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	609a      	str	r2, [r3, #8]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	60da      	str	r2, [r3, #12]
    {
    }
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	0801d93c 	.word	0x0801d93c

08009db4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff ffc8 	bl	8009d5c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8009dcc:	4a08      	ldr	r2, [pc, #32]	; (8009df0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	601a      	str	r2, [r3, #0]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	605a      	str	r2, [r3, #4]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	3308      	adds	r3, #8
 8009ddc:	463a      	mov	r2, r7
 8009dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009de2:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	0801d93c 	.word	0x0801d93c

08009df4 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7ff fd94 	bl	800992c <_ZN8touchgfx10TransitionC1Ev>
 8009e04:	4a03      	ldr	r2, [pc, #12]	; (8009e14 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	0801d8c4 	.word	0x0801d8c4

08009e18 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 8009e18:	b590      	push	{r4, r7, lr}
 8009e1a:	b08f      	sub	sp, #60	; 0x3c
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	689b      	ldr	r3, [r3, #8]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3320      	adds	r3, #32
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4610      	mov	r0, r2
 8009e36:	4798      	blx	r3
 8009e38:	4603      	mov	r3, r0
 8009e3a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8009e3e:	d205      	bcs.n	8009e4c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 8009e40:	4b7d      	ldr	r3, [pc, #500]	; (800a038 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8009e42:	4a7e      	ldr	r2, [pc, #504]	; (800a03c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8009e44:	21a3      	movs	r1, #163	; 0xa3
 8009e46:	487e      	ldr	r0, [pc, #504]	; (800a040 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8009e48:	f011 ff54 	bl	801bcf4 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3320      	adds	r3, #32
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	4798      	blx	r3
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b0f      	cmp	r3, #15
 8009e62:	d805      	bhi.n	8009e70 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8009e64:	4b77      	ldr	r3, [pc, #476]	; (800a044 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8009e66:	4a75      	ldr	r2, [pc, #468]	; (800a03c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8009e68:	21a4      	movs	r1, #164	; 0xa4
 8009e6a:	4875      	ldr	r0, [pc, #468]	; (800a040 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8009e6c:	f011 ff42 	bl	801bcf4 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3320      	adds	r3, #32
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4610      	mov	r0, r2
 8009e80:	4798      	blx	r3
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b0b      	cmp	r3, #11
 8009e86:	d805      	bhi.n	8009e94 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 8009e88:	4b6f      	ldr	r3, [pc, #444]	; (800a048 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8009e8a:	4a6c      	ldr	r2, [pc, #432]	; (800a03c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8009e8c:	21a5      	movs	r1, #165	; 0xa5
 8009e8e:	486c      	ldr	r0, [pc, #432]	; (800a040 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8009e90:	f011 ff30 	bl	801bcf4 <__assert_func>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8009ea0:	f005 ff7a 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff fcea 	bl	8009880 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8009eac:	6a3b      	ldr	r3, [r7, #32]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d008      	beq.n	8009ec6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 8009eb4:	6a3b      	ldr	r3, [r7, #32]
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	330c      	adds	r3, #12
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	4798      	blx	r3
    if (*currentTrans)
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	6a3b      	ldr	r3, [r7, #32]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4610      	mov	r0, r2
 8009edc:	4798      	blx	r3
    if (*currentScreen)
 8009ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d008      	beq.n	8009ef8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 8009ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3314      	adds	r3, #20
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4610      	mov	r0, r2
 8009ef6:	4798      	blx	r3
    if (*currentPresenter)
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d008      	beq.n	8009f12 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4610      	mov	r0, r2
 8009f10:	4798      	blx	r3
    if (*currentScreen)
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d007      	beq.n	8009f2a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 8009f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4610      	mov	r0, r2
 8009f28:	4798      	blx	r3
    if (*currentPresenter)
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d008      	beq.n	8009f44 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4610      	mov	r0, r2
 8009f42:	4798      	blx	r3
}
 8009f44:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	2100      	movs	r1, #0
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f000 f87d 	bl	800a04c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8009f52:	4603      	mov	r3, r0
 8009f54:	4619      	mov	r1, r3
 8009f56:	200c      	movs	r0, #12
 8009f58:	f7ff fbfc 	bl	8009754 <_ZnwjPv>
 8009f5c:	4604      	mov	r4, r0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	f7ff ff48 	bl	8009df4 <_ZN8touchgfx12NoTransitionC1Ev>
 8009f64:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 f880 	bl	800a072 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 8009f72:	4603      	mov	r3, r0
 8009f74:	4619      	mov	r1, r3
 8009f76:	f44f 7088 	mov.w	r0, #272	; 0x110
 8009f7a:	f7ff fbeb 	bl	8009754 <_ZnwjPv>
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4620      	mov	r0, r4
 8009f82:	f001 fc3b 	bl	800b7fc <_ZN10screenViewC1Ev>
 8009f86:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f000 f882 	bl	800a098 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 8009f94:	4603      	mov	r3, r0
 8009f96:	4619      	mov	r1, r3
 8009f98:	2010      	movs	r0, #16
 8009f9a:	f7ff fbdb 	bl	8009754 <_ZnwjPv>
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fa2:	4620      	mov	r0, r4
 8009fa4:	f001 fbd2 	bl	800b74c <_ZN15screenPresenterC1ER10screenView>
 8009fa8:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fae:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb4:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fba:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	e000      	b.n	8009fca <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009fce:	f7ff fd9d 	bl	8009b0c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7ff fe0a 	bl	8009bf2 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f86b 	bl	800a0be <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	61fb      	str	r3, [r7, #28]
 8009fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fee:	61bb      	str	r3, [r7, #24]
 8009ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ff2:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	330c      	adds	r3, #12
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	69f8      	ldr	r0, [r7, #28]
 8009ffe:	4798      	blx	r3
    newPresenter->activate();
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69b8      	ldr	r0, [r7, #24]
 800a008:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a00a:	6979      	ldr	r1, [r7, #20]
 800a00c:	69f8      	ldr	r0, [r7, #28]
 800a00e:	f007 fb87 	bl	8011720 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	3310      	adds	r3, #16
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	4798      	blx	r3
    newTransition->invalidate();
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3314      	adds	r3, #20
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6978      	ldr	r0, [r7, #20]
 800a028:	4798      	blx	r3
}
 800a02a:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a02e:	4618      	mov	r0, r3
 800a030:	373c      	adds	r7, #60	; 0x3c
 800a032:	46bd      	mov	sp, r7
 800a034:	bd90      	pop	{r4, r7, pc}
 800a036:	bf00      	nop
 800a038:	0801ce3c 	.word	0x0801ce3c
 800a03c:	0801cecc 	.word	0x0801cecc
 800a040:	0801cfd0 	.word	0x0801cfd0
 800a044:	0801d014 	.word	0x0801d014
 800a048:	0801d0b8 	.word	0x0801d0b8

0800a04c <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	460b      	mov	r3, r1
 800a056:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	3324      	adds	r3, #36	; 0x24
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	887a      	ldrh	r2, [r7, #2]
 800a062:	4611      	mov	r1, r2
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
 800a068:	4603      	mov	r3, r0
    }
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800a072:	b580      	push	{r7, lr}
 800a074:	b082      	sub	sp, #8
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3324      	adds	r3, #36	; 0x24
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	887a      	ldrh	r2, [r7, #2]
 800a088:	4611      	mov	r1, r2
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	4798      	blx	r3
 800a08e:	4603      	mov	r3, r0
    }
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3324      	adds	r3, #36	; 0x24
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	887a      	ldrh	r2, [r7, #2]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4798      	blx	r3
 800a0b4:	4603      	mov	r3, r0
    }
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a0ce:	bf00      	nop
 800a0d0:	370c      	adds	r7, #12
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
	...

0800a0dc <_ZN8touchgfx12NoTransitionD1Ev>:
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	4a05      	ldr	r2, [pc, #20]	; (800a0fc <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	601a      	str	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7ff fc33 	bl	8009958 <_ZN8touchgfx10TransitionD1Ev>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	0801d8c4 	.word	0x0801d8c4

0800a100 <_ZN8touchgfx12NoTransitionD0Ev>:
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff ffe7 	bl	800a0dc <_ZN8touchgfx12NoTransitionD1Ev>
 800a10e:	210c      	movs	r1, #12
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f011 fdc0 	bl	801bc96 <_ZdlPvj>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4618      	mov	r0, r3
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	4a05      	ldr	r2, [pc, #20]	; (800a140 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	601a      	str	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4618      	mov	r0, r3
 800a132:	f7ff fbb3 	bl	800989c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4618      	mov	r0, r3
 800a13a:	3708      	adds	r7, #8
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	0801d93c 	.word	0x0801d93c

0800a144 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f7ff ffe7 	bl	800a120 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a152:	2110      	movs	r1, #16
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f011 fd9e 	bl	801bc96 <_ZdlPvj>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4618      	mov	r0, r3
 800a15e:	3708      	adds	r7, #8
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	68d2      	ldr	r2, [r2, #12]
 800a174:	1052      	asrs	r2, r2, #1
 800a176:	1899      	adds	r1, r3, r2
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	e00a      	b.n	800a1a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	68d2      	ldr	r2, [r2, #12]
 800a192:	1052      	asrs	r2, r2, #1
 800a194:	4413      	add	r3, r2
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6892      	ldr	r2, [r2, #8]
 800a19c:	4413      	add	r3, r2
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	4798      	blx	r3
    }
 800a1a4:	bf00      	nop
 800a1a6:	3708      	adds	r7, #8
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d010      	beq.n	800a1de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d107      	bne.n	800a1d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e000      	b.n	800a1d6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d001      	beq.n	800a1de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e000      	b.n	800a1e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a1de:	2300      	movs	r3, #0
    }
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	370c      	adds	r7, #12
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr

0800a1ec <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800a1ec:	b480      	push	{r7}
 800a1ee:	b083      	sub	sp, #12
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
        : color(0)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
    {
    }
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
        : color(col)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	601a      	str	r2, [r3, #0]
    {
    }
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4618      	mov	r0, r3
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	801a      	strh	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	805a      	strh	r2, [r3, #2]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	809a      	strh	r2, [r3, #4]
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	80da      	strh	r2, [r3, #6]
    {
    }
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	460b      	mov	r3, r1
 800a25e:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	887a      	ldrh	r2, [r7, #2]
 800a264:	801a      	strh	r2, [r3, #0]
    {
    }
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	4618      	mov	r0, r3
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	791b      	ldrb	r3, [r3, #4]
    }
 800a280:	4618      	mov	r0, r3
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a294:	4a14      	ldr	r2, [pc, #80]	; (800a2e8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	601a      	str	r2, [r3, #0]
        : rect(),
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3304      	adds	r3, #4
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f7ff ffc1 	bl	800a226 <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	330c      	adds	r3, #12
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7ff ffbc 	bl	800a226 <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0801e524 	.word	0x0801e524

0800a2ec <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
    {
 800a2f4:	4a04      	ldr	r2, [pc, #16]	; (800a308 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	601a      	str	r2, [r3, #0]
    }
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	0801e524 	.word	0x0801e524

0800a30c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
    }
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff ffe9 	bl	800a2ec <_ZN8touchgfx8DrawableD1Ev>
 800a31a:	2128      	movs	r1, #40	; 0x28
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f011 fcba 	bl	801bc96 <_ZdlPvj>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4618      	mov	r0, r3
 800a326:	3708      	adds	r7, #8
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d005      	beq.n	800a34a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3314      	adds	r3, #20
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	4798      	blx	r3
        }
    }
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800a352:	b480      	push	{r7}
 800a354:	b083      	sub	sp, #12
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a35a:	2300      	movs	r3, #0
    }
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	4608      	mov	r0, r1
 800a372:	4611      	mov	r1, r2
 800a374:	461a      	mov	r2, r3
 800a376:	4603      	mov	r3, r0
 800a378:	817b      	strh	r3, [r7, #10]
 800a37a:	460b      	mov	r3, r1
 800a37c:	813b      	strh	r3, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800a382:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a386:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a38a:	4619      	mov	r1, r3
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 f82a 	bl	800a3e6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800a392:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a396:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a39a:	4619      	mov	r1, r3
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 f87e 	bl	800a49e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800a3a2:	bf00      	nop
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	887a      	ldrh	r2, [r7, #2]
 800a3ba:	809a      	strh	r2, [r3, #4]
    }
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	887a      	ldrh	r2, [r7, #2]
 800a3d8:	80da      	strh	r2, [r3, #6]
    }
 800a3da:	bf00      	nop
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	807b      	strh	r3, [r7, #2]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3330      	adds	r3, #48	; 0x30
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a402:	4611      	mov	r1, r2
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	4798      	blx	r3
        setY(y);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	3334      	adds	r3, #52	; 0x34
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a414:	4611      	mov	r1, r2
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
    }
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800a422:	b480      	push	{r7}
 800a424:	b083      	sub	sp, #12
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	887a      	ldrh	r2, [r7, #2]
 800a432:	811a      	strh	r2, [r3, #8]
    }
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	460b      	mov	r3, r1
 800a44a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	887a      	ldrh	r2, [r7, #2]
 800a450:	815a      	strh	r2, [r3, #10]
    }
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
    {
    }
 800a466:	bf00      	nop
 800a468:	370c      	adds	r7, #12
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr

0800a472 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a47c:	bf00      	nop
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a492:	bf00      	nop
 800a494:	370c      	adds	r7, #12
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b082      	sub	sp, #8
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	807b      	strh	r3, [r7, #2]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	3338      	adds	r3, #56	; 0x38
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	4798      	blx	r3
        setHeight(height);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	333c      	adds	r3, #60	; 0x3c
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	4798      	blx	r3
    }
 800a4d2:	bf00      	nop
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
    {
    }
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	807b      	strh	r3, [r7, #2]
 800a564:	4613      	mov	r3, r2
 800a566:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	3354      	adds	r3, #84	; 0x54
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	8879      	ldrh	r1, [r7, #2]
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a578:	b292      	uxth	r2, r2
 800a57a:	1a8a      	subs	r2, r1, r2
 800a57c:	b292      	uxth	r2, r2
 800a57e:	b210      	sxth	r0, r2
 800a580:	8839      	ldrh	r1, [r7, #0]
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a588:	b292      	uxth	r2, r2
 800a58a:	1a8a      	subs	r2, r1, r2
 800a58c:	b292      	uxth	r2, r2
 800a58e:	b212      	sxth	r2, r2
 800a590:	4601      	mov	r1, r0
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
    }
 800a596:	bf00      	nop
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5ac:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5b4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5bc:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800a5be:	bf00      	nop
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	60b9      	str	r1, [r7, #8]
 800a5d4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f7ff ffe1 	bl	800a59e <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]
    }
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fe44 	bl	800a28c <_ZN8touchgfx8DrawableC1Ev>
 800a604:	4a05      	ldr	r2, [pc, #20]	; (800a61c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	0801e154 	.word	0x0801e154

0800a620 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
    {
 800a640:	4a06      	ldr	r2, [pc, #24]	; (800a65c <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	601a      	str	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3304      	adds	r3, #4
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f91a 	bl	800a884 <_ZN8touchgfx9ContainerD1Ev>
    }
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4618      	mov	r0, r3
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	0801e628 	.word	0x0801e628

0800a660 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
    }
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f7ff ffe5 	bl	800a638 <_ZN8touchgfx6ScreenD1Ev>
 800a66e:	213c      	movs	r1, #60	; 0x3c
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f011 fb10 	bl	801bc96 <_ZdlPvj>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
    {
    }
 800a688:	bf00      	nop
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
    {
    }
 800a69c:	bf00      	nop
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
    {
    }
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
    {
    }
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800a6d0:	b480      	push	{r7}
 800a6d2:	b083      	sub	sp, #12
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	6839      	ldr	r1, [r7, #0]
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f003 f865 	bl	800d7c8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800a706:	b580      	push	{r7, lr}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	60f8      	str	r0, [r7, #12]
 800a70e:	607b      	str	r3, [r7, #4]
 800a710:	460b      	mov	r3, r1
 800a712:	817b      	strh	r3, [r7, #10]
 800a714:	4613      	mov	r3, r2
 800a716:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff ff02 	bl	800a524 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d008      	beq.n	800a738 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	4618      	mov	r0, r3
 800a72a:	f7ff ff08 	bl	800a53e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800a734:	2301      	movs	r3, #1
 800a736:	e000      	b.n	800a73a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800a738:	2300      	movs	r3, #0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
        }
    }
 800a744:	bf00      	nop
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fd98 	bl	800a28c <_ZN8touchgfx8DrawableC1Ev>
 800a75c:	4a03      	ldr	r2, [pc, #12]	; (800a76c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	601a      	str	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4618      	mov	r0, r3
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	0801dc48 	.word	0x0801dc48

0800a770 <_ZN8touchgfx6WidgetD1Ev>:
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	4a05      	ldr	r2, [pc, #20]	; (800a790 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4618      	mov	r0, r3
 800a782:	f7ff fdb3 	bl	800a2ec <_ZN8touchgfx8DrawableD1Ev>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	4618      	mov	r0, r3
 800a78a:	3708      	adds	r7, #8
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	0801dc48 	.word	0x0801dc48

0800a794 <_ZN8touchgfx6WidgetD0Ev>:
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7ff ffe7 	bl	800a770 <_ZN8touchgfx6WidgetD1Ev>
 800a7a2:	2128      	movs	r1, #40	; 0x28
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f011 fa76 	bl	801bc96 <_ZdlPvj>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	2326      	movs	r3, #38	; 0x26
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	f011 fc9a 	bl	801c0fe <memset>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff ffbd 	bl	800a74c <_ZN8touchgfx6WidgetC1Ev>
 800a7d2:	4a09      	ldr	r2, [pc, #36]	; (800a7f8 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	22ff      	movs	r2, #255	; 0xff
 800a7dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3328      	adds	r3, #40	; 0x28
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7ff fd0e 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	0801e33c 	.word	0x0801e33c

0800a7fc <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	460b      	mov	r3, r1
 800a822:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	78fa      	ldrb	r2, [r7, #3]
 800a828:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
 800a840:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	2326      	movs	r3, #38	; 0x26
 800a848:	461a      	mov	r2, r3
 800a84a:	2100      	movs	r1, #0
 800a84c:	f011 fc57 	bl	801c0fe <memset>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff ff7a 	bl	800a74c <_ZN8touchgfx6WidgetC1Ev>
 800a858:	4a09      	ldr	r2, [pc, #36]	; (800a880 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	601a      	str	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	8812      	ldrh	r2, [r2, #0]
 800a864:	84da      	strh	r2, [r3, #38]	; 0x26
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	22ff      	movs	r2, #255	; 0xff
 800a86a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f004 f9ea 	bl	800ec4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	0801e40c 	.word	0x0801e40c

0800a884 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	4a05      	ldr	r2, [pc, #20]	; (800a8a4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4618      	mov	r0, r3
 800a896:	f7ff fd29 	bl	800a2ec <_ZN8touchgfx8DrawableD1Ev>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	0801e154 	.word	0x0801e154

0800a8a8 <_ZN8touchgfx9ContainerD0Ev>:
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f7ff ffe7 	bl	800a884 <_ZN8touchgfx9ContainerD1Ev>
 800a8b6:	212c      	movs	r1, #44	; 0x2c
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f011 f9ec 	bl	801bc96 <_ZdlPvj>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3708      	adds	r7, #8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fe8e 	bl	800a5f4 <_ZN8touchgfx9ContainerC1Ev>
 800a8d8:	4a0b      	ldr	r2, [pc, #44]	; (800a908 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	22ff      	movs	r2, #255	; 0xff
 800a8ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fe03 	bl	800a504 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	0801dbac 	.word	0x0801dbac

0800a90c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	78fa      	ldrb	r2, [r7, #3]
 800a91c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	338c      	adds	r3, #140	; 0x8c
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
    }
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800a94e:	b480      	push	{r7}
 800a950:	b083      	sub	sp, #12
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800a95c:	4618      	mov	r0, r3
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a974:	2b00      	cmp	r3, #0
 800a976:	d00d      	beq.n	800a994 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	330c      	adds	r3, #12
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4610      	mov	r0, r2
 800a988:	4798      	blx	r3
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d001      	beq.n	800a994 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800a990:	2301      	movs	r3, #1
 800a992:	e000      	b.n	800a996 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800a994:	2300      	movs	r3, #0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d009      	beq.n	800a9ae <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6879      	ldr	r1, [r7, #4]
 800a9aa:	4610      	mov	r0, r2
 800a9ac:	4798      	blx	r3
        }
    }
 800a9ae:	bf00      	nop
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800a9b6:	b480      	push	{r7}
 800a9b8:	b083      	sub	sp, #12
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
    {
    }
 800a9be:	bf00      	nop
 800a9c0:	370c      	adds	r7, #12
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
    {
    }
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	4a05      	ldr	r2, [pc, #20]	; (800aa00 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	601a      	str	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff febd 	bl	800a770 <_ZN8touchgfx6WidgetD1Ev>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3708      	adds	r7, #8
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	0801e40c 	.word	0x0801e40c

0800aa04 <_ZN8touchgfx5ImageD0Ev>:
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f7ff ffe7 	bl	800a9e0 <_ZN8touchgfx5ImageD1Ev>
 800aa12:	212c      	movs	r1, #44	; 0x2c
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f011 f93e 	bl	801bc96 <_ZdlPvj>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	4a05      	ldr	r2, [pc, #20]	; (800aa44 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7ff fe9b 	bl	800a770 <_ZN8touchgfx6WidgetD1Ev>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	0801e33c 	.word	0x0801e33c

0800aa48 <_ZN8touchgfx3BoxD0Ev>:
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f7ff ffe7 	bl	800aa24 <_ZN8touchgfx3BoxD1Ev>
 800aa56:	212c      	movs	r1, #44	; 0x2c
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f011 f91c 	bl	801bc96 <_ZdlPvj>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4618      	mov	r0, r3
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7ff fe9e 	bl	800a7b4 <_ZN8touchgfx3BoxC1Ev>
 800aa78:	4a08      	ldr	r2, [pc, #32]	; (800aa9c <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	601a      	str	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	332c      	adds	r3, #44	; 0x2c
 800aa82:	2100      	movs	r1, #0
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7ff fbbf 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	0801e3a4 	.word	0x0801e3a4

0800aaa0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	887a      	ldrh	r2, [r7, #2]
 800aacc:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800aace:	bf00      	nop
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800aada:	b580      	push	{r7, lr}
 800aadc:	b084      	sub	sp, #16
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
 800aae2:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff ff24 	bl	800a934 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800aaec:	4603      	mov	r3, r0
 800aaee:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800aaf0:	6838      	ldr	r0, [r7, #0]
 800aaf2:	f7ff fbbf 	bl	800a274 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bf0c      	ite	eq
 800aafc:	2301      	moveq	r3, #1
 800aafe:	2300      	movne	r3, #0
 800ab00:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	f083 0301 	eor.w	r3, r3, #1
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d108      	bne.n	800ab26 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800ab14:	7bbb      	ldrb	r3, [r7, #14]
 800ab16:	f083 0301 	eor.w	r3, r3, #1
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00f      	beq.n	800ab40 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800ab20:	7bfb      	ldrb	r3, [r7, #15]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d00c      	beq.n	800ab40 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7bba      	ldrb	r2, [r7, #14]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff feed 	bl	800a90c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3314      	adds	r3, #20
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d007      	beq.n	800ab56 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800ab46:	6838      	ldr	r0, [r7, #0]
 800ab48:	f7ff fb94 	bl	800a274 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d101      	bne.n	800ab56 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800ab52:	2301      	movs	r3, #1
 800ab54:	e000      	b.n	800ab58 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800ab56:	2300      	movs	r3, #0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d006      	beq.n	800ab6a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	3388      	adds	r3, #136	; 0x88
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4610      	mov	r0, r2
 800ab68:	4798      	blx	r3
        }
    }
 800ab6a:	bf00      	nop
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
	...

0800ab74 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b082      	sub	sp, #8
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	4a05      	ldr	r2, [pc, #20]	; (800ab94 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	601a      	str	r2, [r3, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff fe7d 	bl	800a884 <_ZN8touchgfx9ContainerD1Ev>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	0801dbac 	.word	0x0801dbac

0800ab98 <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b082      	sub	sp, #8
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff ffe7 	bl	800ab74 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800aba6:	2134      	movs	r1, #52	; 0x34
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f011 f874 	bl	801bc96 <_ZdlPvj>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	4a05      	ldr	r2, [pc, #20]	; (800abd8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7ff fd35 	bl	800a638 <_ZN8touchgfx6ScreenD1Ev>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4618      	mov	r0, r3
 800abd2:	3708      	adds	r7, #8
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	0801dadc 	.word	0x0801dadc

0800abdc <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f7ff ffe7 	bl	800abb8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800abea:	2140      	movs	r1, #64	; 0x40
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f011 f852 	bl	801bc96 <_ZdlPvj>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4618      	mov	r0, r3
 800abf6:	3708      	adds	r7, #8
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <_ZN14screenViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

screenViewBase::screenViewBase()
 800abfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac00:	b090      	sub	sp, #64	; 0x40
 800ac02:	af02      	add	r7, sp, #8
 800ac04:	6078      	str	r0, [r7, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 f959 	bl	800aec0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800ac0e:	4a8c      	ldr	r2, [pc, #560]	; (800ae40 <_ZN14screenViewBaseC1Ev+0x244>)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3340      	adds	r3, #64	; 0x40
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff fdcb 	bl	800a7b4 <_ZN8touchgfx3BoxC1Ev>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7ff fb11 	bl	800a254 <_ZN8touchgfx6BitmapC1Et>
 800ac32:	f107 030c 	add.w	r3, r7, #12
 800ac36:	4619      	mov	r1, r3
 800ac38:	4620      	mov	r0, r4
 800ac3a:	f7ff fdfd 	bl	800a838 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	3398      	adds	r3, #152	; 0x98
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 f9a8 	bl	800af98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
{
    __background.setPosition(0, 0, 480, 272);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ac4e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	f7ff fb84 	bl	800a368 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ac66:	2300      	movs	r3, #0
 800ac68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ac72:	2300      	movs	r3, #0
 800ac74:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ac78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac7c:	041b      	lsls	r3, r3, #16
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ac84:	021b      	lsls	r3, r3, #8
 800ac86:	431a      	orrs	r2, r3
 800ac88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ac92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac96:	4611      	mov	r1, r2
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7ff fab5 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	4619      	mov	r1, r3
 800aca2:	4620      	mov	r0, r4
 800aca4:	f7ff fdaa 	bl	800a7fc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	3340      	adds	r3, #64	; 0x40
 800acae:	4619      	mov	r1, r3
 800acb0:	4610      	mov	r0, r2
 800acb2:	f7ff fd19 	bl	800a6e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	336c      	adds	r3, #108	; 0x6c
 800acba:	2200      	movs	r2, #0
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fb91 	bl	800a3e6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_MY_BACKGROUND_ID));
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800acca:	f107 0310 	add.w	r3, r7, #16
 800acce:	2100      	movs	r1, #0
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fabf 	bl	800a254 <_ZN8touchgfx6BitmapC1Et>
 800acd6:	f107 0310 	add.w	r3, r7, #16
 800acda:	4619      	mov	r1, r3
 800acdc:	4620      	mov	r0, r4
 800acde:	f003 ffb4 	bl	800ec4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	336c      	adds	r3, #108	; 0x6c
 800ace8:	4619      	mov	r1, r3
 800acea:	4610      	mov	r0, r2
 800acec:	f7ff fcfc 	bl	800a6e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    flexButton1.setBoxWithBorderPosition(0, 0, 140, 52);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800acf6:	2334      	movs	r3, #52	; 0x34
 800acf8:	9300      	str	r3, [sp, #0]
 800acfa:	238c      	movs	r3, #140	; 0x8c
 800acfc:	2200      	movs	r2, #0
 800acfe:	2100      	movs	r1, #0
 800ad00:	f000 f98a 	bl	800b018 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1.setBorderSize(5);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3398      	adds	r3, #152	; 0x98
 800ad08:	2105      	movs	r1, #5
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 f9a4 	bl	800b058 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800ad16:	2300      	movs	r3, #0
 800ad18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ad1c:	2366      	movs	r3, #102	; 0x66
 800ad1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800ad22:	2399      	movs	r3, #153	; 0x99
 800ad24:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800ad28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ad2c:	041b      	lsls	r3, r3, #16
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	431a      	orrs	r2, r3
 800ad38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ad42:	f107 0320 	add.w	r3, r7, #32
 800ad46:	4611      	mov	r1, r2
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7ff fa5d 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
 800ad4e:	6a3b      	ldr	r3, [r7, #32]
 800ad50:	461d      	mov	r5, r3
 800ad52:	2300      	movs	r3, #0
 800ad54:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800ad58:	2399      	movs	r3, #153	; 0x99
 800ad5a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800ad5e:	23cc      	movs	r3, #204	; 0xcc
 800ad60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad64:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800ad68:	041b      	lsls	r3, r3, #16
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800ad70:	021b      	lsls	r3, r3, #8
 800ad72:	431a      	orrs	r2, r3
 800ad74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ad7e:	f107 031c 	add.w	r3, r7, #28
 800ad82:	4611      	mov	r1, r2
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7ff fa3f 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
 800ad8a:	69fb      	ldr	r3, [r7, #28]
 800ad8c:	461e      	mov	r6, r3
 800ad8e:	2300      	movs	r3, #0
 800ad90:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800ad94:	2333      	movs	r3, #51	; 0x33
 800ad96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad9a:	2366      	movs	r3, #102	; 0x66
 800ad9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ada0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ada4:	041b      	lsls	r3, r3, #16
 800ada6:	461a      	mov	r2, r3
 800ada8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	431a      	orrs	r2, r3
 800adb0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800adb4:	4313      	orrs	r3, r2
 800adb6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800adba:	f107 0318 	add.w	r3, r7, #24
 800adbe:	4611      	mov	r1, r2
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fa21 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
 800adc6:	69bb      	ldr	r3, [r7, #24]
 800adc8:	4698      	mov	r8, r3
 800adca:	2333      	movs	r3, #51	; 0x33
 800adcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800add0:	2366      	movs	r3, #102	; 0x66
 800add2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800add6:	2399      	movs	r3, #153	; 0x99
 800add8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800addc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ade0:	041b      	lsls	r3, r3, #16
 800ade2:	461a      	mov	r2, r3
 800ade4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	431a      	orrs	r2, r3
 800adec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800adf0:	4313      	orrs	r3, r2
 800adf2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800adf6:	f107 0314 	add.w	r3, r7, #20
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f7ff fa03 	bl	800a208 <_ZN8touchgfx9colortypeC1Em>
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	4643      	mov	r3, r8
 800ae08:	4632      	mov	r2, r6
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 f935 	bl	800b07c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1.setPosition(22, 31, 140, 52);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800ae18:	2334      	movs	r3, #52	; 0x34
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	238c      	movs	r3, #140	; 0x8c
 800ae1e:	221f      	movs	r2, #31
 800ae20:	2116      	movs	r1, #22
 800ae22:	f7ff faa1 	bl	800a368 <_ZN8touchgfx8Drawable11setPositionEssss>
    add(flexButton1);
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	3398      	adds	r3, #152	; 0x98
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	4610      	mov	r0, r2
 800ae30:	f7ff fc5a 	bl	800a6e8 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4618      	mov	r0, r3
 800ae38:	3738      	adds	r7, #56	; 0x38
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae40:	0801da0c 	.word	0x0801da0c

0800ae44 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	4a0d      	ldr	r2, [pc, #52]	; (800ae84 <_ZN14screenViewBaseD1Ev+0x40>)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3398      	adds	r3, #152	; 0x98
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 f960 	bl	800b11c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	336c      	adds	r3, #108	; 0x6c
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff fdbd 	bl	800a9e0 <_ZN8touchgfx5ImageD1Ev>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	3340      	adds	r3, #64	; 0x40
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7ff fdda 	bl	800aa24 <_ZN8touchgfx3BoxD1Ev>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7ff fea0 	bl	800abb8 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
{

}
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	0801da0c 	.word	0x0801da0c

0800ae88 <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
}
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f7ff ffd7 	bl	800ae44 <_ZN14screenViewBaseD1Ev>
 800ae96:	f44f 7188 	mov.w	r1, #272	; 0x110
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f010 fefb 	bl	801bc96 <_ZdlPvj>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	4618      	mov	r0, r3
 800aea4:	3708      	adds	r7, #8
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]

}
 800aeb2:	bf00      	nop
 800aeb4:	370c      	adds	r7, #12
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
	...

0800aec0 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f006 fa7c 	bl	80113c8 <_ZN8touchgfx6ScreenC1Ev>
 800aed0:	4a05      	ldr	r2, [pc, #20]	; (800aee8 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4618      	mov	r0, r3
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	0801dadc 	.word	0x0801dadc

0800aeec <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff fce6 	bl	800a8c8 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800aefc:	4a03      	ldr	r2, [pc, #12]	; (800af0c <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4618      	mov	r0, r3
 800af06:	3708      	adds	r7, #8
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	0801db10 	.word	0x0801db10

0800af10 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	4a05      	ldr	r2, [pc, #20]	; (800af30 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4618      	mov	r0, r3
 800af22:	f7ff fe27 	bl	800ab74 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	0801db10 	.word	0x0801db10

0800af34 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f7ff ffe7 	bl	800af10 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800af42:	2134      	movs	r1, #52	; 0x34
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f010 fea6 	bl	801bc96 <_ZdlPvj>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	4a05      	ldr	r2, [pc, #20]	; (800af74 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	601a      	str	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff fd5d 	bl	800aa24 <_ZN8touchgfx3BoxD1Ev>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	0801e3a4 	.word	0x0801e3a4

0800af78 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff ffe7 	bl	800af54 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800af86:	2134      	movs	r1, #52	; 0x34
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f010 fe84 	bl	801bc96 <_ZdlPvj>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	3708      	adds	r7, #8
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class BoxWithBorderButtonStyle : public T
{
public:
    BoxWithBorderButtonStyle()
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4618      	mov	r0, r3
 800afa4:	2334      	movs	r3, #52	; 0x34
 800afa6:	461a      	mov	r2, r3
 800afa8:	2100      	movs	r1, #0
 800afaa:	f011 f8a8 	bl	801c0fe <memset>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7ff ff9b 	bl	800aeec <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800afb6:	4a17      	ldr	r2, [pc, #92]	; (800b014 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	601a      	str	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3334      	adds	r3, #52	; 0x34
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff fd51 	bl	800aa68 <_ZN8touchgfx13BoxWithBorderC1Ev>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3368      	adds	r3, #104	; 0x68
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff f90e 	bl	800a1ec <_ZN8touchgfx9colortypeC1Ev>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	336c      	adds	r3, #108	; 0x6c
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff f909 	bl	800a1ec <_ZN8touchgfx9colortypeC1Ev>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	3370      	adds	r3, #112	; 0x70
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff f904 	bl	800a1ec <_ZN8touchgfx9colortypeC1Ev>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	3374      	adds	r3, #116	; 0x74
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff f8ff 	bl	800a1ec <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3334      	adds	r3, #52	; 0x34
 800aff2:	2200      	movs	r2, #0
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff f9f5 	bl	800a3e6 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	3334      	adds	r3, #52	; 0x34
 800b002:	4619      	mov	r1, r3
 800b004:	4610      	mov	r0, r2
 800b006:	f002 fbdf 	bl	800d7c8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	0801da40 	.word	0x0801da40

0800b018 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af02      	add	r7, sp, #8
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	4608      	mov	r0, r1
 800b022:	4611      	mov	r1, r2
 800b024:	461a      	mov	r2, r3
 800b026:	4603      	mov	r3, r0
 800b028:	817b      	strh	r3, [r7, #10]
 800b02a:	460b      	mov	r3, r1
 800b02c:	813b      	strh	r3, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b038:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800b03c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b040:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b044:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	4623      	mov	r3, r4
 800b04c:	f7ff f98c 	bl	800a368 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800b050:	bf00      	nop
 800b052:	3714      	adds	r7, #20
 800b054:	46bd      	mov	sp, r7
 800b056:	bd90      	pop	{r4, r7, pc}

0800b058 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3334      	adds	r3, #52	; 0x34
 800b068:	78fa      	ldrb	r2, [r7, #3]
 800b06a:	b292      	uxth	r2, r2
 800b06c:	4611      	mov	r1, r2
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff fd24 	bl	800aabc <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	60f8      	str	r0, [r7, #12]
 800b084:	60b9      	str	r1, [r7, #8]
 800b086:	607a      	str	r2, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	338c      	adds	r3, #140	; 0x8c
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	4798      	blx	r3
    }
 800b0ae:	bf00      	nop
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800b0b6:	b590      	push	{r4, r7, lr}
 800b0b8:	b083      	sub	sp, #12
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7ff fc34 	bl	800a934 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d002      	beq.n	800b0d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	336c      	adds	r3, #108	; 0x6c
 800b0d6:	e001      	b.n	800b0dc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3368      	adds	r3, #104	; 0x68
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff fb8c 	bl	800a7fc <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff fc21 	bl	800a934 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d002      	beq.n	800b0fe <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3374      	adds	r3, #116	; 0x74
 800b0fc:	e001      	b.n	800b102 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	3370      	adds	r3, #112	; 0x70
 800b102:	6819      	ldr	r1, [r3, #0]
 800b104:	4620      	mov	r0, r4
 800b106:	f7ff fccb 	bl	800aaa0 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff fc52 	bl	800a9b6 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800b112:	bf00      	nop
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	bd90      	pop	{r4, r7, pc}
	...

0800b11c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	4a08      	ldr	r2, [pc, #32]	; (800b148 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	3334      	adds	r3, #52	; 0x34
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff ff10 	bl	800af54 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4618      	mov	r0, r3
 800b138:	f7ff feea 	bl	800af10 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4618      	mov	r0, r3
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	0801da40 	.word	0x0801da40

0800b14c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7ff ffe1 	bl	800b11c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800b15a:	2178      	movs	r1, #120	; 0x78
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f010 fd9a 	bl	801bc96 <_ZdlPvj>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff fbe6 	bl	800a94e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800b182:	4603      	mov	r3, r0
 800b184:	4619      	mov	r1, r3
 800b186:	4620      	mov	r0, r4
 800b188:	f7ff fb46 	bl	800a818 <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff fc1b 	bl	800a9ca <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd90      	pop	{r4, r7, pc}

0800b19c <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800b19c:	b480      	push	{r7}
 800b19e:	af00      	add	r7, sp, #0
    return bitmap_database;
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	0801dca8 	.word	0x0801dca8

0800b1b0 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800b1b4:	2301      	movs	r3, #1
}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800b1ce:	2300      	movs	r3, #0
    }
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b1e4:	2300      	movs	r3, #0
    }
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	370c      	adds	r7, #12
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f0:	4770      	bx	lr

0800b1f2 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b1fa:	2300      	movs	r3, #0
    }
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	4613      	mov	r3, r2
 800b214:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800b216:	4a07      	ldr	r2, [pc, #28]	; (800b234 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6013      	str	r3, [r2, #0]
        fonts = f;
 800b21c:	4a06      	ldr	r2, [pc, #24]	; (800b238 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800b222:	4a06      	ldr	r2, [pc, #24]	; (800b23c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800b224:	88fb      	ldrh	r3, [r7, #6]
 800b226:	8013      	strh	r3, [r2, #0]
    }
 800b228:	bf00      	nop
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	2401aa08 	.word	0x2401aa08
 800b238:	2401aa10 	.word	0x2401aa10
 800b23c:	2401aa0c 	.word	0x2401aa0c

0800b240 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800b240:	b40e      	push	{r1, r2, r3}
 800b242:	b580      	push	{r7, lr}
 800b244:	b085      	sub	sp, #20
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800b24a:	f107 0320 	add.w	r3, r7, #32
 800b24e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	69fa      	ldr	r2, [r7, #28]
 800b254:	2100      	movs	r1, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f005 fcec 	bl	8010c34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800b25c:	4603      	mov	r3, r0
 800b25e:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800b260:	89fb      	ldrh	r3, [r7, #14]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3714      	adds	r7, #20
 800b266:	46bd      	mov	sp, r7
 800b268:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b26c:	b003      	add	sp, #12
 800b26e:	4770      	bx	lr

0800b270 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800b270:	b40c      	push	{r2, r3}
 800b272:	b580      	push	{r7, lr}
 800b274:	b084      	sub	sp, #16
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	460b      	mov	r3, r1
 800b27c:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800b27e:	f107 031c 	add.w	r3, r7, #28
 800b282:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800b284:	78f9      	ldrb	r1, [r7, #3]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f005 fcd2 	bl	8010c34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800b290:	4603      	mov	r3, r0
 800b292:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800b294:	89fb      	ldrh	r3, [r7, #14]
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2a0:	b002      	add	sp, #8
 800b2a2:	4770      	bx	lr

0800b2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	; 0x28
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d016      	beq.n	800b2e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3322      	adds	r3, #34	; 0x22
 800b2bc:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800b2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c0:	8adb      	ldrh	r3, [r3, #22]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d105      	bne.n	800b2d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800b2c6:	4b43      	ldr	r3, [pc, #268]	; (800b3d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800b2c8:	4a43      	ldr	r2, [pc, #268]	; (800b3d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800b2ca:	21c5      	movs	r1, #197	; 0xc5
 800b2cc:	4843      	ldr	r0, [pc, #268]	; (800b3dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b2ce:	f010 fd11 	bl	801bcf4 <__assert_func>
            return buffer[pos];
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	8a9b      	ldrh	r3, [r3, #20]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d06a      	beq.n	800b3c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f006 fee3 	bl	80120b8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	3322      	adds	r3, #34	; 0x22
 800b2f6:	623b      	str	r3, [r7, #32]
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800b2fc:	6a3b      	ldr	r3, [r7, #32]
 800b2fe:	8adb      	ldrh	r3, [r3, #22]
 800b300:	8bfa      	ldrh	r2, [r7, #30]
 800b302:	429a      	cmp	r2, r3
 800b304:	d305      	bcc.n	800b312 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800b306:	4b36      	ldr	r3, [pc, #216]	; (800b3e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800b308:	4a36      	ldr	r2, [pc, #216]	; (800b3e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800b30a:	21cb      	movs	r1, #203	; 0xcb
 800b30c:	4833      	ldr	r0, [pc, #204]	; (800b3dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b30e:	f010 fcf1 	bl	801bcf4 <__assert_func>
            const uint16_t index = pos + offset;
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	8a9a      	ldrh	r2, [r3, #20]
 800b316:	8bfb      	ldrh	r3, [r7, #30]
 800b318:	4413      	add	r3, r2
 800b31a:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800b31c:	8bbb      	ldrh	r3, [r7, #28]
 800b31e:	2b09      	cmp	r3, #9
 800b320:	d801      	bhi.n	800b326 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800b322:	8bbb      	ldrh	r3, [r7, #28]
 800b324:	e001      	b.n	800b32a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800b326:	8bbb      	ldrh	r3, [r7, #28]
 800b328:	3b0a      	subs	r3, #10
 800b32a:	6a3a      	ldr	r2, [r7, #32]
 800b32c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b330:	f640 123f 	movw	r2, #2367	; 0x93f
 800b334:	4293      	cmp	r3, r2
 800b336:	bf0c      	ite	eq
 800b338:	2301      	moveq	r3, #1
 800b33a:	2300      	movne	r3, #0
 800b33c:	b2db      	uxtb	r3, r3
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d03f      	beq.n	800b3c2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3322      	adds	r3, #34	; 0x22
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	3222      	adds	r2, #34	; 0x22
 800b34a:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	8ad2      	ldrh	r2, [r2, #22]
 800b350:	2a00      	cmp	r2, #0
 800b352:	d105      	bne.n	800b360 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800b354:	4b1f      	ldr	r3, [pc, #124]	; (800b3d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800b356:	4a20      	ldr	r2, [pc, #128]	; (800b3d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800b358:	21c5      	movs	r1, #197	; 0xc5
 800b35a:	4820      	ldr	r0, [pc, #128]	; (800b3dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b35c:	f010 fcca 	bl	801bcf4 <__assert_func>
            return buffer[pos];
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	8a92      	ldrh	r2, [r2, #20]
 800b364:	4611      	mov	r1, r2
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800b36c:	613b      	str	r3, [r7, #16]
 800b36e:	4613      	mov	r3, r2
 800b370:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	8adb      	ldrh	r3, [r3, #22]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d806      	bhi.n	800b388 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800b37a:	4b1b      	ldr	r3, [pc, #108]	; (800b3e8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800b37c:	4a1b      	ldr	r2, [pc, #108]	; (800b3ec <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800b37e:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800b382:	4816      	ldr	r0, [pc, #88]	; (800b3dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b384:	f010 fcb6 	bl	801bcf4 <__assert_func>
            const uint16_t index = pos + 1;
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	8a9b      	ldrh	r3, [r3, #20]
 800b38c:	3301      	adds	r3, #1
 800b38e:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800b390:	89bb      	ldrh	r3, [r7, #12]
 800b392:	2b09      	cmp	r3, #9
 800b394:	d801      	bhi.n	800b39a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800b396:	89bb      	ldrh	r3, [r7, #12]
 800b398:	e000      	b.n	800b39c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800b39a:	2300      	movs	r3, #0
 800b39c:	693a      	ldr	r2, [r7, #16]
 800b39e:	89f9      	ldrh	r1, [r7, #14]
 800b3a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800b3a4:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3322      	adds	r3, #34	; 0x22
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	f640 133f 	movw	r3, #2367	; 0x93f
 800b3b0:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	8a9b      	ldrh	r3, [r3, #20]
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	8afa      	ldrh	r2, [r7, #22]
 800b3bc:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800b3c0:	bf00      	nop
        }
    }
    return getNextChar();
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f006 fd7a 	bl	8011ebc <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b3c8:	4603      	mov	r3, r0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3728      	adds	r7, #40	; 0x28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	0801d15c 	.word	0x0801d15c
 800b3d8:	0801d168 	.word	0x0801d168
 800b3dc:	0801d214 	.word	0x0801d214
 800b3e0:	0801d25c 	.word	0x0801d25c
 800b3e4:	0801d26c 	.word	0x0801d26c
 800b3e8:	0801d340 	.word	0x0801d340
 800b3ec:	0801d34c 	.word	0x0801d34c

0800b3f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f006 fd28 	bl	8011e4e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800b3fe:	bf00      	nop
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
	...

0800b408 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800b408:	b590      	push	{r4, r7, lr}
 800b40a:	b085      	sub	sp, #20
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	4603      	mov	r3, r0
 800b410:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800b412:	2300      	movs	r3, #0
 800b414:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d127      	bne.n	800b46c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800b41c:	88fb      	ldrh	r3, [r7, #6]
 800b41e:	4a1e      	ldr	r2, [pc, #120]	; (800b498 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d016      	beq.n	800b456 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	4a1b      	ldr	r2, [pc, #108]	; (800b498 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b42c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b430:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	4413      	add	r3, r2
 800b43a:	4a18      	ldr	r2, [pc, #96]	; (800b49c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b43c:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	68ba      	ldr	r2, [r7, #8]
 800b444:	4413      	add	r3, r2
 800b446:	4a16      	ldr	r2, [pc, #88]	; (800b4a0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b448:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	689b      	ldr	r3, [r3, #8]
 800b44e:	68ba      	ldr	r2, [r7, #8]
 800b450:	4413      	add	r3, r2
 800b452:	60fb      	str	r3, [r7, #12]
 800b454:	e00a      	b.n	800b46c <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800b456:	4b11      	ldr	r3, [pc, #68]	; (800b49c <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b458:	4a12      	ldr	r2, [pc, #72]	; (800b4a4 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800b45a:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800b45c:	4a12      	ldr	r2, [pc, #72]	; (800b4a8 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800b45e:	4b10      	ldr	r3, [pc, #64]	; (800b4a0 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b460:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800b462:	88fb      	ldrh	r3, [r7, #6]
 800b464:	4a11      	ldr	r2, [pc, #68]	; (800b4ac <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800b466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b46a:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d00d      	beq.n	800b48e <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800b472:	4a0f      	ldr	r2, [pc, #60]	; (800b4b0 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800b474:	88fb      	ldrh	r3, [r7, #6]
 800b476:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800b478:	f000 f824 	bl	800b4c4 <_ZN17TypedTextDatabase8getFontsEv>
 800b47c:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800b47e:	f000 f819 	bl	800b4b4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800b482:	4603      	mov	r3, r0
 800b484:	461a      	mov	r2, r3
 800b486:	4621      	mov	r1, r4
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff febd 	bl	800b208 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800b48e:	bf00      	nop
 800b490:	3714      	adds	r7, #20
 800b492:	46bd      	mov	sp, r7
 800b494:	bd90      	pop	{r4, r7, pc}
 800b496:	bf00      	nop
 800b498:	24019840 	.word	0x24019840
 800b49c:	24019848 	.word	0x24019848
 800b4a0:	2401984c 	.word	0x2401984c
 800b4a4:	0807e4bc 	.word	0x0807e4bc
 800b4a8:	0807e4b8 	.word	0x0807e4b8
 800b4ac:	0807e4c4 	.word	0x0807e4c4
 800b4b0:	24019844 	.word	0x24019844

0800b4b4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	af00      	add	r7, sp, #0
    return 0;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800b4c8:	4b02      	ldr	r3, [pc, #8]	; (800b4d4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	24019850 	.word	0x24019850

0800b4d8 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d113      	bne.n	800b510 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d10e      	bne.n	800b510 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800b4f2:	f7fe f883 	bl	80095fc <_Z23getFont_verdana_20_4bppv>
 800b4f6:	4603      	mov	r3, r0
};
 800b4f8:	4a07      	ldr	r2, [pc, #28]	; (800b518 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b4fa:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800b4fc:	f7fe f8d8 	bl	80096b0 <_Z23getFont_verdana_40_4bppv>
 800b500:	4603      	mov	r3, r0
};
 800b502:	4a05      	ldr	r2, [pc, #20]	; (800b518 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b504:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800b506:	f7fe f81f 	bl	8009548 <_Z23getFont_verdana_10_4bppv>
 800b50a:	4603      	mov	r3, r0
};
 800b50c:	4a02      	ldr	r2, [pc, #8]	; (800b518 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b50e:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	24019850 	.word	0x24019850

0800b51c <_GLOBAL__sub_I_touchgfx_fonts>:
 800b51c:	b580      	push	{r7, lr}
 800b51e:	af00      	add	r7, sp, #0
 800b520:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b524:	2001      	movs	r0, #1
 800b526:	f7ff ffd7 	bl	800b4d8 <_Z41__static_initialization_and_destruction_0ii>
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	4a05      	ldr	r2, [pc, #20]	; (800b54c <_ZN19FrontendApplicationD1Ev+0x20>)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe fb17 	bl	8009b70 <_ZN23FrontendApplicationBaseD1Ev>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	0801dd20 	.word	0x0801dd20

0800b550 <_ZN19FrontendApplicationD0Ev>:
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff ffe7 	bl	800b52c <_ZN19FrontendApplicationD1Ev>
 800b55e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f010 fb97 	bl	801bc96 <_ZdlPvj>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4618      	mov	r0, r3
 800b56c:	3708      	adds	r7, #8
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}

0800b572 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800b572:	b580      	push	{r7, lr}
 800b574:	b082      	sub	sp, #8
 800b576:	af00      	add	r7, sp, #0
 800b578:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800b580:	4618      	mov	r0, r3
 800b582:	f000 f82d 	bl	800b5e0 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4618      	mov	r0, r3
 800b58a:	f004 fc87 	bl	800fe9c <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800b58e:	bf00      	nop
 800b590:	3708      	adds	r7, #8
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	687a      	ldr	r2, [r7, #4]
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7fe fb30 	bl	8009c10 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800b5b0:	4a03      	ldr	r2, [pc, #12]	; (800b5c0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	601a      	str	r2, [r3, #0]
{

}
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	0801dd20 	.word	0x0801dd20

0800b5c4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800b5c4:	b480      	push	{r7}
 800b5c6:	b083      	sub	sp, #12
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
{

}
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <_ZN5Model4tickEv>:

void Model::tick()
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]

}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
    {
    }
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
    {
    }
 800b610:	bf00      	nop
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800b61c:	b480      	push	{r7}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
    {
 800b624:	4a04      	ldr	r2, [pc, #16]	; (800b638 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	601a      	str	r2, [r3, #0]
    }
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4618      	mov	r0, r3
 800b62e:	370c      	adds	r7, #12
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	0801ddac 	.word	0x0801ddac

0800b63c <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b082      	sub	sp, #8
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
    }
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff ffe9 	bl	800b61c <_ZN8touchgfx9PresenterD1Ev>
 800b64a:	2104      	movs	r1, #4
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f010 fb22 	bl	801bc96 <_ZdlPvj>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
    {
 800b664:	4a04      	ldr	r2, [pc, #16]	; (800b678 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	601a      	str	r2, [r3, #0]
    }
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	0801ddac 	.word	0x0801ddac

0800b67c <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	4a06      	ldr	r2, [pc, #24]	; (800b6a0 <_ZN13ModelListenerC1Ev+0x24>)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	605a      	str	r2, [r3, #4]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4618      	mov	r0, r3
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	0801dd9c 	.word	0x0801dd9c

0800b6a4 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
 800b6ac:	4a04      	ldr	r2, [pc, #16]	; (800b6c0 <_ZN13ModelListenerD1Ev+0x1c>)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	0801dd9c 	.word	0x0801dd9c

0800b6c4 <_ZN13ModelListenerD0Ev>:
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff ffe9 	bl	800b6a4 <_ZN13ModelListenerD1Ev>
 800b6d2:	2108      	movs	r1, #8
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f010 fade 	bl	801bc96 <_ZdlPvj>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	4a09      	ldr	r2, [pc, #36]	; (800b714 <_ZN15screenPresenterD1Ev+0x30>)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	601a      	str	r2, [r3, #0]
 800b6f2:	4a09      	ldr	r2, [pc, #36]	; (800b718 <_ZN15screenPresenterD1Ev+0x34>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	605a      	str	r2, [r3, #4]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff ffd1 	bl	800b6a4 <_ZN13ModelListenerD1Ev>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff ff89 	bl	800b61c <_ZN8touchgfx9PresenterD1Ev>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4618      	mov	r0, r3
 800b70e:	3708      	adds	r7, #8
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	0801dd74 	.word	0x0801dd74
 800b718:	0801dd8c 	.word	0x0801dd8c

0800b71c <_ZThn4_N15screenPresenterD1Ev>:
 800b71c:	f1a0 0004 	sub.w	r0, r0, #4
 800b720:	e7e0      	b.n	800b6e4 <_ZN15screenPresenterD1Ev>
 800b722:	bf00      	nop

0800b724 <_ZN15screenPresenterD0Ev>:
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ffd9 	bl	800b6e4 <_ZN15screenPresenterD1Ev>
 800b732:	2110      	movs	r1, #16
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f010 faae 	bl	801bc96 <_ZdlPvj>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <_ZThn4_N15screenPresenterD0Ev>:
 800b744:	f1a0 0004 	sub.w	r0, r0, #4
 800b748:	e7ec      	b.n	800b724 <_ZN15screenPresenterD0Ev>
	...

0800b74c <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
    : view(v)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff ff7f 	bl	800b65c <_ZN8touchgfx9PresenterC1Ev>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	3304      	adds	r3, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff ff8a 	bl	800b67c <_ZN13ModelListenerC1Ev>
 800b768:	4a06      	ldr	r2, [pc, #24]	; (800b784 <_ZN15screenPresenterC1ER10screenView+0x38>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	601a      	str	r2, [r3, #0]
 800b76e:	4a06      	ldr	r2, [pc, #24]	; (800b788 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	605a      	str	r2, [r3, #4]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	683a      	ldr	r2, [r7, #0]
 800b778:	60da      	str	r2, [r3, #12]
{

}
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	0801dd74 	.word	0x0801dd74
 800b788:	0801dd8c 	.word	0x0801dd8c

0800b78c <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800b78c:	b480      	push	{r7}
 800b78e:	b083      	sub	sp, #12
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]

}
 800b794:	bf00      	nop
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]

}
 800b7a8:	bf00      	nop
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	4a05      	ldr	r2, [pc, #20]	; (800b7d4 <_ZN10screenViewD1Ev+0x20>)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f7ff fb3d 	bl	800ae44 <_ZN14screenViewBaseD1Ev>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	0801ddc4 	.word	0x0801ddc4

0800b7d8 <_ZN10screenViewD0Ev>:
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ffe7 	bl	800b7b4 <_ZN10screenViewD1Ev>
 800b7e6:	f44f 7188 	mov.w	r1, #272	; 0x110
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f010 fa53 	bl	801bc96 <_ZdlPvj>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff f9f8 	bl	800abfc <_ZN14screenViewBaseC1Ev>
 800b80c:	4a03      	ldr	r2, [pc, #12]	; (800b81c <_ZN10screenViewC1Ev+0x20>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	601a      	str	r2, [r3, #0]
{

}
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	0801ddc4 	.word	0x0801ddc4

0800b820 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7ff fb3d 	bl	800aeaa <_ZN14screenViewBase11setupScreenEv>
}
 800b830:	bf00      	nop
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe ff30 	bl	800a6a8 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800b848:	bf00      	nop
 800b84a:	3708      	adds	r7, #8
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
    {
 800b858:	4a04      	ldr	r2, [pc, #16]	; (800b86c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	601a      	str	r2, [r3, #0]
    }
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	4618      	mov	r0, r3
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr
 800b86c:	0801de10 	.word	0x0801de10

0800b870 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
    }
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f7ff ffe9 	bl	800b850 <_ZN8touchgfx15TouchControllerD1Ev>
 800b87e:	2104      	movs	r1, #4
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f010 fa08 	bl	801bc96 <_ZdlPvj>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4618      	mov	r0, r3
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
	...

0800b8c0 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	4a05      	ldr	r2, [pc, #20]	; (800b8e0 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	601a      	str	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff ffbd 	bl	800b850 <_ZN8touchgfx15TouchControllerD1Ev>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	0801ddf8 	.word	0x0801ddf8

0800b8e4 <_ZN20STM32TouchControllerD0Ev>:
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff ffe7 	bl	800b8c0 <_ZN20STM32TouchControllerD1Ev>
 800b8f2:	2104      	movs	r1, #4
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f010 f9ce 	bl	801bc96 <_ZdlPvj>
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3708      	adds	r7, #8
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800b904:	b480      	push	{r7}
 800b906:	af00      	add	r7, sp, #0

}
 800b908:	bf00      	nop
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr
	...

0800b914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b91e:	79fb      	ldrb	r3, [r7, #7]
 800b920:	2b03      	cmp	r3, #3
 800b922:	d827      	bhi.n	800b974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
 800b924:	a201      	add	r2, pc, #4	; (adr r2, 800b92c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800b926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b92a:	bf00      	nop
 800b92c:	0800b93d 	.word	0x0800b93d
 800b930:	0800b94b 	.word	0x0800b94b
 800b934:	0800b959 	.word	0x0800b959
 800b938:	0800b967 	.word	0x0800b967
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 800b93c:	2201      	movs	r2, #1
 800b93e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b942:	480e      	ldr	r0, [pc, #56]	; (800b97c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800b944:	f7f6 fb82 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b948:	e014      	b.n	800b974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 800b94a:	2201      	movs	r2, #1
 800b94c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b950:	480a      	ldr	r0, [pc, #40]	; (800b97c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800b952:	f7f6 fb7b 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b956:	e00d      	b.n	800b974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 800b958:	2201      	movs	r2, #1
 800b95a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b95e:	4808      	ldr	r0, [pc, #32]	; (800b980 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 800b960:	f7f6 fb74 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b964:	e006      	b.n	800b974 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 800b966:	2201      	movs	r2, #1
 800b968:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b96c:	4803      	ldr	r0, [pc, #12]	; (800b97c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800b96e:	f7f6 fb6d 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b972:	bf00      	nop
    }
}
 800b974:	bf00      	nop
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	58021c00 	.word	0x58021c00
 800b980:	58022000 	.word	0x58022000

0800b984 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b98e:	79fb      	ldrb	r3, [r7, #7]
 800b990:	2b03      	cmp	r3, #3
 800b992:	d827      	bhi.n	800b9e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
 800b994:	a201      	add	r2, pc, #4	; (adr r2, 800b99c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800b996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b99a:	bf00      	nop
 800b99c:	0800b9ad 	.word	0x0800b9ad
 800b9a0:	0800b9bb 	.word	0x0800b9bb
 800b9a4:	0800b9c9 	.word	0x0800b9c9
 800b9a8:	0800b9d7 	.word	0x0800b9d7
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b9b2:	480e      	ldr	r0, [pc, #56]	; (800b9ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800b9b4:	f7f6 fb4a 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b9b8:	e014      	b.n	800b9e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b9c0:	480a      	ldr	r0, [pc, #40]	; (800b9ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800b9c2:	f7f6 fb43 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b9c6:	e00d      	b.n	800b9e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9ce:	4808      	ldr	r0, [pc, #32]	; (800b9f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 800b9d0:	f7f6 fb3c 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b9d4:	e006      	b.n	800b9e4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b9dc:	4803      	ldr	r0, [pc, #12]	; (800b9ec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800b9de:	f7f6 fb35 	bl	800204c <HAL_GPIO_WritePin>
#endif
        break;
 800b9e2:	bf00      	nop
    }
}
 800b9e4:	bf00      	nop
 800b9e6:	3708      	adds	r7, #8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	58021c00 	.word	0x58021c00
 800b9f0:	58022000 	.word	0x58022000

0800b9f4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d823      	bhi.n	800ba4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800ba04:	a201      	add	r2, pc, #4	; (adr r2, 800ba0c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800ba06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba0a:	bf00      	nop
 800ba0c:	0800ba1d 	.word	0x0800ba1d
 800ba10:	0800ba29 	.word	0x0800ba29
 800ba14:	0800ba35 	.word	0x0800ba35
 800ba18:	0800ba41 	.word	0x0800ba41
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800ba1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ba20:	480c      	ldr	r0, [pc, #48]	; (800ba54 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800ba22:	f7f6 fb2c 	bl	800207e <HAL_GPIO_TogglePin>
#endif
        break;
 800ba26:	e011      	b.n	800ba4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800ba28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ba2c:	4809      	ldr	r0, [pc, #36]	; (800ba54 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800ba2e:	f7f6 fb26 	bl	800207e <HAL_GPIO_TogglePin>
#endif
        break;
 800ba32:	e00b      	b.n	800ba4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800ba34:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba38:	4807      	ldr	r0, [pc, #28]	; (800ba58 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 800ba3a:	f7f6 fb20 	bl	800207e <HAL_GPIO_TogglePin>
#endif
        break;
 800ba3e:	e005      	b.n	800ba4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800ba40:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba44:	4803      	ldr	r0, [pc, #12]	; (800ba54 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800ba46:	f7f6 fb1a 	bl	800207e <HAL_GPIO_TogglePin>
#endif
        break;
 800ba4a:	bf00      	nop
    }
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	58021c00 	.word	0x58021c00
 800ba58:	58022000 	.word	0x58022000

0800ba5c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
    {
 800ba64:	4a04      	ldr	r2, [pc, #16]	; (800ba78 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	601a      	str	r2, [r3, #0]
    }
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr
 800ba78:	0801e1f0 	.word	0x0801e1f0

0800ba7c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
    }
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ffe9 	bl	800ba5c <_ZN8touchgfx3HALD1Ev>
 800ba8a:	217c      	movs	r1, #124	; 0x7c
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f010 f902 	bl	801bc96 <_ZdlPvj>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
 800baa4:	460b      	mov	r3, r1
 800baa6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	78fa      	ldrb	r2, [r7, #3]
 800baac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	460b      	mov	r3, r1
 800bace:	807b      	strh	r3, [r7, #2]
 800bad0:	4613      	mov	r3, r2
 800bad2:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800bad4:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800bad6:	881b      	ldrh	r3, [r3, #0]
 800bad8:	887a      	ldrh	r2, [r7, #2]
 800bada:	429a      	cmp	r2, r3
 800badc:	d304      	bcc.n	800bae8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800bade:	4b0b      	ldr	r3, [pc, #44]	; (800bb0c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800bae0:	881b      	ldrh	r3, [r3, #0]
 800bae2:	883a      	ldrh	r2, [r7, #0]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d205      	bcs.n	800baf4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800bae8:	4b09      	ldr	r3, [pc, #36]	; (800bb10 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800baea:	4a0a      	ldr	r2, [pc, #40]	; (800bb14 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800baec:	219e      	movs	r1, #158	; 0x9e
 800baee:	480a      	ldr	r0, [pc, #40]	; (800bb18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800baf0:	f010 f900 	bl	801bcf4 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800baf4:	4a09      	ldr	r2, [pc, #36]	; (800bb1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800baf6:	887b      	ldrh	r3, [r7, #2]
 800baf8:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800bafa:	4a09      	ldr	r2, [pc, #36]	; (800bb20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800bafc:	883b      	ldrh	r3, [r7, #0]
 800bafe:	8013      	strh	r3, [r2, #0]
    }
 800bb00:	bf00      	nop
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	2401a9ac 	.word	0x2401a9ac
 800bb0c:	2401a9ae 	.word	0x2401a9ae
 800bb10:	0801d400 	.word	0x0801d400
 800bb14:	0801d464 	.word	0x0801d464
 800bb18:	0801d4a8 	.word	0x0801d4a8
 800bb1c:	2401a9b2 	.word	0x2401a9b2
 800bb20:	2401a9b4 	.word	0x2401a9b4

0800bb24 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d009      	beq.n	800bb4a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	685a      	ldr	r2, [r3, #4]
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4610      	mov	r0, r2
 800bb44:	4798      	blx	r3
 800bb46:	4603      	mov	r3, r0
 800bb48:	e000      	b.n	800bb4c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800bb4a:	2300      	movs	r3, #0
    }
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f002 fe67 	bl	800e830 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	33ac      	adds	r3, #172	; 0xac
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	4798      	blx	r3
    }
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800bb76:	b480      	push	{r7}
 800bb78:	b083      	sub	sp, #12
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
 800bb7e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800bb80:	2300      	movs	r3, #0
    }
 800bb82:	4618      	mov	r0, r3
 800bb84:	370c      	adds	r7, #12
 800bb86:	46bd      	mov	sp, r7
 800bb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8c:	4770      	bx	lr
	...

0800bb90 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d106      	bne.n	800bbb2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800bba4:	4b0f      	ldr	r3, [pc, #60]	; (800bbe4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800bba6:	4a10      	ldr	r2, [pc, #64]	; (800bbe8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800bba8:	f240 21d2 	movw	r1, #722	; 0x2d2
 800bbac:	480f      	ldr	r0, [pc, #60]	; (800bbec <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800bbae:	f010 f8a1 	bl	801bcf4 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bf14      	ite	ne
 800bbc4:	2301      	movne	r3, #1
 800bbc6:	2300      	moveq	r3, #0
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800bbcc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	338c      	adds	r3, #140	; 0x8c
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	4798      	blx	r3
    }
 800bbdc:	bf00      	nop
 800bbde:	3710      	adds	r7, #16
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	0801d4ec 	.word	0x0801d4ec
 800bbe8:	0801d524 	.word	0x0801d524
 800bbec:	0801d4a8 	.word	0x0801d4a8
 800bbf0:	2401a9b6 	.word	0x2401a9b6

0800bbf4 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	683a      	ldr	r2, [r7, #0]
 800bc02:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	bf14      	ite	ne
 800bc0a:	2301      	movne	r3, #1
 800bc0c:	2300      	moveq	r3, #0
 800bc0e:	b2da      	uxtb	r2, r3
 800bc10:	4b03      	ldr	r3, [pc, #12]	; (800bc20 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800bc12:	701a      	strb	r2, [r3, #0]
    }
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	2401a9b7 	.word	0x2401a9b7

0800bc24 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800bc2c:	2300      	movs	r3, #0
    }
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d004      	beq.n	800bc58 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc52:	887a      	ldrh	r2, [r7, #2]
 800bc54:	4610      	mov	r0, r2
 800bc56:	4798      	blx	r3
        }
    }
 800bc58:	bf00      	nop
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3318      	adds	r3, #24
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4610      	mov	r0, r2
 800bc78:	4798      	blx	r3
 800bc7a:	4603      	mov	r3, r0
    }
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d011      	beq.n	800bcc0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800bc9c:	4b14      	ldr	r3, [pc, #80]	; (800bcf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11e      	bne.n	800bce2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800bca4:	4b13      	ldr	r3, [pc, #76]	; (800bcf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800bcaa:	4b13      	ldr	r3, [pc, #76]	; (800bcf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800bcac:	881a      	ldrh	r2, [r3, #0]
 800bcae:	4b11      	ldr	r3, [pc, #68]	; (800bcf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800bcb0:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800bcb2:	4a11      	ldr	r2, [pc, #68]	; (800bcf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800bcb4:	89bb      	ldrh	r3, [r7, #12]
 800bcb6:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800bcb8:	4b0d      	ldr	r3, [pc, #52]	; (800bcf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800bcba:	2201      	movs	r2, #1
 800bcbc:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800bcbe:	e010      	b.n	800bce2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800bcc0:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00c      	beq.n	800bce2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800bcc8:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800bcce:	4b0a      	ldr	r3, [pc, #40]	; (800bcf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800bcd0:	881a      	ldrh	r2, [r3, #0]
 800bcd2:	4b08      	ldr	r3, [pc, #32]	; (800bcf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800bcd4:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800bcd6:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800bcd8:	89fb      	ldrh	r3, [r7, #14]
 800bcda:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800bcdc:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	701a      	strb	r2, [r3, #0]
    }
 800bce2:	bf00      	nop
 800bce4:	3714      	adds	r7, #20
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr
 800bcee:	bf00      	nop
 800bcf0:	2401a9b0 	.word	0x2401a9b0
 800bcf4:	2401a9ae 	.word	0x2401a9ae
 800bcf8:	2401a9ac 	.word	0x2401a9ac

0800bcfc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 ffef 	bl	800dcea <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
 800bd1c:	4a05      	ldr	r2, [pc, #20]	; (800bd34 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	601a      	str	r2, [r3, #0]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	f7ff fe99 	bl	800ba5c <_ZN8touchgfx3HALD1Ev>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	0801e048 	.word	0x0801e048

0800bd38 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7ff ffe7 	bl	800bd14 <_ZN20TouchGFXGeneratedHALD1Ev>
 800bd46:	217c      	movs	r1, #124	; 0x7c
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f00f ffa4 	bl	801bc96 <_ZdlPvj>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7ff ffca 	bl	800bcfc <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f001 faf6 	bl	800d36c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800bd80:	bf00      	nop
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4618      	mov	r0, r3
 800bd94:	f001 fb8c 	bl	800d4b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800bd98:	4603      	mov	r3, r0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
 800bdaa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fb8b 	bl	800d4cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800bdb6:	bf00      	nop
 800bdb8:	3708      	adds	r7, #8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800bdbe:	b580      	push	{r7, lr}
 800bdc0:	b082      	sub	sp, #8
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f001 fb93 	bl	800d4f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800bdd2:	bf00      	nop
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b084      	sub	sp, #16
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
 800bde6:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	68b9      	ldr	r1, [r7, #8]
 800bdf0:	f001 fb90 	bl	800d514 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800bdf4:	4603      	mov	r3, r0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b082      	sub	sp, #8
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4618      	mov	r0, r3
 800be0a:	f001 fadd 	bl	800d3c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800be0e:	bf00      	nop
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b082      	sub	sp, #8
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	4618      	mov	r0, r3
 800be22:	f001 fae1 	bl	800d3e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800be26:	bf00      	nop
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}

0800be2e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4618      	mov	r0, r3
 800be3a:	f001 fae3 	bl	800d404 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800be3e:	bf00      	nop
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b082      	sub	sp, #8
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4618      	mov	r0, r3
 800be52:	f001 fae5 	bl	800d420 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800be56:	bf00      	nop
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b082      	sub	sp, #8
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4618      	mov	r0, r3
 800be6a:	f001 fb07 	bl	800d47c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800be6e:	4603      	mov	r3, r0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4618      	mov	r0, r3
 800be84:	f001 fb07 	bl	800d496 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	4a05      	ldr	r2, [pc, #20]	; (800beb0 <_ZN11TouchGFXHALD1Ev+0x20>)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff ff37 	bl	800bd14 <_ZN20TouchGFXGeneratedHALD1Ev>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}
 800beb0:	0801de28 	.word	0x0801de28

0800beb4 <_ZN11TouchGFXHALD0Ev>:
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b082      	sub	sp, #8
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff ffe7 	bl	800be90 <_ZN11TouchGFXHALD1Ev>
 800bec2:	217c      	movs	r1, #124	; 0x7c
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f00f fee6 	bl	801bc96 <_ZdlPvj>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800bed8:	2200      	movs	r2, #0
 800beda:	2101      	movs	r1, #1
 800bedc:	2001      	movs	r0, #1
 800bede:	f7f9 fe24 	bl	8005b2a <osSemaphoreNew>
 800bee2:	4603      	mov	r3, r0
 800bee4:	4a0f      	ldr	r2, [pc, #60]	; (800bf24 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800bee6:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800bee8:	4b0e      	ldr	r3, [pc, #56]	; (800bf24 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d105      	bne.n	800befc <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800bef0:	4b0d      	ldr	r3, [pc, #52]	; (800bf28 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800bef2:	4a0e      	ldr	r2, [pc, #56]	; (800bf2c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800bef4:	2128      	movs	r1, #40	; 0x28
 800bef6:	480e      	ldr	r0, [pc, #56]	; (800bf30 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800bef8:	f00f fefc 	bl	801bcf4 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800befc:	2200      	movs	r2, #0
 800befe:	2104      	movs	r1, #4
 800bf00:	2001      	movs	r0, #1
 800bf02:	f7f9 ff31 	bl	8005d68 <osMessageQueueNew>
 800bf06:	4603      	mov	r3, r0
 800bf08:	4a0a      	ldr	r2, [pc, #40]	; (800bf34 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800bf0a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800bf0c:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d105      	bne.n	800bf20 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800bf14:	4b08      	ldr	r3, [pc, #32]	; (800bf38 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800bf16:	4a05      	ldr	r2, [pc, #20]	; (800bf2c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800bf18:	212c      	movs	r1, #44	; 0x2c
 800bf1a:	4805      	ldr	r0, [pc, #20]	; (800bf30 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800bf1c:	f00f feea 	bl	801bcf4 <__assert_func>
}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	2401985c 	.word	0x2401985c
 800bf28:	0801d574 	.word	0x0801d574
 800bf2c:	0801d5c0 	.word	0x0801d5c0
 800bf30:	0801d5f0 	.word	0x0801d5f0
 800bf34:	24019860 	.word	0x24019860
 800bf38:	0801d61c 	.word	0x0801d61c

0800bf3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800bf40:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f04f 31ff 	mov.w	r1, #4294967295
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f9 fe77 	bl	8005c3c <osSemaphoreAcquire>
}
 800bf4e:	bf00      	nop
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	2401985c 	.word	0x2401985c

0800bf58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800bf5c:	4b03      	ldr	r3, [pc, #12]	; (800bf6c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4618      	mov	r0, r3
 800bf62:	f7f9 febd 	bl	8005ce0 <osSemaphoreRelease>
}
 800bf66:	bf00      	nop
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	2401985c 	.word	0x2401985c

0800bf70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800bf74:	4b03      	ldr	r3, [pc, #12]	; (800bf84 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7f9 fe5e 	bl	8005c3c <osSemaphoreAcquire>
}
 800bf80:	bf00      	nop
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	2401985c 	.word	0x2401985c

0800bf88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800bf8c:	4b03      	ldr	r3, [pc, #12]	; (800bf9c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4618      	mov	r0, r3
 800bf92:	f7f9 fea5 	bl	8005ce0 <osSemaphoreRelease>
}
 800bf96:	bf00      	nop
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	2401985c 	.word	0x2401985c

0800bfa0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800bfa4:	4b04      	ldr	r3, [pc, #16]	; (800bfb8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800bfa6:	6818      	ldr	r0, [r3, #0]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	2200      	movs	r2, #0
 800bfac:	4903      	ldr	r1, [pc, #12]	; (800bfbc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800bfae:	f7f9 ff4f 	bl	8005e50 <osMessageQueuePut>
}
 800bfb2:	bf00      	nop
 800bfb4:	bd80      	pop	{r7, pc}
 800bfb6:	bf00      	nop
 800bfb8:	24019860 	.word	0x24019860
 800bfbc:	24000018 	.word	0x24000018

0800bfc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	1d39      	adds	r1, r7, #4
 800bfcc:	2300      	movs	r3, #0
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f7f9 ff9e 	bl	8005f10 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800bfd4:	4b05      	ldr	r3, [pc, #20]	; (800bfec <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800bfd6:	6818      	ldr	r0, [r3, #0]
 800bfd8:	1d39      	adds	r1, r7, #4
 800bfda:	f04f 33ff 	mov.w	r3, #4294967295
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f7f9 ff96 	bl	8005f10 <osMessageQueueGet>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	24019860 	.word	0x24019860

0800bff0 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7f9 fd79 	bl	8005af4 <osDelay>
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
	...

0800c00c <__NVIC_EnableIRQ>:
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	db0b      	blt.n	800c036 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c01e:	88fb      	ldrh	r3, [r7, #6]
 800c020:	f003 021f 	and.w	r2, r3, #31
 800c024:	4907      	ldr	r1, [pc, #28]	; (800c044 <__NVIC_EnableIRQ+0x38>)
 800c026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c02a:	095b      	lsrs	r3, r3, #5
 800c02c:	2001      	movs	r0, #1
 800c02e:	fa00 f202 	lsl.w	r2, r0, r2
 800c032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	e000e100 	.word	0xe000e100

0800c048 <__NVIC_DisableIRQ>:
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c056:	2b00      	cmp	r3, #0
 800c058:	db12      	blt.n	800c080 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c05a:	88fb      	ldrh	r3, [r7, #6]
 800c05c:	f003 021f 	and.w	r2, r3, #31
 800c060:	490a      	ldr	r1, [pc, #40]	; (800c08c <__NVIC_DisableIRQ+0x44>)
 800c062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c066:	095b      	lsrs	r3, r3, #5
 800c068:	2001      	movs	r0, #1
 800c06a:	fa00 f202 	lsl.w	r2, r0, r2
 800c06e:	3320      	adds	r3, #32
 800c070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c074:	f3bf 8f4f 	dsb	sy
}
 800c078:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c07a:	f3bf 8f6f 	isb	sy
}
 800c07e:	bf00      	nop
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	e000e100 	.word	0xe000e100

0800c090 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
        return color;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
    }
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
    {
 800c0b0:	4a04      	ldr	r2, [pc, #16]	; (800c0c4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	601a      	str	r2, [r3, #0]
    }
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	0801df50 	.word	0x0801df50

0800c0c8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
    }
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff ffe9 	bl	800c0a8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c0d6:	2104      	movs	r1, #4
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f00f fddc 	bl	801bc96 <_ZdlPvj>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3344      	adds	r3, #68	; 0x44
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3
    }
 800c0fc:	bf00      	nop
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
    {
 800c10c:	4a04      	ldr	r2, [pc, #16]	; (800c120 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	601a      	str	r2, [r3, #0]
    }
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	0801e2c8 	.word	0x0801e2c8

0800c124 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
    }
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff ffe9 	bl	800c104 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800c132:	210c      	movs	r1, #12
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f00f fdae 	bl	801bc96 <_ZdlPvj>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800c14e:	4a09      	ldr	r2, [pc, #36]	; (800c174 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	605a      	str	r2, [r3, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2200      	movs	r2, #0
 800c15e:	721a      	strb	r2, [r3, #8]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2200      	movs	r2, #0
 800c164:	725a      	strb	r2, [r3, #9]
    {
    }
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4618      	mov	r0, r3
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr
 800c174:	0801e2c8 	.word	0x0801e2c8

0800c178 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800c180:	2301      	movs	r3, #1
    }
 800c182:	4618      	mov	r0, r3
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800c18e:	b580      	push	{r7, lr}
 800c190:	b082      	sub	sp, #8
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	3328      	adds	r3, #40	; 0x28
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	4798      	blx	r3
    }
 800c1a4:	bf00      	nop
 800c1a6:	3708      	adds	r7, #8
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}

0800c1ac <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	3314      	adds	r3, #20
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4610      	mov	r0, r2
 800c1c4:	4798      	blx	r3
    }
 800c1c6:	bf00      	nop
 800c1c8:	3708      	adds	r7, #8
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b082      	sub	sp, #8
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800c1d6:	f7fd fb81 	bl	80098dc <_ZN8touchgfx3HAL11getInstanceEv>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7ff ffe5 	bl	800c1ac <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	330c      	adds	r3, #12
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fd fff8 	bl	800a1ec <_ZN8touchgfx9colortypeC1Ev>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	4618      	mov	r0, r3
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
	...

0800c208 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800c208:	b5b0      	push	{r4, r5, r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	330c      	adds	r3, #12
 800c216:	4619      	mov	r1, r3
 800c218:	4610      	mov	r0, r2
 800c21a:	f7ff ff93 	bl	800c144 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800c21e:	4a0e      	ldr	r2, [pc, #56]	; (800c258 <_ZN8STM32DMAC1Ev+0x50>)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f103 000c 	add.w	r0, r3, #12
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3320      	adds	r3, #32
 800c22e:	2260      	movs	r2, #96	; 0x60
 800c230:	4619      	mov	r1, r3
 800c232:	f002 fc37 	bl	800eaa4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3320      	adds	r3, #32
 800c23a:	245f      	movs	r4, #95	; 0x5f
 800c23c:	461d      	mov	r5, r3
 800c23e:	e004      	b.n	800c24a <_ZN8STM32DMAC1Ev+0x42>
 800c240:	4628      	mov	r0, r5
 800c242:	f7ff ffd2 	bl	800c1ea <_ZN8touchgfx6BlitOpC1Ev>
 800c246:	3524      	adds	r5, #36	; 0x24
 800c248:	3c01      	subs	r4, #1
 800c24a:	2c00      	cmp	r4, #0
 800c24c:	daf8      	bge.n	800c240 <_ZN8STM32DMAC1Ev+0x38>
{
}
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4618      	mov	r0, r3
 800c252:	3708      	adds	r7, #8
 800c254:	46bd      	mov	sp, r7
 800c256:	bdb0      	pop	{r4, r5, r7, pc}
 800c258:	0801df00 	.word	0x0801df00

0800c25c <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	4a09      	ldr	r2, [pc, #36]	; (800c28c <_ZN8STM32DMAD1Ev+0x30>)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800c26a:	205a      	movs	r0, #90	; 0x5a
 800c26c:	f7ff feec 	bl	800c048 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	330c      	adds	r3, #12
 800c274:	4618      	mov	r0, r3
 800c276:	f000 fab3 	bl	800c7e0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff ff41 	bl	800c104 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	0801df00 	.word	0x0801df00

0800c290 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
}
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7ff ffdf 	bl	800c25c <_ZN8STM32DMAD1Ev>
 800c29e:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f00f fcf7 	bl	801bc96 <_ZdlPvj>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c2bc:	4b12      	ldr	r3, [pc, #72]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2be:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c2c2:	4a11      	ldr	r2, [pc, #68]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2c4:	f043 0310 	orr.w	r3, r3, #16
 800c2c8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800c2cc:	4b0e      	ldr	r3, [pc, #56]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c2d2:	f003 0310 	and.w	r3, r3, #16
 800c2d6:	60fb      	str	r3, [r7, #12]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2de:	4a0a      	ldr	r2, [pc, #40]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2e0:	f043 0310 	orr.w	r3, r3, #16
 800c2e4:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800c2e6:	4b08      	ldr	r3, [pc, #32]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2ea:	4a07      	ldr	r2, [pc, #28]	; (800c308 <_ZN8STM32DMA10initializeEv+0x54>)
 800c2ec:	f023 0310 	bic.w	r3, r3, #16
 800c2f0:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800c2f2:	4b06      	ldr	r3, [pc, #24]	; (800c30c <_ZN8STM32DMA10initializeEv+0x58>)
 800c2f4:	4a06      	ldr	r2, [pc, #24]	; (800c310 <_ZN8STM32DMA10initializeEv+0x5c>)
 800c2f6:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800c2f8:	205a      	movs	r0, #90	; 0x5a
 800c2fa:	f7ff fe87 	bl	800c00c <__NVIC_EnableIRQ>
}
 800c2fe:	bf00      	nop
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	58024400 	.word	0x58024400
 800c30c:	24000120 	.word	0x24000120
 800c310:	0800c1cf 	.word	0x0800c1cf

0800c314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	460b      	mov	r3, r1
 800c31e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800c320:	2300      	movs	r3, #0
 800c322:	60fb      	str	r3, [r7, #12]

    switch (format)
 800c324:	78fb      	ldrb	r3, [r7, #3]
 800c326:	2b0b      	cmp	r3, #11
 800c328:	d826      	bhi.n	800c378 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800c32a:	a201      	add	r2, pc, #4	; (adr r2, 800c330 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800c32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c330:	0800c36d 	.word	0x0800c36d
 800c334:	0800c367 	.word	0x0800c367
 800c338:	0800c361 	.word	0x0800c361
 800c33c:	0800c379 	.word	0x0800c379
 800c340:	0800c379 	.word	0x0800c379
 800c344:	0800c379 	.word	0x0800c379
 800c348:	0800c379 	.word	0x0800c379
 800c34c:	0800c373 	.word	0x0800c373
 800c350:	0800c373 	.word	0x0800c373
 800c354:	0800c373 	.word	0x0800c373
 800c358:	0800c373 	.word	0x0800c373
 800c35c:	0800c373 	.word	0x0800c373
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800c360:	2300      	movs	r3, #0
 800c362:	60fb      	str	r3, [r7, #12]
        break;
 800c364:	e00e      	b.n	800c384 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800c366:	2301      	movs	r3, #1
 800c368:	60fb      	str	r3, [r7, #12]
        break;
 800c36a:	e00b      	b.n	800c384 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800c36c:	2302      	movs	r3, #2
 800c36e:	60fb      	str	r3, [r7, #12]
        break;
 800c370:	e008      	b.n	800c384 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800c372:	2305      	movs	r3, #5
 800c374:	60fb      	str	r3, [r7, #12]
        break;
 800c376:	e005      	b.n	800c384 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800c378:	4b05      	ldr	r3, [pc, #20]	; (800c390 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800c37a:	4a06      	ldr	r2, [pc, #24]	; (800c394 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800c37c:	2165      	movs	r1, #101	; 0x65
 800c37e:	4806      	ldr	r0, [pc, #24]	; (800c398 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800c380:	f00f fcb8 	bl	801bcf4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800c384:	68fb      	ldr	r3, [r7, #12]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop
 800c390:	0801d660 	.word	0x0801d660
 800c394:	0801d67c 	.word	0x0801d67c
 800c398:	0801d6c8 	.word	0x0801d6c8

0800c39c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
 800c3a4:	460b      	mov	r3, r1
 800c3a6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	60fb      	str	r3, [r7, #12]

    switch (format)
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	2b0a      	cmp	r3, #10
 800c3b0:	d821      	bhi.n	800c3f6 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800c3b2:	a201      	add	r2, pc, #4	; (adr r2, 800c3b8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800c3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b8:	0800c3f1 	.word	0x0800c3f1
 800c3bc:	0800c3eb 	.word	0x0800c3eb
 800c3c0:	0800c3e5 	.word	0x0800c3e5
 800c3c4:	0800c3f7 	.word	0x0800c3f7
 800c3c8:	0800c3f7 	.word	0x0800c3f7
 800c3cc:	0800c3f7 	.word	0x0800c3f7
 800c3d0:	0800c3f7 	.word	0x0800c3f7
 800c3d4:	0800c3eb 	.word	0x0800c3eb
 800c3d8:	0800c3eb 	.word	0x0800c3eb
 800c3dc:	0800c3eb 	.word	0x0800c3eb
 800c3e0:	0800c3eb 	.word	0x0800c3eb
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	60fb      	str	r3, [r7, #12]
        break;
 800c3e8:	e00b      	b.n	800c402 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	60fb      	str	r3, [r7, #12]
        break;
 800c3ee:	e008      	b.n	800c402 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	60fb      	str	r3, [r7, #12]
        break;
 800c3f4:	e005      	b.n	800c402 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800c3f6:	4b05      	ldr	r3, [pc, #20]	; (800c40c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800c3f8:	4a05      	ldr	r2, [pc, #20]	; (800c410 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800c3fa:	2186      	movs	r1, #134	; 0x86
 800c3fc:	4805      	ldr	r0, [pc, #20]	; (800c414 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800c3fe:	f00f fc79 	bl	801bcf4 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800c402:	68fb      	ldr	r3, [r7, #12]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	0801d660 	.word	0x0801d660
 800c410:	0801d6f4 	.word	0x0801d6f4
 800c414:	0801d6c8 	.word	0x0801d6c8

0800c418 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800c420:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800c430:	b590      	push	{r4, r7, lr}
 800c432:	b089      	sub	sp, #36	; 0x24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	7f5b      	ldrb	r3, [r3, #29]
 800c43e:	4619      	mov	r1, r3
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff ff67 	bl	800c314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c446:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	7f9b      	ldrb	r3, [r3, #30]
 800c44c:	4619      	mov	r1, r3
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7ff ff60 	bl	800c314 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c454:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	7f9b      	ldrb	r3, [r3, #30]
 800c45a:	4619      	mov	r1, r3
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff ff9d 	bl	800c39c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c462:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	8b5b      	ldrh	r3, [r3, #26]
 800c468:	461a      	mov	r2, r3
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	8a9b      	ldrh	r3, [r3, #20]
 800c46e:	1ad2      	subs	r2, r2, r3
 800c470:	4b92      	ldr	r3, [pc, #584]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c472:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	8b5b      	ldrh	r3, [r3, #26]
 800c478:	461a      	mov	r2, r3
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	8a9b      	ldrh	r3, [r3, #20]
 800c47e:	1ad2      	subs	r2, r2, r3
 800c480:	4b8e      	ldr	r3, [pc, #568]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c482:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	8b1b      	ldrh	r3, [r3, #24]
 800c488:	461a      	mov	r2, r3
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	8a9b      	ldrh	r3, [r3, #20]
 800c48e:	1ad2      	subs	r2, r2, r3
 800c490:	4b8a      	ldr	r3, [pc, #552]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c492:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800c494:	4a89      	ldr	r2, [pc, #548]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	8adb      	ldrh	r3, [r3, #22]
 800c49e:	461a      	mov	r2, r3
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	8a9b      	ldrh	r3, [r3, #20]
 800c4a4:	041b      	lsls	r3, r3, #16
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	4b84      	ldr	r3, [pc, #528]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c4aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	691a      	ldr	r2, [r3, #16]
 800c4b0:	4b82      	ldr	r3, [pc, #520]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c4b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	685a      	ldr	r2, [r3, #4]
 800c4b8:	4b80      	ldr	r3, [pc, #512]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c4ba:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c4:	d037      	beq.n	800c536 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800c4c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4ca:	f200 80e3 	bhi.w	800c694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d2:	d015      	beq.n	800c500 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800c4d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d8:	f200 80dc 	bhi.w	800c694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c4dc:	2b80      	cmp	r3, #128	; 0x80
 800c4de:	d045      	beq.n	800c56c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 800c4e0:	2b80      	cmp	r3, #128	; 0x80
 800c4e2:	f200 80d7 	bhi.w	800c694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c4e6:	2b40      	cmp	r3, #64	; 0x40
 800c4e8:	f000 80bf 	beq.w	800c66a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800c4ec:	2b40      	cmp	r3, #64	; 0x40
 800c4ee:	f200 80d1 	bhi.w	800c694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800c4f2:	2b04      	cmp	r3, #4
 800c4f4:	f000 80a4 	beq.w	800c640 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800c4f8:	2b20      	cmp	r3, #32
 800c4fa:	f000 80b6 	beq.w	800c66a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800c4fe:	e0c9      	b.n	800c694 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	7f1b      	ldrb	r3, [r3, #28]
 800c504:	061b      	lsls	r3, r3, #24
 800c506:	4619      	mov	r1, r3
 800c508:	4a6c      	ldr	r2, [pc, #432]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c50a:	4b6d      	ldr	r3, [pc, #436]	; (800c6c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800c50c:	430b      	orrs	r3, r1
 800c50e:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	330c      	adds	r3, #12
 800c514:	4c69      	ldr	r4, [pc, #420]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff fdba 	bl	800c090 <_ZNK8touchgfx9colortypecvmEv>
 800c51c:	4603      	mov	r3, r0
 800c51e:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c520:	4a66      	ldr	r2, [pc, #408]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	691a      	ldr	r2, [r3, #16]
 800c52a:	4b64      	ldr	r3, [pc, #400]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c52c:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c52e:	4b63      	ldr	r3, [pc, #396]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c530:	4a64      	ldr	r2, [pc, #400]	; (800c6c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c532:	601a      	str	r2, [r3, #0]
        break;
 800c534:	e0d9      	b.n	800c6ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	7f1b      	ldrb	r3, [r3, #28]
 800c53a:	061b      	lsls	r3, r3, #24
 800c53c:	4619      	mov	r1, r3
 800c53e:	4a5f      	ldr	r2, [pc, #380]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c540:	4b61      	ldr	r3, [pc, #388]	; (800c6c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800c542:	430b      	orrs	r3, r1
 800c544:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	330c      	adds	r3, #12
 800c54a:	4c5c      	ldr	r4, [pc, #368]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff fd9f 	bl	800c090 <_ZNK8touchgfx9colortypecvmEv>
 800c552:	4603      	mov	r3, r0
 800c554:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c556:	4a59      	ldr	r2, [pc, #356]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	691a      	ldr	r2, [r3, #16]
 800c560:	4b56      	ldr	r3, [pc, #344]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c562:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c564:	4b55      	ldr	r3, [pc, #340]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c566:	4a57      	ldr	r2, [pc, #348]	; (800c6c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c568:	601a      	str	r2, [r3, #0]
        break;
 800c56a:	e0be      	b.n	800c6ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	689b      	ldr	r3, [r3, #8]
 800c570:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800c572:	2301      	movs	r3, #1
 800c574:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	7f1b      	ldrb	r3, [r3, #28]
 800c57a:	061b      	lsls	r3, r3, #24
 800c57c:	461a      	mov	r2, r3
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	4313      	orrs	r3, r2
 800c582:	4a4e      	ldr	r2, [pc, #312]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c588:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c58a:	4a4c      	ldr	r2, [pc, #304]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	691a      	ldr	r2, [r3, #16]
 800c594:	4b49      	ldr	r3, [pc, #292]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c596:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	1d1a      	adds	r2, r3, #4
 800c59c:	4b47      	ldr	r3, [pc, #284]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c59e:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	881b      	ldrh	r3, [r3, #0]
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d00d      	beq.n	800c5ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800c5ae:	e020      	b.n	800c5f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800c5b0:	4b42      	ldr	r3, [pc, #264]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c5b2:	69da      	ldr	r2, [r3, #28]
 800c5b4:	4b45      	ldr	r3, [pc, #276]	; (800c6cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800c5b6:	4013      	ands	r3, r2
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	8852      	ldrh	r2, [r2, #2]
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	0212      	lsls	r2, r2, #8
 800c5c0:	4611      	mov	r1, r2
 800c5c2:	4a3e      	ldr	r2, [pc, #248]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c5c4:	430b      	orrs	r3, r1
 800c5c6:	61d3      	str	r3, [r2, #28]
                break;
 800c5c8:	e01a      	b.n	800c600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	7f1b      	ldrb	r3, [r3, #28]
 800c5ce:	2bff      	cmp	r3, #255	; 0xff
 800c5d0:	d101      	bne.n	800c5d6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800c5d6:	4b39      	ldr	r3, [pc, #228]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c5d8:	69da      	ldr	r2, [r3, #28]
 800c5da:	4b3c      	ldr	r3, [pc, #240]	; (800c6cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800c5dc:	4013      	ands	r3, r2
 800c5de:	68fa      	ldr	r2, [r7, #12]
 800c5e0:	8852      	ldrh	r2, [r2, #2]
 800c5e2:	3a01      	subs	r2, #1
 800c5e4:	0212      	lsls	r2, r2, #8
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	4a34      	ldr	r2, [pc, #208]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c5ea:	f043 0310 	orr.w	r3, r3, #16
 800c5ee:	61d3      	str	r3, [r2, #28]
                break;
 800c5f0:	e006      	b.n	800c600 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800c5f2:	4b37      	ldr	r3, [pc, #220]	; (800c6d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800c5f4:	4a37      	ldr	r2, [pc, #220]	; (800c6d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800c5f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5fa:	4837      	ldr	r0, [pc, #220]	; (800c6d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800c5fc:	f00f fb7a 	bl	801bcf4 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800c600:	4b2e      	ldr	r3, [pc, #184]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c602:	69db      	ldr	r3, [r3, #28]
 800c604:	4a2d      	ldr	r2, [pc, #180]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c606:	f043 0320 	orr.w	r3, r3, #32
 800c60a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800c60c:	bf00      	nop
 800c60e:	4b2b      	ldr	r3, [pc, #172]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c610:	69db      	ldr	r3, [r3, #28]
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b00      	cmp	r3, #0
 800c618:	bf14      	ite	ne
 800c61a:	2301      	movne	r3, #1
 800c61c:	2300      	moveq	r3, #0
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f4      	bne.n	800c60e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800c624:	4b25      	ldr	r3, [pc, #148]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c626:	2210      	movs	r2, #16
 800c628:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800c62a:	7ffb      	ldrb	r3, [r7, #31]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d003      	beq.n	800c638 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c630:	4b22      	ldr	r3, [pc, #136]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c632:	4a24      	ldr	r2, [pc, #144]	; (800c6c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c634:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800c636:	e058      	b.n	800c6ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800c638:	4b20      	ldr	r3, [pc, #128]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c63a:	4a28      	ldr	r2, [pc, #160]	; (800c6dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800c63c:	601a      	str	r2, [r3, #0]
        break;
 800c63e:	e054      	b.n	800c6ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	7f1b      	ldrb	r3, [r3, #28]
 800c644:	061b      	lsls	r3, r3, #24
 800c646:	461a      	mov	r2, r3
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	4313      	orrs	r3, r2
 800c64c:	4a1b      	ldr	r2, [pc, #108]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c64e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c652:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c654:	4a19      	ldr	r2, [pc, #100]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	691a      	ldr	r2, [r3, #16]
 800c65e:	4b17      	ldr	r3, [pc, #92]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c660:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c662:	4b16      	ldr	r3, [pc, #88]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c664:	4a17      	ldr	r2, [pc, #92]	; (800c6c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c666:	601a      	str	r2, [r3, #0]
        break;
 800c668:	e03f      	b.n	800c6ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	7f1b      	ldrb	r3, [r3, #28]
 800c66e:	061b      	lsls	r3, r3, #24
 800c670:	461a      	mov	r2, r3
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	4313      	orrs	r3, r2
 800c676:	4a11      	ldr	r2, [pc, #68]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c67c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c67e:	4a0f      	ldr	r2, [pc, #60]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	691a      	ldr	r2, [r3, #16]
 800c688:	4b0c      	ldr	r3, [pc, #48]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c68a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800c68c:	4b0b      	ldr	r3, [pc, #44]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c68e:	4a0d      	ldr	r2, [pc, #52]	; (800c6c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800c690:	601a      	str	r2, [r3, #0]
        break;
 800c692:	e02a      	b.n	800c6ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	7f1b      	ldrb	r3, [r3, #28]
 800c698:	061b      	lsls	r3, r3, #24
 800c69a:	461a      	mov	r2, r3
 800c69c:	69bb      	ldr	r3, [r7, #24]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	4a06      	ldr	r2, [pc, #24]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c6a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6a6:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	7f5a      	ldrb	r2, [r3, #29]
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	7f9b      	ldrb	r3, [r3, #30]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d015      	beq.n	800c6e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800c6b4:	4b01      	ldr	r3, [pc, #4]	; (800c6bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800c6b6:	4a09      	ldr	r2, [pc, #36]	; (800c6dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800c6b8:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800c6ba:	e015      	b.n	800c6e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800c6bc:	52001000 	.word	0x52001000
 800c6c0:	0002000a 	.word	0x0002000a
 800c6c4:	00020201 	.word	0x00020201
 800c6c8:	00020009 	.word	0x00020009
 800c6cc:	ffff00ef 	.word	0xffff00ef
 800c6d0:	0801d740 	.word	0x0801d740
 800c6d4:	0801d75c 	.word	0x0801d75c
 800c6d8:	0801d6c8 	.word	0x0801d6c8
 800c6dc:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800c6e0:	4b04      	ldr	r3, [pc, #16]	; (800c6f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800c6e2:	f240 2201 	movw	r2, #513	; 0x201
 800c6e6:	601a      	str	r2, [r3, #0]
        break;
 800c6e8:	bf00      	nop
    }
}
 800c6ea:	bf00      	nop
 800c6ec:	3724      	adds	r7, #36	; 0x24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd90      	pop	{r4, r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	52001000 	.word	0x52001000

0800c6f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800c6f8:	b590      	push	{r4, r7, lr}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	7f9b      	ldrb	r3, [r3, #30]
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff fe47 	bl	800c39c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c70e:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800c710:	4a2f      	ldr	r2, [pc, #188]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	8adb      	ldrh	r3, [r3, #22]
 800c71a:	461a      	mov	r2, r3
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	8a9b      	ldrh	r3, [r3, #20]
 800c720:	041b      	lsls	r3, r3, #16
 800c722:	431a      	orrs	r2, r3
 800c724:	4b2a      	ldr	r3, [pc, #168]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c726:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	4b28      	ldr	r3, [pc, #160]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c72e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	8b5b      	ldrh	r3, [r3, #26]
 800c734:	461a      	mov	r2, r3
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	8a9b      	ldrh	r3, [r3, #20]
 800c73a:	1ad2      	subs	r2, r2, r3
 800c73c:	4b24      	ldr	r3, [pc, #144]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c73e:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b08      	cmp	r3, #8
 800c746:	d12e      	bne.n	800c7a6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	8b5b      	ldrh	r3, [r3, #26]
 800c74c:	461a      	mov	r2, r3
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	8a9b      	ldrh	r3, [r3, #20]
 800c752:	1ad2      	subs	r2, r2, r3
 800c754:	4b1e      	ldr	r3, [pc, #120]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c756:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	8b5b      	ldrh	r3, [r3, #26]
 800c75c:	461a      	mov	r2, r3
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	8a9b      	ldrh	r3, [r3, #20]
 800c762:	1ad2      	subs	r2, r2, r3
 800c764:	4b1a      	ldr	r3, [pc, #104]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c766:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800c768:	4a19      	ldr	r2, [pc, #100]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	7f1b      	ldrb	r3, [r3, #28]
 800c772:	061b      	lsls	r3, r3, #24
 800c774:	4619      	mov	r1, r3
 800c776:	4a16      	ldr	r2, [pc, #88]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c778:	4b16      	ldr	r3, [pc, #88]	; (800c7d4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800c77a:	430b      	orrs	r3, r1
 800c77c:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	330c      	adds	r3, #12
 800c782:	4c13      	ldr	r4, [pc, #76]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c784:	4618      	mov	r0, r3
 800c786:	f7ff fc83 	bl	800c090 <_ZNK8touchgfx9colortypecvmEv>
 800c78a:	4603      	mov	r3, r0
 800c78c:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	691a      	ldr	r2, [r3, #16]
 800c792:	4b0f      	ldr	r3, [pc, #60]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c794:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	691a      	ldr	r2, [r3, #16]
 800c79a:	4b0d      	ldr	r3, [pc, #52]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c79c:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800c79e:	4b0c      	ldr	r3, [pc, #48]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c7a0:	4a0d      	ldr	r2, [pc, #52]	; (800c7d8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800c7a2:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800c7a4:	e010      	b.n	800c7c8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800c7a6:	4a0a      	ldr	r2, [pc, #40]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800c7ac:	4b08      	ldr	r3, [pc, #32]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	330c      	adds	r3, #12
 800c7b6:	4c06      	ldr	r4, [pc, #24]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7ff fc69 	bl	800c090 <_ZNK8touchgfx9colortypecvmEv>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800c7c2:	4b03      	ldr	r3, [pc, #12]	; (800c7d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800c7c4:	4a05      	ldr	r2, [pc, #20]	; (800c7dc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800c7c6:	601a      	str	r2, [r3, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	3714      	adds	r7, #20
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd90      	pop	{r4, r7, pc}
 800c7d0:	52001000 	.word	0x52001000
 800c7d4:	00010009 	.word	0x00010009
 800c7d8:	00020201 	.word	0x00020201
 800c7dc:	00030201 	.word	0x00030201

0800c7e0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	4a05      	ldr	r2, [pc, #20]	; (800c800 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	601a      	str	r2, [r3, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7ff fc59 	bl	800c0a8 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3708      	adds	r7, #8
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	0801e318 	.word	0x0801e318

0800c804 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff ffe7 	bl	800c7e0 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c812:	2114      	movs	r1, #20
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f00f fa3e 	bl	801bc96 <_ZdlPvj>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4618      	mov	r0, r3
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800c82c:	4a04      	ldr	r2, [pc, #16]	; (800c840 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6013      	str	r3, [r2, #0]
    }
 800c832:	bf00      	nop
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	2401aa14 	.word	0x2401aa14

0800c844 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800c844:	b480      	push	{r7}
 800c846:	b085      	sub	sp, #20
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800c852:	4a0b      	ldr	r2, [pc, #44]	; (800c880 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	611a      	str	r2, [r3, #16]
    {
    }
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4618      	mov	r0, r3
 800c874:	3714      	adds	r7, #20
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
 800c87e:	bf00      	nop
 800c880:	0801e038 	.word	0x0801e038

0800c884 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800c884:	b480      	push	{r7}
 800c886:	b083      	sub	sp, #12
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
    {
 800c88c:	4a04      	ldr	r2, [pc, #16]	; (800c8a0 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	601a      	str	r2, [r3, #0]
    }
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	0801e038 	.word	0x0801e038

0800c8a4 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
    }
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff ffe9 	bl	800c884 <_ZN8touchgfx7MVPHeapD1Ev>
 800c8b2:	2114      	movs	r1, #20
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f00f f9ee 	bl	801bc96 <_ZdlPvj>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3708      	adds	r7, #8
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
    {
 800c8cc:	4a04      	ldr	r2, [pc, #16]	; (800c8e0 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	601a      	str	r2, [r3, #0]
    }
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	370c      	adds	r7, #12
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	0801e478 	.word	0x0801e478

0800c8e4 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
    }
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff ffe9 	bl	800c8c4 <_ZN8touchgfx3LCDD1Ev>
 800c8f2:	2108      	movs	r1, #8
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f00f f9ce 	bl	801bc96 <_ZdlPvj>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
            : startX(0),
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	801a      	strh	r2, [r3, #0]
              startY(0),
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	805a      	strh	r2, [r3, #2]
              downX(0),
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2200      	movs	r2, #0
 800c91c:	809a      	strh	r2, [r3, #4]
              downY(0),
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2200      	movs	r2, #0
 800c922:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	739a      	strb	r2, [r3, #14]
        {
        }
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b082      	sub	sp, #8
 800c94e:	af00      	add	r7, sp, #0
 800c950:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff ffd5 	bl	800c904 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	2200      	movs	r2, #0
 800c95e:	611a      	str	r2, [r3, #16]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2200      	movs	r2, #0
 800c964:	829a      	strh	r2, [r3, #20]
    {
    }
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4618      	mov	r0, r3
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800c970:	b580      	push	{r7, lr}
 800c972:	b084      	sub	sp, #16
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
 800c97c:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800c97e:	4a55      	ldr	r2, [pc, #340]	; (800cad4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	68ba      	ldr	r2, [r7, #8]
 800c988:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	619a      	str	r2, [r3, #24]
          gestures(),
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	331c      	adds	r3, #28
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7ff ffcc 	bl	800c94a <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	3350      	adds	r3, #80	; 0x50
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7fd fc12 	bl	800a226 <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2201      	movs	r2, #1
 800ca20:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 800ca8a:	4a13      	ldr	r2, [pc, #76]	; (800cad8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800ca90:	4a12      	ldr	r2, [pc, #72]	; (800cadc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800ca92:	8b3b      	ldrh	r3, [r7, #24]
 800ca94:	8013      	strh	r3, [r2, #0]
 800ca96:	4b11      	ldr	r3, [pc, #68]	; (800cadc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800ca98:	881a      	ldrh	r2, [r3, #0]
 800ca9a:	4b11      	ldr	r3, [pc, #68]	; (800cae0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800ca9c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800ca9e:	4a11      	ldr	r2, [pc, #68]	; (800cae4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800caa0:	8bbb      	ldrh	r3, [r7, #28]
 800caa2:	8013      	strh	r3, [r2, #0]
 800caa4:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800caa6:	881a      	ldrh	r2, [r3, #0]
 800caa8:	4b0f      	ldr	r3, [pc, #60]	; (800cae8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800caaa:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800caae:	2200      	movs	r2, #0
 800cab0:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800cab2:	8b3a      	ldrh	r2, [r7, #24]
 800cab4:	8bbb      	ldrh	r3, [r7, #28]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	bf34      	ite	cc
 800caba:	2301      	movcc	r3, #1
 800cabc:	2300      	movcs	r3, #0
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	461a      	mov	r2, r3
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	4618      	mov	r0, r3
 800cacc:	3710      	adds	r7, #16
 800cace:	46bd      	mov	sp, r7
 800cad0:	bd80      	pop	{r7, pc}
 800cad2:	bf00      	nop
 800cad4:	0801e1f0 	.word	0x0801e1f0
 800cad8:	2401a9b8 	.word	0x2401a9b8
 800cadc:	2401a9ac 	.word	0x2401a9ac
 800cae0:	2401a9b2 	.word	0x2401a9b2
 800cae4:	2401a9ae 	.word	0x2401a9ae
 800cae8:	2401a9b4 	.word	0x2401a9b4
 800caec:	2401a9b0 	.word	0x2401a9b0

0800caf0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd f8e7 	bl	8009cd0 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800cb02:	bf00      	nop
 800cb04:	3708      	adds	r7, #8
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
	...

0800cb0c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af02      	add	r7, sp, #8
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800cb1a:	68f8      	ldr	r0, [r7, #12]
 800cb1c:	69bb      	ldr	r3, [r7, #24]
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	f7ff fe8d 	bl	800c844 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800cb2a:	4a04      	ldr	r2, [pc, #16]	; (800cb3c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	601a      	str	r2, [r3, #0]
    {

    }
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	4618      	mov	r0, r3
 800cb34:	3710      	adds	r7, #16
 800cb36:	46bd      	mov	sp, r7
 800cb38:	bd80      	pop	{r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0801e024 	.word	0x0801e024

0800cb40 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800cb40:	b580      	push	{r7, lr}
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	4801      	ldr	r0, [pc, #4]	; (800cb4c <__tcf_0+0xc>)
 800cb46:	f000 f965 	bl	800ce14 <_ZN12FrontendHeapD1Ev>
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	24019864 	.word	0x24019864

0800cb50 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800cb50:	b580      	push	{r7, lr}
 800cb52:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800cb54:	4b11      	ldr	r3, [pc, #68]	; (800cb9c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f3bf 8f5b 	dmb	ish
 800cb5c:	f003 0301 	and.w	r3, r3, #1
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bf0c      	ite	eq
 800cb64:	2301      	moveq	r3, #1
 800cb66:	2300      	movne	r3, #0
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d013      	beq.n	800cb96 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800cb6e:	480b      	ldr	r0, [pc, #44]	; (800cb9c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800cb70:	f00f f893 	bl	801bc9a <__cxa_guard_acquire>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bf14      	ite	ne
 800cb7a:	2301      	movne	r3, #1
 800cb7c:	2300      	moveq	r3, #0
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d008      	beq.n	800cb96 <_ZN12FrontendHeap11getInstanceEv+0x46>
 800cb84:	4806      	ldr	r0, [pc, #24]	; (800cba0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800cb86:	f000 f867 	bl	800cc58 <_ZN12FrontendHeapC1Ev>
 800cb8a:	4806      	ldr	r0, [pc, #24]	; (800cba4 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800cb8c:	f00f f8d0 	bl	801bd30 <atexit>
 800cb90:	4802      	ldr	r0, [pc, #8]	; (800cb9c <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800cb92:	f00f f88e 	bl	801bcb2 <__cxa_guard_release>
        return instance;
 800cb96:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800cb98:	4618      	mov	r0, r3
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	24019b1c 	.word	0x24019b1c
 800cba0:	24019864 	.word	0x24019864
 800cba4:	0800cb41 	.word	0x0800cb41

0800cba8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	4a05      	ldr	r2, [pc, #20]	; (800cbc8 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	601a      	str	r2, [r3, #0]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff fe63 	bl	800c884 <_ZN8touchgfx7MVPHeapD1Ev>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	0801e024 	.word	0x0801e024

0800cbcc <_ZN16FrontendHeapBaseD0Ev>:
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f7ff ffe7 	bl	800cba8 <_ZN16FrontendHeapBaseD1Ev>
 800cbda:	2114      	movs	r1, #20
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f00f f85a 	bl	801bc96 <_ZdlPvj>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3708      	adds	r7, #8
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f000 fdd4 	bl	800d7a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800cbfc:	4a03      	ldr	r2, [pc, #12]	; (800cc0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	601a      	str	r2, [r3, #0]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	0801dff0 	.word	0x0801dff0

0800cc10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fdc2 	bl	800d7a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800cc20:	4a03      	ldr	r2, [pc, #12]	; (800cc30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	0801dfbc 	.word	0x0801dfbc

0800cc34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 fdb0 	bl	800d7a4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800cc44:	4a03      	ldr	r2, [pc, #12]	; (800cc54 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	601a      	str	r2, [r3, #0]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3708      	adds	r7, #8
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	0801df88 	.word	0x0801df88

0800cc58 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800cc58:	b590      	push	{r4, r7, lr}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af02      	add	r7, sp, #8
 800cc5e:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f103 0114 	add.w	r1, r3, #20
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f503 74a2 	add.w	r4, r3, #324	; 0x144
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
                     app(model, *this)
 800cc7a:	9300      	str	r3, [sp, #0]
 800cc7c:	4623      	mov	r3, r4
 800cc7e:	f7ff ff45 	bl	800cb0c <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800cc82:	4a18      	ldr	r2, [pc, #96]	; (800cce4 <_ZN12FrontendHeapC1Ev+0x8c>)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3314      	adds	r3, #20
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff ffad 	bl	800cbec <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	332c      	adds	r3, #44	; 0x2c
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff ffba 	bl	800cc10 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7ff ffc6 	bl	800cc34 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fe fc88 	bl	800b5c4 <_ZN5ModelC1Ev>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f503 70ae 	add.w	r0, r3, #348	; 0x15c
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	4619      	mov	r1, r3
 800ccc4:	f7fe fc68 	bl	800b598 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	4610      	mov	r0, r2
 800ccd4:	f7ff ff0c 	bl	800caf0 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4618      	mov	r0, r3
 800ccdc:	370c      	adds	r7, #12
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd90      	pop	{r4, r7, pc}
 800cce2:	bf00      	nop
 800cce4:	0801df74 	.word	0x0801df74

0800cce8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b086      	sub	sp, #24
 800ccec:	af02      	add	r7, sp, #8
 800ccee:	60f8      	str	r0, [r7, #12]
 800ccf0:	60b9      	str	r1, [r7, #8]
 800ccf2:	607a      	str	r2, [r7, #4]
 800ccf4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	8bbb      	ldrh	r3, [r7, #28]
 800ccfa:	9301      	str	r3, [sp, #4]
 800ccfc:	8b3b      	ldrh	r3, [r7, #24]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	68b9      	ldr	r1, [r7, #8]
 800cd06:	f7ff fe33 	bl	800c970 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800cd0a:	4a04      	ldr	r2, [pc, #16]	; (800cd1c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	601a      	str	r2, [r3, #0]
    }
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	0801e048 	.word	0x0801e048

0800cd20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b086      	sub	sp, #24
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
 800cd2e:	68f8      	ldr	r0, [r7, #12]
 800cd30:	8bbb      	ldrh	r3, [r7, #28]
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	8b3b      	ldrh	r3, [r7, #24]
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	f7ff ffd3 	bl	800cce8 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800cd42:	4a04      	ldr	r2, [pc, #16]	; (800cd54 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	601a      	str	r2, [r3, #0]
    }
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3710      	adds	r7, #16
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	0801de28 	.word	0x0801de28

0800cd58 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	4a04      	ldr	r2, [pc, #16]	; (800cd74 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	601a      	str	r2, [r3, #0]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	370c      	adds	r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	0801de10 	.word	0x0801de10

0800cd78 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7ff ffe8 	bl	800cd58 <_ZN8touchgfx15TouchControllerC1Ev>
 800cd88:	4a03      	ldr	r2, [pc, #12]	; (800cd98 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4618      	mov	r0, r3
 800cd92:	3708      	adds	r7, #8
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	0801ddf8 	.word	0x0801ddf8

0800cd9c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800cd9c:	b590      	push	{r4, r7, lr}
 800cd9e:	b085      	sub	sp, #20
 800cda0:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800cda2:	f7fe f9fb 	bl	800b19c <_ZN14BitmapDatabase11getInstanceEv>
 800cda6:	4604      	mov	r4, r0
 800cda8:	f7fe fa02 	bl	800b1b0 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800cdac:	4603      	mov	r3, r0
 800cdae:	4619      	mov	r1, r3
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	9300      	str	r3, [sp, #0]
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f005 fd01 	bl	80127c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800cdbe:	4809      	ldr	r0, [pc, #36]	; (800cde4 <touchgfx_init+0x48>)
 800cdc0:	f7ff fd30 	bl	800c824 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	f7fe fb1f 	bl	800b408 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800cdca:	4807      	ldr	r0, [pc, #28]	; (800cde8 <touchgfx_init+0x4c>)
 800cdcc:	f005 fbb0 	bl	8012530 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800cdd0:	f7ff febe 	bl	800cb50 <_ZN12FrontendHeap11getInstanceEv>
 800cdd4:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800cdd6:	4805      	ldr	r0, [pc, #20]	; (800cdec <touchgfx_init+0x50>)
 800cdd8:	f7fe ffca 	bl	800bd70 <_ZN11TouchGFXHAL10initializeEv>
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd90      	pop	{r4, r7, pc}
 800cde4:	2401a928 	.word	0x2401a928
 800cde8:	2400001c 	.word	0x2400001c
 800cdec:	2401a92c 	.word	0x2401a92c

0800cdf0 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	af00      	add	r7, sp, #0
}
 800cdf4:	bf00      	nop
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
	...

0800ce00 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800ce04:	4802      	ldr	r0, [pc, #8]	; (800ce10 <touchgfx_taskEntry+0x10>)
 800ce06:	f000 ffda 	bl	800ddbe <_ZN8touchgfx3HAL9taskEntryEv>
}
 800ce0a:	bf00      	nop
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	2401a92c 	.word	0x2401a92c

0800ce14 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	4a10      	ldr	r2, [pc, #64]	; (800ce60 <_ZN12FrontendHeapD1Ev+0x4c>)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	601a      	str	r2, [r3, #0]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fe fb7f 	bl	800b52c <_ZN19FrontendApplicationD1Ev>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 f827 	bl	800ce88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	332c      	adds	r3, #44	; 0x2c
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f844 	bl	800cecc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	3314      	adds	r3, #20
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f000 f863 	bl	800cf14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4618      	mov	r0, r3
 800ce52:	f7ff fea9 	bl	800cba8 <_ZN16FrontendHeapBaseD1Ev>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3708      	adds	r7, #8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	0801df74 	.word	0x0801df74

0800ce64 <_ZN12FrontendHeapD0Ev>:
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f7ff ffd1 	bl	800ce14 <_ZN12FrontendHeapD1Ev>
 800ce72:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f00e ff0d 	bl	801bc96 <_ZdlPvj>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3708      	adds	r7, #8
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
	...

0800ce88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	4a05      	ldr	r2, [pc, #20]	; (800cea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 fc82 	bl	800d7a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	4618      	mov	r0, r3
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	0801df88 	.word	0x0801df88

0800ceac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f7ff ffe7 	bl	800ce88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800ceba:	2114      	movs	r1, #20
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f00e feea 	bl	801bc96 <_ZdlPvj>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4618      	mov	r0, r3
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	4a05      	ldr	r2, [pc, #20]	; (800ceec <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	601a      	str	r2, [r3, #0]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4618      	mov	r0, r3
 800cede:	f000 fc60 	bl	800d7a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	0801dfbc 	.word	0x0801dfbc

0800cef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f7ff ffe7 	bl	800cecc <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cefe:	f44f 718c 	mov.w	r1, #280	; 0x118
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f00e fec7 	bl	801bc96 <_ZdlPvj>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
	...

0800cf14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	4a05      	ldr	r2, [pc, #20]	; (800cf34 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	4618      	mov	r0, r3
 800cf26:	f000 fc3c 	bl	800d7a2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}
 800cf34:	0801dff0 	.word	0x0801dff0

0800cf38 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b082      	sub	sp, #8
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f7ff ffe7 	bl	800cf14 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800cf46:	2118      	movs	r1, #24
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f00e fea4 	bl	801bc96 <_ZdlPvj>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4618      	mov	r0, r3
 800cf52:	3708      	adds	r7, #8
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	4a05      	ldr	r2, [pc, #20]	; (800cf78 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7ff fcab 	bl	800c8c4 <_ZN8touchgfx3LCDD1Ev>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4618      	mov	r0, r3
 800cf72:	3708      	adds	r7, #8
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	0801e834 	.word	0x0801e834

0800cf7c <_ZN8touchgfx8LCD24bppD0Ev>:
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff ffe7 	bl	800cf58 <_ZN8touchgfx8LCD24bppD1Ev>
 800cf8a:	2164      	movs	r1, #100	; 0x64
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f00e fe82 	bl	801bc96 <_ZdlPvj>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	4618      	mov	r0, r3
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <_Z41__static_initialization_and_destruction_0ii>:
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af02      	add	r7, sp, #8
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d119      	bne.n	800cfe0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d114      	bne.n	800cfe0 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800cfb6:	4818      	ldr	r0, [pc, #96]	; (800d018 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800cfb8:	f7ff fede 	bl	800cd78 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800cfbc:	4817      	ldr	r0, [pc, #92]	; (800d01c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800cfbe:	f7ff f923 	bl	800c208 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800cfc2:	4817      	ldr	r0, [pc, #92]	; (800d020 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800cfc4:	f008 fca2 	bl	801590c <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800cfc8:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800cfd2:	9300      	str	r3, [sp, #0]
 800cfd4:	4b10      	ldr	r3, [pc, #64]	; (800d018 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800cfd6:	4a12      	ldr	r2, [pc, #72]	; (800d020 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800cfd8:	4910      	ldr	r1, [pc, #64]	; (800d01c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800cfda:	4812      	ldr	r0, [pc, #72]	; (800d024 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800cfdc:	f7ff fea0 	bl	800cd20 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d113      	bne.n	800d00e <_Z41__static_initialization_and_destruction_0ii+0x72>
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d10e      	bne.n	800d00e <_Z41__static_initialization_and_destruction_0ii+0x72>
 800cff0:	480c      	ldr	r0, [pc, #48]	; (800d024 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800cff2:	f7fe ff4d 	bl	800be90 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800cff6:	480c      	ldr	r0, [pc, #48]	; (800d028 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800cff8:	f7fc f8f0 	bl	80091dc <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800cffc:	4808      	ldr	r0, [pc, #32]	; (800d020 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800cffe:	f7ff ffab 	bl	800cf58 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800d002:	4806      	ldr	r0, [pc, #24]	; (800d01c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d004:	f7ff f92a 	bl	800c25c <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800d008:	4803      	ldr	r0, [pc, #12]	; (800d018 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d00a:	f7fe fc59 	bl	800b8c0 <_ZN20STM32TouchControllerD1Ev>
}
 800d00e:	bf00      	nop
 800d010:	3708      	adds	r7, #8
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	24019b20 	.word	0x24019b20
 800d01c:	24019b24 	.word	0x24019b24
 800d020:	2401a8c4 	.word	0x2401a8c4
 800d024:	2401a92c 	.word	0x2401a92c
 800d028:	2400001c 	.word	0x2400001c

0800d02c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800d034:	2301      	movs	r3, #1
    }
 800d036:	4618      	mov	r0, r3
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800d042:	b480      	push	{r7}
 800d044:	b083      	sub	sp, #12
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800d04a:	230c      	movs	r3, #12
    }
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d064:	887a      	ldrh	r2, [r7, #2]
 800d066:	4613      	mov	r3, r2
 800d068:	005b      	lsls	r3, r3, #1
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	3308      	adds	r3, #8
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	4413      	add	r3, r2
    }
 800d074:	4618      	mov	r0, r3
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800d080:	b480      	push	{r7}
 800d082:	b083      	sub	sp, #12
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	460b      	mov	r3, r1
 800d08a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d08c:	887a      	ldrh	r2, [r7, #2]
 800d08e:	4613      	mov	r3, r2
 800d090:	005b      	lsls	r3, r3, #1
 800d092:	4413      	add	r3, r2
 800d094:	009b      	lsls	r3, r3, #2
 800d096:	3308      	adds	r3, #8
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	4413      	add	r3, r2
    }
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d0b0:	2301      	movs	r3, #1
    }
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d0c6:	f44f 7388 	mov.w	r3, #272	; 0x110
    }
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	370c      	adds	r7, #12
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d4:	4770      	bx	lr

0800d0d6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d0d6:	b480      	push	{r7}
 800d0d8:	b083      	sub	sp, #12
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	460b      	mov	r3, r1
 800d0e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d0e2:	887a      	ldrh	r2, [r7, #2]
 800d0e4:	4613      	mov	r3, r2
 800d0e6:	011b      	lsls	r3, r3, #4
 800d0e8:	4413      	add	r3, r2
 800d0ea:	011b      	lsls	r3, r3, #4
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	4413      	add	r3, r2
    }
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d0fe:	b480      	push	{r7}
 800d100:	b083      	sub	sp, #12
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	460b      	mov	r3, r1
 800d108:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d10a:	887a      	ldrh	r2, [r7, #2]
 800d10c:	4613      	mov	r3, r2
 800d10e:	011b      	lsls	r3, r3, #4
 800d110:	4413      	add	r3, r2
 800d112:	011b      	lsls	r3, r3, #4
 800d114:	3308      	adds	r3, #8
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	4413      	add	r3, r2
    }
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d126:	b480      	push	{r7}
 800d128:	b083      	sub	sp, #12
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d12e:	2301      	movs	r3, #1
    }
 800d130:	4618      	mov	r0, r3
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d144:	2310      	movs	r3, #16
    }
 800d146:	4618      	mov	r0, r3
 800d148:	370c      	adds	r7, #12
 800d14a:	46bd      	mov	sp, r7
 800d14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d150:	4770      	bx	lr

0800d152 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d152:	b480      	push	{r7}
 800d154:	b083      	sub	sp, #12
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
 800d15a:	460b      	mov	r3, r1
 800d15c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d15e:	887b      	ldrh	r3, [r7, #2]
 800d160:	011b      	lsls	r3, r3, #4
 800d162:	3308      	adds	r3, #8
 800d164:	687a      	ldr	r2, [r7, #4]
 800d166:	4413      	add	r3, r2
    }
 800d168:	4618      	mov	r0, r3
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	460b      	mov	r3, r1
 800d17e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d180:	887b      	ldrh	r3, [r7, #2]
 800d182:	011b      	lsls	r3, r3, #4
 800d184:	3308      	adds	r3, #8
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	4413      	add	r3, r2
    }
 800d18a:	4618      	mov	r0, r3
 800d18c:	370c      	adds	r7, #12
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr

0800d196 <_GLOBAL__sub_I_touchgfx_init>:
 800d196:	b580      	push	{r7, lr}
 800d198:	af00      	add	r7, sp, #0
 800d19a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d19e:	2001      	movs	r0, #1
 800d1a0:	f7ff fefc 	bl	800cf9c <_Z41__static_initialization_and_destruction_0ii>
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <_GLOBAL__sub_D_touchgfx_init>:
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	f7ff fef4 	bl	800cf9c <_Z41__static_initialization_and_destruction_0ii>
 800d1b4:	bd80      	pop	{r7, pc}

0800d1b6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800d1b6:	b580      	push	{r7, lr}
 800d1b8:	b082      	sub	sp, #8
 800d1ba:	af00      	add	r7, sp, #0
 800d1bc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3320      	adds	r3, #32
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	4798      	blx	r3
    }
 800d1ca:	bf00      	nop
 800d1cc:	3708      	adds	r7, #8
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800d1d2:	b480      	push	{r7}
 800d1d4:	b083      	sub	sp, #12
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d1e0:	3301      	adds	r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 800d1ea:	bf00      	nop
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr
	...

0800d1f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800d204:	78fb      	ldrb	r3, [r7, #3]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d002      	beq.n	800d210 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800d20a:	78fb      	ldrb	r3, [r7, #3]
 800d20c:	2b02      	cmp	r3, #2
 800d20e:	d105      	bne.n	800d21c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 800d218:	2301      	movs	r3, #1
 800d21a:	e027      	b.n	800d26c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800d21c:	78fb      	ldrb	r3, [r7, #3]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d123      	bne.n	800d26a <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d226:	2b00      	cmp	r3, #0
 800d228:	d014      	beq.n	800d254 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	339c      	adds	r3, #156	; 0x9c
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	4798      	blx	r3
 800d236:	4603      	mov	r3, r0
 800d238:	461a      	mov	r2, r3
 800d23a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d23e:	429a      	cmp	r2, r3
 800d240:	d008      	beq.n	800d254 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d242:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	f083 0301 	eor.w	r3, r3, #1
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d250:	2301      	movs	r3, #1
 800d252:	e000      	b.n	800d256 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800d254:	2300      	movs	r3, #0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d005      	beq.n	800d266 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	78fa      	ldrb	r2, [r7, #3]
 800d25e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800d262:	2301      	movs	r3, #1
 800d264:	e002      	b.n	800d26c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800d266:	2300      	movs	r3, #0
 800d268:	e000      	b.n	800d26c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800d26a:	2300      	movs	r3, #0
    }
 800d26c:	4618      	mov	r0, r3
 800d26e:	3708      	adds	r7, #8
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	2401a9b6 	.word	0x2401a9b6

0800d278 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	683a      	ldr	r2, [r7, #0]
 800d286:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800d288:	bf00      	nop
 800d28a:	370c      	adds	r7, #12
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr

0800d294 <__NVIC_EnableIRQ>:
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d29e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	db0b      	blt.n	800d2be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d2a6:	88fb      	ldrh	r3, [r7, #6]
 800d2a8:	f003 021f 	and.w	r2, r3, #31
 800d2ac:	4907      	ldr	r1, [pc, #28]	; (800d2cc <__NVIC_EnableIRQ+0x38>)
 800d2ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2b2:	095b      	lsrs	r3, r3, #5
 800d2b4:	2001      	movs	r0, #1
 800d2b6:	fa00 f202 	lsl.w	r2, r0, r2
 800d2ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d2be:	bf00      	nop
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr
 800d2ca:	bf00      	nop
 800d2cc:	e000e100 	.word	0xe000e100

0800d2d0 <__NVIC_DisableIRQ>:
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b083      	sub	sp, #12
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d2da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	db12      	blt.n	800d308 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d2e2:	88fb      	ldrh	r3, [r7, #6]
 800d2e4:	f003 021f 	and.w	r2, r3, #31
 800d2e8:	490a      	ldr	r1, [pc, #40]	; (800d314 <__NVIC_DisableIRQ+0x44>)
 800d2ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2ee:	095b      	lsrs	r3, r3, #5
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	fa00 f202 	lsl.w	r2, r0, r2
 800d2f6:	3320      	adds	r3, #32
 800d2f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d2fc:	f3bf 8f4f 	dsb	sy
}
 800d300:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d302:	f3bf 8f6f 	isb	sy
}
 800d306:	bf00      	nop
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	e000e100 	.word	0xe000e100

0800d318 <__NVIC_SetPriority>:
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	6039      	str	r1, [r7, #0]
 800d322:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	db0a      	blt.n	800d342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	b2da      	uxtb	r2, r3
 800d330:	490c      	ldr	r1, [pc, #48]	; (800d364 <__NVIC_SetPriority+0x4c>)
 800d332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d336:	0112      	lsls	r2, r2, #4
 800d338:	b2d2      	uxtb	r2, r2
 800d33a:	440b      	add	r3, r1
 800d33c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d340:	e00a      	b.n	800d358 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	b2da      	uxtb	r2, r3
 800d346:	4908      	ldr	r1, [pc, #32]	; (800d368 <__NVIC_SetPriority+0x50>)
 800d348:	88fb      	ldrh	r3, [r7, #6]
 800d34a:	f003 030f 	and.w	r3, r3, #15
 800d34e:	3b04      	subs	r3, #4
 800d350:	0112      	lsls	r2, r2, #4
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	440b      	add	r3, r1
 800d356:	761a      	strb	r2, [r3, #24]
}
 800d358:	bf00      	nop
 800d35a:	370c      	adds	r7, #12
 800d35c:	46bd      	mov	sp, r7
 800d35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d362:	4770      	bx	lr
 800d364:	e000e100 	.word	0xe000e100
 800d368:	e000ed00 	.word	0xe000ed00

0800d36c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800d36c:	b5b0      	push	{r4, r5, r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4618      	mov	r0, r3
 800d378:	f000 fd0d 	bl	800dd96 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800d37c:	687d      	ldr	r5, [r7, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3364      	adds	r3, #100	; 0x64
 800d384:	681c      	ldr	r4, [r3, #0]
 800d386:	f002 fd07 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 800d38a:	4603      	mov	r3, r0
 800d38c:	4619      	mov	r1, r3
 800d38e:	4628      	mov	r0, r5
 800d390:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	490b      	ldr	r1, [pc, #44]	; (800d3c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff ff6e 	bl	800d278 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2101      	movs	r1, #1
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7ff ff29 	bl	800d1f8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	3388      	adds	r3, #136	; 0x88
 800d3ae:	681c      	ldr	r4, [r3, #0]
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800d3b8:	47a0      	blx	r4
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bdb0      	pop	{r4, r5, r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	0800bff1 	.word	0x0800bff1

0800d3c8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800d3d0:	2109      	movs	r1, #9
 800d3d2:	205a      	movs	r0, #90	; 0x5a
 800d3d4:	f7ff ffa0 	bl	800d318 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800d3d8:	2109      	movs	r1, #9
 800d3da:	2058      	movs	r0, #88	; 0x58
 800d3dc:	f7ff ff9c 	bl	800d318 <__NVIC_SetPriority>
}
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800d3f0:	205a      	movs	r0, #90	; 0x5a
 800d3f2:	f7ff ff4f 	bl	800d294 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800d3f6:	2058      	movs	r0, #88	; 0x58
 800d3f8:	f7ff ff4c 	bl	800d294 <__NVIC_EnableIRQ>
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800d40c:	205a      	movs	r0, #90	; 0x5a
 800d40e:	f7ff ff5f 	bl	800d2d0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800d412:	2058      	movs	r0, #88	; 0x58
 800d414:	f7ff ff5c 	bl	800d2d0 <__NVIC_DisableIRQ>
}
 800d418:	bf00      	nop
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}

0800d420 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800d428:	4b11      	ldr	r3, [pc, #68]	; (800d470 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d432:	b29b      	uxth	r3, r3
 800d434:	3b01      	subs	r3, #1
 800d436:	b29a      	uxth	r2, r3
 800d438:	4b0e      	ldr	r3, [pc, #56]	; (800d474 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800d43a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800d43c:	4b0c      	ldr	r3, [pc, #48]	; (800d470 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d43e:	691b      	ldr	r3, [r3, #16]
 800d440:	b29b      	uxth	r3, r3
 800d442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d446:	b29b      	uxth	r3, r3
 800d448:	3b01      	subs	r3, #1
 800d44a:	b29a      	uxth	r2, r3
 800d44c:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800d44e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800d450:	4b08      	ldr	r3, [pc, #32]	; (800d474 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800d452:	881a      	ldrh	r2, [r3, #0]
 800d454:	4b06      	ldr	r3, [pc, #24]	; (800d470 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d456:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800d458:	4b05      	ldr	r3, [pc, #20]	; (800d470 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45c:	4a04      	ldr	r2, [pc, #16]	; (800d470 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d45e:	f043 0301 	orr.w	r3, r3, #1
 800d462:	6353      	str	r3, [r2, #52]	; 0x34
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	50001000 	.word	0x50001000
 800d474:	2401a9a8 	.word	0x2401a9a8
 800d478:	2401a9aa 	.word	0x2401a9aa

0800d47c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	4618      	mov	r0, r3
 800d488:	f000 fc6c 	bl	800dd64 <_ZN8touchgfx3HAL10beginFrameEv>
 800d48c:	4603      	mov	r3, r0
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fc6b 	bl	800dd7c <_ZN8touchgfx3HAL8endFrameEv>
}
 800d4a6:	bf00      	nop
 800d4a8:	3708      	adds	r7, #8
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
	...

0800d4b0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800d4b8:	4b03      	ldr	r3, [pc, #12]	; (800d4c8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800d4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800d4bc:	4618      	mov	r0, r3
 800d4be:	370c      	adds	r7, #12
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	50001084 	.word	0x50001084

0800d4cc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800d4d6:	4a06      	ldr	r2, [pc, #24]	; (800d4f0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800d4d8:	683b      	ldr	r3, [r7, #0]
 800d4da:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800d4dc:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800d4de:	2201      	movs	r2, #1
 800d4e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d4e2:	bf00      	nop
 800d4e4:	370c      	adds	r7, #12
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	50001084 	.word	0x50001084
 800d4f4:	50001000 	.word	0x50001000

0800d4f8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6839      	ldr	r1, [r7, #0]
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fbf5 	bl	800dcf6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	607a      	str	r2, [r7, #4]
 800d520:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	f000 fd56 	bl	800dfda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800d52e:	4603      	mov	r3, r0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800d540:	4b0d      	ldr	r3, [pc, #52]	; (800d578 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800d542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d544:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800d546:	4b0c      	ldr	r3, [pc, #48]	; (800d578 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800d548:	68db      	ldr	r3, [r3, #12]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d550:	b29b      	uxth	r3, r3
 800d552:	3301      	adds	r3, #1
 800d554:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 800d556:	89fa      	ldrh	r2, [r7, #14]
 800d558:	89bb      	ldrh	r3, [r7, #12]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d304      	bcc.n	800d568 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 800d55e:	89fa      	ldrh	r2, [r7, #14]
 800d560:	89bb      	ldrh	r3, [r7, #12]
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	b29b      	uxth	r3, r3
 800d566:	e000      	b.n	800d56a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 800d568:	2300      	movs	r3, #0
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	50001000 	.word	0x50001000

0800d57c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800d57c:	b480      	push	{r7}
 800d57e:	b087      	sub	sp, #28
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800d584:	4b25      	ldr	r3, [pc, #148]	; (800d61c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	bf14      	ite	ne
 800d590:	2301      	movne	r3, #1
 800d592:	2300      	moveq	r3, #0
 800d594:	b2db      	uxtb	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	d03a      	beq.n	800d610 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d59a:	4b20      	ldr	r3, [pc, #128]	; (800d61c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d5a2:	f3bf 8f4f 	dsb	sy
}
 800d5a6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800d5a8:	4b1c      	ldr	r3, [pc, #112]	; (800d61c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800d5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5ae:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	0b5b      	lsrs	r3, r3, #13
 800d5b4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d5b8:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	08db      	lsrs	r3, r3, #3
 800d5be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d5c2:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d5cc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d5d2:	4912      	ldr	r1, [pc, #72]	; (800d61c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800d5d4:	4313      	orrs	r3, r2
 800d5d6:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	1e5a      	subs	r2, r3, #1
 800d5de:	60fa      	str	r2, [r7, #12]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	bf14      	ite	ne
 800d5e4:	2301      	movne	r3, #1
 800d5e6:	2300      	moveq	r3, #0
 800d5e8:	b2db      	uxtb	r3, r3
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d1ea      	bne.n	800d5c4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	1e5a      	subs	r2, r3, #1
 800d5f2:	613a      	str	r2, [r7, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	bf14      	ite	ne
 800d5f8:	2301      	movne	r3, #1
 800d5fa:	2300      	moveq	r3, #0
 800d5fc:	b2db      	uxtb	r3, r3
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1db      	bne.n	800d5ba <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d602:	f3bf 8f4f 	dsb	sy
}
 800d606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d608:	f3bf 8f6f 	isb	sy
}
 800d60c:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800d60e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800d610:	bf00      	nop
 800d612:	371c      	adds	r7, #28
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr
 800d61c:	e000ed00 	.word	0xe000ed00

0800d620 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800d620:	b480      	push	{r7}
 800d622:	b087      	sub	sp, #28
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800d628:	4b25      	ldr	r3, [pc, #148]	; (800d6c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800d62a:	695b      	ldr	r3, [r3, #20]
 800d62c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d630:	2b00      	cmp	r3, #0
 800d632:	bf14      	ite	ne
 800d634:	2301      	movne	r3, #1
 800d636:	2300      	moveq	r3, #0
 800d638:	b2db      	uxtb	r3, r3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d03a      	beq.n	800d6b4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800d63e:	4b20      	ldr	r3, [pc, #128]	; (800d6c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800d640:	2200      	movs	r2, #0
 800d642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800d646:	f3bf 8f4f 	dsb	sy
}
 800d64a:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800d64c:	4b1c      	ldr	r3, [pc, #112]	; (800d6c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800d64e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d652:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	0b5b      	lsrs	r3, r3, #13
 800d658:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800d65c:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	08db      	lsrs	r3, r3, #3
 800d662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d666:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	015a      	lsls	r2, r3, #5
 800d66c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800d670:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800d676:	4912      	ldr	r1, [pc, #72]	; (800d6c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800d678:	4313      	orrs	r3, r2
 800d67a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	1e5a      	subs	r2, r3, #1
 800d682:	60fa      	str	r2, [r7, #12]
 800d684:	2b00      	cmp	r3, #0
 800d686:	bf14      	ite	ne
 800d688:	2301      	movne	r3, #1
 800d68a:	2300      	moveq	r3, #0
 800d68c:	b2db      	uxtb	r3, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1ea      	bne.n	800d668 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	1e5a      	subs	r2, r3, #1
 800d696:	613a      	str	r2, [r7, #16]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bf14      	ite	ne
 800d69c:	2301      	movne	r3, #1
 800d69e:	2300      	moveq	r3, #0
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d1db      	bne.n	800d65e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d6a6:	f3bf 8f4f 	dsb	sy
}
 800d6aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d6ac:	f3bf 8f6f 	isb	sy
}
 800d6b0:	bf00      	nop
}
 800d6b2:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800d6b4:	bf00      	nop
 800d6b6:	371c      	adds	r7, #28
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr
 800d6c0:	e000ed00 	.word	0xe000ed00

0800d6c4 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b082      	sub	sp, #8
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800d6cc:	f7fc f906 	bl	80098dc <_ZN8touchgfx3HAL11getInstanceEv>
 800d6d0:	4603      	mov	r3, r0
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	bf0c      	ite	eq
 800d6d6:	2301      	moveq	r3, #1
 800d6d8:	2300      	movne	r3, #0
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d132      	bne.n	800d746 <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800d6e0:	4b1b      	ldr	r3, [pc, #108]	; (800d750 <HAL_LTDC_LineEventCallback+0x8c>)
 800d6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e4:	4a1b      	ldr	r2, [pc, #108]	; (800d754 <HAL_LTDC_LineEventCallback+0x90>)
 800d6e6:	8812      	ldrh	r2, [r2, #0]
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	bf0c      	ite	eq
 800d6ec:	2301      	moveq	r3, #1
 800d6ee:	2300      	movne	r3, #0
 800d6f0:	b2db      	uxtb	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d017      	beq.n	800d726 <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800d6f6:	4b18      	ldr	r3, [pc, #96]	; (800d758 <HAL_LTDC_LineEventCallback+0x94>)
 800d6f8:	881b      	ldrh	r3, [r3, #0]
 800d6fa:	4619      	mov	r1, r3
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7f4 fec3 	bl	8002488 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800d702:	f7fc f8eb 	bl	80098dc <_ZN8touchgfx3HAL11getInstanceEv>
 800d706:	4603      	mov	r3, r0
 800d708:	4618      	mov	r0, r3
 800d70a:	f7ff fd62 	bl	800d1d2 <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800d70e:	f7fe fc47 	bl	800bfa0 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800d712:	f7fc f8e3 	bl	80098dc <_ZN8touchgfx3HAL11getInstanceEv>
 800d716:	4603      	mov	r3, r0
 800d718:	4618      	mov	r0, r3
 800d71a:	f001 f889 	bl	800e830 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800d71e:	2000      	movs	r0, #0
 800d720:	f7fe f8f8 	bl	800b914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800d724:	e010      	b.n	800d748 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800d726:	4b0b      	ldr	r3, [pc, #44]	; (800d754 <HAL_LTDC_LineEventCallback+0x90>)
 800d728:	881b      	ldrh	r3, [r3, #0]
 800d72a:	4619      	mov	r1, r3
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f7f4 feab 	bl	8002488 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800d732:	f7fc f8d3 	bl	80098dc <_ZN8touchgfx3HAL11getInstanceEv>
 800d736:	4603      	mov	r3, r0
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff fd3c 	bl	800d1b6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800d73e:	2000      	movs	r0, #0
 800d740:	f7fe f920 	bl	800b984 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800d744:	e000      	b.n	800d748 <HAL_LTDC_LineEventCallback+0x84>
            return;
 800d746:	bf00      	nop
        }
    }
 800d748:	3708      	adds	r7, #8
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	50001000 	.word	0x50001000
 800d754:	2401a9a8 	.word	0x2401a9a8
 800d758:	2401a9aa 	.word	0x2401a9aa

0800d75c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d75c:	8880      	ldrh	r0, [r0, #4]
 800d75e:	4770      	bx	lr

0800d760 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	6803      	ldr	r3, [r0, #0]
 800d764:	460c      	mov	r4, r1
 800d766:	2100      	movs	r1, #0
 800d768:	4605      	mov	r5, r0
 800d76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d76c:	4798      	blx	r3
 800d76e:	4606      	mov	r6, r0
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	4628      	mov	r0, r5
 800d774:	1ba4      	subs	r4, r4, r6
 800d776:	6a1b      	ldr	r3, [r3, #32]
 800d778:	b2a4      	uxth	r4, r4
 800d77a:	4798      	blx	r3
 800d77c:	fbb4 f0f0 	udiv	r0, r4, r0
 800d780:	bd70      	pop	{r4, r5, r6, pc}

0800d782 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d782:	2300      	movs	r3, #0
 800d784:	8083      	strh	r3, [r0, #4]
 800d786:	4770      	bx	lr

0800d788 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d788:	b510      	push	{r4, lr}
 800d78a:	6803      	ldr	r3, [r0, #0]
 800d78c:	4604      	mov	r4, r0
 800d78e:	8881      	ldrh	r1, [r0, #4]
 800d790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d792:	4798      	blx	r3
 800d794:	88a3      	ldrh	r3, [r4, #4]
 800d796:	3301      	adds	r3, #1
 800d798:	80a3      	strh	r3, [r4, #4]
 800d79a:	bd10      	pop	{r4, pc}

0800d79c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d79c:	6803      	ldr	r3, [r0, #0]
 800d79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a0:	4718      	bx	r3

0800d7a2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d7a2:	4770      	bx	lr

0800d7a4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d7a4:	4a02      	ldr	r2, [pc, #8]	; (800d7b0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d7a6:	6002      	str	r2, [r0, #0]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	8082      	strh	r2, [r0, #4]
 800d7ac:	4770      	bx	lr
 800d7ae:	bf00      	nop
 800d7b0:	0801e120 	.word	0x0801e120

0800d7b4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d7b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	b12b      	cbz	r3, 800d7c6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d7ba:	b920      	cbnz	r0, 800d7c6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d7bc:	1a5a      	subs	r2, r3, r1
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	4250      	negs	r0, r2
 800d7c2:	4150      	adcs	r0, r2
 800d7c4:	e7f8      	b.n	800d7b8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d7c6:	4770      	bx	lr

0800d7c8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	6148      	str	r0, [r1, #20]
 800d7cc:	618b      	str	r3, [r1, #24]
 800d7ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d7d0:	b913      	cbnz	r3, 800d7d8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d7d2:	6281      	str	r1, [r0, #40]	; 0x28
 800d7d4:	4770      	bx	lr
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	699a      	ldr	r2, [r3, #24]
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	d1fb      	bne.n	800d7d6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d7de:	6199      	str	r1, [r3, #24]
 800d7e0:	4770      	bx	lr

0800d7e2 <_ZN8touchgfx9Container9removeAllEv>:
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d7e6:	b123      	cbz	r3, 800d7f2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d7e8:	6999      	ldr	r1, [r3, #24]
 800d7ea:	6281      	str	r1, [r0, #40]	; 0x28
 800d7ec:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d7f0:	e7f8      	b.n	800d7e4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d7f2:	4770      	bx	lr

0800d7f4 <_ZN8touchgfx9Container6unlinkEv>:
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	6283      	str	r3, [r0, #40]	; 0x28
 800d7f8:	4770      	bx	lr

0800d7fa <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	8002      	strh	r2, [r0, #0]
 800d7fe:	8042      	strh	r2, [r0, #2]
 800d800:	8082      	strh	r2, [r0, #4]
 800d802:	80c2      	strh	r2, [r0, #6]
 800d804:	4770      	bx	lr

0800d806 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d806:	b570      	push	{r4, r5, r6, lr}
 800d808:	460d      	mov	r5, r1
 800d80a:	4616      	mov	r6, r2
 800d80c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d80e:	b13c      	cbz	r4, 800d820 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	4620      	mov	r0, r4
 800d814:	4632      	mov	r2, r6
 800d816:	4629      	mov	r1, r5
 800d818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d81a:	4798      	blx	r3
 800d81c:	69a4      	ldr	r4, [r4, #24]
 800d81e:	e7f6      	b.n	800d80e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d820:	bd70      	pop	{r4, r5, r6, pc}

0800d822 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d822:	b538      	push	{r3, r4, r5, lr}
 800d824:	460d      	mov	r5, r1
 800d826:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d828:	b134      	cbz	r4, 800d838 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d82a:	682b      	ldr	r3, [r5, #0]
 800d82c:	4621      	mov	r1, r4
 800d82e:	4628      	mov	r0, r5
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	4798      	blx	r3
 800d834:	69a4      	ldr	r4, [r4, #24]
 800d836:	e7f7      	b.n	800d828 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d838:	bd38      	pop	{r3, r4, r5, pc}

0800d83a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d83a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d83c:	b19b      	cbz	r3, 800d866 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d83e:	428b      	cmp	r3, r1
 800d840:	d109      	bne.n	800d856 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d842:	699a      	ldr	r2, [r3, #24]
 800d844:	2100      	movs	r1, #0
 800d846:	6159      	str	r1, [r3, #20]
 800d848:	6282      	str	r2, [r0, #40]	; 0x28
 800d84a:	b902      	cbnz	r2, 800d84e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d84c:	4770      	bx	lr
 800d84e:	6199      	str	r1, [r3, #24]
 800d850:	4770      	bx	lr
 800d852:	4613      	mov	r3, r2
 800d854:	b13a      	cbz	r2, 800d866 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d856:	699a      	ldr	r2, [r3, #24]
 800d858:	428a      	cmp	r2, r1
 800d85a:	d1fa      	bne.n	800d852 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d85c:	698a      	ldr	r2, [r1, #24]
 800d85e:	619a      	str	r2, [r3, #24]
 800d860:	2300      	movs	r3, #0
 800d862:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d866:	4770      	bx	lr

0800d868 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d868:	b410      	push	{r4}
 800d86a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800d86c:	4604      	mov	r4, r0
 800d86e:	b92b      	cbnz	r3, 800d87c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d870:	6803      	ldr	r3, [r0, #0]
 800d872:	4611      	mov	r1, r2
 800d874:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d87a:	4718      	bx	r3
 800d87c:	b941      	cbnz	r1, 800d890 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d87e:	6193      	str	r3, [r2, #24]
 800d880:	6282      	str	r2, [r0, #40]	; 0x28
 800d882:	6154      	str	r4, [r2, #20]
 800d884:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d888:	4770      	bx	lr
 800d88a:	4603      	mov	r3, r0
 800d88c:	2800      	cmp	r0, #0
 800d88e:	d0f9      	beq.n	800d884 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d890:	4299      	cmp	r1, r3
 800d892:	6998      	ldr	r0, [r3, #24]
 800d894:	d1f9      	bne.n	800d88a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d896:	6190      	str	r0, [r2, #24]
 800d898:	618a      	str	r2, [r1, #24]
 800d89a:	e7f2      	b.n	800d882 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a0:	461f      	mov	r7, r3
 800d8a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d8a6:	460d      	mov	r5, r1
 800d8a8:	4616      	mov	r6, r2
 800d8aa:	b103      	cbz	r3, 800d8ae <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d8ac:	6038      	str	r0, [r7, #0]
 800d8ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800d8b0:	b314      	cbz	r4, 800d8f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d8b2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800d8b6:	b1eb      	cbz	r3, 800d8f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d8bc:	428d      	cmp	r5, r1
 800d8be:	db19      	blt.n	800d8f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8c0:	b289      	uxth	r1, r1
 800d8c2:	8923      	ldrh	r3, [r4, #8]
 800d8c4:	440b      	add	r3, r1
 800d8c6:	b21b      	sxth	r3, r3
 800d8c8:	429d      	cmp	r5, r3
 800d8ca:	da13      	bge.n	800d8f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8cc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d8d0:	4296      	cmp	r6, r2
 800d8d2:	db0f      	blt.n	800d8f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8d4:	b292      	uxth	r2, r2
 800d8d6:	8963      	ldrh	r3, [r4, #10]
 800d8d8:	4413      	add	r3, r2
 800d8da:	b21b      	sxth	r3, r3
 800d8dc:	429e      	cmp	r6, r3
 800d8de:	da09      	bge.n	800d8f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d8e0:	6823      	ldr	r3, [r4, #0]
 800d8e2:	1ab2      	subs	r2, r6, r2
 800d8e4:	1a69      	subs	r1, r5, r1
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800d8ec:	b212      	sxth	r2, r2
 800d8ee:	463b      	mov	r3, r7
 800d8f0:	b209      	sxth	r1, r1
 800d8f2:	47c0      	blx	r8
 800d8f4:	69a4      	ldr	r4, [r4, #24]
 800d8f6:	e7db      	b.n	800d8b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d8fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	4c6d      	ldr	r4, [pc, #436]	; (800dab8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d902:	b0a1      	sub	sp, #132	; 0x84
 800d904:	4606      	mov	r6, r0
 800d906:	6824      	ldr	r4, [r4, #0]
 800d908:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800d90a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800d90e:	2400      	movs	r4, #0
 800d910:	9303      	str	r3, [sp, #12]
 800d912:	802c      	strh	r4, [r5, #0]
 800d914:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800d916:	802c      	strh	r4, [r5, #0]
 800d918:	601c      	str	r4, [r3, #0]
 800d91a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d91e:	f7ff ffbd 	bl	800d89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d922:	f1b9 0f03 	cmp.w	r9, #3
 800d926:	f340 80c1 	ble.w	800daac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d92a:	4631      	mov	r1, r6
 800d92c:	a80c      	add	r0, sp, #48	; 0x30
 800d92e:	f003 fb47 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d932:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800d936:	9306      	str	r3, [sp, #24]
 800d938:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800d93c:	9307      	str	r3, [sp, #28]
 800d93e:	9b03      	ldr	r3, [sp, #12]
 800d940:	f8d3 a000 	ldr.w	sl, [r3]
 800d944:	f1ba 0f00 	cmp.w	sl, #0
 800d948:	f000 80b3 	beq.w	800dab2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d94c:	4651      	mov	r1, sl
 800d94e:	a810      	add	r0, sp, #64	; 0x40
 800d950:	f003 fb36 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d954:	2002      	movs	r0, #2
 800d956:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800d95a:	9b01      	ldr	r3, [sp, #4]
 800d95c:	9a06      	ldr	r2, [sp, #24]
 800d95e:	fb91 f1f0 	sdiv	r1, r1, r0
 800d962:	189d      	adds	r5, r3, r2
 800d964:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800d968:	9a07      	ldr	r2, [sp, #28]
 800d96a:	4419      	add	r1, r3
 800d96c:	9b02      	ldr	r3, [sp, #8]
 800d96e:	4413      	add	r3, r2
 800d970:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800d974:	1a6d      	subs	r5, r5, r1
 800d976:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800d97a:	fb92 f2f0 	sdiv	r2, r2, r0
 800d97e:	440a      	add	r2, r1
 800d980:	1a9b      	subs	r3, r3, r2
 800d982:	435b      	muls	r3, r3
 800d984:	fb05 3505 	mla	r5, r5, r5, r3
 800d988:	4f4c      	ldr	r7, [pc, #304]	; (800dabc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d98a:	ac10      	add	r4, sp, #64	; 0x40
 800d98c:	f1b9 0f0c 	cmp.w	r9, #12
 800d990:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d994:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d998:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d99a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d99c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d9a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d9a4:	f04f 0303 	mov.w	r3, #3
 800d9a8:	bfd8      	it	le
 800d9aa:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d9ae:	f04f 0400 	mov.w	r4, #0
 800d9b2:	f8cd 9000 	str.w	r9, [sp]
 800d9b6:	bfcc      	ite	gt
 800d9b8:	4698      	movgt	r8, r3
 800d9ba:	fb92 f8f3 	sdivle	r8, r2, r3
 800d9be:	1c63      	adds	r3, r4, #1
 800d9c0:	aa10      	add	r2, sp, #64	; 0x40
 800d9c2:	f004 0401 	and.w	r4, r4, #1
 800d9c6:	f04f 0b00 	mov.w	fp, #0
 800d9ca:	9308      	str	r3, [sp, #32]
 800d9cc:	9b00      	ldr	r3, [sp, #0]
 800d9ce:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d9d2:	fb93 f3f8 	sdiv	r3, r3, r8
 800d9d6:	3404      	adds	r4, #4
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	9304      	str	r3, [sp, #16]
 800d9dc:	9a04      	ldr	r2, [sp, #16]
 800d9de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d9e2:	fb13 f302 	smulbb	r3, r3, r2
 800d9e6:	9a01      	ldr	r2, [sp, #4]
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	1899      	adds	r1, r3, r2
 800d9ec:	9305      	str	r3, [sp, #20]
 800d9ee:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d9f2:	b209      	sxth	r1, r1
 800d9f4:	4299      	cmp	r1, r3
 800d9f6:	db4d      	blt.n	800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d9f8:	8932      	ldrh	r2, [r6, #8]
 800d9fa:	4413      	add	r3, r2
 800d9fc:	b21b      	sxth	r3, r3
 800d9fe:	4299      	cmp	r1, r3
 800da00:	da48      	bge.n	800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da02:	9b04      	ldr	r3, [sp, #16]
 800da04:	6827      	ldr	r7, [r4, #0]
 800da06:	fb17 f703 	smulbb	r7, r7, r3
 800da0a:	9b02      	ldr	r3, [sp, #8]
 800da0c:	b2bf      	uxth	r7, r7
 800da0e:	18fa      	adds	r2, r7, r3
 800da10:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800da14:	b212      	sxth	r2, r2
 800da16:	429a      	cmp	r2, r3
 800da18:	db3c      	blt.n	800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da1a:	8970      	ldrh	r0, [r6, #10]
 800da1c:	4403      	add	r3, r0
 800da1e:	b21b      	sxth	r3, r3
 800da20:	429a      	cmp	r2, r3
 800da22:	da37      	bge.n	800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da24:	2300      	movs	r3, #0
 800da26:	4630      	mov	r0, r6
 800da28:	930b      	str	r3, [sp, #44]	; 0x2c
 800da2a:	ab0b      	add	r3, sp, #44	; 0x2c
 800da2c:	f7ff ff36 	bl	800d89c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800da30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da32:	b37a      	cbz	r2, 800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da34:	4552      	cmp	r2, sl
 800da36:	d02d      	beq.n	800da94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800da38:	4611      	mov	r1, r2
 800da3a:	a80e      	add	r0, sp, #56	; 0x38
 800da3c:	9209      	str	r2, [sp, #36]	; 0x24
 800da3e:	f003 fabf 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800da42:	f04f 0e02 	mov.w	lr, #2
 800da46:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800da4a:	9a06      	ldr	r2, [sp, #24]
 800da4c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800da50:	9b01      	ldr	r3, [sp, #4]
 800da52:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800da56:	4413      	add	r3, r2
 800da58:	9a07      	ldr	r2, [sp, #28]
 800da5a:	fb91 f1fe 	sdiv	r1, r1, lr
 800da5e:	fb9c fcfe 	sdiv	ip, ip, lr
 800da62:	4401      	add	r1, r0
 800da64:	1a58      	subs	r0, r3, r1
 800da66:	9b02      	ldr	r3, [sp, #8]
 800da68:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800da6c:	4413      	add	r3, r2
 800da6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da70:	448c      	add	ip, r1
 800da72:	eba3 030c 	sub.w	r3, r3, ip
 800da76:	435b      	muls	r3, r3
 800da78:	fb00 3300 	mla	r3, r0, r0, r3
 800da7c:	42ab      	cmp	r3, r5
 800da7e:	d208      	bcs.n	800da92 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800da80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da82:	461d      	mov	r5, r3
 800da84:	9803      	ldr	r0, [sp, #12]
 800da86:	6001      	str	r1, [r0, #0]
 800da88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800da8a:	9805      	ldr	r0, [sp, #20]
 800da8c:	8008      	strh	r0, [r1, #0]
 800da8e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800da90:	800f      	strh	r7, [r1, #0]
 800da92:	4692      	mov	sl, r2
 800da94:	f10b 0b01 	add.w	fp, fp, #1
 800da98:	3408      	adds	r4, #8
 800da9a:	f1bb 0f04 	cmp.w	fp, #4
 800da9e:	d19d      	bne.n	800d9dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800daa0:	9b00      	ldr	r3, [sp, #0]
 800daa2:	9c08      	ldr	r4, [sp, #32]
 800daa4:	444b      	add	r3, r9
 800daa6:	4544      	cmp	r4, r8
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	d188      	bne.n	800d9be <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800daac:	b021      	add	sp, #132	; 0x84
 800daae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dab2:	f04f 35ff 	mov.w	r5, #4294967295
 800dab6:	e767      	b.n	800d988 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800dab8:	2401a9b8 	.word	0x2401a9b8
 800dabc:	0801d79c 	.word	0x0801d79c

0800dac0 <_ZN8touchgfx4RectaNERKS0_>:
 800dac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dac4:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dac8:	888c      	ldrh	r4, [r1, #4]
 800daca:	f9b0 9000 	ldrsh.w	r9, [r0]
 800dace:	443c      	add	r4, r7
 800dad0:	b2a4      	uxth	r4, r4
 800dad2:	fa0f f884 	sxth.w	r8, r4
 800dad6:	45c1      	cmp	r9, r8
 800dad8:	da2f      	bge.n	800db3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dada:	8882      	ldrh	r2, [r0, #4]
 800dadc:	444a      	add	r2, r9
 800dade:	b292      	uxth	r2, r2
 800dae0:	fa0f fe82 	sxth.w	lr, r2
 800dae4:	4577      	cmp	r7, lr
 800dae6:	da28      	bge.n	800db3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dae8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800daec:	88cb      	ldrh	r3, [r1, #6]
 800daee:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800daf2:	442b      	add	r3, r5
 800daf4:	b21b      	sxth	r3, r3
 800daf6:	429e      	cmp	r6, r3
 800daf8:	da1f      	bge.n	800db3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dafa:	88c3      	ldrh	r3, [r0, #6]
 800dafc:	4433      	add	r3, r6
 800dafe:	b29b      	uxth	r3, r3
 800db00:	fa0f fc83 	sxth.w	ip, r3
 800db04:	4565      	cmp	r5, ip
 800db06:	da18      	bge.n	800db3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800db08:	454f      	cmp	r7, r9
 800db0a:	bfb8      	it	lt
 800db0c:	464f      	movlt	r7, r9
 800db0e:	42b5      	cmp	r5, r6
 800db10:	bfb8      	it	lt
 800db12:	4635      	movlt	r5, r6
 800db14:	45f0      	cmp	r8, lr
 800db16:	bfd8      	it	le
 800db18:	4622      	movle	r2, r4
 800db1a:	1bd2      	subs	r2, r2, r7
 800db1c:	8082      	strh	r2, [r0, #4]
 800db1e:	884a      	ldrh	r2, [r1, #2]
 800db20:	88c9      	ldrh	r1, [r1, #6]
 800db22:	8007      	strh	r7, [r0, #0]
 800db24:	440a      	add	r2, r1
 800db26:	8045      	strh	r5, [r0, #2]
 800db28:	b292      	uxth	r2, r2
 800db2a:	b211      	sxth	r1, r2
 800db2c:	458c      	cmp	ip, r1
 800db2e:	bfa8      	it	ge
 800db30:	4613      	movge	r3, r2
 800db32:	1b5b      	subs	r3, r3, r5
 800db34:	80c3      	strh	r3, [r0, #6]
 800db36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db3a:	2300      	movs	r3, #0
 800db3c:	8003      	strh	r3, [r0, #0]
 800db3e:	8043      	strh	r3, [r0, #2]
 800db40:	8083      	strh	r3, [r0, #4]
 800db42:	80c3      	strh	r3, [r0, #6]
 800db44:	e7f7      	b.n	800db36 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800db46 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800db46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	dd06      	ble.n	800db5c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800db4e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800db52:	2800      	cmp	r0, #0
 800db54:	bfcc      	ite	gt
 800db56:	2000      	movgt	r0, #0
 800db58:	2001      	movle	r0, #1
 800db5a:	4770      	bx	lr
 800db5c:	2001      	movs	r0, #1
 800db5e:	4770      	bx	lr

0800db60 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800db60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db64:	2300      	movs	r3, #0
 800db66:	4604      	mov	r4, r0
 800db68:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800db6a:	8003      	strh	r3, [r0, #0]
 800db6c:	8043      	strh	r3, [r0, #2]
 800db6e:	8083      	strh	r3, [r0, #4]
 800db70:	80c3      	strh	r3, [r0, #6]
 800db72:	2d00      	cmp	r5, #0
 800db74:	d040      	beq.n	800dbf8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800db76:	1d28      	adds	r0, r5, #4
 800db78:	f7ff ffe5 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800db7c:	b988      	cbnz	r0, 800dba2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800db7e:	4620      	mov	r0, r4
 800db80:	f7ff ffe1 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800db84:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800db88:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800db8c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800db90:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800db94:	b138      	cbz	r0, 800dba6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800db96:	8022      	strh	r2, [r4, #0]
 800db98:	8063      	strh	r3, [r4, #2]
 800db9a:	f8a4 e004 	strh.w	lr, [r4, #4]
 800db9e:	f8a4 c006 	strh.w	ip, [r4, #6]
 800dba2:	69ad      	ldr	r5, [r5, #24]
 800dba4:	e7e5      	b.n	800db72 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800dba6:	f9b4 0000 	ldrsh.w	r0, [r4]
 800dbaa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800dbae:	4290      	cmp	r0, r2
 800dbb0:	4607      	mov	r7, r0
 800dbb2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800dbb6:	460e      	mov	r6, r1
 800dbb8:	bfa8      	it	ge
 800dbba:	4617      	movge	r7, r2
 800dbbc:	4299      	cmp	r1, r3
 800dbbe:	4472      	add	r2, lr
 800dbc0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800dbc4:	bfa8      	it	ge
 800dbc6:	461e      	movge	r6, r3
 800dbc8:	4440      	add	r0, r8
 800dbca:	4471      	add	r1, lr
 800dbcc:	4463      	add	r3, ip
 800dbce:	b200      	sxth	r0, r0
 800dbd0:	8027      	strh	r7, [r4, #0]
 800dbd2:	b212      	sxth	r2, r2
 800dbd4:	8066      	strh	r6, [r4, #2]
 800dbd6:	b209      	sxth	r1, r1
 800dbd8:	b21b      	sxth	r3, r3
 800dbda:	4290      	cmp	r0, r2
 800dbdc:	bfac      	ite	ge
 800dbde:	ebc7 0200 	rsbge	r2, r7, r0
 800dbe2:	ebc7 0202 	rsblt	r2, r7, r2
 800dbe6:	4299      	cmp	r1, r3
 800dbe8:	bfac      	ite	ge
 800dbea:	ebc6 0301 	rsbge	r3, r6, r1
 800dbee:	ebc6 0303 	rsblt	r3, r6, r3
 800dbf2:	80a2      	strh	r2, [r4, #4]
 800dbf4:	80e3      	strh	r3, [r4, #6]
 800dbf6:	e7d4      	b.n	800dba2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbfe <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800dbfe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dc02:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800dc06:	b383      	cbz	r3, 800dc6a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dc08:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dc0a:	b374      	cbz	r4, 800dc6a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800dc0c:	f9b1 5000 	ldrsh.w	r5, [r1]
 800dc10:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800dc14:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800dc18:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800dc1c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dc20:	b303      	cbz	r3, 800dc64 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dc22:	4668      	mov	r0, sp
 800dc24:	1d21      	adds	r1, r4, #4
 800dc26:	f8ad 5000 	strh.w	r5, [sp]
 800dc2a:	f8ad 6002 	strh.w	r6, [sp, #2]
 800dc2e:	f8ad 7004 	strh.w	r7, [sp, #4]
 800dc32:	f8ad 8006 	strh.w	r8, [sp, #6]
 800dc36:	f7ff ff43 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800dc3a:	4668      	mov	r0, sp
 800dc3c:	f7ff ff83 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc40:	b980      	cbnz	r0, 800dc64 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800dc42:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc46:	4669      	mov	r1, sp
 800dc48:	88a2      	ldrh	r2, [r4, #4]
 800dc4a:	4620      	mov	r0, r4
 800dc4c:	1a9b      	subs	r3, r3, r2
 800dc4e:	88e2      	ldrh	r2, [r4, #6]
 800dc50:	f8ad 3000 	strh.w	r3, [sp]
 800dc54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dc58:	1a9b      	subs	r3, r3, r2
 800dc5a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dc5e:	6823      	ldr	r3, [r4, #0]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	4798      	blx	r3
 800dc64:	69a4      	ldr	r4, [r4, #24]
 800dc66:	2c00      	cmp	r4, #0
 800dc68:	d1d8      	bne.n	800dc1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800dc6a:	b002      	add	sp, #8
 800dc6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dc70 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800dc70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc72:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800dc76:	460d      	mov	r5, r1
 800dc78:	4616      	mov	r6, r2
 800dc7a:	b323      	cbz	r3, 800dcc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dc7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dc7e:	b314      	cbz	r4, 800dcc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dc80:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800dc84:	b1eb      	cbz	r3, 800dcc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dc86:	6828      	ldr	r0, [r5, #0]
 800dc88:	466b      	mov	r3, sp
 800dc8a:	6869      	ldr	r1, [r5, #4]
 800dc8c:	c303      	stmia	r3!, {r0, r1}
 800dc8e:	4668      	mov	r0, sp
 800dc90:	1d21      	adds	r1, r4, #4
 800dc92:	f7ff ff15 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800dc96:	4668      	mov	r0, sp
 800dc98:	f7ff ff55 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dc9c:	b988      	cbnz	r0, 800dcc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dc9e:	f8bd 3000 	ldrh.w	r3, [sp]
 800dca2:	4669      	mov	r1, sp
 800dca4:	88a2      	ldrh	r2, [r4, #4]
 800dca6:	4620      	mov	r0, r4
 800dca8:	1a9b      	subs	r3, r3, r2
 800dcaa:	88e2      	ldrh	r2, [r4, #6]
 800dcac:	f8ad 3000 	strh.w	r3, [sp]
 800dcb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dcb4:	1a9b      	subs	r3, r3, r2
 800dcb6:	4632      	mov	r2, r6
 800dcb8:	f8ad 3002 	strh.w	r3, [sp, #2]
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcc0:	4798      	blx	r3
 800dcc2:	69a4      	ldr	r4, [r4, #24]
 800dcc4:	e7db      	b.n	800dc7e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800dcc6:	b002      	add	sp, #8
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}

0800dcca <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800dcca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dcce:	4770      	bx	lr

0800dcd0 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800dcd0:	4770      	bx	lr

0800dcd2 <_ZN8touchgfx3HAL10FlushCacheEv>:
 800dcd2:	4770      	bx	lr

0800dcd4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800dcd4:	6803      	ldr	r3, [r0, #0]
 800dcd6:	b513      	push	{r0, r1, r4, lr}
 800dcd8:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800dcdc:	2300      	movs	r3, #0
 800dcde:	e9cd 3300 	strd	r3, r3, [sp]
 800dce2:	466b      	mov	r3, sp
 800dce4:	47a0      	blx	r4
 800dce6:	b002      	add	sp, #8
 800dce8:	bd10      	pop	{r4, pc}

0800dcea <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800dcea:	2301      	movs	r3, #1
 800dcec:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800dcf0:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 800dcf4:	4770      	bx	lr

0800dcf6 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800dcfc:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 800dd00:	4770      	bx	lr

0800dd02 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800dd02:	6843      	ldr	r3, [r0, #4]
 800dd04:	2201      	movs	r2, #1
 800dd06:	725a      	strb	r2, [r3, #9]
 800dd08:	6840      	ldr	r0, [r0, #4]
 800dd0a:	6803      	ldr	r3, [r0, #0]
 800dd0c:	691b      	ldr	r3, [r3, #16]
 800dd0e:	4718      	bx	r3

0800dd10 <_ZN8touchgfx3HAL8flushDMAEv>:
 800dd10:	6840      	ldr	r0, [r0, #4]
 800dd12:	6803      	ldr	r3, [r0, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	4718      	bx	r3

0800dd18 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800dd18:	b530      	push	{r4, r5, lr}
 800dd1a:	b08b      	sub	sp, #44	; 0x2c
 800dd1c:	6804      	ldr	r4, [r0, #0]
 800dd1e:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800dd22:	9509      	str	r5, [sp, #36]	; 0x24
 800dd24:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800dd28:	9508      	str	r5, [sp, #32]
 800dd2a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800dd2e:	9507      	str	r5, [sp, #28]
 800dd30:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800dd34:	9506      	str	r5, [sp, #24]
 800dd36:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800dd3a:	9505      	str	r5, [sp, #20]
 800dd3c:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800dd40:	9504      	str	r5, [sp, #16]
 800dd42:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800dd46:	9503      	str	r5, [sp, #12]
 800dd48:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800dd4c:	9502      	str	r5, [sp, #8]
 800dd4e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800dd52:	e9cd 3500 	strd	r3, r5, [sp]
 800dd56:	4613      	mov	r3, r2
 800dd58:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	47a0      	blx	r4
 800dd5e:	b00b      	add	sp, #44	; 0x2c
 800dd60:	bd30      	pop	{r4, r5, pc}
	...

0800dd64 <_ZN8touchgfx3HAL10beginFrameEv>:
 800dd64:	4b04      	ldr	r3, [pc, #16]	; (800dd78 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	b123      	cbz	r3, 800dd74 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800dd6a:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 800dd6e:	f080 0001 	eor.w	r0, r0, #1
 800dd72:	4770      	bx	lr
 800dd74:	2001      	movs	r0, #1
 800dd76:	4770      	bx	lr
 800dd78:	2401a9b6 	.word	0x2401a9b6

0800dd7c <_ZN8touchgfx3HAL8endFrameEv>:
 800dd7c:	b510      	push	{r4, lr}
 800dd7e:	4604      	mov	r4, r0
 800dd80:	6840      	ldr	r0, [r0, #4]
 800dd82:	6803      	ldr	r3, [r0, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	4798      	blx	r3
 800dd88:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 800dd8c:	b113      	cbz	r3, 800dd94 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800dd8e:	2301      	movs	r3, #1
 800dd90:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800dd94:	bd10      	pop	{r4, pc}

0800dd96 <_ZN8touchgfx3HAL10initializeEv>:
 800dd96:	b510      	push	{r4, lr}
 800dd98:	4604      	mov	r4, r0
 800dd9a:	f7fe f89b 	bl	800bed4 <_ZN8touchgfx10OSWrappers10initializeEv>
 800dd9e:	f7fd fdb1 	bl	800b904 <_ZN8touchgfx4GPIO4initEv>
 800dda2:	6860      	ldr	r0, [r4, #4]
 800dda4:	6803      	ldr	r3, [r0, #0]
 800dda6:	68db      	ldr	r3, [r3, #12]
 800dda8:	4798      	blx	r3
 800ddaa:	68e0      	ldr	r0, [r4, #12]
 800ddac:	6803      	ldr	r3, [r0, #0]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	4798      	blx	r3
 800ddb2:	6823      	ldr	r3, [r4, #0]
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddbc:	4718      	bx	r3

0800ddbe <_ZN8touchgfx3HAL9taskEntryEv>:
 800ddbe:	b508      	push	{r3, lr}
 800ddc0:	6803      	ldr	r3, [r0, #0]
 800ddc2:	4604      	mov	r4, r0
 800ddc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ddc8:	4798      	blx	r3
 800ddca:	6823      	ldr	r3, [r4, #0]
 800ddcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddce:	4620      	mov	r0, r4
 800ddd0:	4798      	blx	r3
 800ddd2:	f7fe f8f5 	bl	800bfc0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddda:	e7f8      	b.n	800ddce <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800dddc <_ZN8touchgfx3HAL4tickEv>:
 800dddc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ddde:	6803      	ldr	r3, [r0, #0]
 800dde0:	4604      	mov	r4, r0
 800dde2:	4d5b      	ldr	r5, [pc, #364]	; (800df50 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800dde4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dde8:	4798      	blx	r3
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f000 8095 	beq.w	800df1a <_ZN8touchgfx3HAL4tickEv+0x13e>
 800ddf0:	2001      	movs	r0, #1
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	f7fd fd8e 	bl	800b914 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800ddf8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800ddfc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800de00:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800de04:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800de08:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 800de0c:	b133      	cbz	r3, 800de1c <_ZN8touchgfx3HAL4tickEv+0x40>
 800de0e:	6823      	ldr	r3, [r4, #0]
 800de10:	4620      	mov	r0, r4
 800de12:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800de16:	4798      	blx	r3
 800de18:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 800de1c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800de20:	2601      	movs	r6, #1
 800de22:	6862      	ldr	r2, [r4, #4]
 800de24:	f083 0301 	eor.w	r3, r3, #1
 800de28:	702e      	strb	r6, [r5, #0]
 800de2a:	7253      	strb	r3, [r2, #9]
 800de2c:	f001 ffb4 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 800de30:	6803      	ldr	r3, [r0, #0]
 800de32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de34:	4798      	blx	r3
 800de36:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800de3a:	b90b      	cbnz	r3, 800de40 <_ZN8touchgfx3HAL4tickEv+0x64>
 800de3c:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 800de40:	f001 ffaa 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 800de44:	6803      	ldr	r3, [r0, #0]
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	4798      	blx	r3
 800de4a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800de4c:	6803      	ldr	r3, [r0, #0]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	4798      	blx	r3
 800de52:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800de56:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800de5a:	3b01      	subs	r3, #1
 800de5c:	b2db      	uxtb	r3, r3
 800de5e:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800de62:	b10a      	cbz	r2, 800de68 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800de64:	2b00      	cmp	r3, #0
 800de66:	d1eb      	bne.n	800de40 <_ZN8touchgfx3HAL4tickEv+0x64>
 800de68:	4a3a      	ldr	r2, [pc, #232]	; (800df54 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800de6a:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800de6e:	7813      	ldrb	r3, [r2, #0]
 800de70:	3301      	adds	r3, #1
 800de72:	b25b      	sxtb	r3, r3
 800de74:	4299      	cmp	r1, r3
 800de76:	7013      	strb	r3, [r2, #0]
 800de78:	dc10      	bgt.n	800de9c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800de7a:	2300      	movs	r3, #0
 800de7c:	68e0      	ldr	r0, [r4, #12]
 800de7e:	a902      	add	r1, sp, #8
 800de80:	7013      	strb	r3, [r2, #0]
 800de82:	aa03      	add	r2, sp, #12
 800de84:	6803      	ldr	r3, [r0, #0]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	4798      	blx	r3
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	2800      	cmp	r0, #0
 800de8e:	d050      	beq.n	800df32 <_ZN8touchgfx3HAL4tickEv+0x156>
 800de90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800de94:	4620      	mov	r0, r4
 800de96:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800de9a:	4798      	blx	r3
 800de9c:	2300      	movs	r3, #0
 800de9e:	6960      	ldr	r0, [r4, #20]
 800dea0:	f88d 3007 	strb.w	r3, [sp, #7]
 800dea4:	b158      	cbz	r0, 800debe <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dea6:	6803      	ldr	r3, [r0, #0]
 800dea8:	f10d 0107 	add.w	r1, sp, #7
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	4798      	blx	r3
 800deb0:	b128      	cbz	r0, 800debe <_ZN8touchgfx3HAL4tickEv+0xe2>
 800deb2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800deb4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800deb8:	6803      	ldr	r3, [r0, #0]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	4798      	blx	r3
 800debe:	f104 001c 	add.w	r0, r4, #28
 800dec2:	f00d fe33 	bl	801bb2c <_ZN8touchgfx8Gestures4tickEv>
 800dec6:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800deca:	b30b      	cbz	r3, 800df10 <_ZN8touchgfx3HAL4tickEv+0x134>
 800decc:	6920      	ldr	r0, [r4, #16]
 800dece:	6803      	ldr	r3, [r0, #0]
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	4798      	blx	r3
 800ded4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ded6:	4606      	mov	r6, r0
 800ded8:	b903      	cbnz	r3, 800dedc <_ZN8touchgfx3HAL4tickEv+0x100>
 800deda:	6760      	str	r0, [r4, #116]	; 0x74
 800dedc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800dede:	4a1e      	ldr	r2, [pc, #120]	; (800df58 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800dee0:	1af3      	subs	r3, r6, r3
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d914      	bls.n	800df10 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dee6:	6920      	ldr	r0, [r4, #16]
 800dee8:	6803      	ldr	r3, [r0, #0]
 800deea:	699b      	ldr	r3, [r3, #24]
 800deec:	4798      	blx	r3
 800deee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800def0:	2264      	movs	r2, #100	; 0x64
 800def2:	1af3      	subs	r3, r6, r3
 800def4:	fbb3 f3f2 	udiv	r3, r3, r2
 800def8:	fbb0 f0f3 	udiv	r0, r0, r3
 800defc:	2800      	cmp	r0, #0
 800defe:	dc1d      	bgt.n	800df3c <_ZN8touchgfx3HAL4tickEv+0x160>
 800df00:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 800df04:	6920      	ldr	r0, [r4, #16]
 800df06:	2100      	movs	r1, #0
 800df08:	6803      	ldr	r3, [r0, #0]
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	4798      	blx	r3
 800df0e:	6766      	str	r6, [r4, #116]	; 0x74
 800df10:	f001 ff42 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 800df14:	6803      	ldr	r3, [r0, #0]
 800df16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df18:	4798      	blx	r3
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	4620      	mov	r0, r4
 800df1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df22:	4798      	blx	r3
 800df24:	2001      	movs	r0, #1
 800df26:	f7fd fd2d 	bl	800b984 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800df2a:	2300      	movs	r3, #0
 800df2c:	702b      	strb	r3, [r5, #0]
 800df2e:	b004      	add	sp, #16
 800df30:	bd70      	pop	{r4, r5, r6, pc}
 800df32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800df36:	4620      	mov	r0, r4
 800df38:	4798      	blx	r3
 800df3a:	e7af      	b.n	800de9c <_ZN8touchgfx3HAL4tickEv+0xc0>
 800df3c:	2863      	cmp	r0, #99	; 0x63
 800df3e:	bfcb      	itete	gt
 800df40:	2300      	movgt	r3, #0
 800df42:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800df46:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 800df4a:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 800df4e:	e7d9      	b.n	800df04 <_ZN8touchgfx3HAL4tickEv+0x128>
 800df50:	2401a9bc 	.word	0x2401a9bc
 800df54:	2401a9bd 	.word	0x2401a9bd
 800df58:	05f5e100 	.word	0x05f5e100

0800df5c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800df5c:	b510      	push	{r4, lr}
 800df5e:	4604      	mov	r4, r0
 800df60:	f7fd fffa 	bl	800bf58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800df64:	2200      	movs	r2, #0
 800df66:	6863      	ldr	r3, [r4, #4]
 800df68:	729a      	strb	r2, [r3, #10]
 800df6a:	bd10      	pop	{r4, pc}

0800df6c <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800df6c:	65c1      	str	r1, [r0, #92]	; 0x5c
 800df6e:	301c      	adds	r0, #28
 800df70:	f00d bdda 	b.w	801bb28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800df74 <_ZN8touchgfx3HAL5touchEll>:
 800df74:	b530      	push	{r4, r5, lr}
 800df76:	b087      	sub	sp, #28
 800df78:	4604      	mov	r4, r0
 800df7a:	a804      	add	r0, sp, #16
 800df7c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800df80:	f001 fcfc 	bl	800f97c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800df84:	9b04      	ldr	r3, [sp, #16]
 800df86:	a906      	add	r1, sp, #24
 800df88:	a803      	add	r0, sp, #12
 800df8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df8e:	9b05      	ldr	r3, [sp, #20]
 800df90:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800df94:	f001 fd44 	bl	800fa20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800df98:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 800df9c:	f104 001c 	add.w	r0, r4, #28
 800dfa0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800dfa4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800dfa8:	b189      	cbz	r1, 800dfce <_ZN8touchgfx3HAL5touchEll+0x5a>
 800dfaa:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	f00d fdc6 	bl	801bb48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800dfbc:	b128      	cbz	r0, 800dfca <_ZN8touchgfx3HAL5touchEll+0x56>
 800dfbe:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800dfc2:	6623      	str	r3, [r4, #96]	; 0x60
 800dfc4:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dfc8:	6663      	str	r3, [r4, #100]	; 0x64
 800dfca:	b007      	add	sp, #28
 800dfcc:	bd30      	pop	{r4, r5, pc}
 800dfce:	f00d fdfb 	bl	801bbc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800dfd8:	e7f1      	b.n	800dfbe <_ZN8touchgfx3HAL5touchEll+0x4a>

0800dfda <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800dfda:	b510      	push	{r4, lr}
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d046      	beq.n	800e06e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dfe0:	ea81 0002 	eor.w	r0, r1, r2
 800dfe4:	07c4      	lsls	r4, r0, #31
 800dfe6:	d508      	bpl.n	800dffa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800dfe8:	440b      	add	r3, r1
 800dfea:	3a01      	subs	r2, #1
 800dfec:	428b      	cmp	r3, r1
 800dfee:	d93e      	bls.n	800e06e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800dff0:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800dff4:	f801 0b01 	strb.w	r0, [r1], #1
 800dff8:	e7f8      	b.n	800dfec <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800dffa:	07d0      	lsls	r0, r2, #31
 800dffc:	bf42      	ittt	mi
 800dffe:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e002:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e006:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d911      	bls.n	800e032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e00e:	ea81 0402 	eor.w	r4, r1, r2
 800e012:	4610      	mov	r0, r2
 800e014:	07a4      	lsls	r4, r4, #30
 800e016:	d022      	beq.n	800e05e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e018:	f023 0401 	bic.w	r4, r3, #1
 800e01c:	440c      	add	r4, r1
 800e01e:	428c      	cmp	r4, r1
 800e020:	4602      	mov	r2, r0
 800e022:	d904      	bls.n	800e02e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e024:	8812      	ldrh	r2, [r2, #0]
 800e026:	3002      	adds	r0, #2
 800e028:	f821 2b02 	strh.w	r2, [r1], #2
 800e02c:	e7f7      	b.n	800e01e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	f023 0003 	bic.w	r0, r3, #3
 800e036:	4408      	add	r0, r1
 800e038:	4288      	cmp	r0, r1
 800e03a:	4614      	mov	r4, r2
 800e03c:	d904      	bls.n	800e048 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e03e:	6824      	ldr	r4, [r4, #0]
 800e040:	3204      	adds	r2, #4
 800e042:	f841 4b04 	str.w	r4, [r1], #4
 800e046:	e7f7      	b.n	800e038 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e048:	f003 0303 	and.w	r3, r3, #3
 800e04c:	3a01      	subs	r2, #1
 800e04e:	440b      	add	r3, r1
 800e050:	428b      	cmp	r3, r1
 800e052:	d90c      	bls.n	800e06e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e054:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e058:	f801 0b01 	strb.w	r0, [r1], #1
 800e05c:	e7f8      	b.n	800e050 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e05e:	0790      	lsls	r0, r2, #30
 800e060:	d0e7      	beq.n	800e032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e062:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e066:	3b02      	subs	r3, #2
 800e068:	f821 0b02 	strh.w	r0, [r1], #2
 800e06c:	e7e1      	b.n	800e032 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e06e:	2001      	movs	r0, #1
 800e070:	bd10      	pop	{r4, pc}

0800e072 <_ZN8touchgfx3HAL7noTouchEv>:
 800e072:	b510      	push	{r4, lr}
 800e074:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800e078:	4604      	mov	r4, r0
 800e07a:	b153      	cbz	r3, 800e092 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e07c:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 800e080:	2101      	movs	r1, #1
 800e082:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 800e086:	301c      	adds	r0, #28
 800e088:	f00d fd9e 	bl	801bbc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e08c:	2300      	movs	r3, #0
 800e08e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800e092:	bd10      	pop	{r4, pc}

0800e094 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e098:	b085      	sub	sp, #20
 800e09a:	4604      	mov	r4, r0
 800e09c:	2000      	movs	r0, #0
 800e09e:	4699      	mov	r9, r3
 800e0a0:	ad04      	add	r5, sp, #16
 800e0a2:	460f      	mov	r7, r1
 800e0a4:	4690      	mov	r8, r2
 800e0a6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e0aa:	69a0      	ldr	r0, [r4, #24]
 800e0ac:	6806      	ldr	r6, [r0, #0]
 800e0ae:	9501      	str	r5, [sp, #4]
 800e0b0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800e0b4:	9500      	str	r5, [sp, #0]
 800e0b6:	6835      	ldr	r5, [r6, #0]
 800e0b8:	47a8      	blx	r5
 800e0ba:	4d10      	ldr	r5, [pc, #64]	; (800e0fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e0bc:	4606      	mov	r6, r0
 800e0be:	f8a5 9000 	strh.w	r9, [r5]
 800e0c2:	f7fb fc17 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e0c6:	6803      	ldr	r3, [r0, #0]
 800e0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ca:	4798      	blx	r3
 800e0cc:	b128      	cbz	r0, 800e0da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e0ce:	2801      	cmp	r0, #1
 800e0d0:	d00b      	beq.n	800e0ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e0d2:	4630      	mov	r0, r6
 800e0d4:	b005      	add	sp, #20
 800e0d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0da:	882b      	ldrh	r3, [r5, #0]
 800e0dc:	fb08 7203 	mla	r2, r8, r3, r7
 800e0e0:	9b03      	ldr	r3, [sp, #12]
 800e0e2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e0e6:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e0e8:	e7f3      	b.n	800e0d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e0ea:	882a      	ldrh	r2, [r5, #0]
 800e0ec:	9b03      	ldr	r3, [sp, #12]
 800e0ee:	fb08 7202 	mla	r2, r8, r2, r7
 800e0f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e0f6:	1a9a      	subs	r2, r3, r2
 800e0f8:	63e2      	str	r2, [r4, #60]	; 0x3c
 800e0fa:	e7ea      	b.n	800e0d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e0fc:	2401a9b2 	.word	0x2401a9b2

0800e100 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e102:	b08b      	sub	sp, #44	; 0x2c
 800e104:	4617      	mov	r7, r2
 800e106:	4604      	mov	r4, r0
 800e108:	460e      	mov	r6, r1
 800e10a:	461d      	mov	r5, r3
 800e10c:	f7fb fbf2 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e110:	6803      	ldr	r3, [r0, #0]
 800e112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e114:	4798      	blx	r3
 800e116:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e11a:	9007      	str	r0, [sp, #28]
 800e11c:	4631      	mov	r1, r6
 800e11e:	6822      	ldr	r2, [r4, #0]
 800e120:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e124:	4b0c      	ldr	r3, [pc, #48]	; (800e158 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e126:	4620      	mov	r0, r4
 800e128:	881b      	ldrh	r3, [r3, #0]
 800e12a:	9306      	str	r3, [sp, #24]
 800e12c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e130:	9305      	str	r3, [sp, #20]
 800e132:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e136:	9304      	str	r3, [sp, #16]
 800e138:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e142:	9302      	str	r3, [sp, #8]
 800e144:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e148:	e9cd 5300 	strd	r5, r3, [sp]
 800e14c:	463b      	mov	r3, r7
 800e14e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800e150:	2200      	movs	r2, #0
 800e152:	47a8      	blx	r5
 800e154:	b00b      	add	sp, #44	; 0x2c
 800e156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e158:	2401a9b2 	.word	0x2401a9b2

0800e15c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e15c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e160:	4698      	mov	r8, r3
 800e162:	6803      	ldr	r3, [r0, #0]
 800e164:	b08b      	sub	sp, #44	; 0x2c
 800e166:	4617      	mov	r7, r2
 800e168:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800e16a:	460e      	mov	r6, r1
 800e16c:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e16e:	4604      	mov	r4, r0
 800e170:	f8b3 9000 	ldrh.w	r9, [r3]
 800e174:	f7fb fbbe 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e178:	6803      	ldr	r3, [r0, #0]
 800e17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17c:	4798      	blx	r3
 800e17e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e182:	2200      	movs	r2, #0
 800e184:	4631      	mov	r1, r6
 800e186:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e18a:	2302      	movs	r3, #2
 800e18c:	4620      	mov	r0, r4
 800e18e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e192:	2301      	movs	r3, #1
 800e194:	9305      	str	r3, [sp, #20]
 800e196:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e19a:	9304      	str	r3, [sp, #16]
 800e19c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e1a0:	9303      	str	r3, [sp, #12]
 800e1a2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e1a6:	9302      	str	r3, [sp, #8]
 800e1a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e1ac:	e9cd 8300 	strd	r8, r3, [sp]
 800e1b0:	463b      	mov	r3, r7
 800e1b2:	47a8      	blx	r5
 800e1b4:	b00b      	add	sp, #44	; 0x2c
 800e1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ba:	bf00      	nop
 800e1bc:	2401a9b2 	.word	0x2401a9b2

0800e1c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e1c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1c4:	4698      	mov	r8, r3
 800e1c6:	6803      	ldr	r3, [r0, #0]
 800e1c8:	b087      	sub	sp, #28
 800e1ca:	460e      	mov	r6, r1
 800e1cc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800e1ce:	4617      	mov	r7, r2
 800e1d0:	4b0f      	ldr	r3, [pc, #60]	; (800e210 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	f8b3 9000 	ldrh.w	r9, [r3]
 800e1d8:	f7fb fb8c 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e1dc:	6803      	ldr	r3, [r0, #0]
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	4798      	blx	r3
 800e1e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e1e6:	463a      	mov	r2, r7
 800e1e8:	4631      	mov	r1, r6
 800e1ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800e1ee:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e1f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	9302      	str	r3, [sp, #8]
 800e1fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e204:	9300      	str	r3, [sp, #0]
 800e206:	4643      	mov	r3, r8
 800e208:	47a8      	blx	r5
 800e20a:	b007      	add	sp, #28
 800e20c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e210:	2401a9b2 	.word	0x2401a9b2

0800e214 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	4604      	mov	r4, r0
 800e21a:	b08f      	sub	sp, #60	; 0x3c
 800e21c:	4610      	mov	r0, r2
 800e21e:	460d      	mov	r5, r1
 800e220:	4691      	mov	r9, r2
 800e222:	461e      	mov	r6, r3
 800e224:	f004 f99c 	bl	8012560 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e228:	2800      	cmp	r0, #0
 800e22a:	f000 809d 	beq.w	800e368 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e22e:	6823      	ldr	r3, [r4, #0]
 800e230:	4620      	mov	r0, r4
 800e232:	f8df b198 	ldr.w	fp, [pc, #408]	; 800e3cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e236:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e23c:	4798      	blx	r3
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	4620      	mov	r0, r4
 800e242:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800e3d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	4798      	blx	r3
 800e24a:	f8bb 3000 	ldrh.w	r3, [fp]
 800e24e:	4f5c      	ldr	r7, [pc, #368]	; (800e3c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	f8ba 3000 	ldrh.w	r3, [sl]
 800e256:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e25a:	4640      	mov	r0, r8
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	883b      	ldrh	r3, [r7, #0]
 800e260:	9303      	str	r3, [sp, #12]
 800e262:	4b58      	ldr	r3, [pc, #352]	; (800e3c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e264:	881a      	ldrh	r2, [r3, #0]
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	9204      	str	r2, [sp, #16]
 800e26a:	f004 fabd 	bl	80127e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e26e:	8038      	strh	r0, [r7, #0]
 800e270:	4640      	mov	r0, r8
 800e272:	f004 faed 	bl	8012850 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e276:	9b05      	ldr	r3, [sp, #20]
 800e278:	b280      	uxth	r0, r0
 800e27a:	8018      	strh	r0, [r3, #0]
 800e27c:	4b52      	ldr	r3, [pc, #328]	; (800e3c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d174      	bne.n	800e36e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e284:	883b      	ldrh	r3, [r7, #0]
 800e286:	f8aa 0000 	strh.w	r0, [sl]
 800e28a:	f8ab 3000 	strh.w	r3, [fp]
 800e28e:	4648      	mov	r0, r9
 800e290:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800e294:	f004 f964 	bl	8012560 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e298:	2200      	movs	r2, #0
 800e29a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e29e:	4611      	mov	r1, r2
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e2a6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e2aa:	f7fc f89c 	bl	800a3e6 <_ZN8touchgfx8Drawable5setXYEss>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e2b4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e2b8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	dd5c      	ble.n	800e37a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e2c0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dd58      	ble.n	800e37a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e2c8:	462a      	mov	r2, r5
 800e2ca:	ab0a      	add	r3, sp, #40	; 0x28
 800e2cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e2d0:	6851      	ldr	r1, [r2, #4]
 800e2d2:	c303      	stmia	r3!, {r0, r1}
 800e2d4:	4631      	mov	r1, r6
 800e2d6:	a80a      	add	r0, sp, #40	; 0x28
 800e2d8:	f7ff fbf2 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800e2dc:	4b38      	ldr	r3, [pc, #224]	; (800e3c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e2de:	2100      	movs	r1, #0
 800e2e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e2e4:	4b37      	ldr	r3, [pc, #220]	; (800e3c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e2e6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e2ea:	aa0a      	add	r2, sp, #40	; 0x28
 800e2ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2f0:	910c      	str	r1, [sp, #48]	; 0x30
 800e2f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e2f6:	ab08      	add	r3, sp, #32
 800e2f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e2fc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e300:	4618      	mov	r0, r3
 800e302:	a90c      	add	r1, sp, #48	; 0x30
 800e304:	f7ff fbdc 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800e308:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d13c      	bne.n	800e388 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e30e:	2000      	movs	r0, #0
 800e310:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 800e314:	2600      	movs	r6, #0
 800e316:	696b      	ldr	r3, [r5, #20]
 800e318:	a908      	add	r1, sp, #32
 800e31a:	682a      	ldr	r2, [r5, #0]
 800e31c:	4628      	mov	r0, r5
 800e31e:	9305      	str	r3, [sp, #20]
 800e320:	616e      	str	r6, [r5, #20]
 800e322:	6892      	ldr	r2, [r2, #8]
 800e324:	4790      	blx	r2
 800e326:	9b05      	ldr	r3, [sp, #20]
 800e328:	4652      	mov	r2, sl
 800e32a:	4649      	mov	r1, r9
 800e32c:	616b      	str	r3, [r5, #20]
 800e32e:	4628      	mov	r0, r5
 800e330:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 800e334:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800e338:	f7fc f855 	bl	800a3e6 <_ZN8touchgfx8Drawable5setXYEss>
 800e33c:	9a01      	ldr	r2, [sp, #4]
 800e33e:	4b23      	ldr	r3, [pc, #140]	; (800e3cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e340:	4620      	mov	r0, r4
 800e342:	801a      	strh	r2, [r3, #0]
 800e344:	9a02      	ldr	r2, [sp, #8]
 800e346:	4b22      	ldr	r3, [pc, #136]	; (800e3d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e348:	801a      	strh	r2, [r3, #0]
 800e34a:	9a03      	ldr	r2, [sp, #12]
 800e34c:	4b1c      	ldr	r3, [pc, #112]	; (800e3c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e34e:	801a      	strh	r2, [r3, #0]
 800e350:	4b1c      	ldr	r3, [pc, #112]	; (800e3c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e352:	9a04      	ldr	r2, [sp, #16]
 800e354:	801a      	strh	r2, [r3, #0]
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800e35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35e:	4798      	blx	r3
 800e360:	6823      	ldr	r3, [r4, #0]
 800e362:	4620      	mov	r0, r4
 800e364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e366:	4798      	blx	r3
 800e368:	b00f      	add	sp, #60	; 0x3c
 800e36a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e36e:	883b      	ldrh	r3, [r7, #0]
 800e370:	f8ab 0000 	strh.w	r0, [fp]
 800e374:	f8aa 3000 	strh.w	r3, [sl]
 800e378:	e789      	b.n	800e28e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e37a:	462a      	mov	r2, r5
 800e37c:	ab0a      	add	r3, sp, #40	; 0x28
 800e37e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e382:	6851      	ldr	r1, [r2, #4]
 800e384:	c303      	stmia	r3!, {r0, r1}
 800e386:	e7a9      	b.n	800e2dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e388:	a807      	add	r0, sp, #28
 800e38a:	f004 fb65 	bl	8012a58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e38e:	4606      	mov	r6, r0
 800e390:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e392:	6803      	ldr	r3, [r0, #0]
 800e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e396:	4798      	blx	r3
 800e398:	4286      	cmp	r6, r0
 800e39a:	d1b8      	bne.n	800e30e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e39c:	f7fb faaa 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e3a0:	6803      	ldr	r3, [r0, #0]
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	a807      	add	r0, sp, #28
 800e3a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a8:	9305      	str	r3, [sp, #20]
 800e3aa:	f004 fb55 	bl	8012a58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e3ae:	9b05      	ldr	r3, [sp, #20]
 800e3b0:	4601      	mov	r1, r0
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	4798      	blx	r3
 800e3b6:	f080 0001 	eor.w	r0, r0, #1
 800e3ba:	b2c0      	uxtb	r0, r0
 800e3bc:	e7a8      	b.n	800e310 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e3be:	bf00      	nop
 800e3c0:	2401a9ac 	.word	0x2401a9ac
 800e3c4:	2401a9ae 	.word	0x2401a9ae
 800e3c8:	2401a9b0 	.word	0x2401a9b0
 800e3cc:	2401a9b2 	.word	0x2401a9b2
 800e3d0:	2401a9b4 	.word	0x2401a9b4

0800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e3d4:	4b07      	ldr	r3, [pc, #28]	; (800e3f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e3d6:	b510      	push	{r4, lr}
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	4604      	mov	r4, r0
 800e3dc:	b13b      	cbz	r3, 800e3ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e3de:	6803      	ldr	r3, [r0, #0]
 800e3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e2:	4798      	blx	r3
 800e3e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e3e6:	4283      	cmp	r3, r0
 800e3e8:	d101      	bne.n	800e3ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e3ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e3ec:	bd10      	pop	{r4, pc}
 800e3ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e3f0:	e7fc      	b.n	800e3ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e3f2:	bf00      	nop
 800e3f4:	2401a9b6 	.word	0x2401a9b6

0800e3f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fc:	461d      	mov	r5, r3
 800e3fe:	b08a      	sub	sp, #40	; 0x28
 800e400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e404:	4690      	mov	r8, r2
 800e406:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800e40a:	2400      	movs	r4, #0
 800e40c:	4607      	mov	r7, r0
 800e40e:	fb06 8505 	mla	r5, r6, r5, r8
 800e412:	9404      	str	r4, [sp, #16]
 800e414:	f88d 4020 	strb.w	r4, [sp, #32]
 800e418:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e41c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e420:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e424:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e428:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e42c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e430:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e434:	f7ff ffce 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e438:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e442:	a901      	add	r1, sp, #4
 800e444:	9505      	str	r5, [sp, #20]
 800e446:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e44a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800e44e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800e452:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800e456:	6803      	ldr	r3, [r0, #0]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	4798      	blx	r3
 800e45c:	b00a      	add	sp, #40	; 0x28
 800e45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e462 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e466:	b08b      	sub	sp, #44	; 0x2c
 800e468:	2400      	movs	r4, #0
 800e46a:	4691      	mov	r9, r2
 800e46c:	461d      	mov	r5, r3
 800e46e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800e472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e476:	4688      	mov	r8, r1
 800e478:	4607      	mov	r7, r0
 800e47a:	9404      	str	r4, [sp, #16]
 800e47c:	fb06 9505 	mla	r5, r6, r5, r9
 800e480:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e484:	f7ff ffa6 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e488:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e48c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e496:	a901      	add	r1, sp, #4
 800e498:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e49c:	9505      	str	r5, [sp, #20]
 800e49e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4a2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e4a6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e4aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800e4ae:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e4b2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e4b6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800e4ba:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800e4be:	6803      	ldr	r3, [r0, #0]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	4798      	blx	r3
 800e4c4:	b00b      	add	sp, #44	; 0x2c
 800e4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e4cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d0:	b08a      	sub	sp, #40	; 0x28
 800e4d2:	4698      	mov	r8, r3
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800e4dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800e4e0:	2d0b      	cmp	r5, #11
 800e4e2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800e4e6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800e4ea:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800e4ee:	9304      	str	r3, [sp, #16]
 800e4f0:	d137      	bne.n	800e562 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e4f2:	2380      	movs	r3, #128	; 0x80
 800e4f4:	f88d 0020 	strb.w	r0, [sp, #32]
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	9203      	str	r2, [sp, #12]
 800e4fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e500:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e504:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e508:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e50c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e510:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e514:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e518:	f7ff ff5c 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e51c:	2c0b      	cmp	r4, #11
 800e51e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800e522:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e526:	bf94      	ite	ls
 800e528:	4b19      	ldrls	r3, [pc, #100]	; (800e590 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e52a:	2100      	movhi	r1, #0
 800e52c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800e530:	bf98      	it	ls
 800e532:	5d19      	ldrbls	r1, [r3, r4]
 800e534:	fb02 8307 	mla	r3, r2, r7, r8
 800e538:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800e53c:	10c9      	asrs	r1, r1, #3
 800e53e:	fb01 0003 	mla	r0, r1, r3, r0
 800e542:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800e546:	a901      	add	r1, sp, #4
 800e548:	9005      	str	r0, [sp, #20]
 800e54a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800e54e:	2300      	movs	r3, #0
 800e550:	6870      	ldr	r0, [r6, #4]
 800e552:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e556:	6803      	ldr	r3, [r0, #0]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	4798      	blx	r3
 800e55c:	b00a      	add	sp, #40	; 0x28
 800e55e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e562:	2d02      	cmp	r5, #2
 800e564:	d109      	bne.n	800e57a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e566:	28ff      	cmp	r0, #255	; 0xff
 800e568:	d105      	bne.n	800e576 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e56a:	f1bc 0f00 	cmp.w	ip, #0
 800e56e:	bf14      	ite	ne
 800e570:	2340      	movne	r3, #64	; 0x40
 800e572:	2320      	moveq	r3, #32
 800e574:	e7be      	b.n	800e4f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e576:	2340      	movs	r3, #64	; 0x40
 800e578:	e7bc      	b.n	800e4f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e57a:	28ff      	cmp	r0, #255	; 0xff
 800e57c:	d105      	bne.n	800e58a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e57e:	f1bc 0f00 	cmp.w	ip, #0
 800e582:	bf14      	ite	ne
 800e584:	2304      	movne	r3, #4
 800e586:	2301      	moveq	r3, #1
 800e588:	e7b4      	b.n	800e4f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e58a:	2304      	movs	r3, #4
 800e58c:	e7b2      	b.n	800e4f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e58e:	bf00      	nop
 800e590:	0801e1dc 	.word	0x0801e1dc

0800e594 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e598:	b08b      	sub	sp, #44	; 0x2c
 800e59a:	461d      	mov	r5, r3
 800e59c:	2400      	movs	r4, #0
 800e59e:	4688      	mov	r8, r1
 800e5a0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800e5a4:	4693      	mov	fp, r2
 800e5a6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800e5aa:	4607      	mov	r7, r0
 800e5ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800e5b0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800e5b4:	9404      	str	r4, [sp, #16]
 800e5b6:	bf14      	ite	ne
 800e5b8:	2308      	movne	r3, #8
 800e5ba:	2302      	moveq	r3, #2
 800e5bc:	fb05 b50a 	mla	r5, r5, sl, fp
 800e5c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e5c4:	f7ff ff06 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e5c8:	2e0b      	cmp	r6, #11
 800e5ca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800e5ce:	a901      	add	r1, sp, #4
 800e5d0:	bf98      	it	ls
 800e5d2:	4b13      	ldrls	r3, [pc, #76]	; (800e620 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e5d4:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e5d8:	bf98      	it	ls
 800e5da:	5d9c      	ldrbls	r4, [r3, r6]
 800e5dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e5e0:	10e4      	asrs	r4, r4, #3
 800e5e2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e5e6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e5ea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e5ee:	fb04 0405 	mla	r4, r4, r5, r0
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	9405      	str	r4, [sp, #20]
 800e5fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e600:	f88d 9020 	strb.w	r9, [sp, #32]
 800e604:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800e608:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800e60c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800e610:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800e614:	6803      	ldr	r3, [r0, #0]
 800e616:	685b      	ldr	r3, [r3, #4]
 800e618:	4798      	blx	r3
 800e61a:	b00b      	add	sp, #44	; 0x2c
 800e61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e620:	0801e1dc 	.word	0x0801e1dc

0800e624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e628:	461e      	mov	r6, r3
 800e62a:	4b0a      	ldr	r3, [pc, #40]	; (800e654 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e62c:	460f      	mov	r7, r1
 800e62e:	4690      	mov	r8, r2
 800e630:	881d      	ldrh	r5, [r3, #0]
 800e632:	f7fb f95f 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e636:	6803      	ldr	r3, [r0, #0]
 800e638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63a:	4798      	blx	r3
 800e63c:	280b      	cmp	r0, #11
 800e63e:	bf96      	itet	ls
 800e640:	4b05      	ldrls	r3, [pc, #20]	; (800e658 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e642:	2400      	movhi	r4, #0
 800e644:	5c1c      	ldrbls	r4, [r3, r0]
 800e646:	fb08 7005 	mla	r0, r8, r5, r7
 800e64a:	10e4      	asrs	r4, r4, #3
 800e64c:	fb04 6000 	mla	r0, r4, r0, r6
 800e650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e654:	2401a9b2 	.word	0x2401a9b2
 800e658:	0801e1dc 	.word	0x0801e1dc

0800e65c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e65e:	b08b      	sub	sp, #44	; 0x2c
 800e660:	461f      	mov	r7, r3
 800e662:	4604      	mov	r4, r0
 800e664:	4616      	mov	r6, r2
 800e666:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800e66a:	2500      	movs	r5, #0
 800e66c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e670:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e674:	9504      	str	r5, [sp, #16]
 800e676:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e67a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e67e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e682:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e686:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e68a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e68e:	f88d 3020 	strb.w	r3, [sp, #32]
 800e692:	f7ff fe9f 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e696:	463a      	mov	r2, r7
 800e698:	4631      	mov	r1, r6
 800e69a:	4603      	mov	r3, r0
 800e69c:	4620      	mov	r0, r4
 800e69e:	f7ff ffc1 	bl	800e624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e6a2:	4b0e      	ldr	r3, [pc, #56]	; (800e6dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e6a4:	9005      	str	r0, [sp, #20]
 800e6a6:	881b      	ldrh	r3, [r3, #0]
 800e6a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e6ac:	f7fb f922 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e6b0:	6803      	ldr	r3, [r0, #0]
 800e6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b4:	4798      	blx	r3
 800e6b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e6b8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800e6bc:	a901      	add	r1, sp, #4
 800e6be:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800e6c2:	9304      	str	r3, [sp, #16]
 800e6c4:	6860      	ldr	r0, [r4, #4]
 800e6c6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e6ca:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800e6ce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800e6d2:	6803      	ldr	r3, [r0, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	4798      	blx	r3
 800e6d8:	b00b      	add	sp, #44	; 0x2c
 800e6da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6dc:	2401a9b2 	.word	0x2401a9b2

0800e6e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e2:	b08d      	sub	sp, #52	; 0x34
 800e6e4:	2501      	movs	r5, #1
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	466b      	mov	r3, sp
 800e6ea:	9503      	str	r5, [sp, #12]
 800e6ec:	e883 0006 	stmia.w	r3, {r1, r2}
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	f8bd 6000 	ldrh.w	r6, [sp]
 800e6f6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e6fa:	9306      	str	r3, [sp, #24]
 800e6fc:	6803      	ldr	r3, [r0, #0]
 800e6fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e700:	4798      	blx	r3
 800e702:	463a      	mov	r2, r7
 800e704:	4631      	mov	r1, r6
 800e706:	4603      	mov	r3, r0
 800e708:	4620      	mov	r0, r4
 800e70a:	f7ff ff8b 	bl	800e624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e70e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e710:	9004      	str	r0, [sp, #16]
 800e712:	9307      	str	r3, [sp, #28]
 800e714:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e718:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e71c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e720:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e724:	4b0e      	ldr	r3, [pc, #56]	; (800e760 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e726:	881b      	ldrh	r3, [r3, #0]
 800e728:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e72c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e730:	f7fb f8e0 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e734:	6803      	ldr	r3, [r0, #0]
 800e736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e738:	4798      	blx	r3
 800e73a:	23ff      	movs	r3, #255	; 0xff
 800e73c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e740:	a903      	add	r1, sp, #12
 800e742:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e746:	6860      	ldr	r0, [r4, #4]
 800e748:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e74c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e750:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e754:	6803      	ldr	r3, [r0, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	4798      	blx	r3
 800e75a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800e75c:	b00d      	add	sp, #52	; 0x34
 800e75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e760:	2401a9b2 	.word	0x2401a9b2

0800e764 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e768:	b08c      	sub	sp, #48	; 0x30
 800e76a:	461e      	mov	r6, r3
 800e76c:	2300      	movs	r3, #0
 800e76e:	4604      	mov	r4, r0
 800e770:	466d      	mov	r5, sp
 800e772:	9306      	str	r3, [sp, #24]
 800e774:	6803      	ldr	r3, [r0, #0]
 800e776:	e885 0006 	stmia.w	r5, {r1, r2}
 800e77a:	2501      	movs	r5, #1
 800e77c:	f8bd 7000 	ldrh.w	r7, [sp]
 800e780:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e784:	9503      	str	r5, [sp, #12]
 800e786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e788:	4798      	blx	r3
 800e78a:	4642      	mov	r2, r8
 800e78c:	4639      	mov	r1, r7
 800e78e:	4603      	mov	r3, r0
 800e790:	4620      	mov	r0, r4
 800e792:	f7ff ff47 	bl	800e624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e796:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e79a:	9004      	str	r0, [sp, #16]
 800e79c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e7a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e7a4:	9607      	str	r6, [sp, #28]
 800e7a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800e7aa:	4b10      	ldr	r3, [pc, #64]	; (800e7ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800e7b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7b4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800e7b8:	f7fb f89c 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800e7bc:	6803      	ldr	r3, [r0, #0]
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	4798      	blx	r3
 800e7c2:	23ff      	movs	r3, #255	; 0xff
 800e7c4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800e7c8:	a903      	add	r1, sp, #12
 800e7ca:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800e7ce:	6860      	ldr	r0, [r4, #4]
 800e7d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800e7d4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800e7d8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800e7dc:	6803      	ldr	r3, [r0, #0]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	4798      	blx	r3
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	b00c      	add	sp, #48	; 0x30
 800e7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ea:	bf00      	nop
 800e7ec:	2401a9b2 	.word	0x2401a9b2

0800e7f0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7f2:	b085      	sub	sp, #20
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	ac02      	add	r4, sp, #8
 800e7f8:	e884 0006 	stmia.w	r4, {r1, r2}
 800e7fc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e800:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e804:	f7ff fde6 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e808:	4631      	mov	r1, r6
 800e80a:	4603      	mov	r3, r0
 800e80c:	463a      	mov	r2, r7
 800e80e:	4628      	mov	r0, r5
 800e810:	f7ff ff08 	bl	800e624 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e814:	4a05      	ldr	r2, [pc, #20]	; (800e82c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	8812      	ldrh	r2, [r2, #0]
 800e81a:	9200      	str	r2, [sp, #0]
 800e81c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800e81e:	4603      	mov	r3, r0
 800e820:	4628      	mov	r0, r5
 800e822:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e826:	47b0      	blx	r6
 800e828:	b005      	add	sp, #20
 800e82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e82c:	2401a9b2 	.word	0x2401a9b2

0800e830 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e830:	b570      	push	{r4, r5, r6, lr}
 800e832:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 800e836:	4604      	mov	r4, r0
 800e838:	b19b      	cbz	r3, 800e862 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e83a:	2002      	movs	r0, #2
 800e83c:	f7fd f8da 	bl	800b9f4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e840:	2300      	movs	r3, #0
 800e842:	4620      	mov	r0, r4
 800e844:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800e848:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 800e84c:	6823      	ldr	r3, [r4, #0]
 800e84e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800e852:	f7ff fdbf 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e856:	4601      	mov	r1, r0
 800e858:	4620      	mov	r0, r4
 800e85a:	462b      	mov	r3, r5
 800e85c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e860:	4718      	bx	r3
 800e862:	bd70      	pop	{r4, r5, r6, pc}

0800e864 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e864:	b538      	push	{r3, r4, r5, lr}
 800e866:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 800e86a:	4604      	mov	r4, r0
 800e86c:	460d      	mov	r5, r1
 800e86e:	428b      	cmp	r3, r1
 800e870:	d006      	beq.n	800e880 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e872:	6803      	ldr	r3, [r0, #0]
 800e874:	b929      	cbnz	r1, 800e882 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e876:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800e87a:	4798      	blx	r3
 800e87c:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 800e880:	bd38      	pop	{r3, r4, r5, pc}
 800e882:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800e886:	e7f8      	b.n	800e87a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e888 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e888:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e88a:	b510      	push	{r4, lr}
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	4604      	mov	r4, r0
 800e890:	b95b      	cbnz	r3, 800e8aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e892:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800e896:	2b02      	cmp	r3, #2
 800e898:	d007      	beq.n	800e8aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e89a:	6840      	ldr	r0, [r0, #4]
 800e89c:	f000 f90e 	bl	800eabc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e8a0:	b118      	cbz	r0, 800e8aa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e8a2:	6862      	ldr	r2, [r4, #4]
 800e8a4:	7a53      	ldrb	r3, [r2, #9]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d0fc      	beq.n	800e8a4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e8aa:	f7fd fb47 	bl	800bf3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e8ae:	4620      	mov	r0, r4
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	f7ff ffd7 	bl	800e864 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e8b6:	4620      	mov	r0, r4
 800e8b8:	f7ff fd8c 	bl	800e3d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e8bc:	bd10      	pop	{r4, pc}
 800e8be:	bf00      	nop
 800e8c0:	2401a9b6 	.word	0x2401a9b6

0800e8c4 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800e8c4:	4770      	bx	lr

0800e8c6 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	4770      	bx	lr

0800e8ca <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e8ca:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e8ce:	1a13      	subs	r3, r2, r0
 800e8d0:	4258      	negs	r0, r3
 800e8d2:	4158      	adcs	r0, r3
 800e8d4:	4770      	bx	lr

0800e8d6 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e8d6:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e8da:	1a9b      	subs	r3, r3, r2
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	bfdc      	itt	le
 800e8e0:	6882      	ldrle	r2, [r0, #8]
 800e8e2:	189b      	addle	r3, r3, r2
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	bfcc      	ite	gt
 800e8e8:	2000      	movgt	r0, #0
 800e8ea:	2001      	movle	r0, #1
 800e8ec:	4770      	bx	lr

0800e8ee <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e8ee:	6902      	ldr	r2, [r0, #16]
 800e8f0:	6843      	ldr	r3, [r0, #4]
 800e8f2:	2024      	movs	r0, #36	; 0x24
 800e8f4:	fb00 3002 	mla	r0, r0, r2, r3
 800e8f8:	4770      	bx	lr

0800e8fa <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e8fa:	6803      	ldr	r3, [r0, #0]
 800e8fc:	691b      	ldr	r3, [r3, #16]
 800e8fe:	4718      	bx	r3

0800e900 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e900:	2301      	movs	r3, #1
 800e902:	b570      	push	{r4, r5, r6, lr}
 800e904:	7203      	strb	r3, [r0, #8]
 800e906:	4604      	mov	r4, r0
 800e908:	6840      	ldr	r0, [r0, #4]
 800e90a:	6803      	ldr	r3, [r0, #0]
 800e90c:	699b      	ldr	r3, [r3, #24]
 800e90e:	4798      	blx	r3
 800e910:	6803      	ldr	r3, [r0, #0]
 800e912:	4605      	mov	r5, r0
 800e914:	2b40      	cmp	r3, #64	; 0x40
 800e916:	d00c      	beq.n	800e932 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e918:	d810      	bhi.n	800e93c <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e91a:	2b04      	cmp	r3, #4
 800e91c:	d01d      	beq.n	800e95a <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e91e:	d804      	bhi.n	800e92a <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e920:	2b01      	cmp	r3, #1
 800e922:	d006      	beq.n	800e932 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e924:	2b02      	cmp	r3, #2
 800e926:	d02c      	beq.n	800e982 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e928:	bd70      	pop	{r4, r5, r6, pc}
 800e92a:	2b08      	cmp	r3, #8
 800e92c:	d01d      	beq.n	800e96a <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e92e:	2b20      	cmp	r3, #32
 800e930:	d1fa      	bne.n	800e928 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e932:	6823      	ldr	r3, [r4, #0]
 800e934:	4620      	mov	r0, r4
 800e936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e938:	4798      	blx	r3
 800e93a:	e013      	b.n	800e964 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e93c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e940:	d0f7      	beq.n	800e932 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e942:	d804      	bhi.n	800e94e <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e944:	2b80      	cmp	r3, #128	; 0x80
 800e946:	d0f4      	beq.n	800e932 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e94c:	e7f0      	b.n	800e930 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e94e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e952:	d0ee      	beq.n	800e932 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e954:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e958:	e7e5      	b.n	800e926 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	7f01      	ldrb	r1, [r0, #28]
 800e95e:	4620      	mov	r0, r4
 800e960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e962:	4798      	blx	r3
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e968:	e006      	b.n	800e978 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	7f01      	ldrb	r1, [r0, #28]
 800e96e:	4620      	mov	r0, r4
 800e970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e972:	4798      	blx	r3
 800e974:	6823      	ldr	r3, [r4, #0]
 800e976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e978:	4629      	mov	r1, r5
 800e97a:	4620      	mov	r0, r4
 800e97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e980:	4718      	bx	r3
 800e982:	6823      	ldr	r3, [r4, #0]
 800e984:	4620      	mov	r0, r4
 800e986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e988:	4798      	blx	r3
 800e98a:	e7f3      	b.n	800e974 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e98c <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e98c:	4770      	bx	lr

0800e98e <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e98e:	4770      	bx	lr

0800e990 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e990:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e994:	b510      	push	{r4, lr}
 800e996:	1ad2      	subs	r2, r2, r3
 800e998:	2a00      	cmp	r2, #0
 800e99a:	bfdc      	itt	le
 800e99c:	6884      	ldrle	r4, [r0, #8]
 800e99e:	1912      	addle	r2, r2, r4
 800e9a0:	2a01      	cmp	r2, #1
 800e9a2:	dd16      	ble.n	800e9d2 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e9a4:	6842      	ldr	r2, [r0, #4]
 800e9a6:	2424      	movs	r4, #36	; 0x24
 800e9a8:	fb04 2303 	mla	r3, r4, r3, r2
 800e9ac:	f101 0220 	add.w	r2, r1, #32
 800e9b0:	f851 4b04 	ldr.w	r4, [r1], #4
 800e9b4:	4291      	cmp	r1, r2
 800e9b6:	f843 4b04 	str.w	r4, [r3], #4
 800e9ba:	d1f9      	bne.n	800e9b0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e9bc:	780a      	ldrb	r2, [r1, #0]
 800e9be:	701a      	strb	r2, [r3, #0]
 800e9c0:	68c3      	ldr	r3, [r0, #12]
 800e9c2:	6882      	ldr	r2, [r0, #8]
 800e9c4:	f3bf 8f5b 	dmb	ish
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	bfd8      	it	le
 800e9ce:	1a9b      	suble	r3, r3, r2
 800e9d0:	60c3      	str	r3, [r0, #12]
 800e9d2:	bd10      	pop	{r4, pc}

0800e9d4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e9d4:	6903      	ldr	r3, [r0, #16]
 800e9d6:	6882      	ldr	r2, [r0, #8]
 800e9d8:	f3bf 8f5b 	dmb	ish
 800e9dc:	3301      	adds	r3, #1
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	bfd8      	it	le
 800e9e2:	1a9b      	suble	r3, r3, r2
 800e9e4:	6103      	str	r3, [r0, #16]
 800e9e6:	4770      	bx	lr

0800e9e8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e9e8:	b570      	push	{r4, r5, r6, lr}
 800e9ea:	4604      	mov	r4, r0
 800e9ec:	460e      	mov	r6, r1
 800e9ee:	6860      	ldr	r0, [r4, #4]
 800e9f0:	6803      	ldr	r3, [r0, #0]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	4798      	blx	r3
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d1f9      	bne.n	800e9ee <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e9fa:	4d0d      	ldr	r5, [pc, #52]	; (800ea30 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e9fc:	6828      	ldr	r0, [r5, #0]
 800e9fe:	6803      	ldr	r3, [r0, #0]
 800ea00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea02:	4798      	blx	r3
 800ea04:	f7fd fab4 	bl	800bf70 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ea08:	6828      	ldr	r0, [r5, #0]
 800ea0a:	2101      	movs	r1, #1
 800ea0c:	f7ff ff2a 	bl	800e864 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ea10:	6860      	ldr	r0, [r4, #4]
 800ea12:	4631      	mov	r1, r6
 800ea14:	6803      	ldr	r3, [r0, #0]
 800ea16:	689b      	ldr	r3, [r3, #8]
 800ea18:	4798      	blx	r3
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea20:	4798      	blx	r3
 800ea22:	6828      	ldr	r0, [r5, #0]
 800ea24:	6803      	ldr	r3, [r0, #0]
 800ea26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea2c:	4718      	bx	r3
 800ea2e:	bf00      	nop
 800ea30:	2401a9b8 	.word	0x2401a9b8

0800ea34 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ea34:	b508      	push	{r3, lr}
 800ea36:	f7fd fa81 	bl	800bf3c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ea3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ea3e:	f7fd ba8b 	b.w	800bf58 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ea42 <_ZN8touchgfx13DMA_Interface5startEv>:
 800ea42:	b510      	push	{r4, lr}
 800ea44:	4604      	mov	r4, r0
 800ea46:	6840      	ldr	r0, [r0, #4]
 800ea48:	6803      	ldr	r3, [r0, #0]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4798      	blx	r3
 800ea4e:	b948      	cbnz	r0, 800ea64 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ea50:	7a63      	ldrb	r3, [r4, #9]
 800ea52:	b13b      	cbz	r3, 800ea64 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ea54:	7a23      	ldrb	r3, [r4, #8]
 800ea56:	b92b      	cbnz	r3, 800ea64 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800ea58:	6823      	ldr	r3, [r4, #0]
 800ea5a:	4620      	mov	r0, r4
 800ea5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea62:	4718      	bx	r3
 800ea64:	bd10      	pop	{r4, pc}

0800ea66 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ea66:	b570      	push	{r4, r5, r6, lr}
 800ea68:	4604      	mov	r4, r0
 800ea6a:	6840      	ldr	r0, [r0, #4]
 800ea6c:	6803      	ldr	r3, [r0, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4798      	blx	r3
 800ea72:	4605      	mov	r5, r0
 800ea74:	b930      	cbnz	r0, 800ea84 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ea76:	7a23      	ldrb	r3, [r4, #8]
 800ea78:	b123      	cbz	r3, 800ea84 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ea7a:	6860      	ldr	r0, [r4, #4]
 800ea7c:	6803      	ldr	r3, [r0, #0]
 800ea7e:	695b      	ldr	r3, [r3, #20]
 800ea80:	4798      	blx	r3
 800ea82:	7225      	strb	r5, [r4, #8]
 800ea84:	6860      	ldr	r0, [r4, #4]
 800ea86:	6803      	ldr	r3, [r0, #0]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	4798      	blx	r3
 800ea8c:	b928      	cbnz	r0, 800ea9a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800ea8e:	6823      	ldr	r3, [r4, #0]
 800ea90:	4620      	mov	r0, r4
 800ea92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea98:	4718      	bx	r3
 800ea9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea9e:	f7fd ba73 	b.w	800bf88 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0800eaa4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	6082      	str	r2, [r0, #8]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	4c03      	ldr	r4, [pc, #12]	; (800eab8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800eaac:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800eab0:	e9c0 4100 	strd	r4, r1, [r0]
 800eab4:	bd10      	pop	{r4, pc}
 800eab6:	bf00      	nop
 800eab8:	0801e318 	.word	0x0801e318

0800eabc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800eabc:	6840      	ldr	r0, [r0, #4]
 800eabe:	6803      	ldr	r3, [r0, #0]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4718      	bx	r3

0800eac4 <_ZNK8touchgfx3Box12getSolidRectEv>:
 800eac4:	2300      	movs	r3, #0
 800eac6:	8083      	strh	r3, [r0, #4]
 800eac8:	80c3      	strh	r3, [r0, #6]
 800eaca:	8003      	strh	r3, [r0, #0]
 800eacc:	8043      	strh	r3, [r0, #2]
 800eace:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800ead2:	2bff      	cmp	r3, #255	; 0xff
 800ead4:	bf01      	itttt	eq
 800ead6:	890b      	ldrheq	r3, [r1, #8]
 800ead8:	8083      	strheq	r3, [r0, #4]
 800eada:	894b      	ldrheq	r3, [r1, #10]
 800eadc:	80c3      	strheq	r3, [r0, #6]
 800eade:	4770      	bx	lr

0800eae0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800eae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eae2:	4604      	mov	r4, r0
 800eae4:	466b      	mov	r3, sp
 800eae6:	6808      	ldr	r0, [r1, #0]
 800eae8:	6849      	ldr	r1, [r1, #4]
 800eaea:	c303      	stmia	r3!, {r0, r1}
 800eaec:	6823      	ldr	r3, [r4, #0]
 800eaee:	4669      	mov	r1, sp
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaf4:	4798      	blx	r3
 800eaf6:	4b08      	ldr	r3, [pc, #32]	; (800eb18 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800eafe:	b10a      	cbz	r2, 800eb04 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800eb00:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800eb02:	b900      	cbnz	r0, 800eb06 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800eb04:	6898      	ldr	r0, [r3, #8]
 800eb06:	6803      	ldr	r3, [r0, #0]
 800eb08:	4669      	mov	r1, sp
 800eb0a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800eb0c:	6a1d      	ldr	r5, [r3, #32]
 800eb0e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800eb12:	47a8      	blx	r5
 800eb14:	b003      	add	sp, #12
 800eb16:	bd30      	pop	{r4, r5, pc}
 800eb18:	2401a9b8 	.word	0x2401a9b8

0800eb1c <_ZNK8touchgfx3Box17invalidateContentEv>:
 800eb1c:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800eb20:	b12a      	cbz	r2, 800eb2e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800eb22:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800eb26:	b112      	cbz	r2, 800eb2e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800eb28:	6803      	ldr	r3, [r0, #0]
 800eb2a:	695b      	ldr	r3, [r3, #20]
 800eb2c:	4718      	bx	r3
 800eb2e:	4770      	bx	lr

0800eb30 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800eb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb34:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800eb36:	4604      	mov	r4, r0
 800eb38:	460e      	mov	r6, r1
 800eb3a:	b08e      	sub	sp, #56	; 0x38
 800eb3c:	b218      	sxth	r0, r3
 800eb3e:	8921      	ldrh	r1, [r4, #8]
 800eb40:	005b      	lsls	r3, r3, #1
 800eb42:	8962      	ldrh	r2, [r4, #10]
 800eb44:	f8ad 0000 	strh.w	r0, [sp]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	f8ad 0002 	strh.w	r0, [sp, #2]
 800eb4e:	1ac9      	subs	r1, r1, r3
 800eb50:	1ad3      	subs	r3, r2, r3
 800eb52:	b209      	sxth	r1, r1
 800eb54:	b21b      	sxth	r3, r3
 800eb56:	2900      	cmp	r1, #0
 800eb58:	f8ad 1004 	strh.w	r1, [sp, #4]
 800eb5c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800eb60:	dd5e      	ble.n	800ec20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	dd5c      	ble.n	800ec20 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800eb66:	6830      	ldr	r0, [r6, #0]
 800eb68:	ab02      	add	r3, sp, #8
 800eb6a:	6871      	ldr	r1, [r6, #4]
 800eb6c:	c303      	stmia	r3!, {r0, r1}
 800eb6e:	4669      	mov	r1, sp
 800eb70:	a802      	add	r0, sp, #8
 800eb72:	f7fe ffa5 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800eb76:	4620      	mov	r0, r4
 800eb78:	a902      	add	r1, sp, #8
 800eb7a:	f7ff ffb1 	bl	800eae0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800eb7e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d05f      	beq.n	800ec44 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800eb84:	8963      	ldrh	r3, [r4, #10]
 800eb86:	b202      	sxth	r2, r0
 800eb88:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800eb8c:	2500      	movs	r5, #0
 800eb8e:	1a1f      	subs	r7, r3, r0
 800eb90:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800eb94:	f8ad 101c 	strh.w	r1, [sp, #28]
 800eb98:	b21b      	sxth	r3, r3
 800eb9a:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800eb9e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800eba2:	af04      	add	r7, sp, #16
 800eba4:	1a09      	subs	r1, r1, r0
 800eba6:	9506      	str	r5, [sp, #24]
 800eba8:	f8ad 201e 	strh.w	r2, [sp, #30]
 800ebac:	f8ad 5020 	strh.w	r5, [sp, #32]
 800ebb0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800ebb4:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800ebb8:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800ebbc:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800ebc0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800ebc4:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800ebc8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800ebcc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800ebd0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800ebd4:	ab06      	add	r3, sp, #24
 800ebd6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ebda:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ebde:	e887 0003 	stmia.w	r7, {r0, r1}
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4638      	mov	r0, r7
 800ebe6:	f7fe ff6b 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800ebea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	dd12      	ble.n	800ec18 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800ebf2:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	dd0e      	ble.n	800ec18 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800ebfa:	6823      	ldr	r3, [r4, #0]
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	4620      	mov	r0, r4
 800ec00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec02:	4798      	blx	r3
 800ec04:	f7fa fe76 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800ec08:	6803      	ldr	r3, [r0, #0]
 800ec0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec0c:	4639      	mov	r1, r7
 800ec0e:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800ec12:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800ec16:	47c0      	blx	r8
 800ec18:	3501      	adds	r5, #1
 800ec1a:	2d04      	cmp	r5, #4
 800ec1c:	d1da      	bne.n	800ebd4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800ec1e:	e011      	b.n	800ec44 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800ec20:	6830      	ldr	r0, [r6, #0]
 800ec22:	ab06      	add	r3, sp, #24
 800ec24:	6871      	ldr	r1, [r6, #4]
 800ec26:	c303      	stmia	r3!, {r0, r1}
 800ec28:	6823      	ldr	r3, [r4, #0]
 800ec2a:	a906      	add	r1, sp, #24
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec30:	4798      	blx	r3
 800ec32:	f7fa fe5f 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 800ec36:	6803      	ldr	r3, [r0, #0]
 800ec38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ec3a:	a906      	add	r1, sp, #24
 800ec3c:	6a1d      	ldr	r5, [r3, #32]
 800ec3e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800ec42:	47a8      	blx	r5
 800ec44:	b00e      	add	sp, #56	; 0x38
 800ec46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec4a <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800ec4a:	b570      	push	{r4, r5, r6, lr}
 800ec4c:	880b      	ldrh	r3, [r1, #0]
 800ec4e:	460d      	mov	r5, r1
 800ec50:	4604      	mov	r4, r0
 800ec52:	84c3      	strh	r3, [r0, #38]	; 0x26
 800ec54:	4608      	mov	r0, r1
 800ec56:	f003 fdc7 	bl	80127e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	f003 fdf7 	bl	8012850 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	4605      	mov	r5, r0
 800ec66:	4631      	mov	r1, r6
 800ec68:	4620      	mov	r0, r4
 800ec6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec6c:	4798      	blx	r3
 800ec6e:	6823      	ldr	r3, [r4, #0]
 800ec70:	4629      	mov	r1, r5
 800ec72:	4620      	mov	r0, r4
 800ec74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec7a:	4718      	bx	r3

0800ec7c <_ZNK8touchgfx5Image12getSolidRectEv>:
 800ec7c:	b510      	push	{r4, lr}
 800ec7e:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800ec82:	4604      	mov	r4, r0
 800ec84:	2bff      	cmp	r3, #255	; 0xff
 800ec86:	d006      	beq.n	800ec96 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	8003      	strh	r3, [r0, #0]
 800ec8c:	8043      	strh	r3, [r0, #2]
 800ec8e:	8083      	strh	r3, [r0, #4]
 800ec90:	80c3      	strh	r3, [r0, #6]
 800ec92:	4620      	mov	r0, r4
 800ec94:	bd10      	pop	{r4, pc}
 800ec96:	3126      	adds	r1, #38	; 0x26
 800ec98:	f003 fe0e 	bl	80128b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800ec9c:	e7f9      	b.n	800ec92 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800ec9e <_ZNK8touchgfx5Image17invalidateContentEv>:
 800ec9e:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800eca2:	b12a      	cbz	r2, 800ecb0 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800eca4:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800eca8:	b112      	cbz	r2, 800ecb0 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800ecaa:	6803      	ldr	r3, [r0, #0]
 800ecac:	695b      	ldr	r3, [r3, #20]
 800ecae:	4718      	bx	r3
 800ecb0:	4770      	bx	lr
	...

0800ecb4 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800ecb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb8:	4604      	mov	r4, r0
 800ecba:	b088      	sub	sp, #32
 800ecbc:	2500      	movs	r5, #0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	f854 3b26 	ldr.w	r3, [r4], #38
 800ecc4:	a904      	add	r1, sp, #16
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ecce:	4798      	blx	r3
 800ecd0:	4620      	mov	r0, r4
 800ecd2:	f003 fd89 	bl	80127e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800ecd6:	4680      	mov	r8, r0
 800ecd8:	4620      	mov	r0, r4
 800ecda:	f003 fdb9 	bl	8012850 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800ecde:	9506      	str	r5, [sp, #24]
 800ece0:	ad06      	add	r5, sp, #24
 800ece2:	f8ad 001e 	strh.w	r0, [sp, #30]
 800ece6:	4639      	mov	r1, r7
 800ece8:	f8ad 801c 	strh.w	r8, [sp, #28]
 800ecec:	4628      	mov	r0, r5
 800ecee:	f7fe fee7 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 800ecf2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	dd19      	ble.n	800ed2e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800ecfa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	dd15      	ble.n	800ed2e <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800ed02:	4b0c      	ldr	r3, [pc, #48]	; (800ed34 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800ed0a:	b10a      	cbz	r2, 800ed10 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800ed0c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ed0e:	b900      	cbnz	r0, 800ed12 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800ed10:	6898      	ldr	r0, [r3, #8]
 800ed12:	2701      	movs	r7, #1
 800ed14:	6801      	ldr	r1, [r0, #0]
 800ed16:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800ed1a:	9702      	str	r7, [sp, #8]
 800ed1c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800ed20:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800ed24:	e9cd 5600 	strd	r5, r6, [sp]
 800ed28:	688d      	ldr	r5, [r1, #8]
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	47a8      	blx	r5
 800ed2e:	b008      	add	sp, #32
 800ed30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed34:	2401a9b8 	.word	0x2401a9b8

0800ed38 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800ed38:	b510      	push	{r4, lr}
 800ed3a:	6803      	ldr	r3, [r0, #0]
 800ed3c:	460c      	mov	r4, r1
 800ed3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed40:	4798      	blx	r3
 800ed42:	1b03      	subs	r3, r0, r4
 800ed44:	4258      	negs	r0, r3
 800ed46:	4158      	adcs	r0, r3
 800ed48:	bd10      	pop	{r4, pc}
	...

0800ed4c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800ed4c:	4b01      	ldr	r3, [pc, #4]	; (800ed54 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800ed4e:	6019      	str	r1, [r3, #0]
 800ed50:	4770      	bx	lr
 800ed52:	bf00      	nop
 800ed54:	2401a9c0 	.word	0x2401a9c0

0800ed58 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800ed58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed5c:	4696      	mov	lr, r2
 800ed5e:	b097      	sub	sp, #92	; 0x5c
 800ed60:	4605      	mov	r5, r0
 800ed62:	4614      	mov	r4, r2
 800ed64:	460e      	mov	r6, r1
 800ed66:	461f      	mov	r7, r3
 800ed68:	f10d 0c1c 	add.w	ip, sp, #28
 800ed6c:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800ed70:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800ed74:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800ed78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ed7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed80:	f8de 3000 	ldr.w	r3, [lr]
 800ed84:	f104 0e14 	add.w	lr, r4, #20
 800ed88:	f8cc 3000 	str.w	r3, [ip]
 800ed8c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800ed90:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ed94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ed98:	f8de 3000 	ldr.w	r3, [lr]
 800ed9c:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800eda0:	f8cc 3000 	str.w	r3, [ip]
 800eda4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800eda8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800edb0:	f8de 3000 	ldr.w	r3, [lr]
 800edb4:	4631      	mov	r1, r6
 800edb6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800edb8:	4628      	mov	r0, r5
 800edba:	f8cc 3000 	str.w	r3, [ip]
 800edbe:	682b      	ldr	r3, [r5, #0]
 800edc0:	9201      	str	r2, [sp, #4]
 800edc2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800edc4:	f8cd 8008 	str.w	r8, [sp, #8]
 800edc8:	9200      	str	r2, [sp, #0]
 800edca:	aa07      	add	r2, sp, #28
 800edcc:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800edd0:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800edd4:	463b      	mov	r3, r7
 800edd6:	47d8      	blx	fp
 800edd8:	46a6      	mov	lr, r4
 800edda:	f10d 0c1c 	add.w	ip, sp, #28
 800edde:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ede2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ede6:	f8de 3000 	ldr.w	r3, [lr]
 800edea:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800edee:	343c      	adds	r4, #60	; 0x3c
 800edf0:	f8cc 3000 	str.w	r3, [ip]
 800edf4:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800edf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800edfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee00:	f8de 3000 	ldr.w	r3, [lr]
 800ee04:	f8cc 3000 	str.w	r3, [ip]
 800ee08:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ee0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee12:	6823      	ldr	r3, [r4, #0]
 800ee14:	4631      	mov	r1, r6
 800ee16:	4628      	mov	r0, r5
 800ee18:	f8cc 3000 	str.w	r3, [ip]
 800ee1c:	682b      	ldr	r3, [r5, #0]
 800ee1e:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800ee22:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee24:	f8cd 8008 	str.w	r8, [sp, #8]
 800ee28:	9201      	str	r2, [sp, #4]
 800ee2a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ee2c:	9200      	str	r2, [sp, #0]
 800ee2e:	aa07      	add	r2, sp, #28
 800ee30:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800ee32:	463b      	mov	r3, r7
 800ee34:	47a0      	blx	r4
 800ee36:	b017      	add	sp, #92	; 0x5c
 800ee38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee3c <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	4770      	bx	lr

0800ee40 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800ee40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee44:	b08d      	sub	sp, #52	; 0x34
 800ee46:	4688      	mov	r8, r1
 800ee48:	f8d3 c000 	ldr.w	ip, [r3]
 800ee4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ee4e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800ee52:	680f      	ldr	r7, [r1, #0]
 800ee54:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800ee58:	eba7 070c 	sub.w	r7, r7, ip
 800ee5c:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800ee60:	edd3 6a07 	vldr	s13, [r3, #28]
 800ee64:	42bc      	cmp	r4, r7
 800ee66:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee68:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800ee6c:	bfa8      	it	ge
 800ee6e:	463c      	movge	r4, r7
 800ee70:	f9b1 9000 	ldrsh.w	r9, [r1]
 800ee74:	f9ba 1000 	ldrsh.w	r1, [sl]
 800ee78:	ee07 4a90 	vmov	s15, r4
 800ee7c:	eb09 0e0c 	add.w	lr, r9, ip
 800ee80:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800ee84:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800ee88:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800ee8c:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800ee90:	4571      	cmp	r1, lr
 800ee92:	ee25 4a04 	vmul.f32	s8, s10, s8
 800ee96:	ee65 4a24 	vmul.f32	s9, s10, s9
 800ee9a:	ee25 5a27 	vmul.f32	s10, s10, s15
 800ee9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eea2:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800eea6:	ee32 1a05 	vadd.f32	s2, s4, s10
 800eeaa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eeae:	ee36 0a84 	vadd.f32	s0, s13, s8
 800eeb2:	ee61 1a87 	vmul.f32	s3, s3, s14
 800eeb6:	ee22 2a07 	vmul.f32	s4, s4, s14
 800eeba:	f340 808c 	ble.w	800efd6 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800eebe:	eba1 060e 	sub.w	r6, r1, lr
 800eec2:	fb96 f5f4 	sdiv	r5, r6, r4
 800eec6:	ee07 5a10 	vmov	s14, r5
 800eeca:	2d00      	cmp	r5, #0
 800eecc:	fb04 6615 	mls	r6, r4, r5, r6
 800eed0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eed4:	eea7 0a04 	vfma.f32	s0, s14, s8
 800eed8:	eee7 0a24 	vfma.f32	s1, s14, s9
 800eedc:	eea7 1a05 	vfma.f32	s2, s14, s10
 800eee0:	dd12      	ble.n	800ef08 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800eee2:	ee70 6a44 	vsub.f32	s13, s0, s8
 800eee6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800eeea:	ee31 2a45 	vsub.f32	s4, s2, s10
 800eeee:	eef5 6a40 	vcmp.f32	s13, #0.0
 800eef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef6:	bf14      	ite	ne
 800eef8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800eefc:	eeb0 7a67 	vmoveq.f32	s14, s15
 800ef00:	ee61 1a87 	vmul.f32	s3, s3, s14
 800ef04:	ee22 2a07 	vmul.f32	s4, s4, s14
 800ef08:	fb05 f204 	mul.w	r2, r5, r4
 800ef0c:	1abf      	subs	r7, r7, r2
 800ef0e:	4494      	add	ip, r2
 800ef10:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800ef14:	4411      	add	r1, r2
 800ef16:	eb09 020c 	add.w	r2, r9, ip
 800ef1a:	b209      	sxth	r1, r1
 800ef1c:	443a      	add	r2, r7
 800ef1e:	428a      	cmp	r2, r1
 800ef20:	bfc4      	itt	gt
 800ef22:	eba1 0209 	subgt.w	r2, r1, r9
 800ef26:	eba2 070c 	subgt.w	r7, r2, ip
 800ef2a:	2f00      	cmp	r7, #0
 800ef2c:	dd50      	ble.n	800efd0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800ef2e:	fb97 f1f4 	sdiv	r1, r7, r4
 800ef32:	fb04 7211 	mls	r2, r4, r1, r7
 800ef36:	b90a      	cbnz	r2, 800ef3c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800ef38:	3901      	subs	r1, #1
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800ef40:	6840      	ldr	r0, [r0, #4]
 800ef42:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800ef46:	44b6      	add	lr, r6
 800ef48:	f8d0 a000 	ldr.w	sl, [r0]
 800ef4c:	2900      	cmp	r1, #0
 800ef4e:	bfcc      	ite	gt
 800ef50:	46a1      	movgt	r9, r4
 800ef52:	4691      	movle	r9, r2
 800ef54:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef56:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ef58:	fb04 e505 	mla	r5, r4, r5, lr
 800ef5c:	eef0 6a42 	vmov.f32	s13, s4
 800ef60:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800ef64:	9008      	str	r0, [sp, #32]
 800ef66:	eeb0 7a61 	vmov.f32	s14, s3
 800ef6a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ef6c:	695b      	ldr	r3, [r3, #20]
 800ef6e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800ef72:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800ef76:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800ef7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800ef7c:	445b      	add	r3, fp
 800ef7e:	9307      	str	r3, [sp, #28]
 800ef80:	ee16 3a90 	vmov	r3, s13
 800ef84:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800ef88:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800ef8c:	ee21 3a23 	vmul.f32	s6, s2, s7
 800ef90:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800ef94:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800ef98:	ee17 7a90 	vmov	r7, s15
 800ef9c:	ee73 7a42 	vsub.f32	s15, s6, s4
 800efa0:	fb97 f7f4 	sdiv	r7, r7, r4
 800efa4:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800efa8:	ee17 ca90 	vmov	ip, s15
 800efac:	fb9c fcf4 	sdiv	ip, ip, r4
 800efb0:	fb0c 3306 	mla	r3, ip, r6, r3
 800efb4:	9302      	str	r3, [sp, #8]
 800efb6:	ee17 3a10 	vmov	r3, s14
 800efba:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800efbe:	fb07 3706 	mla	r7, r7, r6, r3
 800efc2:	eba9 0306 	sub.w	r3, r9, r6
 800efc6:	e9cd 4700 	strd	r4, r7, [sp]
 800efca:	f8da 4008 	ldr.w	r4, [sl, #8]
 800efce:	47a0      	blx	r4
 800efd0:	b00d      	add	sp, #52	; 0x34
 800efd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd6:	2500      	movs	r5, #0
 800efd8:	462e      	mov	r6, r5
 800efda:	e799      	b.n	800ef10 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800efdc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	b0db      	sub	sp, #364	; 0x16c
 800efe2:	461d      	mov	r5, r3
 800efe4:	4614      	mov	r4, r2
 800efe6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800efea:	910f      	str	r1, [sp, #60]	; 0x3c
 800efec:	4629      	mov	r1, r5
 800efee:	930a      	str	r3, [sp, #40]	; 0x28
 800eff0:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800eff4:	9009      	str	r0, [sp, #36]	; 0x24
 800eff6:	930b      	str	r3, [sp, #44]	; 0x2c
 800eff8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800effc:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800f000:	9310      	str	r3, [sp, #64]	; 0x40
 800f002:	6803      	ldr	r3, [r0, #0]
 800f004:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800f006:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f00a:	47b8      	blx	r7
 800f00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00e:	6058      	str	r0, [r3, #4]
 800f010:	2800      	cmp	r0, #0
 800f012:	f000 83a1 	beq.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f016:	682b      	ldr	r3, [r5, #0]
 800f018:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800f01c:	ed94 7a02 	vldr	s14, [r4, #8]
 800f020:	9314      	str	r3, [sp, #80]	; 0x50
 800f022:	686b      	ldr	r3, [r5, #4]
 800f024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f028:	9315      	str	r3, [sp, #84]	; 0x54
 800f02a:	4bc1      	ldr	r3, [pc, #772]	; (800f330 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800f02c:	7819      	ldrb	r1, [r3, #0]
 800f02e:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800f032:	2900      	cmp	r1, #0
 800f034:	bf16      	itet	ne
 800f036:	4619      	movne	r1, r3
 800f038:	4611      	moveq	r1, r2
 800f03a:	4613      	movne	r3, r2
 800f03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f040:	9116      	str	r1, [sp, #88]	; 0x58
 800f042:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800f046:	f240 8387 	bls.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f04a:	ed94 7a07 	vldr	s14, [r4, #28]
 800f04e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f056:	f240 837f 	bls.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f05a:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f05e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f066:	f240 8377 	bls.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f06a:	6822      	ldr	r2, [r4, #0]
 800f06c:	4bb1      	ldr	r3, [pc, #708]	; (800f334 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800f06e:	429a      	cmp	r2, r3
 800f070:	f2c0 8372 	blt.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f074:	49b0      	ldr	r1, [pc, #704]	; (800f338 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800f076:	6963      	ldr	r3, [r4, #20]
 800f078:	428a      	cmp	r2, r1
 800f07a:	f300 836d 	bgt.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f07e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f082:	48ae      	ldr	r0, [pc, #696]	; (800f33c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800f084:	33ff      	adds	r3, #255	; 0xff
 800f086:	4283      	cmp	r3, r0
 800f088:	f200 8366 	bhi.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f08c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f08e:	4dac      	ldr	r5, [pc, #688]	; (800f340 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800f090:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800f094:	33ff      	adds	r3, #255	; 0xff
 800f096:	42ab      	cmp	r3, r5
 800f098:	f200 835e 	bhi.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f09c:	6862      	ldr	r2, [r4, #4]
 800f09e:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800f0a2:	33ff      	adds	r3, #255	; 0xff
 800f0a4:	4283      	cmp	r3, r0
 800f0a6:	f200 8357 	bhi.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0aa:	69a1      	ldr	r1, [r4, #24]
 800f0ac:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800f0b0:	33ff      	adds	r3, #255	; 0xff
 800f0b2:	4283      	cmp	r3, r0
 800f0b4:	f200 8350 	bhi.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f0ba:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800f0be:	30ff      	adds	r0, #255	; 0xff
 800f0c0:	42a8      	cmp	r0, r5
 800f0c2:	f200 8349 	bhi.w	800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f0c6:	428a      	cmp	r2, r1
 800f0c8:	f280 8110 	bge.w	800f2ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	f300 8119 	bgt.w	800f304 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800f0d2:	4299      	cmp	r1, r3
 800f0d4:	f280 811d 	bge.w	800f312 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800f0d8:	2502      	movs	r5, #2
 800f0da:	2701      	movs	r7, #1
 800f0dc:	46a9      	mov	r9, r5
 800f0de:	46b8      	mov	r8, r7
 800f0e0:	f04f 0a00 	mov.w	sl, #0
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	a849      	add	r0, sp, #292	; 0x124
 800f0e8:	f003 f806 	bl	80120f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800f0ec:	4622      	mov	r2, r4
 800f0ee:	4653      	mov	r3, sl
 800f0f0:	a949      	add	r1, sp, #292	; 0x124
 800f0f2:	f8cd 9000 	str.w	r9, [sp]
 800f0f6:	a819      	add	r0, sp, #100	; 0x64
 800f0f8:	f003 f92e 	bl	8012358 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f0fc:	4622      	mov	r2, r4
 800f0fe:	4653      	mov	r3, sl
 800f100:	a949      	add	r1, sp, #292	; 0x124
 800f102:	f8cd 8000 	str.w	r8, [sp]
 800f106:	a829      	add	r0, sp, #164	; 0xa4
 800f108:	f003 f926 	bl	8012358 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f10c:	4643      	mov	r3, r8
 800f10e:	4622      	mov	r2, r4
 800f110:	a949      	add	r1, sp, #292	; 0x124
 800f112:	f8cd 9000 	str.w	r9, [sp]
 800f116:	a839      	add	r0, sp, #228	; 0xe4
 800f118:	f003 f91e 	bl	8012358 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800f11c:	42af      	cmp	r7, r5
 800f11e:	af12      	add	r7, sp, #72	; 0x48
 800f120:	bfb7      	itett	lt
 800f122:	2300      	movlt	r3, #0
 800f124:	2301      	movge	r3, #1
 800f126:	ad29      	addlt	r5, sp, #164	; 0xa4
 800f128:	ac19      	addlt	r4, sp, #100	; 0x64
 800f12a:	bfb1      	iteee	lt
 800f12c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f12e:	ad19      	addge	r5, sp, #100	; 0x64
 800f130:	930e      	strge	r3, [sp, #56]	; 0x38
 800f132:	ac29      	addge	r4, sp, #164	; 0xa4
 800f134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f136:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f13a:	e887 0003 	stmia.w	r7, {r0, r1}
 800f13e:	b928      	cbnz	r0, 800f14c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800f140:	4b80      	ldr	r3, [pc, #512]	; (800f344 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800f142:	6818      	ldr	r0, [r3, #0]
 800f144:	6803      	ldr	r3, [r0, #0]
 800f146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f148:	4798      	blx	r3
 800f14a:	6038      	str	r0, [r7, #0]
 800f14c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f14e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f152:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f156:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800f158:	930c      	str	r3, [sp, #48]	; 0x30
 800f15a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f15c:	6963      	ldr	r3, [r4, #20]
 800f15e:	440b      	add	r3, r1
 800f160:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f164:	4408      	add	r0, r1
 800f166:	b200      	sxth	r0, r0
 800f168:	4283      	cmp	r3, r0
 800f16a:	900d      	str	r0, [sp, #52]	; 0x34
 800f16c:	f280 80dd 	bge.w	800f32a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800f170:	428b      	cmp	r3, r1
 800f172:	da08      	bge.n	800f186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f174:	2a00      	cmp	r2, #0
 800f176:	dd06      	ble.n	800f186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f178:	1acb      	subs	r3, r1, r3
 800f17a:	429a      	cmp	r2, r3
 800f17c:	f2c0 80e4 	blt.w	800f348 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800f180:	2b00      	cmp	r3, #0
 800f182:	f300 80e2 	bgt.w	800f34a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800f186:	6967      	ldr	r7, [r4, #20]
 800f188:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f18c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f18e:	443b      	add	r3, r7
 800f190:	461f      	mov	r7, r3
 800f192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f194:	1bdf      	subs	r7, r3, r7
 800f196:	4297      	cmp	r7, r2
 800f198:	bfa8      	it	ge
 800f19a:	4617      	movge	r7, r2
 800f19c:	2f00      	cmp	r7, #0
 800f19e:	f340 8166 	ble.w	800f46e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800f1a2:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f1a4:	6829      	ldr	r1, [r5, #0]
 800f1a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f1aa:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f1ae:	4411      	add	r1, r2
 800f1b0:	6820      	ldr	r0, [r4, #0]
 800f1b2:	4299      	cmp	r1, r3
 800f1b4:	dd1a      	ble.n	800f1ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f1b6:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f1ba:	4402      	add	r2, r0
 800f1bc:	440b      	add	r3, r1
 800f1be:	b21b      	sxth	r3, r3
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	dc13      	bgt.n	800f1ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800f1c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1c6:	a912      	add	r1, sp, #72	; 0x48
 800f1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	9206      	str	r2, [sp, #24]
 800f1d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f1d2:	9500      	str	r5, [sp, #0]
 800f1d4:	9205      	str	r2, [sp, #20]
 800f1d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1d8:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f1dc:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f1de:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f1e2:	aa49      	add	r2, sp, #292	; 0x124
 800f1e4:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800f1e8:	4623      	mov	r3, r4
 800f1ea:	47c8      	blx	r9
 800f1ec:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f1f0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f1f4:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f1f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f1fc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f200:	68a1      	ldr	r1, [r4, #8]
 800f202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f206:	ed94 6a08 	vldr	s12, [r4, #32]
 800f20a:	edd4 6a07 	vldr	s13, [r4, #28]
 800f20e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f212:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f216:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f21a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f21e:	edc4 6a07 	vstr	s13, [r4, #28]
 800f222:	441a      	add	r2, r3
 800f224:	6963      	ldr	r3, [r4, #20]
 800f226:	3301      	adds	r3, #1
 800f228:	6022      	str	r2, [r4, #0]
 800f22a:	6163      	str	r3, [r4, #20]
 800f22c:	69a3      	ldr	r3, [r4, #24]
 800f22e:	3b01      	subs	r3, #1
 800f230:	61a3      	str	r3, [r4, #24]
 800f232:	6923      	ldr	r3, [r4, #16]
 800f234:	440b      	add	r3, r1
 800f236:	68e1      	ldr	r1, [r4, #12]
 800f238:	428b      	cmp	r3, r1
 800f23a:	6123      	str	r3, [r4, #16]
 800f23c:	db15      	blt.n	800f26a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800f23e:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f242:	3201      	adds	r2, #1
 800f244:	1a5b      	subs	r3, r3, r1
 800f246:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f24a:	6022      	str	r2, [r4, #0]
 800f24c:	6123      	str	r3, [r4, #16]
 800f24e:	edc4 6a07 	vstr	s13, [r4, #28]
 800f252:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f256:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f25a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f25e:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f262:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f266:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f26a:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f26e:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f272:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f27a:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f27e:	68a9      	ldr	r1, [r5, #8]
 800f280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f284:	ed95 6a08 	vldr	s12, [r5, #32]
 800f288:	edd5 6a07 	vldr	s13, [r5, #28]
 800f28c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f290:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f294:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f298:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f29c:	edc5 6a07 	vstr	s13, [r5, #28]
 800f2a0:	441a      	add	r2, r3
 800f2a2:	696b      	ldr	r3, [r5, #20]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	602a      	str	r2, [r5, #0]
 800f2a8:	616b      	str	r3, [r5, #20]
 800f2aa:	69ab      	ldr	r3, [r5, #24]
 800f2ac:	3b01      	subs	r3, #1
 800f2ae:	61ab      	str	r3, [r5, #24]
 800f2b0:	692b      	ldr	r3, [r5, #16]
 800f2b2:	440b      	add	r3, r1
 800f2b4:	68e9      	ldr	r1, [r5, #12]
 800f2b6:	428b      	cmp	r3, r1
 800f2b8:	612b      	str	r3, [r5, #16]
 800f2ba:	db15      	blt.n	800f2e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 800f2bc:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f2c0:	3201      	adds	r2, #1
 800f2c2:	1a5b      	subs	r3, r3, r1
 800f2c4:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f2c8:	602a      	str	r2, [r5, #0]
 800f2ca:	612b      	str	r3, [r5, #16]
 800f2cc:	edc5 6a07 	vstr	s13, [r5, #28]
 800f2d0:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f2d4:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f2d8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f2dc:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f2e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2e4:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f2e8:	3f01      	subs	r7, #1
 800f2ea:	e757      	b.n	800f19c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 800f2ec:	4299      	cmp	r1, r3
 800f2ee:	dc13      	bgt.n	800f318 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	da14      	bge.n	800f31e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 800f2f4:	2502      	movs	r5, #2
 800f2f6:	2703      	movs	r7, #3
 800f2f8:	f04f 0800 	mov.w	r8, #0
 800f2fc:	46a9      	mov	r9, r5
 800f2fe:	f04f 0a01 	mov.w	sl, #1
 800f302:	e6ef      	b.n	800f0e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f304:	2501      	movs	r5, #1
 800f306:	2700      	movs	r7, #0
 800f308:	46a9      	mov	r9, r5
 800f30a:	46b8      	mov	r8, r7
 800f30c:	f04f 0a02 	mov.w	sl, #2
 800f310:	e6e8      	b.n	800f0e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 800f312:	2501      	movs	r5, #1
 800f314:	2702      	movs	r7, #2
 800f316:	e6e1      	b.n	800f0dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 800f318:	2500      	movs	r5, #0
 800f31a:	2701      	movs	r7, #1
 800f31c:	e7f4      	b.n	800f308 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 800f31e:	2702      	movs	r7, #2
 800f320:	2503      	movs	r5, #3
 800f322:	f04f 0900 	mov.w	r9, #0
 800f326:	46b8      	mov	r8, r7
 800f328:	e7e9      	b.n	800f2fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 800f32a:	4613      	mov	r3, r2
 800f32c:	e728      	b.n	800f180 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 800f32e:	bf00      	nop
 800f330:	2401a9b0 	.word	0x2401a9b0
 800f334:	fffd8f01 	.word	0xfffd8f01
 800f338:	00027100 	.word	0x00027100
 800f33c:	0004e1ff 	.word	0x0004e1ff
 800f340:	0004e1fe 	.word	0x0004e1fe
 800f344:	2401a9b8 	.word	0x2401a9b8
 800f348:	4613      	mov	r3, r2
 800f34a:	992b      	ldr	r1, [sp, #172]	; 0xac
 800f34c:	469e      	mov	lr, r3
 800f34e:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 800f350:	469c      	mov	ip, r3
 800f352:	9111      	str	r1, [sp, #68]	; 0x44
 800f354:	f04f 0900 	mov.w	r9, #0
 800f358:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 800f35c:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 800f360:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 800f364:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 800f368:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 800f36c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800f370:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 800f374:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 800f378:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 800f37c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 800f380:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 800f384:	f1bc 0f00 	cmp.w	ip, #0
 800f388:	d147      	bne.n	800f41a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 800f38a:	eb03 0c07 	add.w	ip, r3, r7
 800f38e:	1ad7      	subs	r7, r2, r3
 800f390:	f1b9 0f00 	cmp.w	r9, #0
 800f394:	d009      	beq.n	800f3aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 800f396:	9029      	str	r0, [sp, #164]	; 0xa4
 800f398:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800f39c:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 800f3a0:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 800f3a4:	912d      	str	r1, [sp, #180]	; 0xb4
 800f3a6:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 800f3aa:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f3ac:	f04f 0800 	mov.w	r8, #0
 800f3b0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f3b4:	9111      	str	r1, [sp, #68]	; 0x44
 800f3b6:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f3ba:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f3be:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f3c2:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f3c6:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f3ca:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f3ce:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f3d2:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f3d6:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f3da:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f3de:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f3e2:	f1be 0f00 	cmp.w	lr, #0
 800f3e6:	d031      	beq.n	800f44c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 800f3e8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f3ea:	4450      	add	r0, sl
 800f3ec:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f3f0:	4431      	add	r1, r6
 800f3f2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f3f6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f3fa:	4549      	cmp	r1, r9
 800f3fc:	db08      	blt.n	800f410 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 800f3fe:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f402:	3001      	adds	r0, #1
 800f404:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f408:	eba1 0109 	sub.w	r1, r1, r9
 800f40c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f410:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f414:	f04f 0801 	mov.w	r8, #1
 800f418:	e7e3      	b.n	800f3e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 800f41a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800f41c:	4450      	add	r0, sl
 800f41e:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f422:	4431      	add	r1, r6
 800f424:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f428:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f42c:	4541      	cmp	r1, r8
 800f42e:	db08      	blt.n	800f442 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 800f430:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f434:	3001      	adds	r0, #1
 800f436:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f43a:	eba1 0108 	sub.w	r1, r1, r8
 800f43e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f442:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f446:	f04f 0901 	mov.w	r9, #1
 800f44a:	e79b      	b.n	800f384 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 800f44c:	449c      	add	ip, r3
 800f44e:	1aff      	subs	r7, r7, r3
 800f450:	f1b8 0f00 	cmp.w	r8, #0
 800f454:	d009      	beq.n	800f46a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 800f456:	9019      	str	r0, [sp, #100]	; 0x64
 800f458:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f45c:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f460:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f464:	911d      	str	r1, [sp, #116]	; 0x74
 800f466:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f46a:	1ad2      	subs	r2, r2, r3
 800f46c:	e68b      	b.n	800f186 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800f46e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f470:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800f472:	2b00      	cmp	r3, #0
 800f474:	f000 80d1 	beq.w	800f61a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 800f478:	ad19      	add	r5, sp, #100	; 0x64
 800f47a:	ac39      	add	r4, sp, #228	; 0xe4
 800f47c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f47e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800f482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f486:	930c      	str	r3, [sp, #48]	; 0x30
 800f488:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f48a:	6963      	ldr	r3, [r4, #20]
 800f48c:	440b      	add	r3, r1
 800f48e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800f492:	4408      	add	r0, r1
 800f494:	b200      	sxth	r0, r0
 800f496:	4283      	cmp	r3, r0
 800f498:	900d      	str	r0, [sp, #52]	; 0x34
 800f49a:	f280 80c1 	bge.w	800f620 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 800f49e:	428b      	cmp	r3, r1
 800f4a0:	da08      	bge.n	800f4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f4a2:	2a00      	cmp	r2, #0
 800f4a4:	dd06      	ble.n	800f4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f4a6:	1acb      	subs	r3, r1, r3
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	f2c0 80bb 	blt.w	800f624 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	f300 80b9 	bgt.w	800f626 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 800f4b4:	6967      	ldr	r7, [r4, #20]
 800f4b6:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800f4ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4bc:	443b      	add	r3, r7
 800f4be:	461f      	mov	r7, r3
 800f4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4c2:	1bdf      	subs	r7, r3, r7
 800f4c4:	4297      	cmp	r7, r2
 800f4c6:	bfa8      	it	ge
 800f4c8:	4617      	movge	r7, r2
 800f4ca:	2f00      	cmp	r7, #0
 800f4cc:	f340 813c 	ble.w	800f748 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 800f4d0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800f4d2:	6829      	ldr	r1, [r5, #0]
 800f4d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f4d8:	f9bb 3000 	ldrsh.w	r3, [fp]
 800f4dc:	4411      	add	r1, r2
 800f4de:	6820      	ldr	r0, [r4, #0]
 800f4e0:	4299      	cmp	r1, r3
 800f4e2:	dd1a      	ble.n	800f51a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f4e4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800f4e8:	4402      	add	r2, r0
 800f4ea:	440b      	add	r3, r1
 800f4ec:	b21b      	sxth	r3, r3
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	dc13      	bgt.n	800f51a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 800f4f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f4f4:	a912      	add	r1, sp, #72	; 0x48
 800f4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f4f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	9206      	str	r2, [sp, #24]
 800f4fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f500:	9500      	str	r5, [sp, #0]
 800f502:	9205      	str	r2, [sp, #20]
 800f504:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f506:	e9cd b203 	strd	fp, r2, [sp, #12]
 800f50a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800f50c:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800f510:	aa49      	add	r2, sp, #292	; 0x124
 800f512:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800f516:	4623      	mov	r3, r4
 800f518:	47c8      	blx	r9
 800f51a:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f51e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f522:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800f526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f52a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800f52e:	68a1      	ldr	r1, [r4, #8]
 800f530:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f534:	ed94 6a08 	vldr	s12, [r4, #32]
 800f538:	edd4 6a07 	vldr	s13, [r4, #28]
 800f53c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f540:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f544:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f548:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f54c:	edc4 6a07 	vstr	s13, [r4, #28]
 800f550:	441a      	add	r2, r3
 800f552:	6963      	ldr	r3, [r4, #20]
 800f554:	3301      	adds	r3, #1
 800f556:	6022      	str	r2, [r4, #0]
 800f558:	6163      	str	r3, [r4, #20]
 800f55a:	69a3      	ldr	r3, [r4, #24]
 800f55c:	3b01      	subs	r3, #1
 800f55e:	61a3      	str	r3, [r4, #24]
 800f560:	6923      	ldr	r3, [r4, #16]
 800f562:	440b      	add	r3, r1
 800f564:	68e1      	ldr	r1, [r4, #12]
 800f566:	428b      	cmp	r3, r1
 800f568:	6123      	str	r3, [r4, #16]
 800f56a:	db15      	blt.n	800f598 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 800f56c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800f570:	3201      	adds	r2, #1
 800f572:	1a5b      	subs	r3, r3, r1
 800f574:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f578:	6022      	str	r2, [r4, #0]
 800f57a:	6123      	str	r3, [r4, #16]
 800f57c:	edc4 6a07 	vstr	s13, [r4, #28]
 800f580:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800f584:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f588:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800f58c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f590:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f594:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800f598:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800f59c:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800f5a0:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800f5a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5a8:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 800f5ac:	68a9      	ldr	r1, [r5, #8]
 800f5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5b2:	ed95 6a08 	vldr	s12, [r5, #32]
 800f5b6:	edd5 6a07 	vldr	s13, [r5, #28]
 800f5ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f5be:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f5c2:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f5c6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5ca:	edc5 6a07 	vstr	s13, [r5, #28]
 800f5ce:	441a      	add	r2, r3
 800f5d0:	696b      	ldr	r3, [r5, #20]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	602a      	str	r2, [r5, #0]
 800f5d6:	616b      	str	r3, [r5, #20]
 800f5d8:	69ab      	ldr	r3, [r5, #24]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	61ab      	str	r3, [r5, #24]
 800f5de:	692b      	ldr	r3, [r5, #16]
 800f5e0:	440b      	add	r3, r1
 800f5e2:	68e9      	ldr	r1, [r5, #12]
 800f5e4:	428b      	cmp	r3, r1
 800f5e6:	612b      	str	r3, [r5, #16]
 800f5e8:	db15      	blt.n	800f616 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 800f5ea:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 800f5ee:	3201      	adds	r2, #1
 800f5f0:	1a5b      	subs	r3, r3, r1
 800f5f2:	ee76 6a26 	vadd.f32	s13, s12, s13
 800f5f6:	602a      	str	r2, [r5, #0]
 800f5f8:	612b      	str	r3, [r5, #16]
 800f5fa:	edc5 6a07 	vstr	s13, [r5, #28]
 800f5fe:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 800f602:	ee36 7a87 	vadd.f32	s14, s13, s14
 800f606:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 800f60a:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 800f60e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f612:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 800f616:	3f01      	subs	r7, #1
 800f618:	e757      	b.n	800f4ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 800f61a:	ad39      	add	r5, sp, #228	; 0xe4
 800f61c:	ac19      	add	r4, sp, #100	; 0x64
 800f61e:	e72d      	b.n	800f47c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 800f620:	4613      	mov	r3, r2
 800f622:	e744      	b.n	800f4ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 800f624:	4613      	mov	r3, r2
 800f626:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 800f628:	469e      	mov	lr, r3
 800f62a:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 800f62e:	461f      	mov	r7, r3
 800f630:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 800f634:	f04f 0900 	mov.w	r9, #0
 800f638:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 800f63c:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 800f640:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 800f644:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 800f648:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 800f64c:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800f64e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 800f652:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 800f656:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 800f65a:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 800f65e:	960e      	str	r6, [sp, #56]	; 0x38
 800f660:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 800f664:	2f00      	cmp	r7, #0
 800f666:	d146      	bne.n	800f6f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 800f668:	449c      	add	ip, r3
 800f66a:	1ad7      	subs	r7, r2, r3
 800f66c:	f1b9 0f00 	cmp.w	r9, #0
 800f670:	d009      	beq.n	800f686 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 800f672:	9039      	str	r0, [sp, #228]	; 0xe4
 800f674:	913d      	str	r1, [sp, #244]	; 0xf4
 800f676:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 800f67a:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 800f67e:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 800f682:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 800f686:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800f688:	f04f 0800 	mov.w	r8, #0
 800f68c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 800f690:	910e      	str	r1, [sp, #56]	; 0x38
 800f692:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 800f696:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 800f69a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 800f69e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 800f6a2:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800f6a6:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 800f6aa:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 800f6ae:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 800f6b2:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 800f6b6:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 800f6ba:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 800f6be:	f1be 0f00 	cmp.w	lr, #0
 800f6c2:	d030      	beq.n	800f726 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 800f6c4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f6c6:	4450      	add	r0, sl
 800f6c8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800f6cc:	4431      	add	r1, r6
 800f6ce:	ee37 7a04 	vadd.f32	s14, s14, s8
 800f6d2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800f6d6:	4549      	cmp	r1, r9
 800f6d8:	db08      	blt.n	800f6ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 800f6da:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f6de:	3001      	adds	r0, #1
 800f6e0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800f6e4:	eba1 0109 	sub.w	r1, r1, r9
 800f6e8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f6ec:	f10e 3eff 	add.w	lr, lr, #4294967295
 800f6f0:	f04f 0801 	mov.w	r8, #1
 800f6f4:	e7e3      	b.n	800f6be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 800f6f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f6f8:	4450      	add	r0, sl
 800f6fa:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f6fe:	4431      	add	r1, r6
 800f700:	ee77 7a84 	vadd.f32	s15, s15, s8
 800f704:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800f708:	4541      	cmp	r1, r8
 800f70a:	db08      	blt.n	800f71e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 800f70c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f710:	3001      	adds	r0, #1
 800f712:	ee37 7a25 	vadd.f32	s14, s14, s11
 800f716:	eba1 0108 	sub.w	r1, r1, r8
 800f71a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f71e:	3f01      	subs	r7, #1
 800f720:	f04f 0901 	mov.w	r9, #1
 800f724:	e79e      	b.n	800f664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 800f726:	449c      	add	ip, r3
 800f728:	1aff      	subs	r7, r7, r3
 800f72a:	f1b8 0f00 	cmp.w	r8, #0
 800f72e:	d009      	beq.n	800f744 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 800f730:	9019      	str	r0, [sp, #100]	; 0x64
 800f732:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 800f736:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 800f73a:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 800f73e:	911d      	str	r1, [sp, #116]	; 0x74
 800f740:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 800f744:	1ad2      	subs	r2, r2, r3
 800f746:	e6b5      	b.n	800f4b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 800f748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	b923      	cbnz	r3, 800f758 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800f74e:	4b04      	ldr	r3, [pc, #16]	; (800f760 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 800f750:	6818      	ldr	r0, [r3, #0]
 800f752:	6803      	ldr	r3, [r0, #0]
 800f754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f756:	4798      	blx	r3
 800f758:	b05b      	add	sp, #364	; 0x16c
 800f75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f75e:	bf00      	nop
 800f760:	2401a9b8 	.word	0x2401a9b8

0800f764 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 800f764:	2b03      	cmp	r3, #3
 800f766:	d818      	bhi.n	800f79a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 800f768:	e8df f003 	tbb	[pc, r3]
 800f76c:	130d0602 	.word	0x130d0602
 800f770:	f9b0 2000 	ldrsh.w	r2, [r0]
 800f774:	1850      	adds	r0, r2, r1
 800f776:	4770      	bx	lr
 800f778:	8803      	ldrh	r3, [r0, #0]
 800f77a:	8880      	ldrh	r0, [r0, #4]
 800f77c:	4418      	add	r0, r3
 800f77e:	b200      	sxth	r0, r0
 800f780:	1a80      	subs	r0, r0, r2
 800f782:	3801      	subs	r0, #1
 800f784:	4770      	bx	lr
 800f786:	8803      	ldrh	r3, [r0, #0]
 800f788:	8880      	ldrh	r0, [r0, #4]
 800f78a:	4418      	add	r0, r3
 800f78c:	b200      	sxth	r0, r0
 800f78e:	1a40      	subs	r0, r0, r1
 800f790:	e7f7      	b.n	800f782 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 800f792:	f9b0 0000 	ldrsh.w	r0, [r0]
 800f796:	4410      	add	r0, r2
 800f798:	4770      	bx	lr
 800f79a:	2000      	movs	r0, #0
 800f79c:	4770      	bx	lr

0800f79e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 800f79e:	2b03      	cmp	r3, #3
 800f7a0:	d817      	bhi.n	800f7d2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 800f7a2:	e8df f003 	tbb	[pc, r3]
 800f7a6:	0602      	.short	0x0602
 800f7a8:	1009      	.short	0x1009
 800f7aa:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800f7ae:	1850      	adds	r0, r2, r1
 800f7b0:	4770      	bx	lr
 800f7b2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800f7b6:	e7fa      	b.n	800f7ae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 800f7b8:	8843      	ldrh	r3, [r0, #2]
 800f7ba:	88c0      	ldrh	r0, [r0, #6]
 800f7bc:	4418      	add	r0, r3
 800f7be:	b200      	sxth	r0, r0
 800f7c0:	1a80      	subs	r0, r0, r2
 800f7c2:	3801      	subs	r0, #1
 800f7c4:	4770      	bx	lr
 800f7c6:	8843      	ldrh	r3, [r0, #2]
 800f7c8:	88c0      	ldrh	r0, [r0, #6]
 800f7ca:	4418      	add	r0, r3
 800f7cc:	b200      	sxth	r0, r0
 800f7ce:	1a40      	subs	r0, r0, r1
 800f7d0:	e7f7      	b.n	800f7c2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 800f7d2:	2000      	movs	r0, #0
 800f7d4:	4770      	bx	lr
	...

0800f7d8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 800f7d8:	4b01      	ldr	r3, [pc, #4]	; (800f7e0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]
 800f7de:	4770      	bx	lr
 800f7e0:	2401a9c0 	.word	0x2401a9c0

0800f7e4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	b1c8      	cbz	r0, 800f81c <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 800f7e8:	0c02      	lsrs	r2, r0, #16
 800f7ea:	0412      	lsls	r2, r2, #16
 800f7ec:	b9a2      	cbnz	r2, 800f818 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 800f7ee:	0403      	lsls	r3, r0, #16
 800f7f0:	2010      	movs	r0, #16
 800f7f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f7f6:	bf04      	itt	eq
 800f7f8:	021b      	lsleq	r3, r3, #8
 800f7fa:	3008      	addeq	r0, #8
 800f7fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f800:	bf04      	itt	eq
 800f802:	011b      	lsleq	r3, r3, #4
 800f804:	3004      	addeq	r0, #4
 800f806:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f80a:	bf04      	itt	eq
 800f80c:	009b      	lsleq	r3, r3, #2
 800f80e:	3002      	addeq	r0, #2
 800f810:	2b00      	cmp	r3, #0
 800f812:	db04      	blt.n	800f81e <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 800f814:	3001      	adds	r0, #1
 800f816:	4770      	bx	lr
 800f818:	2000      	movs	r0, #0
 800f81a:	e7ea      	b.n	800f7f2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 800f81c:	2020      	movs	r0, #32
 800f81e:	4770      	bx	lr

0800f820 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 800f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	b087      	sub	sp, #28
 800f826:	460d      	mov	r5, r1
 800f828:	4616      	mov	r6, r2
 800f82a:	4698      	mov	r8, r3
 800f82c:	4601      	mov	r1, r0
 800f82e:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 800f832:	b120      	cbz	r0, 800f83e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800f834:	b11a      	cbz	r2, 800f83e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800f836:	2d1f      	cmp	r5, #31
 800f838:	d801      	bhi.n	800f83e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 800f83a:	2b1f      	cmp	r3, #31
 800f83c:	d904      	bls.n	800f848 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 800f83e:	2000      	movs	r0, #0
 800f840:	6038      	str	r0, [r7, #0]
 800f842:	b007      	add	sp, #28
 800f844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f848:	b97d      	cbnz	r5, 800f86a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 800f84a:	b143      	cbz	r3, 800f85e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 800f84c:	4602      	mov	r2, r0
 800f84e:	462b      	mov	r3, r5
 800f850:	4641      	mov	r1, r8
 800f852:	4630      	mov	r0, r6
 800f854:	e9cd 4700 	strd	r4, r7, [sp]
 800f858:	f7ff ffe2 	bl	800f820 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f85c:	e7f1      	b.n	800f842 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f85e:	f04f 33ff 	mov.w	r3, #4294967295
 800f862:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f866:	603b      	str	r3, [r7, #0]
 800f868:	e7eb      	b.n	800f842 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f86a:	fa32 fa05 	lsrs.w	sl, r2, r5
 800f86e:	d106      	bne.n	800f87e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 800f870:	4346      	muls	r6, r0
 800f872:	fbb6 f0f4 	udiv	r0, r6, r4
 800f876:	fb04 6610 	mls	r6, r4, r0, r6
 800f87a:	603e      	str	r6, [r7, #0]
 800f87c:	e7e1      	b.n	800f842 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 800f87e:	2201      	movs	r2, #1
 800f880:	fa00 fb05 	lsl.w	fp, r0, r5
 800f884:	40aa      	lsls	r2, r5
 800f886:	fbbb f9f4 	udiv	r9, fp, r4
 800f88a:	3a01      	subs	r2, #1
 800f88c:	fb0a f309 	mul.w	r3, sl, r9
 800f890:	fb04 b919 	mls	r9, r4, r9, fp
 800f894:	4016      	ands	r6, r2
 800f896:	9303      	str	r3, [sp, #12]
 800f898:	4630      	mov	r0, r6
 800f89a:	f7ff ffa3 	bl	800f7e4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f89e:	462b      	mov	r3, r5
 800f8a0:	460a      	mov	r2, r1
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	4630      	mov	r0, r6
 800f8a6:	e9cd 4700 	strd	r4, r7, [sp]
 800f8aa:	f7ff ffb9 	bl	800f820 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	4648      	mov	r0, r9
 800f8b2:	eb05 0108 	add.w	r1, r5, r8
 800f8b6:	f7ff ff95 	bl	800f7e4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f8ba:	ab05      	add	r3, sp, #20
 800f8bc:	464a      	mov	r2, r9
 800f8be:	e9cd 4300 	strd	r4, r3, [sp]
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	4650      	mov	r0, sl
 800f8c6:	f7ff ffab 	bl	800f820 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f8ca:	6839      	ldr	r1, [r7, #0]
 800f8cc:	9a05      	ldr	r2, [sp, #20]
 800f8ce:	9b03      	ldr	r3, [sp, #12]
 800f8d0:	4411      	add	r1, r2
 800f8d2:	fbb1 f2f4 	udiv	r2, r1, r4
 800f8d6:	18d3      	adds	r3, r2, r3
 800f8d8:	fb04 1412 	mls	r4, r4, r2, r1
 800f8dc:	441e      	add	r6, r3
 800f8de:	603c      	str	r4, [r7, #0]
 800f8e0:	4430      	add	r0, r6
 800f8e2:	e7ae      	b.n	800f842 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

0800f8e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 800f8e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8e8:	b085      	sub	sp, #20
 800f8ea:	f1b0 0900 	subs.w	r9, r0, #0
 800f8ee:	461d      	mov	r5, r3
 800f8f0:	4617      	mov	r7, r2
 800f8f2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f8f4:	bfbb      	ittet	lt
 800f8f6:	f1c9 0900 	rsblt	r9, r9, #0
 800f8fa:	f04f 36ff 	movlt.w	r6, #4294967295
 800f8fe:	2601      	movge	r6, #1
 800f900:	6823      	ldrlt	r3, [r4, #0]
 800f902:	bfbc      	itt	lt
 800f904:	425b      	neglt	r3, r3
 800f906:	6023      	strlt	r3, [r4, #0]
 800f908:	2a00      	cmp	r2, #0
 800f90a:	da04      	bge.n	800f916 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 800f90c:	6823      	ldr	r3, [r4, #0]
 800f90e:	4257      	negs	r7, r2
 800f910:	4276      	negs	r6, r6
 800f912:	425b      	negs	r3, r3
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	2d00      	cmp	r5, #0
 800f918:	4638      	mov	r0, r7
 800f91a:	bfba      	itte	lt
 800f91c:	426d      	neglt	r5, r5
 800f91e:	f04f 38ff 	movlt.w	r8, #4294967295
 800f922:	f04f 0801 	movge.w	r8, #1
 800f926:	f7ff ff5d 	bl	800f7e4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 800f92a:	ab03      	add	r3, sp, #12
 800f92c:	463a      	mov	r2, r7
 800f92e:	e9cd 5300 	strd	r5, r3, [sp]
 800f932:	4603      	mov	r3, r0
 800f934:	4648      	mov	r0, r9
 800f936:	f7ff ff73 	bl	800f820 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	9a03      	ldr	r2, [sp, #12]
 800f93e:	4546      	cmp	r6, r8
 800f940:	441a      	add	r2, r3
 800f942:	fb92 f3f5 	sdiv	r3, r2, r5
 800f946:	4418      	add	r0, r3
 800f948:	fb05 2313 	mls	r3, r5, r3, r2
 800f94c:	bf18      	it	ne
 800f94e:	4240      	negne	r0, r0
 800f950:	1c72      	adds	r2, r6, #1
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	d105      	bne.n	800f962 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 800f956:	2b00      	cmp	r3, #0
 800f958:	f1c3 0200 	rsb	r2, r3, #0
 800f95c:	db0b      	blt.n	800f976 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 800f95e:	6022      	str	r2, [r4, #0]
 800f960:	e006      	b.n	800f970 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f962:	2e01      	cmp	r6, #1
 800f964:	d104      	bne.n	800f970 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f966:	2b00      	cmp	r3, #0
 800f968:	da02      	bge.n	800f970 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 800f96a:	442b      	add	r3, r5
 800f96c:	3801      	subs	r0, #1
 800f96e:	6023      	str	r3, [r4, #0]
 800f970:	b005      	add	sp, #20
 800f972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f976:	3801      	subs	r0, #1
 800f978:	1b52      	subs	r2, r2, r5
 800f97a:	e7f0      	b.n	800f95e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

0800f97c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 800f97c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800f980:	4c1c      	ldr	r4, [pc, #112]	; (800f9f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 800f982:	4605      	mov	r5, r0
 800f984:	6807      	ldr	r7, [r0, #0]
 800f986:	69a3      	ldr	r3, [r4, #24]
 800f988:	b92b      	cbnz	r3, 800f996 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 800f98a:	6840      	ldr	r0, [r0, #4]
 800f98c:	e9c5 7000 	strd	r7, r0, [r5]
 800f990:	b004      	add	sp, #16
 800f992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f996:	f04f 0802 	mov.w	r8, #2
 800f99a:	68a2      	ldr	r2, [r4, #8]
 800f99c:	ae04      	add	r6, sp, #16
 800f99e:	6820      	ldr	r0, [r4, #0]
 800f9a0:	fb93 f1f8 	sdiv	r1, r3, r8
 800f9a4:	440a      	add	r2, r1
 800f9a6:	69e1      	ldr	r1, [r4, #28]
 800f9a8:	f846 2d04 	str.w	r2, [r6, #-4]!
 800f9ac:	463a      	mov	r2, r7
 800f9ae:	9600      	str	r6, [sp, #0]
 800f9b0:	f7ff ff98 	bl	800f8e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f9b4:	69a3      	ldr	r3, [r4, #24]
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	686a      	ldr	r2, [r5, #4]
 800f9ba:	6a21      	ldr	r1, [r4, #32]
 800f9bc:	9600      	str	r6, [sp, #0]
 800f9be:	6860      	ldr	r0, [r4, #4]
 800f9c0:	f7ff ff90 	bl	800f8e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f9c4:	69a3      	ldr	r3, [r4, #24]
 800f9c6:	6962      	ldr	r2, [r4, #20]
 800f9c8:	4407      	add	r7, r0
 800f9ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f9cc:	9600      	str	r6, [sp, #0]
 800f9ce:	68e0      	ldr	r0, [r4, #12]
 800f9d0:	fb93 f8f8 	sdiv	r8, r3, r8
 800f9d4:	4442      	add	r2, r8
 800f9d6:	9203      	str	r2, [sp, #12]
 800f9d8:	682a      	ldr	r2, [r5, #0]
 800f9da:	f7ff ff83 	bl	800f8e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f9de:	4680      	mov	r8, r0
 800f9e0:	9600      	str	r6, [sp, #0]
 800f9e2:	69a3      	ldr	r3, [r4, #24]
 800f9e4:	686a      	ldr	r2, [r5, #4]
 800f9e6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f9e8:	6920      	ldr	r0, [r4, #16]
 800f9ea:	f7ff ff7b 	bl	800f8e4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 800f9ee:	4440      	add	r0, r8
 800f9f0:	e7cc      	b.n	800f98c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 800f9f2:	bf00      	nop
 800f9f4:	2401a9c4 	.word	0x2401a9c4

0800f9f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 800f9f8:	4b07      	ldr	r3, [pc, #28]	; (800fa18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d109      	bne.n	800fa14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 800fa00:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fa04:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fa08:	8003      	strh	r3, [r0, #0]
 800fa0a:	4b04      	ldr	r3, [pc, #16]	; (800fa1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 800fa0c:	881b      	ldrh	r3, [r3, #0]
 800fa0e:	3b01      	subs	r3, #1
 800fa10:	1a9b      	subs	r3, r3, r2
 800fa12:	800b      	strh	r3, [r1, #0]
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	2401a9b0 	.word	0x2401a9b0
 800fa1c:	2401a9ac 	.word	0x2401a9ac

0800fa20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 800fa20:	4b07      	ldr	r3, [pc, #28]	; (800fa40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 800fa22:	b510      	push	{r4, lr}
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d108      	bne.n	800fa3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 800fa2a:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 800fa2c:	880c      	ldrh	r4, [r1, #0]
 800fa2e:	881b      	ldrh	r3, [r3, #0]
 800fa30:	f9b0 2000 	ldrsh.w	r2, [r0]
 800fa34:	3b01      	subs	r3, #1
 800fa36:	1b1b      	subs	r3, r3, r4
 800fa38:	8003      	strh	r3, [r0, #0]
 800fa3a:	800a      	strh	r2, [r1, #0]
 800fa3c:	bd10      	pop	{r4, pc}
 800fa3e:	bf00      	nop
 800fa40:	2401a9b0 	.word	0x2401a9b0
 800fa44:	2401a9ac 	.word	0x2401a9ac

0800fa48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 800fa48:	4b0a      	ldr	r3, [pc, #40]	; (800fa74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 800fa4a:	b510      	push	{r4, lr}
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d10e      	bne.n	800fa70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 800fa52:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 800fa56:	8843      	ldrh	r3, [r0, #2]
 800fa58:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fa5c:	18ca      	adds	r2, r1, r3
 800fa5e:	4b06      	ldr	r3, [pc, #24]	; (800fa78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 800fa60:	8044      	strh	r4, [r0, #2]
 800fa62:	881b      	ldrh	r3, [r3, #0]
 800fa64:	1a9b      	subs	r3, r3, r2
 800fa66:	8003      	strh	r3, [r0, #0]
 800fa68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fa6c:	8081      	strh	r1, [r0, #4]
 800fa6e:	80c3      	strh	r3, [r0, #6]
 800fa70:	bd10      	pop	{r4, pc}
 800fa72:	bf00      	nop
 800fa74:	2401a9b0 	.word	0x2401a9b0
 800fa78:	2401a9ac 	.word	0x2401a9ac

0800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 800fa7c:	4b08      	ldr	r3, [pc, #32]	; (800faa0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d10c      	bne.n	800fa9e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 800fa84:	8803      	ldrh	r3, [r0, #0]
 800fa86:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 800fa8a:	8842      	ldrh	r2, [r0, #2]
 800fa8c:	8002      	strh	r2, [r0, #0]
 800fa8e:	185a      	adds	r2, r3, r1
 800fa90:	4b04      	ldr	r3, [pc, #16]	; (800faa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 800fa92:	881b      	ldrh	r3, [r3, #0]
 800fa94:	1a9b      	subs	r3, r3, r2
 800fa96:	8043      	strh	r3, [r0, #2]
 800fa98:	88c3      	ldrh	r3, [r0, #6]
 800fa9a:	80c1      	strh	r1, [r0, #6]
 800fa9c:	8083      	strh	r3, [r0, #4]
 800fa9e:	4770      	bx	lr
 800faa0:	2401a9b0 	.word	0x2401a9b0
 800faa4:	2401a9ac 	.word	0x2401a9ac

0800faa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 800faa8:	4b07      	ldr	r3, [pc, #28]	; (800fac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 800faaa:	b510      	push	{r4, lr}
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	2b01      	cmp	r3, #1
 800fab0:	d108      	bne.n	800fac4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 800fab2:	f9b1 3000 	ldrsh.w	r3, [r1]
 800fab6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800faba:	8003      	strh	r3, [r0, #0]
 800fabc:	8893      	ldrh	r3, [r2, #4]
 800fabe:	3b01      	subs	r3, #1
 800fac0:	1b1b      	subs	r3, r3, r4
 800fac2:	800b      	strh	r3, [r1, #0]
 800fac4:	bd10      	pop	{r4, pc}
 800fac6:	bf00      	nop
 800fac8:	2401a9b0 	.word	0x2401a9b0

0800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 800facc:	4b0a      	ldr	r3, [pc, #40]	; (800faf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 800face:	460a      	mov	r2, r1
 800fad0:	b510      	push	{r4, lr}
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d10d      	bne.n	800faf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 800fad8:	8881      	ldrh	r1, [r0, #4]
 800fada:	8803      	ldrh	r3, [r0, #0]
 800fadc:	440b      	add	r3, r1
 800fade:	4601      	mov	r1, r0
 800fae0:	3b01      	subs	r3, #1
 800fae2:	f821 3b02 	strh.w	r3, [r1], #2
 800fae6:	f7ff ffdf 	bl	800faa8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 800faea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800faee:	88c2      	ldrh	r2, [r0, #6]
 800faf0:	80c3      	strh	r3, [r0, #6]
 800faf2:	8082      	strh	r2, [r0, #4]
 800faf4:	bd10      	pop	{r4, pc}
 800faf6:	bf00      	nop
 800faf8:	2401a9b0 	.word	0x2401a9b0

0800fafc <_ZN8touchgfx11Application13requestRedrawEv>:
 800fafc:	4b06      	ldr	r3, [pc, #24]	; (800fb18 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 800fafe:	2100      	movs	r1, #0
 800fb00:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb04:	4b05      	ldr	r3, [pc, #20]	; (800fb1c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 800fb06:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 800fb0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb0e:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 800fb12:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 800fb16:	4770      	bx	lr
 800fb18:	2401a9ac 	.word	0x2401a9ac
 800fb1c:	2401a9ae 	.word	0x2401a9ae

0800fb20 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 800fb20:	4b03      	ldr	r3, [pc, #12]	; (800fb30 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 800fb22:	6818      	ldr	r0, [r3, #0]
 800fb24:	b110      	cbz	r0, 800fb2c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 800fb26:	6803      	ldr	r3, [r0, #0]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	4718      	bx	r3
 800fb2c:	4770      	bx	lr
 800fb2e:	bf00      	nop
 800fb30:	2401a9f4 	.word	0x2401a9f4

0800fb34 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 800fb34:	4770      	bx	lr
	...

0800fb38 <_ZN8touchgfx11Application4drawEv>:
 800fb38:	4b09      	ldr	r3, [pc, #36]	; (800fb60 <_ZN8touchgfx11Application4drawEv+0x28>)
 800fb3a:	b507      	push	{r0, r1, r2, lr}
 800fb3c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb40:	2100      	movs	r1, #0
 800fb42:	4b08      	ldr	r3, [pc, #32]	; (800fb64 <_ZN8touchgfx11Application4drawEv+0x2c>)
 800fb44:	9100      	str	r1, [sp, #0]
 800fb46:	4669      	mov	r1, sp
 800fb48:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb4c:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fb50:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fb54:	6803      	ldr	r3, [r0, #0]
 800fb56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fb58:	4798      	blx	r3
 800fb5a:	b003      	add	sp, #12
 800fb5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb60:	2401a9ac 	.word	0x2401a9ac
 800fb64:	2401a9ae 	.word	0x2401a9ae

0800fb68 <_ZN8touchgfx11Application10invalidateEv>:
 800fb68:	4b09      	ldr	r3, [pc, #36]	; (800fb90 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	2100      	movs	r1, #0
 800fb6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fb72:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 800fb74:	f8ad 2004 	strh.w	r2, [sp, #4]
 800fb78:	aa02      	add	r2, sp, #8
 800fb7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fb7e:	9100      	str	r1, [sp, #0]
 800fb80:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fb84:	6803      	ldr	r3, [r0, #0]
 800fb86:	e912 0006 	ldmdb	r2, {r1, r2}
 800fb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8c:	b002      	add	sp, #8
 800fb8e:	4718      	bx	r3
 800fb90:	2401a9ac 	.word	0x2401a9ac
 800fb94:	2401a9ae 	.word	0x2401a9ae

0800fb98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 800fb98:	4b03      	ldr	r3, [pc, #12]	; (800fba8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 800fb9a:	6818      	ldr	r0, [r3, #0]
 800fb9c:	b110      	cbz	r0, 800fba4 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 800fb9e:	6803      	ldr	r3, [r0, #0]
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	4718      	bx	r3
 800fba4:	4770      	bx	lr
 800fba6:	bf00      	nop
 800fba8:	2401a9f4 	.word	0x2401a9f4

0800fbac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 800fbac:	4b03      	ldr	r3, [pc, #12]	; (800fbbc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 800fbae:	6818      	ldr	r0, [r3, #0]
 800fbb0:	b110      	cbz	r0, 800fbb8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 800fbb2:	6803      	ldr	r3, [r0, #0]
 800fbb4:	6a1b      	ldr	r3, [r3, #32]
 800fbb6:	4718      	bx	r3
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	2401a9f4 	.word	0x2401a9f4

0800fbc0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 800fbc6:	4770      	bx	lr

0800fbc8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 800fbc8:	4b03      	ldr	r3, [pc, #12]	; (800fbd8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 800fbca:	6818      	ldr	r0, [r3, #0]
 800fbcc:	b110      	cbz	r0, 800fbd4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 800fbce:	6803      	ldr	r3, [r0, #0]
 800fbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd2:	4718      	bx	r3
 800fbd4:	4770      	bx	lr
 800fbd6:	bf00      	nop
 800fbd8:	2401a9f4 	.word	0x2401a9f4

0800fbdc <_ZNK8touchgfx4Rect9intersectERKS0_>:
 800fbdc:	b510      	push	{r4, lr}
 800fbde:	f9b1 4000 	ldrsh.w	r4, [r1]
 800fbe2:	888a      	ldrh	r2, [r1, #4]
 800fbe4:	f9b0 3000 	ldrsh.w	r3, [r0]
 800fbe8:	4422      	add	r2, r4
 800fbea:	b212      	sxth	r2, r2
 800fbec:	4293      	cmp	r3, r2
 800fbee:	da15      	bge.n	800fc1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fbf0:	8882      	ldrh	r2, [r0, #4]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	b21b      	sxth	r3, r3
 800fbf6:	429c      	cmp	r4, r3
 800fbf8:	da10      	bge.n	800fc1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fbfa:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800fbfe:	88c9      	ldrh	r1, [r1, #6]
 800fc00:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800fc04:	4419      	add	r1, r3
 800fc06:	b209      	sxth	r1, r1
 800fc08:	428a      	cmp	r2, r1
 800fc0a:	da07      	bge.n	800fc1c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 800fc0c:	88c0      	ldrh	r0, [r0, #6]
 800fc0e:	4410      	add	r0, r2
 800fc10:	b200      	sxth	r0, r0
 800fc12:	4283      	cmp	r3, r0
 800fc14:	bfac      	ite	ge
 800fc16:	2000      	movge	r0, #0
 800fc18:	2001      	movlt	r0, #1
 800fc1a:	bd10      	pop	{r4, pc}
 800fc1c:	2000      	movs	r0, #0
 800fc1e:	e7fc      	b.n	800fc1a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0800fc20 <_ZN8touchgfx4Rect10restrictToEss>:
 800fc20:	f9b0 3000 	ldrsh.w	r3, [r0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	b510      	push	{r4, lr}
 800fc28:	da04      	bge.n	800fc34 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 800fc2a:	8884      	ldrh	r4, [r0, #4]
 800fc2c:	4423      	add	r3, r4
 800fc2e:	8083      	strh	r3, [r0, #4]
 800fc30:	2300      	movs	r3, #0
 800fc32:	8003      	strh	r3, [r0, #0]
 800fc34:	f9b0 4000 	ldrsh.w	r4, [r0]
 800fc38:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fc3c:	1b09      	subs	r1, r1, r4
 800fc3e:	428b      	cmp	r3, r1
 800fc40:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800fc44:	bfc8      	it	gt
 800fc46:	8081      	strhgt	r1, [r0, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	da04      	bge.n	800fc56 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 800fc4c:	88c1      	ldrh	r1, [r0, #6]
 800fc4e:	440b      	add	r3, r1
 800fc50:	80c3      	strh	r3, [r0, #6]
 800fc52:	2300      	movs	r3, #0
 800fc54:	8043      	strh	r3, [r0, #2]
 800fc56:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 800fc5a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800fc5e:	1a52      	subs	r2, r2, r1
 800fc60:	4293      	cmp	r3, r2
 800fc62:	bfc8      	it	gt
 800fc64:	80c2      	strhgt	r2, [r0, #6]
 800fc66:	bd10      	pop	{r4, pc}

0800fc68 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 800fc68:	4b10      	ldr	r3, [pc, #64]	; (800fcac <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	460c      	mov	r4, r1
 800fc6e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fc72:	4b0f      	ldr	r3, [pc, #60]	; (800fcb0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 800fc74:	4620      	mov	r0, r4
 800fc76:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fc7a:	f7ff ffd1 	bl	800fc20 <_ZN8touchgfx4Rect10restrictToEss>
 800fc7e:	4b0d      	ldr	r3, [pc, #52]	; (800fcb4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 800fc80:	6818      	ldr	r0, [r3, #0]
 800fc82:	b190      	cbz	r0, 800fcaa <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 800fc84:	6803      	ldr	r3, [r0, #0]
 800fc86:	4621      	mov	r1, r4
 800fc88:	689b      	ldr	r3, [r3, #8]
 800fc8a:	4798      	blx	r3
 800fc8c:	4b0a      	ldr	r3, [pc, #40]	; (800fcb8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 800fc8e:	6818      	ldr	r0, [r3, #0]
 800fc90:	b118      	cbz	r0, 800fc9a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 800fc92:	6803      	ldr	r3, [r0, #0]
 800fc94:	4621      	mov	r1, r4
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	4798      	blx	r3
 800fc9a:	4b08      	ldr	r3, [pc, #32]	; (800fcbc <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 800fc9c:	4621      	mov	r1, r4
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	6803      	ldr	r3, [r0, #0]
 800fca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fca6:	69db      	ldr	r3, [r3, #28]
 800fca8:	4718      	bx	r3
 800fcaa:	bd10      	pop	{r4, pc}
 800fcac:	2401a9ae 	.word	0x2401a9ae
 800fcb0:	2401a9ac 	.word	0x2401a9ac
 800fcb4:	2401a9f4 	.word	0x2401a9f4
 800fcb8:	2401a9f0 	.word	0x2401a9f0
 800fcbc:	2401a9b8 	.word	0x2401a9b8

0800fcc0 <_ZNK8touchgfx4Rect8includesERKS0_>:
 800fcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcc2:	4606      	mov	r6, r0
 800fcc4:	4608      	mov	r0, r1
 800fcc6:	460f      	mov	r7, r1
 800fcc8:	f7fd ff3d 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fccc:	b9e8      	cbnz	r0, 800fd0a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fcce:	f9b7 5000 	ldrsh.w	r5, [r7]
 800fcd2:	f9b6 4000 	ldrsh.w	r4, [r6]
 800fcd6:	42a5      	cmp	r5, r4
 800fcd8:	db17      	blt.n	800fd0a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fcda:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800fcde:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	db11      	blt.n	800fd0a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fce6:	88b9      	ldrh	r1, [r7, #4]
 800fce8:	440d      	add	r5, r1
 800fcea:	88b1      	ldrh	r1, [r6, #4]
 800fcec:	440c      	add	r4, r1
 800fcee:	b22d      	sxth	r5, r5
 800fcf0:	b224      	sxth	r4, r4
 800fcf2:	42a5      	cmp	r5, r4
 800fcf4:	dc09      	bgt.n	800fd0a <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 800fcf6:	88f8      	ldrh	r0, [r7, #6]
 800fcf8:	4410      	add	r0, r2
 800fcfa:	88f2      	ldrh	r2, [r6, #6]
 800fcfc:	4413      	add	r3, r2
 800fcfe:	b200      	sxth	r0, r0
 800fd00:	b21b      	sxth	r3, r3
 800fd02:	4298      	cmp	r0, r3
 800fd04:	bfcc      	ite	gt
 800fd06:	2000      	movgt	r0, #0
 800fd08:	2001      	movle	r0, #1
 800fd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fd0c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 800fd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0e:	4604      	mov	r4, r0
 800fd10:	4608      	mov	r0, r1
 800fd12:	460d      	mov	r5, r1
 800fd14:	f7fd ff17 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd18:	b978      	cbnz	r0, 800fd3a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 800fd1a:	4620      	mov	r0, r4
 800fd1c:	f7fd ff13 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fd20:	f9b5 6000 	ldrsh.w	r6, [r5]
 800fd24:	b150      	cbz	r0, 800fd3c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 800fd26:	8026      	strh	r6, [r4, #0]
 800fd28:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800fd2c:	8063      	strh	r3, [r4, #2]
 800fd2e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800fd32:	80a3      	strh	r3, [r4, #4]
 800fd34:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800fd38:	80e3      	strh	r3, [r4, #6]
 800fd3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd3c:	f9b4 1000 	ldrsh.w	r1, [r4]
 800fd40:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 800fd44:	42b1      	cmp	r1, r6
 800fd46:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 800fd4a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 800fd4e:	460f      	mov	r7, r1
 800fd50:	88ed      	ldrh	r5, [r5, #6]
 800fd52:	bfa8      	it	ge
 800fd54:	4637      	movge	r7, r6
 800fd56:	4293      	cmp	r3, r2
 800fd58:	4618      	mov	r0, r3
 800fd5a:	4466      	add	r6, ip
 800fd5c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 800fd60:	bfa8      	it	ge
 800fd62:	4610      	movge	r0, r2
 800fd64:	442a      	add	r2, r5
 800fd66:	88e5      	ldrh	r5, [r4, #6]
 800fd68:	4461      	add	r1, ip
 800fd6a:	b236      	sxth	r6, r6
 800fd6c:	8027      	strh	r7, [r4, #0]
 800fd6e:	442b      	add	r3, r5
 800fd70:	b209      	sxth	r1, r1
 800fd72:	b212      	sxth	r2, r2
 800fd74:	8060      	strh	r0, [r4, #2]
 800fd76:	b21b      	sxth	r3, r3
 800fd78:	428e      	cmp	r6, r1
 800fd7a:	bfac      	ite	ge
 800fd7c:	ebc7 0106 	rsbge	r1, r7, r6
 800fd80:	ebc7 0101 	rsblt	r1, r7, r1
 800fd84:	429a      	cmp	r2, r3
 800fd86:	bfac      	ite	ge
 800fd88:	ebc0 0202 	rsbge	r2, r0, r2
 800fd8c:	ebc0 0203 	rsblt	r2, r0, r3
 800fd90:	80a1      	strh	r1, [r4, #4]
 800fd92:	80e2      	strh	r2, [r4, #6]
 800fd94:	e7d1      	b.n	800fd3a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0800fd98 <_ZN8touchgfx11Application11getInstanceEv>:
 800fd98:	4b01      	ldr	r3, [pc, #4]	; (800fda0 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 800fd9a:	6818      	ldr	r0, [r3, #0]
 800fd9c:	4770      	bx	lr
 800fd9e:	bf00      	nop
 800fda0:	2401aa04 	.word	0x2401aa04

0800fda4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 800fda4:	2300      	movs	r3, #0
 800fda6:	b510      	push	{r4, lr}
 800fda8:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 800fdac:	4604      	mov	r4, r0
 800fdae:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800fdb2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800fdb6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800fdba:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d90e      	bls.n	800fde0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 800fdc2:	18e2      	adds	r2, r4, r3
 800fdc4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 800fdc8:	b122      	cbz	r2, 800fdd4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 800fdca:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800fdce:	6803      	ldr	r3, [r0, #0]
 800fdd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdd2:	4798      	blx	r3
 800fdd4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800fdd8:	3301      	adds	r3, #1
 800fdda:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800fdde:	e7ea      	b.n	800fdb6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 800fde0:	bd10      	pop	{r4, pc}

0800fde2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 800fde2:	2300      	movs	r3, #0
 800fde4:	f100 0284 	add.w	r2, r0, #132	; 0x84
 800fde8:	30a4      	adds	r0, #164	; 0xa4
 800fdea:	f820 3c24 	strh.w	r3, [r0, #-36]
 800fdee:	f802 3b01 	strb.w	r3, [r2], #1
 800fdf2:	4282      	cmp	r2, r0
 800fdf4:	d1fb      	bne.n	800fdee <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 800fdf6:	4770      	bx	lr

0800fdf8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 800fdf8:	b570      	push	{r4, r5, r6, lr}
 800fdfa:	4c0b      	ldr	r4, [pc, #44]	; (800fe28 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 800fdfc:	4605      	mov	r5, r0
 800fdfe:	460e      	mov	r6, r1
 800fe00:	6820      	ldr	r0, [r4, #0]
 800fe02:	b110      	cbz	r0, 800fe0a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 800fe04:	6803      	ldr	r3, [r0, #0]
 800fe06:	695b      	ldr	r3, [r3, #20]
 800fe08:	4798      	blx	r3
 800fe0a:	1d28      	adds	r0, r5, #4
 800fe0c:	f7ff ffe9 	bl	800fde2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800fe10:	6026      	str	r6, [r4, #0]
 800fe12:	6833      	ldr	r3, [r6, #0]
 800fe14:	4630      	mov	r0, r6
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	4798      	blx	r3
 800fe1a:	682b      	ldr	r3, [r5, #0]
 800fe1c:	4628      	mov	r0, r5
 800fe1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe24:	4718      	bx	r3
 800fe26:	bf00      	nop
 800fe28:	2401a9f4 	.word	0x2401a9f4

0800fe2c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 800fe32:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 800fe36:	461a      	mov	r2, r3
 800fe38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe3a:	461c      	mov	r4, r3
 800fe3c:	461d      	mov	r5, r3
 800fe3e:	459c      	cmp	ip, r3
 800fe40:	dd1a      	ble.n	800fe78 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 800fe42:	18c6      	adds	r6, r0, r3
 800fe44:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 800fe48:	b16e      	cbz	r6, 800fe66 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 800fe4a:	429a      	cmp	r2, r3
 800fe4c:	d008      	beq.n	800fe60 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 800fe4e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800fe52:	fa1f fe82 	uxth.w	lr, r2
 800fe56:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 800fe5a:	1887      	adds	r7, r0, r2
 800fe5c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 800fe60:	3201      	adds	r2, #1
 800fe62:	3301      	adds	r3, #1
 800fe64:	e7eb      	b.n	800fe3e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 800fe66:	4299      	cmp	r1, r3
 800fe68:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 800fe6c:	bfa8      	it	ge
 800fe6e:	3501      	addge	r5, #1
 800fe70:	429e      	cmp	r6, r3
 800fe72:	bfc8      	it	gt
 800fe74:	3401      	addgt	r4, #1
 800fe76:	e7f4      	b.n	800fe62 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 800fe78:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 800fe7c:	1b49      	subs	r1, r1, r5
 800fe7e:	1b1b      	subs	r3, r3, r4
 800fe80:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 800fe84:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 800fe88:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	dd03      	ble.n	800fe98 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 800fe90:	3b01      	subs	r3, #1
 800fe92:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 800fe96:	e7f7      	b.n	800fe88 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 800fe98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800fe9c <_ZN8touchgfx11Application15handleTickEventEv>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	4d16      	ldr	r5, [pc, #88]	; (800fef8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 800fea0:	4604      	mov	r4, r0
 800fea2:	6828      	ldr	r0, [r5, #0]
 800fea4:	b140      	cbz	r0, 800feb8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800fea6:	7a03      	ldrb	r3, [r0, #8]
 800fea8:	b933      	cbnz	r3, 800feb8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 800feaa:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800feae:	6803      	ldr	r3, [r0, #0]
 800feb0:	689b      	ldr	r3, [r3, #8]
 800feb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feb6:	4718      	bx	r3
 800feb8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 800febc:	4e0f      	ldr	r6, [pc, #60]	; (800fefc <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 800febe:	b973      	cbnz	r3, 800fede <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800fec0:	b168      	cbz	r0, 800fede <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800fec2:	7a03      	ldrb	r3, [r0, #8]
 800fec4:	b15b      	cbz	r3, 800fede <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 800fec6:	6830      	ldr	r0, [r6, #0]
 800fec8:	b110      	cbz	r0, 800fed0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 800feca:	6803      	ldr	r3, [r0, #0]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	4798      	blx	r3
 800fed0:	6828      	ldr	r0, [r5, #0]
 800fed2:	6803      	ldr	r3, [r0, #0]
 800fed4:	68db      	ldr	r3, [r3, #12]
 800fed6:	4798      	blx	r3
 800fed8:	2301      	movs	r3, #1
 800feda:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 800fede:	3404      	adds	r4, #4
 800fee0:	4620      	mov	r0, r4
 800fee2:	f7ff ff5f 	bl	800fda4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 800fee6:	4620      	mov	r0, r4
 800fee8:	f7ff ffa0 	bl	800fe2c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 800feec:	6830      	ldr	r0, [r6, #0]
 800feee:	b110      	cbz	r0, 800fef6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 800fef0:	6803      	ldr	r3, [r0, #0]
 800fef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef4:	e7dd      	b.n	800feb2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 800fef6:	bd70      	pop	{r4, r5, r6, pc}
 800fef8:	2401a9f8 	.word	0x2401a9f8
 800fefc:	2401a9f4 	.word	0x2401a9f4

0800ff00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 800ff00:	4603      	mov	r3, r0
 800ff02:	f100 0140 	add.w	r1, r0, #64	; 0x40
 800ff06:	2200      	movs	r2, #0
 800ff08:	801a      	strh	r2, [r3, #0]
 800ff0a:	3308      	adds	r3, #8
 800ff0c:	f823 2c06 	strh.w	r2, [r3, #-6]
 800ff10:	f823 2c04 	strh.w	r2, [r3, #-4]
 800ff14:	f823 2c02 	strh.w	r2, [r3, #-2]
 800ff18:	428b      	cmp	r3, r1
 800ff1a:	d1f5      	bne.n	800ff08 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 800ff1c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 800ff20:	4770      	bx	lr
	...

0800ff24 <_ZN8touchgfx11ApplicationC1Ev>:
 800ff24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff26:	4b1d      	ldr	r3, [pc, #116]	; (800ff9c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 800ff28:	4606      	mov	r6, r0
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	2500      	movs	r5, #0
 800ff2e:	f846 3b04 	str.w	r3, [r6], #4
 800ff32:	22a8      	movs	r2, #168	; 0xa8
 800ff34:	2100      	movs	r1, #0
 800ff36:	4630      	mov	r0, r6
 800ff38:	f00c f8e1 	bl	801c0fe <memset>
 800ff3c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 800ff40:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 800ff44:	4f16      	ldr	r7, [pc, #88]	; (800ffa0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 800ff46:	f7ff ffdb 	bl	800ff00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ff4a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 800ff4e:	f7ff ffd7 	bl	800ff00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 800ff52:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 800ff56:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 800ff5a:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 800ff5e:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 800ff62:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 800ff66:	490f      	ldr	r1, [pc, #60]	; (800ffa4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 800ff68:	480f      	ldr	r0, [pc, #60]	; (800ffa8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 800ff6a:	f00b fd8b 	bl	801ba84 <CRC_Lock>
 800ff6e:	4b0f      	ldr	r3, [pc, #60]	; (800ffac <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 800ff70:	b158      	cbz	r0, 800ff8a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 800ff72:	801d      	strh	r5, [r3, #0]
 800ff74:	2300      	movs	r3, #0
 800ff76:	4a0e      	ldr	r2, [pc, #56]	; (800ffb0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 800ff78:	4630      	mov	r0, r6
 800ff7a:	6013      	str	r3, [r2, #0]
 800ff7c:	4a0d      	ldr	r2, [pc, #52]	; (800ffb4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 800ff7e:	603b      	str	r3, [r7, #0]
 800ff80:	6013      	str	r3, [r2, #0]
 800ff82:	f7ff ff2e 	bl	800fde2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 800ff86:	4620      	mov	r0, r4
 800ff88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ff8e:	2002      	movs	r0, #2
 800ff90:	801a      	strh	r2, [r3, #0]
 800ff92:	6038      	str	r0, [r7, #0]
 800ff94:	f001 fa50 	bl	8011438 <_ZN8touchgfx6Screen4drawEv>
 800ff98:	e7ec      	b.n	800ff74 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 800ff9a:	bf00      	nop
 800ff9c:	0801e4d0 	.word	0x0801e4d0
 800ffa0:	2401a9f4 	.word	0x2401a9f4
 800ffa4:	b5e8b5cd 	.word	0xb5e8b5cd
 800ffa8:	f407a5c2 	.word	0xf407a5c2
 800ffac:	24000020 	.word	0x24000020
 800ffb0:	2401aa04 	.word	0x2401aa04
 800ffb4:	2401a9f8 	.word	0x2401a9f8

0800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 800ffb8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800ffbc:	3b01      	subs	r3, #1
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	428b      	cmp	r3, r1
 800ffc2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 800ffc6:	b510      	push	{r4, lr}
 800ffc8:	d908      	bls.n	800ffdc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 800ffca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800ffce:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 800ffd2:	681a      	ldr	r2, [r3, #0]
 800ffd4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 800ffd8:	685a      	ldr	r2, [r3, #4]
 800ffda:	6062      	str	r2, [r4, #4]
 800ffdc:	bd10      	pop	{r4, pc}
	...

0800ffe0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 800ffe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffe4:	b08f      	sub	sp, #60	; 0x3c
 800ffe6:	4b8f      	ldr	r3, [pc, #572]	; (8010224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 800ffe8:	4683      	mov	fp, r0
 800ffea:	ac0a      	add	r4, sp, #40	; 0x28
 800ffec:	e884 0006 	stmia.w	r4, {r1, r2}
 800fff0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800fff4:	4620      	mov	r0, r4
 800fff6:	4b8c      	ldr	r3, [pc, #560]	; (8010228 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 800fff8:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fffc:	f7ff fe10 	bl	800fc20 <_ZN8touchgfx4Rect10restrictToEss>
 8010000:	4620      	mov	r0, r4
 8010002:	f7fd fda0 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010006:	2800      	cmp	r0, #0
 8010008:	d16a      	bne.n	80100e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801000a:	9403      	str	r4, [sp, #12]
 801000c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8010010:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8010014:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8010018:	9301      	str	r3, [sp, #4]
 801001a:	35a4      	adds	r5, #164	; 0xa4
 801001c:	b15c      	cbz	r4, 8010036 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801001e:	4629      	mov	r1, r5
 8010020:	9803      	ldr	r0, [sp, #12]
 8010022:	f7ff fe4d 	bl	800fcc0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8010026:	3c01      	subs	r4, #1
 8010028:	b118      	cbz	r0, 8010032 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801002a:	b2a1      	uxth	r1, r4
 801002c:	9801      	ldr	r0, [sp, #4]
 801002e:	f7ff ffc3 	bl	800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010032:	3d08      	subs	r5, #8
 8010034:	e7f2      	b.n	801001c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8010036:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 801003a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801003e:	f8cd a010 	str.w	sl, [sp, #16]
 8010042:	9302      	str	r3, [sp, #8]
 8010044:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8010048:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801004c:	9306      	str	r3, [sp, #24]
 801004e:	445c      	add	r4, fp
 8010050:	2500      	movs	r5, #0
 8010052:	4626      	mov	r6, r4
 8010054:	f8cd a014 	str.w	sl, [sp, #20]
 8010058:	462f      	mov	r7, r5
 801005a:	9b05      	ldr	r3, [sp, #20]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d073      	beq.n	8010148 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8010060:	9903      	ldr	r1, [sp, #12]
 8010062:	4630      	mov	r0, r6
 8010064:	f7ff fdba 	bl	800fbdc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010068:	b350      	cbz	r0, 80100c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801006a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801006e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8010072:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 8010076:	45e6      	cmp	lr, ip
 8010078:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801007c:	db33      	blt.n	80100e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801007e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8010082:	88b3      	ldrh	r3, [r6, #4]
 8010084:	4472      	add	r2, lr
 8010086:	4463      	add	r3, ip
 8010088:	b212      	sxth	r2, r2
 801008a:	b21b      	sxth	r3, r3
 801008c:	429a      	cmp	r2, r3
 801008e:	dc2a      	bgt.n	80100e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8010090:	fa1f f289 	uxth.w	r2, r9
 8010094:	88f3      	ldrh	r3, [r6, #6]
 8010096:	45c8      	cmp	r8, r9
 8010098:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801009c:	4413      	add	r3, r2
 801009e:	fa1f fc88 	uxth.w	ip, r8
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	fa0f fe83 	sxth.w	lr, r3
 80100a8:	db0f      	blt.n	80100ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80100aa:	eba3 030c 	sub.w	r3, r3, ip
 80100ae:	1ac9      	subs	r1, r1, r3
 80100b0:	b209      	sxth	r1, r1
 80100b2:	2900      	cmp	r1, #0
 80100b4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80100b8:	dd12      	ble.n	80100e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80100ba:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80100be:	4605      	mov	r5, r0
 80100c0:	9b05      	ldr	r3, [sp, #20]
 80100c2:	3e08      	subs	r6, #8
 80100c4:	3b01      	subs	r3, #1
 80100c6:	9305      	str	r3, [sp, #20]
 80100c8:	e7c7      	b.n	801005a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 80100ca:	4461      	add	r1, ip
 80100cc:	b209      	sxth	r1, r1
 80100ce:	4571      	cmp	r1, lr
 80100d0:	dc38      	bgt.n	8010144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80100d2:	eba2 020c 	sub.w	r2, r2, ip
 80100d6:	b212      	sxth	r2, r2
 80100d8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 80100dc:	2a00      	cmp	r2, #0
 80100de:	dcee      	bgt.n	80100be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80100e0:	b00f      	add	sp, #60	; 0x3c
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e6:	45c8      	cmp	r8, r9
 80100e8:	db2c      	blt.n	8010144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80100ea:	88f3      	ldrh	r3, [r6, #6]
 80100ec:	4499      	add	r9, r3
 80100ee:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80100f2:	4498      	add	r8, r3
 80100f4:	fa0f f989 	sxth.w	r9, r9
 80100f8:	fa0f f888 	sxth.w	r8, r8
 80100fc:	45c1      	cmp	r9, r8
 80100fe:	db21      	blt.n	8010144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8010100:	fa1f f28c 	uxth.w	r2, ip
 8010104:	88b3      	ldrh	r3, [r6, #4]
 8010106:	45e6      	cmp	lr, ip
 8010108:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801010c:	4413      	add	r3, r2
 801010e:	fa1f f88e 	uxth.w	r8, lr
 8010112:	b29b      	uxth	r3, r3
 8010114:	fa0f f983 	sxth.w	r9, r3
 8010118:	db0a      	blt.n	8010130 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 801011a:	eba3 0308 	sub.w	r3, r3, r8
 801011e:	1ac9      	subs	r1, r1, r3
 8010120:	b209      	sxth	r1, r1
 8010122:	2900      	cmp	r1, #0
 8010124:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8010128:	ddda      	ble.n	80100e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801012a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801012e:	e7c6      	b.n	80100be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8010130:	4441      	add	r1, r8
 8010132:	b209      	sxth	r1, r1
 8010134:	4549      	cmp	r1, r9
 8010136:	dc05      	bgt.n	8010144 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8010138:	eba2 0208 	sub.w	r2, r2, r8
 801013c:	b212      	sxth	r2, r2
 801013e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8010142:	e7cb      	b.n	80100dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8010144:	4607      	mov	r7, r0
 8010146:	e7bb      	b.n	80100c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8010148:	2d00      	cmp	r5, #0
 801014a:	d181      	bne.n	8010050 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 801014c:	2f00      	cmp	r7, #0
 801014e:	f000 81dd 	beq.w	801050c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8010152:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8010156:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801015a:	b2b3      	uxth	r3, r6
 801015c:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8010160:	9305      	str	r3, [sp, #20]
 8010162:	9a05      	ldr	r2, [sp, #20]
 8010164:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8010168:	4413      	add	r3, r2
 801016a:	b2ba      	uxth	r2, r7
 801016c:	4492      	add	sl, r2
 801016e:	b29b      	uxth	r3, r3
 8010170:	fa1f fa8a 	uxth.w	sl, sl
 8010174:	fa0f f883 	sxth.w	r8, r3
 8010178:	fa0f f98a 	sxth.w	r9, sl
 801017c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8010180:	9b04      	ldr	r3, [sp, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d052      	beq.n	801022c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8010186:	9903      	ldr	r1, [sp, #12]
 8010188:	4620      	mov	r0, r4
 801018a:	f7ff fd27 	bl	800fbdc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801018e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010192:	b1c0      	cbz	r0, 80101c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010194:	f9b4 e000 	ldrsh.w	lr, [r4]
 8010198:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801019c:	4576      	cmp	r6, lr
 801019e:	dc22      	bgt.n	80101e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80101a0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80101a4:	44f4      	add	ip, lr
 80101a6:	fa0f fc8c 	sxth.w	ip, ip
 80101aa:	45e0      	cmp	r8, ip
 80101ac:	db1b      	blt.n	80101e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 80101ae:	428f      	cmp	r7, r1
 80101b0:	fa1f fc81 	uxth.w	ip, r1
 80101b4:	88e1      	ldrh	r1, [r4, #6]
 80101b6:	dc0d      	bgt.n	80101d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 80101b8:	ebaa 0c0c 	sub.w	ip, sl, ip
 80101bc:	f8a4 9002 	strh.w	r9, [r4, #2]
 80101c0:	eba1 010c 	sub.w	r1, r1, ip
 80101c4:	80e1      	strh	r1, [r4, #6]
 80101c6:	4628      	mov	r0, r5
 80101c8:	9904      	ldr	r1, [sp, #16]
 80101ca:	3c08      	subs	r4, #8
 80101cc:	4605      	mov	r5, r0
 80101ce:	3901      	subs	r1, #1
 80101d0:	9104      	str	r1, [sp, #16]
 80101d2:	e7d3      	b.n	801017c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 80101d4:	4461      	add	r1, ip
 80101d6:	b209      	sxth	r1, r1
 80101d8:	4549      	cmp	r1, r9
 80101da:	dcf5      	bgt.n	80101c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80101dc:	eba2 0c0c 	sub.w	ip, r2, ip
 80101e0:	f8a4 c006 	strh.w	ip, [r4, #6]
 80101e4:	e7ef      	b.n	80101c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80101e6:	428f      	cmp	r7, r1
 80101e8:	dcee      	bgt.n	80101c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80101ea:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80101ee:	4461      	add	r1, ip
 80101f0:	b209      	sxth	r1, r1
 80101f2:	4589      	cmp	r9, r1
 80101f4:	dbe8      	blt.n	80101c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80101f6:	4576      	cmp	r6, lr
 80101f8:	fa1f fc8e 	uxth.w	ip, lr
 80101fc:	88a1      	ldrh	r1, [r4, #4]
 80101fe:	dc07      	bgt.n	8010210 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8010200:	eba3 0c0c 	sub.w	ip, r3, ip
 8010204:	f8a4 8000 	strh.w	r8, [r4]
 8010208:	eba1 010c 	sub.w	r1, r1, ip
 801020c:	80a1      	strh	r1, [r4, #4]
 801020e:	e7da      	b.n	80101c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010210:	4461      	add	r1, ip
 8010212:	b209      	sxth	r1, r1
 8010214:	4588      	cmp	r8, r1
 8010216:	dbd7      	blt.n	80101c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8010218:	9905      	ldr	r1, [sp, #20]
 801021a:	eba1 0c0c 	sub.w	ip, r1, ip
 801021e:	f8a4 c004 	strh.w	ip, [r4, #4]
 8010222:	e7d0      	b.n	80101c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8010224:	2401a9ae 	.word	0x2401a9ae
 8010228:	2401a9ac 	.word	0x2401a9ac
 801022c:	2d00      	cmp	r5, #0
 801022e:	f000 816d 	beq.w	801050c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8010232:	9b06      	ldr	r3, [sp, #24]
 8010234:	445b      	add	r3, fp
 8010236:	461c      	mov	r4, r3
 8010238:	9b02      	ldr	r3, [sp, #8]
 801023a:	3301      	adds	r3, #1
 801023c:	f000 8166 	beq.w	801050c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8010240:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8010244:	9803      	ldr	r0, [sp, #12]
 8010246:	4629      	mov	r1, r5
 8010248:	f7ff fd3a 	bl	800fcc0 <_ZNK8touchgfx4Rect8includesERKS0_>
 801024c:	b120      	cbz	r0, 8010258 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 801024e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8010252:	9801      	ldr	r0, [sp, #4]
 8010254:	f7ff feb0 	bl	800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010258:	9903      	ldr	r1, [sp, #12]
 801025a:	4628      	mov	r0, r5
 801025c:	f7ff fcbe 	bl	800fbdc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8010260:	2800      	cmp	r0, #0
 8010262:	f000 809c 	beq.w	801039e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8010266:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801026a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 801026e:	fa1f f189 	uxth.w	r1, r9
 8010272:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8010276:	9309      	str	r3, [sp, #36]	; 0x24
 8010278:	eb01 0c03 	add.w	ip, r1, r3
 801027c:	b283      	uxth	r3, r0
 801027e:	4548      	cmp	r0, r9
 8010280:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8010284:	fa1f fa8c 	uxth.w	sl, ip
 8010288:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801028c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8010290:	eb03 050c 	add.w	r5, r3, ip
 8010294:	b2ad      	uxth	r5, r5
 8010296:	9505      	str	r5, [sp, #20]
 8010298:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801029c:	9504      	str	r5, [sp, #16]
 801029e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 80102a2:	f340 8099 	ble.w	80103d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 80102a6:	1a5b      	subs	r3, r3, r1
 80102a8:	4596      	cmp	lr, r2
 80102aa:	fa0f f08a 	sxth.w	r0, sl
 80102ae:	b29b      	uxth	r3, r3
 80102b0:	b21e      	sxth	r6, r3
 80102b2:	dd2e      	ble.n	8010312 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 80102b4:	9f02      	ldr	r7, [sp, #8]
 80102b6:	fa1f fe8e 	uxth.w	lr, lr
 80102ba:	b292      	uxth	r2, r2
 80102bc:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 80102c0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 80102c4:	9f04      	ldr	r7, [sp, #16]
 80102c6:	ebae 0102 	sub.w	r1, lr, r2
 80102ca:	44a6      	add	lr, r4
 80102cc:	1a3f      	subs	r7, r7, r0
 80102ce:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 80102d2:	b289      	uxth	r1, r1
 80102d4:	4402      	add	r2, r0
 80102d6:	fa0f fe8e 	sxth.w	lr, lr
 80102da:	b20d      	sxth	r5, r1
 80102dc:	b212      	sxth	r2, r2
 80102de:	436f      	muls	r7, r5
 80102e0:	ebae 0202 	sub.w	r2, lr, r2
 80102e4:	4372      	muls	r2, r6
 80102e6:	4297      	cmp	r7, r2
 80102e8:	db09      	blt.n	80102fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80102ea:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80102ee:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80102f2:	449c      	add	ip, r3
 80102f4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80102f8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80102fc:	e686      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80102fe:	4421      	add	r1, r4
 8010300:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8010304:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8010308:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801030c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8010310:	e67c      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010312:	9f04      	ldr	r7, [sp, #16]
 8010314:	42b8      	cmp	r0, r7
 8010316:	da27      	bge.n	8010368 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8010318:	9902      	ldr	r1, [sp, #8]
 801031a:	1a3f      	subs	r7, r7, r0
 801031c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8010320:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8010324:	eb05 010e 	add.w	r1, r5, lr
 8010328:	fa1f f881 	uxth.w	r8, r1
 801032c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8010330:	4411      	add	r1, r2
 8010332:	fa0f f988 	sxth.w	r9, r8
 8010336:	eba2 020e 	sub.w	r2, r2, lr
 801033a:	eba1 0108 	sub.w	r1, r1, r8
 801033e:	4372      	muls	r2, r6
 8010340:	b289      	uxth	r1, r1
 8010342:	fa0f f881 	sxth.w	r8, r1
 8010346:	fb08 f707 	mul.w	r7, r8, r7
 801034a:	42ba      	cmp	r2, r7
 801034c:	dc06      	bgt.n	801035c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 801034e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8010352:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8010356:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 801035a:	e7ca      	b.n	80102f2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 801035c:	4429      	add	r1, r5
 801035e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8010362:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8010366:	e651      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010368:	9805      	ldr	r0, [sp, #20]
 801036a:	2d06      	cmp	r5, #6
 801036c:	ebaa 0000 	sub.w	r0, sl, r0
 8010370:	b280      	uxth	r0, r0
 8010372:	fa0f fe80 	sxth.w	lr, r0
 8010376:	d817      	bhi.n	80103a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8010378:	9b04      	ldr	r3, [sp, #16]
 801037a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 801037e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8010382:	1c6b      	adds	r3, r5, #1
 8010384:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8010388:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 801038c:	9b01      	ldr	r3, [sp, #4]
 801038e:	9801      	ldr	r0, [sp, #4]
 8010390:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010394:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8010398:	805a      	strh	r2, [r3, #2]
 801039a:	809e      	strh	r6, [r3, #4]
 801039c:	80d9      	strh	r1, [r3, #6]
 801039e:	9b02      	ldr	r3, [sp, #8]
 80103a0:	3c08      	subs	r4, #8
 80103a2:	3b01      	subs	r3, #1
 80103a4:	9302      	str	r3, [sp, #8]
 80103a6:	e747      	b.n	8010238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 80103a8:	9a02      	ldr	r2, [sp, #8]
 80103aa:	45b6      	cmp	lr, r6
 80103ac:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80103b0:	db0d      	blt.n	80103ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 80103b2:	449c      	add	ip, r3
 80103b4:	445a      	add	r2, fp
 80103b6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80103ba:	fa1f fc8c 	uxth.w	ip, ip
 80103be:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 80103c2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80103c6:	448c      	add	ip, r1
 80103c8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 80103cc:	e61e      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80103ce:	445a      	add	r2, fp
 80103d0:	4484      	add	ip, r0
 80103d2:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 80103d6:	e78f      	b.n	80102f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80103d8:	fa1f f18e 	uxth.w	r1, lr
 80103dc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 80103e0:	b293      	uxth	r3, r2
 80103e2:	4596      	cmp	lr, r2
 80103e4:	eb01 0806 	add.w	r8, r1, r6
 80103e8:	9306      	str	r3, [sp, #24]
 80103ea:	fa1f f888 	uxth.w	r8, r8
 80103ee:	9f06      	ldr	r7, [sp, #24]
 80103f0:	fa0f f388 	sxth.w	r3, r8
 80103f4:	9307      	str	r3, [sp, #28]
 80103f6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 80103fa:	443b      	add	r3, r7
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	9308      	str	r3, [sp, #32]
 8010400:	da24      	bge.n	801044c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8010402:	9905      	ldr	r1, [sp, #20]
 8010404:	eba3 0308 	sub.w	r3, r3, r8
 8010408:	eba2 020e 	sub.w	r2, r2, lr
 801040c:	eba9 0000 	sub.w	r0, r9, r0
 8010410:	ebaa 0401 	sub.w	r4, sl, r1
 8010414:	b29b      	uxth	r3, r3
 8010416:	b2a4      	uxth	r4, r4
 8010418:	b219      	sxth	r1, r3
 801041a:	b225      	sxth	r5, r4
 801041c:	4348      	muls	r0, r1
 801041e:	436a      	muls	r2, r5
 8010420:	4282      	cmp	r2, r0
 8010422:	9a02      	ldr	r2, [sp, #8]
 8010424:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010428:	445a      	add	r2, fp
 801042a:	dc06      	bgt.n	801043a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 801042c:	9b07      	ldr	r3, [sp, #28]
 801042e:	44a4      	add	ip, r4
 8010430:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8010434:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8010438:	e75e      	b.n	80102f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801043a:	9904      	ldr	r1, [sp, #16]
 801043c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8010440:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8010444:	4433      	add	r3, r6
 8010446:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801044a:	e5df      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801044c:	9f06      	ldr	r7, [sp, #24]
 801044e:	9b04      	ldr	r3, [sp, #16]
 8010450:	1bc9      	subs	r1, r1, r7
 8010452:	fa0f f78a 	sxth.w	r7, sl
 8010456:	b289      	uxth	r1, r1
 8010458:	429f      	cmp	r7, r3
 801045a:	fa0f fe81 	sxth.w	lr, r1
 801045e:	dd23      	ble.n	80104a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8010460:	9a05      	ldr	r2, [sp, #20]
 8010462:	eba9 0000 	sub.w	r0, r9, r0
 8010466:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801046a:	ebaa 0202 	sub.w	r2, sl, r2
 801046e:	9d07      	ldr	r5, [sp, #28]
 8010470:	fb0e f000 	mul.w	r0, lr, r0
 8010474:	b292      	uxth	r2, r2
 8010476:	eba5 0a03 	sub.w	sl, r5, r3
 801047a:	9b02      	ldr	r3, [sp, #8]
 801047c:	b214      	sxth	r4, r2
 801047e:	00db      	lsls	r3, r3, #3
 8010480:	fb04 fa0a 	mul.w	sl, r4, sl
 8010484:	445b      	add	r3, fp
 8010486:	4550      	cmp	r0, sl
 8010488:	db03      	blt.n	8010492 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 801048a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 801048e:	4494      	add	ip, r2
 8010490:	e732      	b.n	80102f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8010492:	9a04      	ldr	r2, [sp, #16]
 8010494:	4431      	add	r1, r6
 8010496:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 801049a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 801049e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 80104a2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80104a6:	e75c      	b.n	8010362 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 80104a8:	9b08      	ldr	r3, [sp, #32]
 80104aa:	2d06      	cmp	r5, #6
 80104ac:	eba3 0308 	sub.w	r3, r3, r8
 80104b0:	b29b      	uxth	r3, r3
 80104b2:	b218      	sxth	r0, r3
 80104b4:	d813      	bhi.n	80104de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 80104b6:	9b07      	ldr	r3, [sp, #28]
 80104b8:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 80104bc:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 80104c0:	1c6b      	adds	r3, r5, #1
 80104c2:	9901      	ldr	r1, [sp, #4]
 80104c4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 80104c8:	9b01      	ldr	r3, [sp, #4]
 80104ca:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 80104ce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80104d2:	805a      	strh	r2, [r3, #2]
 80104d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104d6:	f8a3 e006 	strh.w	lr, [r3, #6]
 80104da:	809a      	strh	r2, [r3, #4]
 80104dc:	e75f      	b.n	801039e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80104de:	9c02      	ldr	r4, [sp, #8]
 80104e0:	4570      	cmp	r0, lr
 80104e2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80104e6:	db0d      	blt.n	8010504 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 80104e8:	4431      	add	r1, r6
 80104ea:	9b06      	ldr	r3, [sp, #24]
 80104ec:	445c      	add	r4, fp
 80104ee:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80104f2:	b289      	uxth	r1, r1
 80104f4:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 80104f8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80104fc:	4419      	add	r1, r3
 80104fe:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8010502:	e583      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8010504:	445c      	add	r4, fp
 8010506:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 801050a:	e79b      	b.n	8010444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 801050c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8010510:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8010514:	1e65      	subs	r5, r4, #1
 8010516:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801051a:	b2ad      	uxth	r5, r5
 801051c:	42b5      	cmp	r5, r6
 801051e:	d044      	beq.n	80105aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8010520:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8010524:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8010528:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801052c:	4282      	cmp	r2, r0
 801052e:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8010532:	d11f      	bne.n	8010574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8010534:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8010538:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 801053c:	459c      	cmp	ip, r3
 801053e:	d119      	bne.n	8010574 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8010540:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8010544:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8010548:	19d8      	adds	r0, r3, r7
 801054a:	b200      	sxth	r0, r0
 801054c:	4288      	cmp	r0, r1
 801054e:	d109      	bne.n	8010564 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8010550:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8010554:	4413      	add	r3, r2
 8010556:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801055a:	4629      	mov	r1, r5
 801055c:	9801      	ldr	r0, [sp, #4]
 801055e:	f7ff fd2b 	bl	800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010562:	e003      	b.n	801056c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8010564:	4411      	add	r1, r2
 8010566:	b209      	sxth	r1, r1
 8010568:	42b9      	cmp	r1, r7
 801056a:	d0f3      	beq.n	8010554 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 801056c:	3d01      	subs	r5, #1
 801056e:	3c08      	subs	r4, #8
 8010570:	b2ad      	uxth	r5, r5
 8010572:	e7d3      	b.n	801051c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8010574:	42b9      	cmp	r1, r7
 8010576:	d1f9      	bne.n	801056c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8010578:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 801057c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8010580:	4299      	cmp	r1, r3
 8010582:	d1f3      	bne.n	801056c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8010584:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8010588:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801058c:	181f      	adds	r7, r3, r0
 801058e:	b23f      	sxth	r7, r7
 8010590:	42ba      	cmp	r2, r7
 8010592:	d105      	bne.n	80105a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8010594:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8010598:	440b      	add	r3, r1
 801059a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801059e:	e7dc      	b.n	801055a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 80105a0:	440a      	add	r2, r1
 80105a2:	b212      	sxth	r2, r2
 80105a4:	4290      	cmp	r0, r2
 80105a6:	d1e1      	bne.n	801056c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80105a8:	e7f6      	b.n	8010598 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 80105aa:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 80105ae:	2e07      	cmp	r6, #7
 80105b0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 80105b4:	d812      	bhi.n	80105dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 80105b6:	1c75      	adds	r5, r6, #1
 80105b8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 80105bc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80105c0:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 80105c4:	9d01      	ldr	r5, [sp, #4]
 80105c6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80105ca:	442c      	add	r4, r5
 80105cc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80105d0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80105d4:	8061      	strh	r1, [r4, #2]
 80105d6:	80a2      	strh	r2, [r4, #4]
 80105d8:	80e3      	strh	r3, [r4, #6]
 80105da:	e581      	b.n	80100e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80105dc:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80105e0:	3e01      	subs	r6, #1
 80105e2:	445c      	add	r4, fp
 80105e4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80105e8:	f04f 37ff 	mov.w	r7, #4294967295
 80105ec:	2500      	movs	r5, #0
 80105ee:	9305      	str	r3, [sp, #20]
 80105f0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 80105f4:	1e72      	subs	r2, r6, #1
 80105f6:	9302      	str	r3, [sp, #8]
 80105f8:	4691      	mov	r9, r2
 80105fa:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 80105fe:	9304      	str	r3, [sp, #16]
 8010600:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8010604:	f1b9 3fff 	cmp.w	r9, #4294967295
 8010608:	6818      	ldr	r0, [r3, #0]
 801060a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801060e:	9207      	str	r2, [sp, #28]
 8010610:	bf16      	itet	ne
 8010612:	9905      	ldrne	r1, [sp, #20]
 8010614:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8010618:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801061c:	9306      	str	r3, [sp, #24]
 801061e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8010622:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8010626:	fb18 f801 	smulbb	r8, r8, r1
 801062a:	6859      	ldr	r1, [r3, #4]
 801062c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8010630:	4671      	mov	r1, lr
 8010632:	a80c      	add	r0, sp, #48	; 0x30
 8010634:	f7ff fb6a 	bl	800fd0c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010638:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801063c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8010640:	f04f 0c08 	mov.w	ip, #8
 8010644:	9b04      	ldr	r3, [sp, #16]
 8010646:	9a02      	ldr	r2, [sp, #8]
 8010648:	fb10 f001 	smulbb	r0, r0, r1
 801064c:	fb02 8803 	mla	r8, r2, r3, r8
 8010650:	eba0 0108 	sub.w	r1, r0, r8
 8010654:	fb90 f0fc 	sdiv	r0, r0, ip
 8010658:	4288      	cmp	r0, r1
 801065a:	dc20      	bgt.n	801069e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 801065c:	4551      	cmp	r1, sl
 801065e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010662:	da03      	bge.n	801066c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8010664:	b1d9      	cbz	r1, 801069e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8010666:	468a      	mov	sl, r1
 8010668:	464f      	mov	r7, r9
 801066a:	4635      	mov	r5, r6
 801066c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010670:	f119 0f02 	cmn.w	r9, #2
 8010674:	d1c6      	bne.n	8010604 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8010676:	4616      	mov	r6, r2
 8010678:	3201      	adds	r2, #1
 801067a:	f1a4 0408 	sub.w	r4, r4, #8
 801067e:	d1b7      	bne.n	80105f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	b2ac      	uxth	r4, r5
 8010684:	00ed      	lsls	r5, r5, #3
 8010686:	1958      	adds	r0, r3, r5
 8010688:	1c7b      	adds	r3, r7, #1
 801068a:	d10b      	bne.n	80106a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 801068c:	4601      	mov	r1, r0
 801068e:	9803      	ldr	r0, [sp, #12]
 8010690:	f7ff fb3c 	bl	800fd0c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8010694:	4621      	mov	r1, r4
 8010696:	9801      	ldr	r0, [sp, #4]
 8010698:	f7ff fc8e 	bl	800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801069c:	e4b6      	b.n	801000c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801069e:	464f      	mov	r7, r9
 80106a0:	4635      	mov	r5, r6
 80106a2:	e7ed      	b.n	8010680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 80106a4:	9b01      	ldr	r3, [sp, #4]
 80106a6:	00ff      	lsls	r7, r7, #3
 80106a8:	445d      	add	r5, fp
 80106aa:	19d9      	adds	r1, r3, r7
 80106ac:	445f      	add	r7, fp
 80106ae:	f7ff fb2d 	bl	800fd0c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80106b2:	9b03      	ldr	r3, [sp, #12]
 80106b4:	cb03      	ldmia	r3!, {r0, r1}
 80106b6:	9b03      	ldr	r3, [sp, #12]
 80106b8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 80106bc:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80106c0:	f855 0fac 	ldr.w	r0, [r5, #172]!
 80106c4:	6869      	ldr	r1, [r5, #4]
 80106c6:	c303      	stmia	r3!, {r0, r1}
 80106c8:	e7e4      	b.n	8010694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 80106ca:	bf00      	nop

080106cc <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	f500 7698 	add.w	r6, r0, #304	; 0x130
 80106d4:	b09b      	sub	sp, #108	; 0x6c
 80106d6:	4604      	mov	r4, r0
 80106d8:	4630      	mov	r0, r6
 80106da:	f7fd fa34 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 80106de:	4605      	mov	r5, r0
 80106e0:	b948      	cbnz	r0, 80106f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 80106e2:	6823      	ldr	r3, [r4, #0]
 80106e4:	4620      	mov	r0, r4
 80106e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106e8:	e896 0006 	ldmia.w	r6, {r1, r2}
 80106ec:	4798      	blx	r3
 80106ee:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80106f2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 80106f6:	4bc5      	ldr	r3, [pc, #788]	; (8010a0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d03f      	beq.n	801077e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 80106fe:	4dc4      	ldr	r5, [pc, #784]	; (8010a10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8010700:	4628      	mov	r0, r5
 8010702:	f7fd fa20 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010706:	4606      	mov	r6, r0
 8010708:	2800      	cmp	r0, #0
 801070a:	d138      	bne.n	801077e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 801070c:	4628      	mov	r0, r5
 801070e:	f7ff f99b 	bl	800fa48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010712:	6823      	ldr	r3, [r4, #0]
 8010714:	6829      	ldr	r1, [r5, #0]
 8010716:	4620      	mov	r0, r4
 8010718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801071a:	686a      	ldr	r2, [r5, #4]
 801071c:	4798      	blx	r3
 801071e:	802e      	strh	r6, [r5, #0]
 8010720:	806e      	strh	r6, [r5, #2]
 8010722:	80ae      	strh	r6, [r5, #4]
 8010724:	80ee      	strh	r6, [r5, #6]
 8010726:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 801072a:	4dba      	ldr	r5, [pc, #744]	; (8010a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 801072c:	4640      	mov	r0, r8
 801072e:	f7ff fbe7 	bl	800ff00 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8010732:	882e      	ldrh	r6, [r5, #0]
 8010734:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8010738:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801073c:	4633      	mov	r3, r6
 801073e:	42bb      	cmp	r3, r7
 8010740:	d224      	bcs.n	801078c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8010742:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8010746:	2907      	cmp	r1, #7
 8010748:	d816      	bhi.n	8010778 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 801074a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801074e:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8010752:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8010756:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801075a:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801075e:	1c4a      	adds	r2, r1, #1
 8010760:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8010764:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8010768:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 801076c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8010770:	f8a2 e004 	strh.w	lr, [r2, #4]
 8010774:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010778:	3301      	adds	r3, #1
 801077a:	b29b      	uxth	r3, r3
 801077c:	e7df      	b.n	801073e <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 801077e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8010782:	2b00      	cmp	r3, #0
 8010784:	d1cf      	bne.n	8010726 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8010786:	b01b      	add	sp, #108	; 0x6c
 8010788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801078c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8010790:	42b3      	cmp	r3, r6
 8010792:	d90c      	bls.n	80107ae <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8010794:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8010798:	6822      	ldr	r2, [r4, #0]
 801079a:	3601      	adds	r6, #1
 801079c:	4620      	mov	r0, r4
 801079e:	6c17      	ldr	r7, [r2, #64]	; 0x40
 80107a0:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 80107a4:	b2b6      	uxth	r6, r6
 80107a6:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 80107aa:	47b8      	blx	r7
 80107ac:	e7ee      	b.n	801078c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80107ae:	4a9a      	ldr	r2, [pc, #616]	; (8010a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80107b0:	6813      	ldr	r3, [r2, #0]
 80107b2:	4691      	mov	r9, r2
 80107b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	f040 80e0 	bne.w	801097e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 80107be:	8829      	ldrh	r1, [r5, #0]
 80107c0:	2600      	movs	r6, #0
 80107c2:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 80107c6:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 80107ca:	33ae      	adds	r3, #174	; 0xae
 80107cc:	428f      	cmp	r7, r1
 80107ce:	f103 0308 	add.w	r3, r3, #8
 80107d2:	dd0a      	ble.n	80107ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 80107d4:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80107d8:	3101      	adds	r1, #1
 80107da:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 80107de:	4402      	add	r2, r0
 80107e0:	b212      	sxth	r2, r2
 80107e2:	4296      	cmp	r6, r2
 80107e4:	bfb8      	it	lt
 80107e6:	4616      	movlt	r6, r2
 80107e8:	e7f0      	b.n	80107cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 80107ea:	4b8c      	ldr	r3, [pc, #560]	; (8010a1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80107ec:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8010a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 80107f0:	881b      	ldrh	r3, [r3, #0]
 80107f2:	2b0f      	cmp	r3, #15
 80107f4:	bf8c      	ite	hi
 80107f6:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 80107fa:	f04f 0b01 	movls.w	fp, #1
 80107fe:	2300      	movs	r3, #0
 8010800:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8010804:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8010808:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801080c:	4b82      	ldr	r3, [pc, #520]	; (8010a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801080e:	4438      	add	r0, r7
 8010810:	b207      	sxth	r7, r0
 8010812:	6818      	ldr	r0, [r3, #0]
 8010814:	42b7      	cmp	r7, r6
 8010816:	6803      	ldr	r3, [r0, #0]
 8010818:	f280 8083 	bge.w	8010922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801081c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010820:	4798      	blx	r3
 8010822:	eb07 030b 	add.w	r3, r7, fp
 8010826:	4298      	cmp	r0, r3
 8010828:	da07      	bge.n	801083a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801082a:	42b0      	cmp	r0, r6
 801082c:	da05      	bge.n	801083a <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801082e:	4287      	cmp	r7, r0
 8010830:	dd6c      	ble.n	801090c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8010832:	2f00      	cmp	r7, #0
 8010834:	dd6a      	ble.n	801090c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8010836:	4630      	mov	r0, r6
 8010838:	e004      	b.n	8010844 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 801083a:	4287      	cmp	r7, r0
 801083c:	dcfb      	bgt.n	8010836 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 801083e:	42b0      	cmp	r0, r6
 8010840:	bfa8      	it	ge
 8010842:	4630      	movge	r0, r6
 8010844:	4b76      	ldr	r3, [pc, #472]	; (8010a20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8010846:	1bc0      	subs	r0, r0, r7
 8010848:	2200      	movs	r2, #0
 801084a:	f8ad 7016 	strh.w	r7, [sp, #22]
 801084e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010852:	882f      	ldrh	r7, [r5, #0]
 8010854:	f8ad 2014 	strh.w	r2, [sp, #20]
 8010858:	f8ad 3018 	strh.w	r3, [sp, #24]
 801085c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8010860:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8010864:	42bb      	cmp	r3, r7
 8010866:	d9cd      	bls.n	8010804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8010868:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801086c:	ab07      	add	r3, sp, #28
 801086e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8010872:	6851      	ldr	r1, [r2, #4]
 8010874:	c303      	stmia	r3!, {r0, r1}
 8010876:	a905      	add	r1, sp, #20
 8010878:	a807      	add	r0, sp, #28
 801087a:	f7ff f9af 	bl	800fbdc <_ZNK8touchgfx4Rect9intersectERKS0_>
 801087e:	2800      	cmp	r0, #0
 8010880:	d04c      	beq.n	801091c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8010882:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8010886:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801088a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801088e:	4686      	mov	lr, r0
 8010890:	4290      	cmp	r0, r2
 8010892:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8010896:	4450      	add	r0, sl
 8010898:	f8bd a018 	ldrh.w	sl, [sp, #24]
 801089c:	bfb8      	it	lt
 801089e:	4696      	movlt	lr, r2
 80108a0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80108a4:	4452      	add	r2, sl
 80108a6:	b280      	uxth	r0, r0
 80108a8:	4299      	cmp	r1, r3
 80108aa:	468c      	mov	ip, r1
 80108ac:	b292      	uxth	r2, r2
 80108ae:	9302      	str	r3, [sp, #8]
 80108b0:	bfb8      	it	lt
 80108b2:	469c      	movlt	ip, r3
 80108b4:	b203      	sxth	r3, r0
 80108b6:	fa0f fa82 	sxth.w	sl, r2
 80108ba:	f8ad e01c 	strh.w	lr, [sp, #28]
 80108be:	f8ad c01e 	strh.w	ip, [sp, #30]
 80108c2:	4553      	cmp	r3, sl
 80108c4:	bfb8      	it	lt
 80108c6:	4602      	movlt	r2, r0
 80108c8:	9b02      	ldr	r3, [sp, #8]
 80108ca:	eba2 020e 	sub.w	r2, r2, lr
 80108ce:	f8ad 2020 	strh.w	r2, [sp, #32]
 80108d2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80108d6:	4411      	add	r1, r2
 80108d8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80108dc:	4413      	add	r3, r2
 80108de:	b289      	uxth	r1, r1
 80108e0:	b29b      	uxth	r3, r3
 80108e2:	b208      	sxth	r0, r1
 80108e4:	b21a      	sxth	r2, r3
 80108e6:	4290      	cmp	r0, r2
 80108e8:	bfb8      	it	lt
 80108ea:	460b      	movlt	r3, r1
 80108ec:	eba3 030c 	sub.w	r3, r3, ip
 80108f0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80108f4:	a807      	add	r0, sp, #28
 80108f6:	f7fd f926 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 80108fa:	b920      	cbnz	r0, 8010906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80108fc:	6823      	ldr	r3, [r4, #0]
 80108fe:	a907      	add	r1, sp, #28
 8010900:	4620      	mov	r0, r4
 8010902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010904:	4798      	blx	r3
 8010906:	3701      	adds	r7, #1
 8010908:	b2bf      	uxth	r7, r7
 801090a:	e7a9      	b.n	8010860 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801090c:	f8d9 0000 	ldr.w	r0, [r9]
 8010910:	2101      	movs	r1, #1
 8010912:	6803      	ldr	r3, [r0, #0]
 8010914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010918:	4798      	blx	r3
 801091a:	e773      	b.n	8010804 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 801091c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8010920:	e7e8      	b.n	80108f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8010922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010924:	4798      	blx	r3
 8010926:	4b3f      	ldr	r3, [pc, #252]	; (8010a24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	2b00      	cmp	r3, #0
 801092c:	f43f af2b 	beq.w	8010786 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8010930:	2300      	movs	r3, #0
 8010932:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8010936:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801093a:	882b      	ldrh	r3, [r5, #0]
 801093c:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8010940:	42ab      	cmp	r3, r5
 8010942:	f4bf af20 	bcs.w	8010786 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8010946:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 801094a:	2907      	cmp	r1, #7
 801094c:	d814      	bhi.n	8010978 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 801094e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8010952:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8010956:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801095a:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 801095e:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8010962:	1c4a      	adds	r2, r1, #1
 8010964:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8010968:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801096c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8010970:	f8a2 c002 	strh.w	ip, [r2, #2]
 8010974:	8097      	strh	r7, [r2, #4]
 8010976:	80d6      	strh	r6, [r2, #6]
 8010978:	3301      	adds	r3, #1
 801097a:	b29b      	uxth	r3, r3
 801097c:	e7e0      	b.n	8010940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 801097e:	2b02      	cmp	r3, #2
 8010980:	f040 8133 	bne.w	8010bea <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8010984:	4b28      	ldr	r3, [pc, #160]	; (8010a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8010986:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	2b01      	cmp	r3, #1
 801098e:	f000 8098 	beq.w	8010ac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8010992:	882a      	ldrh	r2, [r5, #0]
 8010994:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 8010998:	3201      	adds	r2, #1
 801099a:	b292      	uxth	r2, r2
 801099c:	2900      	cmp	r1, #0
 801099e:	d0c2      	beq.n	8010926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80109a0:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 80109a4:	4694      	mov	ip, r2
 80109a6:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 80109aa:	f04f 0900 	mov.w	r9, #0
 80109ae:	441e      	add	r6, r3
 80109b0:	b236      	sxth	r6, r6
 80109b2:	fa1f f38c 	uxth.w	r3, ip
 80109b6:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 80109ba:	4299      	cmp	r1, r3
 80109bc:	f240 80be 	bls.w	8010b3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 80109c0:	4427      	add	r7, r4
 80109c2:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 80109c6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80109ca:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 80109ce:	4283      	cmp	r3, r0
 80109d0:	f340 80a0 	ble.w	8010b14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 80109d4:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 80109d8:	46e1      	mov	r9, ip
 80109da:	4406      	add	r6, r0
 80109dc:	b236      	sxth	r6, r6
 80109de:	429e      	cmp	r6, r3
 80109e0:	bfa8      	it	ge
 80109e2:	461e      	movge	r6, r3
 80109e4:	f10c 0c01 	add.w	ip, ip, #1
 80109e8:	e7e3      	b.n	80109b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 80109ea:	d10a      	bne.n	8010a02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80109ec:	4562      	cmp	r2, ip
 80109ee:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 80109f2:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 80109f6:	bfb8      	it	lt
 80109f8:	4662      	movlt	r2, ip
 80109fa:	4288      	cmp	r0, r1
 80109fc:	bfb8      	it	lt
 80109fe:	461f      	movlt	r7, r3
 8010a00:	e086      	b.n	8010b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8010a02:	428a      	cmp	r2, r1
 8010a04:	bfb8      	it	lt
 8010a06:	460a      	movlt	r2, r1
 8010a08:	e082      	b.n	8010b10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8010a0a:	bf00      	nop
 8010a0c:	2401a9f0 	.word	0x2401a9f0
 8010a10:	2401a9fc 	.word	0x2401a9fc
 8010a14:	24000020 	.word	0x24000020
 8010a18:	2401a9b8 	.word	0x2401a9b8
 8010a1c:	2401a9ae 	.word	0x2401a9ae
 8010a20:	2401a9ac 	.word	0x2401a9ac
 8010a24:	2401a9b6 	.word	0x2401a9b6
 8010a28:	2401a9b0 	.word	0x2401a9b0
 8010a2c:	19a1      	adds	r1, r4, r6
 8010a2e:	ab07      	add	r3, sp, #28
 8010a30:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8010a34:	6849      	ldr	r1, [r1, #4]
 8010a36:	c303      	stmia	r3!, {r0, r1}
 8010a38:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8010a3c:	a807      	add	r0, sp, #28
 8010a3e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010a42:	2b13      	cmp	r3, #19
 8010a44:	440b      	add	r3, r1
 8010a46:	bfd8      	it	le
 8010a48:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8010a4c:	1a9b      	subs	r3, r3, r2
 8010a4e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010a52:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010a56:	f7ff f811 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8010a5a:	a807      	add	r0, sp, #28
 8010a5c:	f7fd f873 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010a60:	bb78      	cbnz	r0, 8010ac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8010a62:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8010a66:	4426      	add	r6, r4
 8010a68:	f8d9 0000 	ldr.w	r0, [r9]
 8010a6c:	f1bc 0f14 	cmp.w	ip, #20
 8010a70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8010a74:	f8d0 e000 	ldr.w	lr, [r0]
 8010a78:	bfa8      	it	ge
 8010a7a:	f04f 0c14 	movge.w	ip, #20
 8010a7e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8010a82:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8010a86:	fa1f fc8c 	uxth.w	ip, ip
 8010a8a:	f8cd c000 	str.w	ip, [sp]
 8010a8e:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8010a92:	47d8      	blx	fp
 8010a94:	4683      	mov	fp, r0
 8010a96:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010a9a:	a807      	add	r0, sp, #28
 8010a9c:	f7fe ffd4 	bl	800fa48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	4620      	mov	r0, r4
 8010aa4:	a907      	add	r1, sp, #28
 8010aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010aa8:	4798      	blx	r3
 8010aaa:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8010aae:	eba0 000b 	sub.w	r0, r0, fp
 8010ab2:	b200      	sxth	r0, r0
 8010ab4:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 8010ab8:	b918      	cbnz	r0, 8010ac2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8010aba:	b2b9      	uxth	r1, r7
 8010abc:	4650      	mov	r0, sl
 8010abe:	f7ff fa7b 	bl	800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010ac2:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 8010ac6:	f1bb 0f00 	cmp.w	fp, #0
 8010aca:	f43f af2c 	beq.w	8010926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8010ace:	882b      	ldrh	r3, [r5, #0]
 8010ad0:	2700      	movs	r7, #0
 8010ad2:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	b29b      	uxth	r3, r3
 8010ada:	b299      	uxth	r1, r3
 8010adc:	00fe      	lsls	r6, r7, #3
 8010ade:	458b      	cmp	fp, r1
 8010ae0:	d9a4      	bls.n	8010a2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8010ae2:	4426      	add	r6, r4
 8010ae4:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8010ae8:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 8010aec:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8010af0:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 8010af4:	4408      	add	r0, r1
 8010af6:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 8010afa:	4461      	add	r1, ip
 8010afc:	b200      	sxth	r0, r0
 8010afe:	b209      	sxth	r1, r1
 8010b00:	4288      	cmp	r0, r1
 8010b02:	f6bf af72 	bge.w	80109ea <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 8010b06:	4584      	cmp	ip, r0
 8010b08:	4662      	mov	r2, ip
 8010b0a:	461f      	mov	r7, r3
 8010b0c:	bfb8      	it	lt
 8010b0e:	4602      	movlt	r2, r0
 8010b10:	3301      	adds	r3, #1
 8010b12:	e7e2      	b.n	8010ada <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8010b14:	d10e      	bne.n	8010b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 8010b16:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8010b1a:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 8010b1e:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8010b22:	4473      	add	r3, lr
 8010b24:	b21b      	sxth	r3, r3
 8010b26:	429e      	cmp	r6, r3
 8010b28:	bfa8      	it	ge
 8010b2a:	461e      	movge	r6, r3
 8010b2c:	4287      	cmp	r7, r0
 8010b2e:	bfb8      	it	lt
 8010b30:	46e1      	movlt	r9, ip
 8010b32:	e757      	b.n	80109e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8010b34:	4286      	cmp	r6, r0
 8010b36:	bfa8      	it	ge
 8010b38:	4606      	movge	r6, r0
 8010b3a:	e753      	b.n	80109e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 8010b3c:	eb0a 0007 	add.w	r0, sl, r7
 8010b40:	4427      	add	r7, r4
 8010b42:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 8010b46:	f1bb 0f13 	cmp.w	fp, #19
 8010b4a:	bfdc      	itt	le
 8010b4c:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8010b50:	445e      	addle	r6, fp
 8010b52:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010b56:	bfd8      	it	le
 8010b58:	b236      	sxthle	r6, r6
 8010b5a:	f7fc fff4 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010b5e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010b62:	2800      	cmp	r0, #0
 8010b64:	f47f af1a 	bne.w	801099c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8010b68:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8010b6c:	fa1f fb8b 	uxth.w	fp, fp
 8010b70:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010b74:	1ab6      	subs	r6, r6, r2
 8010b76:	4829      	ldr	r0, [pc, #164]	; (8010c1c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8010b78:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8010b7c:	2e14      	cmp	r6, #20
 8010b7e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8010b82:	6800      	ldr	r0, [r0, #0]
 8010b84:	bfa8      	it	ge
 8010b86:	2614      	movge	r6, #20
 8010b88:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010b8c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8010b90:	b289      	uxth	r1, r1
 8010b92:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010b96:	b2b6      	uxth	r6, r6
 8010b98:	f8d0 c000 	ldr.w	ip, [r0]
 8010b9c:	b292      	uxth	r2, r2
 8010b9e:	455e      	cmp	r6, fp
 8010ba0:	bf94      	ite	ls
 8010ba2:	9600      	strls	r6, [sp, #0]
 8010ba4:	f8cd b000 	strhi.w	fp, [sp]
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8010bae:	47b0      	blx	r6
 8010bb0:	6823      	ldr	r3, [r4, #0]
 8010bb2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8010bb6:	a907      	add	r1, sp, #28
 8010bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010bba:	4620      	mov	r0, r4
 8010bbc:	4798      	blx	r3
 8010bbe:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8010bc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8010bc6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8010bca:	1a5b      	subs	r3, r3, r1
 8010bcc:	440a      	add	r2, r1
 8010bce:	b21b      	sxth	r3, r3
 8010bd0:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8010bd4:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	f47f aeda 	bne.w	8010992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8010bde:	fa1f f189 	uxth.w	r1, r9
 8010be2:	4650      	mov	r0, sl
 8010be4:	f7ff f9e8 	bl	800ffb8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8010be8:	e6d3      	b.n	8010992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8010bea:	882e      	ldrh	r6, [r5, #0]
 8010bec:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8010bf0:	42b3      	cmp	r3, r6
 8010bf2:	f67f ae98 	bls.w	8010926 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8010bf6:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8010bfa:	ab07      	add	r3, sp, #28
 8010bfc:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8010c00:	6851      	ldr	r1, [r2, #4]
 8010c02:	c303      	stmia	r3!, {r0, r1}
 8010c04:	a807      	add	r0, sp, #28
 8010c06:	f7fc ff9e 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010c0a:	b920      	cbnz	r0, 8010c16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	a907      	add	r1, sp, #28
 8010c10:	4620      	mov	r0, r4
 8010c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010c14:	4798      	blx	r3
 8010c16:	3601      	adds	r6, #1
 8010c18:	b2b6      	uxth	r6, r6
 8010c1a:	e7e7      	b.n	8010bec <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8010c1c:	2401a9b8 	.word	0x2401a9b8

08010c20 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8010c20:	4b03      	ldr	r3, [pc, #12]	; (8010c30 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8010c22:	2200      	movs	r2, #0
 8010c24:	801a      	strh	r2, [r3, #0]
 8010c26:	805a      	strh	r2, [r3, #2]
 8010c28:	809a      	strh	r2, [r3, #4]
 8010c2a:	80da      	strh	r2, [r3, #6]
 8010c2c:	4770      	bx	lr
 8010c2e:	bf00      	nop
 8010c30:	2401a9fc 	.word	0x2401a9fc

08010c34 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8010c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c38:	b09d      	sub	sp, #116	; 0x74
 8010c3a:	4606      	mov	r6, r0
 8010c3c:	4614      	mov	r4, r2
 8010c3e:	468a      	mov	sl, r1
 8010c40:	a803      	add	r0, sp, #12
 8010c42:	461d      	mov	r5, r3
 8010c44:	f000 fd72 	bl	801172c <_ZN8touchgfx12TextProviderC1Ev>
 8010c48:	6833      	ldr	r3, [r6, #0]
 8010c4a:	4630      	mov	r0, r6
 8010c4c:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8010c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c52:	4798      	blx	r3
 8010c54:	6833      	ldr	r3, [r6, #0]
 8010c56:	4607      	mov	r7, r0
 8010c58:	4630      	mov	r0, r6
 8010c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c5c:	4798      	blx	r3
 8010c5e:	462a      	mov	r2, r5
 8010c60:	2500      	movs	r5, #0
 8010c62:	4621      	mov	r1, r4
 8010c64:	9000      	str	r0, [sp, #0]
 8010c66:	463b      	mov	r3, r7
 8010c68:	462c      	mov	r4, r5
 8010c6a:	46a9      	mov	r9, r5
 8010c6c:	46a8      	mov	r8, r5
 8010c6e:	a803      	add	r0, sp, #12
 8010c70:	f000 fdaf 	bl	80117d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010c74:	2300      	movs	r3, #0
 8010c76:	9302      	str	r3, [sp, #8]
 8010c78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010c7c:	429c      	cmp	r4, r3
 8010c7e:	d002      	beq.n	8010c86 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8010c80:	455c      	cmp	r4, fp
 8010c82:	bf18      	it	ne
 8010c84:	4625      	movne	r5, r4
 8010c86:	ab02      	add	r3, sp, #8
 8010c88:	4632      	mov	r2, r6
 8010c8a:	4651      	mov	r1, sl
 8010c8c:	a803      	add	r0, sp, #12
 8010c8e:	f001 f895 	bl	8011dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010c92:	4604      	mov	r4, r0
 8010c94:	b108      	cbz	r0, 8010c9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8010c96:	280a      	cmp	r0, #10
 8010c98:	d10a      	bne.n	8010cb0 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8010c9a:	45c1      	cmp	r9, r8
 8010c9c:	bf38      	it	cc
 8010c9e:	46c1      	movcc	r9, r8
 8010ca0:	f04f 0800 	mov.w	r8, #0
 8010ca4:	2c00      	cmp	r4, #0
 8010ca6:	d1e5      	bne.n	8010c74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8010ca8:	4648      	mov	r0, r9
 8010caa:	b01d      	add	sp, #116	; 0x74
 8010cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb0:	9a02      	ldr	r2, [sp, #8]
 8010cb2:	2a00      	cmp	r2, #0
 8010cb4:	d0de      	beq.n	8010c74 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8010cb6:	7b57      	ldrb	r7, [r2, #13]
 8010cb8:	4629      	mov	r1, r5
 8010cba:	6833      	ldr	r3, [r6, #0]
 8010cbc:	007f      	lsls	r7, r7, #1
 8010cbe:	8894      	ldrh	r4, [r2, #4]
 8010cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cc2:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8010cc6:	7a97      	ldrb	r7, [r2, #10]
 8010cc8:	4307      	orrs	r7, r0
 8010cca:	4630      	mov	r0, r6
 8010ccc:	4798      	blx	r3
 8010cce:	4438      	add	r0, r7
 8010cd0:	4480      	add	r8, r0
 8010cd2:	fa1f f888 	uxth.w	r8, r8
 8010cd6:	e7e5      	b.n	8010ca4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08010cd8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8010cd8:	b508      	push	{r3, lr}
 8010cda:	6803      	ldr	r3, [r0, #0]
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	4798      	blx	r3
 8010ce0:	b128      	cbz	r0, 8010cee <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8010ce2:	7b43      	ldrb	r3, [r0, #13]
 8010ce4:	7a80      	ldrb	r0, [r0, #10]
 8010ce6:	005b      	lsls	r3, r3, #1
 8010ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cec:	4318      	orrs	r0, r3
 8010cee:	bd08      	pop	{r3, pc}

08010cf0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8010cf0:	b40e      	push	{r1, r2, r3}
 8010cf2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf4:	b09e      	sub	sp, #120	; 0x78
 8010cf6:	4605      	mov	r5, r0
 8010cf8:	ab23      	add	r3, sp, #140	; 0x8c
 8010cfa:	a805      	add	r0, sp, #20
 8010cfc:	f853 4b04 	ldr.w	r4, [r3], #4
 8010d00:	9303      	str	r3, [sp, #12]
 8010d02:	f000 fd13 	bl	801172c <_ZN8touchgfx12TextProviderC1Ev>
 8010d06:	682b      	ldr	r3, [r5, #0]
 8010d08:	4628      	mov	r0, r5
 8010d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010d0c:	4798      	blx	r3
 8010d0e:	682b      	ldr	r3, [r5, #0]
 8010d10:	4606      	mov	r6, r0
 8010d12:	4628      	mov	r0, r5
 8010d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d16:	4798      	blx	r3
 8010d18:	4633      	mov	r3, r6
 8010d1a:	4621      	mov	r1, r4
 8010d1c:	ae1e      	add	r6, sp, #120	; 0x78
 8010d1e:	2400      	movs	r4, #0
 8010d20:	9000      	str	r0, [sp, #0]
 8010d22:	9a03      	ldr	r2, [sp, #12]
 8010d24:	a805      	add	r0, sp, #20
 8010d26:	f000 fd54 	bl	80117d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010d2a:	f846 4d68 	str.w	r4, [r6, #-104]!
 8010d2e:	462a      	mov	r2, r5
 8010d30:	4633      	mov	r3, r6
 8010d32:	4621      	mov	r1, r4
 8010d34:	a805      	add	r0, sp, #20
 8010d36:	f001 f841 	bl	8011dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010d3a:	b300      	cbz	r0, 8010d7e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8010d3c:	280a      	cmp	r0, #10
 8010d3e:	d01a      	beq.n	8010d76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8010d40:	9f04      	ldr	r7, [sp, #16]
 8010d42:	b1c7      	cbz	r7, 8010d76 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8010d44:	7b78      	ldrb	r0, [r7, #13]
 8010d46:	7a3b      	ldrb	r3, [r7, #8]
 8010d48:	00c1      	lsls	r1, r0, #3
 8010d4a:	88ea      	ldrh	r2, [r5, #6]
 8010d4c:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8010d50:	4319      	orrs	r1, r3
 8010d52:	0643      	lsls	r3, r0, #25
 8010d54:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8010d58:	bf48      	it	mi
 8010d5a:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8010d5e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8010d62:	bf48      	it	mi
 8010d64:	b219      	sxthmi	r1, r3
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	4303      	orrs	r3, r0
 8010d6a:	4413      	add	r3, r2
 8010d6c:	1a5b      	subs	r3, r3, r1
 8010d6e:	b21b      	sxth	r3, r3
 8010d70:	429c      	cmp	r4, r3
 8010d72:	bfb8      	it	lt
 8010d74:	461c      	movlt	r4, r3
 8010d76:	4633      	mov	r3, r6
 8010d78:	462a      	mov	r2, r5
 8010d7a:	2100      	movs	r1, #0
 8010d7c:	e7da      	b.n	8010d34 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8010d7e:	b2a0      	uxth	r0, r4
 8010d80:	b01e      	add	sp, #120	; 0x78
 8010d82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010d86:	b003      	add	sp, #12
 8010d88:	4770      	bx	lr

08010d8a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8010d8a:	7a43      	ldrb	r3, [r0, #9]
 8010d8c:	8880      	ldrh	r0, [r0, #4]
 8010d8e:	4418      	add	r0, r3
 8010d90:	b280      	uxth	r0, r0
 8010d92:	4770      	bx	lr

08010d94 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8010d94:	6803      	ldr	r3, [r0, #0]
 8010d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d98:	4718      	bx	r3

08010d9a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8010d9a:	b40e      	push	{r1, r2, r3}
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	b09d      	sub	sp, #116	; 0x74
 8010da0:	4604      	mov	r4, r0
 8010da2:	ab21      	add	r3, sp, #132	; 0x84
 8010da4:	a803      	add	r0, sp, #12
 8010da6:	f853 5b04 	ldr.w	r5, [r3], #4
 8010daa:	9302      	str	r3, [sp, #8]
 8010dac:	f000 fcbe 	bl	801172c <_ZN8touchgfx12TextProviderC1Ev>
 8010db0:	6823      	ldr	r3, [r4, #0]
 8010db2:	4620      	mov	r0, r4
 8010db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010db6:	4798      	blx	r3
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	4606      	mov	r6, r0
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dc0:	2401      	movs	r4, #1
 8010dc2:	4798      	blx	r3
 8010dc4:	4633      	mov	r3, r6
 8010dc6:	9000      	str	r0, [sp, #0]
 8010dc8:	4629      	mov	r1, r5
 8010dca:	9a02      	ldr	r2, [sp, #8]
 8010dcc:	a803      	add	r0, sp, #12
 8010dce:	f000 fd00 	bl	80117d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010dd2:	a803      	add	r0, sp, #12
 8010dd4:	f001 f872 	bl	8011ebc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010dd8:	b2a3      	uxth	r3, r4
 8010dda:	b138      	cbz	r0, 8010dec <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8010ddc:	280a      	cmp	r0, #10
 8010dde:	a803      	add	r0, sp, #12
 8010de0:	bf04      	itt	eq
 8010de2:	3301      	addeq	r3, #1
 8010de4:	b21c      	sxtheq	r4, r3
 8010de6:	f001 f869 	bl	8011ebc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010dea:	e7f5      	b.n	8010dd8 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8010dec:	4618      	mov	r0, r3
 8010dee:	b01d      	add	sp, #116	; 0x74
 8010df0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010df4:	b003      	add	sp, #12
 8010df6:	4770      	bx	lr

08010df8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8010df8:	b40e      	push	{r1, r2, r3}
 8010dfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dfc:	b09e      	sub	sp, #120	; 0x78
 8010dfe:	4604      	mov	r4, r0
 8010e00:	ab23      	add	r3, sp, #140	; 0x8c
 8010e02:	a805      	add	r0, sp, #20
 8010e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e08:	9303      	str	r3, [sp, #12]
 8010e0a:	f000 fc8f 	bl	801172c <_ZN8touchgfx12TextProviderC1Ev>
 8010e0e:	6823      	ldr	r3, [r4, #0]
 8010e10:	4620      	mov	r0, r4
 8010e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e14:	4798      	blx	r3
 8010e16:	6823      	ldr	r3, [r4, #0]
 8010e18:	4606      	mov	r6, r0
 8010e1a:	4620      	mov	r0, r4
 8010e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e1e:	4798      	blx	r3
 8010e20:	4633      	mov	r3, r6
 8010e22:	4629      	mov	r1, r5
 8010e24:	9000      	str	r0, [sp, #0]
 8010e26:	9a03      	ldr	r2, [sp, #12]
 8010e28:	a805      	add	r0, sp, #20
 8010e2a:	f000 fcd2 	bl	80117d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010e2e:	ad1e      	add	r5, sp, #120	; 0x78
 8010e30:	2100      	movs	r1, #0
 8010e32:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8010e36:	4622      	mov	r2, r4
 8010e38:	a805      	add	r0, sp, #20
 8010e3a:	f845 1d68 	str.w	r1, [r5, #-104]!
 8010e3e:	462b      	mov	r3, r5
 8010e40:	f000 ffbc 	bl	8011dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010e44:	b1d8      	cbz	r0, 8010e7e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8010e46:	280a      	cmp	r0, #10
 8010e48:	d012      	beq.n	8010e70 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8010e4a:	9804      	ldr	r0, [sp, #16]
 8010e4c:	b180      	cbz	r0, 8010e70 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8010e4e:	7b47      	ldrb	r7, [r0, #13]
 8010e50:	88e2      	ldrh	r2, [r4, #6]
 8010e52:	00fb      	lsls	r3, r7, #3
 8010e54:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8010e58:	7a03      	ldrb	r3, [r0, #8]
 8010e5a:	430b      	orrs	r3, r1
 8010e5c:	0679      	lsls	r1, r7, #25
 8010e5e:	bf44      	itt	mi
 8010e60:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8010e64:	b21b      	sxthmi	r3, r3
 8010e66:	1ad3      	subs	r3, r2, r3
 8010e68:	b21b      	sxth	r3, r3
 8010e6a:	429e      	cmp	r6, r3
 8010e6c:	bfa8      	it	ge
 8010e6e:	461e      	movge	r6, r3
 8010e70:	462b      	mov	r3, r5
 8010e72:	4622      	mov	r2, r4
 8010e74:	2100      	movs	r1, #0
 8010e76:	a805      	add	r0, sp, #20
 8010e78:	f000 ffa0 	bl	8011dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8010e7c:	e7e2      	b.n	8010e44 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8010e7e:	4630      	mov	r0, r6
 8010e80:	b01e      	add	sp, #120	; 0x78
 8010e82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e86:	b003      	add	sp, #12
 8010e88:	4770      	bx	lr

08010e8a <_ZNK8touchgfx8Drawable10invalidateEv>:
 8010e8a:	b513      	push	{r0, r1, r4, lr}
 8010e8c:	6803      	ldr	r3, [r0, #0]
 8010e8e:	2400      	movs	r4, #0
 8010e90:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8010e94:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010e98:	f8ad 1004 	strh.w	r1, [sp, #4]
 8010e9c:	4669      	mov	r1, sp
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	9400      	str	r4, [sp, #0]
 8010ea2:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010ea6:	4798      	blx	r3
 8010ea8:	b002      	add	sp, #8
 8010eaa:	bd10      	pop	{r4, pc}

08010eac <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8010eac:	b538      	push	{r3, r4, r5, lr}
 8010eae:	680b      	ldr	r3, [r1, #0]
 8010eb0:	460c      	mov	r4, r1
 8010eb2:	4605      	mov	r5, r0
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	4798      	blx	r3
 8010eb8:	6823      	ldr	r3, [r4, #0]
 8010eba:	4620      	mov	r0, r4
 8010ebc:	4629      	mov	r1, r5
 8010ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec0:	4798      	blx	r3
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	bd38      	pop	{r3, r4, r5, pc}

08010ec6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8010ec6:	b410      	push	{r4}
 8010ec8:	880a      	ldrh	r2, [r1, #0]
 8010eca:	8884      	ldrh	r4, [r0, #4]
 8010ecc:	4422      	add	r2, r4
 8010ece:	800a      	strh	r2, [r1, #0]
 8010ed0:	884a      	ldrh	r2, [r1, #2]
 8010ed2:	88c4      	ldrh	r4, [r0, #6]
 8010ed4:	4422      	add	r2, r4
 8010ed6:	804a      	strh	r2, [r1, #2]
 8010ed8:	6940      	ldr	r0, [r0, #20]
 8010eda:	b120      	cbz	r0, 8010ee6 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8010edc:	6803      	ldr	r3, [r0, #0]
 8010ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ee4:	4718      	bx	r3
 8010ee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8010eec:	b570      	push	{r4, r5, r6, lr}
 8010eee:	8882      	ldrh	r2, [r0, #4]
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	880b      	ldrh	r3, [r1, #0]
 8010ef4:	4605      	mov	r5, r0
 8010ef6:	4413      	add	r3, r2
 8010ef8:	800b      	strh	r3, [r1, #0]
 8010efa:	884b      	ldrh	r3, [r1, #2]
 8010efc:	88c2      	ldrh	r2, [r0, #6]
 8010efe:	4413      	add	r3, r2
 8010f00:	804b      	strh	r3, [r1, #2]
 8010f02:	1d01      	adds	r1, r0, #4
 8010f04:	4620      	mov	r0, r4
 8010f06:	f7fc fddb 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 8010f0a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	dd0b      	ble.n	8010f2a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010f12:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	dd07      	ble.n	8010f2a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010f1a:	6968      	ldr	r0, [r5, #20]
 8010f1c:	b128      	cbz	r0, 8010f2a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8010f1e:	6803      	ldr	r3, [r0, #0]
 8010f20:	4621      	mov	r1, r4
 8010f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f28:	4718      	bx	r3
 8010f2a:	bd70      	pop	{r4, r5, r6, pc}

08010f2c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8010f2c:	b570      	push	{r4, r5, r6, lr}
 8010f2e:	8882      	ldrh	r2, [r0, #4]
 8010f30:	460c      	mov	r4, r1
 8010f32:	880b      	ldrh	r3, [r1, #0]
 8010f34:	4605      	mov	r5, r0
 8010f36:	4413      	add	r3, r2
 8010f38:	800b      	strh	r3, [r1, #0]
 8010f3a:	884b      	ldrh	r3, [r1, #2]
 8010f3c:	88c2      	ldrh	r2, [r0, #6]
 8010f3e:	4413      	add	r3, r2
 8010f40:	804b      	strh	r3, [r1, #2]
 8010f42:	1d01      	adds	r1, r0, #4
 8010f44:	4620      	mov	r0, r4
 8010f46:	f7fc fdbb 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 8010f4a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	dd19      	ble.n	8010f86 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8010f52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	dd15      	ble.n	8010f86 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8010f5a:	6968      	ldr	r0, [r5, #20]
 8010f5c:	b128      	cbz	r0, 8010f6a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8010f5e:	6803      	ldr	r3, [r0, #0]
 8010f60:	4621      	mov	r1, r4
 8010f62:	691b      	ldr	r3, [r3, #16]
 8010f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f68:	4718      	bx	r3
 8010f6a:	4b07      	ldr	r3, [pc, #28]	; (8010f88 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	3304      	adds	r3, #4
 8010f70:	429d      	cmp	r5, r3
 8010f72:	d108      	bne.n	8010f86 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8010f74:	f7fe ff10 	bl	800fd98 <_ZN8touchgfx11Application11getInstanceEv>
 8010f78:	6803      	ldr	r3, [r0, #0]
 8010f7a:	6821      	ldr	r1, [r4, #0]
 8010f7c:	6862      	ldr	r2, [r4, #4]
 8010f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f84:	4718      	bx	r3
 8010f86:	bd70      	pop	{r4, r5, r6, pc}
 8010f88:	2401a9f4 	.word	0x2401a9f4

08010f8c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8010f8c:	b570      	push	{r4, r5, r6, lr}
 8010f8e:	4604      	mov	r4, r0
 8010f90:	4616      	mov	r6, r2
 8010f92:	460d      	mov	r5, r1
 8010f94:	b901      	cbnz	r1, 8010f98 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8010f96:	b192      	cbz	r2, 8010fbe <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8010f98:	6823      	ldr	r3, [r4, #0]
 8010f9a:	4620      	mov	r0, r4
 8010f9c:	699b      	ldr	r3, [r3, #24]
 8010f9e:	4798      	blx	r3
 8010fa0:	88e2      	ldrh	r2, [r4, #6]
 8010fa2:	88a1      	ldrh	r1, [r4, #4]
 8010fa4:	4620      	mov	r0, r4
 8010fa6:	4432      	add	r2, r6
 8010fa8:	4429      	add	r1, r5
 8010faa:	b212      	sxth	r2, r2
 8010fac:	b209      	sxth	r1, r1
 8010fae:	f7f9 fa1a 	bl	800a3e6 <_ZN8touchgfx8Drawable5setXYEss>
 8010fb2:	6823      	ldr	r3, [r4, #0]
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	699b      	ldr	r3, [r3, #24]
 8010fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fbc:	4718      	bx	r3
 8010fbe:	bd70      	pop	{r4, r5, r6, pc}

08010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8010fc0:	b510      	push	{r4, lr}
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	4604      	mov	r4, r0
 8010fc6:	4608      	mov	r0, r1
 8010fc8:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8010fcc:	8023      	strh	r3, [r4, #0]
 8010fce:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8010fd2:	8063      	strh	r3, [r4, #2]
 8010fd4:	6803      	ldr	r3, [r0, #0]
 8010fd6:	80a1      	strh	r1, [r4, #4]
 8010fd8:	4621      	mov	r1, r4
 8010fda:	80e2      	strh	r2, [r4, #6]
 8010fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fde:	4798      	blx	r3
 8010fe0:	4620      	mov	r0, r4
 8010fe2:	bd10      	pop	{r4, pc}

08010fe4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8010fe4:	b530      	push	{r4, r5, lr}
 8010fe6:	8083      	strh	r3, [r0, #4]
 8010fe8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010fec:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8010ff0:	80c3      	strh	r3, [r0, #6]
 8010ff2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010ff6:	6141      	str	r1, [r0, #20]
 8010ff8:	7203      	strb	r3, [r0, #8]
 8010ffa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8010ffe:	8302      	strh	r2, [r0, #24]
 8011000:	7243      	strb	r3, [r0, #9]
 8011002:	7a83      	ldrb	r3, [r0, #10]
 8011004:	f365 0306 	bfi	r3, r5, #0, #7
 8011008:	f89d 501c 	ldrb.w	r5, [sp, #28]
 801100c:	f365 13c7 	bfi	r3, r5, #7, #1
 8011010:	7283      	strb	r3, [r0, #10]
 8011012:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8011016:	72c3      	strb	r3, [r0, #11]
 8011018:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801101c:	7303      	strb	r3, [r0, #12]
 801101e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8011022:	81c3      	strh	r3, [r0, #14]
 8011024:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8011028:	8203      	strh	r3, [r0, #16]
 801102a:	4b01      	ldr	r3, [pc, #4]	; (8011030 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801102c:	6003      	str	r3, [r0, #0]
 801102e:	bd30      	pop	{r4, r5, pc}
 8011030:	0801e58c 	.word	0x0801e58c

08011034 <_ZNK8touchgfx9ConstFont4findEt>:
 8011034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011036:	6944      	ldr	r4, [r0, #20]
 8011038:	b3bc      	cbz	r4, 80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801103a:	88a3      	ldrh	r3, [r4, #4]
 801103c:	8b02      	ldrh	r2, [r0, #24]
 801103e:	1acb      	subs	r3, r1, r3
 8011040:	f102 32ff 	add.w	r2, r2, #4294967295
 8011044:	d431      	bmi.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8011046:	4293      	cmp	r3, r2
 8011048:	dd0c      	ble.n	8011064 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801104a:	230e      	movs	r3, #14
 801104c:	fb03 4302 	mla	r3, r3, r2, r4
 8011050:	889b      	ldrh	r3, [r3, #4]
 8011052:	1a5b      	subs	r3, r3, r1
 8011054:	1ad3      	subs	r3, r2, r3
 8011056:	429a      	cmp	r2, r3
 8011058:	db27      	blt.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801105a:	2b00      	cmp	r3, #0
 801105c:	bfbc      	itt	lt
 801105e:	2302      	movlt	r3, #2
 8011060:	fb92 f3f3 	sdivlt	r3, r2, r3
 8011064:	2500      	movs	r5, #0
 8011066:	260e      	movs	r6, #14
 8011068:	4295      	cmp	r5, r2
 801106a:	dc1e      	bgt.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801106c:	fb06 4003 	mla	r0, r6, r3, r4
 8011070:	8887      	ldrh	r7, [r0, #4]
 8011072:	42b9      	cmp	r1, r7
 8011074:	d01a      	beq.n	80110ac <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8011076:	d20d      	bcs.n	8011094 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8011078:	1e5a      	subs	r2, r3, #1
 801107a:	4295      	cmp	r5, r2
 801107c:	dc15      	bgt.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801107e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8011082:	1a5b      	subs	r3, r3, r1
 8011084:	1ad3      	subs	r3, r2, r3
 8011086:	429a      	cmp	r2, r3
 8011088:	db0f      	blt.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801108a:	429d      	cmp	r5, r3
 801108c:	ddec      	ble.n	8011068 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801108e:	1953      	adds	r3, r2, r5
 8011090:	105b      	asrs	r3, r3, #1
 8011092:	e7e9      	b.n	8011068 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8011094:	1c5d      	adds	r5, r3, #1
 8011096:	42aa      	cmp	r2, r5
 8011098:	db07      	blt.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801109a:	8a43      	ldrh	r3, [r0, #18]
 801109c:	1acb      	subs	r3, r1, r3
 801109e:	442b      	add	r3, r5
 80110a0:	429d      	cmp	r5, r3
 80110a2:	dc02      	bgt.n	80110aa <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80110a4:	429a      	cmp	r2, r3
 80110a6:	dadf      	bge.n	8011068 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80110a8:	e7f1      	b.n	801108e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80110aa:	2000      	movs	r0, #0
 80110ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080110ae <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80110ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110b0:	4604      	mov	r4, r0
 80110b2:	4617      	mov	r7, r2
 80110b4:	461e      	mov	r6, r3
 80110b6:	b911      	cbnz	r1, 80110be <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80110b8:	2500      	movs	r5, #0
 80110ba:	4628      	mov	r0, r5
 80110bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110be:	290a      	cmp	r1, #10
 80110c0:	d0fa      	beq.n	80110b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80110c2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80110c6:	4291      	cmp	r1, r2
 80110c8:	d0f6      	beq.n	80110b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80110ca:	f242 020b 	movw	r2, #8203	; 0x200b
 80110ce:	4291      	cmp	r1, r2
 80110d0:	d0f2      	beq.n	80110b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80110d2:	f7ff ffaf 	bl	8011034 <_ZNK8touchgfx9ConstFont4findEt>
 80110d6:	4605      	mov	r5, r0
 80110d8:	b950      	cbnz	r0, 80110f0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80110da:	6823      	ldr	r3, [r4, #0]
 80110dc:	4620      	mov	r0, r4
 80110de:	691b      	ldr	r3, [r3, #16]
 80110e0:	4798      	blx	r3
 80110e2:	4601      	mov	r1, r0
 80110e4:	4620      	mov	r0, r4
 80110e6:	f7ff ffa5 	bl	8011034 <_ZNK8touchgfx9ConstFont4findEt>
 80110ea:	4605      	mov	r5, r0
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d0e3      	beq.n	80110b8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80110f0:	6823      	ldr	r3, [r4, #0]
 80110f2:	4629      	mov	r1, r5
 80110f4:	4620      	mov	r0, r4
 80110f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110f8:	4798      	blx	r3
 80110fa:	6038      	str	r0, [r7, #0]
 80110fc:	6823      	ldr	r3, [r4, #0]
 80110fe:	4620      	mov	r0, r4
 8011100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011102:	4798      	blx	r3
 8011104:	7030      	strb	r0, [r6, #0]
 8011106:	e7d8      	b.n	80110ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08011108 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8011108:	2000      	movs	r0, #0
 801110a:	4770      	bx	lr

0801110c <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801110c:	2001      	movs	r0, #1
 801110e:	4770      	bx	lr

08011110 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8011110:	2002      	movs	r0, #2
 8011112:	4770      	bx	lr

08011114 <_ZN8touchgfx12GestureEventD1Ev>:
 8011114:	4770      	bx	lr

08011116 <_ZN8touchgfx9DragEventD1Ev>:
 8011116:	4770      	bx	lr

08011118 <_ZN8touchgfx10ClickEventD1Ev>:
 8011118:	4770      	bx	lr

0801111a <_ZN8touchgfx10ClickEventD0Ev>:
 801111a:	b510      	push	{r4, lr}
 801111c:	4604      	mov	r4, r0
 801111e:	210c      	movs	r1, #12
 8011120:	f00a fdb9 	bl	801bc96 <_ZdlPvj>
 8011124:	4620      	mov	r0, r4
 8011126:	bd10      	pop	{r4, pc}

08011128 <_ZN8touchgfx9DragEventD0Ev>:
 8011128:	b510      	push	{r4, lr}
 801112a:	4604      	mov	r4, r0
 801112c:	2110      	movs	r1, #16
 801112e:	f00a fdb2 	bl	801bc96 <_ZdlPvj>
 8011132:	4620      	mov	r0, r4
 8011134:	bd10      	pop	{r4, pc}

08011136 <_ZN8touchgfx12GestureEventD0Ev>:
 8011136:	b510      	push	{r4, lr}
 8011138:	4604      	mov	r4, r0
 801113a:	210c      	movs	r1, #12
 801113c:	f00a fdab 	bl	801bc96 <_ZdlPvj>
 8011140:	4620      	mov	r0, r4
 8011142:	bd10      	pop	{r4, pc}

08011144 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8011144:	b530      	push	{r4, r5, lr}
 8011146:	460d      	mov	r5, r1
 8011148:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801114a:	b087      	sub	sp, #28
 801114c:	4604      	mov	r4, r0
 801114e:	b301      	cbz	r1, 8011192 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8011150:	a801      	add	r0, sp, #4
 8011152:	f7ff ff35 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011156:	892a      	ldrh	r2, [r5, #8]
 8011158:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801115c:	7928      	ldrb	r0, [r5, #4]
 801115e:	1ad2      	subs	r2, r2, r3
 8011160:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011162:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8011166:	441a      	add	r2, r3
 8011168:	896b      	ldrh	r3, [r5, #10]
 801116a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801116e:	f88d 0010 	strb.w	r0, [sp, #16]
 8011172:	1b5b      	subs	r3, r3, r5
 8011174:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8011176:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011178:	442b      	add	r3, r5
 801117a:	4d07      	ldr	r5, [pc, #28]	; (8011198 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801117c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8011180:	a903      	add	r1, sp, #12
 8011182:	9503      	str	r5, [sp, #12]
 8011184:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011188:	f8ad 3016 	strh.w	r3, [sp, #22]
 801118c:	6803      	ldr	r3, [r0, #0]
 801118e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011190:	4798      	blx	r3
 8011192:	b007      	add	sp, #28
 8011194:	bd30      	pop	{r4, r5, pc}
 8011196:	bf00      	nop
 8011198:	0801e614 	.word	0x0801e614

0801119c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801119c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80111a2:	b08a      	sub	sp, #40	; 0x28
 80111a4:	4604      	mov	r4, r0
 80111a6:	460d      	mov	r5, r1
 80111a8:	b113      	cbz	r3, 80111b0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80111aa:	790b      	ldrb	r3, [r1, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d044      	beq.n	801123a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80111b0:	f104 0804 	add.w	r8, r4, #4
 80111b4:	a803      	add	r0, sp, #12
 80111b6:	4641      	mov	r1, r8
 80111b8:	f7ff ff02 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111bc:	792b      	ldrb	r3, [r5, #4]
 80111be:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80111c2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80111c6:	b983      	cbnz	r3, 80111ea <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80111c8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80111cc:	892a      	ldrh	r2, [r5, #8]
 80111ce:	88e9      	ldrh	r1, [r5, #6]
 80111d0:	4640      	mov	r0, r8
 80111d2:	1b92      	subs	r2, r2, r6
 80111d4:	9301      	str	r3, [sp, #4]
 80111d6:	1bc9      	subs	r1, r1, r7
 80111d8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80111dc:	b212      	sxth	r2, r2
 80111de:	9300      	str	r3, [sp, #0]
 80111e0:	b209      	sxth	r1, r1
 80111e2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80111e6:	f7fc fb89 	bl	800d8fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80111ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80111ec:	b329      	cbz	r1, 801123a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80111ee:	a805      	add	r0, sp, #20
 80111f0:	f7ff fee6 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80111f4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80111f8:	792b      	ldrb	r3, [r5, #4]
 80111fa:	a907      	add	r1, sp, #28
 80111fc:	1abf      	subs	r7, r7, r2
 80111fe:	88ea      	ldrh	r2, [r5, #6]
 8011200:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8011202:	4417      	add	r7, r2
 8011204:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8011206:	f88d 3020 	strb.w	r3, [sp, #32]
 801120a:	4417      	add	r7, r2
 801120c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8011210:	1ab6      	subs	r6, r6, r2
 8011212:	892a      	ldrh	r2, [r5, #8]
 8011214:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8011218:	4416      	add	r6, r2
 801121a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801121c:	4416      	add	r6, r2
 801121e:	4a08      	ldr	r2, [pc, #32]	; (8011240 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8011220:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8011224:	2600      	movs	r6, #0
 8011226:	9207      	str	r2, [sp, #28]
 8011228:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801122c:	6803      	ldr	r3, [r0, #0]
 801122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011230:	4798      	blx	r3
 8011232:	792b      	ldrb	r3, [r5, #4]
 8011234:	b10b      	cbz	r3, 801123a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8011236:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801123a:	b00a      	add	sp, #40	; 0x28
 801123c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011240:	0801e5ec 	.word	0x0801e5ec

08011244 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8011244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011248:	460c      	mov	r4, r1
 801124a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801124c:	b088      	sub	sp, #32
 801124e:	4605      	mov	r5, r0
 8011250:	2900      	cmp	r1, #0
 8011252:	d06d      	beq.n	8011330 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8011254:	4668      	mov	r0, sp
 8011256:	f7ff feb3 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801125a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801125c:	88e3      	ldrh	r3, [r4, #6]
 801125e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8011262:	440b      	add	r3, r1
 8011264:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8011268:	b21b      	sxth	r3, r3
 801126a:	4543      	cmp	r3, r8
 801126c:	db31      	blt.n	80112d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801126e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8011272:	44c4      	add	ip, r8
 8011274:	fa0f fc8c 	sxth.w	ip, ip
 8011278:	4563      	cmp	r3, ip
 801127a:	da2a      	bge.n	80112d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801127c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801127e:	8926      	ldrh	r6, [r4, #8]
 8011280:	4416      	add	r6, r2
 8011282:	b236      	sxth	r6, r6
 8011284:	42be      	cmp	r6, r7
 8011286:	db24      	blt.n	80112d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011288:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801128c:	4438      	add	r0, r7
 801128e:	b200      	sxth	r0, r0
 8011290:	4286      	cmp	r6, r0
 8011292:	da1e      	bge.n	80112d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8011294:	8963      	ldrh	r3, [r4, #10]
 8011296:	4419      	add	r1, r3
 8011298:	b209      	sxth	r1, r1
 801129a:	4541      	cmp	r1, r8
 801129c:	db08      	blt.n	80112b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801129e:	4561      	cmp	r1, ip
 80112a0:	da06      	bge.n	80112b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	441a      	add	r2, r3
 80112a6:	b212      	sxth	r2, r2
 80112a8:	42ba      	cmp	r2, r7
 80112aa:	db01      	blt.n	80112b0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80112ac:	4282      	cmp	r2, r0
 80112ae:	db10      	blt.n	80112d2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80112b0:	4b21      	ldr	r3, [pc, #132]	; (8011338 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80112b2:	a904      	add	r1, sp, #16
 80112b4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80112b6:	9304      	str	r3, [sp, #16]
 80112b8:	2302      	movs	r3, #2
 80112ba:	f88d 3014 	strb.w	r3, [sp, #20]
 80112be:	2300      	movs	r3, #0
 80112c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80112c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80112c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80112cc:	6803      	ldr	r3, [r0, #0]
 80112ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112d0:	4798      	blx	r3
 80112d2:	1d29      	adds	r1, r5, #4
 80112d4:	a802      	add	r0, sp, #8
 80112d6:	f7ff fe73 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80112da:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80112de:	88e0      	ldrh	r0, [r4, #6]
 80112e0:	eba3 0808 	sub.w	r8, r3, r8
 80112e4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80112e8:	7921      	ldrb	r1, [r4, #4]
 80112ea:	fa1f f888 	uxth.w	r8, r8
 80112ee:	1bdf      	subs	r7, r3, r7
 80112f0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80112f4:	b2bb      	uxth	r3, r7
 80112f6:	4440      	add	r0, r8
 80112f8:	8922      	ldrh	r2, [r4, #8]
 80112fa:	8967      	ldrh	r7, [r4, #10]
 80112fc:	4460      	add	r0, ip
 80112fe:	89a4      	ldrh	r4, [r4, #12]
 8011300:	441a      	add	r2, r3
 8011302:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8011304:	44b8      	add	r8, r7
 8011306:	4423      	add	r3, r4
 8011308:	f8ad 0016 	strh.w	r0, [sp, #22]
 801130c:	4432      	add	r2, r6
 801130e:	44e0      	add	r8, ip
 8011310:	4433      	add	r3, r6
 8011312:	4c0a      	ldr	r4, [pc, #40]	; (801133c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8011314:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011316:	f88d 1014 	strb.w	r1, [sp, #20]
 801131a:	a904      	add	r1, sp, #16
 801131c:	9404      	str	r4, [sp, #16]
 801131e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8011322:	f8ad 801a 	strh.w	r8, [sp, #26]
 8011326:	f8ad 301c 	strh.w	r3, [sp, #28]
 801132a:	6803      	ldr	r3, [r0, #0]
 801132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801132e:	4798      	blx	r3
 8011330:	b008      	add	sp, #32
 8011332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011336:	bf00      	nop
 8011338:	0801e5ec 	.word	0x0801e5ec
 801133c:	0801e600 	.word	0x0801e600

08011340 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8011340:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011342:	4604      	mov	r4, r0
 8011344:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8011348:	3201      	adds	r2, #1
 801134a:	d112      	bne.n	8011372 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801134c:	2500      	movs	r5, #0
 801134e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8011352:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8011356:	6803      	ldr	r3, [r0, #0]
 8011358:	9500      	str	r5, [sp, #0]
 801135a:	466d      	mov	r5, sp
 801135c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8011360:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011364:	4629      	mov	r1, r5
 8011366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011368:	4798      	blx	r3
 801136a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801136e:	e884 0003 	stmia.w	r4, {r0, r1}
 8011372:	4620      	mov	r0, r4
 8011374:	b003      	add	sp, #12
 8011376:	bd30      	pop	{r4, r5, pc}

08011378 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8011378:	b513      	push	{r0, r1, r4, lr}
 801137a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801137e:	4604      	mov	r4, r0
 8011380:	3301      	adds	r3, #1
 8011382:	d109      	bne.n	8011398 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8011384:	4601      	mov	r1, r0
 8011386:	4668      	mov	r0, sp
 8011388:	f7ff fe1a 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801138c:	f8bd 3000 	ldrh.w	r3, [sp]
 8011390:	8423      	strh	r3, [r4, #32]
 8011392:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011396:	8463      	strh	r3, [r4, #34]	; 0x22
 8011398:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801139c:	b002      	add	sp, #8
 801139e:	bd10      	pop	{r4, pc}

080113a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80113a0:	b513      	push	{r0, r1, r4, lr}
 80113a2:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 80113a6:	4604      	mov	r4, r0
 80113a8:	3301      	adds	r3, #1
 80113aa:	d109      	bne.n	80113c0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80113ac:	4601      	mov	r1, r0
 80113ae:	4668      	mov	r0, sp
 80113b0:	f7ff fe06 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80113b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80113b8:	8423      	strh	r3, [r4, #32]
 80113ba:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80113be:	8463      	strh	r3, [r4, #34]	; 0x22
 80113c0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80113c4:	b002      	add	sp, #8
 80113c6:	bd10      	pop	{r4, pc}

080113c8 <_ZN8touchgfx6ScreenC1Ev>:
 80113c8:	b570      	push	{r4, r5, r6, lr}
 80113ca:	4b17      	ldr	r3, [pc, #92]	; (8011428 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80113cc:	4605      	mov	r5, r0
 80113ce:	4a17      	ldr	r2, [pc, #92]	; (801142c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80113d0:	2101      	movs	r1, #1
 80113d2:	f845 3b04 	str.w	r3, [r5], #4
 80113d6:	2300      	movs	r3, #0
 80113d8:	6042      	str	r2, [r0, #4]
 80113da:	4604      	mov	r4, r0
 80113dc:	8103      	strh	r3, [r0, #8]
 80113de:	8143      	strh	r3, [r0, #10]
 80113e0:	8183      	strh	r3, [r0, #12]
 80113e2:	81c3      	strh	r3, [r0, #14]
 80113e4:	8203      	strh	r3, [r0, #16]
 80113e6:	8243      	strh	r3, [r0, #18]
 80113e8:	8283      	strh	r3, [r0, #20]
 80113ea:	82c3      	strh	r3, [r0, #22]
 80113ec:	6203      	str	r3, [r0, #32]
 80113ee:	8483      	strh	r3, [r0, #36]	; 0x24
 80113f0:	84c3      	strh	r3, [r0, #38]	; 0x26
 80113f2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80113f6:	6343      	str	r3, [r0, #52]	; 0x34
 80113f8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80113fc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011400:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8011404:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8011408:	4b09      	ldr	r3, [pc, #36]	; (8011430 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801140a:	4628      	mov	r0, r5
 801140c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011410:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8011412:	4a08      	ldr	r2, [pc, #32]	; (8011434 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8011414:	f9b2 1000 	ldrsh.w	r1, [r2]
 8011418:	4798      	blx	r3
 801141a:	6863      	ldr	r3, [r4, #4]
 801141c:	4628      	mov	r0, r5
 801141e:	4631      	mov	r1, r6
 8011420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011422:	4798      	blx	r3
 8011424:	4620      	mov	r0, r4
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	0801e628 	.word	0x0801e628
 801142c:	0801e154 	.word	0x0801e154
 8011430:	2401a9ae 	.word	0x2401a9ae
 8011434:	2401a9ac 	.word	0x2401a9ac

08011438 <_ZN8touchgfx6Screen4drawEv>:
 8011438:	4b09      	ldr	r3, [pc, #36]	; (8011460 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801143a:	b507      	push	{r0, r1, r2, lr}
 801143c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011440:	2100      	movs	r1, #0
 8011442:	4b08      	ldr	r3, [pc, #32]	; (8011464 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8011444:	9100      	str	r1, [sp, #0]
 8011446:	4669      	mov	r1, sp
 8011448:	f9b3 3000 	ldrsh.w	r3, [r3]
 801144c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011450:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011454:	6803      	ldr	r3, [r0, #0]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	4798      	blx	r3
 801145a:	b003      	add	sp, #12
 801145c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011460:	2401a9ac 	.word	0x2401a9ac
 8011464:	2401a9ae 	.word	0x2401a9ae

08011468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8011468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8011470:	b089      	sub	sp, #36	; 0x24
 8011472:	4680      	mov	r8, r0
 8011474:	460c      	mov	r4, r1
 8011476:	2b00      	cmp	r3, #0
 8011478:	4615      	mov	r5, r2
 801147a:	dd0e      	ble.n	801149a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801147c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8011480:	2b00      	cmp	r3, #0
 8011482:	dd0a      	ble.n	801149a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011484:	4628      	mov	r0, r5
 8011486:	f7ff ff5b 	bl	8011340 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801148a:	4621      	mov	r1, r4
 801148c:	f7fe fba6 	bl	800fbdc <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011490:	69eb      	ldr	r3, [r5, #28]
 8011492:	b928      	cbnz	r0, 80114a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8011494:	461d      	mov	r5, r3
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1f4      	bne.n	8011484 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801149a:	b009      	add	sp, #36	; 0x24
 801149c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114a0:	ae04      	add	r6, sp, #16
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f000 80b5 	beq.w	8011612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80114a8:	682b      	ldr	r3, [r5, #0]
 80114aa:	4629      	mov	r1, r5
 80114ac:	a802      	add	r0, sp, #8
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	4798      	blx	r3
 80114b2:	4628      	mov	r0, r5
 80114b4:	f7ff ff60 	bl	8011378 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80114b8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80114bc:	4407      	add	r7, r0
 80114be:	4628      	mov	r0, r5
 80114c0:	f7ff ff6e 	bl	80113a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80114c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80114c8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80114cc:	b23f      	sxth	r7, r7
 80114ce:	4418      	add	r0, r3
 80114d0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80114d4:	4621      	mov	r1, r4
 80114d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 80114da:	f8ad 0012 	strh.w	r0, [sp, #18]
 80114de:	4630      	mov	r0, r6
 80114e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80114e4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80114e8:	f7fc faea 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 80114ec:	4628      	mov	r0, r5
 80114ee:	f7ff ff27 	bl	8011340 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80114f2:	ab06      	add	r3, sp, #24
 80114f4:	4602      	mov	r2, r0
 80114f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80114fa:	e883 0003 	stmia.w	r3, {r0, r1}
 80114fe:	4611      	mov	r1, r2
 8011500:	4618      	mov	r0, r3
 8011502:	f7fc fadd 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 8011506:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801150a:	f9b4 1000 	ldrsh.w	r1, [r4]
 801150e:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8011512:	4299      	cmp	r1, r3
 8011514:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8011518:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801151c:	d10b      	bne.n	8011536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801151e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011522:	4552      	cmp	r2, sl
 8011524:	d107      	bne.n	8011536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8011526:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801152a:	455a      	cmp	r2, fp
 801152c:	d103      	bne.n	8011536 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801152e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8011532:	454a      	cmp	r2, r9
 8011534:	d06d      	beq.n	8011612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8011536:	f1bb 0f00 	cmp.w	fp, #0
 801153a:	dd65      	ble.n	8011608 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801153c:	f1b9 0f00 	cmp.w	r9, #0
 8011540:	dd62      	ble.n	8011608 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8011542:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8011546:	fa1f f08a 	uxth.w	r0, sl
 801154a:	4552      	cmp	r2, sl
 801154c:	9000      	str	r0, [sp, #0]
 801154e:	da12      	bge.n	8011576 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8011550:	9301      	str	r3, [sp, #4]
 8011552:	9b00      	ldr	r3, [sp, #0]
 8011554:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011558:	f8ad 2012 	strh.w	r2, [sp, #18]
 801155c:	1a9a      	subs	r2, r3, r2
 801155e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8011562:	4631      	mov	r1, r6
 8011564:	f8ad 0014 	strh.w	r0, [sp, #20]
 8011568:	4640      	mov	r0, r8
 801156a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801156e:	69ea      	ldr	r2, [r5, #28]
 8011570:	f7ff ff7a 	bl	8011468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011574:	9b01      	ldr	r3, [sp, #4]
 8011576:	f9b4 2000 	ldrsh.w	r2, [r4]
 801157a:	b29f      	uxth	r7, r3
 801157c:	429a      	cmp	r2, r3
 801157e:	da0d      	bge.n	801159c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8011580:	f8ad 2010 	strh.w	r2, [sp, #16]
 8011584:	1aba      	subs	r2, r7, r2
 8011586:	f8ad a012 	strh.w	sl, [sp, #18]
 801158a:	4631      	mov	r1, r6
 801158c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011590:	4640      	mov	r0, r8
 8011592:	f8ad 9016 	strh.w	r9, [sp, #22]
 8011596:	69ea      	ldr	r2, [r5, #28]
 8011598:	f7ff ff66 	bl	8011468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801159c:	8822      	ldrh	r2, [r4, #0]
 801159e:	445f      	add	r7, fp
 80115a0:	88a3      	ldrh	r3, [r4, #4]
 80115a2:	b2bf      	uxth	r7, r7
 80115a4:	4413      	add	r3, r2
 80115a6:	b23a      	sxth	r2, r7
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	b219      	sxth	r1, r3
 80115ac:	4291      	cmp	r1, r2
 80115ae:	dd0d      	ble.n	80115cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80115b0:	1bdb      	subs	r3, r3, r7
 80115b2:	f8ad 2010 	strh.w	r2, [sp, #16]
 80115b6:	f8ad a012 	strh.w	sl, [sp, #18]
 80115ba:	4631      	mov	r1, r6
 80115bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80115c0:	4640      	mov	r0, r8
 80115c2:	f8ad 9016 	strh.w	r9, [sp, #22]
 80115c6:	69ea      	ldr	r2, [r5, #28]
 80115c8:	f7ff ff4e 	bl	8011468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80115cc:	88e2      	ldrh	r2, [r4, #6]
 80115ce:	8863      	ldrh	r3, [r4, #2]
 80115d0:	4413      	add	r3, r2
 80115d2:	9a00      	ldr	r2, [sp, #0]
 80115d4:	444a      	add	r2, r9
 80115d6:	b29b      	uxth	r3, r3
 80115d8:	fa1f f982 	uxth.w	r9, r2
 80115dc:	b219      	sxth	r1, r3
 80115de:	fa0f f289 	sxth.w	r2, r9
 80115e2:	428a      	cmp	r2, r1
 80115e4:	da15      	bge.n	8011612 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80115e6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80115ea:	eba3 0309 	sub.w	r3, r3, r9
 80115ee:	f9b4 0000 	ldrsh.w	r0, [r4]
 80115f2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80115f6:	4631      	mov	r1, r6
 80115f8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80115fc:	f8ad 2012 	strh.w	r2, [sp, #18]
 8011600:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011604:	69ea      	ldr	r2, [r5, #28]
 8011606:	e001      	b.n	801160c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8011608:	69ea      	ldr	r2, [r5, #28]
 801160a:	4621      	mov	r1, r4
 801160c:	4640      	mov	r0, r8
 801160e:	f7ff ff2b 	bl	8011468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8011612:	4628      	mov	r0, r5
 8011614:	f7ff fe94 	bl	8011340 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8011618:	6861      	ldr	r1, [r4, #4]
 801161a:	4602      	mov	r2, r0
 801161c:	4633      	mov	r3, r6
 801161e:	6820      	ldr	r0, [r4, #0]
 8011620:	c303      	stmia	r3!, {r0, r1}
 8011622:	4611      	mov	r1, r2
 8011624:	4630      	mov	r0, r6
 8011626:	f7fc fa4b 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 801162a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801162e:	2b00      	cmp	r3, #0
 8011630:	f77f af33 	ble.w	801149a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8011634:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011638:	2b00      	cmp	r3, #0
 801163a:	f77f af2e 	ble.w	801149a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801163e:	4628      	mov	r0, r5
 8011640:	f7ff fe9a 	bl	8011378 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8011644:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8011648:	1a18      	subs	r0, r3, r0
 801164a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801164e:	4628      	mov	r0, r5
 8011650:	f7ff fea6 	bl	80113a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8011654:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8011658:	4631      	mov	r1, r6
 801165a:	1a18      	subs	r0, r3, r0
 801165c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8011660:	4628      	mov	r0, r5
 8011662:	682b      	ldr	r3, [r5, #0]
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	4798      	blx	r3
 8011668:	e717      	b.n	801149a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801166a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801166a:	b570      	push	{r4, r5, r6, lr}
 801166c:	1d06      	adds	r6, r0, #4
 801166e:	b086      	sub	sp, #24
 8011670:	460c      	mov	r4, r1
 8011672:	2300      	movs	r3, #0
 8011674:	4631      	mov	r1, r6
 8011676:	4605      	mov	r5, r0
 8011678:	a802      	add	r0, sp, #8
 801167a:	9301      	str	r3, [sp, #4]
 801167c:	f7ff fca0 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011680:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8011684:	8822      	ldrh	r2, [r4, #0]
 8011686:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801168a:	1ad2      	subs	r2, r2, r3
 801168c:	8863      	ldrh	r3, [r4, #2]
 801168e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8011692:	1a5b      	subs	r3, r3, r1
 8011694:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8011698:	f8ad 2010 	strh.w	r2, [sp, #16]
 801169c:	aa01      	add	r2, sp, #4
 801169e:	f8ad 0014 	strh.w	r0, [sp, #20]
 80116a2:	4630      	mov	r0, r6
 80116a4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80116a8:	a904      	add	r1, sp, #16
 80116aa:	f8ad 3012 	strh.w	r3, [sp, #18]
 80116ae:	f7fc fadf 	bl	800dc70 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80116b2:	9a01      	ldr	r2, [sp, #4]
 80116b4:	b11a      	cbz	r2, 80116be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80116b6:	4621      	mov	r1, r4
 80116b8:	4628      	mov	r0, r5
 80116ba:	f7ff fed5 	bl	8011468 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80116be:	b006      	add	sp, #24
 80116c0:	bd70      	pop	{r4, r5, r6, pc}

080116c2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80116c2:	4602      	mov	r2, r0
 80116c4:	b530      	push	{r4, r5, lr}
 80116c6:	4604      	mov	r4, r0
 80116c8:	b085      	sub	sp, #20
 80116ca:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80116ce:	460d      	mov	r5, r1
 80116d0:	466b      	mov	r3, sp
 80116d2:	6851      	ldr	r1, [r2, #4]
 80116d4:	c303      	stmia	r3!, {r0, r1}
 80116d6:	4629      	mov	r1, r5
 80116d8:	4668      	mov	r0, sp
 80116da:	f7fc f9f1 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 80116de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80116e2:	b12b      	cbz	r3, 80116f0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80116e4:	4669      	mov	r1, sp
 80116e6:	4620      	mov	r0, r4
 80116e8:	f7ff ffbf 	bl	801166a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80116ec:	b005      	add	sp, #20
 80116ee:	bd30      	pop	{r4, r5, pc}
 80116f0:	3404      	adds	r4, #4
 80116f2:	a802      	add	r0, sp, #8
 80116f4:	4621      	mov	r1, r4
 80116f6:	f7ff fc63 	bl	8010fc0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80116fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80116fe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8011702:	4669      	mov	r1, sp
 8011704:	4620      	mov	r0, r4
 8011706:	1a9b      	subs	r3, r3, r2
 8011708:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801170c:	f8ad 3000 	strh.w	r3, [sp]
 8011710:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011714:	1a9b      	subs	r3, r3, r2
 8011716:	f8ad 3002 	strh.w	r3, [sp, #2]
 801171a:	f7fc fa70 	bl	800dbfe <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801171e:	e7e5      	b.n	80116ec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08011720 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8011720:	460b      	mov	r3, r1
 8011722:	680a      	ldr	r2, [r1, #0]
 8011724:	1d01      	adds	r1, r0, #4
 8011726:	6992      	ldr	r2, [r2, #24]
 8011728:	4618      	mov	r0, r3
 801172a:	4710      	bx	r2

0801172c <_ZN8touchgfx12TextProviderC1Ev>:
 801172c:	b538      	push	{r3, r4, r5, lr}
 801172e:	2500      	movs	r5, #0
 8011730:	2302      	movs	r3, #2
 8011732:	4604      	mov	r4, r0
 8011734:	220e      	movs	r2, #14
 8011736:	7403      	strb	r3, [r0, #16]
 8011738:	4629      	mov	r1, r5
 801173a:	6145      	str	r5, [r0, #20]
 801173c:	7605      	strb	r5, [r0, #24]
 801173e:	83c5      	strh	r5, [r0, #30]
 8011740:	8405      	strh	r5, [r0, #32]
 8011742:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011744:	8705      	strh	r5, [r0, #56]	; 0x38
 8011746:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8011748:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801174c:	e9c0 5500 	strd	r5, r5, [r0]
 8011750:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8011754:	304c      	adds	r0, #76	; 0x4c
 8011756:	f00a fcd2 	bl	801c0fe <memset>
 801175a:	2301      	movs	r3, #1
 801175c:	4620      	mov	r0, r4
 801175e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8011762:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011766:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801176a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801176e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8011772:	f7f9 fe3d 	bl	800b3f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8011776:	4620      	mov	r0, r4
 8011778:	bd38      	pop	{r3, r4, r5, pc}

0801177a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801177a:	b530      	push	{r4, r5, lr}
 801177c:	2500      	movs	r5, #0
 801177e:	2401      	movs	r4, #1
 8011780:	6843      	ldr	r3, [r0, #4]
 8011782:	b913      	cbnz	r3, 801178a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8011784:	6803      	ldr	r3, [r0, #0]
 8011786:	b313      	cbz	r3, 80117ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8011788:	6043      	str	r3, [r0, #4]
 801178a:	7e03      	ldrb	r3, [r0, #24]
 801178c:	b143      	cbz	r3, 80117a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801178e:	6943      	ldr	r3, [r0, #20]
 8011790:	b12b      	cbz	r3, 801179e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011792:	881a      	ldrh	r2, [r3, #0]
 8011794:	b11a      	cbz	r2, 801179e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8011796:	1c9a      	adds	r2, r3, #2
 8011798:	6142      	str	r2, [r0, #20]
 801179a:	8818      	ldrh	r0, [r3, #0]
 801179c:	bd30      	pop	{r4, r5, pc}
 801179e:	7605      	strb	r5, [r0, #24]
 80117a0:	6843      	ldr	r3, [r0, #4]
 80117a2:	8819      	ldrh	r1, [r3, #0]
 80117a4:	b199      	cbz	r1, 80117ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 80117a6:	1c9a      	adds	r2, r3, #2
 80117a8:	2902      	cmp	r1, #2
 80117aa:	6042      	str	r2, [r0, #4]
 80117ac:	d1f5      	bne.n	801179a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80117ae:	7c03      	ldrb	r3, [r0, #16]
 80117b0:	2b01      	cmp	r3, #1
 80117b2:	d8e5      	bhi.n	8011780 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	3302      	adds	r3, #2
 80117b8:	7402      	strb	r2, [r0, #16]
 80117ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80117be:	6143      	str	r3, [r0, #20]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d0dd      	beq.n	8011780 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80117c4:	881b      	ldrh	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d0da      	beq.n	8011780 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80117ca:	7604      	strb	r4, [r0, #24]
 80117cc:	e7d8      	b.n	8011780 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80117ce:	2000      	movs	r0, #0
 80117d0:	e7e4      	b.n	801179c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080117d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80117d2:	6001      	str	r1, [r0, #0]
 80117d4:	2100      	movs	r1, #0
 80117d6:	b430      	push	{r4, r5}
 80117d8:	6041      	str	r1, [r0, #4]
 80117da:	6815      	ldr	r5, [r2, #0]
 80117dc:	6085      	str	r5, [r0, #8]
 80117de:	6852      	ldr	r2, [r2, #4]
 80117e0:	6443      	str	r3, [r0, #68]	; 0x44
 80117e2:	9b02      	ldr	r3, [sp, #8]
 80117e4:	60c2      	str	r2, [r0, #12]
 80117e6:	7401      	strb	r1, [r0, #16]
 80117e8:	6141      	str	r1, [r0, #20]
 80117ea:	7601      	strb	r1, [r0, #24]
 80117ec:	8701      	strh	r1, [r0, #56]	; 0x38
 80117ee:	8401      	strh	r1, [r0, #32]
 80117f0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80117f4:	6483      	str	r3, [r0, #72]	; 0x48
 80117f6:	bc30      	pop	{r4, r5}
 80117f8:	f7f9 bdfa 	b.w	800b3f0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080117fc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80117fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80117fe:	4605      	mov	r5, r0
 8011800:	4608      	mov	r0, r1
 8011802:	b1f1      	cbz	r1, 8011842 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8011804:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8011808:	460b      	mov	r3, r1
 801180a:	f101 0708 	add.w	r7, r1, #8
 801180e:	4622      	mov	r2, r4
 8011810:	6818      	ldr	r0, [r3, #0]
 8011812:	3308      	adds	r3, #8
 8011814:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011818:	4626      	mov	r6, r4
 801181a:	42bb      	cmp	r3, r7
 801181c:	c603      	stmia	r6!, {r0, r1}
 801181e:	4634      	mov	r4, r6
 8011820:	d1f6      	bne.n	8011810 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8011822:	6818      	ldr	r0, [r3, #0]
 8011824:	6030      	str	r0, [r6, #0]
 8011826:	4610      	mov	r0, r2
 8011828:	889b      	ldrh	r3, [r3, #4]
 801182a:	80b3      	strh	r3, [r6, #4]
 801182c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8011830:	015b      	lsls	r3, r3, #5
 8011832:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011836:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801183a:	430b      	orrs	r3, r1
 801183c:	425b      	negs	r3, r3
 801183e:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8011842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011844 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8011844:	b538      	push	{r3, r4, r5, lr}
 8011846:	460c      	mov	r4, r1
 8011848:	6811      	ldr	r1, [r2, #0]
 801184a:	4610      	mov	r0, r2
 801184c:	68cd      	ldr	r5, [r1, #12]
 801184e:	4619      	mov	r1, r3
 8011850:	47a8      	blx	r5
 8011852:	2800      	cmp	r0, #0
 8011854:	bf08      	it	eq
 8011856:	4620      	moveq	r0, r4
 8011858:	bd38      	pop	{r3, r4, r5, pc}
	...

0801185c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801185e:	4604      	mov	r4, r0
 8011860:	4615      	mov	r5, r2
 8011862:	4608      	mov	r0, r1
 8011864:	b93a      	cbnz	r2, 8011876 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8011866:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801186a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801186e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8011872:	4628      	mov	r0, r5
 8011874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011876:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801187a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801187e:	8893      	ldrh	r3, [r2, #4]
 8011880:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8011884:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8011888:	79ee      	ldrb	r6, [r5, #7]
 801188a:	4316      	orrs	r6, r2
 801188c:	19da      	adds	r2, r3, r7
 801188e:	b291      	uxth	r1, r2
 8011890:	b2b7      	uxth	r7, r6
 8011892:	291d      	cmp	r1, #29
 8011894:	d87b      	bhi.n	801198e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8011896:	2201      	movs	r2, #1
 8011898:	10f6      	asrs	r6, r6, #3
 801189a:	408a      	lsls	r2, r1
 801189c:	4974      	ldr	r1, [pc, #464]	; (8011a70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801189e:	420a      	tst	r2, r1
 80118a0:	d12e      	bne.n	8011900 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80118a2:	f412 7f60 	tst.w	r2, #896	; 0x380
 80118a6:	d072      	beq.n	801198e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80118a8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80118ac:	462b      	mov	r3, r5
 80118ae:	f105 0e08 	add.w	lr, r5, #8
 80118b2:	4615      	mov	r5, r2
 80118b4:	6818      	ldr	r0, [r3, #0]
 80118b6:	3308      	adds	r3, #8
 80118b8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80118bc:	4694      	mov	ip, r2
 80118be:	4573      	cmp	r3, lr
 80118c0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80118c4:	4662      	mov	r2, ip
 80118c6:	d1f5      	bne.n	80118b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80118c8:	6818      	ldr	r0, [r3, #0]
 80118ca:	f8cc 0000 	str.w	r0, [ip]
 80118ce:	889b      	ldrh	r3, [r3, #4]
 80118d0:	f8ac 3004 	strh.w	r3, [ip, #4]
 80118d4:	b2b3      	uxth	r3, r6
 80118d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80118da:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80118de:	1aca      	subs	r2, r1, r3
 80118e0:	1bcf      	subs	r7, r1, r7
 80118e2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80118e6:	b292      	uxth	r2, r2
 80118e8:	1afb      	subs	r3, r7, r3
 80118ea:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80118ee:	10d2      	asrs	r2, r2, #3
 80118f0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80118f4:	4302      	orrs	r2, r0
 80118f6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80118fa:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80118fe:	e7b8      	b.n	8011872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8011900:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8011902:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011906:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8011908:	f640 6333 	movw	r3, #3635	; 0xe33
 801190c:	4299      	cmp	r1, r3
 801190e:	d110      	bne.n	8011932 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8011910:	6803      	ldr	r3, [r0, #0]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	4798      	blx	r3
 8011916:	7b41      	ldrb	r1, [r0, #13]
 8011918:	00cb      	lsls	r3, r1, #3
 801191a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801191e:	7a03      	ldrb	r3, [r0, #8]
 8011920:	0648      	lsls	r0, r1, #25
 8011922:	ea43 0302 	orr.w	r3, r3, r2
 8011926:	bf44      	itt	mi
 8011928:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801192c:	b21b      	sxthmi	r3, r3
 801192e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011932:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8011936:	462a      	mov	r2, r5
 8011938:	f105 0c08 	add.w	ip, r5, #8
 801193c:	443b      	add	r3, r7
 801193e:	4433      	add	r3, r6
 8011940:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8011944:	b29b      	uxth	r3, r3
 8011946:	4635      	mov	r5, r6
 8011948:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801194c:	6810      	ldr	r0, [r2, #0]
 801194e:	3208      	adds	r2, #8
 8011950:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8011954:	4637      	mov	r7, r6
 8011956:	4562      	cmp	r2, ip
 8011958:	c703      	stmia	r7!, {r0, r1}
 801195a:	463e      	mov	r6, r7
 801195c:	d1f6      	bne.n	801194c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801195e:	6810      	ldr	r0, [r2, #0]
 8011960:	6038      	str	r0, [r7, #0]
 8011962:	8892      	ldrh	r2, [r2, #4]
 8011964:	80ba      	strh	r2, [r7, #4]
 8011966:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801196a:	10db      	asrs	r3, r3, #3
 801196c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011970:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011974:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011978:	4313      	orrs	r3, r2
 801197a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801197e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011982:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8011986:	1a9b      	subs	r3, r3, r2
 8011988:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801198c:	e771      	b.n	8011872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801198e:	f023 0204 	bic.w	r2, r3, #4
 8011992:	f640 611b 	movw	r1, #3611	; 0xe1b
 8011996:	428a      	cmp	r2, r1
 8011998:	d003      	beq.n	80119a2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801199a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801199e:	4293      	cmp	r3, r2
 80119a0:	d120      	bne.n	80119e4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80119a2:	3b01      	subs	r3, #1
 80119a4:	4602      	mov	r2, r0
 80119a6:	4629      	mov	r1, r5
 80119a8:	4620      	mov	r0, r4
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	f7ff ff4a 	bl	8011844 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80119b0:	7b41      	ldrb	r1, [r0, #13]
 80119b2:	00cb      	lsls	r3, r1, #3
 80119b4:	0649      	lsls	r1, r1, #25
 80119b6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80119ba:	7a03      	ldrb	r3, [r0, #8]
 80119bc:	ea43 0302 	orr.w	r3, r3, r2
 80119c0:	bf44      	itt	mi
 80119c2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80119c6:	b21b      	sxthmi	r3, r3
 80119c8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80119cc:	7b6b      	ldrb	r3, [r5, #13]
 80119ce:	7aaa      	ldrb	r2, [r5, #10]
 80119d0:	005b      	lsls	r3, r3, #1
 80119d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119d6:	4313      	orrs	r3, r2
 80119d8:	115a      	asrs	r2, r3, #5
 80119da:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80119de:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80119e2:	e035      	b.n	8011a50 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80119e4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80119e8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80119ec:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80119f0:	7a2a      	ldrb	r2, [r5, #8]
 80119f2:	ea42 0201 	orr.w	r2, r2, r1
 80119f6:	f640 6109 	movw	r1, #3593	; 0xe09
 80119fa:	bf1c      	itt	ne
 80119fc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8011a00:	b212      	sxthne	r2, r2
 8011a02:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8011a06:	f023 0210 	bic.w	r2, r3, #16
 8011a0a:	428a      	cmp	r2, r1
 8011a0c:	d003      	beq.n	8011a16 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8011a0e:	f640 6213 	movw	r2, #3603	; 0xe13
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d129      	bne.n	8011a6a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8011a16:	7b6e      	ldrb	r6, [r5, #13]
 8011a18:	4629      	mov	r1, r5
 8011a1a:	0076      	lsls	r6, r6, #1
 8011a1c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8011a20:	7aae      	ldrb	r6, [r5, #10]
 8011a22:	4316      	orrs	r6, r2
 8011a24:	f640 6213 	movw	r2, #3603	; 0xe13
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	bf16      	itet	ne
 8011a30:	f103 33ff 	addne.w	r3, r3, #4294967295
 8011a34:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8011a38:	b29b      	uxthne	r3, r3
 8011a3a:	f7ff ff03 	bl	8011844 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8011a3e:	7b43      	ldrb	r3, [r0, #13]
 8011a40:	7a82      	ldrb	r2, [r0, #10]
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a48:	4313      	orrs	r3, r2
 8011a4a:	1af6      	subs	r6, r6, r3
 8011a4c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8011a50:	7b69      	ldrb	r1, [r5, #13]
 8011a52:	00cb      	lsls	r3, r1, #3
 8011a54:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011a58:	7a2b      	ldrb	r3, [r5, #8]
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	064a      	lsls	r2, r1, #25
 8011a5e:	bf44      	itt	mi
 8011a60:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011a64:	b21b      	sxthmi	r3, r3
 8011a66:	1bdb      	subs	r3, r3, r7
 8011a68:	e747      	b.n	80118fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e7b7      	b.n	80119de <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8011a6e:	bf00      	nop
 8011a70:	3fc00079 	.word	0x3fc00079

08011a74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8011a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a78:	4604      	mov	r4, r0
 8011a7a:	b942      	cbnz	r2, 8011a8e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8011a7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a80:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8011a84:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8011a88:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8011a8c:	e047      	b.n	8011b1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8011a8e:	7b51      	ldrb	r1, [r2, #13]
 8011a90:	8893      	ldrh	r3, [r2, #4]
 8011a92:	010d      	lsls	r5, r1, #4
 8011a94:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8011a98:	79d5      	ldrb	r5, [r2, #7]
 8011a9a:	4305      	orrs	r5, r0
 8011a9c:	2d04      	cmp	r5, #4
 8011a9e:	bfcc      	ite	gt
 8011aa0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8011aa4:	f04f 0e01 	movle.w	lr, #1
 8011aa8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8011aac:	f200 80ab 	bhi.w	8011c06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8011ab0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8011ab4:	4283      	cmp	r3, r0
 8011ab6:	d216      	bcs.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ab8:	f240 605b 	movw	r0, #1627	; 0x65b
 8011abc:	4283      	cmp	r3, r0
 8011abe:	d859      	bhi.n	8011b74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8011ac0:	f240 6057 	movw	r0, #1623	; 0x657
 8011ac4:	4283      	cmp	r3, r0
 8011ac6:	d20e      	bcs.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ac8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8011acc:	d24a      	bcs.n	8011b64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8011ace:	f240 604e 	movw	r0, #1614	; 0x64e
 8011ad2:	4283      	cmp	r3, r0
 8011ad4:	d207      	bcs.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011ad6:	f240 601a 	movw	r0, #1562	; 0x61a
 8011ada:	4283      	cmp	r3, r0
 8011adc:	d02a      	beq.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011ade:	d821      	bhi.n	8011b24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8011ae0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8011ae4:	d35b      	bcc.n	8011b9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011ae6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8011aea:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011aee:	f040 80d0 	bne.w	8011c92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8011af2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8011af6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011afa:	f040 80ca 	bne.w	8011c92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8011afe:	00cb      	lsls	r3, r1, #3
 8011b00:	0649      	lsls	r1, r1, #25
 8011b02:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011b06:	7a13      	ldrb	r3, [r2, #8]
 8011b08:	ea43 0300 	orr.w	r3, r3, r0
 8011b0c:	bf44      	itt	mi
 8011b0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011b12:	b21b      	sxthmi	r3, r3
 8011b14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011b18:	1b5d      	subs	r5, r3, r5
 8011b1a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011b1e:	4610      	mov	r0, r2
 8011b20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b24:	f240 604b 	movw	r0, #1611	; 0x64b
 8011b28:	4283      	cmp	r3, r0
 8011b2a:	d338      	bcc.n	8011b9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011b2c:	f240 604c 	movw	r0, #1612	; 0x64c
 8011b30:	4283      	cmp	r3, r0
 8011b32:	d9d8      	bls.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011b34:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8011b38:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8011b3c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011b40:	f040 80f3 	bne.w	8011d2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8011b44:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011b48:	f040 80ef 	bne.w	8011d2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8011b4c:	00cb      	lsls	r3, r1, #3
 8011b4e:	064e      	lsls	r6, r1, #25
 8011b50:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011b54:	7a13      	ldrb	r3, [r2, #8]
 8011b56:	ea43 0300 	orr.w	r3, r3, r0
 8011b5a:	bf44      	itt	mi
 8011b5c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011b60:	b21b      	sxthmi	r3, r3
 8011b62:	e7d9      	b.n	8011b18 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8011b64:	f240 6054 	movw	r0, #1620	; 0x654
 8011b68:	4283      	cmp	r3, r0
 8011b6a:	d8e3      	bhi.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011b6c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8011b70:	d9e0      	bls.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011b72:	e7b8      	b.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011b74:	f240 6074 	movw	r0, #1652	; 0x674
 8011b78:	4283      	cmp	r3, r0
 8011b7a:	d0b4      	beq.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011b7c:	d82d      	bhi.n	8011bda <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8011b7e:	f240 605e 	movw	r0, #1630	; 0x65e
 8011b82:	4283      	cmp	r3, r0
 8011b84:	d804      	bhi.n	8011b90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8011b86:	f240 605d 	movw	r0, #1629	; 0x65d
 8011b8a:	4283      	cmp	r3, r0
 8011b8c:	d3d2      	bcc.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011b8e:	e7aa      	b.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011b90:	f240 605f 	movw	r0, #1631	; 0x65f
 8011b94:	4283      	cmp	r3, r0
 8011b96:	d0cd      	beq.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011b98:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8011b9c:	d0a3      	beq.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011b9e:	00cb      	lsls	r3, r1, #3
 8011ba0:	0649      	lsls	r1, r1, #25
 8011ba2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8011ba6:	7a13      	ldrb	r3, [r2, #8]
 8011ba8:	ea43 0300 	orr.w	r3, r3, r0
 8011bac:	bf44      	itt	mi
 8011bae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011bb2:	b21b      	sxthmi	r3, r3
 8011bb4:	1b5d      	subs	r5, r3, r5
 8011bb6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011bba:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011bbe:	7b53      	ldrb	r3, [r2, #13]
 8011bc0:	015b      	lsls	r3, r3, #5
 8011bc2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8011bc6:	7993      	ldrb	r3, [r2, #6]
 8011bc8:	430b      	orrs	r3, r1
 8011bca:	2105      	movs	r1, #5
 8011bcc:	005b      	lsls	r3, r3, #1
 8011bce:	fb93 f3f1 	sdiv	r3, r3, r1
 8011bd2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8011bd6:	440b      	add	r3, r1
 8011bd8:	e756      	b.n	8011a88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8011bda:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8011bde:	4283      	cmp	r3, r0
 8011be0:	d809      	bhi.n	8011bf6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8011be2:	f240 60df 	movw	r0, #1759	; 0x6df
 8011be6:	4283      	cmp	r3, r0
 8011be8:	f4bf af7d 	bcs.w	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011bec:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8011bf0:	2b05      	cmp	r3, #5
 8011bf2:	d8d4      	bhi.n	8011b9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011bf4:	e777      	b.n	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011bf6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8011bfa:	4283      	cmp	r3, r0
 8011bfc:	d09a      	beq.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011bfe:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8011c02:	4283      	cmp	r3, r0
 8011c04:	e7ca      	b.n	8011b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8011c06:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8011c0a:	d22b      	bcs.n	8011c64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8011c0c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8011c10:	4283      	cmp	r3, r0
 8011c12:	d28f      	bcs.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011c14:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8011c18:	4283      	cmp	r3, r0
 8011c1a:	d816      	bhi.n	8011c4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8011c1c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8011c20:	4283      	cmp	r3, r0
 8011c22:	f4bf af60 	bcs.w	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011c26:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8011c2a:	4283      	cmp	r3, r0
 8011c2c:	d80a      	bhi.n	8011c44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8011c2e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8011c32:	4283      	cmp	r3, r0
 8011c34:	f4bf af57 	bcs.w	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011c38:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8011c3c:	4283      	cmp	r3, r0
 8011c3e:	f43f af79 	beq.w	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011c42:	e7ac      	b.n	8011b9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8011c44:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8011c48:	e7f8      	b.n	8011c3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8011c4a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8011c4e:	4283      	cmp	r3, r0
 8011c50:	d802      	bhi.n	8011c58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8011c52:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8011c56:	e798      	b.n	8011b8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8011c58:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8011c5c:	4283      	cmp	r3, r0
 8011c5e:	f47f af42 	bne.w	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011c62:	e767      	b.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011c64:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8011c68:	4283      	cmp	r3, r0
 8011c6a:	f43f af63 	beq.w	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011c6e:	d802      	bhi.n	8011c76 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8011c70:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8011c74:	e7f2      	b.n	8011c5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8011c76:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8011c7a:	4283      	cmp	r3, r0
 8011c7c:	d805      	bhi.n	8011c8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8011c7e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8011c82:	4283      	cmp	r3, r0
 8011c84:	f4ff af2f 	bcc.w	8011ae6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8011c88:	e754      	b.n	8011b34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8011c8a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8011c8e:	4283      	cmp	r3, r0
 8011c90:	e7af      	b.n	8011bf2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8011c92:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8011c96:	4617      	mov	r7, r2
 8011c98:	f102 0808 	add.w	r8, r2, #8
 8011c9c:	4666      	mov	r6, ip
 8011c9e:	6838      	ldr	r0, [r7, #0]
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011ca6:	46e6      	mov	lr, ip
 8011ca8:	4547      	cmp	r7, r8
 8011caa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8011cae:	46f4      	mov	ip, lr
 8011cb0:	d1f5      	bne.n	8011c9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8011cb2:	6838      	ldr	r0, [r7, #0]
 8011cb4:	f8ce 0000 	str.w	r0, [lr]
 8011cb8:	88b9      	ldrh	r1, [r7, #4]
 8011cba:	f8ae 1004 	strh.w	r1, [lr, #4]
 8011cbe:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8011cc2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011cc6:	d009      	beq.n	8011cdc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8011cc8:	7b51      	ldrb	r1, [r2, #13]
 8011cca:	7992      	ldrb	r2, [r2, #6]
 8011ccc:	0149      	lsls	r1, r1, #5
 8011cce:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011cd2:	4311      	orrs	r1, r2
 8011cd4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011cd8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8011cdc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011ce0:	b2ad      	uxth	r5, r5
 8011ce2:	d00d      	beq.n	8011d00 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8011ce4:	442b      	add	r3, r5
 8011ce6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011cf0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8011cf4:	10db      	asrs	r3, r3, #3
 8011cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011cfa:	4313      	orrs	r3, r2
 8011cfc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011d00:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011d04:	00cb      	lsls	r3, r1, #3
 8011d06:	064f      	lsls	r7, r1, #25
 8011d08:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011d0c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8011d10:	ea43 0302 	orr.w	r3, r3, r2
 8011d14:	bf44      	itt	mi
 8011d16:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011d1a:	b21b      	sxthmi	r3, r3
 8011d1c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8011d20:	1b5b      	subs	r3, r3, r5
 8011d22:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8011d26:	4632      	mov	r2, r6
 8011d28:	e6f9      	b.n	8011b1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8011d2a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8011d2e:	4617      	mov	r7, r2
 8011d30:	f102 0908 	add.w	r9, r2, #8
 8011d34:	4666      	mov	r6, ip
 8011d36:	6838      	ldr	r0, [r7, #0]
 8011d38:	3708      	adds	r7, #8
 8011d3a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8011d3e:	46e0      	mov	r8, ip
 8011d40:	454f      	cmp	r7, r9
 8011d42:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8011d46:	46c4      	mov	ip, r8
 8011d48:	d1f5      	bne.n	8011d36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8011d4a:	6838      	ldr	r0, [r7, #0]
 8011d4c:	f8c8 0000 	str.w	r0, [r8]
 8011d50:	88b9      	ldrh	r1, [r7, #4]
 8011d52:	f8a8 1004 	strh.w	r1, [r8, #4]
 8011d56:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8011d5a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8011d5e:	d009      	beq.n	8011d74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8011d60:	7b51      	ldrb	r1, [r2, #13]
 8011d62:	7992      	ldrb	r2, [r2, #6]
 8011d64:	0149      	lsls	r1, r1, #5
 8011d66:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8011d6a:	4311      	orrs	r1, r2
 8011d6c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8011d70:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8011d74:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8011d78:	d00e      	beq.n	8011d98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8011d7a:	eba3 030e 	sub.w	r3, r3, lr
 8011d7e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8011d88:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8011d8c:	10db      	asrs	r3, r3, #3
 8011d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d92:	4313      	orrs	r3, r2
 8011d94:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8011d98:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011d9c:	00cb      	lsls	r3, r1, #3
 8011d9e:	0648      	lsls	r0, r1, #25
 8011da0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011da4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8011da8:	ea43 0302 	orr.w	r3, r3, r2
 8011dac:	bf44      	itt	mi
 8011dae:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8011db2:	b21b      	sxthmi	r3, r3
 8011db4:	1b5d      	subs	r5, r3, r5
 8011db6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8011dba:	e7b4      	b.n	8011d26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08011dbc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8011dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc0:	461e      	mov	r6, r3
 8011dc2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011dc4:	4604      	mov	r4, r0
 8011dc6:	4617      	mov	r7, r2
 8011dc8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8011dcc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8011dd0:	f7f9 fa68 	bl	800b2a4 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8011dd4:	4605      	mov	r5, r0
 8011dd6:	b918      	cbnz	r0, 8011de0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8011dd8:	6030      	str	r0, [r6, #0]
 8011dda:	4628      	mov	r0, r5
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	4601      	mov	r1, r0
 8011de4:	4638      	mov	r0, r7
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	4798      	blx	r3
 8011dea:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8011dee:	4602      	mov	r2, r0
 8011df0:	6030      	str	r0, [r6, #0]
 8011df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011df6:	d213      	bcs.n	8011e20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8011df8:	4643      	mov	r3, r8
 8011dfa:	4639      	mov	r1, r7
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f7ff fe39 	bl	8011a74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8011e02:	6030      	str	r0, [r6, #0]
 8011e04:	6833      	ldr	r3, [r6, #0]
 8011e06:	b143      	cbz	r3, 8011e1a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8011e08:	7b5a      	ldrb	r2, [r3, #13]
 8011e0a:	7a9b      	ldrb	r3, [r3, #10]
 8011e0c:	0052      	lsls	r2, r2, #1
 8011e0e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011e12:	4313      	orrs	r3, r2
 8011e14:	bf0c      	ite	eq
 8011e16:	2301      	moveq	r3, #1
 8011e18:	2300      	movne	r3, #0
 8011e1a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8011e1e:	e7dc      	b.n	8011dda <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8011e20:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	2b7f      	cmp	r3, #127	; 0x7f
 8011e28:	d804      	bhi.n	8011e34 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8011e2a:	4639      	mov	r1, r7
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	f7ff fd15 	bl	801185c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8011e32:	e7e6      	b.n	8011e02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8011e34:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d0e3      	beq.n	8011e04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8011e3c:	f640 1302 	movw	r3, #2306	; 0x902
 8011e40:	429d      	cmp	r5, r3
 8011e42:	d1df      	bne.n	8011e04 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8011e44:	4601      	mov	r1, r0
 8011e46:	4620      	mov	r0, r4
 8011e48:	f7ff fcd8 	bl	80117fc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8011e4c:	e7d9      	b.n	8011e02 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08011e4e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8011e4e:	b510      	push	{r4, lr}
 8011e50:	4604      	mov	r4, r0
 8011e52:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8011e56:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011e58:	b1e1      	cbz	r1, 8011e94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8011e5a:	2b0a      	cmp	r3, #10
 8011e5c:	d02d      	beq.n	8011eba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8011e5e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8011e60:	3901      	subs	r1, #1
 8011e62:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8011e66:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8011e68:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8011e6c:	1c51      	adds	r1, r2, #1
 8011e6e:	b289      	uxth	r1, r1
 8011e70:	2901      	cmp	r1, #1
 8011e72:	bf8a      	itet	hi
 8011e74:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011e78:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8011e7a:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8011e7c:	1c5a      	adds	r2, r3, #1
 8011e7e:	8722      	strh	r2, [r4, #56]	; 0x38
 8011e80:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011e82:	4413      	add	r3, r2
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	2b09      	cmp	r3, #9
 8011e88:	bf88      	it	hi
 8011e8a:	3b0a      	subhi	r3, #10
 8011e8c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011e90:	8458      	strh	r0, [r3, #34]	; 0x22
 8011e92:	e7de      	b.n	8011e52 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8011e94:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011e96:	2b0a      	cmp	r3, #10
 8011e98:	d00f      	beq.n	8011eba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8011e9a:	4620      	mov	r0, r4
 8011e9c:	f7ff fc6d 	bl	801177a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8011ea0:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8011ea2:	1c5a      	adds	r2, r3, #1
 8011ea4:	8722      	strh	r2, [r4, #56]	; 0x38
 8011ea6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8011ea8:	4413      	add	r3, r2
 8011eaa:	b29b      	uxth	r3, r3
 8011eac:	2b09      	cmp	r3, #9
 8011eae:	bf88      	it	hi
 8011eb0:	3b0a      	subhi	r3, #10
 8011eb2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8011eb6:	8458      	strh	r0, [r3, #34]	; 0x22
 8011eb8:	e7ec      	b.n	8011e94 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8011eba:	bd10      	pop	{r4, pc}

08011ebc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8011ebc:	b538      	push	{r3, r4, r5, lr}
 8011ebe:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8011ec0:	4604      	mov	r4, r0
 8011ec2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8011ec6:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8011ec8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8011eca:	3a01      	subs	r2, #1
 8011ecc:	8702      	strh	r2, [r0, #56]	; 0x38
 8011ece:	1c5a      	adds	r2, r3, #1
 8011ed0:	b292      	uxth	r2, r2
 8011ed2:	2a09      	cmp	r2, #9
 8011ed4:	bf8a      	itet	hi
 8011ed6:	3b09      	subhi	r3, #9
 8011ed8:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8011eda:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8011edc:	f7ff ffb7 	bl	8011e4e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8011ee0:	8c23      	ldrh	r3, [r4, #32]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	bf9c      	itt	ls
 8011ee6:	3301      	addls	r3, #1
 8011ee8:	8423      	strhls	r3, [r4, #32]
 8011eea:	8be3      	ldrh	r3, [r4, #30]
 8011eec:	b90b      	cbnz	r3, 8011ef2 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8011eee:	2302      	movs	r3, #2
 8011ef0:	83e3      	strh	r3, [r4, #30]
 8011ef2:	8be3      	ldrh	r3, [r4, #30]
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	3b01      	subs	r3, #1
 8011ef8:	b29b      	uxth	r3, r3
 8011efa:	83e3      	strh	r3, [r4, #30]
 8011efc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8011f00:	8365      	strh	r5, [r4, #26]
 8011f02:	bd38      	pop	{r3, r4, r5, pc}

08011f04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8011f04:	428a      	cmp	r2, r1
 8011f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f0a:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8011f0c:	d932      	bls.n	8011f74 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8011f0e:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8011f10:	1a54      	subs	r4, r2, r1
 8011f12:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8011f16:	19ee      	adds	r6, r5, r7
 8011f18:	fa1f fe84 	uxth.w	lr, r4
 8011f1c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8011f20:	3e01      	subs	r6, #1
 8011f22:	b2b4      	uxth	r4, r6
 8011f24:	eba4 090e 	sub.w	r9, r4, lr
 8011f28:	fa1f f989 	uxth.w	r9, r9
 8011f2c:	2c09      	cmp	r4, #9
 8011f2e:	4626      	mov	r6, r4
 8011f30:	bf88      	it	hi
 8011f32:	f1a4 060a 	subhi.w	r6, r4, #10
 8011f36:	f1bc 0f00 	cmp.w	ip, #0
 8011f3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8011f3e:	bf08      	it	eq
 8011f40:	f04f 0c02 	moveq.w	ip, #2
 8011f44:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8011f48:	b2a4      	uxth	r4, r4
 8011f4a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011f4e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8011f52:	454c      	cmp	r4, r9
 8011f54:	fa1f fc8c 	uxth.w	ip, ip
 8011f58:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8011f5c:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8011f60:	d1e4      	bne.n	8011f2c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8011f62:	eba5 050e 	sub.w	r5, r5, lr
 8011f66:	eb0e 0408 	add.w	r4, lr, r8
 8011f6a:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8011f6e:	8705      	strh	r5, [r0, #56]	; 0x38
 8011f70:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8011f74:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 8011f76:	250a      	movs	r5, #10
 8011f78:	1a64      	subs	r4, r4, r1
 8011f7a:	4439      	add	r1, r7
 8011f7c:	b289      	uxth	r1, r1
 8011f7e:	8704      	strh	r4, [r0, #56]	; 0x38
 8011f80:	2909      	cmp	r1, #9
 8011f82:	bf88      	it	hi
 8011f84:	390a      	subhi	r1, #10
 8011f86:	86c1      	strh	r1, [r0, #54]	; 0x36
 8011f88:	b18a      	cbz	r2, 8011fae <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8011f8a:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8011f8c:	3a01      	subs	r2, #1
 8011f8e:	3101      	adds	r1, #1
 8011f90:	b292      	uxth	r2, r2
 8011f92:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8011f96:	8701      	strh	r1, [r0, #56]	; 0x38
 8011f98:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8011f9a:	b901      	cbnz	r1, 8011f9e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8011f9c:	86c5      	strh	r5, [r0, #54]	; 0x36
 8011f9e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8011fa0:	3901      	subs	r1, #1
 8011fa2:	b289      	uxth	r1, r1
 8011fa4:	86c1      	strh	r1, [r0, #54]	; 0x36
 8011fa6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8011faa:	844c      	strh	r4, [r1, #34]	; 0x22
 8011fac:	e7ec      	b.n	8011f88 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8011fae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb2:	f7ff bf4c 	b.w	8011e4e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08011fb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8011fb6:	b570      	push	{r4, r5, r6, lr}
 8011fb8:	2500      	movs	r5, #0
 8011fba:	4295      	cmp	r5, r2
 8011fbc:	d011      	beq.n	8011fe2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8011fbe:	8bc4      	ldrh	r4, [r0, #30]
 8011fc0:	f831 6b02 	ldrh.w	r6, [r1], #2
 8011fc4:	4414      	add	r4, r2
 8011fc6:	3c01      	subs	r4, #1
 8011fc8:	1b64      	subs	r4, r4, r5
 8011fca:	b2a4      	uxth	r4, r4
 8011fcc:	2c01      	cmp	r4, #1
 8011fce:	bf88      	it	hi
 8011fd0:	3c02      	subhi	r4, #2
 8011fd2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8011fd6:	8b64      	ldrh	r4, [r4, #26]
 8011fd8:	42b4      	cmp	r4, r6
 8011fda:	d117      	bne.n	801200c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8011fdc:	3501      	adds	r5, #1
 8011fde:	b2ad      	uxth	r5, r5
 8011fe0:	e7eb      	b.n	8011fba <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8011fe2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8011fe6:	2400      	movs	r4, #0
 8011fe8:	4413      	add	r3, r2
 8011fea:	b2a2      	uxth	r2, r4
 8011fec:	429a      	cmp	r2, r3
 8011fee:	da0f      	bge.n	8012010 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8011ff0:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8011ff2:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8011ff6:	3401      	adds	r4, #1
 8011ff8:	4432      	add	r2, r6
 8011ffa:	b292      	uxth	r2, r2
 8011ffc:	2a09      	cmp	r2, #9
 8011ffe:	bf88      	it	hi
 8012000:	3a0a      	subhi	r2, #10
 8012002:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012006:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8012008:	42aa      	cmp	r2, r5
 801200a:	d0ee      	beq.n	8011fea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801200c:	2000      	movs	r0, #0
 801200e:	bd70      	pop	{r4, r5, r6, pc}
 8012010:	2001      	movs	r0, #1
 8012012:	e7fc      	b.n	801200e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08012014 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8012014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012018:	4605      	mov	r5, r0
 801201a:	4616      	mov	r6, r2
 801201c:	1c8c      	adds	r4, r1, #2
 801201e:	8809      	ldrh	r1, [r1, #0]
 8012020:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8012024:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8012028:	42b3      	cmp	r3, r6
 801202a:	d124      	bne.n	8012076 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801202c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8012030:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8012034:	f001 070f 	and.w	r7, r1, #15
 8012038:	4652      	mov	r2, sl
 801203a:	f8cd 8000 	str.w	r8, [sp]
 801203e:	464b      	mov	r3, r9
 8012040:	4621      	mov	r1, r4
 8012042:	4628      	mov	r0, r5
 8012044:	f7ff ffb7 	bl	8011fb6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8012048:	4683      	mov	fp, r0
 801204a:	b168      	cbz	r0, 8012068 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801204c:	eb0a 0109 	add.w	r1, sl, r9
 8012050:	463a      	mov	r2, r7
 8012052:	4628      	mov	r0, r5
 8012054:	4441      	add	r1, r8
 8012056:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801205a:	4649      	mov	r1, r9
 801205c:	f7ff ff52 	bl	8011f04 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8012060:	4658      	mov	r0, fp
 8012062:	b003      	add	sp, #12
 8012064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012068:	eb07 010a 	add.w	r1, r7, sl
 801206c:	4449      	add	r1, r9
 801206e:	4441      	add	r1, r8
 8012070:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8012074:	e7d2      	b.n	801201c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8012076:	f04f 0b00 	mov.w	fp, #0
 801207a:	e7f1      	b.n	8012060 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801207c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801207c:	b570      	push	{r4, r5, r6, lr}
 801207e:	8810      	ldrh	r0, [r2, #0]
 8012080:	4298      	cmp	r0, r3
 8012082:	d817      	bhi.n	80120b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012084:	1e48      	subs	r0, r1, #1
 8012086:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801208a:	4298      	cmp	r0, r3
 801208c:	d312      	bcc.n	80120b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801208e:	2400      	movs	r4, #0
 8012090:	428c      	cmp	r4, r1
 8012092:	d20f      	bcs.n	80120b4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8012094:	1860      	adds	r0, r4, r1
 8012096:	1040      	asrs	r0, r0, #1
 8012098:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801209c:	0085      	lsls	r5, r0, #2
 801209e:	42b3      	cmp	r3, r6
 80120a0:	d902      	bls.n	80120a8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80120a2:	3001      	adds	r0, #1
 80120a4:	b284      	uxth	r4, r0
 80120a6:	e7f3      	b.n	8012090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80120a8:	d201      	bcs.n	80120ae <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80120aa:	b281      	uxth	r1, r0
 80120ac:	e7f0      	b.n	8012090 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80120ae:	442a      	add	r2, r5
 80120b0:	8850      	ldrh	r0, [r2, #2]
 80120b2:	bd70      	pop	{r4, r5, r6, pc}
 80120b4:	2000      	movs	r0, #0
 80120b6:	e7fc      	b.n	80120b2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080120b8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80120b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120bc:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80120be:	4604      	mov	r4, r0
 80120c0:	260b      	movs	r6, #11
 80120c2:	886f      	ldrh	r7, [r5, #2]
 80120c4:	087f      	lsrs	r7, r7, #1
 80120c6:	3e01      	subs	r6, #1
 80120c8:	d013      	beq.n	80120f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80120ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80120cc:	462a      	mov	r2, r5
 80120ce:	4639      	mov	r1, r7
 80120d0:	4620      	mov	r0, r4
 80120d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80120d6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80120da:	4643      	mov	r3, r8
 80120dc:	f7ff ffce 	bl	801207c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80120e0:	b138      	cbz	r0, 80120f2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80120e2:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80120e6:	4642      	mov	r2, r8
 80120e8:	4620      	mov	r0, r4
 80120ea:	f7ff ff93 	bl	8012014 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80120ee:	2800      	cmp	r0, #0
 80120f0:	d1e9      	bne.n	80120c6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80120f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080120f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80120f8:	b570      	push	{r4, r5, r6, lr}
 80120fa:	694a      	ldr	r2, [r1, #20]
 80120fc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80120fe:	684b      	ldr	r3, [r1, #4]
 8012100:	1b54      	subs	r4, r2, r5
 8012102:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8012104:	f000 8106 	beq.w	8012314 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8012108:	1b9b      	subs	r3, r3, r6
 801210a:	d003      	beq.n	8012114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801210c:	4363      	muls	r3, r4
 801210e:	2210      	movs	r2, #16
 8012110:	fb93 f3f2 	sdiv	r3, r3, r2
 8012114:	680c      	ldr	r4, [r1, #0]
 8012116:	698a      	ldr	r2, [r1, #24]
 8012118:	1b65      	subs	r5, r4, r5
 801211a:	f000 80fd 	beq.w	8012318 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801211e:	1b92      	subs	r2, r2, r6
 8012120:	d003      	beq.n	801212a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8012122:	436a      	muls	r2, r5
 8012124:	2410      	movs	r4, #16
 8012126:	fb92 f2f4 	sdiv	r2, r2, r4
 801212a:	1a9b      	subs	r3, r3, r2
 801212c:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8012354 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8012130:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012134:	460a      	mov	r2, r1
 8012136:	ee07 3a90 	vmov	s15, r3
 801213a:	f100 040c 	add.w	r4, r0, #12
 801213e:	4603      	mov	r3, r0
 8012140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012144:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012148:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801214c:	eeb1 6a43 	vneg.f32	s12, s6
 8012150:	edd2 7a02 	vldr	s15, [r2, #8]
 8012154:	3214      	adds	r2, #20
 8012156:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801215a:	ece3 6a01 	vstmia	r3!, {s13}
 801215e:	429c      	cmp	r4, r3
 8012160:	ed52 7a02 	vldr	s15, [r2, #-8]
 8012164:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012168:	edc3 7a02 	vstr	s15, [r3, #8]
 801216c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8012170:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012174:	edc3 7a05 	vstr	s15, [r3, #20]
 8012178:	d1ea      	bne.n	8012150 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801217a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801217c:	698b      	ldr	r3, [r1, #24]
 801217e:	edd0 4a02 	vldr	s9, [r0, #8]
 8012182:	1a9b      	subs	r3, r3, r2
 8012184:	edd0 3a00 	vldr	s7, [r0]
 8012188:	edd0 6a01 	vldr	s13, [r0, #4]
 801218c:	ee07 3a90 	vmov	s15, r3
 8012190:	684b      	ldr	r3, [r1, #4]
 8012192:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8012196:	ed90 5a05 	vldr	s10, [r0, #20]
 801219a:	1a9b      	subs	r3, r3, r2
 801219c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121a0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80121a4:	ed90 2a03 	vldr	s4, [r0, #12]
 80121a8:	ee07 3a10 	vmov	s14, r3
 80121ac:	edd0 5a04 	vldr	s11, [r0, #16]
 80121b0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80121b4:	ed90 1a07 	vldr	s2, [r0, #28]
 80121b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80121bc:	edd0 2a06 	vldr	s5, [r0, #24]
 80121c0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80121c4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80121c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80121cc:	ee32 5a45 	vsub.f32	s10, s4, s10
 80121d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80121d4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80121d8:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80121dc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80121de:	694a      	ldr	r2, [r1, #20]
 80121e0:	1b13      	subs	r3, r2, r4
 80121e2:	ee07 3a10 	vmov	s14, r3
 80121e6:	680b      	ldr	r3, [r1, #0]
 80121e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80121ec:	1b1b      	subs	r3, r3, r4
 80121ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 80121f2:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80121f6:	ee07 3a10 	vmov	s14, r3
 80121fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80121fe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012202:	eee6 4a87 	vfma.f32	s9, s13, s14
 8012206:	ee64 4a86 	vmul.f32	s9, s9, s12
 801220a:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801220e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012210:	698b      	ldr	r3, [r1, #24]
 8012212:	1a9b      	subs	r3, r3, r2
 8012214:	ee06 3a90 	vmov	s13, r3
 8012218:	684b      	ldr	r3, [r1, #4]
 801221a:	1a9b      	subs	r3, r3, r2
 801221c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012220:	ee07 3a10 	vmov	s14, r3
 8012224:	ee66 6a84 	vmul.f32	s13, s13, s8
 8012228:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801222c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8012230:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012234:	eee5 6a87 	vfma.f32	s13, s11, s14
 8012238:	ee66 6a83 	vmul.f32	s13, s13, s6
 801223c:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8012240:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8012242:	694a      	ldr	r2, [r1, #20]
 8012244:	1b13      	subs	r3, r2, r4
 8012246:	ee07 3a10 	vmov	s14, r3
 801224a:	680b      	ldr	r3, [r1, #0]
 801224c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012250:	1b1b      	subs	r3, r3, r4
 8012252:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012256:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801225a:	ee07 3a10 	vmov	s14, r3
 801225e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012262:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012266:	eea5 5a87 	vfma.f32	s10, s11, s14
 801226a:	edd0 5a08 	vldr	s11, [r0, #32]
 801226e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8012272:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8012276:	ee25 5a06 	vmul.f32	s10, s10, s12
 801227a:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801227e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8012280:	698b      	ldr	r3, [r1, #24]
 8012282:	1a9b      	subs	r3, r3, r2
 8012284:	ee07 3a10 	vmov	s14, r3
 8012288:	684b      	ldr	r3, [r1, #4]
 801228a:	1a9b      	subs	r3, r3, r2
 801228c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012290:	ee01 3a90 	vmov	s3, r3
 8012294:	ee27 7a04 	vmul.f32	s14, s14, s8
 8012298:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801229c:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80122a0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80122a4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80122a8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80122ac:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80122b0:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80122b2:	694a      	ldr	r2, [r1, #20]
 80122b4:	1b13      	subs	r3, r2, r4
 80122b6:	ee03 3a10 	vmov	s6, r3
 80122ba:	680b      	ldr	r3, [r1, #0]
 80122bc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80122c0:	1b1b      	subs	r3, r3, r4
 80122c2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80122c6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80122ca:	ee03 3a10 	vmov	s6, r3
 80122ce:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80122d2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80122d6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80122da:	ee25 6a86 	vmul.f32	s12, s11, s12
 80122de:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80122e2:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80122e6:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80122ea:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80122ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122f2:	dd13      	ble.n	801231c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80122f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122f8:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80122fc:	63c3      	str	r3, [r0, #60]	; 0x3c
 80122fe:	eee3 7a87 	vfma.f32	s15, s7, s14
 8012302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230a:	dd15      	ble.n	8012338 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801230c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012310:	6403      	str	r3, [r0, #64]	; 0x40
 8012312:	bd70      	pop	{r4, r5, r6, pc}
 8012314:	4623      	mov	r3, r4
 8012316:	e6fd      	b.n	8012114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8012318:	462a      	mov	r2, r5
 801231a:	e706      	b.n	801212a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801231c:	d502      	bpl.n	8012324 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801231e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8012322:	e7e9      	b.n	80122f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8012324:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8012328:	eea3 2a85 	vfma.f32	s4, s7, s10
 801232c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8012330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012334:	dade      	bge.n	80122f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8012336:	e7f2      	b.n	801231e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8012338:	d502      	bpl.n	8012340 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801233a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801233e:	e7e7      	b.n	8012310 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8012340:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8012344:	eee3 4a86 	vfma.f32	s9, s7, s12
 8012348:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012350:	dadc      	bge.n	801230c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8012352:	e7f2      	b.n	801233a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8012354:	3d800000 	.word	0x3d800000

08012358 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8012358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801235c:	2714      	movs	r7, #20
 801235e:	435f      	muls	r7, r3
 8012360:	eb02 0c07 	add.w	ip, r2, r7
 8012364:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8012368:	f115 0e0f 	adds.w	lr, r5, #15
 801236c:	f100 80a2 	bmi.w	80124b4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8012370:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8012374:	9c08      	ldr	r4, [sp, #32]
 8012376:	2614      	movs	r6, #20
 8012378:	f8c0 e014 	str.w	lr, [r0, #20]
 801237c:	4366      	muls	r6, r4
 801237e:	eb02 0806 	add.w	r8, r2, r6
 8012382:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012386:	f115 040f 	adds.w	r4, r5, #15
 801238a:	f100 809f 	bmi.w	80124cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801238e:	1124      	asrs	r4, r4, #4
 8012390:	eba4 040e 	sub.w	r4, r4, lr
 8012394:	6184      	str	r4, [r0, #24]
 8012396:	2c00      	cmp	r4, #0
 8012398:	f000 808a 	beq.w	80124b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801239c:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80123a0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80123a4:	5995      	ldr	r5, [r2, r6]
 80123a6:	eba4 0809 	sub.w	r8, r4, r9
 80123aa:	59d4      	ldr	r4, [r2, r7]
 80123ac:	eba5 0a04 	sub.w	sl, r5, r4
 80123b0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80123b4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80123b8:	fb0e fe05 	mul.w	lr, lr, r5
 80123bc:	fb0a ee19 	mls	lr, sl, r9, lr
 80123c0:	fb08 e404 	mla	r4, r8, r4, lr
 80123c4:	3c01      	subs	r4, #1
 80123c6:	19a4      	adds	r4, r4, r6
 80123c8:	f100 808c 	bmi.w	80124e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80123cc:	fb94 fef6 	sdiv	lr, r4, r6
 80123d0:	fb06 441e 	mls	r4, r6, lr, r4
 80123d4:	f8c0 e000 	str.w	lr, [r0]
 80123d8:	6104      	str	r4, [r0, #16]
 80123da:	2d00      	cmp	r5, #0
 80123dc:	f2c0 8095 	blt.w	801250a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80123e0:	fb95 f4f6 	sdiv	r4, r5, r6
 80123e4:	fb06 5514 	mls	r5, r6, r4, r5
 80123e8:	6044      	str	r4, [r0, #4]
 80123ea:	6085      	str	r5, [r0, #8]
 80123ec:	60c6      	str	r6, [r0, #12]
 80123ee:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80123f2:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80123f6:	6945      	ldr	r5, [r0, #20]
 80123f8:	59d2      	ldr	r2, [r2, r7]
 80123fa:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80123fe:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801252c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8012402:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8012406:	ee07 4a10 	vmov	s14, r4
 801240a:	6804      	ldr	r4, [r0, #0]
 801240c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8012410:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012414:	ee07 2a90 	vmov	s15, r2
 8012418:	ee27 7a26 	vmul.f32	s14, s14, s13
 801241c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012420:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012424:	edd3 6a00 	vldr	s13, [r3]
 8012428:	eee6 6a07 	vfma.f32	s13, s12, s14
 801242c:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8012430:	eee6 6a27 	vfma.f32	s13, s12, s15
 8012434:	edc0 6a07 	vstr	s13, [r0, #28]
 8012438:	edd0 6a01 	vldr	s13, [r0, #4]
 801243c:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8012440:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012444:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8012448:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801244c:	ed80 6a08 	vstr	s12, [r0, #32]
 8012450:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8012452:	6242      	str	r2, [r0, #36]	; 0x24
 8012454:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8012458:	ed93 6a03 	vldr	s12, [r3, #12]
 801245c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8012460:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8012464:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8012468:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801246c:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8012470:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8012474:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8012478:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801247c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801247e:	6302      	str	r2, [r0, #48]	; 0x30
 8012480:	ed93 6a06 	vldr	s12, [r3, #24]
 8012484:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8012488:	eea5 6a87 	vfma.f32	s12, s11, s14
 801248c:	eeb0 7a46 	vmov.f32	s14, s12
 8012490:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8012494:	eea6 7a27 	vfma.f32	s14, s12, s15
 8012498:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801249c:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80124a0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 80124a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80124a8:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80124ac:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80124ae:	63c3      	str	r3, [r0, #60]	; 0x3c
 80124b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124b4:	2410      	movs	r4, #16
 80124b6:	f1c5 0501 	rsb	r5, r5, #1
 80124ba:	fb9e fef4 	sdiv	lr, lr, r4
 80124be:	f015 050f 	ands.w	r5, r5, #15
 80124c2:	bf18      	it	ne
 80124c4:	2501      	movne	r5, #1
 80124c6:	ebae 0e05 	sub.w	lr, lr, r5
 80124ca:	e753      	b.n	8012374 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80124cc:	f04f 0910 	mov.w	r9, #16
 80124d0:	f1c5 0501 	rsb	r5, r5, #1
 80124d4:	fb94 f4f9 	sdiv	r4, r4, r9
 80124d8:	f015 050f 	ands.w	r5, r5, #15
 80124dc:	bf18      	it	ne
 80124de:	2501      	movne	r5, #1
 80124e0:	1b64      	subs	r4, r4, r5
 80124e2:	e755      	b.n	8012390 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80124e4:	4264      	negs	r4, r4
 80124e6:	fb94 fef6 	sdiv	lr, r4, r6
 80124ea:	f1ce 0800 	rsb	r8, lr, #0
 80124ee:	fb06 441e 	mls	r4, r6, lr, r4
 80124f2:	f8c0 8000 	str.w	r8, [r0]
 80124f6:	6104      	str	r4, [r0, #16]
 80124f8:	2c00      	cmp	r4, #0
 80124fa:	f43f af6e 	beq.w	80123da <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80124fe:	ea6f 0e0e 	mvn.w	lr, lr
 8012502:	1b34      	subs	r4, r6, r4
 8012504:	f8c0 e000 	str.w	lr, [r0]
 8012508:	e766      	b.n	80123d8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801250a:	426d      	negs	r5, r5
 801250c:	fb95 f4f6 	sdiv	r4, r5, r6
 8012510:	f1c4 0e00 	rsb	lr, r4, #0
 8012514:	fb06 5514 	mls	r5, r6, r4, r5
 8012518:	f8c0 e004 	str.w	lr, [r0, #4]
 801251c:	6085      	str	r5, [r0, #8]
 801251e:	2d00      	cmp	r5, #0
 8012520:	f43f af64 	beq.w	80123ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8012524:	43e4      	mvns	r4, r4
 8012526:	1b75      	subs	r5, r6, r5
 8012528:	6044      	str	r4, [r0, #4]
 801252a:	e75e      	b.n	80123ea <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801252c:	3d800000 	.word	0x3d800000

08012530 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8012530:	4b01      	ldr	r3, [pc, #4]	; (8012538 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8012532:	6018      	str	r0, [r3, #0]
 8012534:	4770      	bx	lr
 8012536:	bf00      	nop
 8012538:	2401aa18 	.word	0x2401aa18

0801253c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801253c:	4b06      	ldr	r3, [pc, #24]	; (8012558 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801253e:	881a      	ldrh	r2, [r3, #0]
 8012540:	4282      	cmp	r2, r0
 8012542:	d807      	bhi.n	8012554 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8012544:	4b05      	ldr	r3, [pc, #20]	; (801255c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8012546:	881b      	ldrh	r3, [r3, #0]
 8012548:	4413      	add	r3, r2
 801254a:	4298      	cmp	r0, r3
 801254c:	bfac      	ite	ge
 801254e:	2000      	movge	r0, #0
 8012550:	2001      	movlt	r0, #1
 8012552:	4770      	bx	lr
 8012554:	2000      	movs	r0, #0
 8012556:	4770      	bx	lr
 8012558:	2401aa38 	.word	0x2401aa38
 801255c:	2401aa3c 	.word	0x2401aa3c

08012560 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8012560:	b508      	push	{r3, lr}
 8012562:	4601      	mov	r1, r0
 8012564:	f7ff ffea 	bl	801253c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012568:	b118      	cbz	r0, 8012572 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801256a:	4b02      	ldr	r3, [pc, #8]	; (8012574 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8012572:	bd08      	pop	{r3, pc}
 8012574:	2401aa1c 	.word	0x2401aa1c

08012578 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8012578:	b538      	push	{r3, r4, r5, lr}
 801257a:	4604      	mov	r4, r0
 801257c:	f7ff ffde 	bl	801253c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8012580:	b188      	cbz	r0, 80125a6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8012582:	4b09      	ldr	r3, [pc, #36]	; (80125a8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8012584:	881a      	ldrh	r2, [r3, #0]
 8012586:	4b09      	ldr	r3, [pc, #36]	; (80125ac <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8012588:	1aa4      	subs	r4, r4, r2
 801258a:	220e      	movs	r2, #14
 801258c:	681d      	ldr	r5, [r3, #0]
 801258e:	4362      	muls	r2, r4
 8012590:	18ac      	adds	r4, r5, r2
 8012592:	7b23      	ldrb	r3, [r4, #12]
 8012594:	f013 0320 	ands.w	r3, r3, #32
 8012598:	bf17      	itett	ne
 801259a:	680b      	ldrne	r3, [r1, #0]
 801259c:	4618      	moveq	r0, r3
 801259e:	50ab      	strne	r3, [r5, r2]
 80125a0:	684b      	ldrne	r3, [r1, #4]
 80125a2:	bf18      	it	ne
 80125a4:	6063      	strne	r3, [r4, #4]
 80125a6:	bd38      	pop	{r3, r4, r5, pc}
 80125a8:	2401aa38 	.word	0x2401aa38
 80125ac:	2401aa20 	.word	0x2401aa20

080125b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80125b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80125b4:	4606      	mov	r6, r0
 80125b6:	460c      	mov	r4, r1
 80125b8:	f7ff ffc0 	bl	801253c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80125bc:	b918      	cbnz	r0, 80125c6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80125be:	2000      	movs	r0, #0
 80125c0:	b002      	add	sp, #8
 80125c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c6:	4608      	mov	r0, r1
 80125c8:	f7fb fabd 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	d1f6      	bne.n	80125be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80125d0:	4b3f      	ldr	r3, [pc, #252]	; (80126d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80125d2:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80126d4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80125d6:	881d      	ldrh	r5, [r3, #0]
 80125d8:	f8d9 a000 	ldr.w	sl, [r9]
 80125dc:	46c8      	mov	r8, r9
 80125de:	1b73      	subs	r3, r6, r5
 80125e0:	250e      	movs	r5, #14
 80125e2:	435d      	muls	r5, r3
 80125e4:	eb0a 0705 	add.w	r7, sl, r5
 80125e8:	7b3b      	ldrb	r3, [r7, #12]
 80125ea:	f013 0f20 	tst.w	r3, #32
 80125ee:	d0e6      	beq.n	80125be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80125f0:	4621      	mov	r1, r4
 80125f2:	4638      	mov	r0, r7
 80125f4:	f7fd fb64 	bl	800fcc0 <_ZNK8touchgfx4Rect8includesERKS0_>
 80125f8:	2800      	cmp	r0, #0
 80125fa:	d1e1      	bne.n	80125c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80125fc:	4639      	mov	r1, r7
 80125fe:	4620      	mov	r0, r4
 8012600:	f7fd fb5e 	bl	800fcc0 <_ZNK8touchgfx4Rect8includesERKS0_>
 8012604:	b108      	cbz	r0, 801260a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8012606:	4621      	mov	r1, r4
 8012608:	e020      	b.n	801264c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801260a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801260e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8012612:	429a      	cmp	r2, r3
 8012614:	d11e      	bne.n	8012654 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8012616:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801261a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801261e:	429a      	cmp	r2, r3
 8012620:	d118      	bne.n	8012654 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8012622:	6820      	ldr	r0, [r4, #0]
 8012624:	466b      	mov	r3, sp
 8012626:	6861      	ldr	r1, [r4, #4]
 8012628:	c303      	stmia	r3!, {r0, r1}
 801262a:	4639      	mov	r1, r7
 801262c:	4668      	mov	r0, sp
 801262e:	f7fd fb6d 	bl	800fd0c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012632:	f8d9 3000 	ldr.w	r3, [r9]
 8012636:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801263a:	442b      	add	r3, r5
 801263c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8012640:	4413      	add	r3, r2
 8012642:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8012646:	4293      	cmp	r3, r2
 8012648:	dc04      	bgt.n	8012654 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801264a:	4669      	mov	r1, sp
 801264c:	4630      	mov	r0, r6
 801264e:	f7ff ff93 	bl	8012578 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8012652:	e7b5      	b.n	80125c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8012654:	f8d8 3000 	ldr.w	r3, [r8]
 8012658:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801265c:	442b      	add	r3, r5
 801265e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012662:	4291      	cmp	r1, r2
 8012664:	d119      	bne.n	801269a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8012666:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801266a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801266e:	4291      	cmp	r1, r2
 8012670:	d113      	bne.n	801269a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8012672:	6820      	ldr	r0, [r4, #0]
 8012674:	466a      	mov	r2, sp
 8012676:	6861      	ldr	r1, [r4, #4]
 8012678:	c203      	stmia	r2!, {r0, r1}
 801267a:	4619      	mov	r1, r3
 801267c:	4668      	mov	r0, sp
 801267e:	f7fd fb45 	bl	800fd0c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012682:	f8d8 3000 	ldr.w	r3, [r8]
 8012686:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801268a:	442b      	add	r3, r5
 801268c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8012690:	4413      	add	r3, r2
 8012692:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8012696:	4293      	cmp	r3, r2
 8012698:	ddd7      	ble.n	801264a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801269a:	4620      	mov	r0, r4
 801269c:	f7fb fa53 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 80126a0:	b990      	cbnz	r0, 80126c8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80126a2:	88a7      	ldrh	r7, [r4, #4]
 80126a4:	88e3      	ldrh	r3, [r4, #6]
 80126a6:	fb17 f703 	smulbb	r7, r7, r3
 80126aa:	f8d8 3000 	ldr.w	r3, [r8]
 80126ae:	441d      	add	r5, r3
 80126b0:	4628      	mov	r0, r5
 80126b2:	f7fb fa48 	bl	800db46 <_ZNK8touchgfx4Rect7isEmptyEv>
 80126b6:	b948      	cbnz	r0, 80126cc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80126b8:	88ab      	ldrh	r3, [r5, #4]
 80126ba:	88ea      	ldrh	r2, [r5, #6]
 80126bc:	fb13 f302 	smulbb	r3, r3, r2
 80126c0:	42bb      	cmp	r3, r7
 80126c2:	f6bf af7c 	bge.w	80125be <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80126c6:	e79e      	b.n	8012606 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80126c8:	2700      	movs	r7, #0
 80126ca:	e7ee      	b.n	80126aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80126cc:	2300      	movs	r3, #0
 80126ce:	e7f7      	b.n	80126c0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80126d0:	2401aa38 	.word	0x2401aa38
 80126d4:	2401aa20 	.word	0x2401aa20

080126d8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80126d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126da:	4c24      	ldr	r4, [pc, #144]	; (801276c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80126dc:	6823      	ldr	r3, [r4, #0]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d042      	beq.n	8012768 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80126e2:	4a23      	ldr	r2, [pc, #140]	; (8012770 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80126e4:	4d23      	ldr	r5, [pc, #140]	; (8012774 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80126e6:	8811      	ldrh	r1, [r2, #0]
 80126e8:	f8b5 c000 	ldrh.w	ip, [r5]
 80126ec:	4822      	ldr	r0, [pc, #136]	; (8012778 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80126ee:	4461      	add	r1, ip
 80126f0:	1c4a      	adds	r2, r1, #1
 80126f2:	008f      	lsls	r7, r1, #2
 80126f4:	f022 0201 	bic.w	r2, r2, #1
 80126f8:	19de      	adds	r6, r3, r7
 80126fa:	0412      	lsls	r2, r2, #16
 80126fc:	6006      	str	r6, [r0, #0]
 80126fe:	4e1f      	ldr	r6, [pc, #124]	; (801277c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8012700:	0c12      	lsrs	r2, r2, #16
 8012702:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8012706:	19da      	adds	r2, r3, r7
 8012708:	6032      	str	r2, [r6, #0]
 801270a:	220e      	movs	r2, #14
 801270c:	fb02 f20c 	mul.w	r2, r2, ip
 8012710:	3203      	adds	r2, #3
 8012712:	f022 0203 	bic.w	r2, r2, #3
 8012716:	443a      	add	r2, r7
 8012718:	4f19      	ldr	r7, [pc, #100]	; (8012780 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801271a:	4413      	add	r3, r2
 801271c:	603b      	str	r3, [r7, #0]
 801271e:	2300      	movs	r3, #0
 8012720:	4f18      	ldr	r7, [pc, #96]	; (8012784 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8012722:	469c      	mov	ip, r3
 8012724:	803b      	strh	r3, [r7, #0]
 8012726:	4f18      	ldr	r7, [pc, #96]	; (8012788 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8012728:	683f      	ldr	r7, [r7, #0]
 801272a:	1aba      	subs	r2, r7, r2
 801272c:	4f17      	ldr	r7, [pc, #92]	; (801278c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801272e:	603a      	str	r2, [r7, #0]
 8012730:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012734:	4a16      	ldr	r2, [pc, #88]	; (8012790 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8012736:	8013      	strh	r3, [r2, #0]
 8012738:	428b      	cmp	r3, r1
 801273a:	d10d      	bne.n	8012758 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801273c:	882d      	ldrh	r5, [r5, #0]
 801273e:	2300      	movs	r3, #0
 8012740:	6830      	ldr	r0, [r6, #0]
 8012742:	240e      	movs	r4, #14
 8012744:	429d      	cmp	r5, r3
 8012746:	d90f      	bls.n	8012768 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8012748:	fb04 0203 	mla	r2, r4, r3, r0
 801274c:	3301      	adds	r3, #1
 801274e:	7b11      	ldrb	r1, [r2, #12]
 8012750:	f36f 1145 	bfc	r1, #5, #1
 8012754:	7311      	strb	r1, [r2, #12]
 8012756:	e7f5      	b.n	8012744 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8012758:	6822      	ldr	r2, [r4, #0]
 801275a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801275e:	6802      	ldr	r2, [r0, #0]
 8012760:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8012764:	3301      	adds	r3, #1
 8012766:	e7e7      	b.n	8012738 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8012768:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801276a:	bf00      	nop
 801276c:	2401aa1c 	.word	0x2401aa1c
 8012770:	2401aa38 	.word	0x2401aa38
 8012774:	2401aa3c 	.word	0x2401aa3c
 8012778:	2401aa30 	.word	0x2401aa30
 801277c:	2401aa20 	.word	0x2401aa20
 8012780:	2401aa28 	.word	0x2401aa28
 8012784:	2401aa3a 	.word	0x2401aa3a
 8012788:	2401aa24 	.word	0x2401aa24
 801278c:	2401aa34 	.word	0x2401aa34
 8012790:	2401aa2c 	.word	0x2401aa2c

08012794 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8012794:	4b06      	ldr	r3, [pc, #24]	; (80127b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	b943      	cbnz	r3, 80127ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801279a:	b139      	cbz	r1, 80127ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801279c:	4b05      	ldr	r3, [pc, #20]	; (80127b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801279e:	801a      	strh	r2, [r3, #0]
 80127a0:	4b05      	ldr	r3, [pc, #20]	; (80127b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80127a2:	6019      	str	r1, [r3, #0]
 80127a4:	4b05      	ldr	r3, [pc, #20]	; (80127bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80127a6:	6018      	str	r0, [r3, #0]
 80127a8:	f7ff bf96 	b.w	80126d8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	2401aa28 	.word	0x2401aa28
 80127b4:	2401aa3c 	.word	0x2401aa3c
 80127b8:	2401aa24 	.word	0x2401aa24
 80127bc:	2401aa1c 	.word	0x2401aa1c

080127c0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80127c0:	b470      	push	{r4, r5, r6}
 80127c2:	4c07      	ldr	r4, [pc, #28]	; (80127e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80127c4:	4605      	mov	r5, r0
 80127c6:	4610      	mov	r0, r2
 80127c8:	9a03      	ldr	r2, [sp, #12]
 80127ca:	6826      	ldr	r6, [r4, #0]
 80127cc:	b936      	cbnz	r6, 80127dc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80127ce:	6025      	str	r5, [r4, #0]
 80127d0:	4c04      	ldr	r4, [pc, #16]	; (80127e4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80127d2:	8021      	strh	r1, [r4, #0]
 80127d4:	4619      	mov	r1, r3
 80127d6:	bc70      	pop	{r4, r5, r6}
 80127d8:	f7ff bfdc 	b.w	8012794 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80127dc:	bc70      	pop	{r4, r5, r6}
 80127de:	4770      	bx	lr
 80127e0:	2401aa40 	.word	0x2401aa40
 80127e4:	2401aa38 	.word	0x2401aa38

080127e8 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80127e8:	4a12      	ldr	r2, [pc, #72]	; (8012834 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 80127ea:	8803      	ldrh	r3, [r0, #0]
 80127ec:	8812      	ldrh	r2, [r2, #0]
 80127ee:	4293      	cmp	r3, r2
 80127f0:	d207      	bcs.n	8012802 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 80127f2:	4a11      	ldr	r2, [pc, #68]	; (8012838 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80127f4:	2114      	movs	r1, #20
 80127f6:	6812      	ldr	r2, [r2, #0]
 80127f8:	fb01 2303 	mla	r3, r1, r3, r2
 80127fc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8012800:	4770      	bx	lr
 8012802:	490e      	ldr	r1, [pc, #56]	; (801283c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8012804:	8809      	ldrh	r1, [r1, #0]
 8012806:	4411      	add	r1, r2
 8012808:	428b      	cmp	r3, r1
 801280a:	da04      	bge.n	8012816 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801280c:	1a9b      	subs	r3, r3, r2
 801280e:	4a0c      	ldr	r2, [pc, #48]	; (8012840 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8012810:	210e      	movs	r1, #14
 8012812:	6812      	ldr	r2, [r2, #0]
 8012814:	e7f0      	b.n	80127f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8012816:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801281a:	4293      	cmp	r3, r2
 801281c:	d108      	bne.n	8012830 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801281e:	4b09      	ldr	r3, [pc, #36]	; (8012844 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	b91b      	cbnz	r3, 801282c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8012824:	4b08      	ldr	r3, [pc, #32]	; (8012848 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8012826:	f9b3 0000 	ldrsh.w	r0, [r3]
 801282a:	4770      	bx	lr
 801282c:	4b07      	ldr	r3, [pc, #28]	; (801284c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801282e:	e7fa      	b.n	8012826 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8012830:	2000      	movs	r0, #0
 8012832:	4770      	bx	lr
 8012834:	2401aa38 	.word	0x2401aa38
 8012838:	2401aa40 	.word	0x2401aa40
 801283c:	2401aa3c 	.word	0x2401aa3c
 8012840:	2401aa20 	.word	0x2401aa20
 8012844:	2401a9b0 	.word	0x2401a9b0
 8012848:	2401a9b2 	.word	0x2401a9b2
 801284c:	2401a9b4 	.word	0x2401a9b4

08012850 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8012850:	4a12      	ldr	r2, [pc, #72]	; (801289c <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8012852:	8803      	ldrh	r3, [r0, #0]
 8012854:	8812      	ldrh	r2, [r2, #0]
 8012856:	4293      	cmp	r3, r2
 8012858:	d207      	bcs.n	801286a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801285a:	4a11      	ldr	r2, [pc, #68]	; (80128a0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801285c:	2114      	movs	r1, #20
 801285e:	6812      	ldr	r2, [r2, #0]
 8012860:	fb01 2303 	mla	r3, r1, r3, r2
 8012864:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8012868:	4770      	bx	lr
 801286a:	490e      	ldr	r1, [pc, #56]	; (80128a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801286c:	8809      	ldrh	r1, [r1, #0]
 801286e:	4411      	add	r1, r2
 8012870:	428b      	cmp	r3, r1
 8012872:	da04      	bge.n	801287e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8012874:	1a9b      	subs	r3, r3, r2
 8012876:	4a0c      	ldr	r2, [pc, #48]	; (80128a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8012878:	210e      	movs	r1, #14
 801287a:	6812      	ldr	r2, [r2, #0]
 801287c:	e7f0      	b.n	8012860 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801287e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012882:	4293      	cmp	r3, r2
 8012884:	d108      	bne.n	8012898 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8012886:	4b09      	ldr	r3, [pc, #36]	; (80128ac <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	b91b      	cbnz	r3, 8012894 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801288c:	4b08      	ldr	r3, [pc, #32]	; (80128b0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801288e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8012892:	4770      	bx	lr
 8012894:	4b07      	ldr	r3, [pc, #28]	; (80128b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8012896:	e7fa      	b.n	801288e <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8012898:	2000      	movs	r0, #0
 801289a:	4770      	bx	lr
 801289c:	2401aa38 	.word	0x2401aa38
 80128a0:	2401aa40 	.word	0x2401aa40
 80128a4:	2401aa3c 	.word	0x2401aa3c
 80128a8:	2401aa20 	.word	0x2401aa20
 80128ac:	2401a9b0 	.word	0x2401a9b0
 80128b0:	2401a9b4 	.word	0x2401a9b4
 80128b4:	2401a9b2 	.word	0x2401a9b2

080128b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80128b8:	4a1f      	ldr	r2, [pc, #124]	; (8012938 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 80128ba:	b510      	push	{r4, lr}
 80128bc:	880b      	ldrh	r3, [r1, #0]
 80128be:	8812      	ldrh	r2, [r2, #0]
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d213      	bcs.n	80128ec <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80128c4:	4a1d      	ldr	r2, [pc, #116]	; (801293c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 80128c6:	2114      	movs	r1, #20
 80128c8:	6812      	ldr	r2, [r2, #0]
 80128ca:	fb01 2303 	mla	r3, r1, r3, r2
 80128ce:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80128d2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80128d6:	8a1a      	ldrh	r2, [r3, #16]
 80128d8:	8a5b      	ldrh	r3, [r3, #18]
 80128da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80128de:	8004      	strh	r4, [r0, #0]
 80128e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80128e4:	8041      	strh	r1, [r0, #2]
 80128e6:	8082      	strh	r2, [r0, #4]
 80128e8:	80c3      	strh	r3, [r0, #6]
 80128ea:	e00e      	b.n	801290a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80128ec:	4914      	ldr	r1, [pc, #80]	; (8012940 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 80128ee:	8809      	ldrh	r1, [r1, #0]
 80128f0:	4411      	add	r1, r2
 80128f2:	428b      	cmp	r3, r1
 80128f4:	da0a      	bge.n	801290c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 80128f6:	1a9b      	subs	r3, r3, r2
 80128f8:	4a12      	ldr	r2, [pc, #72]	; (8012944 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80128fa:	210e      	movs	r1, #14
 80128fc:	6812      	ldr	r2, [r2, #0]
 80128fe:	fb01 2303 	mla	r3, r1, r3, r2
 8012902:	681a      	ldr	r2, [r3, #0]
 8012904:	6002      	str	r2, [r0, #0]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	6042      	str	r2, [r0, #4]
 801290a:	bd10      	pop	{r4, pc}
 801290c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012910:	4293      	cmp	r3, r2
 8012912:	d10b      	bne.n	801292c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8012914:	4b0c      	ldr	r3, [pc, #48]	; (8012948 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8012916:	f9b3 1000 	ldrsh.w	r1, [r3]
 801291a:	4b0c      	ldr	r3, [pc, #48]	; (801294c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801291c:	8081      	strh	r1, [r0, #4]
 801291e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012922:	2300      	movs	r3, #0
 8012924:	80c2      	strh	r2, [r0, #6]
 8012926:	8003      	strh	r3, [r0, #0]
 8012928:	8043      	strh	r3, [r0, #2]
 801292a:	e7ee      	b.n	801290a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 801292c:	2300      	movs	r3, #0
 801292e:	8003      	strh	r3, [r0, #0]
 8012930:	8043      	strh	r3, [r0, #2]
 8012932:	8083      	strh	r3, [r0, #4]
 8012934:	e7d8      	b.n	80128e8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8012936:	bf00      	nop
 8012938:	2401aa38 	.word	0x2401aa38
 801293c:	2401aa40 	.word	0x2401aa40
 8012940:	2401aa3c 	.word	0x2401aa3c
 8012944:	2401aa20 	.word	0x2401aa20
 8012948:	2401a9ac 	.word	0x2401a9ac
 801294c:	2401a9ae 	.word	0x2401a9ae

08012950 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8012950:	4a12      	ldr	r2, [pc, #72]	; (801299c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8012952:	8803      	ldrh	r3, [r0, #0]
 8012954:	8811      	ldrh	r1, [r2, #0]
 8012956:	428b      	cmp	r3, r1
 8012958:	d20b      	bcs.n	8012972 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801295a:	4a11      	ldr	r2, [pc, #68]	; (80129a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801295c:	6812      	ldr	r2, [r2, #0]
 801295e:	b112      	cbz	r2, 8012966 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8012960:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012964:	b9c0      	cbnz	r0, 8012998 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8012966:	4a0f      	ldr	r2, [pc, #60]	; (80129a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8012968:	6811      	ldr	r1, [r2, #0]
 801296a:	2214      	movs	r2, #20
 801296c:	4353      	muls	r3, r2
 801296e:	58c8      	ldr	r0, [r1, r3]
 8012970:	4770      	bx	lr
 8012972:	4a0d      	ldr	r2, [pc, #52]	; (80129a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8012974:	8812      	ldrh	r2, [r2, #0]
 8012976:	440a      	add	r2, r1
 8012978:	4293      	cmp	r3, r2
 801297a:	da04      	bge.n	8012986 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801297c:	4a08      	ldr	r2, [pc, #32]	; (80129a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801297e:	6812      	ldr	r2, [r2, #0]
 8012980:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012984:	4770      	bx	lr
 8012986:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801298a:	4293      	cmp	r3, r2
 801298c:	d103      	bne.n	8012996 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801298e:	4b07      	ldr	r3, [pc, #28]	; (80129ac <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8012994:	4770      	bx	lr
 8012996:	2000      	movs	r0, #0
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	2401aa38 	.word	0x2401aa38
 80129a0:	2401aa1c 	.word	0x2401aa1c
 80129a4:	2401aa40 	.word	0x2401aa40
 80129a8:	2401aa3c 	.word	0x2401aa3c
 80129ac:	2401a9b8 	.word	0x2401a9b8

080129b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80129b0:	4b24      	ldr	r3, [pc, #144]	; (8012a44 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80129b2:	8802      	ldrh	r2, [r0, #0]
 80129b4:	8818      	ldrh	r0, [r3, #0]
 80129b6:	4282      	cmp	r2, r0
 80129b8:	d221      	bcs.n	80129fe <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80129ba:	4b23      	ldr	r3, [pc, #140]	; (8012a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80129bc:	6819      	ldr	r1, [r3, #0]
 80129be:	2314      	movs	r3, #20
 80129c0:	fb03 1302 	mla	r3, r3, r2, r1
 80129c4:	6858      	ldr	r0, [r3, #4]
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d03a      	beq.n	8012a40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80129ca:	4920      	ldr	r1, [pc, #128]	; (8012a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80129cc:	6809      	ldr	r1, [r1, #0]
 80129ce:	2900      	cmp	r1, #0
 80129d0:	d036      	beq.n	8012a40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80129d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80129d6:	2900      	cmp	r1, #0
 80129d8:	d032      	beq.n	8012a40 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80129da:	891a      	ldrh	r2, [r3, #8]
 80129dc:	8958      	ldrh	r0, [r3, #10]
 80129de:	4350      	muls	r0, r2
 80129e0:	7c5a      	ldrb	r2, [r3, #17]
 80129e2:	7cdb      	ldrb	r3, [r3, #19]
 80129e4:	0952      	lsrs	r2, r2, #5
 80129e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80129ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80129ee:	2b0b      	cmp	r3, #11
 80129f0:	bf18      	it	ne
 80129f2:	0040      	lslne	r0, r0, #1
 80129f4:	3003      	adds	r0, #3
 80129f6:	f020 0003 	bic.w	r0, r0, #3
 80129fa:	4408      	add	r0, r1
 80129fc:	4770      	bx	lr
 80129fe:	4b14      	ldr	r3, [pc, #80]	; (8012a50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	4403      	add	r3, r0
 8012a04:	429a      	cmp	r2, r3
 8012a06:	da1a      	bge.n	8012a3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012a08:	4b12      	ldr	r3, [pc, #72]	; (8012a54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8012a0a:	1a10      	subs	r0, r2, r0
 8012a0c:	210e      	movs	r1, #14
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	fb01 3000 	mla	r0, r1, r0, r3
 8012a14:	7b03      	ldrb	r3, [r0, #12]
 8012a16:	f003 031f 	and.w	r3, r3, #31
 8012a1a:	2b0b      	cmp	r3, #11
 8012a1c:	d10b      	bne.n	8012a36 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8012a1e:	8903      	ldrh	r3, [r0, #8]
 8012a20:	8940      	ldrh	r0, [r0, #10]
 8012a22:	4358      	muls	r0, r3
 8012a24:	4b09      	ldr	r3, [pc, #36]	; (8012a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8012a26:	3003      	adds	r0, #3
 8012a28:	6819      	ldr	r1, [r3, #0]
 8012a2a:	f020 0303 	bic.w	r3, r0, #3
 8012a2e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8012a32:	4418      	add	r0, r3
 8012a34:	4770      	bx	lr
 8012a36:	2b0d      	cmp	r3, #13
 8012a38:	d101      	bne.n	8012a3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8012a3a:	300d      	adds	r0, #13
 8012a3c:	4770      	bx	lr
 8012a3e:	2000      	movs	r0, #0
 8012a40:	4770      	bx	lr
 8012a42:	bf00      	nop
 8012a44:	2401aa38 	.word	0x2401aa38
 8012a48:	2401aa40 	.word	0x2401aa40
 8012a4c:	2401aa1c 	.word	0x2401aa1c
 8012a50:	2401aa3c 	.word	0x2401aa3c
 8012a54:	2401aa20 	.word	0x2401aa20

08012a58 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8012a58:	4a17      	ldr	r2, [pc, #92]	; (8012ab8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8012a5a:	b510      	push	{r4, lr}
 8012a5c:	8803      	ldrh	r3, [r0, #0]
 8012a5e:	8812      	ldrh	r2, [r2, #0]
 8012a60:	4293      	cmp	r3, r2
 8012a62:	d20c      	bcs.n	8012a7e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8012a64:	4a15      	ldr	r2, [pc, #84]	; (8012abc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8012a66:	2114      	movs	r1, #20
 8012a68:	6812      	ldr	r2, [r2, #0]
 8012a6a:	fb01 2303 	mla	r3, r1, r3, r2
 8012a6e:	7c58      	ldrb	r0, [r3, #17]
 8012a70:	0942      	lsrs	r2, r0, #5
 8012a72:	7cd8      	ldrb	r0, [r3, #19]
 8012a74:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8012a78:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8012a7c:	bd10      	pop	{r4, pc}
 8012a7e:	4910      	ldr	r1, [pc, #64]	; (8012ac0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8012a80:	8809      	ldrh	r1, [r1, #0]
 8012a82:	4411      	add	r1, r2
 8012a84:	428b      	cmp	r3, r1
 8012a86:	da09      	bge.n	8012a9c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8012a88:	1a9b      	subs	r3, r3, r2
 8012a8a:	4a0e      	ldr	r2, [pc, #56]	; (8012ac4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8012a8c:	210e      	movs	r1, #14
 8012a8e:	6812      	ldr	r2, [r2, #0]
 8012a90:	fb01 2303 	mla	r3, r1, r3, r2
 8012a94:	7b18      	ldrb	r0, [r3, #12]
 8012a96:	f000 001f 	and.w	r0, r0, #31
 8012a9a:	e7ef      	b.n	8012a7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8012a9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012aa0:	4293      	cmp	r3, r2
 8012aa2:	d106      	bne.n	8012ab2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8012aa4:	f7f6 ff26 	bl	80098f4 <_ZN8touchgfx3HAL3lcdEv>
 8012aa8:	6803      	ldr	r3, [r0, #0]
 8012aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ab0:	4718      	bx	r3
 8012ab2:	2000      	movs	r0, #0
 8012ab4:	e7e2      	b.n	8012a7c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8012ab6:	bf00      	nop
 8012ab8:	2401aa38 	.word	0x2401aa38
 8012abc:	2401aa40 	.word	0x2401aa40
 8012ac0:	2401aa3c 	.word	0x2401aa3c
 8012ac4:	2401aa20 	.word	0x2401aa20

08012ac8 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8012ac8:	2018      	movs	r0, #24
 8012aca:	4770      	bx	lr

08012acc <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8012acc:	2001      	movs	r0, #1
 8012ace:	4770      	bx	lr

08012ad0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8012ad0:	4b02      	ldr	r3, [pc, #8]	; (8012adc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8012ad2:	8818      	ldrh	r0, [r3, #0]
 8012ad4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8012ad8:	b280      	uxth	r0, r0
 8012ada:	4770      	bx	lr
 8012adc:	2401a9b2 	.word	0x2401a9b2

08012ae0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8012ae0:	2bff      	cmp	r3, #255	; 0xff
 8012ae2:	d040      	beq.n	8012b66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8012ae4:	2a2c      	cmp	r2, #44	; 0x2c
 8012ae6:	d02a      	beq.n	8012b3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8012ae8:	d80f      	bhi.n	8012b0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8012aea:	2a08      	cmp	r2, #8
 8012aec:	d037      	beq.n	8012b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012aee:	d805      	bhi.n	8012afc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8012af0:	2a04      	cmp	r2, #4
 8012af2:	d032      	beq.n	8012b5a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8012af4:	2a05      	cmp	r2, #5
 8012af6:	d02e      	beq.n	8012b56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8012af8:	2000      	movs	r0, #0
 8012afa:	4770      	bx	lr
 8012afc:	2a0a      	cmp	r2, #10
 8012afe:	d02e      	beq.n	8012b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8012b00:	d301      	bcc.n	8012b06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8012b02:	2a0b      	cmp	r2, #11
 8012b04:	d1f8      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b06:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8012b08:	4770      	bx	lr
 8012b0a:	2a30      	cmp	r2, #48	; 0x30
 8012b0c:	d029      	beq.n	8012b62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8012b0e:	d808      	bhi.n	8012b22 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8012b10:	2a2e      	cmp	r2, #46	; 0x2e
 8012b12:	684b      	ldr	r3, [r1, #4]
 8012b14:	d01a      	beq.n	8012b4c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8012b16:	d90b      	bls.n	8012b30 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1ec      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b1e:	6a00      	ldr	r0, [r0, #32]
 8012b20:	4770      	bx	lr
 8012b22:	2a32      	cmp	r2, #50	; 0x32
 8012b24:	d01d      	beq.n	8012b62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8012b26:	d301      	bcc.n	8012b2c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8012b28:	2a33      	cmp	r2, #51	; 0x33
 8012b2a:	d1e5      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b2c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8012b2e:	4770      	bx	lr
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d0f3      	beq.n	8012b1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8012b36:	2b01      	cmp	r3, #1
 8012b38:	d1de      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b3a:	6900      	ldr	r0, [r0, #16]
 8012b3c:	4770      	bx	lr
 8012b3e:	684b      	ldr	r3, [r1, #4]
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	b133      	cbz	r3, 8012b52 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8012b44:	2b01      	cmp	r3, #1
 8012b46:	d1d7      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b48:	6880      	ldr	r0, [r0, #8]
 8012b4a:	4770      	bx	lr
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1d2      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b52:	6980      	ldr	r0, [r0, #24]
 8012b54:	4770      	bx	lr
 8012b56:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8012b58:	4770      	bx	lr
 8012b5a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8012b5c:	4770      	bx	lr
 8012b5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8012b60:	4770      	bx	lr
 8012b62:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8012b64:	4770      	bx	lr
 8012b66:	2a2c      	cmp	r2, #44	; 0x2c
 8012b68:	d02a      	beq.n	8012bc0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8012b6a:	d80f      	bhi.n	8012b8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8012b6c:	2a08      	cmp	r2, #8
 8012b6e:	d035      	beq.n	8012bdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8012b70:	d805      	bhi.n	8012b7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8012b72:	2a04      	cmp	r2, #4
 8012b74:	d030      	beq.n	8012bd8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8012b76:	2a05      	cmp	r2, #5
 8012b78:	d1be      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b7a:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8012b7c:	4770      	bx	lr
 8012b7e:	2a0a      	cmp	r2, #10
 8012b80:	d02c      	beq.n	8012bdc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8012b82:	d301      	bcc.n	8012b88 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8012b84:	2a0b      	cmp	r2, #11
 8012b86:	d1b7      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012b88:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8012b8a:	4770      	bx	lr
 8012b8c:	2a30      	cmp	r2, #48	; 0x30
 8012b8e:	d027      	beq.n	8012be0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8012b90:	d808      	bhi.n	8012ba4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8012b92:	2a2e      	cmp	r2, #46	; 0x2e
 8012b94:	684b      	ldr	r3, [r1, #4]
 8012b96:	d01a      	beq.n	8012bce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8012b98:	d90b      	bls.n	8012bb2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d1ab      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012ba0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8012ba2:	4770      	bx	lr
 8012ba4:	2a32      	cmp	r2, #50	; 0x32
 8012ba6:	d01b      	beq.n	8012be0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8012ba8:	d301      	bcc.n	8012bae <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8012baa:	2a33      	cmp	r2, #51	; 0x33
 8012bac:	d1a4      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012bae:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8012bb0:	4770      	bx	lr
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d0f3      	beq.n	8012ba0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d19d      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012bbc:	6940      	ldr	r0, [r0, #20]
 8012bbe:	4770      	bx	lr
 8012bc0:	684b      	ldr	r3, [r1, #4]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	b133      	cbz	r3, 8012bd4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d196      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012bca:	68c0      	ldr	r0, [r0, #12]
 8012bcc:	4770      	bx	lr
 8012bce:	781b      	ldrb	r3, [r3, #0]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d191      	bne.n	8012af8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8012bd4:	69c0      	ldr	r0, [r0, #28]
 8012bd6:	4770      	bx	lr
 8012bd8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8012bda:	4770      	bx	lr
 8012bdc:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8012bde:	4770      	bx	lr
 8012be0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8012be2:	4770      	bx	lr

08012be4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012be8:	b085      	sub	sp, #20
 8012bea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8012bec:	9203      	str	r2, [sp, #12]
 8012bee:	6870      	ldr	r0, [r6, #4]
 8012bf0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8012bf4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8012bf8:	9101      	str	r1, [sp, #4]
 8012bfa:	fa1f f885 	uxth.w	r8, r5
 8012bfe:	43ed      	mvns	r5, r5
 8012c00:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8012c04:	b2ed      	uxtb	r5, r5
 8012c06:	fb00 2404 	mla	r4, r0, r4, r2
 8012c0a:	6832      	ldr	r2, [r6, #0]
 8012c0c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012c10:	4414      	add	r4, r2
 8012c12:	f8dc 2000 	ldr.w	r2, [ip]
 8012c16:	9202      	str	r2, [sp, #8]
 8012c18:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8012c1c:	f102 0e04 	add.w	lr, r2, #4
 8012c20:	9a01      	ldr	r2, [sp, #4]
 8012c22:	2a00      	cmp	r2, #0
 8012c24:	dc03      	bgt.n	8012c2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8012c26:	9a03      	ldr	r2, [sp, #12]
 8012c28:	2a00      	cmp	r2, #0
 8012c2a:	f340 8116 	ble.w	8012e5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012c30:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8012c34:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012c38:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012c3a:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8012c3e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	dd0e      	ble.n	8012c64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8012c46:	1406      	asrs	r6, r0, #16
 8012c48:	d405      	bmi.n	8012c56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c4a:	4556      	cmp	r6, sl
 8012c4c:	da03      	bge.n	8012c56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c4e:	1416      	asrs	r6, r2, #16
 8012c50:	d401      	bmi.n	8012c56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8012c52:	454e      	cmp	r6, r9
 8012c54:	db07      	blt.n	8012c66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8012c56:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012c58:	3b01      	subs	r3, #1
 8012c5a:	3403      	adds	r4, #3
 8012c5c:	4430      	add	r0, r6
 8012c5e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8012c60:	4432      	add	r2, r6
 8012c62:	e7ee      	b.n	8012c42 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8012c64:	d063      	beq.n	8012d2e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8012c66:	1e5e      	subs	r6, r3, #1
 8012c68:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8012c6a:	fb07 0706 	mla	r7, r7, r6, r0
 8012c6e:	143f      	asrs	r7, r7, #16
 8012c70:	d454      	bmi.n	8012d1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c72:	4557      	cmp	r7, sl
 8012c74:	da52      	bge.n	8012d1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c76:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8012c78:	fb07 2606 	mla	r6, r7, r6, r2
 8012c7c:	1436      	asrs	r6, r6, #16
 8012c7e:	d44d      	bmi.n	8012d1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c80:	454e      	cmp	r6, r9
 8012c82:	da4b      	bge.n	8012d1c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8012c84:	1ce6      	adds	r6, r4, #3
 8012c86:	4699      	mov	r9, r3
 8012c88:	f1b9 0f00 	cmp.w	r9, #0
 8012c8c:	f106 0603 	add.w	r6, r6, #3
 8012c90:	dd48      	ble.n	8012d24 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8012c92:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8012c96:	1417      	asrs	r7, r2, #16
 8012c98:	9902      	ldr	r1, [sp, #8]
 8012c9a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8012c9e:	f109 39ff 	add.w	r9, r9, #4294967295
 8012ca2:	fb0b 1707 	mla	r7, fp, r7, r1
 8012ca6:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8012caa:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012cac:	f817 700a 	ldrb.w	r7, [r7, sl]
 8012cb0:	fb1b fb05 	smulbb	fp, fp, r5
 8012cb4:	4408      	add	r0, r1
 8012cb6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012cb8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8012cbc:	440a      	add	r2, r1
 8012cbe:	eb0e 0a07 	add.w	sl, lr, r7
 8012cc2:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8012cc6:	fb07 b708 	mla	r7, r7, r8, fp
 8012cca:	b2bf      	uxth	r7, r7
 8012ccc:	f107 0b01 	add.w	fp, r7, #1
 8012cd0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012cd4:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8012cd8:	fb1b fb05 	smulbb	fp, fp, r5
 8012cdc:	123f      	asrs	r7, r7, #8
 8012cde:	f806 7c06 	strb.w	r7, [r6, #-6]
 8012ce2:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8012ce6:	fb07 b708 	mla	r7, r7, r8, fp
 8012cea:	b2bf      	uxth	r7, r7
 8012cec:	f107 0b01 	add.w	fp, r7, #1
 8012cf0:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8012cf4:	123f      	asrs	r7, r7, #8
 8012cf6:	f806 7c05 	strb.w	r7, [r6, #-5]
 8012cfa:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8012cfe:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8012d02:	fb1a fa05 	smulbb	sl, sl, r5
 8012d06:	fb07 a708 	mla	r7, r7, r8, sl
 8012d0a:	b2bf      	uxth	r7, r7
 8012d0c:	f107 0a01 	add.w	sl, r7, #1
 8012d10:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8012d14:	123f      	asrs	r7, r7, #8
 8012d16:	f806 7c04 	strb.w	r7, [r6, #-4]
 8012d1a:	e7b5      	b.n	8012c88 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8012d1c:	2700      	movs	r7, #0
 8012d1e:	1bde      	subs	r6, r3, r7
 8012d20:	2e00      	cmp	r6, #0
 8012d22:	dc42      	bgt.n	8012daa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8012d24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012d28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012d2c:	441c      	add	r4, r3
 8012d2e:	9b01      	ldr	r3, [sp, #4]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	f340 8092 	ble.w	8012e5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8012d36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d3c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012d40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012d44:	eef0 6a62 	vmov.f32	s13, s5
 8012d48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012d4c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012d50:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012d54:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8012d58:	eef0 6a43 	vmov.f32	s13, s6
 8012d5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012d60:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8012d64:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012d68:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012d6c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012d70:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012d74:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012d78:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012d7c:	ee12 2a90 	vmov	r2, s5
 8012d80:	eef0 2a47 	vmov.f32	s5, s14
 8012d84:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d88:	ee13 2a10 	vmov	r2, s6
 8012d8c:	9311      	str	r3, [sp, #68]	; 0x44
 8012d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d90:	eeb0 3a67 	vmov.f32	s6, s15
 8012d94:	fb92 f3f3 	sdiv	r3, r2, r3
 8012d98:	9312      	str	r3, [sp, #72]	; 0x48
 8012d9a:	9b01      	ldr	r3, [sp, #4]
 8012d9c:	9a03      	ldr	r2, [sp, #12]
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	9301      	str	r3, [sp, #4]
 8012da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012da4:	bf08      	it	eq
 8012da6:	4613      	moveq	r3, r2
 8012da8:	e73a      	b.n	8012c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012daa:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8012dae:	d44e      	bmi.n	8012e4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012db0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8012db4:	4556      	cmp	r6, sl
 8012db6:	dd4a      	ble.n	8012e4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012db8:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8012dbc:	d447      	bmi.n	8012e4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dbe:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8012dc2:	4559      	cmp	r1, fp
 8012dc4:	dd43      	ble.n	8012e4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8012dc6:	fa0f f986 	sxth.w	r9, r6
 8012dca:	9902      	ldr	r1, [sp, #8]
 8012dcc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8012dd0:	fb0b 1909 	mla	r9, fp, r9, r1
 8012dd4:	f814 b006 	ldrb.w	fp, [r4, r6]
 8012dd8:	f819 900a 	ldrb.w	r9, [r9, sl]
 8012ddc:	fb1b fb05 	smulbb	fp, fp, r5
 8012de0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012de4:	eb0e 0a09 	add.w	sl, lr, r9
 8012de8:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8012dec:	fb09 b908 	mla	r9, r9, r8, fp
 8012df0:	fa1f f989 	uxth.w	r9, r9
 8012df4:	f109 0b01 	add.w	fp, r9, #1
 8012df8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012dfc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e00:	f804 9006 	strb.w	r9, [r4, r6]
 8012e04:	4426      	add	r6, r4
 8012e06:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012e0a:	f896 b001 	ldrb.w	fp, [r6, #1]
 8012e0e:	fb1b fb05 	smulbb	fp, fp, r5
 8012e12:	fb09 b908 	mla	r9, r9, r8, fp
 8012e16:	fa1f f989 	uxth.w	r9, r9
 8012e1a:	f109 0b01 	add.w	fp, r9, #1
 8012e1e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8012e22:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e26:	f886 9001 	strb.w	r9, [r6, #1]
 8012e2a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012e2e:	f896 a002 	ldrb.w	sl, [r6, #2]
 8012e32:	fb1a fa05 	smulbb	sl, sl, r5
 8012e36:	fb09 a908 	mla	r9, r9, r8, sl
 8012e3a:	fa1f f989 	uxth.w	r9, r9
 8012e3e:	f109 0a01 	add.w	sl, r9, #1
 8012e42:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8012e46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8012e4a:	f886 9002 	strb.w	r9, [r6, #2]
 8012e4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012e50:	3701      	adds	r7, #1
 8012e52:	4408      	add	r0, r1
 8012e54:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012e56:	440a      	add	r2, r1
 8012e58:	e761      	b.n	8012d1e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8012e5a:	b005      	add	sp, #20
 8012e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8012e60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8012e66:	4693      	mov	fp, r2
 8012e68:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8012e6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012e6e:	6868      	ldr	r0, [r5, #4]
 8012e70:	6877      	ldr	r7, [r6, #4]
 8012e72:	9100      	str	r1, [sp, #0]
 8012e74:	3704      	adds	r7, #4
 8012e76:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8012e7a:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8012e7e:	fb00 2404 	mla	r4, r0, r4, r2
 8012e82:	682a      	ldr	r2, [r5, #0]
 8012e84:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8012e88:	4414      	add	r4, r2
 8012e8a:	6832      	ldr	r2, [r6, #0]
 8012e8c:	9201      	str	r2, [sp, #4]
 8012e8e:	9a00      	ldr	r2, [sp, #0]
 8012e90:	2a00      	cmp	r2, #0
 8012e92:	dc03      	bgt.n	8012e9c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8012e94:	f1bb 0f00 	cmp.w	fp, #0
 8012e98:	f340 80bc 	ble.w	8013014 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e9e:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8012ea2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8012ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012ea8:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8012eac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	dd0c      	ble.n	8012ece <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8012eb4:	1405      	asrs	r5, r0, #16
 8012eb6:	d405      	bmi.n	8012ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012eb8:	4555      	cmp	r5, sl
 8012eba:	da03      	bge.n	8012ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ebc:	1415      	asrs	r5, r2, #16
 8012ebe:	d401      	bmi.n	8012ec4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8012ec0:	454d      	cmp	r5, r9
 8012ec2:	db05      	blt.n	8012ed0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8012ec4:	4440      	add	r0, r8
 8012ec6:	4472      	add	r2, lr
 8012ec8:	3b01      	subs	r3, #1
 8012eca:	3403      	adds	r4, #3
 8012ecc:	e7f0      	b.n	8012eb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8012ece:	d03f      	beq.n	8012f50 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8012ed0:	1e5d      	subs	r5, r3, #1
 8012ed2:	fb08 0c05 	mla	ip, r8, r5, r0
 8012ed6:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8012eda:	d42e      	bmi.n	8012f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012edc:	45d4      	cmp	ip, sl
 8012ede:	da2c      	bge.n	8012f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012ee0:	fb0e 2505 	mla	r5, lr, r5, r2
 8012ee4:	142d      	asrs	r5, r5, #16
 8012ee6:	d428      	bmi.n	8012f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012ee8:	454d      	cmp	r5, r9
 8012eea:	da26      	bge.n	8012f3a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8012eec:	1ce5      	adds	r5, r4, #3
 8012eee:	469c      	mov	ip, r3
 8012ef0:	f1bc 0f00 	cmp.w	ip, #0
 8012ef4:	f105 0503 	add.w	r5, r5, #3
 8012ef8:	dd25      	ble.n	8012f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8012efa:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012efe:	ea4f 4922 	mov.w	r9, r2, asr #16
 8012f02:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012f06:	4472      	add	r2, lr
 8012f08:	468a      	mov	sl, r1
 8012f0a:	9901      	ldr	r1, [sp, #4]
 8012f0c:	fb0a 1909 	mla	r9, sl, r9, r1
 8012f10:	1401      	asrs	r1, r0, #16
 8012f12:	4440      	add	r0, r8
 8012f14:	f819 9001 	ldrb.w	r9, [r9, r1]
 8012f18:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8012f1c:	eb07 0a09 	add.w	sl, r7, r9
 8012f20:	f817 9009 	ldrb.w	r9, [r7, r9]
 8012f24:	f805 9c06 	strb.w	r9, [r5, #-6]
 8012f28:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8012f2c:	f805 9c05 	strb.w	r9, [r5, #-5]
 8012f30:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8012f34:	f805 9c04 	strb.w	r9, [r5, #-4]
 8012f38:	e7da      	b.n	8012ef0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8012f3a:	2500      	movs	r5, #0
 8012f3c:	eba3 0c05 	sub.w	ip, r3, r5
 8012f40:	f1bc 0f00 	cmp.w	ip, #0
 8012f44:	dc3b      	bgt.n	8012fbe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8012f46:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012f4e:	441c      	add	r4, r3
 8012f50:	9b00      	ldr	r3, [sp, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	dd5e      	ble.n	8013014 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8012f56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8012f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8012f60:	eeb0 6a62 	vmov.f32	s12, s5
 8012f64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8012f68:	ee31 1a05 	vadd.f32	s2, s2, s10
 8012f6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012f70:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8012f74:	eeb0 6a43 	vmov.f32	s12, s6
 8012f78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8012f7c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8012f80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8012f84:	ee61 7a27 	vmul.f32	s15, s2, s15
 8012f88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8012f8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8012f90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8012f94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8012f98:	ee12 2a90 	vmov	r2, s5
 8012f9c:	eef0 2a47 	vmov.f32	s5, s14
 8012fa0:	fb92 f8f3 	sdiv	r8, r2, r3
 8012fa4:	ee13 2a10 	vmov	r2, s6
 8012fa8:	eeb0 3a67 	vmov.f32	s6, s15
 8012fac:	fb92 fef3 	sdiv	lr, r2, r3
 8012fb0:	9b00      	ldr	r3, [sp, #0]
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	9300      	str	r3, [sp, #0]
 8012fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fb8:	bf08      	it	eq
 8012fba:	465b      	moveq	r3, fp
 8012fbc:	e767      	b.n	8012e8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8012fbe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8012fc2:	d423      	bmi.n	801300c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fc4:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8012fc8:	45cc      	cmp	ip, r9
 8012fca:	dd1f      	ble.n	801300c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fcc:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8012fd0:	d41c      	bmi.n	801300c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fd2:	68f1      	ldr	r1, [r6, #12]
 8012fd4:	4551      	cmp	r1, sl
 8012fd6:	dd19      	ble.n	801300c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8012fd8:	fa0f fc8c 	sxth.w	ip, ip
 8012fdc:	9901      	ldr	r1, [sp, #4]
 8012fde:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8012fe2:	f81c c009 	ldrb.w	ip, [ip, r9]
 8012fe6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8012fea:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8012fee:	eb07 090c 	add.w	r9, r7, ip
 8012ff2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8012ff6:	f804 a00c 	strb.w	sl, [r4, ip]
 8012ffa:	44a4      	add	ip, r4
 8012ffc:	f899 a001 	ldrb.w	sl, [r9, #1]
 8013000:	f88c a001 	strb.w	sl, [ip, #1]
 8013004:	f899 9002 	ldrb.w	r9, [r9, #2]
 8013008:	f88c 9002 	strb.w	r9, [ip, #2]
 801300c:	4440      	add	r0, r8
 801300e:	4472      	add	r2, lr
 8013010:	3501      	adds	r5, #1
 8013012:	e793      	b.n	8012f3c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8013014:	b003      	add	sp, #12
 8013016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801301a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801301a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801301e:	b085      	sub	sp, #20
 8013020:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013024:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8013026:	9202      	str	r2, [sp, #8]
 8013028:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801302c:	6860      	ldr	r0, [r4, #4]
 801302e:	9203      	str	r2, [sp, #12]
 8013030:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013034:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8013038:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801303c:	fb00 2505 	mla	r5, r0, r5, r2
 8013040:	6822      	ldr	r2, [r4, #0]
 8013042:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013046:	4415      	add	r5, r2
 8013048:	f8dc 2000 	ldr.w	r2, [ip]
 801304c:	9200      	str	r2, [sp, #0]
 801304e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8013052:	3204      	adds	r2, #4
 8013054:	9201      	str	r2, [sp, #4]
 8013056:	2900      	cmp	r1, #0
 8013058:	dc03      	bgt.n	8013062 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801305a:	9a02      	ldr	r2, [sp, #8]
 801305c:	2a00      	cmp	r2, #0
 801305e:	f340 8127 	ble.w	80132b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8013062:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013064:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013068:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801306c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801306e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013072:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013076:	2b00      	cmp	r3, #0
 8013078:	dd0d      	ble.n	8013096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801307a:	1422      	asrs	r2, r4, #16
 801307c:	d405      	bmi.n	801308a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801307e:	4542      	cmp	r2, r8
 8013080:	da03      	bge.n	801308a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013082:	1402      	asrs	r2, r0, #16
 8013084:	d401      	bmi.n	801308a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8013086:	42ba      	cmp	r2, r7
 8013088:	db06      	blt.n	8013098 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801308a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801308c:	4474      	add	r4, lr
 801308e:	3b01      	subs	r3, #1
 8013090:	3503      	adds	r5, #3
 8013092:	4410      	add	r0, r2
 8013094:	e7ef      	b.n	8013076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013096:	d075      	beq.n	8013184 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8013098:	1e5a      	subs	r2, r3, #1
 801309a:	fb0e 4602 	mla	r6, lr, r2, r4
 801309e:	1436      	asrs	r6, r6, #16
 80130a0:	d465      	bmi.n	801316e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130a2:	4546      	cmp	r6, r8
 80130a4:	da63      	bge.n	801316e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130a6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80130a8:	fb06 0202 	mla	r2, r6, r2, r0
 80130ac:	1412      	asrs	r2, r2, #16
 80130ae:	d45e      	bmi.n	801316e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130b0:	42ba      	cmp	r2, r7
 80130b2:	da5c      	bge.n	801316e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80130b4:	1cef      	adds	r7, r5, #3
 80130b6:	4699      	mov	r9, r3
 80130b8:	f1b9 0f00 	cmp.w	r9, #0
 80130bc:	dd5d      	ble.n	801317a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80130be:	1402      	asrs	r2, r0, #16
 80130c0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80130c4:	1426      	asrs	r6, r4, #16
 80130c6:	4692      	mov	sl, r2
 80130c8:	9a00      	ldr	r2, [sp, #0]
 80130ca:	fb08 220a 	mla	r2, r8, sl, r2
 80130ce:	5d92      	ldrb	r2, [r2, r6]
 80130d0:	9e01      	ldr	r6, [sp, #4]
 80130d2:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80130d6:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80130da:	d041      	beq.n	8013160 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80130dc:	9a03      	ldr	r2, [sp, #12]
 80130de:	fa5f fb86 	uxtb.w	fp, r6
 80130e2:	fb02 f808 	mul.w	r8, r2, r8
 80130e6:	f108 0201 	add.w	r2, r8, #1
 80130ea:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80130ee:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80130f2:	1212      	asrs	r2, r2, #8
 80130f4:	fa1f fa82 	uxth.w	sl, r2
 80130f8:	43d2      	mvns	r2, r2
 80130fa:	fb1b fb0a 	smulbb	fp, fp, sl
 80130fe:	b2d2      	uxtb	r2, r2
 8013100:	fb08 b802 	mla	r8, r8, r2, fp
 8013104:	fa1f f888 	uxth.w	r8, r8
 8013108:	f108 0b01 	add.w	fp, r8, #1
 801310c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013110:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013114:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013118:	fb1b fb0a 	smulbb	fp, fp, sl
 801311c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013120:	fb16 fa0a 	smulbb	sl, r6, sl
 8013124:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013128:	f807 8c03 	strb.w	r8, [r7, #-3]
 801312c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013130:	fb06 aa02 	mla	sl, r6, r2, sl
 8013134:	fb08 b802 	mla	r8, r8, r2, fp
 8013138:	fa1f fa8a 	uxth.w	sl, sl
 801313c:	fa1f f888 	uxth.w	r8, r8
 8013140:	f10a 0601 	add.w	r6, sl, #1
 8013144:	f108 0b01 	add.w	fp, r8, #1
 8013148:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801314c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013150:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013154:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013158:	f807 ac01 	strb.w	sl, [r7, #-1]
 801315c:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013160:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013162:	4474      	add	r4, lr
 8013164:	3703      	adds	r7, #3
 8013166:	f109 39ff 	add.w	r9, r9, #4294967295
 801316a:	4410      	add	r0, r2
 801316c:	e7a4      	b.n	80130b8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801316e:	f04f 0800 	mov.w	r8, #0
 8013172:	eba3 0208 	sub.w	r2, r3, r8
 8013176:	2a00      	cmp	r2, #0
 8013178:	dc3b      	bgt.n	80131f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801317a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801317e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013182:	441d      	add	r5, r3
 8013184:	2900      	cmp	r1, #0
 8013186:	f340 8093 	ble.w	80132b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801318a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801318e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013190:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013194:	3901      	subs	r1, #1
 8013196:	eeb0 6a62 	vmov.f32	s12, s5
 801319a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801319e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80131a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80131a6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80131aa:	eeb0 6a43 	vmov.f32	s12, s6
 80131ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80131b2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80131b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80131ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80131be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80131c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80131c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80131ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80131ce:	ee12 2a90 	vmov	r2, s5
 80131d2:	eef0 2a47 	vmov.f32	s5, s14
 80131d6:	fb92 fef3 	sdiv	lr, r2, r3
 80131da:	ee13 2a10 	vmov	r2, s6
 80131de:	eeb0 3a67 	vmov.f32	s6, s15
 80131e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80131e6:	9a02      	ldr	r2, [sp, #8]
 80131e8:	9312      	str	r3, [sp, #72]	; 0x48
 80131ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131ec:	bf08      	it	eq
 80131ee:	4613      	moveq	r3, r2
 80131f0:	e731      	b.n	8013056 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80131f2:	1427      	asrs	r7, r4, #16
 80131f4:	d456      	bmi.n	80132a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80131f6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80131fa:	42be      	cmp	r6, r7
 80131fc:	dd52      	ble.n	80132a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80131fe:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013202:	d44f      	bmi.n	80132a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013204:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013208:	454a      	cmp	r2, r9
 801320a:	dd4b      	ble.n	80132a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801320c:	9a00      	ldr	r2, [sp, #0]
 801320e:	b236      	sxth	r6, r6
 8013210:	fb09 2606 	mla	r6, r9, r6, r2
 8013214:	5df2      	ldrb	r2, [r6, r7]
 8013216:	9e01      	ldr	r6, [sp, #4]
 8013218:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801321c:	0e3a      	lsrs	r2, r7, #24
 801321e:	d041      	beq.n	80132a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013220:	9e03      	ldr	r6, [sp, #12]
 8013222:	fa5f fb87 	uxtb.w	fp, r7
 8013226:	4372      	muls	r2, r6
 8013228:	1c56      	adds	r6, r2, #1
 801322a:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801322e:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013232:	1212      	asrs	r2, r2, #8
 8013234:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013238:	fa1f fa82 	uxth.w	sl, r2
 801323c:	43d2      	mvns	r2, r2
 801323e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013242:	b2d2      	uxtb	r2, r2
 8013244:	fb09 b902 	mla	r9, r9, r2, fp
 8013248:	fa1f f989 	uxth.w	r9, r9
 801324c:	f109 0b01 	add.w	fp, r9, #1
 8013250:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013254:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013258:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801325c:	fb1b fb0a 	smulbb	fp, fp, sl
 8013260:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013264:	fb17 fa0a 	smulbb	sl, r7, sl
 8013268:	f805 9006 	strb.w	r9, [r5, r6]
 801326c:	442e      	add	r6, r5
 801326e:	78b7      	ldrb	r7, [r6, #2]
 8013270:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013274:	fb07 aa02 	mla	sl, r7, r2, sl
 8013278:	fb09 b902 	mla	r9, r9, r2, fp
 801327c:	fa1f fa8a 	uxth.w	sl, sl
 8013280:	fa1f f989 	uxth.w	r9, r9
 8013284:	f10a 0701 	add.w	r7, sl, #1
 8013288:	f109 0b01 	add.w	fp, r9, #1
 801328c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013290:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013294:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013298:	ea4f 2929 	mov.w	r9, r9, asr #8
 801329c:	f886 a002 	strb.w	sl, [r6, #2]
 80132a0:	f886 9001 	strb.w	r9, [r6, #1]
 80132a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80132a6:	4474      	add	r4, lr
 80132a8:	f108 0801 	add.w	r8, r8, #1
 80132ac:	4410      	add	r0, r2
 80132ae:	e760      	b.n	8013172 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80132b0:	b005      	add	sp, #20
 80132b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080132b6 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80132b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ba:	b085      	sub	sp, #20
 80132bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80132c0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80132c2:	9203      	str	r2, [sp, #12]
 80132c4:	6868      	ldr	r0, [r5, #4]
 80132c6:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80132ca:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80132ce:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80132d2:	fb00 2404 	mla	r4, r0, r4, r2
 80132d6:	682a      	ldr	r2, [r5, #0]
 80132d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80132dc:	4414      	add	r4, r2
 80132de:	f8dc 2000 	ldr.w	r2, [ip]
 80132e2:	9201      	str	r2, [sp, #4]
 80132e4:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80132e8:	3204      	adds	r2, #4
 80132ea:	9202      	str	r2, [sp, #8]
 80132ec:	2900      	cmp	r1, #0
 80132ee:	dc03      	bgt.n	80132f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80132f0:	9a03      	ldr	r2, [sp, #12]
 80132f2:	2a00      	cmp	r2, #0
 80132f4:	f340 8137 	ble.w	8013566 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80132f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80132fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80132fe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013302:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013304:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013308:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801330c:	2b00      	cmp	r3, #0
 801330e:	dd0d      	ble.n	801332c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8013310:	1405      	asrs	r5, r0, #16
 8013312:	d405      	bmi.n	8013320 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013314:	4545      	cmp	r5, r8
 8013316:	da03      	bge.n	8013320 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013318:	1415      	asrs	r5, r2, #16
 801331a:	d401      	bmi.n	8013320 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801331c:	42bd      	cmp	r5, r7
 801331e:	db06      	blt.n	801332e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013320:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013322:	4470      	add	r0, lr
 8013324:	3b01      	subs	r3, #1
 8013326:	3403      	adds	r4, #3
 8013328:	442a      	add	r2, r5
 801332a:	e7ef      	b.n	801330c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801332c:	d070      	beq.n	8013410 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801332e:	1e5d      	subs	r5, r3, #1
 8013330:	fb0e 0605 	mla	r6, lr, r5, r0
 8013334:	1436      	asrs	r6, r6, #16
 8013336:	d462      	bmi.n	80133fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013338:	4546      	cmp	r6, r8
 801333a:	da60      	bge.n	80133fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801333c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801333e:	fb06 2505 	mla	r5, r6, r5, r2
 8013342:	142d      	asrs	r5, r5, #16
 8013344:	d45b      	bmi.n	80133fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8013346:	42bd      	cmp	r5, r7
 8013348:	da59      	bge.n	80133fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801334a:	1ce5      	adds	r5, r4, #3
 801334c:	469a      	mov	sl, r3
 801334e:	f1ba 0f00 	cmp.w	sl, #0
 8013352:	dd58      	ble.n	8013406 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8013354:	1416      	asrs	r6, r2, #16
 8013356:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801335a:	1407      	asrs	r7, r0, #16
 801335c:	46b1      	mov	r9, r6
 801335e:	9e01      	ldr	r6, [sp, #4]
 8013360:	fb08 6609 	mla	r6, r8, r9, r6
 8013364:	5df6      	ldrb	r6, [r6, r7]
 8013366:	9f02      	ldr	r7, [sp, #8]
 8013368:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801336c:	0e37      	lsrs	r7, r6, #24
 801336e:	2fff      	cmp	r7, #255	; 0xff
 8013370:	f000 80f0 	beq.w	8013554 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8013374:	fa5f f887 	uxtb.w	r8, r7
 8013378:	b3d7      	cbz	r7, 80133f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801337a:	fa1f f788 	uxth.w	r7, r8
 801337e:	ea6f 0808 	mvn.w	r8, r8
 8013382:	fa5f fb86 	uxtb.w	fp, r6
 8013386:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801338a:	fa5f f888 	uxtb.w	r8, r8
 801338e:	fb1b fb07 	smulbb	fp, fp, r7
 8013392:	fb09 b908 	mla	r9, r9, r8, fp
 8013396:	fa1f f989 	uxth.w	r9, r9
 801339a:	f109 0b01 	add.w	fp, r9, #1
 801339e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133a2:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80133a6:	fb1b fb08 	smulbb	fp, fp, r8
 80133aa:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133ae:	f805 9c03 	strb.w	r9, [r5, #-3]
 80133b2:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80133b6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80133ba:	fb09 b907 	mla	r9, r9, r7, fp
 80133be:	fa1f f989 	uxth.w	r9, r9
 80133c2:	f109 0b01 	add.w	fp, r9, #1
 80133c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80133ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 80133ce:	f805 9c02 	strb.w	r9, [r5, #-2]
 80133d2:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80133d6:	fb19 f808 	smulbb	r8, r9, r8
 80133da:	fb06 8607 	mla	r6, r6, r7, r8
 80133de:	b2b6      	uxth	r6, r6
 80133e0:	f106 0801 	add.w	r8, r6, #1
 80133e4:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80133e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80133ec:	f805 8c01 	strb.w	r8, [r5, #-1]
 80133f0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80133f2:	4470      	add	r0, lr
 80133f4:	3503      	adds	r5, #3
 80133f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80133fa:	4432      	add	r2, r6
 80133fc:	e7a7      	b.n	801334e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80133fe:	2600      	movs	r6, #0
 8013400:	1b9d      	subs	r5, r3, r6
 8013402:	2d00      	cmp	r5, #0
 8013404:	dc3b      	bgt.n	801347e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8013406:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801340a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801340e:	441c      	add	r4, r3
 8013410:	2900      	cmp	r1, #0
 8013412:	f340 80a8 	ble.w	8013566 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8013416:	ee30 0a04 	vadd.f32	s0, s0, s8
 801341a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801341c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013420:	3901      	subs	r1, #1
 8013422:	eeb0 6a62 	vmov.f32	s12, s5
 8013426:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801342a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801342e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013432:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013436:	eeb0 6a43 	vmov.f32	s12, s6
 801343a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801343e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013442:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013446:	ee61 7a27 	vmul.f32	s15, s2, s15
 801344a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801344e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013452:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013456:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801345a:	ee12 2a90 	vmov	r2, s5
 801345e:	eef0 2a47 	vmov.f32	s5, s14
 8013462:	fb92 fef3 	sdiv	lr, r2, r3
 8013466:	ee13 2a10 	vmov	r2, s6
 801346a:	eeb0 3a67 	vmov.f32	s6, s15
 801346e:	fb92 f3f3 	sdiv	r3, r2, r3
 8013472:	9a03      	ldr	r2, [sp, #12]
 8013474:	9312      	str	r3, [sp, #72]	; 0x48
 8013476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013478:	bf08      	it	eq
 801347a:	4613      	moveq	r3, r2
 801347c:	e736      	b.n	80132ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801347e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013482:	d457      	bmi.n	8013534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013484:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8013488:	4547      	cmp	r7, r8
 801348a:	dd53      	ble.n	8013534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801348c:	ea5f 4922 	movs.w	r9, r2, asr #16
 8013490:	d450      	bmi.n	8013534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013492:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8013496:	454d      	cmp	r5, r9
 8013498:	dd4c      	ble.n	8013534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801349a:	9d01      	ldr	r5, [sp, #4]
 801349c:	b23f      	sxth	r7, r7
 801349e:	fb09 5707 	mla	r7, r9, r7, r5
 80134a2:	f817 5008 	ldrb.w	r5, [r7, r8]
 80134a6:	9f02      	ldr	r7, [sp, #8]
 80134a8:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80134ac:	0e2f      	lsrs	r7, r5, #24
 80134ae:	2fff      	cmp	r7, #255	; 0xff
 80134b0:	d045      	beq.n	801353e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80134b2:	fa5f f987 	uxtb.w	r9, r7
 80134b6:	b3ef      	cbz	r7, 8013534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80134b8:	fa1f f889 	uxth.w	r8, r9
 80134bc:	ea6f 0909 	mvn.w	r9, r9
 80134c0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80134c4:	fa5f fb85 	uxtb.w	fp, r5
 80134c8:	f814 a007 	ldrb.w	sl, [r4, r7]
 80134cc:	fa5f f989 	uxtb.w	r9, r9
 80134d0:	fb1b fb08 	smulbb	fp, fp, r8
 80134d4:	fb0a ba09 	mla	sl, sl, r9, fp
 80134d8:	fa1f fa8a 	uxth.w	sl, sl
 80134dc:	f10a 0b01 	add.w	fp, sl, #1
 80134e0:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80134e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80134e8:	f804 a007 	strb.w	sl, [r4, r7]
 80134ec:	4427      	add	r7, r4
 80134ee:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80134f2:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80134f6:	f897 b001 	ldrb.w	fp, [r7, #1]
 80134fa:	fb1b fb09 	smulbb	fp, fp, r9
 80134fe:	fb0a ba08 	mla	sl, sl, r8, fp
 8013502:	fa1f fa8a 	uxth.w	sl, sl
 8013506:	f10a 0b01 	add.w	fp, sl, #1
 801350a:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801350e:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013512:	f887 a001 	strb.w	sl, [r7, #1]
 8013516:	f897 a002 	ldrb.w	sl, [r7, #2]
 801351a:	fb1a f909 	smulbb	r9, sl, r9
 801351e:	fb05 9508 	mla	r5, r5, r8, r9
 8013522:	b2ad      	uxth	r5, r5
 8013524:	f105 0901 	add.w	r9, r5, #1
 8013528:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801352c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013530:	f887 9002 	strb.w	r9, [r7, #2]
 8013534:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8013536:	4470      	add	r0, lr
 8013538:	3601      	adds	r6, #1
 801353a:	442a      	add	r2, r5
 801353c:	e760      	b.n	8013400 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801353e:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8013542:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8013546:	55e5      	strb	r5, [r4, r7]
 8013548:	4427      	add	r7, r4
 801354a:	0c2d      	lsrs	r5, r5, #16
 801354c:	f887 8001 	strb.w	r8, [r7, #1]
 8013550:	70bd      	strb	r5, [r7, #2]
 8013552:	e7ef      	b.n	8013534 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8013554:	0a37      	lsrs	r7, r6, #8
 8013556:	f805 6c03 	strb.w	r6, [r5, #-3]
 801355a:	0c36      	lsrs	r6, r6, #16
 801355c:	f805 7c02 	strb.w	r7, [r5, #-2]
 8013560:	f805 6c01 	strb.w	r6, [r5, #-1]
 8013564:	e744      	b.n	80133f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013566:	b005      	add	sp, #20
 8013568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801356c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801356c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013570:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8013572:	9201      	str	r2, [sp, #4]
 8013574:	6870      	ldr	r0, [r6, #4]
 8013576:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801357a:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801357e:	fa1f fe85 	uxth.w	lr, r5
 8013582:	43ed      	mvns	r5, r5
 8013584:	f8dc 8000 	ldr.w	r8, [ip]
 8013588:	b2ed      	uxtb	r5, r5
 801358a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801358e:	fb00 2404 	mla	r4, r0, r4, r2
 8013592:	6832      	ldr	r2, [r6, #0]
 8013594:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8013598:	4414      	add	r4, r2
 801359a:	2900      	cmp	r1, #0
 801359c:	dc03      	bgt.n	80135a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801359e:	9a01      	ldr	r2, [sp, #4]
 80135a0:	2a00      	cmp	r2, #0
 80135a2:	f340 810d 	ble.w	80137c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80135a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135a8:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80135ac:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80135b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80135b2:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80135b6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	dd0e      	ble.n	80135dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80135be:	1406      	asrs	r6, r0, #16
 80135c0:	d405      	bmi.n	80135ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135c2:	4556      	cmp	r6, sl
 80135c4:	da03      	bge.n	80135ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135c6:	1416      	asrs	r6, r2, #16
 80135c8:	d401      	bmi.n	80135ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80135ca:	454e      	cmp	r6, r9
 80135cc:	db07      	blt.n	80135de <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80135ce:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80135d0:	3b01      	subs	r3, #1
 80135d2:	3403      	adds	r4, #3
 80135d4:	4430      	add	r0, r6
 80135d6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80135d8:	4432      	add	r2, r6
 80135da:	e7ee      	b.n	80135ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80135dc:	d060      	beq.n	80136a0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80135de:	1e5e      	subs	r6, r3, #1
 80135e0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80135e2:	fb07 0706 	mla	r7, r7, r6, r0
 80135e6:	143f      	asrs	r7, r7, #16
 80135e8:	d451      	bmi.n	801368e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80135ea:	4557      	cmp	r7, sl
 80135ec:	da4f      	bge.n	801368e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80135ee:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80135f0:	fb07 2606 	mla	r6, r7, r6, r2
 80135f4:	1436      	asrs	r6, r6, #16
 80135f6:	d44a      	bmi.n	801368e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80135f8:	454e      	cmp	r6, r9
 80135fa:	da48      	bge.n	801368e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80135fc:	1ce6      	adds	r6, r4, #3
 80135fe:	4699      	mov	r9, r3
 8013600:	f1b9 0f00 	cmp.w	r9, #0
 8013604:	f106 0603 	add.w	r6, r6, #3
 8013608:	dd45      	ble.n	8013696 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801360a:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801360e:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8013612:	1417      	asrs	r7, r2, #16
 8013614:	f109 39ff 	add.w	r9, r9, #4294967295
 8013618:	fb0b a707 	mla	r7, fp, r7, sl
 801361c:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8013620:	fb1b fb05 	smulbb	fp, fp, r5
 8013624:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8013628:	eb08 0a07 	add.w	sl, r8, r7
 801362c:	f818 7007 	ldrb.w	r7, [r8, r7]
 8013630:	fb07 b70e 	mla	r7, r7, lr, fp
 8013634:	b2bf      	uxth	r7, r7
 8013636:	f107 0b01 	add.w	fp, r7, #1
 801363a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801363e:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8013642:	fb1b fb05 	smulbb	fp, fp, r5
 8013646:	123f      	asrs	r7, r7, #8
 8013648:	f806 7c06 	strb.w	r7, [r6, #-6]
 801364c:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8013650:	fb07 b70e 	mla	r7, r7, lr, fp
 8013654:	b2bf      	uxth	r7, r7
 8013656:	f107 0b01 	add.w	fp, r7, #1
 801365a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801365e:	123f      	asrs	r7, r7, #8
 8013660:	f806 7c05 	strb.w	r7, [r6, #-5]
 8013664:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8013668:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801366c:	fb1a fa05 	smulbb	sl, sl, r5
 8013670:	fb07 a70e 	mla	r7, r7, lr, sl
 8013674:	b2bf      	uxth	r7, r7
 8013676:	f107 0a01 	add.w	sl, r7, #1
 801367a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801367e:	123f      	asrs	r7, r7, #8
 8013680:	f806 7c04 	strb.w	r7, [r6, #-4]
 8013684:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8013686:	4438      	add	r0, r7
 8013688:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801368a:	443a      	add	r2, r7
 801368c:	e7b8      	b.n	8013600 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801368e:	2700      	movs	r7, #0
 8013690:	1bde      	subs	r6, r3, r7
 8013692:	2e00      	cmp	r6, #0
 8013694:	dc3f      	bgt.n	8013716 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8013696:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801369a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801369e:	441c      	add	r4, r3
 80136a0:	2900      	cmp	r1, #0
 80136a2:	f340 808d 	ble.w	80137c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80136a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80136aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136ac:	ee30 0a04 	vadd.f32	s0, s0, s8
 80136b0:	3901      	subs	r1, #1
 80136b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80136b6:	eef0 6a62 	vmov.f32	s13, s5
 80136ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80136be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80136c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136c6:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80136ca:	eef0 6a43 	vmov.f32	s13, s6
 80136ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80136d2:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80136d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80136da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80136de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80136e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80136e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80136ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80136ee:	ee12 2a90 	vmov	r2, s5
 80136f2:	eef0 2a47 	vmov.f32	s5, s14
 80136f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80136fa:	ee13 2a10 	vmov	r2, s6
 80136fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8013700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013702:	eeb0 3a67 	vmov.f32	s6, s15
 8013706:	fb92 f3f3 	sdiv	r3, r2, r3
 801370a:	9a01      	ldr	r2, [sp, #4]
 801370c:	9310      	str	r3, [sp, #64]	; 0x40
 801370e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013710:	bf08      	it	eq
 8013712:	4613      	moveq	r3, r2
 8013714:	e741      	b.n	801359a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8013716:	ea5f 4920 	movs.w	r9, r0, asr #16
 801371a:	d44b      	bmi.n	80137b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801371c:	f8dc b008 	ldr.w	fp, [ip, #8]
 8013720:	45cb      	cmp	fp, r9
 8013722:	dd47      	ble.n	80137b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013724:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8013728:	d444      	bmi.n	80137b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801372a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801372e:	4556      	cmp	r6, sl
 8013730:	dd40      	ble.n	80137b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8013732:	fa0f f68b 	sxth.w	r6, fp
 8013736:	fb0a 9906 	mla	r9, sl, r6, r9
 801373a:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801373e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8013742:	f814 b006 	ldrb.w	fp, [r4, r6]
 8013746:	fb1b fb05 	smulbb	fp, fp, r5
 801374a:	eb08 0a09 	add.w	sl, r8, r9
 801374e:	f818 9009 	ldrb.w	r9, [r8, r9]
 8013752:	fb09 b90e 	mla	r9, r9, lr, fp
 8013756:	fa1f f989 	uxth.w	r9, r9
 801375a:	f109 0b01 	add.w	fp, r9, #1
 801375e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013762:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013766:	f804 9006 	strb.w	r9, [r4, r6]
 801376a:	4426      	add	r6, r4
 801376c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8013770:	f896 b001 	ldrb.w	fp, [r6, #1]
 8013774:	fb1b fb05 	smulbb	fp, fp, r5
 8013778:	fb09 b90e 	mla	r9, r9, lr, fp
 801377c:	fa1f f989 	uxth.w	r9, r9
 8013780:	f109 0b01 	add.w	fp, r9, #1
 8013784:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013788:	ea4f 2929 	mov.w	r9, r9, asr #8
 801378c:	f886 9001 	strb.w	r9, [r6, #1]
 8013790:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8013794:	f896 a002 	ldrb.w	sl, [r6, #2]
 8013798:	fb1a fa05 	smulbb	sl, sl, r5
 801379c:	fb09 a90e 	mla	r9, r9, lr, sl
 80137a0:	fa1f f989 	uxth.w	r9, r9
 80137a4:	f109 0a01 	add.w	sl, r9, #1
 80137a8:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80137ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80137b0:	f886 9002 	strb.w	r9, [r6, #2]
 80137b4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80137b6:	3701      	adds	r7, #1
 80137b8:	4430      	add	r0, r6
 80137ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80137bc:	4432      	add	r2, r6
 80137be:	e767      	b.n	8013690 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80137c0:	b003      	add	sp, #12
 80137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80137c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ca:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80137cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80137d0:	9201      	str	r2, [sp, #4]
 80137d2:	6868      	ldr	r0, [r5, #4]
 80137d4:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80137d6:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80137da:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80137de:	fb00 2404 	mla	r4, r0, r4, r2
 80137e2:	682a      	ldr	r2, [r5, #0]
 80137e4:	f8d7 8000 	ldr.w	r8, [r7]
 80137e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80137ec:	4414      	add	r4, r2
 80137ee:	2900      	cmp	r1, #0
 80137f0:	dc03      	bgt.n	80137fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80137f2:	9a01      	ldr	r2, [sp, #4]
 80137f4:	2a00      	cmp	r2, #0
 80137f6:	f340 80af 	ble.w	8013958 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80137fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80137fc:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8013800:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013804:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013806:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801380a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801380e:	2b00      	cmp	r3, #0
 8013810:	dd0c      	ble.n	801382c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8013812:	1405      	asrs	r5, r0, #16
 8013814:	d405      	bmi.n	8013822 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013816:	4555      	cmp	r5, sl
 8013818:	da03      	bge.n	8013822 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801381a:	1415      	asrs	r5, r2, #16
 801381c:	d401      	bmi.n	8013822 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801381e:	454d      	cmp	r5, r9
 8013820:	db05      	blt.n	801382e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8013822:	4470      	add	r0, lr
 8013824:	4462      	add	r2, ip
 8013826:	3b01      	subs	r3, #1
 8013828:	3403      	adds	r4, #3
 801382a:	e7f0      	b.n	801380e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801382c:	d038      	beq.n	80138a0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801382e:	1e5d      	subs	r5, r3, #1
 8013830:	fb0e 0605 	mla	r6, lr, r5, r0
 8013834:	1436      	asrs	r6, r6, #16
 8013836:	d42a      	bmi.n	801388e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013838:	4556      	cmp	r6, sl
 801383a:	da28      	bge.n	801388e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801383c:	fb0c 2505 	mla	r5, ip, r5, r2
 8013840:	142d      	asrs	r5, r5, #16
 8013842:	d424      	bmi.n	801388e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013844:	454d      	cmp	r5, r9
 8013846:	da22      	bge.n	801388e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8013848:	1ce6      	adds	r6, r4, #3
 801384a:	4699      	mov	r9, r3
 801384c:	f1b9 0f00 	cmp.w	r9, #0
 8013850:	f106 0603 	add.w	r6, r6, #3
 8013854:	dd1f      	ble.n	8013896 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8013856:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801385a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801385e:	1415      	asrs	r5, r2, #16
 8013860:	4470      	add	r0, lr
 8013862:	4462      	add	r2, ip
 8013864:	f109 39ff 	add.w	r9, r9, #4294967295
 8013868:	fb0b a505 	mla	r5, fp, r5, sl
 801386c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013870:	eb08 0a05 	add.w	sl, r8, r5
 8013874:	f818 5005 	ldrb.w	r5, [r8, r5]
 8013878:	f806 5c06 	strb.w	r5, [r6, #-6]
 801387c:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8013880:	f806 5c05 	strb.w	r5, [r6, #-5]
 8013884:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8013888:	f806 5c04 	strb.w	r5, [r6, #-4]
 801388c:	e7de      	b.n	801384c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801388e:	2600      	movs	r6, #0
 8013890:	1b9d      	subs	r5, r3, r6
 8013892:	2d00      	cmp	r5, #0
 8013894:	dc38      	bgt.n	8013908 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801389a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801389e:	441c      	add	r4, r3
 80138a0:	2900      	cmp	r1, #0
 80138a2:	dd59      	ble.n	8013958 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80138a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80138a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80138ae:	3901      	subs	r1, #1
 80138b0:	eeb0 6a62 	vmov.f32	s12, s5
 80138b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80138b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80138bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138c0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80138c4:	eeb0 6a43 	vmov.f32	s12, s6
 80138c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80138cc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80138d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80138d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80138d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80138dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80138e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80138e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80138e8:	ee12 2a90 	vmov	r2, s5
 80138ec:	eef0 2a47 	vmov.f32	s5, s14
 80138f0:	fb92 fef3 	sdiv	lr, r2, r3
 80138f4:	ee13 2a10 	vmov	r2, s6
 80138f8:	eeb0 3a67 	vmov.f32	s6, s15
 80138fc:	fb92 fcf3 	sdiv	ip, r2, r3
 8013900:	9a01      	ldr	r2, [sp, #4]
 8013902:	bf08      	it	eq
 8013904:	4613      	moveq	r3, r2
 8013906:	e772      	b.n	80137ee <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013908:	ea5f 4920 	movs.w	r9, r0, asr #16
 801390c:	d420      	bmi.n	8013950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801390e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8013912:	45cb      	cmp	fp, r9
 8013914:	dd1c      	ble.n	8013950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013916:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801391a:	d419      	bmi.n	8013950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801391c:	68fd      	ldr	r5, [r7, #12]
 801391e:	4555      	cmp	r5, sl
 8013920:	dd16      	ble.n	8013950 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8013922:	fa0f f58b 	sxth.w	r5, fp
 8013926:	fb0a 9505 	mla	r5, sl, r5, r9
 801392a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801392e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8013932:	eb08 0b05 	add.w	fp, r8, r5
 8013936:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801393a:	f804 9005 	strb.w	r9, [r4, r5]
 801393e:	4425      	add	r5, r4
 8013940:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8013944:	f885 9001 	strb.w	r9, [r5, #1]
 8013948:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801394c:	f885 9002 	strb.w	r9, [r5, #2]
 8013950:	4470      	add	r0, lr
 8013952:	4462      	add	r2, ip
 8013954:	3601      	adds	r6, #1
 8013956:	e79b      	b.n	8013890 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8013958:	b003      	add	sp, #12
 801395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801395e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801395e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013962:	b085      	sub	sp, #20
 8013964:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013968:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801396a:	9202      	str	r2, [sp, #8]
 801396c:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8013970:	6860      	ldr	r0, [r4, #4]
 8013972:	9203      	str	r2, [sp, #12]
 8013974:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8013978:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 801397c:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8013980:	fb00 2505 	mla	r5, r0, r5, r2
 8013984:	6822      	ldr	r2, [r4, #0]
 8013986:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801398a:	4415      	add	r5, r2
 801398c:	f8dc 2000 	ldr.w	r2, [ip]
 8013990:	9201      	str	r2, [sp, #4]
 8013992:	2900      	cmp	r1, #0
 8013994:	dc03      	bgt.n	801399e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8013996:	9a02      	ldr	r2, [sp, #8]
 8013998:	2a00      	cmp	r2, #0
 801399a:	f340 8122 	ble.w	8013be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801399e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80139a0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80139a4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80139a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80139aa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80139ae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	dd0d      	ble.n	80139d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80139b6:	1422      	asrs	r2, r4, #16
 80139b8:	d405      	bmi.n	80139c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139ba:	4542      	cmp	r2, r8
 80139bc:	da03      	bge.n	80139c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139be:	1402      	asrs	r2, r0, #16
 80139c0:	d401      	bmi.n	80139c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80139c2:	42ba      	cmp	r2, r7
 80139c4:	db06      	blt.n	80139d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80139c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80139c8:	4474      	add	r4, lr
 80139ca:	3b01      	subs	r3, #1
 80139cc:	3503      	adds	r5, #3
 80139ce:	4410      	add	r0, r2
 80139d0:	e7ef      	b.n	80139b2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80139d2:	d072      	beq.n	8013aba <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80139d4:	1e5a      	subs	r2, r3, #1
 80139d6:	fb0e 4602 	mla	r6, lr, r2, r4
 80139da:	1436      	asrs	r6, r6, #16
 80139dc:	d462      	bmi.n	8013aa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139de:	4546      	cmp	r6, r8
 80139e0:	da60      	bge.n	8013aa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139e2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80139e4:	fb06 0202 	mla	r2, r6, r2, r0
 80139e8:	1412      	asrs	r2, r2, #16
 80139ea:	d45b      	bmi.n	8013aa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139ec:	42ba      	cmp	r2, r7
 80139ee:	da59      	bge.n	8013aa4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80139f0:	1cef      	adds	r7, r5, #3
 80139f2:	4699      	mov	r9, r3
 80139f4:	f1b9 0f00 	cmp.w	r9, #0
 80139f8:	dd5a      	ble.n	8013ab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80139fa:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80139fe:	1426      	asrs	r6, r4, #16
 8013a00:	1402      	asrs	r2, r0, #16
 8013a02:	fb08 6202 	mla	r2, r8, r2, r6
 8013a06:	9e01      	ldr	r6, [sp, #4]
 8013a08:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8013a0c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8013a10:	d041      	beq.n	8013a96 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8013a12:	9a03      	ldr	r2, [sp, #12]
 8013a14:	fa5f fb86 	uxtb.w	fp, r6
 8013a18:	fb02 f808 	mul.w	r8, r2, r8
 8013a1c:	f108 0201 	add.w	r2, r8, #1
 8013a20:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8013a24:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8013a28:	1212      	asrs	r2, r2, #8
 8013a2a:	fa1f fa82 	uxth.w	sl, r2
 8013a2e:	43d2      	mvns	r2, r2
 8013a30:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a34:	b2d2      	uxtb	r2, r2
 8013a36:	fb08 b802 	mla	r8, r8, r2, fp
 8013a3a:	fa1f f888 	uxth.w	r8, r8
 8013a3e:	f108 0b01 	add.w	fp, r8, #1
 8013a42:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013a46:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8013a4a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8013a4e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013a52:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013a56:	fb16 fa0a 	smulbb	sl, r6, sl
 8013a5a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8013a5e:	f807 8c03 	strb.w	r8, [r7, #-3]
 8013a62:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8013a66:	fb06 aa02 	mla	sl, r6, r2, sl
 8013a6a:	fb08 b802 	mla	r8, r8, r2, fp
 8013a6e:	fa1f fa8a 	uxth.w	sl, sl
 8013a72:	fa1f f888 	uxth.w	r8, r8
 8013a76:	f10a 0601 	add.w	r6, sl, #1
 8013a7a:	f108 0b01 	add.w	fp, r8, #1
 8013a7e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8013a82:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013a86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013a8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013a8e:	f807 ac01 	strb.w	sl, [r7, #-1]
 8013a92:	f807 8c02 	strb.w	r8, [r7, #-2]
 8013a96:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013a98:	4474      	add	r4, lr
 8013a9a:	3703      	adds	r7, #3
 8013a9c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013aa0:	4410      	add	r0, r2
 8013aa2:	e7a7      	b.n	80139f4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8013aa4:	f04f 0800 	mov.w	r8, #0
 8013aa8:	eba3 0208 	sub.w	r2, r3, r8
 8013aac:	2a00      	cmp	r2, #0
 8013aae:	dc3b      	bgt.n	8013b28 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8013ab0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013ab4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013ab8:	441d      	add	r5, r3
 8013aba:	2900      	cmp	r1, #0
 8013abc:	f340 8091 	ble.w	8013be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8013ac0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013ac6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013aca:	3901      	subs	r1, #1
 8013acc:	eeb0 6a62 	vmov.f32	s12, s5
 8013ad0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013ad4:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013ad8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013adc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8013ae0:	eeb0 6a43 	vmov.f32	s12, s6
 8013ae4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013ae8:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8013aec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013af0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013af4:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013af8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013afc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013b00:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013b04:	ee12 2a90 	vmov	r2, s5
 8013b08:	eef0 2a47 	vmov.f32	s5, s14
 8013b0c:	fb92 fef3 	sdiv	lr, r2, r3
 8013b10:	ee13 2a10 	vmov	r2, s6
 8013b14:	eeb0 3a67 	vmov.f32	s6, s15
 8013b18:	fb92 f3f3 	sdiv	r3, r2, r3
 8013b1c:	9a02      	ldr	r2, [sp, #8]
 8013b1e:	9312      	str	r3, [sp, #72]	; 0x48
 8013b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b22:	bf08      	it	eq
 8013b24:	4613      	moveq	r3, r2
 8013b26:	e734      	b.n	8013992 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013b28:	1427      	asrs	r7, r4, #16
 8013b2a:	d454      	bmi.n	8013bd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b2c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013b30:	42be      	cmp	r6, r7
 8013b32:	dd50      	ble.n	8013bd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b34:	ea5f 4920 	movs.w	r9, r0, asr #16
 8013b38:	d44d      	bmi.n	8013bd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b3a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013b3e:	454a      	cmp	r2, r9
 8013b40:	dd49      	ble.n	8013bd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b42:	b236      	sxth	r6, r6
 8013b44:	9a01      	ldr	r2, [sp, #4]
 8013b46:	fb09 7606 	mla	r6, r9, r6, r7
 8013b4a:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013b4e:	0e3a      	lsrs	r2, r7, #24
 8013b50:	d041      	beq.n	8013bd6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8013b52:	9e03      	ldr	r6, [sp, #12]
 8013b54:	fa5f fb87 	uxtb.w	fp, r7
 8013b58:	4372      	muls	r2, r6
 8013b5a:	1c56      	adds	r6, r2, #1
 8013b5c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8013b60:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8013b64:	1212      	asrs	r2, r2, #8
 8013b66:	f815 9006 	ldrb.w	r9, [r5, r6]
 8013b6a:	fa1f fa82 	uxth.w	sl, r2
 8013b6e:	43d2      	mvns	r2, r2
 8013b70:	fb1b fb0a 	smulbb	fp, fp, sl
 8013b74:	b2d2      	uxtb	r2, r2
 8013b76:	fb09 b902 	mla	r9, r9, r2, fp
 8013b7a:	fa1f f989 	uxth.w	r9, r9
 8013b7e:	f109 0b01 	add.w	fp, r9, #1
 8013b82:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013b86:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013b8a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013b8e:	fb1b fb0a 	smulbb	fp, fp, sl
 8013b92:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013b96:	fb17 fa0a 	smulbb	sl, r7, sl
 8013b9a:	f805 9006 	strb.w	r9, [r5, r6]
 8013b9e:	442e      	add	r6, r5
 8013ba0:	78b7      	ldrb	r7, [r6, #2]
 8013ba2:	f896 9001 	ldrb.w	r9, [r6, #1]
 8013ba6:	fb07 aa02 	mla	sl, r7, r2, sl
 8013baa:	fb09 b902 	mla	r9, r9, r2, fp
 8013bae:	fa1f fa8a 	uxth.w	sl, sl
 8013bb2:	fa1f f989 	uxth.w	r9, r9
 8013bb6:	f10a 0701 	add.w	r7, sl, #1
 8013bba:	f109 0b01 	add.w	fp, r9, #1
 8013bbe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013bc2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8013bc6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013bca:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013bce:	f886 a002 	strb.w	sl, [r6, #2]
 8013bd2:	f886 9001 	strb.w	r9, [r6, #1]
 8013bd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bd8:	4474      	add	r4, lr
 8013bda:	f108 0801 	add.w	r8, r8, #1
 8013bde:	4410      	add	r0, r2
 8013be0:	e762      	b.n	8013aa8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8013be2:	b005      	add	sp, #20
 8013be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013be8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bec:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8013bee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013bf2:	9201      	str	r2, [sp, #4]
 8013bf4:	6860      	ldr	r0, [r4, #4]
 8013bf6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8013bfa:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8013bfe:	fb00 2505 	mla	r5, r0, r5, r2
 8013c02:	6822      	ldr	r2, [r4, #0]
 8013c04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c08:	4415      	add	r5, r2
 8013c0a:	f8dc 2000 	ldr.w	r2, [ip]
 8013c0e:	9200      	str	r2, [sp, #0]
 8013c10:	2900      	cmp	r1, #0
 8013c12:	dc03      	bgt.n	8013c1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8013c14:	9a01      	ldr	r2, [sp, #4]
 8013c16:	2a00      	cmp	r2, #0
 8013c18:	f340 812b 	ble.w	8013e72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c1e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8013c22:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013c26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013c28:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013c2c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	dd0e      	ble.n	8013c52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8013c34:	1422      	asrs	r2, r4, #16
 8013c36:	d405      	bmi.n	8013c44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c38:	4572      	cmp	r2, lr
 8013c3a:	da03      	bge.n	8013c44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c3c:	1402      	asrs	r2, r0, #16
 8013c3e:	d401      	bmi.n	8013c44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8013c40:	42ba      	cmp	r2, r7
 8013c42:	db07      	blt.n	8013c54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8013c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013c46:	3b01      	subs	r3, #1
 8013c48:	3503      	adds	r5, #3
 8013c4a:	4414      	add	r4, r2
 8013c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013c4e:	4410      	add	r0, r2
 8013c50:	e7ee      	b.n	8013c30 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8013c52:	d06f      	beq.n	8013d34 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8013c54:	1e5a      	subs	r2, r3, #1
 8013c56:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8013c58:	fb06 4602 	mla	r6, r6, r2, r4
 8013c5c:	1436      	asrs	r6, r6, #16
 8013c5e:	d45e      	bmi.n	8013d1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c60:	4576      	cmp	r6, lr
 8013c62:	da5c      	bge.n	8013d1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c64:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8013c66:	fb06 0202 	mla	r2, r6, r2, r0
 8013c6a:	1412      	asrs	r2, r2, #16
 8013c6c:	d457      	bmi.n	8013d1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c6e:	42ba      	cmp	r2, r7
 8013c70:	da55      	bge.n	8013d1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8013c72:	1cee      	adds	r6, r5, #3
 8013c74:	469a      	mov	sl, r3
 8013c76:	f1ba 0f00 	cmp.w	sl, #0
 8013c7a:	dd56      	ble.n	8013d2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8013c7c:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8013c80:	1427      	asrs	r7, r4, #16
 8013c82:	1402      	asrs	r2, r0, #16
 8013c84:	fb0e 7202 	mla	r2, lr, r2, r7
 8013c88:	9f00      	ldr	r7, [sp, #0]
 8013c8a:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8013c8e:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8013c92:	d03c      	beq.n	8013d0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013c94:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8013c98:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013c9c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8013ca0:	fa5f f28e 	uxtb.w	r2, lr
 8013ca4:	b2ff      	uxtb	r7, r7
 8013ca6:	f000 80dd 	beq.w	8013e64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8013caa:	fa1f f882 	uxth.w	r8, r2
 8013cae:	43d2      	mvns	r2, r2
 8013cb0:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8013cb4:	fb17 f708 	smulbb	r7, r7, r8
 8013cb8:	b2d2      	uxtb	r2, r2
 8013cba:	fb19 f908 	smulbb	r9, r9, r8
 8013cbe:	fb0e 7702 	mla	r7, lr, r2, r7
 8013cc2:	fb1b f808 	smulbb	r8, fp, r8
 8013cc6:	b2bf      	uxth	r7, r7
 8013cc8:	f107 0e01 	add.w	lr, r7, #1
 8013ccc:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8013cd0:	123f      	asrs	r7, r7, #8
 8013cd2:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013cd6:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8013cda:	fb07 9902 	mla	r9, r7, r2, r9
 8013cde:	fa1f f989 	uxth.w	r9, r9
 8013ce2:	f109 0701 	add.w	r7, r9, #1
 8013ce6:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8013cea:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013cee:	fb07 8802 	mla	r8, r7, r2, r8
 8013cf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013cf6:	fa1f f888 	uxth.w	r8, r8
 8013cfa:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013cfe:	f108 0201 	add.w	r2, r8, #1
 8013d02:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8013d06:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013d0a:	f806 8c01 	strb.w	r8, [r6, #-1]
 8013d0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013d10:	3603      	adds	r6, #3
 8013d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013d16:	4414      	add	r4, r2
 8013d18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013d1a:	4410      	add	r0, r2
 8013d1c:	e7ab      	b.n	8013c76 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8013d1e:	f04f 0e00 	mov.w	lr, #0
 8013d22:	eba3 020e 	sub.w	r2, r3, lr
 8013d26:	2a00      	cmp	r2, #0
 8013d28:	dc3d      	bgt.n	8013da6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8013d2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013d32:	441d      	add	r5, r3
 8013d34:	2900      	cmp	r1, #0
 8013d36:	f340 809c 	ble.w	8013e72 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8013d3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013d3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d40:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8013d44:	3901      	subs	r1, #1
 8013d46:	eeb0 6a62 	vmov.f32	s12, s5
 8013d4a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8013d4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8013d52:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d56:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8013d5a:	eeb0 6a43 	vmov.f32	s12, s6
 8013d5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8013d62:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8013d66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8013d6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8013d6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8013d72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8013d76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8013d7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8013d7e:	ee12 2a90 	vmov	r2, s5
 8013d82:	eef0 2a47 	vmov.f32	s5, s14
 8013d86:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d8a:	ee13 2a10 	vmov	r2, s6
 8013d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d92:	eeb0 3a67 	vmov.f32	s6, s15
 8013d96:	fb92 f3f3 	sdiv	r3, r2, r3
 8013d9a:	9a01      	ldr	r2, [sp, #4]
 8013d9c:	9310      	str	r3, [sp, #64]	; 0x40
 8013d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013da0:	bf08      	it	eq
 8013da2:	4613      	moveq	r3, r2
 8013da4:	e734      	b.n	8013c10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8013da6:	1427      	asrs	r7, r4, #16
 8013da8:	d44d      	bmi.n	8013e46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013daa:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8013dae:	42be      	cmp	r6, r7
 8013db0:	dd49      	ble.n	8013e46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013db2:	ea5f 4820 	movs.w	r8, r0, asr #16
 8013db6:	d446      	bmi.n	8013e46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013db8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8013dbc:	4542      	cmp	r2, r8
 8013dbe:	dd42      	ble.n	8013e46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dc0:	b236      	sxth	r6, r6
 8013dc2:	9a00      	ldr	r2, [sp, #0]
 8013dc4:	fb08 7606 	mla	r6, r8, r6, r7
 8013dc8:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8013dcc:	0e3a      	lsrs	r2, r7, #24
 8013dce:	d03a      	beq.n	8013e46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013dd0:	2aff      	cmp	r2, #255	; 0xff
 8013dd2:	b2d6      	uxtb	r6, r2
 8013dd4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8013dd8:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8013ddc:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8013de0:	b2ff      	uxtb	r7, r7
 8013de2:	d037      	beq.n	8013e54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8013de4:	fa1f f986 	uxth.w	r9, r6
 8013de8:	4472      	add	r2, lr
 8013dea:	43f6      	mvns	r6, r6
 8013dec:	f815 8002 	ldrb.w	r8, [r5, r2]
 8013df0:	fb17 f709 	smulbb	r7, r7, r9
 8013df4:	fb1a fa09 	smulbb	sl, sl, r9
 8013df8:	b2f6      	uxtb	r6, r6
 8013dfa:	fb1b f909 	smulbb	r9, fp, r9
 8013dfe:	fb08 7706 	mla	r7, r8, r6, r7
 8013e02:	b2bf      	uxth	r7, r7
 8013e04:	f107 0801 	add.w	r8, r7, #1
 8013e08:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8013e0c:	123f      	asrs	r7, r7, #8
 8013e0e:	54af      	strb	r7, [r5, r2]
 8013e10:	442a      	add	r2, r5
 8013e12:	7857      	ldrb	r7, [r2, #1]
 8013e14:	fb07 aa06 	mla	sl, r7, r6, sl
 8013e18:	fa1f fa8a 	uxth.w	sl, sl
 8013e1c:	f10a 0701 	add.w	r7, sl, #1
 8013e20:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013e24:	7897      	ldrb	r7, [r2, #2]
 8013e26:	fb07 9906 	mla	r9, r7, r6, r9
 8013e2a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013e2e:	fa1f f989 	uxth.w	r9, r9
 8013e32:	f882 a001 	strb.w	sl, [r2, #1]
 8013e36:	f109 0601 	add.w	r6, r9, #1
 8013e3a:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8013e3e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8013e42:	f882 9002 	strb.w	r9, [r2, #2]
 8013e46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013e48:	f10e 0e01 	add.w	lr, lr, #1
 8013e4c:	4414      	add	r4, r2
 8013e4e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013e50:	4410      	add	r0, r2
 8013e52:	e766      	b.n	8013d22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8013e54:	4472      	add	r2, lr
 8013e56:	54af      	strb	r7, [r5, r2]
 8013e58:	442a      	add	r2, r5
 8013e5a:	f882 a001 	strb.w	sl, [r2, #1]
 8013e5e:	f882 b002 	strb.w	fp, [r2, #2]
 8013e62:	e7f0      	b.n	8013e46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8013e64:	f806 7c03 	strb.w	r7, [r6, #-3]
 8013e68:	f806 9c02 	strb.w	r9, [r6, #-2]
 8013e6c:	f806 bc01 	strb.w	fp, [r6, #-1]
 8013e70:	e74d      	b.n	8013d0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8013e72:	b003      	add	sp, #12
 8013e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013e78 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8013e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e7c:	b087      	sub	sp, #28
 8013e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013e82:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8013e84:	9204      	str	r2, [sp, #16]
 8013e86:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013e8a:	6860      	ldr	r0, [r4, #4]
 8013e8c:	9205      	str	r2, [sp, #20]
 8013e8e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8013e92:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8013e96:	9101      	str	r1, [sp, #4]
 8013e98:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8013e9c:	fb00 2505 	mla	r5, r0, r5, r2
 8013ea0:	6822      	ldr	r2, [r4, #0]
 8013ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ea6:	4415      	add	r5, r2
 8013ea8:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8013eac:	3201      	adds	r2, #1
 8013eae:	f022 0201 	bic.w	r2, r2, #1
 8013eb2:	9202      	str	r2, [sp, #8]
 8013eb4:	f8dc 2000 	ldr.w	r2, [ip]
 8013eb8:	9203      	str	r2, [sp, #12]
 8013eba:	9a01      	ldr	r2, [sp, #4]
 8013ebc:	2a00      	cmp	r2, #0
 8013ebe:	dc03      	bgt.n	8013ec8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8013ec0:	9a04      	ldr	r2, [sp, #16]
 8013ec2:	2a00      	cmp	r2, #0
 8013ec4:	f340 8135 	ble.w	8014132 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8013ec8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013eca:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8013ece:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8013ed2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013ed4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8013ed8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	dd0d      	ble.n	8013efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8013ee0:	1422      	asrs	r2, r4, #16
 8013ee2:	d405      	bmi.n	8013ef0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013ee4:	4542      	cmp	r2, r8
 8013ee6:	da03      	bge.n	8013ef0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013ee8:	1402      	asrs	r2, r0, #16
 8013eea:	d401      	bmi.n	8013ef0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8013eec:	42ba      	cmp	r2, r7
 8013eee:	db06      	blt.n	8013efe <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8013ef0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ef2:	4474      	add	r4, lr
 8013ef4:	3b01      	subs	r3, #1
 8013ef6:	3503      	adds	r5, #3
 8013ef8:	4410      	add	r0, r2
 8013efa:	e7ef      	b.n	8013edc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8013efc:	d077      	beq.n	8013fee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8013efe:	1e5a      	subs	r2, r3, #1
 8013f00:	fb0e 4602 	mla	r6, lr, r2, r4
 8013f04:	1436      	asrs	r6, r6, #16
 8013f06:	d469      	bmi.n	8013fdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f08:	4546      	cmp	r6, r8
 8013f0a:	da67      	bge.n	8013fdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f0c:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8013f0e:	fb06 0202 	mla	r2, r6, r2, r0
 8013f12:	1412      	asrs	r2, r2, #16
 8013f14:	d462      	bmi.n	8013fdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f16:	42ba      	cmp	r2, r7
 8013f18:	da60      	bge.n	8013fdc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8013f1a:	1cee      	adds	r6, r5, #3
 8013f1c:	4699      	mov	r9, r3
 8013f1e:	f1b9 0f00 	cmp.w	r9, #0
 8013f22:	dd5f      	ble.n	8013fe4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8013f24:	1422      	asrs	r2, r4, #16
 8013f26:	9902      	ldr	r1, [sp, #8]
 8013f28:	1407      	asrs	r7, r0, #16
 8013f2a:	fb01 2707 	mla	r7, r1, r7, r2
 8013f2e:	9903      	ldr	r1, [sp, #12]
 8013f30:	087a      	lsrs	r2, r7, #1
 8013f32:	5c8a      	ldrb	r2, [r1, r2]
 8013f34:	07f9      	lsls	r1, r7, #31
 8013f36:	bf54      	ite	pl
 8013f38:	f002 020f 	andpl.w	r2, r2, #15
 8013f3c:	1112      	asrmi	r2, r2, #4
 8013f3e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8013f42:	b2d2      	uxtb	r2, r2
 8013f44:	2a00      	cmp	r2, #0
 8013f46:	d042      	beq.n	8013fce <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8013f48:	497b      	ldr	r1, [pc, #492]	; (8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8013f4a:	680f      	ldr	r7, [r1, #0]
 8013f4c:	9905      	ldr	r1, [sp, #20]
 8013f4e:	fa5f fb87 	uxtb.w	fp, r7
 8013f52:	434a      	muls	r2, r1
 8013f54:	f102 0801 	add.w	r8, r2, #1
 8013f58:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8013f5c:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8013f60:	1212      	asrs	r2, r2, #8
 8013f62:	fa1f fa82 	uxth.w	sl, r2
 8013f66:	43d2      	mvns	r2, r2
 8013f68:	fb1b fb0a 	smulbb	fp, fp, sl
 8013f6c:	b2d2      	uxtb	r2, r2
 8013f6e:	fb08 b802 	mla	r8, r8, r2, fp
 8013f72:	fa1f f888 	uxth.w	r8, r8
 8013f76:	f108 0b01 	add.w	fp, r8, #1
 8013f7a:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013f7e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8013f82:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8013f86:	fb1b fb0a 	smulbb	fp, fp, sl
 8013f8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013f8e:	fb17 fa0a 	smulbb	sl, r7, sl
 8013f92:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8013f96:	f806 8c03 	strb.w	r8, [r6, #-3]
 8013f9a:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8013f9e:	fb07 aa02 	mla	sl, r7, r2, sl
 8013fa2:	fb08 b802 	mla	r8, r8, r2, fp
 8013fa6:	fa1f fa8a 	uxth.w	sl, sl
 8013faa:	fa1f f888 	uxth.w	r8, r8
 8013fae:	f10a 0701 	add.w	r7, sl, #1
 8013fb2:	f108 0b01 	add.w	fp, r8, #1
 8013fb6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8013fba:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8013fbe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8013fc2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8013fc6:	f806 ac01 	strb.w	sl, [r6, #-1]
 8013fca:	f806 8c02 	strb.w	r8, [r6, #-2]
 8013fce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013fd0:	4474      	add	r4, lr
 8013fd2:	3603      	adds	r6, #3
 8013fd4:	f109 39ff 	add.w	r9, r9, #4294967295
 8013fd8:	4410      	add	r0, r2
 8013fda:	e7a0      	b.n	8013f1e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8013fdc:	2700      	movs	r7, #0
 8013fde:	1bda      	subs	r2, r3, r7
 8013fe0:	2a00      	cmp	r2, #0
 8013fe2:	dc3e      	bgt.n	8014062 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8013fe4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013fe8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013fec:	441d      	add	r5, r3
 8013fee:	9b01      	ldr	r3, [sp, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f340 809e 	ble.w	8014132 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8013ff6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8013ffa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013ffc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014000:	eeb0 6a62 	vmov.f32	s12, s5
 8014004:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014008:	ee31 1a05 	vadd.f32	s2, s2, s10
 801400c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014010:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8014014:	eeb0 6a43 	vmov.f32	s12, s6
 8014018:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801401c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8014020:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014024:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014028:	ee77 2a62 	vsub.f32	s5, s14, s5
 801402c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014030:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014034:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014038:	ee12 2a90 	vmov	r2, s5
 801403c:	eef0 2a47 	vmov.f32	s5, s14
 8014040:	fb92 fef3 	sdiv	lr, r2, r3
 8014044:	ee13 2a10 	vmov	r2, s6
 8014048:	eeb0 3a67 	vmov.f32	s6, s15
 801404c:	fb92 f3f3 	sdiv	r3, r2, r3
 8014050:	9314      	str	r3, [sp, #80]	; 0x50
 8014052:	9b01      	ldr	r3, [sp, #4]
 8014054:	9a04      	ldr	r2, [sp, #16]
 8014056:	3b01      	subs	r3, #1
 8014058:	9301      	str	r3, [sp, #4]
 801405a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801405c:	bf08      	it	eq
 801405e:	4613      	moveq	r3, r2
 8014060:	e72b      	b.n	8013eba <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014062:	1426      	asrs	r6, r4, #16
 8014064:	d460      	bmi.n	8014128 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014066:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801406a:	42b2      	cmp	r2, r6
 801406c:	dd5c      	ble.n	8014128 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801406e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014072:	d459      	bmi.n	8014128 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014074:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014078:	4542      	cmp	r2, r8
 801407a:	dd55      	ble.n	8014128 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801407c:	9a02      	ldr	r2, [sp, #8]
 801407e:	9903      	ldr	r1, [sp, #12]
 8014080:	fb08 6602 	mla	r6, r8, r2, r6
 8014084:	0872      	lsrs	r2, r6, #1
 8014086:	07f6      	lsls	r6, r6, #31
 8014088:	5c8a      	ldrb	r2, [r1, r2]
 801408a:	bf54      	ite	pl
 801408c:	f002 020f 	andpl.w	r2, r2, #15
 8014090:	1112      	asrmi	r2, r2, #4
 8014092:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014096:	b2d2      	uxtb	r2, r2
 8014098:	2a00      	cmp	r2, #0
 801409a:	d045      	beq.n	8014128 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801409c:	4926      	ldr	r1, [pc, #152]	; (8014138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801409e:	f8d1 8000 	ldr.w	r8, [r1]
 80140a2:	9905      	ldr	r1, [sp, #20]
 80140a4:	fa5f fb88 	uxtb.w	fp, r8
 80140a8:	434a      	muls	r2, r1
 80140aa:	1c56      	adds	r6, r2, #1
 80140ac:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80140b0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80140b4:	1212      	asrs	r2, r2, #8
 80140b6:	f815 9006 	ldrb.w	r9, [r5, r6]
 80140ba:	fa1f fa82 	uxth.w	sl, r2
 80140be:	43d2      	mvns	r2, r2
 80140c0:	fb1b fb0a 	smulbb	fp, fp, sl
 80140c4:	b2d2      	uxtb	r2, r2
 80140c6:	fb09 b902 	mla	r9, r9, r2, fp
 80140ca:	fa1f f989 	uxth.w	r9, r9
 80140ce:	f109 0b01 	add.w	fp, r9, #1
 80140d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80140d6:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80140da:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80140de:	fb1b fb0a 	smulbb	fp, fp, sl
 80140e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80140e6:	fb18 fa0a 	smulbb	sl, r8, sl
 80140ea:	f805 9006 	strb.w	r9, [r5, r6]
 80140ee:	442e      	add	r6, r5
 80140f0:	f896 8002 	ldrb.w	r8, [r6, #2]
 80140f4:	f896 9001 	ldrb.w	r9, [r6, #1]
 80140f8:	fb08 aa02 	mla	sl, r8, r2, sl
 80140fc:	fb09 b902 	mla	r9, r9, r2, fp
 8014100:	fa1f fa8a 	uxth.w	sl, sl
 8014104:	fa1f f989 	uxth.w	r9, r9
 8014108:	f10a 0801 	add.w	r8, sl, #1
 801410c:	f109 0b01 	add.w	fp, r9, #1
 8014110:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8014114:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014118:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801411c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014120:	f886 a002 	strb.w	sl, [r6, #2]
 8014124:	f886 9001 	strb.w	r9, [r6, #1]
 8014128:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801412a:	4474      	add	r4, lr
 801412c:	3701      	adds	r7, #1
 801412e:	4410      	add	r0, r2
 8014130:	e755      	b.n	8013fde <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8014132:	b007      	add	sp, #28
 8014134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014138:	2401a9c0 	.word	0x2401a9c0

0801413c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801413c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014140:	b085      	sub	sp, #20
 8014142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014146:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8014148:	9203      	str	r2, [sp, #12]
 801414a:	6860      	ldr	r0, [r4, #4]
 801414c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014150:	9100      	str	r1, [sp, #0]
 8014152:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8014156:	fb00 2606 	mla	r6, r0, r6, r2
 801415a:	6822      	ldr	r2, [r4, #0]
 801415c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8014160:	4416      	add	r6, r2
 8014162:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014166:	3201      	adds	r2, #1
 8014168:	f022 0201 	bic.w	r2, r2, #1
 801416c:	9201      	str	r2, [sp, #4]
 801416e:	f8dc 2000 	ldr.w	r2, [ip]
 8014172:	9202      	str	r2, [sp, #8]
 8014174:	9a00      	ldr	r2, [sp, #0]
 8014176:	2a00      	cmp	r2, #0
 8014178:	dc03      	bgt.n	8014182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801417a:	9a03      	ldr	r2, [sp, #12]
 801417c:	2a00      	cmp	r2, #0
 801417e:	f340 8140 	ble.w	8014402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8014182:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014184:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014188:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 801418c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801418e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014192:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8014196:	2b00      	cmp	r3, #0
 8014198:	dd0e      	ble.n	80141b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801419a:	142a      	asrs	r2, r5, #16
 801419c:	d405      	bmi.n	80141aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801419e:	4572      	cmp	r2, lr
 80141a0:	da03      	bge.n	80141aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141a2:	1422      	asrs	r2, r4, #16
 80141a4:	d401      	bmi.n	80141aa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80141a6:	42ba      	cmp	r2, r7
 80141a8:	db07      	blt.n	80141ba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80141aa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80141ac:	3b01      	subs	r3, #1
 80141ae:	3603      	adds	r6, #3
 80141b0:	4415      	add	r5, r2
 80141b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80141b4:	4414      	add	r4, r2
 80141b6:	e7ee      	b.n	8014196 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80141b8:	d072      	beq.n	80142a0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80141ba:	1e5a      	subs	r2, r3, #1
 80141bc:	9811      	ldr	r0, [sp, #68]	; 0x44
 80141be:	fb00 5002 	mla	r0, r0, r2, r5
 80141c2:	1400      	asrs	r0, r0, #16
 80141c4:	d463      	bmi.n	801428e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141c6:	4570      	cmp	r0, lr
 80141c8:	da61      	bge.n	801428e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141ca:	9812      	ldr	r0, [sp, #72]	; 0x48
 80141cc:	fb00 4202 	mla	r2, r0, r2, r4
 80141d0:	1412      	asrs	r2, r2, #16
 80141d2:	d45c      	bmi.n	801428e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141d4:	42ba      	cmp	r2, r7
 80141d6:	da5a      	bge.n	801428e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80141d8:	1cf0      	adds	r0, r6, #3
 80141da:	469a      	mov	sl, r3
 80141dc:	f1ba 0f00 	cmp.w	sl, #0
 80141e0:	dd59      	ble.n	8014296 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80141e2:	142a      	asrs	r2, r5, #16
 80141e4:	9901      	ldr	r1, [sp, #4]
 80141e6:	1427      	asrs	r7, r4, #16
 80141e8:	fb01 2707 	mla	r7, r1, r7, r2
 80141ec:	9902      	ldr	r1, [sp, #8]
 80141ee:	087a      	lsrs	r2, r7, #1
 80141f0:	5c8a      	ldrb	r2, [r1, r2]
 80141f2:	07f9      	lsls	r1, r7, #31
 80141f4:	bf54      	ite	pl
 80141f6:	f002 020f 	andpl.w	r2, r2, #15
 80141fa:	1112      	asrmi	r2, r2, #4
 80141fc:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8014200:	b2d2      	uxtb	r2, r2
 8014202:	2a00      	cmp	r2, #0
 8014204:	d03b      	beq.n	801427e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014206:	4980      	ldr	r1, [pc, #512]	; (8014408 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014208:	2aff      	cmp	r2, #255	; 0xff
 801420a:	680f      	ldr	r7, [r1, #0]
 801420c:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8014210:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8014214:	b2ff      	uxtb	r7, r7
 8014216:	f000 80ed 	beq.w	80143f4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801421a:	fa1f f882 	uxth.w	r8, r2
 801421e:	43d2      	mvns	r2, r2
 8014220:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8014224:	fb17 f708 	smulbb	r7, r7, r8
 8014228:	b2d2      	uxtb	r2, r2
 801422a:	fb19 f908 	smulbb	r9, r9, r8
 801422e:	fb0e 7702 	mla	r7, lr, r2, r7
 8014232:	fb1b f808 	smulbb	r8, fp, r8
 8014236:	b2bf      	uxth	r7, r7
 8014238:	f107 0e01 	add.w	lr, r7, #1
 801423c:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8014240:	123f      	asrs	r7, r7, #8
 8014242:	f800 7c03 	strb.w	r7, [r0, #-3]
 8014246:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801424a:	fb07 9902 	mla	r9, r7, r2, r9
 801424e:	fa1f f989 	uxth.w	r9, r9
 8014252:	f109 0701 	add.w	r7, r9, #1
 8014256:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801425a:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801425e:	fb07 8802 	mla	r8, r7, r2, r8
 8014262:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014266:	fa1f f888 	uxth.w	r8, r8
 801426a:	f800 9c02 	strb.w	r9, [r0, #-2]
 801426e:	f108 0201 	add.w	r2, r8, #1
 8014272:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8014276:	ea4f 2828 	mov.w	r8, r8, asr #8
 801427a:	f800 8c01 	strb.w	r8, [r0, #-1]
 801427e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014280:	3003      	adds	r0, #3
 8014282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014286:	4415      	add	r5, r2
 8014288:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801428a:	4414      	add	r4, r2
 801428c:	e7a6      	b.n	80141dc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801428e:	2700      	movs	r7, #0
 8014290:	1bda      	subs	r2, r3, r7
 8014292:	2a00      	cmp	r2, #0
 8014294:	dc40      	bgt.n	8014318 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8014296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801429a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801429e:	441e      	add	r6, r3
 80142a0:	9b00      	ldr	r3, [sp, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f340 80ad 	ble.w	8014402 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80142a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80142ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80142b2:	eeb0 6a62 	vmov.f32	s12, s5
 80142b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80142ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 80142be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142c2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80142c6:	eeb0 6a43 	vmov.f32	s12, s6
 80142ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80142ce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80142d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80142d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80142da:	ee77 2a62 	vsub.f32	s5, s14, s5
 80142de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80142e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80142e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80142ea:	ee12 2a90 	vmov	r2, s5
 80142ee:	eef0 2a47 	vmov.f32	s5, s14
 80142f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80142f6:	ee13 2a10 	vmov	r2, s6
 80142fa:	9311      	str	r3, [sp, #68]	; 0x44
 80142fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80142fe:	eeb0 3a67 	vmov.f32	s6, s15
 8014302:	fb92 f3f3 	sdiv	r3, r2, r3
 8014306:	9312      	str	r3, [sp, #72]	; 0x48
 8014308:	9b00      	ldr	r3, [sp, #0]
 801430a:	9a03      	ldr	r2, [sp, #12]
 801430c:	3b01      	subs	r3, #1
 801430e:	9300      	str	r3, [sp, #0]
 8014310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014312:	bf08      	it	eq
 8014314:	4613      	moveq	r3, r2
 8014316:	e72d      	b.n	8014174 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8014318:	1428      	asrs	r0, r5, #16
 801431a:	d45c      	bmi.n	80143d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801431c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8014320:	4282      	cmp	r2, r0
 8014322:	dd58      	ble.n	80143d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014324:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8014328:	d455      	bmi.n	80143d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801432a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801432e:	4572      	cmp	r2, lr
 8014330:	dd51      	ble.n	80143d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014332:	9a01      	ldr	r2, [sp, #4]
 8014334:	9902      	ldr	r1, [sp, #8]
 8014336:	fb0e 0002 	mla	r0, lr, r2, r0
 801433a:	0842      	lsrs	r2, r0, #1
 801433c:	07c0      	lsls	r0, r0, #31
 801433e:	5c8a      	ldrb	r2, [r1, r2]
 8014340:	bf54      	ite	pl
 8014342:	f002 020f 	andpl.w	r2, r2, #15
 8014346:	1112      	asrmi	r2, r2, #4
 8014348:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801434c:	b2d2      	uxtb	r2, r2
 801434e:	2a00      	cmp	r2, #0
 8014350:	d041      	beq.n	80143d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8014352:	492d      	ldr	r1, [pc, #180]	; (8014408 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8014354:	2aff      	cmp	r2, #255	; 0xff
 8014356:	6808      	ldr	r0, [r1, #0]
 8014358:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801435c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8014360:	fa5f fe80 	uxtb.w	lr, r0
 8014364:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8014368:	d03b      	beq.n	80143e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801436a:	fa1f f982 	uxth.w	r9, r2
 801436e:	4438      	add	r0, r7
 8014370:	43d2      	mvns	r2, r2
 8014372:	f816 8000 	ldrb.w	r8, [r6, r0]
 8014376:	fb1e fe09 	smulbb	lr, lr, r9
 801437a:	fb1a fa09 	smulbb	sl, sl, r9
 801437e:	b2d2      	uxtb	r2, r2
 8014380:	fb1b f909 	smulbb	r9, fp, r9
 8014384:	fb08 ee02 	mla	lr, r8, r2, lr
 8014388:	fa1f fe8e 	uxth.w	lr, lr
 801438c:	f10e 0801 	add.w	r8, lr, #1
 8014390:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8014394:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8014398:	f806 e000 	strb.w	lr, [r6, r0]
 801439c:	4430      	add	r0, r6
 801439e:	f890 e001 	ldrb.w	lr, [r0, #1]
 80143a2:	fb0e aa02 	mla	sl, lr, r2, sl
 80143a6:	fa1f fa8a 	uxth.w	sl, sl
 80143aa:	f10a 0e01 	add.w	lr, sl, #1
 80143ae:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80143b2:	f890 e002 	ldrb.w	lr, [r0, #2]
 80143b6:	fb0e 9902 	mla	r9, lr, r2, r9
 80143ba:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80143be:	fa1f f989 	uxth.w	r9, r9
 80143c2:	f880 a001 	strb.w	sl, [r0, #1]
 80143c6:	f109 0201 	add.w	r2, r9, #1
 80143ca:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80143ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 80143d2:	f880 9002 	strb.w	r9, [r0, #2]
 80143d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80143d8:	3701      	adds	r7, #1
 80143da:	4415      	add	r5, r2
 80143dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80143de:	4414      	add	r4, r2
 80143e0:	e756      	b.n	8014290 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80143e2:	4438      	add	r0, r7
 80143e4:	f806 e000 	strb.w	lr, [r6, r0]
 80143e8:	4430      	add	r0, r6
 80143ea:	f880 a001 	strb.w	sl, [r0, #1]
 80143ee:	f880 b002 	strb.w	fp, [r0, #2]
 80143f2:	e7f0      	b.n	80143d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80143f4:	f800 7c03 	strb.w	r7, [r0, #-3]
 80143f8:	f800 9c02 	strb.w	r9, [r0, #-2]
 80143fc:	f800 bc01 	strb.w	fp, [r0, #-1]
 8014400:	e73d      	b.n	801427e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8014402:	b005      	add	sp, #20
 8014404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014408:	2401a9c0 	.word	0x2401a9c0

0801440c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801440c:	4770      	bx	lr

0801440e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801440e:	4770      	bx	lr

08014410 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8014410:	4770      	bx	lr

08014412 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8014412:	4770      	bx	lr

08014414 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8014414:	4770      	bx	lr

08014416 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8014416:	4770      	bx	lr

08014418 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8014418:	4770      	bx	lr

0801441a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801441a:	4770      	bx	lr

0801441c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801441c:	4770      	bx	lr

0801441e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801441e:	4770      	bx	lr

08014420 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8014420:	4770      	bx	lr

08014422 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014422:	4770      	bx	lr

08014424 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014424:	4770      	bx	lr

08014426 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014426:	4770      	bx	lr

08014428 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014428:	4770      	bx	lr

0801442a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801442a:	4770      	bx	lr

0801442c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801442c:	4770      	bx	lr

0801442e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801442e:	4770      	bx	lr

08014430 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8014430:	4770      	bx	lr

08014432 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8014432:	4770      	bx	lr

08014434 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8014434:	4770      	bx	lr

08014436 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8014436:	4770      	bx	lr

08014438 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8014438:	4770      	bx	lr
	...

0801443c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801443c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801443e:	4606      	mov	r6, r0
 8014440:	b087      	sub	sp, #28
 8014442:	4615      	mov	r5, r2
 8014444:	461f      	mov	r7, r3
 8014446:	b353      	cbz	r3, 801449e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014448:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801444c:	2b00      	cmp	r3, #0
 801444e:	dd26      	ble.n	801449e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014450:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014454:	2b00      	cmp	r3, #0
 8014456:	dd22      	ble.n	801449e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8014458:	6808      	ldr	r0, [r1, #0]
 801445a:	aa04      	add	r2, sp, #16
 801445c:	6849      	ldr	r1, [r1, #4]
 801445e:	4c1b      	ldr	r4, [pc, #108]	; (80144cc <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8014460:	c203      	stmia	r2!, {r0, r1}
 8014462:	a804      	add	r0, sp, #16
 8014464:	f7fb fb0a 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014468:	6820      	ldr	r0, [r4, #0]
 801446a:	6803      	ldr	r3, [r0, #0]
 801446c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801446e:	4798      	blx	r3
 8014470:	2fff      	cmp	r7, #255	; 0xff
 8014472:	d016      	beq.n	80144a2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8014474:	f010 0f08 	tst.w	r0, #8
 8014478:	6820      	ldr	r0, [r4, #0]
 801447a:	d015      	beq.n	80144a8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801447c:	2400      	movs	r4, #0
 801447e:	6801      	ldr	r1, [r0, #0]
 8014480:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014484:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014488:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801448c:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8014490:	9401      	str	r4, [sp, #4]
 8014492:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8014496:	9400      	str	r4, [sp, #0]
 8014498:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801449a:	4629      	mov	r1, r5
 801449c:	47a0      	blx	r4
 801449e:	b007      	add	sp, #28
 80144a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144a2:	f010 0f02 	tst.w	r0, #2
 80144a6:	e7e7      	b.n	8014478 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80144a8:	6803      	ldr	r3, [r0, #0]
 80144aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80144ac:	4798      	blx	r3
 80144ae:	4b08      	ldr	r3, [pc, #32]	; (80144d0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80144b0:	4601      	mov	r1, r0
 80144b2:	4630      	mov	r0, r6
 80144b4:	881a      	ldrh	r2, [r3, #0]
 80144b6:	6833      	ldr	r3, [r6, #0]
 80144b8:	e9cd 5700 	strd	r5, r7, [sp]
 80144bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80144be:	ab04      	add	r3, sp, #16
 80144c0:	47a8      	blx	r5
 80144c2:	6820      	ldr	r0, [r4, #0]
 80144c4:	6803      	ldr	r3, [r0, #0]
 80144c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144c8:	4798      	blx	r3
 80144ca:	e7e8      	b.n	801449e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80144cc:	2401a9b8 	.word	0x2401a9b8
 80144d0:	2401a9b2 	.word	0x2401a9b2

080144d4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80144d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80144d8:	b08b      	sub	sp, #44	; 0x2c
 80144da:	460d      	mov	r5, r1
 80144dc:	4616      	mov	r6, r2
 80144de:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80144e2:	f1b8 0f00 	cmp.w	r8, #0
 80144e6:	d047      	beq.n	8014578 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80144e8:	6810      	ldr	r0, [r2, #0]
 80144ea:	ac06      	add	r4, sp, #24
 80144ec:	6851      	ldr	r1, [r2, #4]
 80144ee:	4f51      	ldr	r7, [pc, #324]	; (8014634 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80144f0:	c403      	stmia	r4!, {r0, r1}
 80144f2:	6818      	ldr	r0, [r3, #0]
 80144f4:	ac08      	add	r4, sp, #32
 80144f6:	6859      	ldr	r1, [r3, #4]
 80144f8:	c403      	stmia	r4!, {r0, r1}
 80144fa:	a806      	add	r0, sp, #24
 80144fc:	f7fb fabe 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014500:	4631      	mov	r1, r6
 8014502:	a808      	add	r0, sp, #32
 8014504:	f7fb fae2 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014508:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801450c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8014510:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014514:	6838      	ldr	r0, [r7, #0]
 8014516:	fb11 2103 	smlabb	r1, r1, r3, r2
 801451a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 801451e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8014522:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014526:	440d      	add	r5, r1
 8014528:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801452c:	440a      	add	r2, r1
 801452e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8014532:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014536:	4413      	add	r3, r2
 8014538:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801453c:	6803      	ldr	r3, [r0, #0]
 801453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014540:	4798      	blx	r3
 8014542:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014546:	d01a      	beq.n	801457e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8014548:	f010 0f04 	tst.w	r0, #4
 801454c:	6838      	ldr	r0, [r7, #0]
 801454e:	d019      	beq.n	8014584 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8014550:	2100      	movs	r1, #0
 8014552:	6807      	ldr	r7, [r0, #0]
 8014554:	b2a4      	uxth	r4, r4
 8014556:	f8cd 800c 	str.w	r8, [sp, #12]
 801455a:	b2b6      	uxth	r6, r6
 801455c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8014560:	9401      	str	r4, [sp, #4]
 8014562:	9600      	str	r6, [sp, #0]
 8014564:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8014568:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801456c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014570:	9102      	str	r1, [sp, #8]
 8014572:	4629      	mov	r1, r5
 8014574:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8014576:	47a0      	blx	r4
 8014578:	b00b      	add	sp, #44	; 0x2c
 801457a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801457e:	f010 0f01 	tst.w	r0, #1
 8014582:	e7e3      	b.n	801454c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8014584:	6803      	ldr	r3, [r0, #0]
 8014586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014588:	4798      	blx	r3
 801458a:	4a2b      	ldr	r2, [pc, #172]	; (8014638 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801458c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8014590:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8014594:	8813      	ldrh	r3, [r2, #0]
 8014596:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801459a:	fb03 f404 	mul.w	r4, r3, r4
 801459e:	fb03 c101 	mla	r1, r3, r1, ip
 80145a2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80145a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80145aa:	4408      	add	r0, r1
 80145ac:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80145b0:	4404      	add	r4, r0
 80145b2:	d02e      	beq.n	8014612 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80145b4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80145b8:	1b9b      	subs	r3, r3, r6
 80145ba:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80145be:	1b96      	subs	r6, r2, r6
 80145c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80145c4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80145c8:	42a0      	cmp	r0, r4
 80145ca:	d22d      	bcs.n	8014628 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80145cc:	eb00 0e01 	add.w	lr, r0, r1
 80145d0:	4570      	cmp	r0, lr
 80145d2:	d210      	bcs.n	80145f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80145d4:	f890 9000 	ldrb.w	r9, [r0]
 80145d8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80145dc:	fb19 f90c 	smulbb	r9, r9, ip
 80145e0:	fb02 9208 	mla	r2, r2, r8, r9
 80145e4:	b292      	uxth	r2, r2
 80145e6:	f102 0901 	add.w	r9, r2, #1
 80145ea:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80145ee:	1212      	asrs	r2, r2, #8
 80145f0:	f800 2b01 	strb.w	r2, [r0], #1
 80145f4:	e7ec      	b.n	80145d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80145f6:	4418      	add	r0, r3
 80145f8:	4435      	add	r5, r6
 80145fa:	e7e5      	b.n	80145c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80145fc:	8813      	ldrh	r3, [r2, #0]
 80145fe:	1b9b      	subs	r3, r3, r6
 8014600:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014604:	4418      	add	r0, r3
 8014606:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801460a:	1b9b      	subs	r3, r3, r6
 801460c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014610:	441d      	add	r5, r3
 8014612:	42a0      	cmp	r0, r4
 8014614:	d208      	bcs.n	8014628 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8014616:	eb00 0c01 	add.w	ip, r0, r1
 801461a:	4560      	cmp	r0, ip
 801461c:	d2ee      	bcs.n	80145fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801461e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014622:	f800 3b01 	strb.w	r3, [r0], #1
 8014626:	e7f8      	b.n	801461a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8014628:	6838      	ldr	r0, [r7, #0]
 801462a:	6803      	ldr	r3, [r0, #0]
 801462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801462e:	4798      	blx	r3
 8014630:	e7a2      	b.n	8014578 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8014632:	bf00      	nop
 8014634:	2401a9b8 	.word	0x2401a9b8
 8014638:	2401a9b2 	.word	0x2401a9b2

0801463c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801463c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801463e:	2300      	movs	r3, #0
 8014640:	b085      	sub	sp, #20
 8014642:	9300      	str	r3, [sp, #0]
 8014644:	4b41      	ldr	r3, [pc, #260]	; (801474c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d136      	bne.n	80146ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801464c:	4a40      	ldr	r2, [pc, #256]	; (8014750 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801464e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014652:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d131      	bne.n	80146be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801465a:	4b3e      	ldr	r3, [pc, #248]	; (8014754 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801465c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014660:	ac02      	add	r4, sp, #8
 8014662:	6808      	ldr	r0, [r1, #0]
 8014664:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014668:	ab02      	add	r3, sp, #8
 801466a:	6849      	ldr	r1, [r1, #4]
 801466c:	4d3a      	ldr	r5, [pc, #232]	; (8014758 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801466e:	c303      	stmia	r3!, {r0, r1}
 8014670:	4669      	mov	r1, sp
 8014672:	4620      	mov	r0, r4
 8014674:	f7fb fa2a 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014678:	4668      	mov	r0, sp
 801467a:	f7fb f9ff 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801467e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014682:	f8bd 2000 	ldrh.w	r2, [sp]
 8014686:	462e      	mov	r6, r5
 8014688:	6828      	ldr	r0, [r5, #0]
 801468a:	4413      	add	r3, r2
 801468c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8014690:	f8ad 3008 	strh.w	r3, [sp, #8]
 8014694:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014698:	4413      	add	r3, r2
 801469a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801469e:	6803      	ldr	r3, [r0, #0]
 80146a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80146a2:	4798      	blx	r3
 80146a4:	f010 0f01 	tst.w	r0, #1
 80146a8:	d00b      	beq.n	80146c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80146aa:	6828      	ldr	r0, [r5, #0]
 80146ac:	6803      	ldr	r3, [r0, #0]
 80146ae:	e894 0006 	ldmia.w	r4, {r1, r2}
 80146b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80146b4:	4798      	blx	r3
 80146b6:	b005      	add	sp, #20
 80146b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146ba:	4a26      	ldr	r2, [pc, #152]	; (8014754 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80146bc:	e7c7      	b.n	801464e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80146be:	4b24      	ldr	r3, [pc, #144]	; (8014750 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80146c0:	e7cc      	b.n	801465c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80146c2:	6830      	ldr	r0, [r6, #0]
 80146c4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80146c8:	6803      	ldr	r3, [r0, #0]
 80146ca:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80146ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146d0:	4798      	blx	r3
 80146d2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80146d6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80146da:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80146de:	fb14 3402 	smlabb	r4, r4, r2, r3
 80146e2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80146e6:	4404      	add	r4, r0
 80146e8:	6830      	ldr	r0, [r6, #0]
 80146ea:	6803      	ldr	r3, [r0, #0]
 80146ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146ee:	4798      	blx	r3
 80146f0:	4917      	ldr	r1, [pc, #92]	; (8014750 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80146f2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80146f6:	880b      	ldrh	r3, [r1, #0]
 80146f8:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80146fc:	fb03 c202 	mla	r2, r3, r2, ip
 8014700:	437b      	muls	r3, r7
 8014702:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8014706:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801470a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801470e:	4410      	add	r0, r2
 8014710:	18c2      	adds	r2, r0, r3
 8014712:	4290      	cmp	r0, r2
 8014714:	d214      	bcs.n	8014740 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8014716:	eb00 0c07 	add.w	ip, r0, r7
 801471a:	4560      	cmp	r0, ip
 801471c:	d204      	bcs.n	8014728 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801471e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014722:	f800 3b01 	strb.w	r3, [r0], #1
 8014726:	e7f8      	b.n	801471a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8014728:	880b      	ldrh	r3, [r1, #0]
 801472a:	1b5b      	subs	r3, r3, r5
 801472c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014730:	4418      	add	r0, r3
 8014732:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8014736:	1b5b      	subs	r3, r3, r5
 8014738:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801473c:	441c      	add	r4, r3
 801473e:	e7e8      	b.n	8014712 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8014740:	6830      	ldr	r0, [r6, #0]
 8014742:	6803      	ldr	r3, [r0, #0]
 8014744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014746:	4798      	blx	r3
 8014748:	e7b5      	b.n	80146b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801474a:	bf00      	nop
 801474c:	2401a9b0 	.word	0x2401a9b0
 8014750:	2401a9b2 	.word	0x2401a9b2
 8014754:	2401a9b4 	.word	0x2401a9b4
 8014758:	2401a9b8 	.word	0x2401a9b8

0801475c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014760:	b08f      	sub	sp, #60	; 0x3c
 8014762:	461c      	mov	r4, r3
 8014764:	9203      	str	r2, [sp, #12]
 8014766:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801476a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801476c:	6820      	ldr	r0, [r4, #0]
 801476e:	9100      	str	r1, [sp, #0]
 8014770:	9204      	str	r2, [sp, #16]
 8014772:	aa0a      	add	r2, sp, #40	; 0x28
 8014774:	6861      	ldr	r1, [r4, #4]
 8014776:	c203      	stmia	r2!, {r0, r1}
 8014778:	6818      	ldr	r0, [r3, #0]
 801477a:	aa0c      	add	r2, sp, #48	; 0x30
 801477c:	6859      	ldr	r1, [r3, #4]
 801477e:	c203      	stmia	r2!, {r0, r1}
 8014780:	a80a      	add	r0, sp, #40	; 0x28
 8014782:	f7fb f97b 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014786:	4621      	mov	r1, r4
 8014788:	a80c      	add	r0, sp, #48	; 0x30
 801478a:	f7fb f99f 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801478e:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8014792:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8014796:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801479a:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 801479e:	bfdb      	ittet	le
 80147a0:	b2b3      	uxthle	r3, r6
 80147a2:	f44f 6280 	movle.w	r2, #1024	; 0x400
 80147a6:	2301      	movgt	r3, #1
 80147a8:	fb92 f3f3 	sdivle	r3, r2, r3
 80147ac:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80147b0:	441d      	add	r5, r3
 80147b2:	fb92 f1f3 	sdiv	r1, r2, r3
 80147b6:	fa1f fc81 	uxth.w	ip, r1
 80147ba:	3d01      	subs	r5, #1
 80147bc:	fb0c 2413 	mls	r4, ip, r3, r2
 80147c0:	4661      	mov	r1, ip
 80147c2:	fb14 f406 	smulbb	r4, r4, r6
 80147c6:	4404      	add	r4, r0
 80147c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80147cc:	b2a4      	uxth	r4, r4
 80147ce:	b131      	cbz	r1, 80147de <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80147d0:	9b03      	ldr	r3, [sp, #12]
 80147d2:	9900      	ldr	r1, [sp, #0]
 80147d4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80147d8:	ba1b      	rev	r3, r3
 80147da:	4419      	add	r1, r3
 80147dc:	9100      	str	r1, [sp, #0]
 80147de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80147e2:	b2ad      	uxth	r5, r5
 80147e4:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 80147e8:	4418      	add	r0, r3
 80147ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80147ee:	00ad      	lsls	r5, r5, #2
 80147f0:	441a      	add	r2, r3
 80147f2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80147f6:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 80147fa:	9301      	str	r3, [sp, #4]
 80147fc:	4b79      	ldr	r3, [pc, #484]	; (80149e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80147fe:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	6803      	ldr	r3, [r0, #0]
 8014806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014808:	4798      	blx	r3
 801480a:	4a77      	ldr	r2, [pc, #476]	; (80149e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801480c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8014810:	2c00      	cmp	r4, #0
 8014812:	8813      	ldrh	r3, [r2, #0]
 8014814:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8014818:	9209      	str	r2, [sp, #36]	; 0x24
 801481a:	fb03 c101 	mla	r1, r3, r1, ip
 801481e:	fb06 f303 	mul.w	r3, r6, r3
 8014822:	bf18      	it	ne
 8014824:	2600      	movne	r6, #0
 8014826:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801482a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801482e:	4408      	add	r0, r1
 8014830:	4403      	add	r3, r0
 8014832:	9306      	str	r3, [sp, #24]
 8014834:	f105 0304 	add.w	r3, r5, #4
 8014838:	9305      	str	r3, [sp, #20]
 801483a:	9b01      	ldr	r3, [sp, #4]
 801483c:	bf08      	it	eq
 801483e:	461e      	moveq	r6, r3
 8014840:	2300      	movs	r3, #0
 8014842:	b2b6      	uxth	r6, r6
 8014844:	9302      	str	r3, [sp, #8]
 8014846:	9a06      	ldr	r2, [sp, #24]
 8014848:	4290      	cmp	r0, r2
 801484a:	f080 80c2 	bcs.w	80149d2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801484e:	b963      	cbnz	r3, 801486a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8014850:	9b00      	ldr	r3, [sp, #0]
 8014852:	781a      	ldrb	r2, [r3, #0]
 8014854:	0993      	lsrs	r3, r2, #6
 8014856:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801485a:	9202      	str	r2, [sp, #8]
 801485c:	1e5a      	subs	r2, r3, #1
 801485e:	2a02      	cmp	r2, #2
 8014860:	d815      	bhi.n	801488e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8014862:	9a00      	ldr	r2, [sp, #0]
 8014864:	b29b      	uxth	r3, r3
 8014866:	3201      	adds	r2, #1
 8014868:	9200      	str	r2, [sp, #0]
 801486a:	b1b4      	cbz	r4, 801489a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801486c:	429c      	cmp	r4, r3
 801486e:	bf91      	iteee	ls
 8014870:	1b1c      	subls	r4, r3, r4
 8014872:	1ae4      	subhi	r4, r4, r3
 8014874:	4635      	movhi	r5, r6
 8014876:	f04f 0e00 	movhi.w	lr, #0
 801487a:	bf9b      	ittet	ls
 801487c:	fa1f fe84 	uxthls.w	lr, r4
 8014880:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8014884:	b2a4      	uxthhi	r4, r4
 8014886:	2400      	movls	r4, #0
 8014888:	4673      	mov	r3, lr
 801488a:	462e      	mov	r6, r5
 801488c:	e7db      	b.n	8014846 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801488e:	9a00      	ldr	r2, [sp, #0]
 8014890:	9b00      	ldr	r3, [sp, #0]
 8014892:	3202      	adds	r2, #2
 8014894:	785b      	ldrb	r3, [r3, #1]
 8014896:	9200      	str	r2, [sp, #0]
 8014898:	e7e7      	b.n	801486a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801489a:	2204      	movs	r2, #4
 801489c:	9905      	ldr	r1, [sp, #20]
 801489e:	429e      	cmp	r6, r3
 80148a0:	4615      	mov	r5, r2
 80148a2:	9a02      	ldr	r2, [sp, #8]
 80148a4:	bf94      	ite	ls
 80148a6:	eba3 0e06 	subls.w	lr, r3, r6
 80148aa:	46a6      	movhi	lr, r4
 80148ac:	fb15 1202 	smlabb	r2, r5, r2, r1
 80148b0:	9903      	ldr	r1, [sp, #12]
 80148b2:	bf8c      	ite	hi
 80148b4:	1af5      	subhi	r5, r6, r3
 80148b6:	fa1f fe8e 	uxthls.w	lr, lr
 80148ba:	f851 c002 	ldr.w	ip, [r1, r2]
 80148be:	bf9a      	itte	ls
 80148c0:	4625      	movls	r5, r4
 80148c2:	4632      	movls	r2, r6
 80148c4:	b2ad      	uxthhi	r5, r5
 80148c6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80148ca:	bf88      	it	hi
 80148cc:	461a      	movhi	r2, r3
 80148ce:	b179      	cbz	r1, 80148f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80148d0:	29ff      	cmp	r1, #255	; 0xff
 80148d2:	fa5f f98c 	uxtb.w	r9, ip
 80148d6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80148da:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80148de:	d126      	bne.n	801492e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80148e0:	9f04      	ldr	r7, [sp, #16]
 80148e2:	2fff      	cmp	r7, #255	; 0xff
 80148e4:	d123      	bne.n	801492e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80148e6:	4682      	mov	sl, r0
 80148e8:	4611      	mov	r1, r2
 80148ea:	f10a 0a03 	add.w	sl, sl, #3
 80148ee:	b9a9      	cbnz	r1, 801491c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80148f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80148f4:	429e      	cmp	r6, r3
 80148f6:	4410      	add	r0, r2
 80148f8:	d8c6      	bhi.n	8014888 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80148fa:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80148fe:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8014902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014904:	1b64      	subs	r4, r4, r5
 8014906:	9a01      	ldr	r2, [sp, #4]
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	b2a4      	uxth	r4, r4
 801490c:	1a9b      	subs	r3, r3, r2
 801490e:	2c00      	cmp	r4, #0
 8014910:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014914:	bf18      	it	ne
 8014916:	2500      	movne	r5, #0
 8014918:	4418      	add	r0, r3
 801491a:	e7b5      	b.n	8014888 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801491c:	3901      	subs	r1, #1
 801491e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8014922:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8014926:	f80a cc01 	strb.w	ip, [sl, #-1]
 801492a:	b289      	uxth	r1, r1
 801492c:	e7dd      	b.n	80148ea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801492e:	9f04      	ldr	r7, [sp, #16]
 8014930:	fb07 fa01 	mul.w	sl, r7, r1
 8014934:	f10a 0101 	add.w	r1, sl, #1
 8014938:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801493c:	1209      	asrs	r1, r1, #8
 801493e:	ea6f 0a01 	mvn.w	sl, r1
 8014942:	b289      	uxth	r1, r1
 8014944:	fb19 f901 	smulbb	r9, r9, r1
 8014948:	fa5f fa8a 	uxtb.w	sl, sl
 801494c:	fb18 f801 	smulbb	r8, r8, r1
 8014950:	fb1c f101 	smulbb	r1, ip, r1
 8014954:	fa1f f789 	uxth.w	r7, r9
 8014958:	4684      	mov	ip, r0
 801495a:	4691      	mov	r9, r2
 801495c:	9707      	str	r7, [sp, #28]
 801495e:	b289      	uxth	r1, r1
 8014960:	fa1f f788 	uxth.w	r7, r8
 8014964:	9708      	str	r7, [sp, #32]
 8014966:	f10c 0c03 	add.w	ip, ip, #3
 801496a:	f1b9 0f00 	cmp.w	r9, #0
 801496e:	d0bf      	beq.n	80148f0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8014970:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8014974:	f109 39ff 	add.w	r9, r9, #4294967295
 8014978:	9f07      	ldr	r7, [sp, #28]
 801497a:	fa1f f989 	uxth.w	r9, r9
 801497e:	fb08 780a 	mla	r8, r8, sl, r7
 8014982:	9f08      	ldr	r7, [sp, #32]
 8014984:	fa1f f888 	uxth.w	r8, r8
 8014988:	f108 0b01 	add.w	fp, r8, #1
 801498c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8014990:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014994:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8014998:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801499c:	fb08 780a 	mla	r8, r8, sl, r7
 80149a0:	fa1f f888 	uxth.w	r8, r8
 80149a4:	f108 0b01 	add.w	fp, r8, #1
 80149a8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80149ac:	ea4f 2828 	mov.w	r8, r8, asr #8
 80149b0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80149b4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80149b8:	fb08 180a 	mla	r8, r8, sl, r1
 80149bc:	fa1f f888 	uxth.w	r8, r8
 80149c0:	f108 0b01 	add.w	fp, r8, #1
 80149c4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80149c8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80149cc:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80149d0:	e7c9      	b.n	8014966 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80149d2:	4b04      	ldr	r3, [pc, #16]	; (80149e4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80149d4:	6818      	ldr	r0, [r3, #0]
 80149d6:	6803      	ldr	r3, [r0, #0]
 80149d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149da:	4798      	blx	r3
 80149dc:	b00f      	add	sp, #60	; 0x3c
 80149de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149e2:	bf00      	nop
 80149e4:	2401a9b8 	.word	0x2401a9b8
 80149e8:	2401a9b2 	.word	0x2401a9b2

080149ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80149ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f0:	b089      	sub	sp, #36	; 0x24
 80149f2:	4607      	mov	r7, r0
 80149f4:	4689      	mov	r9, r1
 80149f6:	4692      	mov	sl, r2
 80149f8:	ac08      	add	r4, sp, #32
 80149fa:	461e      	mov	r6, r3
 80149fc:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8014a00:	4620      	mov	r0, r4
 8014a02:	f7fd ffa5 	bl	8012950 <_ZNK8touchgfx6Bitmap7getDataEv>
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	4605      	mov	r5, r0
 8014a0a:	4620      	mov	r0, r4
 8014a0c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8014a10:	f7fd feea 	bl	80127e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8014a14:	4683      	mov	fp, r0
 8014a16:	4620      	mov	r0, r4
 8014a18:	f7fd ff1a 	bl	8012850 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8014a1c:	4653      	mov	r3, sl
 8014a1e:	464a      	mov	r2, r9
 8014a20:	4639      	mov	r1, r7
 8014a22:	9500      	str	r5, [sp, #0]
 8014a24:	e9cd b001 	strd	fp, r0, [sp, #4]
 8014a28:	a806      	add	r0, sp, #24
 8014a2a:	47c0      	blx	r8
 8014a2c:	a906      	add	r1, sp, #24
 8014a2e:	4630      	mov	r0, r6
 8014a30:	f7fd fdbe 	bl	80125b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8014a34:	4628      	mov	r0, r5
 8014a36:	b009      	add	sp, #36	; 0x24
 8014a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a3c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8014a3c:	b510      	push	{r4, lr}
 8014a3e:	4604      	mov	r4, r0
 8014a40:	2104      	movs	r1, #4
 8014a42:	f007 f928 	bl	801bc96 <_ZdlPvj>
 8014a46:	4620      	mov	r0, r4
 8014a48:	bd10      	pop	{r4, pc}

08014a4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8014a4a:	b510      	push	{r4, lr}
 8014a4c:	4604      	mov	r4, r0
 8014a4e:	2104      	movs	r1, #4
 8014a50:	f007 f921 	bl	801bc96 <_ZdlPvj>
 8014a54:	4620      	mov	r0, r4
 8014a56:	bd10      	pop	{r4, pc}

08014a58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8014a58:	b510      	push	{r4, lr}
 8014a5a:	4604      	mov	r4, r0
 8014a5c:	f640 0144 	movw	r1, #2116	; 0x844
 8014a60:	f007 f919 	bl	801bc96 <_ZdlPvj>
 8014a64:	4620      	mov	r0, r4
 8014a66:	bd10      	pop	{r4, pc}

08014a68 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014a68:	b510      	push	{r4, lr}
 8014a6a:	4604      	mov	r4, r0
 8014a6c:	2104      	movs	r1, #4
 8014a6e:	f007 f912 	bl	801bc96 <_ZdlPvj>
 8014a72:	4620      	mov	r0, r4
 8014a74:	bd10      	pop	{r4, pc}

08014a76 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014a76:	b510      	push	{r4, lr}
 8014a78:	4604      	mov	r4, r0
 8014a7a:	2104      	movs	r1, #4
 8014a7c:	f007 f90b 	bl	801bc96 <_ZdlPvj>
 8014a80:	4620      	mov	r0, r4
 8014a82:	bd10      	pop	{r4, pc}

08014a84 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014a84:	b510      	push	{r4, lr}
 8014a86:	4604      	mov	r4, r0
 8014a88:	2104      	movs	r1, #4
 8014a8a:	f007 f904 	bl	801bc96 <_ZdlPvj>
 8014a8e:	4620      	mov	r0, r4
 8014a90:	bd10      	pop	{r4, pc}

08014a92 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8014a92:	b510      	push	{r4, lr}
 8014a94:	4604      	mov	r4, r0
 8014a96:	2104      	movs	r1, #4
 8014a98:	f007 f8fd 	bl	801bc96 <_ZdlPvj>
 8014a9c:	4620      	mov	r0, r4
 8014a9e:	bd10      	pop	{r4, pc}

08014aa0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014aa0:	b510      	push	{r4, lr}
 8014aa2:	4604      	mov	r4, r0
 8014aa4:	2104      	movs	r1, #4
 8014aa6:	f007 f8f6 	bl	801bc96 <_ZdlPvj>
 8014aaa:	4620      	mov	r0, r4
 8014aac:	bd10      	pop	{r4, pc}

08014aae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014aae:	b510      	push	{r4, lr}
 8014ab0:	4604      	mov	r4, r0
 8014ab2:	2104      	movs	r1, #4
 8014ab4:	f007 f8ef 	bl	801bc96 <_ZdlPvj>
 8014ab8:	4620      	mov	r0, r4
 8014aba:	bd10      	pop	{r4, pc}

08014abc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014abc:	b510      	push	{r4, lr}
 8014abe:	4604      	mov	r4, r0
 8014ac0:	2104      	movs	r1, #4
 8014ac2:	f007 f8e8 	bl	801bc96 <_ZdlPvj>
 8014ac6:	4620      	mov	r0, r4
 8014ac8:	bd10      	pop	{r4, pc}

08014aca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014aca:	b510      	push	{r4, lr}
 8014acc:	4604      	mov	r4, r0
 8014ace:	2104      	movs	r1, #4
 8014ad0:	f007 f8e1 	bl	801bc96 <_ZdlPvj>
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	bd10      	pop	{r4, pc}

08014ad8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8014ad8:	b510      	push	{r4, lr}
 8014ada:	4604      	mov	r4, r0
 8014adc:	2104      	movs	r1, #4
 8014ade:	f007 f8da 	bl	801bc96 <_ZdlPvj>
 8014ae2:	4620      	mov	r0, r4
 8014ae4:	bd10      	pop	{r4, pc}

08014ae6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8014ae6:	b510      	push	{r4, lr}
 8014ae8:	4604      	mov	r4, r0
 8014aea:	2104      	movs	r1, #4
 8014aec:	f007 f8d3 	bl	801bc96 <_ZdlPvj>
 8014af0:	4620      	mov	r0, r4
 8014af2:	bd10      	pop	{r4, pc}

08014af4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8014af4:	b510      	push	{r4, lr}
 8014af6:	4604      	mov	r4, r0
 8014af8:	2104      	movs	r1, #4
 8014afa:	f007 f8cc 	bl	801bc96 <_ZdlPvj>
 8014afe:	4620      	mov	r0, r4
 8014b00:	bd10      	pop	{r4, pc}

08014b02 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8014b02:	b510      	push	{r4, lr}
 8014b04:	4604      	mov	r4, r0
 8014b06:	2104      	movs	r1, #4
 8014b08:	f007 f8c5 	bl	801bc96 <_ZdlPvj>
 8014b0c:	4620      	mov	r0, r4
 8014b0e:	bd10      	pop	{r4, pc}

08014b10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8014b10:	b510      	push	{r4, lr}
 8014b12:	4604      	mov	r4, r0
 8014b14:	2104      	movs	r1, #4
 8014b16:	f007 f8be 	bl	801bc96 <_ZdlPvj>
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	bd10      	pop	{r4, pc}

08014b1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8014b1e:	b510      	push	{r4, lr}
 8014b20:	4604      	mov	r4, r0
 8014b22:	2104      	movs	r1, #4
 8014b24:	f007 f8b7 	bl	801bc96 <_ZdlPvj>
 8014b28:	4620      	mov	r0, r4
 8014b2a:	bd10      	pop	{r4, pc}

08014b2c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8014b2c:	b510      	push	{r4, lr}
 8014b2e:	4604      	mov	r4, r0
 8014b30:	2104      	movs	r1, #4
 8014b32:	f007 f8b0 	bl	801bc96 <_ZdlPvj>
 8014b36:	4620      	mov	r0, r4
 8014b38:	bd10      	pop	{r4, pc}

08014b3a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8014b3a:	b510      	push	{r4, lr}
 8014b3c:	4604      	mov	r4, r0
 8014b3e:	2104      	movs	r1, #4
 8014b40:	f007 f8a9 	bl	801bc96 <_ZdlPvj>
 8014b44:	4620      	mov	r0, r4
 8014b46:	bd10      	pop	{r4, pc}

08014b48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8014b48:	b510      	push	{r4, lr}
 8014b4a:	4604      	mov	r4, r0
 8014b4c:	2104      	movs	r1, #4
 8014b4e:	f007 f8a2 	bl	801bc96 <_ZdlPvj>
 8014b52:	4620      	mov	r0, r4
 8014b54:	bd10      	pop	{r4, pc}

08014b56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8014b56:	b510      	push	{r4, lr}
 8014b58:	4604      	mov	r4, r0
 8014b5a:	2104      	movs	r1, #4
 8014b5c:	f007 f89b 	bl	801bc96 <_ZdlPvj>
 8014b60:	4620      	mov	r0, r4
 8014b62:	bd10      	pop	{r4, pc}

08014b64 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8014b64:	b510      	push	{r4, lr}
 8014b66:	4604      	mov	r4, r0
 8014b68:	2104      	movs	r1, #4
 8014b6a:	f007 f894 	bl	801bc96 <_ZdlPvj>
 8014b6e:	4620      	mov	r0, r4
 8014b70:	bd10      	pop	{r4, pc}

08014b72 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8014b72:	b510      	push	{r4, lr}
 8014b74:	4604      	mov	r4, r0
 8014b76:	2104      	movs	r1, #4
 8014b78:	f007 f88d 	bl	801bc96 <_ZdlPvj>
 8014b7c:	4620      	mov	r0, r4
 8014b7e:	bd10      	pop	{r4, pc}

08014b80 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	b08f      	sub	sp, #60	; 0x3c
 8014b86:	461c      	mov	r4, r3
 8014b88:	460e      	mov	r6, r1
 8014b8a:	9206      	str	r2, [sp, #24]
 8014b8c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8014b90:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8014b92:	9202      	str	r2, [sp, #8]
 8014b94:	2a00      	cmp	r2, #0
 8014b96:	f000 8128 	beq.w	8014dea <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8014b9a:	6820      	ldr	r0, [r4, #0]
 8014b9c:	aa0a      	add	r2, sp, #40	; 0x28
 8014b9e:	6861      	ldr	r1, [r4, #4]
 8014ba0:	c203      	stmia	r2!, {r0, r1}
 8014ba2:	6818      	ldr	r0, [r3, #0]
 8014ba4:	aa0c      	add	r2, sp, #48	; 0x30
 8014ba6:	6859      	ldr	r1, [r3, #4]
 8014ba8:	c203      	stmia	r2!, {r0, r1}
 8014baa:	a80a      	add	r0, sp, #40	; 0x28
 8014bac:	f7fa ff66 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014bb0:	4621      	mov	r1, r4
 8014bb2:	a80c      	add	r0, sp, #48	; 0x30
 8014bb4:	f7fa ff8a 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014bb8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 8014bbc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8014bc0:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8014bc4:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8014bc8:	bfdb      	ittet	le
 8014bca:	b2bb      	uxthle	r3, r7
 8014bcc:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8014bd0:	2301      	movgt	r3, #1
 8014bd2:	fb92 f3f3 	sdivle	r3, r2, r3
 8014bd6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8014bda:	441d      	add	r5, r3
 8014bdc:	fb92 f1f3 	sdiv	r1, r2, r3
 8014be0:	fa1f fc81 	uxth.w	ip, r1
 8014be4:	3d01      	subs	r5, #1
 8014be6:	fb0c 2413 	mls	r4, ip, r3, r2
 8014bea:	4661      	mov	r1, ip
 8014bec:	fb14 f407 	smulbb	r4, r4, r7
 8014bf0:	4404      	add	r4, r0
 8014bf2:	fb95 f5f3 	sdiv	r5, r5, r3
 8014bf6:	b2a4      	uxth	r4, r4
 8014bf8:	b121      	cbz	r1, 8014c04 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8014bfa:	9b06      	ldr	r3, [sp, #24]
 8014bfc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014c00:	ba1b      	rev	r3, r3
 8014c02:	441e      	add	r6, r3
 8014c04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8014c08:	b2ad      	uxth	r5, r5
 8014c0a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8014c0e:	4418      	add	r0, r3
 8014c10:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8014c14:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 8014c18:	00ad      	lsls	r5, r5, #2
 8014c1a:	441a      	add	r2, r3
 8014c1c:	4b74      	ldr	r3, [pc, #464]	; (8014df0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8014c1e:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8014c22:	6818      	ldr	r0, [r3, #0]
 8014c24:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8014c28:	6803      	ldr	r3, [r0, #0]
 8014c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c2c:	4798      	blx	r3
 8014c2e:	4a71      	ldr	r2, [pc, #452]	; (8014df4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8014c30:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8014c34:	2c00      	cmp	r4, #0
 8014c36:	8813      	ldrh	r3, [r2, #0]
 8014c38:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8014c3c:	9209      	str	r2, [sp, #36]	; 0x24
 8014c3e:	fb03 c101 	mla	r1, r3, r1, ip
 8014c42:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014c46:	fb03 f307 	mul.w	r3, r3, r7
 8014c4a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014c4e:	9204      	str	r2, [sp, #16]
 8014c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014c54:	9a02      	ldr	r2, [sp, #8]
 8014c56:	4408      	add	r0, r1
 8014c58:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8014c5c:	4403      	add	r3, r0
 8014c5e:	b292      	uxth	r2, r2
 8014c60:	9307      	str	r3, [sp, #28]
 8014c62:	f105 0304 	add.w	r3, r5, #4
 8014c66:	bf0c      	ite	eq
 8014c68:	4645      	moveq	r5, r8
 8014c6a:	2500      	movne	r5, #0
 8014c6c:	9308      	str	r3, [sp, #32]
 8014c6e:	2300      	movs	r3, #0
 8014c70:	b2ad      	uxth	r5, r5
 8014c72:	9205      	str	r2, [sp, #20]
 8014c74:	9303      	str	r3, [sp, #12]
 8014c76:	9a07      	ldr	r2, [sp, #28]
 8014c78:	4282      	cmp	r2, r0
 8014c7a:	f240 80b1 	bls.w	8014de0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8014c7e:	b95b      	cbnz	r3, 8014c98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8014c80:	7832      	ldrb	r2, [r6, #0]
 8014c82:	0993      	lsrs	r3, r2, #6
 8014c84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014c88:	9203      	str	r2, [sp, #12]
 8014c8a:	1e5a      	subs	r2, r3, #1
 8014c8c:	2a02      	cmp	r2, #2
 8014c8e:	bf8d      	iteet	hi
 8014c90:	7873      	ldrbhi	r3, [r6, #1]
 8014c92:	3601      	addls	r6, #1
 8014c94:	b29b      	uxthls	r3, r3
 8014c96:	3602      	addhi	r6, #2
 8014c98:	b184      	cbz	r4, 8014cbc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8014c9a:	429c      	cmp	r4, r3
 8014c9c:	bf91      	iteee	ls
 8014c9e:	1b1c      	subls	r4, r3, r4
 8014ca0:	1ae4      	subhi	r4, r4, r3
 8014ca2:	4629      	movhi	r1, r5
 8014ca4:	f04f 0e00 	movhi.w	lr, #0
 8014ca8:	bf9b      	ittet	ls
 8014caa:	fa1f fe84 	uxthls.w	lr, r4
 8014cae:	2400      	movls	r4, #0
 8014cb0:	b2a4      	uxthhi	r4, r4
 8014cb2:	fa1f f188 	uxthls.w	r1, r8
 8014cb6:	4673      	mov	r3, lr
 8014cb8:	460d      	mov	r5, r1
 8014cba:	e7dc      	b.n	8014c76 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8014cbc:	2203      	movs	r2, #3
 8014cbe:	9908      	ldr	r1, [sp, #32]
 8014cc0:	42ab      	cmp	r3, r5
 8014cc2:	4617      	mov	r7, r2
 8014cc4:	9a03      	ldr	r2, [sp, #12]
 8014cc6:	bf24      	itt	cs
 8014cc8:	eba3 0e05 	subcs.w	lr, r3, r5
 8014ccc:	9501      	strcs	r5, [sp, #4]
 8014cce:	fb17 1702 	smlabb	r7, r7, r2, r1
 8014cd2:	9a06      	ldr	r2, [sp, #24]
 8014cd4:	bf34      	ite	cc
 8014cd6:	1ae9      	subcc	r1, r5, r3
 8014cd8:	fa1f fe8e 	uxthcs.w	lr, lr
 8014cdc:	4417      	add	r7, r2
 8014cde:	9a02      	ldr	r2, [sp, #8]
 8014ce0:	bf2f      	iteee	cs
 8014ce2:	4621      	movcs	r1, r4
 8014ce4:	b289      	uxthcc	r1, r1
 8014ce6:	9301      	strcc	r3, [sp, #4]
 8014ce8:	46a6      	movcc	lr, r4
 8014cea:	2aff      	cmp	r2, #255	; 0xff
 8014cec:	d11e      	bne.n	8014d2c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8014cee:	4681      	mov	r9, r0
 8014cf0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8014cf4:	f109 0903 	add.w	r9, r9, #3
 8014cf8:	f1bc 0f00 	cmp.w	ip, #0
 8014cfc:	d15f      	bne.n	8014dbe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8014cfe:	9a01      	ldr	r2, [sp, #4]
 8014d00:	42ab      	cmp	r3, r5
 8014d02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8014d06:	4410      	add	r0, r2
 8014d08:	d3d5      	bcc.n	8014cb6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8014d0a:	fa1f f188 	uxth.w	r1, r8
 8014d0e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8014d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d14:	1a64      	subs	r4, r4, r1
 8014d16:	881b      	ldrh	r3, [r3, #0]
 8014d18:	b2a4      	uxth	r4, r4
 8014d1a:	eba3 0308 	sub.w	r3, r3, r8
 8014d1e:	2c00      	cmp	r4, #0
 8014d20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014d24:	bf18      	it	ne
 8014d26:	2100      	movne	r1, #0
 8014d28:	4418      	add	r0, r3
 8014d2a:	e7c4      	b.n	8014cb6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8014d2c:	4684      	mov	ip, r0
 8014d2e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8014d32:	f10c 0c03 	add.w	ip, ip, #3
 8014d36:	f1ba 0f00 	cmp.w	sl, #0
 8014d3a:	d0e0      	beq.n	8014cfe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8014d3c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8014d40:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014d44:	9a05      	ldr	r2, [sp, #20]
 8014d46:	f897 9000 	ldrb.w	r9, [r7]
 8014d4a:	fa1f fa8a 	uxth.w	sl, sl
 8014d4e:	fb1b fb02 	smulbb	fp, fp, r2
 8014d52:	9a04      	ldr	r2, [sp, #16]
 8014d54:	fb09 b902 	mla	r9, r9, r2, fp
 8014d58:	9a05      	ldr	r2, [sp, #20]
 8014d5a:	fa1f f989 	uxth.w	r9, r9
 8014d5e:	f109 0b01 	add.w	fp, r9, #1
 8014d62:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014d66:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8014d6a:	fb1b fb02 	smulbb	fp, fp, r2
 8014d6e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d72:	9a04      	ldr	r2, [sp, #16]
 8014d74:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8014d78:	f897 9001 	ldrb.w	r9, [r7, #1]
 8014d7c:	fb09 b902 	mla	r9, r9, r2, fp
 8014d80:	9a05      	ldr	r2, [sp, #20]
 8014d82:	fa1f f989 	uxth.w	r9, r9
 8014d86:	f109 0b01 	add.w	fp, r9, #1
 8014d8a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014d8e:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8014d92:	fb1b fb02 	smulbb	fp, fp, r2
 8014d96:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014d9a:	9a04      	ldr	r2, [sp, #16]
 8014d9c:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8014da0:	f897 9002 	ldrb.w	r9, [r7, #2]
 8014da4:	fb09 b902 	mla	r9, r9, r2, fp
 8014da8:	fa1f f989 	uxth.w	r9, r9
 8014dac:	f109 0b01 	add.w	fp, r9, #1
 8014db0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014db4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014db8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8014dbc:	e7b9      	b.n	8014d32 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8014dbe:	f897 a000 	ldrb.w	sl, [r7]
 8014dc2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014dc6:	f809 ac03 	strb.w	sl, [r9, #-3]
 8014dca:	fa1f fc8c 	uxth.w	ip, ip
 8014dce:	f897 a001 	ldrb.w	sl, [r7, #1]
 8014dd2:	f809 ac02 	strb.w	sl, [r9, #-2]
 8014dd6:	f897 a002 	ldrb.w	sl, [r7, #2]
 8014dda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014dde:	e789      	b.n	8014cf4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8014de0:	4b03      	ldr	r3, [pc, #12]	; (8014df0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8014de2:	6818      	ldr	r0, [r3, #0]
 8014de4:	6803      	ldr	r3, [r0, #0]
 8014de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014de8:	4798      	blx	r3
 8014dea:	b00f      	add	sp, #60	; 0x3c
 8014dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df0:	2401a9b8 	.word	0x2401a9b8
 8014df4:	2401a9b2 	.word	0x2401a9b2

08014df8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	b09b      	sub	sp, #108	; 0x6c
 8014dfe:	461d      	mov	r5, r3
 8014e00:	4604      	mov	r4, r0
 8014e02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014e04:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8014e08:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8014e0c:	9208      	str	r2, [sp, #32]
 8014e0e:	2a00      	cmp	r2, #0
 8014e10:	f000 81f3 	beq.w	80151fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8014e14:	6828      	ldr	r0, [r5, #0]
 8014e16:	aa16      	add	r2, sp, #88	; 0x58
 8014e18:	6869      	ldr	r1, [r5, #4]
 8014e1a:	c203      	stmia	r2!, {r0, r1}
 8014e1c:	6818      	ldr	r0, [r3, #0]
 8014e1e:	aa18      	add	r2, sp, #96	; 0x60
 8014e20:	6859      	ldr	r1, [r3, #4]
 8014e22:	c203      	stmia	r2!, {r0, r1}
 8014e24:	a816      	add	r0, sp, #88	; 0x58
 8014e26:	f7fa fe29 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8014e2a:	4629      	mov	r1, r5
 8014e2c:	a818      	add	r0, sp, #96	; 0x60
 8014e2e:	f7fa fe4d 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8014e32:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8014e36:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 8014e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014e3e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 8014e42:	bfdb      	ittet	le
 8014e44:	b29a      	uxthle	r2, r3
 8014e46:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8014e4a:	f04f 0a01 	movgt.w	sl, #1
 8014e4e:	fb91 faf2 	sdivle	sl, r1, r2
 8014e52:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 8014e56:	4456      	add	r6, sl
 8014e58:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8014e5c:	3e01      	subs	r6, #1
 8014e5e:	fb92 f0fa 	sdiv	r0, r2, sl
 8014e62:	b280      	uxth	r0, r0
 8014e64:	fb00 281a 	mls	r8, r0, sl, r2
 8014e68:	900e      	str	r0, [sp, #56]	; 0x38
 8014e6a:	fb18 f803 	smulbb	r8, r8, r3
 8014e6e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8014e72:	4488      	add	r8, r1
 8014e74:	4419      	add	r1, r3
 8014e76:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 8014e7a:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 8014e7e:	fa1f f888 	uxth.w	r8, r8
 8014e82:	441a      	add	r2, r3
 8014e84:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8014e88:	9303      	str	r3, [sp, #12]
 8014e8a:	4b9c      	ldr	r3, [pc, #624]	; (80150fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8014e8c:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 8014e90:	6818      	ldr	r0, [r3, #0]
 8014e92:	6803      	ldr	r3, [r0, #0]
 8014e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e96:	4798      	blx	r3
 8014e98:	4b99      	ldr	r3, [pc, #612]	; (8015100 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8014e9a:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 8014e9e:	f1b8 0f00 	cmp.w	r8, #0
 8014ea2:	881a      	ldrh	r2, [r3, #0]
 8014ea4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 8014ea8:	fb02 f505 	mul.w	r5, r2, r5
 8014eac:	fb02 7101 	mla	r1, r2, r1, r7
 8014eb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014eb4:	9314      	str	r3, [sp, #80]	; 0x50
 8014eb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8014eba:	9b08      	ldr	r3, [sp, #32]
 8014ebc:	fb96 f6fa 	sdiv	r6, r6, sl
 8014ec0:	4408      	add	r0, r1
 8014ec2:	f106 0601 	add.w	r6, r6, #1
 8014ec6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8014eca:	f04f 0100 	mov.w	r1, #0
 8014ece:	eb00 0205 	add.w	r2, r0, r5
 8014ed2:	b2b6      	uxth	r6, r6
 8014ed4:	b29b      	uxth	r3, r3
 8014ed6:	910b      	str	r1, [sp, #44]	; 0x2c
 8014ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8014eda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8014edc:	930d      	str	r3, [sp, #52]	; 0x34
 8014ede:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014ee2:	4b88      	ldr	r3, [pc, #544]	; (8015104 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8014ee4:	f106 0204 	add.w	r2, r6, #4
 8014ee8:	eba3 0304 	sub.w	r3, r3, r4
 8014eec:	9205      	str	r2, [sp, #20]
 8014eee:	9a03      	ldr	r2, [sp, #12]
 8014ef0:	bf18      	it	ne
 8014ef2:	2200      	movne	r2, #0
 8014ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8014ef6:	b292      	uxth	r2, r2
 8014ef8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014efc:	fa11 f383 	uxtah	r3, r1, r3
 8014f00:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014f02:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014f06:	3304      	adds	r3, #4
 8014f08:	9306      	str	r3, [sp, #24]
 8014f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f0c:	4283      	cmp	r3, r0
 8014f0e:	f240 816f 	bls.w	80151f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8014f12:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8014f16:	f04f 0900 	mov.w	r9, #0
 8014f1a:	9d06      	ldr	r5, [sp, #24]
 8014f1c:	fbb8 f3f3 	udiv	r3, r8, r3
 8014f20:	ebaa 0303 	sub.w	r3, sl, r3
 8014f24:	782d      	ldrb	r5, [r5, #0]
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	950f      	str	r5, [sp, #60]	; 0x3c
 8014f2a:	3501      	adds	r5, #1
 8014f2c:	9312      	str	r3, [sp, #72]	; 0x48
 8014f2e:	9b06      	ldr	r3, [sp, #24]
 8014f30:	9504      	str	r5, [sp, #16]
 8014f32:	7859      	ldrb	r1, [r3, #1]
 8014f34:	789b      	ldrb	r3, [r3, #2]
 8014f36:	021b      	lsls	r3, r3, #8
 8014f38:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8014f3c:	9906      	ldr	r1, [sp, #24]
 8014f3e:	78c9      	ldrb	r1, [r1, #3]
 8014f40:	430b      	orrs	r3, r1
 8014f42:	9910      	ldr	r1, [sp, #64]	; 0x40
 8014f44:	4419      	add	r1, r3
 8014f46:	1c4d      	adds	r5, r1, #1
 8014f48:	7849      	ldrb	r1, [r1, #1]
 8014f4a:	9502      	str	r5, [sp, #8]
 8014f4c:	0209      	lsls	r1, r1, #8
 8014f4e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8014f50:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 8014f54:	5ceb      	ldrb	r3, [r5, r3]
 8014f56:	4319      	orrs	r1, r3
 8014f58:	b28b      	uxth	r3, r1
 8014f5a:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8014f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f60:	2300      	movs	r3, #0
 8014f62:	9307      	str	r3, [sp, #28]
 8014f64:	2301      	movs	r3, #1
 8014f66:	e9cd 3300 	strd	r3, r3, [sp]
 8014f6a:	469c      	mov	ip, r3
 8014f6c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014f70:	930c      	str	r3, [sp, #48]	; 0x30
 8014f72:	f1b8 0f00 	cmp.w	r8, #0
 8014f76:	f000 8082 	beq.w	801507e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8014f7a:	45c4      	cmp	ip, r8
 8014f7c:	d270      	bcs.n	8015060 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8014f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f80:	eba8 080c 	sub.w	r8, r8, ip
 8014f84:	4611      	mov	r1, r2
 8014f86:	4283      	cmp	r3, r0
 8014f88:	fa1f f888 	uxth.w	r8, r8
 8014f8c:	d802      	bhi.n	8014f94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8014f8e:	e074      	b.n	801507a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d15f      	bne.n	8015054 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8014f94:	9b02      	ldr	r3, [sp, #8]
 8014f96:	9a01      	ldr	r2, [sp, #4]
 8014f98:	785b      	ldrb	r3, [r3, #1]
 8014f9a:	f1c2 0207 	rsb	r2, r2, #7
 8014f9e:	9d01      	ldr	r5, [sp, #4]
 8014fa0:	4093      	lsls	r3, r2
 8014fa2:	005b      	lsls	r3, r3, #1
 8014fa4:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8014fa8:	9b02      	ldr	r3, [sp, #8]
 8014faa:	781b      	ldrb	r3, [r3, #0]
 8014fac:	412b      	asrs	r3, r5
 8014fae:	b2db      	uxtb	r3, r3
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	3201      	adds	r2, #1
 8014fb6:	b29e      	uxth	r6, r3
 8014fb8:	b2d2      	uxtb	r2, r2
 8014fba:	2a08      	cmp	r2, #8
 8014fbc:	9201      	str	r2, [sp, #4]
 8014fbe:	9a02      	ldr	r2, [sp, #8]
 8014fc0:	bf09      	itett	eq
 8014fc2:	3202      	addeq	r2, #2
 8014fc4:	3201      	addne	r2, #1
 8014fc6:	9202      	streq	r2, [sp, #8]
 8014fc8:	2200      	moveq	r2, #0
 8014fca:	bf14      	ite	ne
 8014fcc:	9202      	strne	r2, [sp, #8]
 8014fce:	9201      	streq	r2, [sp, #4]
 8014fd0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014fd2:	42b2      	cmp	r2, r6
 8014fd4:	d309      	bcc.n	8014fea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8014fd6:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8014fda:	2301      	movs	r3, #1
 8014fdc:	9a04      	ldr	r2, [sp, #16]
 8014fde:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8014fe2:	d30e      	bcc.n	8015002 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8014fe4:	9300      	str	r3, [sp, #0]
 8014fe6:	2500      	movs	r5, #0
 8014fe8:	e035      	b.n	8015056 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8014fea:	9b04      	ldr	r3, [sp, #16]
 8014fec:	429e      	cmp	r6, r3
 8014fee:	d318      	bcc.n	8015022 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8014ff0:	9b00      	ldr	r3, [sp, #0]
 8014ff2:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 8014ff6:	18e3      	adds	r3, r4, r3
 8014ff8:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 8014ffc:	9b00      	ldr	r3, [sp, #0]
 8014ffe:	3301      	adds	r3, #1
 8015000:	b29b      	uxth	r3, r3
 8015002:	9a04      	ldr	r2, [sp, #16]
 8015004:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 8015008:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801500c:	9f00      	ldr	r7, [sp, #0]
 801500e:	7115      	strb	r5, [r2, #4]
 8015010:	3701      	adds	r7, #1
 8015012:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015014:	7157      	strb	r7, [r2, #5]
 8015016:	80d5      	strh	r5, [r2, #6]
 8015018:	9a04      	ldr	r2, [sp, #16]
 801501a:	3201      	adds	r2, #1
 801501c:	b292      	uxth	r2, r2
 801501e:	9204      	str	r2, [sp, #16]
 8015020:	e7e0      	b.n	8014fe4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8015022:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015026:	4632      	mov	r2, r6
 8015028:	795b      	ldrb	r3, [r3, #5]
 801502a:	f603 0504 	addw	r5, r3, #2052	; 0x804
 801502e:	4425      	add	r5, r4
 8015030:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8015032:	eb07 0c05 	add.w	ip, r7, r5
 8015036:	f1bc 0f00 	cmp.w	ip, #0
 801503a:	dd07      	ble.n	801504c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801503c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015040:	f892 c004 	ldrb.w	ip, [r2, #4]
 8015044:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8015048:	88d2      	ldrh	r2, [r2, #6]
 801504a:	e7f1      	b.n	8015030 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801504c:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8015050:	b29b      	uxth	r3, r3
 8015052:	e7c3      	b.n	8014fdc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8015054:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015056:	460a      	mov	r2, r1
 8015058:	960a      	str	r6, [sp, #40]	; 0x28
 801505a:	46a9      	mov	r9, r5
 801505c:	469c      	mov	ip, r3
 801505e:	e788      	b.n	8014f72 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8015060:	ebac 0308 	sub.w	r3, ip, r8
 8015064:	eb09 0508 	add.w	r5, r9, r8
 8015068:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801506c:	b29b      	uxth	r3, r3
 801506e:	b2ad      	uxth	r5, r5
 8015070:	f04f 0800 	mov.w	r8, #0
 8015074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015076:	4282      	cmp	r2, r0
 8015078:	d88a      	bhi.n	8014f90 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801507a:	460a      	mov	r2, r1
 801507c:	e745      	b.n	8014f0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801507e:	4594      	cmp	ip, r2
 8015080:	9d08      	ldr	r5, [sp, #32]
 8015082:	4686      	mov	lr, r0
 8015084:	bf27      	ittee	cs
 8015086:	ebac 0302 	subcs.w	r3, ip, r2
 801508a:	4616      	movcs	r6, r2
 801508c:	eba2 010c 	subcc.w	r1, r2, ip
 8015090:	4666      	movcc	r6, ip
 8015092:	bf27      	ittee	cs
 8015094:	b29b      	uxthcs	r3, r3
 8015096:	4641      	movcs	r1, r8
 8015098:	b289      	uxthcc	r1, r1
 801509a:	4643      	movcc	r3, r8
 801509c:	2dff      	cmp	r5, #255	; 0xff
 801509e:	eb09 0506 	add.w	r5, r9, r6
 80150a2:	b2ad      	uxth	r5, r5
 80150a4:	d130      	bne.n	8015108 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80150a6:	45a9      	cmp	r9, r5
 80150a8:	f10e 0e03 	add.w	lr, lr, #3
 80150ac:	d17a      	bne.n	80151a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 80150ae:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80150b2:	4594      	cmp	ip, r2
 80150b4:	4430      	add	r0, r6
 80150b6:	d3db      	bcc.n	8015070 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 80150b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80150ba:	9903      	ldr	r1, [sp, #12]
 80150bc:	8812      	ldrh	r2, [r2, #0]
 80150be:	1a52      	subs	r2, r2, r1
 80150c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80150c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80150c6:	4410      	add	r0, r2
 80150c8:	9a07      	ldr	r2, [sp, #28]
 80150ca:	3201      	adds	r2, #1
 80150cc:	428a      	cmp	r2, r1
 80150ce:	9207      	str	r2, [sp, #28]
 80150d0:	f040 8081 	bne.w	80151d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 80150d4:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 80150d8:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 80150dc:	9b03      	ldr	r3, [sp, #12]
 80150de:	eba8 080c 	sub.w	r8, r8, ip
 80150e2:	fa1f f888 	uxth.w	r8, r8
 80150e6:	f1b8 0f00 	cmp.w	r8, #0
 80150ea:	bf08      	it	eq
 80150ec:	461a      	moveq	r2, r3
 80150ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150f0:	bf18      	it	ne
 80150f2:	2200      	movne	r2, #0
 80150f4:	3301      	adds	r3, #1
 80150f6:	b292      	uxth	r2, r2
 80150f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80150fa:	e6fd      	b.n	8014ef8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 80150fc:	2401a9b8 	.word	0x2401a9b8
 8015100:	2401a9b2 	.word	0x2401a9b2
 8015104:	fffff7fb 	.word	0xfffff7fb
 8015108:	45a9      	cmp	r9, r5
 801510a:	f10e 0e03 	add.w	lr, lr, #3
 801510e:	d0ce      	beq.n	80150ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8015110:	f109 0701 	add.w	r7, r9, #1
 8015114:	44a1      	add	r9, r4
 8015116:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801511a:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801511e:	9713      	str	r7, [sp, #76]	; 0x4c
 8015120:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015124:	9f05      	ldr	r7, [sp, #20]
 8015126:	eb07 0908 	add.w	r9, r7, r8
 801512a:	f817 8008 	ldrb.w	r8, [r7, r8]
 801512e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015130:	fb1b fb07 	smulbb	fp, fp, r7
 8015134:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015136:	fb08 b807 	mla	r8, r8, r7, fp
 801513a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801513c:	fa1f f888 	uxth.w	r8, r8
 8015140:	f108 0b01 	add.w	fp, r8, #1
 8015144:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015148:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801514c:	fb1b fb07 	smulbb	fp, fp, r7
 8015150:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015154:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015156:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801515a:	f899 8001 	ldrb.w	r8, [r9, #1]
 801515e:	fb08 b807 	mla	r8, r8, r7, fp
 8015162:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015164:	fa1f f888 	uxth.w	r8, r8
 8015168:	f108 0b01 	add.w	fp, r8, #1
 801516c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015170:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015174:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8015178:	f899 8002 	ldrb.w	r8, [r9, #2]
 801517c:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8015180:	fb19 f907 	smulbb	r9, r9, r7
 8015184:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8015186:	fb08 9807 	mla	r8, r8, r7, r9
 801518a:	fa1f f888 	uxth.w	r8, r8
 801518e:	f108 0901 	add.w	r9, r8, #1
 8015192:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8015196:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 801519a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801519e:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80151a2:	e7b1      	b.n	8015108 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80151a4:	f109 0b01 	add.w	fp, r9, #1
 80151a8:	44a1      	add	r9, r4
 80151aa:	9f05      	ldr	r7, [sp, #20]
 80151ac:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 80151b0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80151b4:	eb07 0908 	add.w	r9, r7, r8
 80151b8:	f817 8008 	ldrb.w	r8, [r7, r8]
 80151bc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80151c0:	f899 8001 	ldrb.w	r8, [r9, #1]
 80151c4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80151c8:	f899 8002 	ldrb.w	r8, [r9, #2]
 80151cc:	fa1f f98b 	uxth.w	r9, fp
 80151d0:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80151d4:	e767      	b.n	80150a6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 80151d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80151da:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80151de:	eba8 0801 	sub.w	r8, r8, r1
 80151e2:	fa1f f888 	uxth.w	r8, r8
 80151e6:	f1b8 0f00 	cmp.w	r8, #0
 80151ea:	bf18      	it	ne
 80151ec:	2100      	movne	r1, #0
 80151ee:	e741      	b.n	8015074 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 80151f0:	4b03      	ldr	r3, [pc, #12]	; (8015200 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 80151f2:	6818      	ldr	r0, [r3, #0]
 80151f4:	6803      	ldr	r3, [r0, #0]
 80151f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151f8:	4798      	blx	r3
 80151fa:	b01b      	add	sp, #108	; 0x6c
 80151fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015200:	2401a9b8 	.word	0x2401a9b8

08015204 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8015204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015208:	b09d      	sub	sp, #116	; 0x74
 801520a:	461d      	mov	r5, r3
 801520c:	4604      	mov	r4, r0
 801520e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8015210:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8015214:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 8015218:	920c      	str	r2, [sp, #48]	; 0x30
 801521a:	2a00      	cmp	r2, #0
 801521c:	f000 81de 	beq.w	80155dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8015220:	6828      	ldr	r0, [r5, #0]
 8015222:	aa18      	add	r2, sp, #96	; 0x60
 8015224:	6869      	ldr	r1, [r5, #4]
 8015226:	c203      	stmia	r2!, {r0, r1}
 8015228:	6818      	ldr	r0, [r3, #0]
 801522a:	aa1a      	add	r2, sp, #104	; 0x68
 801522c:	6859      	ldr	r1, [r3, #4]
 801522e:	c203      	stmia	r2!, {r0, r1}
 8015230:	a818      	add	r0, sp, #96	; 0x60
 8015232:	f7fa fc23 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015236:	4629      	mov	r1, r5
 8015238:	a81a      	add	r0, sp, #104	; 0x68
 801523a:	f7fa fc47 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801523e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8015242:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 8015246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801524a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 801524e:	bfdb      	ittet	le
 8015250:	b29a      	uxthle	r2, r3
 8015252:	f44f 6180 	movle.w	r1, #1024	; 0x400
 8015256:	2201      	movgt	r2, #1
 8015258:	fb91 f2f2 	sdivle	r2, r1, r2
 801525c:	9201      	str	r2, [sp, #4]
 801525e:	9801      	ldr	r0, [sp, #4]
 8015260:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 8015264:	9901      	ldr	r1, [sp, #4]
 8015266:	fb92 f0f0 	sdiv	r0, r2, r0
 801526a:	b280      	uxth	r0, r0
 801526c:	440f      	add	r7, r1
 801526e:	900d      	str	r0, [sp, #52]	; 0x34
 8015270:	3f01      	subs	r7, #1
 8015272:	9801      	ldr	r0, [sp, #4]
 8015274:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015276:	fb05 2510 	mls	r5, r5, r0, r2
 801527a:	fb97 f7f1 	sdiv	r7, r7, r1
 801527e:	fb15 f503 	smulbb	r5, r5, r3
 8015282:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8015286:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 801528a:	3701      	adds	r7, #1
 801528c:	440d      	add	r5, r1
 801528e:	4419      	add	r1, r3
 8015290:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8015294:	b2bf      	uxth	r7, r7
 8015296:	441a      	add	r2, r3
 8015298:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 801529c:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 80152a0:	00bf      	lsls	r7, r7, #2
 80152a2:	9304      	str	r3, [sp, #16]
 80152a4:	b2ad      	uxth	r5, r5
 80152a6:	4bb0      	ldr	r3, [pc, #704]	; (8015568 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80152a8:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 80152ac:	6818      	ldr	r0, [r3, #0]
 80152ae:	6803      	ldr	r3, [r0, #0]
 80152b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152b2:	4798      	blx	r3
 80152b4:	4bad      	ldr	r3, [pc, #692]	; (801556c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 80152b6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 80152ba:	2d00      	cmp	r5, #0
 80152bc:	881a      	ldrh	r2, [r3, #0]
 80152be:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 80152c2:	fb02 f606 	mul.w	r6, r2, r6
 80152c6:	fb02 c101 	mla	r1, r2, r1, ip
 80152ca:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80152ce:	9316      	str	r3, [sp, #88]	; 0x58
 80152d0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80152d4:	4ba6      	ldr	r3, [pc, #664]	; (8015570 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80152d6:	eb00 0801 	add.w	r8, r0, r1
 80152da:	bf18      	it	ne
 80152dc:	2100      	movne	r1, #0
 80152de:	eba3 0304 	sub.w	r3, r3, r4
 80152e2:	eb08 0206 	add.w	r2, r8, r6
 80152e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80152e8:	9208      	str	r2, [sp, #32]
 80152ea:	f107 0204 	add.w	r2, r7, #4
 80152ee:	9211      	str	r2, [sp, #68]	; 0x44
 80152f0:	9a04      	ldr	r2, [sp, #16]
 80152f2:	bf08      	it	eq
 80152f4:	4611      	moveq	r1, r2
 80152f6:	2200      	movs	r2, #0
 80152f8:	b289      	uxth	r1, r1
 80152fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80152fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80152fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015300:	fa12 f383 	uxtah	r3, r2, r3
 8015304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015306:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801530a:	3304      	adds	r3, #4
 801530c:	9306      	str	r3, [sp, #24]
 801530e:	9b08      	ldr	r3, [sp, #32]
 8015310:	4543      	cmp	r3, r8
 8015312:	f240 815e 	bls.w	80155d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8015316:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 801531a:	f04f 0b01 	mov.w	fp, #1
 801531e:	9a01      	ldr	r2, [sp, #4]
 8015320:	9806      	ldr	r0, [sp, #24]
 8015322:	465e      	mov	r6, fp
 8015324:	f8cd b008 	str.w	fp, [sp, #8]
 8015328:	7800      	ldrb	r0, [r0, #0]
 801532a:	fbb5 f3f3 	udiv	r3, r5, r3
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	900e      	str	r0, [sp, #56]	; 0x38
 8015332:	3001      	adds	r0, #1
 8015334:	b29b      	uxth	r3, r3
 8015336:	9005      	str	r0, [sp, #20]
 8015338:	9312      	str	r3, [sp, #72]	; 0x48
 801533a:	9b06      	ldr	r3, [sp, #24]
 801533c:	785a      	ldrb	r2, [r3, #1]
 801533e:	789b      	ldrb	r3, [r3, #2]
 8015340:	021b      	lsls	r3, r3, #8
 8015342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015346:	9a06      	ldr	r2, [sp, #24]
 8015348:	78d2      	ldrb	r2, [r2, #3]
 801534a:	4313      	orrs	r3, r2
 801534c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801534e:	441a      	add	r2, r3
 8015350:	1c50      	adds	r0, r2, #1
 8015352:	7852      	ldrb	r2, [r2, #1]
 8015354:	9003      	str	r0, [sp, #12]
 8015356:	0212      	lsls	r2, r2, #8
 8015358:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801535a:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 801535e:	5cc3      	ldrb	r3, [r0, r3]
 8015360:	431a      	orrs	r2, r3
 8015362:	b293      	uxth	r3, r2
 8015364:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8015368:	930a      	str	r3, [sp, #40]	; 0x28
 801536a:	2300      	movs	r3, #0
 801536c:	461a      	mov	r2, r3
 801536e:	9307      	str	r3, [sp, #28]
 8015370:	2d00      	cmp	r5, #0
 8015372:	d07c      	beq.n	801546e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8015374:	42ae      	cmp	r6, r5
 8015376:	d26c      	bcs.n	8015452 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8015378:	9b08      	ldr	r3, [sp, #32]
 801537a:	1bad      	subs	r5, r5, r6
 801537c:	4608      	mov	r0, r1
 801537e:	4543      	cmp	r3, r8
 8015380:	b2ad      	uxth	r5, r5
 8015382:	d802      	bhi.n	801538a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8015384:	e071      	b.n	801546a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8015386:	2b00      	cmp	r3, #0
 8015388:	d15d      	bne.n	8015446 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801538a:	9b03      	ldr	r3, [sp, #12]
 801538c:	9a02      	ldr	r2, [sp, #8]
 801538e:	785b      	ldrb	r3, [r3, #1]
 8015390:	f1c2 0207 	rsb	r2, r2, #7
 8015394:	9902      	ldr	r1, [sp, #8]
 8015396:	4093      	lsls	r3, r2
 8015398:	005b      	lsls	r3, r3, #1
 801539a:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 801539e:	9b03      	ldr	r3, [sp, #12]
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	410b      	asrs	r3, r1
 80153a4:	3101      	adds	r1, #1
 80153a6:	b2c9      	uxtb	r1, r1
 80153a8:	b2db      	uxtb	r3, r3
 80153aa:	2908      	cmp	r1, #8
 80153ac:	9102      	str	r1, [sp, #8]
 80153ae:	9903      	ldr	r1, [sp, #12]
 80153b0:	ea43 0302 	orr.w	r3, r3, r2
 80153b4:	bf0c      	ite	eq
 80153b6:	3102      	addeq	r1, #2
 80153b8:	3101      	addne	r1, #1
 80153ba:	b29a      	uxth	r2, r3
 80153bc:	bf05      	ittet	eq
 80153be:	9103      	streq	r1, [sp, #12]
 80153c0:	2100      	moveq	r1, #0
 80153c2:	9103      	strne	r1, [sp, #12]
 80153c4:	9102      	streq	r1, [sp, #8]
 80153c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80153c8:	4291      	cmp	r1, r2
 80153ca:	d30a      	bcc.n	80153e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80153cc:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 80153d0:	2301      	movs	r3, #1
 80153d2:	9905      	ldr	r1, [sp, #20]
 80153d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80153d8:	d30f      	bcc.n	80153fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80153da:	469b      	mov	fp, r3
 80153dc:	f04f 0c00 	mov.w	ip, #0
 80153e0:	e032      	b.n	8015448 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80153e2:	9b05      	ldr	r3, [sp, #20]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d318      	bcc.n	801541a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 80153e8:	eb04 030b 	add.w	r3, r4, fp
 80153ec:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 80153f0:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 80153f4:	f10b 0301 	add.w	r3, fp, #1
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	9905      	ldr	r1, [sp, #20]
 80153fc:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8015400:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8015404:	710e      	strb	r6, [r1, #4]
 8015406:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015408:	80ce      	strh	r6, [r1, #6]
 801540a:	f10b 0601 	add.w	r6, fp, #1
 801540e:	714e      	strb	r6, [r1, #5]
 8015410:	9905      	ldr	r1, [sp, #20]
 8015412:	3101      	adds	r1, #1
 8015414:	b289      	uxth	r1, r1
 8015416:	9105      	str	r1, [sp, #20]
 8015418:	e7df      	b.n	80153da <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801541a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801541e:	4611      	mov	r1, r2
 8015420:	795b      	ldrb	r3, [r3, #5]
 8015422:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8015426:	4426      	add	r6, r4
 8015428:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801542a:	4437      	add	r7, r6
 801542c:	2f00      	cmp	r7, #0
 801542e:	dd06      	ble.n	801543e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8015430:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8015434:	790f      	ldrb	r7, [r1, #4]
 8015436:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801543a:	88c9      	ldrh	r1, [r1, #6]
 801543c:	e7f4      	b.n	8015428 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801543e:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8015442:	b29b      	uxth	r3, r3
 8015444:	e7c5      	b.n	80153d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8015446:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015448:	920a      	str	r2, [sp, #40]	; 0x28
 801544a:	4601      	mov	r1, r0
 801544c:	4662      	mov	r2, ip
 801544e:	461e      	mov	r6, r3
 8015450:	e78e      	b.n	8015370 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8015452:	1b73      	subs	r3, r6, r5
 8015454:	eb02 0c05 	add.w	ip, r2, r5
 8015458:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801545c:	b29b      	uxth	r3, r3
 801545e:	fa1f fc8c 	uxth.w	ip, ip
 8015462:	2500      	movs	r5, #0
 8015464:	9a08      	ldr	r2, [sp, #32]
 8015466:	4542      	cmp	r2, r8
 8015468:	d88d      	bhi.n	8015386 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801546a:	4601      	mov	r1, r0
 801546c:	e74f      	b.n	801530e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801546e:	428e      	cmp	r6, r1
 8015470:	bf2b      	itete	cs
 8015472:	468e      	movcs	lr, r1
 8015474:	46b6      	movcc	lr, r6
 8015476:	1a73      	subcs	r3, r6, r1
 8015478:	1b88      	subcc	r0, r1, r6
 801547a:	eb02 0c0e 	add.w	ip, r2, lr
 801547e:	bf2b      	itete	cs
 8015480:	4628      	movcs	r0, r5
 8015482:	462b      	movcc	r3, r5
 8015484:	b29b      	uxthcs	r3, r3
 8015486:	b280      	uxthcc	r0, r0
 8015488:	f108 0503 	add.w	r5, r8, #3
 801548c:	fa1f fc8c 	uxth.w	ip, ip
 8015490:	4562      	cmp	r2, ip
 8015492:	d06f      	beq.n	8015574 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8015494:	1c57      	adds	r7, r2, #1
 8015496:	4422      	add	r2, r4
 8015498:	b2bf      	uxth	r7, r7
 801549a:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 801549e:	9713      	str	r7, [sp, #76]	; 0x4c
 80154a0:	2704      	movs	r7, #4
 80154a2:	46b9      	mov	r9, r7
 80154a4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80154a6:	fb19 7202 	smlabb	r2, r9, r2, r7
 80154aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80154ac:	58bf      	ldr	r7, [r7, r2]
 80154ae:	0e3a      	lsrs	r2, r7, #24
 80154b0:	9209      	str	r2, [sp, #36]	; 0x24
 80154b2:	d016      	beq.n	80154e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80154b4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80154b8:	fa5f fa87 	uxtb.w	sl, r7
 80154bc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80154c0:	fa5f f289 	uxtb.w	r2, r9
 80154c4:	9214      	str	r2, [sp, #80]	; 0x50
 80154c6:	b2fa      	uxtb	r2, r7
 80154c8:	9215      	str	r2, [sp, #84]	; 0x54
 80154ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154cc:	2aff      	cmp	r2, #255	; 0xff
 80154ce:	d10b      	bne.n	80154e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80154d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154d2:	2aff      	cmp	r2, #255	; 0xff
 80154d4:	d108      	bne.n	80154e8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80154d6:	f805 ac03 	strb.w	sl, [r5, #-3]
 80154da:	f805 9c02 	strb.w	r9, [r5, #-2]
 80154de:	f805 7c01 	strb.w	r7, [r5, #-1]
 80154e2:	3503      	adds	r5, #3
 80154e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80154e6:	e7d3      	b.n	8015490 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 80154e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80154ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154ec:	437a      	muls	r2, r7
 80154ee:	1c57      	adds	r7, r2, #1
 80154f0:	eb07 2222 	add.w	r2, r7, r2, asr #8
 80154f4:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 80154f8:	1212      	asrs	r2, r2, #8
 80154fa:	fa1f f982 	uxth.w	r9, r2
 80154fe:	43d2      	mvns	r2, r2
 8015500:	fb1a fa09 	smulbb	sl, sl, r9
 8015504:	b2d2      	uxtb	r2, r2
 8015506:	fb07 a702 	mla	r7, r7, r2, sl
 801550a:	9209      	str	r2, [sp, #36]	; 0x24
 801550c:	b2bf      	uxth	r7, r7
 801550e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015510:	f107 0a01 	add.w	sl, r7, #1
 8015514:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015518:	fb12 fa09 	smulbb	sl, r2, r9
 801551c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801551e:	123f      	asrs	r7, r7, #8
 8015520:	f805 7c03 	strb.w	r7, [r5, #-3]
 8015524:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8015528:	fb07 aa02 	mla	sl, r7, r2, sl
 801552c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801552e:	fb12 f909 	smulbb	r9, r2, r9
 8015532:	fa1f fa8a 	uxth.w	sl, sl
 8015536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015538:	f10a 0701 	add.w	r7, sl, #1
 801553c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015540:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8015544:	fb07 9902 	mla	r9, r7, r2, r9
 8015548:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801554c:	fa1f f989 	uxth.w	r9, r9
 8015550:	f805 ac02 	strb.w	sl, [r5, #-2]
 8015554:	f109 0201 	add.w	r2, r9, #1
 8015558:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801555c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015560:	f805 9c01 	strb.w	r9, [r5, #-1]
 8015564:	e7bd      	b.n	80154e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8015566:	bf00      	nop
 8015568:	2401a9b8 	.word	0x2401a9b8
 801556c:	2401a9b2 	.word	0x2401a9b2
 8015570:	fffff7fb 	.word	0xfffff7fb
 8015574:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8015578:	428e      	cmp	r6, r1
 801557a:	44f0      	add	r8, lr
 801557c:	f4ff af71 	bcc.w	8015462 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8015580:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015582:	9904      	ldr	r1, [sp, #16]
 8015584:	8812      	ldrh	r2, [r2, #0]
 8015586:	1a52      	subs	r2, r2, r1
 8015588:	9912      	ldr	r1, [sp, #72]	; 0x48
 801558a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801558e:	4490      	add	r8, r2
 8015590:	9a07      	ldr	r2, [sp, #28]
 8015592:	3201      	adds	r2, #1
 8015594:	428a      	cmp	r2, r1
 8015596:	9207      	str	r2, [sp, #28]
 8015598:	d111      	bne.n	80155be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801559a:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 801559e:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 80155a2:	9b04      	ldr	r3, [sp, #16]
 80155a4:	eba5 050c 	sub.w	r5, r5, ip
 80155a8:	b2ad      	uxth	r5, r5
 80155aa:	2d00      	cmp	r5, #0
 80155ac:	bf08      	it	eq
 80155ae:	4619      	moveq	r1, r3
 80155b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155b2:	bf18      	it	ne
 80155b4:	2100      	movne	r1, #0
 80155b6:	3301      	adds	r3, #1
 80155b8:	b289      	uxth	r1, r1
 80155ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80155bc:	e69e      	b.n	80152fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80155be:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80155c2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80155c6:	1a2d      	subs	r5, r5, r0
 80155c8:	b2ad      	uxth	r5, r5
 80155ca:	2d00      	cmp	r5, #0
 80155cc:	bf18      	it	ne
 80155ce:	2000      	movne	r0, #0
 80155d0:	e748      	b.n	8015464 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80155d2:	4b04      	ldr	r3, [pc, #16]	; (80155e4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80155d4:	6818      	ldr	r0, [r3, #0]
 80155d6:	6803      	ldr	r3, [r0, #0]
 80155d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155da:	4798      	blx	r3
 80155dc:	b01d      	add	sp, #116	; 0x74
 80155de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155e2:	bf00      	nop
 80155e4:	2401a9b8 	.word	0x2401a9b8

080155e8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80155e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ec:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80155f0:	9c06      	ldr	r4, [sp, #24]
 80155f2:	2800      	cmp	r0, #0
 80155f4:	d06e      	beq.n	80156d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80155f6:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80155fa:	2d00      	cmp	r5, #0
 80155fc:	dd6a      	ble.n	80156d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80155fe:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8015602:	f1bc 0f00 	cmp.w	ip, #0
 8015606:	dd65      	ble.n	80156d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015608:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801560c:	28ff      	cmp	r0, #255	; 0xff
 801560e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015612:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8015616:	fb02 3306 	mla	r3, r2, r6, r3
 801561a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801561e:	b2e4      	uxtb	r4, r4
 8015620:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015624:	4419      	add	r1, r3
 8015626:	fb02 f30c 	mul.w	r3, r2, ip
 801562a:	eba2 0205 	sub.w	r2, r2, r5
 801562e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015636:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801563a:	440b      	add	r3, r1
 801563c:	d03e      	beq.n	80156bc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801563e:	fa1f fc80 	uxth.w	ip, r0
 8015642:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8015646:	fb06 f60c 	mul.w	r6, r6, ip
 801564a:	b280      	uxth	r0, r0
 801564c:	fb07 f70c 	mul.w	r7, r7, ip
 8015650:	fb04 f40c 	mul.w	r4, r4, ip
 8015654:	4299      	cmp	r1, r3
 8015656:	d23d      	bcs.n	80156d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8015658:	eb01 0c05 	add.w	ip, r1, r5
 801565c:	458c      	cmp	ip, r1
 801565e:	f101 0e03 	add.w	lr, r1, #3
 8015662:	d928      	bls.n	80156b6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8015664:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8015668:	fb11 f100 	smulbb	r1, r1, r0
 801566c:	4421      	add	r1, r4
 801566e:	b289      	uxth	r1, r1
 8015670:	f101 0801 	add.w	r8, r1, #1
 8015674:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015678:	1209      	asrs	r1, r1, #8
 801567a:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801567e:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8015682:	fb11 f100 	smulbb	r1, r1, r0
 8015686:	4439      	add	r1, r7
 8015688:	b289      	uxth	r1, r1
 801568a:	f101 0801 	add.w	r8, r1, #1
 801568e:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8015692:	1209      	asrs	r1, r1, #8
 8015694:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8015698:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801569c:	fb11 f100 	smulbb	r1, r1, r0
 80156a0:	4431      	add	r1, r6
 80156a2:	b289      	uxth	r1, r1
 80156a4:	f101 0801 	add.w	r8, r1, #1
 80156a8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80156ac:	1209      	asrs	r1, r1, #8
 80156ae:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80156b2:	4671      	mov	r1, lr
 80156b4:	e7d2      	b.n	801565c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80156b6:	4411      	add	r1, r2
 80156b8:	e7cc      	b.n	8015654 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80156ba:	4411      	add	r1, r2
 80156bc:	4299      	cmp	r1, r3
 80156be:	d209      	bcs.n	80156d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80156c0:	1948      	adds	r0, r1, r5
 80156c2:	4281      	cmp	r1, r0
 80156c4:	d2f9      	bcs.n	80156ba <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80156c6:	700c      	strb	r4, [r1, #0]
 80156c8:	3103      	adds	r1, #3
 80156ca:	f801 7c02 	strb.w	r7, [r1, #-2]
 80156ce:	f801 6c01 	strb.w	r6, [r1, #-1]
 80156d2:	e7f6      	b.n	80156c2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80156d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80156d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156dc:	b093      	sub	sp, #76	; 0x4c
 80156de:	4699      	mov	r9, r3
 80156e0:	4617      	mov	r7, r2
 80156e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156e6:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 80156ea:	4604      	mov	r4, r0
 80156ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80156f0:	a80c      	add	r0, sp, #48	; 0x30
 80156f2:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 80156f6:	460d      	mov	r5, r1
 80156f8:	4649      	mov	r1, r9
 80156fa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80156fe:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015702:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8015706:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 801570a:	f7f8 f9d9 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 801570e:	4639      	mov	r1, r7
 8015710:	a80c      	add	r0, sp, #48	; 0x30
 8015712:	f7f8 f9d5 	bl	800dac0 <_ZN8touchgfx4RectaNERKS0_>
 8015716:	4b78      	ldr	r3, [pc, #480]	; (80158f8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8015718:	8818      	ldrh	r0, [r3, #0]
 801571a:	4b78      	ldr	r3, [pc, #480]	; (80158fc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801571c:	b202      	sxth	r2, r0
 801571e:	8819      	ldrh	r1, [r3, #0]
 8015720:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8015724:	b20f      	sxth	r7, r1
 8015726:	2b00      	cmp	r3, #0
 8015728:	da07      	bge.n	801573a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801572a:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 801572e:	4463      	add	r3, ip
 8015730:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8015734:	2300      	movs	r3, #0
 8015736:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801573a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801573e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8015742:	1ad2      	subs	r2, r2, r3
 8015744:	4594      	cmp	ip, r2
 8015746:	bfc4      	itt	gt
 8015748:	1ac2      	subgt	r2, r0, r3
 801574a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 801574e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8015752:	2a00      	cmp	r2, #0
 8015754:	da07      	bge.n	8015766 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8015756:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 801575a:	4462      	add	r2, ip
 801575c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8015760:	2200      	movs	r2, #0
 8015762:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015766:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801576a:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 801576e:	1abf      	subs	r7, r7, r2
 8015770:	45bc      	cmp	ip, r7
 8015772:	f8df c190 	ldr.w	ip, [pc, #400]	; 8015904 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8015776:	bfc8      	it	gt
 8015778:	1a8f      	subgt	r7, r1, r2
 801577a:	f89c c000 	ldrb.w	ip, [ip]
 801577e:	bfc8      	it	gt
 8015780:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8015784:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8015788:	f1bc 0f00 	cmp.w	ip, #0
 801578c:	d176      	bne.n	801587c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801578e:	4287      	cmp	r7, r0
 8015790:	bf14      	ite	ne
 8015792:	2100      	movne	r1, #0
 8015794:	2101      	moveq	r1, #1
 8015796:	2f00      	cmp	r7, #0
 8015798:	9107      	str	r1, [sp, #28]
 801579a:	dd73      	ble.n	8015884 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801579c:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 80157a0:	2900      	cmp	r1, #0
 80157a2:	9104      	str	r1, [sp, #16]
 80157a4:	dd6e      	ble.n	8015884 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80157a6:	f8b9 1000 	ldrh.w	r1, [r9]
 80157aa:	a80e      	add	r0, sp, #56	; 0x38
 80157ac:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 80157b0:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80157b4:	1a5b      	subs	r3, r3, r1
 80157b6:	a910      	add	r1, sp, #64	; 0x40
 80157b8:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 80157bc:	b21b      	sxth	r3, r3
 80157be:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 80157c2:	f8df a144 	ldr.w	sl, [pc, #324]	; 8015908 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80157c6:	9305      	str	r3, [sp, #20]
 80157c8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80157cc:	1ad2      	subs	r2, r2, r3
 80157ce:	b213      	sxth	r3, r2
 80157d0:	9306      	str	r3, [sp, #24]
 80157d2:	9b05      	ldr	r3, [sp, #20]
 80157d4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80157d8:	9b06      	ldr	r3, [sp, #24]
 80157da:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80157de:	9b04      	ldr	r3, [sp, #16]
 80157e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80157e4:	2300      	movs	r3, #0
 80157e6:	9310      	str	r3, [sp, #64]	; 0x40
 80157e8:	f7fa f970 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80157ec:	4640      	mov	r0, r8
 80157ee:	f7fa f945 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80157f2:	a810      	add	r0, sp, #64	; 0x40
 80157f4:	f7fa f942 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80157f8:	4b41      	ldr	r3, [pc, #260]	; (8015900 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 80157fa:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 80157fe:	4628      	mov	r0, r5
 8015800:	881b      	ldrh	r3, [r3, #0]
 8015802:	9308      	str	r3, [sp, #32]
 8015804:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8015808:	b21b      	sxth	r3, r3
 801580a:	9303      	str	r3, [sp, #12]
 801580c:	682b      	ldr	r3, [r5, #0]
 801580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015810:	4798      	blx	r3
 8015812:	9a03      	ldr	r2, [sp, #12]
 8015814:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8015818:	4681      	mov	r9, r0
 801581a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 801581e:	fb13 f302 	smulbb	r3, r3, r2
 8015822:	2203      	movs	r2, #3
 8015824:	f8da 0000 	ldr.w	r0, [sl]
 8015828:	fb15 3302 	smlabb	r3, r5, r2, r3
 801582c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801582e:	920b      	str	r2, [sp, #44]	; 0x2c
 8015830:	441d      	add	r5, r3
 8015832:	6803      	ldr	r3, [r0, #0]
 8015834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015836:	4798      	blx	r3
 8015838:	9009      	str	r0, [sp, #36]	; 0x24
 801583a:	f8da 0000 	ldr.w	r0, [sl]
 801583e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8015842:	6803      	ldr	r3, [r0, #0]
 8015844:	910a      	str	r1, [sp, #40]	; 0x28
 8015846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015848:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 801584c:	4798      	blx	r3
 801584e:	f010 0f01 	tst.w	r0, #1
 8015852:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8015856:	d01e      	beq.n	8015896 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8015858:	f8da 0000 	ldr.w	r0, [sl]
 801585c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8015860:	6803      	ldr	r3, [r0, #0]
 8015862:	9200      	str	r2, [sp, #0]
 8015864:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8015866:	462b      	mov	r3, r5
 8015868:	e898 0006 	ldmia.w	r8, {r1, r2}
 801586c:	47b0      	blx	r6
 801586e:	9b05      	ldr	r3, [sp, #20]
 8015870:	80a7      	strh	r7, [r4, #4]
 8015872:	8023      	strh	r3, [r4, #0]
 8015874:	9b06      	ldr	r3, [sp, #24]
 8015876:	8063      	strh	r3, [r4, #2]
 8015878:	9b04      	ldr	r3, [sp, #16]
 801587a:	e007      	b.n	801588c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801587c:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8015880:	4288      	cmp	r0, r1
 8015882:	e785      	b.n	8015790 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8015884:	2300      	movs	r3, #0
 8015886:	8023      	strh	r3, [r4, #0]
 8015888:	8063      	strh	r3, [r4, #2]
 801588a:	80a3      	strh	r3, [r4, #4]
 801588c:	4620      	mov	r0, r4
 801588e:	80e3      	strh	r3, [r4, #6]
 8015890:	b013      	add	sp, #76	; 0x4c
 8015892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015896:	fb09 f606 	mul.w	r6, r9, r6
 801589a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801589c:	fb11 6602 	smlabb	r6, r1, r2, r6
 80158a0:	9a07      	ldr	r2, [sp, #28]
 80158a2:	4433      	add	r3, r6
 80158a4:	461e      	mov	r6, r3
 80158a6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80158aa:	b16a      	cbz	r2, 80158c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80158ac:	9a08      	ldr	r2, [sp, #32]
 80158ae:	4593      	cmp	fp, r2
 80158b0:	d10a      	bne.n	80158c8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80158b2:	f8da 0000 	ldr.w	r0, [sl]
 80158b6:	fb09 f303 	mul.w	r3, r9, r3
 80158ba:	4629      	mov	r1, r5
 80158bc:	6802      	ldr	r2, [r0, #0]
 80158be:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80158c2:	4632      	mov	r2, r6
 80158c4:	47d0      	blx	sl
 80158c6:	e7d2      	b.n	801586e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80158c8:	9a03      	ldr	r2, [sp, #12]
 80158ca:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8015908 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80158ce:	fb02 5803 	mla	r8, r2, r3, r5
 80158d2:	4545      	cmp	r5, r8
 80158d4:	d2cb      	bcs.n	801586e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80158d6:	f8db 0000 	ldr.w	r0, [fp]
 80158da:	4629      	mov	r1, r5
 80158dc:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 80158e0:	6802      	ldr	r2, [r0, #0]
 80158e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80158e6:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 80158ea:	4632      	mov	r2, r6
 80158ec:	47d0      	blx	sl
 80158ee:	9b03      	ldr	r3, [sp, #12]
 80158f0:	444e      	add	r6, r9
 80158f2:	441d      	add	r5, r3
 80158f4:	e7ed      	b.n	80158d2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 80158f6:	bf00      	nop
 80158f8:	2401a9ac 	.word	0x2401a9ac
 80158fc:	2401a9ae 	.word	0x2401a9ae
 8015900:	2401a9b2 	.word	0x2401a9b2
 8015904:	2401a9b0 	.word	0x2401a9b0
 8015908:	2401a9b8 	.word	0x2401a9b8

0801590c <_ZN8touchgfx8LCD24bppC1Ev>:
 801590c:	2200      	movs	r2, #0
 801590e:	490d      	ldr	r1, [pc, #52]	; (8015944 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 8015910:	6042      	str	r2, [r0, #4]
 8015912:	6001      	str	r1, [r0, #0]
 8015914:	6602      	str	r2, [r0, #96]	; 0x60
 8015916:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801591a:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801591e:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8015922:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8015926:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801592a:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801592e:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8015932:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8015936:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801593a:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801593e:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8015942:	4770      	bx	lr
 8015944:	0801e834 	.word	0x0801e834

08015948 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8015948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801594c:	b091      	sub	sp, #68	; 0x44
 801594e:	4607      	mov	r7, r0
 8015950:	4688      	mov	r8, r1
 8015952:	6810      	ldr	r0, [r2, #0]
 8015954:	6851      	ldr	r1, [r2, #4]
 8015956:	ac0c      	add	r4, sp, #48	; 0x30
 8015958:	4616      	mov	r6, r2
 801595a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 801595e:	4d64      	ldr	r5, [pc, #400]	; (8015af0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8015960:	f8df a190 	ldr.w	sl, [pc, #400]	; 8015af4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8015964:	c403      	stmia	r4!, {r0, r1}
 8015966:	6818      	ldr	r0, [r3, #0]
 8015968:	ac0e      	add	r4, sp, #56	; 0x38
 801596a:	6859      	ldr	r1, [r3, #4]
 801596c:	c403      	stmia	r4!, {r0, r1}
 801596e:	a80c      	add	r0, sp, #48	; 0x30
 8015970:	f7fa f884 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015974:	4631      	mov	r1, r6
 8015976:	a80e      	add	r0, sp, #56	; 0x38
 8015978:	f7fa f8a8 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801597c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015980:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015984:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015988:	6828      	ldr	r0, [r5, #0]
 801598a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801598e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8015992:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8015996:	440f      	add	r7, r1
 8015998:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801599c:	440a      	add	r2, r1
 801599e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80159a2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80159a6:	4413      	add	r3, r2
 80159a8:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80159ac:	6803      	ldr	r3, [r0, #0]
 80159ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159b0:	4798      	blx	r3
 80159b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80159b6:	6828      	ldr	r0, [r5, #0]
 80159b8:	d01f      	beq.n	80159fa <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80159ba:	2201      	movs	r2, #1
 80159bc:	2500      	movs	r5, #0
 80159be:	6801      	ldr	r1, [r0, #0]
 80159c0:	b2a4      	uxth	r4, r4
 80159c2:	b2b6      	uxth	r6, r6
 80159c4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80159c8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80159cc:	250b      	movs	r5, #11
 80159ce:	9507      	str	r5, [sp, #28]
 80159d0:	f8ba 5000 	ldrh.w	r5, [sl]
 80159d4:	f8cd 9010 	str.w	r9, [sp, #16]
 80159d8:	9602      	str	r6, [sp, #8]
 80159da:	9401      	str	r4, [sp, #4]
 80159dc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80159e0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80159e4:	9203      	str	r2, [sp, #12]
 80159e6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80159ea:	9200      	str	r2, [sp, #0]
 80159ec:	4642      	mov	r2, r8
 80159ee:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80159f0:	4639      	mov	r1, r7
 80159f2:	47a0      	blx	r4
 80159f4:	b011      	add	sp, #68	; 0x44
 80159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159fa:	6803      	ldr	r3, [r0, #0]
 80159fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159fe:	4798      	blx	r3
 8015a00:	f8ba 5000 	ldrh.w	r5, [sl]
 8015a04:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015a08:	f04f 0e04 	mov.w	lr, #4
 8015a0c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015a10:	436e      	muls	r6, r5
 8015a12:	fb05 2303 	mla	r3, r5, r3, r2
 8015a16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015a1a:	1b2d      	subs	r5, r5, r4
 8015a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015a24:	4418      	add	r0, r3
 8015a26:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8015a2a:	1982      	adds	r2, r0, r6
 8015a2c:	1b1b      	subs	r3, r3, r4
 8015a2e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015a34:	4290      	cmp	r0, r2
 8015a36:	d254      	bcs.n	8015ae2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8015a38:	eb00 0a04 	add.w	sl, r0, r4
 8015a3c:	4550      	cmp	r0, sl
 8015a3e:	d24c      	bcs.n	8015ada <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8015a40:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015a44:	fb1e e101 	smlabb	r1, lr, r1, lr
 8015a48:	eb08 0c01 	add.w	ip, r8, r1
 8015a4c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8015a50:	b173      	cbz	r3, 8015a70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015a52:	2bff      	cmp	r3, #255	; 0xff
 8015a54:	f818 b001 	ldrb.w	fp, [r8, r1]
 8015a58:	d10c      	bne.n	8015a74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015a5a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8015a5e:	d109      	bne.n	8015a74 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8015a60:	f880 b000 	strb.w	fp, [r0]
 8015a64:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8015a68:	7043      	strb	r3, [r0, #1]
 8015a6a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8015a6e:	7083      	strb	r3, [r0, #2]
 8015a70:	3003      	adds	r0, #3
 8015a72:	e7e3      	b.n	8015a3c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8015a74:	fb09 f103 	mul.w	r1, r9, r3
 8015a78:	1c4b      	adds	r3, r1, #1
 8015a7a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8015a7e:	7801      	ldrb	r1, [r0, #0]
 8015a80:	121b      	asrs	r3, r3, #8
 8015a82:	b29e      	uxth	r6, r3
 8015a84:	43db      	mvns	r3, r3
 8015a86:	fb1b fb06 	smulbb	fp, fp, r6
 8015a8a:	b2db      	uxtb	r3, r3
 8015a8c:	fb01 b103 	mla	r1, r1, r3, fp
 8015a90:	b289      	uxth	r1, r1
 8015a92:	f101 0b01 	add.w	fp, r1, #1
 8015a96:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8015a9a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8015a9e:	fb1b fb03 	smulbb	fp, fp, r3
 8015aa2:	1209      	asrs	r1, r1, #8
 8015aa4:	7001      	strb	r1, [r0, #0]
 8015aa6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8015aaa:	fb01 b106 	mla	r1, r1, r6, fp
 8015aae:	b289      	uxth	r1, r1
 8015ab0:	f101 0b01 	add.w	fp, r1, #1
 8015ab4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8015ab8:	1209      	asrs	r1, r1, #8
 8015aba:	7041      	strb	r1, [r0, #1]
 8015abc:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8015ac0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8015ac4:	fb1c f303 	smulbb	r3, ip, r3
 8015ac8:	fb01 3606 	mla	r6, r1, r6, r3
 8015acc:	b2b6      	uxth	r6, r6
 8015ace:	1c73      	adds	r3, r6, #1
 8015ad0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8015ad4:	1236      	asrs	r6, r6, #8
 8015ad6:	7086      	strb	r6, [r0, #2]
 8015ad8:	e7ca      	b.n	8015a70 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8015ada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015adc:	4428      	add	r0, r5
 8015ade:	441f      	add	r7, r3
 8015ae0:	e7a8      	b.n	8015a34 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8015ae2:	4b03      	ldr	r3, [pc, #12]	; (8015af0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8015ae4:	6818      	ldr	r0, [r3, #0]
 8015ae6:	6803      	ldr	r3, [r0, #0]
 8015ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aea:	4798      	blx	r3
 8015aec:	e782      	b.n	80159f4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8015aee:	bf00      	nop
 8015af0:	2401a9b8 	.word	0x2401a9b8
 8015af4:	2401a9b2 	.word	0x2401a9b2

08015af8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8015af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afc:	b091      	sub	sp, #68	; 0x44
 8015afe:	4680      	mov	r8, r0
 8015b00:	460e      	mov	r6, r1
 8015b02:	6810      	ldr	r0, [r2, #0]
 8015b04:	6851      	ldr	r1, [r2, #4]
 8015b06:	ad0c      	add	r5, sp, #48	; 0x30
 8015b08:	4614      	mov	r4, r2
 8015b0a:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8015b0e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8015ca8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8015b12:	f8df a198 	ldr.w	sl, [pc, #408]	; 8015cac <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8015b16:	c503      	stmia	r5!, {r0, r1}
 8015b18:	6818      	ldr	r0, [r3, #0]
 8015b1a:	ad0e      	add	r5, sp, #56	; 0x38
 8015b1c:	6859      	ldr	r1, [r3, #4]
 8015b1e:	c503      	stmia	r5!, {r0, r1}
 8015b20:	a80c      	add	r0, sp, #48	; 0x30
 8015b22:	f7f9 ffab 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b26:	4621      	mov	r1, r4
 8015b28:	a80e      	add	r0, sp, #56	; 0x38
 8015b2a:	f7f9 ffcf 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015b2e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8015b32:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015b36:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8015b3a:	f8d9 0000 	ldr.w	r0, [r9]
 8015b3e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015b42:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8015b46:	eb08 0401 	add.w	r4, r8, r1
 8015b4a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8015b4e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8015b52:	440a      	add	r2, r1
 8015b54:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8015b58:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8015b5c:	4413      	add	r3, r2
 8015b5e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8015b62:	6803      	ldr	r3, [r0, #0]
 8015b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b66:	4798      	blx	r3
 8015b68:	f010 0f80 	tst.w	r0, #128	; 0x80
 8015b6c:	f8d9 0000 	ldr.w	r0, [r9]
 8015b70:	d022      	beq.n	8015bb8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8015b72:	2200      	movs	r2, #0
 8015b74:	f04f 0c01 	mov.w	ip, #1
 8015b78:	6801      	ldr	r1, [r0, #0]
 8015b7a:	b2ad      	uxth	r5, r5
 8015b7c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015b80:	e9cd c208 	strd	ip, r2, [sp, #32]
 8015b84:	f04f 0c0b 	mov.w	ip, #11
 8015b88:	f8cd c01c 	str.w	ip, [sp, #28]
 8015b8c:	f8ba c000 	ldrh.w	ip, [sl]
 8015b90:	9704      	str	r7, [sp, #16]
 8015b92:	9502      	str	r5, [sp, #8]
 8015b94:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8015b98:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8015b9c:	9203      	str	r2, [sp, #12]
 8015b9e:	fa1f f288 	uxth.w	r2, r8
 8015ba2:	9201      	str	r2, [sp, #4]
 8015ba4:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8015ba8:	9200      	str	r2, [sp, #0]
 8015baa:	4632      	mov	r2, r6
 8015bac:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8015bae:	4621      	mov	r1, r4
 8015bb0:	47a8      	blx	r5
 8015bb2:	b011      	add	sp, #68	; 0x44
 8015bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bb8:	6803      	ldr	r3, [r0, #0]
 8015bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bbc:	4798      	blx	r3
 8015bbe:	f8ba 2000 	ldrh.w	r2, [sl]
 8015bc2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8015bc6:	f04f 0e03 	mov.w	lr, #3
 8015bca:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8015bce:	4355      	muls	r5, r2
 8015bd0:	fa1f fc87 	uxth.w	ip, r7
 8015bd4:	fb02 1303 	mla	r3, r2, r3, r1
 8015bd8:	eba2 0208 	sub.w	r2, r2, r8
 8015bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015be0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015be4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015be8:	4418      	add	r0, r3
 8015bea:	920b      	str	r2, [sp, #44]	; 0x2c
 8015bec:	1943      	adds	r3, r0, r5
 8015bee:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8015bf2:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8015bf6:	eba2 0208 	sub.w	r2, r2, r8
 8015bfa:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8015bfe:	b2ad      	uxth	r5, r5
 8015c00:	4298      	cmp	r0, r3
 8015c02:	d24a      	bcs.n	8015c9a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8015c04:	eb00 0908 	add.w	r9, r0, r8
 8015c08:	4621      	mov	r1, r4
 8015c0a:	4548      	cmp	r0, r9
 8015c0c:	460c      	mov	r4, r1
 8015c0e:	d240      	bcs.n	8015c92 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8015c10:	f04f 0a04 	mov.w	sl, #4
 8015c14:	7824      	ldrb	r4, [r4, #0]
 8015c16:	2fff      	cmp	r7, #255	; 0xff
 8015c18:	f101 0101 	add.w	r1, r1, #1
 8015c1c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8015c20:	eb06 0a04 	add.w	sl, r6, r4
 8015c24:	f816 b004 	ldrb.w	fp, [r6, r4]
 8015c28:	d02b      	beq.n	8015c82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8015c2a:	7804      	ldrb	r4, [r0, #0]
 8015c2c:	fb14 f405 	smulbb	r4, r4, r5
 8015c30:	fb0b 440c 	mla	r4, fp, ip, r4
 8015c34:	b2a4      	uxth	r4, r4
 8015c36:	f104 0b01 	add.w	fp, r4, #1
 8015c3a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015c3e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8015c42:	fb1b fb05 	smulbb	fp, fp, r5
 8015c46:	1224      	asrs	r4, r4, #8
 8015c48:	7004      	strb	r4, [r0, #0]
 8015c4a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015c4e:	fb04 b40c 	mla	r4, r4, ip, fp
 8015c52:	b2a4      	uxth	r4, r4
 8015c54:	f104 0b01 	add.w	fp, r4, #1
 8015c58:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8015c5c:	1224      	asrs	r4, r4, #8
 8015c5e:	7044      	strb	r4, [r0, #1]
 8015c60:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015c64:	f890 a002 	ldrb.w	sl, [r0, #2]
 8015c68:	fb1a fa05 	smulbb	sl, sl, r5
 8015c6c:	fb04 a40c 	mla	r4, r4, ip, sl
 8015c70:	b2a4      	uxth	r4, r4
 8015c72:	f104 0a01 	add.w	sl, r4, #1
 8015c76:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8015c7a:	1224      	asrs	r4, r4, #8
 8015c7c:	7084      	strb	r4, [r0, #2]
 8015c7e:	3003      	adds	r0, #3
 8015c80:	e7c3      	b.n	8015c0a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8015c82:	f880 b000 	strb.w	fp, [r0]
 8015c86:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8015c8a:	7044      	strb	r4, [r0, #1]
 8015c8c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8015c90:	e7f4      	b.n	8015c7c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8015c92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015c94:	4420      	add	r0, r4
 8015c96:	188c      	adds	r4, r1, r2
 8015c98:	e7b2      	b.n	8015c00 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8015c9a:	4b03      	ldr	r3, [pc, #12]	; (8015ca8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8015c9c:	6818      	ldr	r0, [r3, #0]
 8015c9e:	6803      	ldr	r3, [r0, #0]
 8015ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ca2:	4798      	blx	r3
 8015ca4:	e785      	b.n	8015bb2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8015ca6:	bf00      	nop
 8015ca8:	2401a9b8 	.word	0x2401a9b8
 8015cac:	2401a9b2 	.word	0x2401a9b2

08015cb0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8015cb0:	b4f0      	push	{r4, r5, r6, r7}
 8015cb2:	460c      	mov	r4, r1
 8015cb4:	4611      	mov	r1, r2
 8015cb6:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8015cba:	461a      	mov	r2, r3
 8015cbc:	780f      	ldrb	r7, [r1, #0]
 8015cbe:	9b04      	ldr	r3, [sp, #16]
 8015cc0:	784e      	ldrb	r6, [r1, #1]
 8015cc2:	b11f      	cbz	r7, 8015ccc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8015cc4:	2f01      	cmp	r7, #1
 8015cc6:	d01d      	beq.n	8015d04 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8015cc8:	bcf0      	pop	{r4, r5, r6, r7}
 8015cca:	4770      	bx	lr
 8015ccc:	2e03      	cmp	r6, #3
 8015cce:	d8fb      	bhi.n	8015cc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8015cd0:	e8df f006 	tbb	[pc, r6]
 8015cd4:	16140702 	.word	0x16140702
 8015cd8:	9504      	str	r5, [sp, #16]
 8015cda:	4620      	mov	r0, r4
 8015cdc:	bcf0      	pop	{r4, r5, r6, r7}
 8015cde:	f7ff be33 	b.w	8015948 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8015ce2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8015ce4:	2800      	cmp	r0, #0
 8015ce6:	d0ef      	beq.n	8015cc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8015ce8:	6806      	ldr	r6, [r0, #0]
 8015cea:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8015cee:	68f5      	ldr	r5, [r6, #12]
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	46ac      	mov	ip, r5
 8015cf4:	460a      	mov	r2, r1
 8015cf6:	4621      	mov	r1, r4
 8015cf8:	bcf0      	pop	{r4, r5, r6, r7}
 8015cfa:	4760      	bx	ip
 8015cfc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8015cfe:	e7f1      	b.n	8015ce4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8015d00:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015d02:	e7ef      	b.n	8015ce4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8015d04:	2e03      	cmp	r6, #3
 8015d06:	d8df      	bhi.n	8015cc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8015d08:	e8df f006 	tbb	[pc, r6]
 8015d0c:	110f0702 	.word	0x110f0702
 8015d10:	9504      	str	r5, [sp, #16]
 8015d12:	4620      	mov	r0, r4
 8015d14:	bcf0      	pop	{r4, r5, r6, r7}
 8015d16:	f7ff beef 	b.w	8015af8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8015d1a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	d0d3      	beq.n	8015cc8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8015d20:	6806      	ldr	r6, [r0, #0]
 8015d22:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8015d26:	68b5      	ldr	r5, [r6, #8]
 8015d28:	e7e2      	b.n	8015cf0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8015d2a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8015d2c:	e7f6      	b.n	8015d1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 8015d2e:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015d30:	e7f4      	b.n	8015d1c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08015d34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8015d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d38:	4605      	mov	r5, r0
 8015d3a:	b08f      	sub	sp, #60	; 0x3c
 8015d3c:	460c      	mov	r4, r1
 8015d3e:	461f      	mov	r7, r3
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d052      	beq.n	8015dea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8015d44:	6808      	ldr	r0, [r1, #0]
 8015d46:	ab0a      	add	r3, sp, #40	; 0x28
 8015d48:	6849      	ldr	r1, [r1, #4]
 8015d4a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8015f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8015d4e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8015f18 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8015d52:	c303      	stmia	r3!, {r0, r1}
 8015d54:	6810      	ldr	r0, [r2, #0]
 8015d56:	ab0c      	add	r3, sp, #48	; 0x30
 8015d58:	6851      	ldr	r1, [r2, #4]
 8015d5a:	c303      	stmia	r3!, {r0, r1}
 8015d5c:	a80a      	add	r0, sp, #40	; 0x28
 8015d5e:	f7f9 fe8d 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015d62:	4621      	mov	r1, r4
 8015d64:	a80c      	add	r0, sp, #48	; 0x30
 8015d66:	f7f9 feb1 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015d6a:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8015d6e:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015d72:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015d76:	f8d8 0000 	ldr.w	r0, [r8]
 8015d7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015d7e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8015d82:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8015d86:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8015d8a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8015d8e:	440a      	add	r2, r1
 8015d90:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8015d94:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8015d98:	4413      	add	r3, r2
 8015d9a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8015d9e:	6803      	ldr	r3, [r0, #0]
 8015da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015da2:	4798      	blx	r3
 8015da4:	2fff      	cmp	r7, #255	; 0xff
 8015da6:	d023      	beq.n	8015df0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8015da8:	f010 0f04 	tst.w	r0, #4
 8015dac:	f8d8 0000 	ldr.w	r0, [r8]
 8015db0:	d021      	beq.n	8015df6 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8015db2:	2100      	movs	r1, #0
 8015db4:	f04f 0e01 	mov.w	lr, #1
 8015db8:	f8d0 c000 	ldr.w	ip, [r0]
 8015dbc:	b2a4      	uxth	r4, r4
 8015dbe:	9106      	str	r1, [sp, #24]
 8015dc0:	b2b6      	uxth	r6, r6
 8015dc2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8015dc6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8015dca:	e9cd e107 	strd	lr, r1, [sp, #28]
 8015dce:	f8b9 e000 	ldrh.w	lr, [r9]
 8015dd2:	9703      	str	r7, [sp, #12]
 8015dd4:	9401      	str	r4, [sp, #4]
 8015dd6:	9600      	str	r6, [sp, #0]
 8015dd8:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8015ddc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8015de0:	9102      	str	r1, [sp, #8]
 8015de2:	4629      	mov	r1, r5
 8015de4:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8015de8:	47a0      	blx	r4
 8015dea:	b00f      	add	sp, #60	; 0x3c
 8015dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015df0:	f010 0f01 	tst.w	r0, #1
 8015df4:	e7da      	b.n	8015dac <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8015df6:	6803      	ldr	r3, [r0, #0]
 8015df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dfa:	4798      	blx	r3
 8015dfc:	f8b9 1000 	ldrh.w	r1, [r9]
 8015e00:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015e04:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8015e08:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8015e0c:	434c      	muls	r4, r1
 8015e0e:	2fff      	cmp	r7, #255	; 0xff
 8015e10:	fb01 2303 	mla	r3, r1, r3, r2
 8015e14:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e18:	eba1 0106 	sub.w	r1, r1, r6
 8015e1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015e24:	4418      	add	r0, r3
 8015e26:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8015e2a:	eba3 0606 	sub.w	r6, r3, r6
 8015e2e:	4404      	add	r4, r0
 8015e30:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8015e34:	d04a      	beq.n	8015ecc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8015e36:	43fa      	mvns	r2, r7
 8015e38:	b2bb      	uxth	r3, r7
 8015e3a:	b2d7      	uxtb	r7, r2
 8015e3c:	42a0      	cmp	r0, r4
 8015e3e:	d263      	bcs.n	8015f08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8015e40:	eb00 0e0c 	add.w	lr, r0, ip
 8015e44:	4586      	cmp	lr, r0
 8015e46:	f100 0803 	add.w	r8, r0, #3
 8015e4a:	d93a      	bls.n	8015ec2 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8015e4c:	f835 2b02 	ldrh.w	r2, [r5], #2
 8015e50:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8015e54:	00d0      	lsls	r0, r2, #3
 8015e56:	fb19 f907 	smulbb	r9, r9, r7
 8015e5a:	b2c0      	uxtb	r0, r0
 8015e5c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8015e60:	fb00 9003 	mla	r0, r0, r3, r9
 8015e64:	b280      	uxth	r0, r0
 8015e66:	f100 0901 	add.w	r9, r0, #1
 8015e6a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8015e6e:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8015e72:	fb19 f907 	smulbb	r9, r9, r7
 8015e76:	1200      	asrs	r0, r0, #8
 8015e78:	f808 0c03 	strb.w	r0, [r8, #-3]
 8015e7c:	10d0      	asrs	r0, r2, #3
 8015e7e:	1212      	asrs	r2, r2, #8
 8015e80:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8015e84:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8015e88:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8015e8c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015e90:	fb00 9003 	mla	r0, r0, r3, r9
 8015e94:	b280      	uxth	r0, r0
 8015e96:	f100 0901 	add.w	r9, r0, #1
 8015e9a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 8015e9e:	1200      	asrs	r0, r0, #8
 8015ea0:	f808 0c02 	strb.w	r0, [r8, #-2]
 8015ea4:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8015ea8:	fb10 f007 	smulbb	r0, r0, r7
 8015eac:	fb02 0203 	mla	r2, r2, r3, r0
 8015eb0:	b292      	uxth	r2, r2
 8015eb2:	1c50      	adds	r0, r2, #1
 8015eb4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8015eb8:	4640      	mov	r0, r8
 8015eba:	1212      	asrs	r2, r2, #8
 8015ebc:	f808 2c01 	strb.w	r2, [r8, #-1]
 8015ec0:	e7c0      	b.n	8015e44 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8015ec2:	4408      	add	r0, r1
 8015ec4:	4435      	add	r5, r6
 8015ec6:	e7b9      	b.n	8015e3c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8015ec8:	4408      	add	r0, r1
 8015eca:	4435      	add	r5, r6
 8015ecc:	42a0      	cmp	r0, r4
 8015ece:	d21b      	bcs.n	8015f08 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8015ed0:	eb00 070c 	add.w	r7, r0, ip
 8015ed4:	42b8      	cmp	r0, r7
 8015ed6:	d2f7      	bcs.n	8015ec8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8015ed8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8015edc:	3003      	adds	r0, #3
 8015ede:	00da      	lsls	r2, r3, #3
 8015ee0:	b2d2      	uxtb	r2, r2
 8015ee2:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8015ee6:	f800 2c03 	strb.w	r2, [r0, #-3]
 8015eea:	10da      	asrs	r2, r3, #3
 8015eec:	121b      	asrs	r3, r3, #8
 8015eee:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8015ef2:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8015ef6:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8015efa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8015efe:	f800 2c02 	strb.w	r2, [r0, #-2]
 8015f02:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015f06:	e7e5      	b.n	8015ed4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8015f08:	4b02      	ldr	r3, [pc, #8]	; (8015f14 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8015f0a:	6818      	ldr	r0, [r3, #0]
 8015f0c:	6803      	ldr	r3, [r0, #0]
 8015f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f10:	4798      	blx	r3
 8015f12:	e76a      	b.n	8015dea <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8015f14:	2401a9b8 	.word	0x2401a9b8
 8015f18:	2401a9b2 	.word	0x2401a9b2

08015f1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8015f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f20:	b08a      	sub	sp, #40	; 0x28
 8015f22:	460d      	mov	r5, r1
 8015f24:	4604      	mov	r4, r0
 8015f26:	461e      	mov	r6, r3
 8015f28:	6808      	ldr	r0, [r1, #0]
 8015f2a:	ab06      	add	r3, sp, #24
 8015f2c:	6849      	ldr	r1, [r1, #4]
 8015f2e:	4f5d      	ldr	r7, [pc, #372]	; (80160a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8015f30:	c303      	stmia	r3!, {r0, r1}
 8015f32:	6810      	ldr	r0, [r2, #0]
 8015f34:	ab08      	add	r3, sp, #32
 8015f36:	6851      	ldr	r1, [r2, #4]
 8015f38:	c303      	stmia	r3!, {r0, r1}
 8015f3a:	a806      	add	r0, sp, #24
 8015f3c:	f7f9 fd9e 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f40:	4629      	mov	r1, r5
 8015f42:	a808      	add	r0, sp, #32
 8015f44:	f7f9 fdc2 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f48:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015f4c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015f50:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015f54:	6838      	ldr	r0, [r7, #0]
 8015f56:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015f5a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 8015f5e:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8015f62:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8015f66:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015f6a:	440a      	add	r2, r1
 8015f6c:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015f70:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015f74:	4413      	add	r3, r2
 8015f76:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015f7e:	4798      	blx	r3
 8015f80:	2eff      	cmp	r6, #255	; 0xff
 8015f82:	d119      	bne.n	8015fb8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8015f84:	f010 0f20 	tst.w	r0, #32
 8015f88:	6838      	ldr	r0, [r7, #0]
 8015f8a:	d018      	beq.n	8015fbe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8015f8c:	b2ad      	uxth	r5, r5
 8015f8e:	2700      	movs	r7, #0
 8015f90:	6801      	ldr	r1, [r0, #0]
 8015f92:	9501      	str	r5, [sp, #4]
 8015f94:	fa1f f588 	uxth.w	r5, r8
 8015f98:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015f9c:	9500      	str	r5, [sp, #0]
 8015f9e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015fa2:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8015fa6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8015faa:	9602      	str	r6, [sp, #8]
 8015fac:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 8015fae:	4621      	mov	r1, r4
 8015fb0:	47a8      	blx	r5
 8015fb2:	b00a      	add	sp, #40	; 0x28
 8015fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015fbc:	e7e4      	b.n	8015f88 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 8015fbe:	6803      	ldr	r3, [r0, #0]
 8015fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fc2:	4798      	blx	r3
 8015fc4:	4b38      	ldr	r3, [pc, #224]	; (80160a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8015fc6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015fca:	f8b3 c000 	ldrh.w	ip, [r3]
 8015fce:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015fd2:	fb0c f505 	mul.w	r5, ip, r5
 8015fd6:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8015fda:	fb0c 2303 	mla	r3, ip, r3, r2
 8015fde:	ebac 0c08 	sub.w	ip, ip, r8
 8015fe2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015fe6:	ebae 0e08 	sub.w	lr, lr, r8
 8015fea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015fee:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015ff2:	4418      	add	r0, r3
 8015ff4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8015ff8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8015ffc:	4405      	add	r5, r0
 8015ffe:	42a8      	cmp	r0, r5
 8016000:	d24a      	bcs.n	8016098 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8016002:	eb00 0803 	add.w	r8, r0, r3
 8016006:	4540      	cmp	r0, r8
 8016008:	d243      	bcs.n	8016092 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801600a:	78e2      	ldrb	r2, [r4, #3]
 801600c:	b15a      	cbz	r2, 8016026 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801600e:	2aff      	cmp	r2, #255	; 0xff
 8016010:	f894 9000 	ldrb.w	r9, [r4]
 8016014:	d10a      	bne.n	801602c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8016016:	2eff      	cmp	r6, #255	; 0xff
 8016018:	d108      	bne.n	801602c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801601a:	f880 9000 	strb.w	r9, [r0]
 801601e:	7862      	ldrb	r2, [r4, #1]
 8016020:	7042      	strb	r2, [r0, #1]
 8016022:	78a2      	ldrb	r2, [r4, #2]
 8016024:	7082      	strb	r2, [r0, #2]
 8016026:	3003      	adds	r0, #3
 8016028:	3404      	adds	r4, #4
 801602a:	e7ec      	b.n	8016006 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801602c:	4372      	muls	r2, r6
 801602e:	1c51      	adds	r1, r2, #1
 8016030:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8016034:	1209      	asrs	r1, r1, #8
 8016036:	fa1f fa81 	uxth.w	sl, r1
 801603a:	43c9      	mvns	r1, r1
 801603c:	fb19 f90a 	smulbb	r9, r9, sl
 8016040:	b2ca      	uxtb	r2, r1
 8016042:	7801      	ldrb	r1, [r0, #0]
 8016044:	fb01 9902 	mla	r9, r1, r2, r9
 8016048:	fa1f f989 	uxth.w	r9, r9
 801604c:	f109 0101 	add.w	r1, r9, #1
 8016050:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8016054:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016058:	f880 9000 	strb.w	r9, [r0]
 801605c:	f890 9001 	ldrb.w	r9, [r0, #1]
 8016060:	7861      	ldrb	r1, [r4, #1]
 8016062:	fb19 f902 	smulbb	r9, r9, r2
 8016066:	fb01 910a 	mla	r1, r1, sl, r9
 801606a:	b289      	uxth	r1, r1
 801606c:	f101 0901 	add.w	r9, r1, #1
 8016070:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8016074:	1209      	asrs	r1, r1, #8
 8016076:	7041      	strb	r1, [r0, #1]
 8016078:	7881      	ldrb	r1, [r0, #2]
 801607a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801607e:	fb11 f202 	smulbb	r2, r1, r2
 8016082:	fb09 220a 	mla	r2, r9, sl, r2
 8016086:	b292      	uxth	r2, r2
 8016088:	1c51      	adds	r1, r2, #1
 801608a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801608e:	1212      	asrs	r2, r2, #8
 8016090:	e7c8      	b.n	8016024 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8016092:	4460      	add	r0, ip
 8016094:	4474      	add	r4, lr
 8016096:	e7b2      	b.n	8015ffe <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8016098:	6838      	ldr	r0, [r7, #0]
 801609a:	6803      	ldr	r3, [r0, #0]
 801609c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801609e:	4798      	blx	r3
 80160a0:	e787      	b.n	8015fb2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80160a2:	bf00      	nop
 80160a4:	2401a9b8 	.word	0x2401a9b8
 80160a8:	2401a9b2 	.word	0x2401a9b2

080160ac <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80160ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80160b0:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80160b4:	4607      	mov	r7, r0
 80160b6:	460c      	mov	r4, r1
 80160b8:	4692      	mov	sl, r2
 80160ba:	4699      	mov	r9, r3
 80160bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80160be:	b31d      	cbz	r5, 8016108 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80160c0:	4608      	mov	r0, r1
 80160c2:	f7fc fb91 	bl	80127e8 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80160c6:	4680      	mov	r8, r0
 80160c8:	4620      	mov	r0, r4
 80160ca:	f7fc fbc1 	bl	8012850 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80160ce:	f8ad 000e 	strh.w	r0, [sp, #14]
 80160d2:	4620      	mov	r0, r4
 80160d4:	f8ad a008 	strh.w	sl, [sp, #8]
 80160d8:	f8ad 900a 	strh.w	r9, [sp, #10]
 80160dc:	f8ad 800c 	strh.w	r8, [sp, #12]
 80160e0:	f7fc fcba 	bl	8012a58 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80160e4:	280b      	cmp	r0, #11
 80160e6:	d80f      	bhi.n	8016108 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80160e8:	e8df f000 	tbb	[pc, r0]
 80160ec:	0e062a21 	.word	0x0e062a21
 80160f0:	0e0e0e0e 	.word	0x0e0e0e0e
 80160f4:	110e0e0e 	.word	0x110e0e0e
 80160f8:	4620      	mov	r0, r4
 80160fa:	f7fc fc29 	bl	8012950 <_ZNK8touchgfx6Bitmap7getDataEv>
 80160fe:	462b      	mov	r3, r5
 8016100:	4632      	mov	r2, r6
 8016102:	a902      	add	r1, sp, #8
 8016104:	f7ff ff0a 	bl	8015f1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8016108:	b004      	add	sp, #16
 801610a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801610e:	4620      	mov	r0, r4
 8016110:	f7fc fc1e 	bl	8012950 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016114:	4680      	mov	r8, r0
 8016116:	4620      	mov	r0, r4
 8016118:	f7fc fc4a 	bl	80129b0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801611c:	ab02      	add	r3, sp, #8
 801611e:	4602      	mov	r2, r0
 8016120:	4641      	mov	r1, r8
 8016122:	4638      	mov	r0, r7
 8016124:	e9cd 6500 	strd	r6, r5, [sp]
 8016128:	f7ff fdc2 	bl	8015cb0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801612c:	e7ec      	b.n	8016108 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801612e:	4620      	mov	r0, r4
 8016130:	f7fc fc0e 	bl	8012950 <_ZNK8touchgfx6Bitmap7getDataEv>
 8016134:	462b      	mov	r3, r5
 8016136:	4632      	mov	r2, r6
 8016138:	a902      	add	r1, sp, #8
 801613a:	f7ff fdfb 	bl	8015d34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801613e:	e7e3      	b.n	8016108 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	4620      	mov	r0, r4
 8016144:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8016148:	f7fc fc02 	bl	8012950 <_ZNK8touchgfx6Bitmap7getDataEv>
 801614c:	2300      	movs	r3, #0
 801614e:	4601      	mov	r1, r0
 8016150:	aa02      	add	r2, sp, #8
 8016152:	4638      	mov	r0, r7
 8016154:	e9cd 5300 	strd	r5, r3, [sp]
 8016158:	4633      	mov	r3, r6
 801615a:	47c0      	blx	r8
 801615c:	e7d4      	b.n	8016108 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

0801615e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801615e:	b4f0      	push	{r4, r5, r6, r7}
 8016160:	4616      	mov	r6, r2
 8016162:	461c      	mov	r4, r3
 8016164:	460d      	mov	r5, r1
 8016166:	9a04      	ldr	r2, [sp, #16]
 8016168:	2e01      	cmp	r6, #1
 801616a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801616e:	d00e      	beq.n	801618e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8016170:	d303      	bcc.n	801617a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8016172:	2e02      	cmp	r6, #2
 8016174:	d006      	beq.n	8016184 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8016176:	bcf0      	pop	{r4, r5, r6, r7}
 8016178:	4770      	bx	lr
 801617a:	4621      	mov	r1, r4
 801617c:	4628      	mov	r0, r5
 801617e:	bcf0      	pop	{r4, r5, r6, r7}
 8016180:	f7ff bdd8 	b.w	8015d34 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8016184:	4621      	mov	r1, r4
 8016186:	4628      	mov	r0, r5
 8016188:	bcf0      	pop	{r4, r5, r6, r7}
 801618a:	f7ff bec7 	b.w	8015f1c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801618e:	6805      	ldr	r5, [r0, #0]
 8016190:	2600      	movs	r6, #0
 8016192:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8016196:	68ed      	ldr	r5, [r5, #12]
 8016198:	4613      	mov	r3, r2
 801619a:	4622      	mov	r2, r4
 801619c:	46ac      	mov	ip, r5
 801619e:	bcf0      	pop	{r4, r5, r6, r7}
 80161a0:	4760      	bx	ip
	...

080161a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 80161a4:	b160      	cbz	r0, 80161c0 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 80161a6:	2903      	cmp	r1, #3
 80161a8:	d818      	bhi.n	80161dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80161aa:	e8df f001 	tbb	[pc, r1]
 80161ae:	1902      	.short	0x1902
 80161b0:	1b06      	.short	0x1b06
 80161b2:	4b0e      	ldr	r3, [pc, #56]	; (80161ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80161b4:	8818      	ldrh	r0, [r3, #0]
 80161b6:	4240      	negs	r0, r0
 80161b8:	4770      	bx	lr
 80161ba:	4b0c      	ldr	r3, [pc, #48]	; (80161ec <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 80161bc:	8818      	ldrh	r0, [r3, #0]
 80161be:	4770      	bx	lr
 80161c0:	2903      	cmp	r1, #3
 80161c2:	d80b      	bhi.n	80161dc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 80161c4:	a301      	add	r3, pc, #4	; (adr r3, 80161cc <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 80161c6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80161ca:	bf00      	nop
 80161cc:	080161e1 	.word	0x080161e1
 80161d0:	080161bb 	.word	0x080161bb
 80161d4:	080161e5 	.word	0x080161e5
 80161d8:	080161b3 	.word	0x080161b3
 80161dc:	2000      	movs	r0, #0
 80161de:	4770      	bx	lr
 80161e0:	2001      	movs	r0, #1
 80161e2:	4770      	bx	lr
 80161e4:	f04f 30ff 	mov.w	r0, #4294967295
 80161e8:	4770      	bx	lr
 80161ea:	bf00      	nop
 80161ec:	2401a9b2 	.word	0x2401a9b2

080161f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 80161f0:	b160      	cbz	r0, 801620c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 80161f2:	2903      	cmp	r1, #3
 80161f4:	d818      	bhi.n	8016228 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 80161f6:	e8df f001 	tbb	[pc, r1]
 80161fa:	0219      	.short	0x0219
 80161fc:	051b      	.short	0x051b
 80161fe:	4b0e      	ldr	r3, [pc, #56]	; (8016238 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016200:	8818      	ldrh	r0, [r3, #0]
 8016202:	4770      	bx	lr
 8016204:	4b0c      	ldr	r3, [pc, #48]	; (8016238 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8016206:	8818      	ldrh	r0, [r3, #0]
 8016208:	4240      	negs	r0, r0
 801620a:	4770      	bx	lr
 801620c:	2903      	cmp	r1, #3
 801620e:	d80b      	bhi.n	8016228 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8016210:	a301      	add	r3, pc, #4	; (adr r3, 8016218 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8016212:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8016216:	bf00      	nop
 8016218:	080161ff 	.word	0x080161ff
 801621c:	08016231 	.word	0x08016231
 8016220:	08016205 	.word	0x08016205
 8016224:	0801622d 	.word	0x0801622d
 8016228:	2000      	movs	r0, #0
 801622a:	4770      	bx	lr
 801622c:	2001      	movs	r0, #1
 801622e:	4770      	bx	lr
 8016230:	f04f 30ff 	mov.w	r0, #4294967295
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	2401a9b2 	.word	0x2401a9b2

0801623c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016240:	b097      	sub	sp, #92	; 0x5c
 8016242:	910b      	str	r1, [sp, #44]	; 0x2c
 8016244:	a912      	add	r1, sp, #72	; 0x48
 8016246:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 801624a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 801624e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8016252:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 8016256:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 801625a:	e881 000c 	stmia.w	r1, {r2, r3}
 801625e:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8016262:	930a      	str	r3, [sp, #40]	; 0x28
 8016264:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 8016268:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 801626c:	9311      	str	r3, [sp, #68]	; 0x44
 801626e:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 8016272:	798d      	ldrb	r5, [r1, #6]
 8016274:	930c      	str	r3, [sp, #48]	; 0x30
 8016276:	7b4b      	ldrb	r3, [r1, #13]
 8016278:	0158      	lsls	r0, r3, #5
 801627a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801627e:	4328      	orrs	r0, r5
 8016280:	9009      	str	r0, [sp, #36]	; 0x24
 8016282:	f000 817c 	beq.w	801657e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016286:	011b      	lsls	r3, r3, #4
 8016288:	79c8      	ldrb	r0, [r1, #7]
 801628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801628e:	4303      	orrs	r3, r0
 8016290:	930e      	str	r3, [sp, #56]	; 0x38
 8016292:	f000 8174 	beq.w	801657e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8016296:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801629a:	b29b      	uxth	r3, r3
 801629c:	2f00      	cmp	r7, #0
 801629e:	f000 8116 	beq.w	80164ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 80162a2:	1aff      	subs	r7, r7, r3
 80162a4:	b2bf      	uxth	r7, r7
 80162a6:	043b      	lsls	r3, r7, #16
 80162a8:	d502      	bpl.n	80162b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80162aa:	1bf6      	subs	r6, r6, r7
 80162ac:	2700      	movs	r7, #0
 80162ae:	b236      	sxth	r6, r6
 80162b0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80162b4:	a812      	add	r0, sp, #72	; 0x48
 80162b6:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 80162ba:	428e      	cmp	r6, r1
 80162bc:	b28b      	uxth	r3, r1
 80162be:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80162c2:	bfbf      	itttt	lt
 80162c4:	18ff      	addlt	r7, r7, r3
 80162c6:	1bbe      	sublt	r6, r7, r6
 80162c8:	b2b7      	uxthlt	r7, r6
 80162ca:	460e      	movlt	r6, r1
 80162cc:	8891      	ldrh	r1, [r2, #4]
 80162ce:	440b      	add	r3, r1
 80162d0:	4631      	mov	r1, r6
 80162d2:	b21b      	sxth	r3, r3
 80162d4:	9310      	str	r3, [sp, #64]	; 0x40
 80162d6:	88d3      	ldrh	r3, [r2, #6]
 80162d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162da:	449a      	add	sl, r3
 80162dc:	fa0f f38a 	sxth.w	r3, sl
 80162e0:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80162e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80162e6:	4bb5      	ldr	r3, [pc, #724]	; (80165bc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 80162e8:	f893 b000 	ldrb.w	fp, [r3]
 80162ec:	f10b 3cff 	add.w	ip, fp, #4294967295
 80162f0:	f1dc 0300 	rsbs	r3, ip, #0
 80162f4:	eb43 030c 	adc.w	r3, r3, ip
 80162f8:	930d      	str	r3, [sp, #52]	; 0x34
 80162fa:	464b      	mov	r3, r9
 80162fc:	f7f9 fa32 	bl	800f764 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8016300:	4631      	mov	r1, r6
 8016302:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8016306:	464b      	mov	r3, r9
 8016308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801630a:	a812      	add	r0, sp, #72	; 0x48
 801630c:	f7f9 fa47 	bl	800f79e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8016310:	a916      	add	r1, sp, #88	; 0x58
 8016312:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8016316:	a815      	add	r0, sp, #84	; 0x54
 8016318:	f7f9 fb6e 	bl	800f9f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801631c:	f1b9 0f00 	cmp.w	r9, #0
 8016320:	f040 80d8 	bne.w	80164d4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8016324:	f1bb 0f01 	cmp.w	fp, #1
 8016328:	f040 80dc 	bne.w	80164e4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801632c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801632e:	b153      	cbz	r3, 8016346 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8016330:	2508      	movs	r5, #8
 8016332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016334:	fb95 f3f8 	sdiv	r3, r5, r8
 8016338:	1e5d      	subs	r5, r3, #1
 801633a:	4415      	add	r5, r2
 801633c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016340:	fb15 f503 	smulbb	r5, r5, r3
 8016344:	b2ad      	uxth	r5, r5
 8016346:	b907      	cbnz	r7, 801634a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8016348:	b16c      	cbz	r4, 8016366 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801634a:	fb04 7305 	mla	r3, r4, r5, r7
 801634e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016350:	ebaa 0a04 	sub.w	sl, sl, r4
 8016354:	fb08 f303 	mul.w	r3, r8, r3
 8016358:	fa1f fa8a 	uxth.w	sl, sl
 801635c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8016360:	f003 0407 	and.w	r4, r3, #7
 8016364:	9226      	str	r2, [sp, #152]	; 0x98
 8016366:	4649      	mov	r1, r9
 8016368:	980d      	ldr	r0, [sp, #52]	; 0x34
 801636a:	f7ff ff1b 	bl	80161a4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801636e:	4683      	mov	fp, r0
 8016370:	980d      	ldr	r0, [sp, #52]	; 0x34
 8016372:	f7ff ff3d 	bl	80161f0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8016376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801637a:	4681      	mov	r9, r0
 801637c:	1a9b      	subs	r3, r3, r2
 801637e:	459a      	cmp	sl, r3
 8016380:	bfa8      	it	ge
 8016382:	469a      	movge	sl, r3
 8016384:	f1ba 0f00 	cmp.w	sl, #0
 8016388:	f340 80f9 	ble.w	801657e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801638c:	1bf6      	subs	r6, r6, r7
 801638e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016390:	1b9e      	subs	r6, r3, r6
 8016392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016394:	429e      	cmp	r6, r3
 8016396:	bfd4      	ite	le
 8016398:	ebc7 0706 	rsble	r7, r7, r6
 801639c:	ebc7 0703 	rsbgt	r7, r7, r3
 80163a0:	2f00      	cmp	r7, #0
 80163a2:	f340 80ec 	ble.w	801657e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80163a6:	1bed      	subs	r5, r5, r7
 80163a8:	fb08 f305 	mul.w	r3, r8, r5
 80163ac:	930d      	str	r3, [sp, #52]	; 0x34
 80163ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80163b0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80163b4:	930e      	str	r3, [sp, #56]	; 0x38
 80163b6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80163b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80163bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80163be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	9310      	str	r3, [sp, #64]	; 0x40
 80163c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f040 80de 	bne.w	8016588 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 80163cc:	4b7c      	ldr	r3, [pc, #496]	; (80165c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80163ce:	6818      	ldr	r0, [r3, #0]
 80163d0:	6803      	ldr	r3, [r0, #0]
 80163d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163d4:	4798      	blx	r3
 80163d6:	2301      	movs	r3, #1
 80163d8:	4a7a      	ldr	r2, [pc, #488]	; (80165c4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 80163da:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 80163de:	fb07 9b1b 	mls	fp, r7, fp, r9
 80163e2:	fa03 f308 	lsl.w	r3, r3, r8
 80163e6:	8811      	ldrh	r1, [r2, #0]
 80163e8:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 80163ec:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 80163f0:	3b01      	subs	r3, #1
 80163f2:	fb06 bb07 	mla	fp, r6, r7, fp
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	930a      	str	r3, [sp, #40]	; 0x28
 80163fa:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 80163fe:	fb01 2303 	mla	r3, r1, r3, r2
 8016402:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016406:	18c3      	adds	r3, r0, r3
 8016408:	9309      	str	r3, [sp, #36]	; 0x24
 801640a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801640c:	781a      	ldrb	r2, [r3, #0]
 801640e:	4122      	asrs	r2, r4
 8016410:	b2d2      	uxtb	r2, r2
 8016412:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8016416:	f0c0 80d7 	bcc.w	80165c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801641a:	46be      	mov	lr, r7
 801641c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801641e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8016422:	f0c0 80ba 	bcc.w	801659a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8016426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016428:	4013      	ands	r3, r2
 801642a:	d041      	beq.n	80164b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801642c:	20ff      	movs	r0, #255	; 0xff
 801642e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016430:	fb90 f5f5 	sdiv	r5, r0, r5
 8016434:	436b      	muls	r3, r5
 8016436:	2bfe      	cmp	r3, #254	; 0xfe
 8016438:	dd03      	ble.n	8016442 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801643a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801643c:	4285      	cmp	r5, r0
 801643e:	f000 80a5 	beq.w	801658c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8016442:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016444:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016446:	fb15 f303 	smulbb	r3, r5, r3
 801644a:	b29b      	uxth	r3, r3
 801644c:	1c5d      	adds	r5, r3, #1
 801644e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8016452:	780d      	ldrb	r5, [r1, #0]
 8016454:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8016458:	fa1f fc83 	uxth.w	ip, r3
 801645c:	43db      	mvns	r3, r3
 801645e:	fb10 f90c 	smulbb	r9, r0, ip
 8016462:	b2db      	uxtb	r3, r3
 8016464:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016466:	fb05 9503 	mla	r5, r5, r3, r9
 801646a:	b2ad      	uxth	r5, r5
 801646c:	f105 0901 	add.w	r9, r5, #1
 8016470:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016474:	fb10 f90c 	smulbb	r9, r0, ip
 8016478:	980e      	ldr	r0, [sp, #56]	; 0x38
 801647a:	122d      	asrs	r5, r5, #8
 801647c:	fb10 fc0c 	smulbb	ip, r0, ip
 8016480:	700d      	strb	r5, [r1, #0]
 8016482:	784d      	ldrb	r5, [r1, #1]
 8016484:	fb05 9503 	mla	r5, r5, r3, r9
 8016488:	b2ad      	uxth	r5, r5
 801648a:	f105 0901 	add.w	r9, r5, #1
 801648e:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8016492:	122d      	asrs	r5, r5, #8
 8016494:	704d      	strb	r5, [r1, #1]
 8016496:	788d      	ldrb	r5, [r1, #2]
 8016498:	fb05 cc03 	mla	ip, r5, r3, ip
 801649c:	fa1f fc8c 	uxth.w	ip, ip
 80164a0:	f10c 0301 	add.w	r3, ip, #1
 80164a4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80164a8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80164ac:	f881 c002 	strb.w	ip, [r1, #2]
 80164b0:	4444      	add	r4, r8
 80164b2:	4431      	add	r1, r6
 80164b4:	b2a4      	uxth	r4, r4
 80164b6:	2c07      	cmp	r4, #7
 80164b8:	bf89      	itett	hi
 80164ba:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 80164bc:	fa42 f208 	asrls.w	r2, r2, r8
 80164c0:	2400      	movhi	r4, #0
 80164c2:	785a      	ldrbhi	r2, [r3, #1]
 80164c4:	bf8a      	itet	hi
 80164c6:	3301      	addhi	r3, #1
 80164c8:	b2d2      	uxtbls	r2, r2
 80164ca:	9326      	strhi	r3, [sp, #152]	; 0x98
 80164cc:	e7a7      	b.n	801641e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80164ce:	441e      	add	r6, r3
 80164d0:	b236      	sxth	r6, r6
 80164d2:	e6ed      	b.n	80162b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80164d4:	f1b9 0f01 	cmp.w	r9, #1
 80164d8:	f47f af28 	bne.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80164dc:	f1bb 0f01 	cmp.w	fp, #1
 80164e0:	f47f af24 	bne.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80164e4:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 80165c0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 80164e8:	f8db 0000 	ldr.w	r0, [fp]
 80164ec:	6803      	ldr	r3, [r0, #0]
 80164ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164f0:	4798      	blx	r3
 80164f2:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80164f6:	465a      	mov	r2, fp
 80164f8:	d006      	beq.n	8016508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 80164fa:	f1b8 0f04 	cmp.w	r8, #4
 80164fe:	d141      	bne.n	8016584 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8016500:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016502:	3300      	adds	r3, #0
 8016504:	bf18      	it	ne
 8016506:	2301      	movne	r3, #1
 8016508:	0580      	lsls	r0, r0, #22
 801650a:	d566      	bpl.n	80165da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801650c:	f1b8 0f08 	cmp.w	r8, #8
 8016510:	d163      	bne.n	80165da <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8016512:	2b00      	cmp	r3, #0
 8016514:	bf0c      	ite	eq
 8016516:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801651a:	f44f 7180 	movne.w	r1, #256	; 0x100
 801651e:	2f00      	cmp	r7, #0
 8016520:	f47f af04 	bne.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016524:	2c00      	cmp	r4, #0
 8016526:	f47f af01 	bne.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801652a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801652c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801652e:	18f3      	adds	r3, r6, r3
 8016530:	4283      	cmp	r3, r0
 8016532:	f73f aefb 	bgt.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016536:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016538:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801653a:	4403      	add	r3, r0
 801653c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801653e:	4283      	cmp	r3, r0
 8016540:	f73f aef4 	bgt.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8016544:	f1b8 0f08 	cmp.w	r8, #8
 8016548:	6810      	ldr	r0, [r2, #0]
 801654a:	f04f 0600 	mov.w	r6, #0
 801654e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8016552:	bf18      	it	ne
 8016554:	3501      	addne	r5, #1
 8016556:	6804      	ldr	r4, [r0, #0]
 8016558:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 801655c:	bf18      	it	ne
 801655e:	f025 0501 	bicne.w	r5, r5, #1
 8016562:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8016566:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016568:	bf18      	it	ne
 801656a:	b2ad      	uxthne	r5, r5
 801656c:	9104      	str	r1, [sp, #16]
 801656e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8016570:	e9cd 5a00 	strd	r5, sl, [sp]
 8016574:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8016578:	9926      	ldr	r1, [sp, #152]	; 0x98
 801657a:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801657c:	47a0      	blx	r4
 801657e:	b017      	add	sp, #92	; 0x5c
 8016580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016584:	2300      	movs	r3, #0
 8016586:	e7bf      	b.n	8016508 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8016588:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801658a:	e724      	b.n	80163d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801658c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801658e:	700b      	strb	r3, [r1, #0]
 8016590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016592:	704b      	strb	r3, [r1, #1]
 8016594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016596:	708b      	strb	r3, [r1, #2]
 8016598:	e78a      	b.n	80164b0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801659a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801659c:	b153      	cbz	r3, 80165b4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801659e:	441c      	add	r4, r3
 80165a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80165a2:	b2a4      	uxth	r4, r4
 80165a4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80165a8:	f004 0407 	and.w	r4, r4, #7
 80165ac:	781a      	ldrb	r2, [r3, #0]
 80165ae:	9326      	str	r3, [sp, #152]	; 0x98
 80165b0:	4122      	asrs	r2, r4
 80165b2:	b2d2      	uxtb	r2, r2
 80165b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165b6:	445b      	add	r3, fp
 80165b8:	9309      	str	r3, [sp, #36]	; 0x24
 80165ba:	e72a      	b.n	8016412 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 80165bc:	2401a9b0 	.word	0x2401a9b0
 80165c0:	2401a9b8 	.word	0x2401a9b8
 80165c4:	2401a9b2 	.word	0x2401a9b2
 80165c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d1d7      	bne.n	801657e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80165ce:	4b06      	ldr	r3, [pc, #24]	; (80165e8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 80165d0:	6818      	ldr	r0, [r3, #0]
 80165d2:	6803      	ldr	r3, [r0, #0]
 80165d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165d6:	4798      	blx	r3
 80165d8:	e7d1      	b.n	801657e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 80165da:	2b00      	cmp	r3, #0
 80165dc:	f43f aea6 	beq.w	801632c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80165e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80165e4:	e79b      	b.n	801651e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 80165e6:	bf00      	nop
 80165e8:	2401a9b8 	.word	0x2401a9b8

080165ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80165ec:	b538      	push	{r3, r4, r5, lr}
 80165ee:	4c15      	ldr	r4, [pc, #84]	; (8016644 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 80165f0:	4605      	mov	r5, r0
 80165f2:	7823      	ldrb	r3, [r4, #0]
 80165f4:	f3bf 8f5b 	dmb	ish
 80165f8:	07da      	lsls	r2, r3, #31
 80165fa:	d40b      	bmi.n	8016614 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 80165fc:	4620      	mov	r0, r4
 80165fe:	f005 fb4c 	bl	801bc9a <__cxa_guard_acquire>
 8016602:	b138      	cbz	r0, 8016614 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8016604:	4620      	mov	r0, r4
 8016606:	f005 fb54 	bl	801bcb2 <__cxa_guard_release>
 801660a:	4a0f      	ldr	r2, [pc, #60]	; (8016648 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801660c:	490f      	ldr	r1, [pc, #60]	; (801664c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801660e:	4810      	ldr	r0, [pc, #64]	; (8016650 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8016610:	f005 fb3c 	bl	801bc8c <__aeabi_atexit>
 8016614:	4c0f      	ldr	r4, [pc, #60]	; (8016654 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8016616:	7823      	ldrb	r3, [r4, #0]
 8016618:	f3bf 8f5b 	dmb	ish
 801661c:	07db      	lsls	r3, r3, #31
 801661e:	d40b      	bmi.n	8016638 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016620:	4620      	mov	r0, r4
 8016622:	f005 fb3a 	bl	801bc9a <__cxa_guard_acquire>
 8016626:	b138      	cbz	r0, 8016638 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8016628:	4620      	mov	r0, r4
 801662a:	f005 fb42 	bl	801bcb2 <__cxa_guard_release>
 801662e:	4a06      	ldr	r2, [pc, #24]	; (8016648 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8016630:	4909      	ldr	r1, [pc, #36]	; (8016658 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8016632:	480a      	ldr	r0, [pc, #40]	; (801665c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8016634:	f005 fb2a 	bl	801bc8c <__aeabi_atexit>
 8016638:	4b05      	ldr	r3, [pc, #20]	; (8016650 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801663a:	612b      	str	r3, [r5, #16]
 801663c:	4b07      	ldr	r3, [pc, #28]	; (801665c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801663e:	616b      	str	r3, [r5, #20]
 8016640:	bd38      	pop	{r3, r4, r5, pc}
 8016642:	bf00      	nop
 8016644:	2401aa90 	.word	0x2401aa90
 8016648:	24000000 	.word	0x24000000
 801664c:	08014435 	.word	0x08014435
 8016650:	2400006c 	.word	0x2400006c
 8016654:	2401aa94 	.word	0x2401aa94
 8016658:	08014433 	.word	0x08014433
 801665c:	24000070 	.word	0x24000070

08016660 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	4c15      	ldr	r4, [pc, #84]	; (80166b8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8016664:	4605      	mov	r5, r0
 8016666:	7823      	ldrb	r3, [r4, #0]
 8016668:	f3bf 8f5b 	dmb	ish
 801666c:	07da      	lsls	r2, r3, #31
 801666e:	d40b      	bmi.n	8016688 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016670:	4620      	mov	r0, r4
 8016672:	f005 fb12 	bl	801bc9a <__cxa_guard_acquire>
 8016676:	b138      	cbz	r0, 8016688 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8016678:	4620      	mov	r0, r4
 801667a:	f005 fb1a 	bl	801bcb2 <__cxa_guard_release>
 801667e:	4a0f      	ldr	r2, [pc, #60]	; (80166bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8016680:	490f      	ldr	r1, [pc, #60]	; (80166c0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8016682:	4810      	ldr	r0, [pc, #64]	; (80166c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8016684:	f005 fb02 	bl	801bc8c <__aeabi_atexit>
 8016688:	4c0f      	ldr	r4, [pc, #60]	; (80166c8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801668a:	7823      	ldrb	r3, [r4, #0]
 801668c:	f3bf 8f5b 	dmb	ish
 8016690:	07db      	lsls	r3, r3, #31
 8016692:	d40b      	bmi.n	80166ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8016694:	4620      	mov	r0, r4
 8016696:	f005 fb00 	bl	801bc9a <__cxa_guard_acquire>
 801669a:	b138      	cbz	r0, 80166ac <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801669c:	4620      	mov	r0, r4
 801669e:	f005 fb08 	bl	801bcb2 <__cxa_guard_release>
 80166a2:	4a06      	ldr	r2, [pc, #24]	; (80166bc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80166a4:	4909      	ldr	r1, [pc, #36]	; (80166cc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80166a6:	480a      	ldr	r0, [pc, #40]	; (80166d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80166a8:	f005 faf0 	bl	801bc8c <__aeabi_atexit>
 80166ac:	4b05      	ldr	r3, [pc, #20]	; (80166c4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80166ae:	60ab      	str	r3, [r5, #8]
 80166b0:	4b07      	ldr	r3, [pc, #28]	; (80166d0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80166b2:	60eb      	str	r3, [r5, #12]
 80166b4:	bd38      	pop	{r3, r4, r5, pc}
 80166b6:	bf00      	nop
 80166b8:	2401aa70 	.word	0x2401aa70
 80166bc:	24000000 	.word	0x24000000
 80166c0:	08014439 	.word	0x08014439
 80166c4:	2400004c 	.word	0x2400004c
 80166c8:	2401aa74 	.word	0x2401aa74
 80166cc:	08014437 	.word	0x08014437
 80166d0:	24000050 	.word	0x24000050

080166d4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 80166d4:	b510      	push	{r4, lr}
 80166d6:	4604      	mov	r4, r0
 80166d8:	f7ff ff88 	bl	80165ec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80166dc:	4620      	mov	r0, r4
 80166de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166e2:	f7ff bfbd 	b.w	8016660 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080166e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80166e8:	b538      	push	{r3, r4, r5, lr}
 80166ea:	4c15      	ldr	r4, [pc, #84]	; (8016740 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 80166ec:	4605      	mov	r5, r0
 80166ee:	7823      	ldrb	r3, [r4, #0]
 80166f0:	f3bf 8f5b 	dmb	ish
 80166f4:	07da      	lsls	r2, r3, #31
 80166f6:	d40b      	bmi.n	8016710 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 80166f8:	4620      	mov	r0, r4
 80166fa:	f005 face 	bl	801bc9a <__cxa_guard_acquire>
 80166fe:	b138      	cbz	r0, 8016710 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8016700:	4620      	mov	r0, r4
 8016702:	f005 fad6 	bl	801bcb2 <__cxa_guard_release>
 8016706:	4a0f      	ldr	r2, [pc, #60]	; (8016744 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8016708:	490f      	ldr	r1, [pc, #60]	; (8016748 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801670a:	4810      	ldr	r0, [pc, #64]	; (801674c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801670c:	f005 fabe 	bl	801bc8c <__aeabi_atexit>
 8016710:	4c0f      	ldr	r4, [pc, #60]	; (8016750 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8016712:	7823      	ldrb	r3, [r4, #0]
 8016714:	f3bf 8f5b 	dmb	ish
 8016718:	07db      	lsls	r3, r3, #31
 801671a:	d40b      	bmi.n	8016734 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801671c:	4620      	mov	r0, r4
 801671e:	f005 fabc 	bl	801bc9a <__cxa_guard_acquire>
 8016722:	b138      	cbz	r0, 8016734 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8016724:	4620      	mov	r0, r4
 8016726:	f005 fac4 	bl	801bcb2 <__cxa_guard_release>
 801672a:	4a06      	ldr	r2, [pc, #24]	; (8016744 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801672c:	4909      	ldr	r1, [pc, #36]	; (8016754 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801672e:	480a      	ldr	r0, [pc, #40]	; (8016758 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8016730:	f005 faac 	bl	801bc8c <__aeabi_atexit>
 8016734:	4b05      	ldr	r3, [pc, #20]	; (801674c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8016736:	622b      	str	r3, [r5, #32]
 8016738:	4b07      	ldr	r3, [pc, #28]	; (8016758 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801673a:	626b      	str	r3, [r5, #36]	; 0x24
 801673c:	bd38      	pop	{r3, r4, r5, pc}
 801673e:	bf00      	nop
 8016740:	2401aa98 	.word	0x2401aa98
 8016744:	24000000 	.word	0x24000000
 8016748:	0801442d 	.word	0x0801442d
 801674c:	24000074 	.word	0x24000074
 8016750:	2401aa9c 	.word	0x2401aa9c
 8016754:	0801442b 	.word	0x0801442b
 8016758:	24000078 	.word	0x24000078

0801675c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801675c:	b538      	push	{r3, r4, r5, lr}
 801675e:	4c15      	ldr	r4, [pc, #84]	; (80167b4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8016760:	4605      	mov	r5, r0
 8016762:	7823      	ldrb	r3, [r4, #0]
 8016764:	f3bf 8f5b 	dmb	ish
 8016768:	07da      	lsls	r2, r3, #31
 801676a:	d40b      	bmi.n	8016784 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801676c:	4620      	mov	r0, r4
 801676e:	f005 fa94 	bl	801bc9a <__cxa_guard_acquire>
 8016772:	b138      	cbz	r0, 8016784 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8016774:	4620      	mov	r0, r4
 8016776:	f005 fa9c 	bl	801bcb2 <__cxa_guard_release>
 801677a:	4a0f      	ldr	r2, [pc, #60]	; (80167b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801677c:	490f      	ldr	r1, [pc, #60]	; (80167bc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801677e:	4810      	ldr	r0, [pc, #64]	; (80167c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8016780:	f005 fa84 	bl	801bc8c <__aeabi_atexit>
 8016784:	4c0f      	ldr	r4, [pc, #60]	; (80167c4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8016786:	7823      	ldrb	r3, [r4, #0]
 8016788:	f3bf 8f5b 	dmb	ish
 801678c:	07db      	lsls	r3, r3, #31
 801678e:	d40b      	bmi.n	80167a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016790:	4620      	mov	r0, r4
 8016792:	f005 fa82 	bl	801bc9a <__cxa_guard_acquire>
 8016796:	b138      	cbz	r0, 80167a8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8016798:	4620      	mov	r0, r4
 801679a:	f005 fa8a 	bl	801bcb2 <__cxa_guard_release>
 801679e:	4a06      	ldr	r2, [pc, #24]	; (80167b8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 80167a0:	4909      	ldr	r1, [pc, #36]	; (80167c8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 80167a2:	480a      	ldr	r0, [pc, #40]	; (80167cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80167a4:	f005 fa72 	bl	801bc8c <__aeabi_atexit>
 80167a8:	4b05      	ldr	r3, [pc, #20]	; (80167c0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 80167aa:	61ab      	str	r3, [r5, #24]
 80167ac:	4b07      	ldr	r3, [pc, #28]	; (80167cc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 80167ae:	61eb      	str	r3, [r5, #28]
 80167b0:	bd38      	pop	{r3, r4, r5, pc}
 80167b2:	bf00      	nop
 80167b4:	2401aa78 	.word	0x2401aa78
 80167b8:	24000000 	.word	0x24000000
 80167bc:	08014431 	.word	0x08014431
 80167c0:	24000054 	.word	0x24000054
 80167c4:	2401aa7c 	.word	0x2401aa7c
 80167c8:	0801442f 	.word	0x0801442f
 80167cc:	24000058 	.word	0x24000058

080167d0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 80167d0:	b510      	push	{r4, lr}
 80167d2:	4604      	mov	r4, r0
 80167d4:	f7ff ff88 	bl	80166e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80167d8:	4620      	mov	r0, r4
 80167da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167de:	f7ff bfbd 	b.w	801675c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080167e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80167e4:	b538      	push	{r3, r4, r5, lr}
 80167e6:	4c15      	ldr	r4, [pc, #84]	; (801683c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80167e8:	4605      	mov	r5, r0
 80167ea:	7823      	ldrb	r3, [r4, #0]
 80167ec:	f3bf 8f5b 	dmb	ish
 80167f0:	07da      	lsls	r2, r3, #31
 80167f2:	d40b      	bmi.n	801680c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80167f4:	4620      	mov	r0, r4
 80167f6:	f005 fa50 	bl	801bc9a <__cxa_guard_acquire>
 80167fa:	b138      	cbz	r0, 801680c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80167fc:	4620      	mov	r0, r4
 80167fe:	f005 fa58 	bl	801bcb2 <__cxa_guard_release>
 8016802:	4a0f      	ldr	r2, [pc, #60]	; (8016840 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016804:	490f      	ldr	r1, [pc, #60]	; (8016844 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8016806:	4810      	ldr	r0, [pc, #64]	; (8016848 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016808:	f005 fa40 	bl	801bc8c <__aeabi_atexit>
 801680c:	4c0f      	ldr	r4, [pc, #60]	; (801684c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801680e:	7823      	ldrb	r3, [r4, #0]
 8016810:	f3bf 8f5b 	dmb	ish
 8016814:	07db      	lsls	r3, r3, #31
 8016816:	d40b      	bmi.n	8016830 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016818:	4620      	mov	r0, r4
 801681a:	f005 fa3e 	bl	801bc9a <__cxa_guard_acquire>
 801681e:	b138      	cbz	r0, 8016830 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8016820:	4620      	mov	r0, r4
 8016822:	f005 fa46 	bl	801bcb2 <__cxa_guard_release>
 8016826:	4a06      	ldr	r2, [pc, #24]	; (8016840 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8016828:	4909      	ldr	r1, [pc, #36]	; (8016850 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801682a:	480a      	ldr	r0, [pc, #40]	; (8016854 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801682c:	f005 fa2e 	bl	801bc8c <__aeabi_atexit>
 8016830:	4b05      	ldr	r3, [pc, #20]	; (8016848 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8016832:	632b      	str	r3, [r5, #48]	; 0x30
 8016834:	4b07      	ldr	r3, [pc, #28]	; (8016854 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8016836:	636b      	str	r3, [r5, #52]	; 0x34
 8016838:	bd38      	pop	{r3, r4, r5, pc}
 801683a:	bf00      	nop
 801683c:	2401aa80 	.word	0x2401aa80
 8016840:	24000000 	.word	0x24000000
 8016844:	08014425 	.word	0x08014425
 8016848:	2400005c 	.word	0x2400005c
 801684c:	2401aa84 	.word	0x2401aa84
 8016850:	08014423 	.word	0x08014423
 8016854:	24000060 	.word	0x24000060

08016858 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8016858:	b538      	push	{r3, r4, r5, lr}
 801685a:	4c15      	ldr	r4, [pc, #84]	; (80168b0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801685c:	4605      	mov	r5, r0
 801685e:	7823      	ldrb	r3, [r4, #0]
 8016860:	f3bf 8f5b 	dmb	ish
 8016864:	07da      	lsls	r2, r3, #31
 8016866:	d40b      	bmi.n	8016880 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016868:	4620      	mov	r0, r4
 801686a:	f005 fa16 	bl	801bc9a <__cxa_guard_acquire>
 801686e:	b138      	cbz	r0, 8016880 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8016870:	4620      	mov	r0, r4
 8016872:	f005 fa1e 	bl	801bcb2 <__cxa_guard_release>
 8016876:	4a0f      	ldr	r2, [pc, #60]	; (80168b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8016878:	490f      	ldr	r1, [pc, #60]	; (80168b8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801687a:	4810      	ldr	r0, [pc, #64]	; (80168bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801687c:	f005 fa06 	bl	801bc8c <__aeabi_atexit>
 8016880:	4c0f      	ldr	r4, [pc, #60]	; (80168c0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8016882:	7823      	ldrb	r3, [r4, #0]
 8016884:	f3bf 8f5b 	dmb	ish
 8016888:	07db      	lsls	r3, r3, #31
 801688a:	d40b      	bmi.n	80168a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801688c:	4620      	mov	r0, r4
 801688e:	f005 fa04 	bl	801bc9a <__cxa_guard_acquire>
 8016892:	b138      	cbz	r0, 80168a4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8016894:	4620      	mov	r0, r4
 8016896:	f005 fa0c 	bl	801bcb2 <__cxa_guard_release>
 801689a:	4a06      	ldr	r2, [pc, #24]	; (80168b4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801689c:	4909      	ldr	r1, [pc, #36]	; (80168c4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801689e:	480a      	ldr	r0, [pc, #40]	; (80168c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80168a0:	f005 f9f4 	bl	801bc8c <__aeabi_atexit>
 80168a4:	4b05      	ldr	r3, [pc, #20]	; (80168bc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 80168a6:	62ab      	str	r3, [r5, #40]	; 0x28
 80168a8:	4b07      	ldr	r3, [pc, #28]	; (80168c8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 80168aa:	62eb      	str	r3, [r5, #44]	; 0x2c
 80168ac:	bd38      	pop	{r3, r4, r5, pc}
 80168ae:	bf00      	nop
 80168b0:	2401aa58 	.word	0x2401aa58
 80168b4:	24000000 	.word	0x24000000
 80168b8:	08014429 	.word	0x08014429
 80168bc:	24000034 	.word	0x24000034
 80168c0:	2401aa5c 	.word	0x2401aa5c
 80168c4:	08014427 	.word	0x08014427
 80168c8:	24000038 	.word	0x24000038

080168cc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 80168cc:	b510      	push	{r4, lr}
 80168ce:	4604      	mov	r4, r0
 80168d0:	f7ff ff88 	bl	80167e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80168d4:	4620      	mov	r0, r4
 80168d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168da:	f7ff bfbd 	b.w	8016858 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080168e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80168e0:	b538      	push	{r3, r4, r5, lr}
 80168e2:	4c15      	ldr	r4, [pc, #84]	; (8016938 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 80168e4:	4605      	mov	r5, r0
 80168e6:	7823      	ldrb	r3, [r4, #0]
 80168e8:	f3bf 8f5b 	dmb	ish
 80168ec:	07da      	lsls	r2, r3, #31
 80168ee:	d40b      	bmi.n	8016908 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80168f0:	4620      	mov	r0, r4
 80168f2:	f005 f9d2 	bl	801bc9a <__cxa_guard_acquire>
 80168f6:	b138      	cbz	r0, 8016908 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80168f8:	4620      	mov	r0, r4
 80168fa:	f005 f9da 	bl	801bcb2 <__cxa_guard_release>
 80168fe:	4a0f      	ldr	r2, [pc, #60]	; (801693c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016900:	490f      	ldr	r1, [pc, #60]	; (8016940 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8016902:	4810      	ldr	r0, [pc, #64]	; (8016944 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8016904:	f005 f9c2 	bl	801bc8c <__aeabi_atexit>
 8016908:	4c0f      	ldr	r4, [pc, #60]	; (8016948 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801690a:	7823      	ldrb	r3, [r4, #0]
 801690c:	f3bf 8f5b 	dmb	ish
 8016910:	07db      	lsls	r3, r3, #31
 8016912:	d40b      	bmi.n	801692c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8016914:	4620      	mov	r0, r4
 8016916:	f005 f9c0 	bl	801bc9a <__cxa_guard_acquire>
 801691a:	b138      	cbz	r0, 801692c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801691c:	4620      	mov	r0, r4
 801691e:	f005 f9c8 	bl	801bcb2 <__cxa_guard_release>
 8016922:	4a06      	ldr	r2, [pc, #24]	; (801693c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8016924:	4909      	ldr	r1, [pc, #36]	; (801694c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8016926:	480a      	ldr	r0, [pc, #40]	; (8016950 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016928:	f005 f9b0 	bl	801bc8c <__aeabi_atexit>
 801692c:	4b05      	ldr	r3, [pc, #20]	; (8016944 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801692e:	642b      	str	r3, [r5, #64]	; 0x40
 8016930:	4b07      	ldr	r3, [pc, #28]	; (8016950 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8016932:	646b      	str	r3, [r5, #68]	; 0x44
 8016934:	bd38      	pop	{r3, r4, r5, pc}
 8016936:	bf00      	nop
 8016938:	2401aa88 	.word	0x2401aa88
 801693c:	24000000 	.word	0x24000000
 8016940:	0801441d 	.word	0x0801441d
 8016944:	24000064 	.word	0x24000064
 8016948:	2401aa8c 	.word	0x2401aa8c
 801694c:	0801441b 	.word	0x0801441b
 8016950:	24000068 	.word	0x24000068

08016954 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8016954:	b538      	push	{r3, r4, r5, lr}
 8016956:	4c15      	ldr	r4, [pc, #84]	; (80169ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8016958:	4605      	mov	r5, r0
 801695a:	7823      	ldrb	r3, [r4, #0]
 801695c:	f3bf 8f5b 	dmb	ish
 8016960:	07da      	lsls	r2, r3, #31
 8016962:	d40b      	bmi.n	801697c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8016964:	4620      	mov	r0, r4
 8016966:	f005 f998 	bl	801bc9a <__cxa_guard_acquire>
 801696a:	b138      	cbz	r0, 801697c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801696c:	4620      	mov	r0, r4
 801696e:	f005 f9a0 	bl	801bcb2 <__cxa_guard_release>
 8016972:	4a0f      	ldr	r2, [pc, #60]	; (80169b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016974:	490f      	ldr	r1, [pc, #60]	; (80169b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8016976:	4810      	ldr	r0, [pc, #64]	; (80169b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8016978:	f005 f988 	bl	801bc8c <__aeabi_atexit>
 801697c:	4c0f      	ldr	r4, [pc, #60]	; (80169bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801697e:	7823      	ldrb	r3, [r4, #0]
 8016980:	f3bf 8f5b 	dmb	ish
 8016984:	07db      	lsls	r3, r3, #31
 8016986:	d40b      	bmi.n	80169a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016988:	4620      	mov	r0, r4
 801698a:	f005 f986 	bl	801bc9a <__cxa_guard_acquire>
 801698e:	b138      	cbz	r0, 80169a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8016990:	4620      	mov	r0, r4
 8016992:	f005 f98e 	bl	801bcb2 <__cxa_guard_release>
 8016996:	4a06      	ldr	r2, [pc, #24]	; (80169b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8016998:	4909      	ldr	r1, [pc, #36]	; (80169c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801699a:	480a      	ldr	r0, [pc, #40]	; (80169c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801699c:	f005 f976 	bl	801bc8c <__aeabi_atexit>
 80169a0:	4b05      	ldr	r3, [pc, #20]	; (80169b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80169a2:	63ab      	str	r3, [r5, #56]	; 0x38
 80169a4:	4b07      	ldr	r3, [pc, #28]	; (80169c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 80169a6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80169a8:	bd38      	pop	{r3, r4, r5, pc}
 80169aa:	bf00      	nop
 80169ac:	2401aa68 	.word	0x2401aa68
 80169b0:	24000000 	.word	0x24000000
 80169b4:	08014421 	.word	0x08014421
 80169b8:	24000044 	.word	0x24000044
 80169bc:	2401aa6c 	.word	0x2401aa6c
 80169c0:	0801441f 	.word	0x0801441f
 80169c4:	24000048 	.word	0x24000048

080169c8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 80169c8:	b510      	push	{r4, lr}
 80169ca:	4604      	mov	r4, r0
 80169cc:	f7ff ff88 	bl	80168e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 80169d0:	4620      	mov	r0, r4
 80169d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169d6:	f7ff bfbd 	b.w	8016954 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

080169dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 80169dc:	b538      	push	{r3, r4, r5, lr}
 80169de:	4c15      	ldr	r4, [pc, #84]	; (8016a34 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 80169e0:	4605      	mov	r5, r0
 80169e2:	7823      	ldrb	r3, [r4, #0]
 80169e4:	f3bf 8f5b 	dmb	ish
 80169e8:	07da      	lsls	r2, r3, #31
 80169ea:	d40b      	bmi.n	8016a04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80169ec:	4620      	mov	r0, r4
 80169ee:	f005 f954 	bl	801bc9a <__cxa_guard_acquire>
 80169f2:	b138      	cbz	r0, 8016a04 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 80169f4:	4620      	mov	r0, r4
 80169f6:	f005 f95c 	bl	801bcb2 <__cxa_guard_release>
 80169fa:	4a0f      	ldr	r2, [pc, #60]	; (8016a38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80169fc:	490f      	ldr	r1, [pc, #60]	; (8016a3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 80169fe:	4810      	ldr	r0, [pc, #64]	; (8016a40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016a00:	f005 f944 	bl	801bc8c <__aeabi_atexit>
 8016a04:	4c0f      	ldr	r4, [pc, #60]	; (8016a44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8016a06:	7823      	ldrb	r3, [r4, #0]
 8016a08:	f3bf 8f5b 	dmb	ish
 8016a0c:	07db      	lsls	r3, r3, #31
 8016a0e:	d40b      	bmi.n	8016a28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016a10:	4620      	mov	r0, r4
 8016a12:	f005 f942 	bl	801bc9a <__cxa_guard_acquire>
 8016a16:	b138      	cbz	r0, 8016a28 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8016a18:	4620      	mov	r0, r4
 8016a1a:	f005 f94a 	bl	801bcb2 <__cxa_guard_release>
 8016a1e:	4a06      	ldr	r2, [pc, #24]	; (8016a38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8016a20:	4909      	ldr	r1, [pc, #36]	; (8016a48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8016a22:	480a      	ldr	r0, [pc, #40]	; (8016a4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016a24:	f005 f932 	bl	801bc8c <__aeabi_atexit>
 8016a28:	4b05      	ldr	r3, [pc, #20]	; (8016a40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8016a2a:	652b      	str	r3, [r5, #80]	; 0x50
 8016a2c:	4b07      	ldr	r3, [pc, #28]	; (8016a4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8016a2e:	656b      	str	r3, [r5, #84]	; 0x54
 8016a30:	bd38      	pop	{r3, r4, r5, pc}
 8016a32:	bf00      	nop
 8016a34:	2401aa60 	.word	0x2401aa60
 8016a38:	24000000 	.word	0x24000000
 8016a3c:	08014415 	.word	0x08014415
 8016a40:	2400003c 	.word	0x2400003c
 8016a44:	2401aa64 	.word	0x2401aa64
 8016a48:	08014413 	.word	0x08014413
 8016a4c:	24000040 	.word	0x24000040

08016a50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8016a50:	b538      	push	{r3, r4, r5, lr}
 8016a52:	4c15      	ldr	r4, [pc, #84]	; (8016aa8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8016a54:	4605      	mov	r5, r0
 8016a56:	7823      	ldrb	r3, [r4, #0]
 8016a58:	f3bf 8f5b 	dmb	ish
 8016a5c:	07da      	lsls	r2, r3, #31
 8016a5e:	d40b      	bmi.n	8016a78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016a60:	4620      	mov	r0, r4
 8016a62:	f005 f91a 	bl	801bc9a <__cxa_guard_acquire>
 8016a66:	b138      	cbz	r0, 8016a78 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8016a68:	4620      	mov	r0, r4
 8016a6a:	f005 f922 	bl	801bcb2 <__cxa_guard_release>
 8016a6e:	4a0f      	ldr	r2, [pc, #60]	; (8016aac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016a70:	490f      	ldr	r1, [pc, #60]	; (8016ab0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8016a72:	4810      	ldr	r0, [pc, #64]	; (8016ab4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016a74:	f005 f90a 	bl	801bc8c <__aeabi_atexit>
 8016a78:	4c0f      	ldr	r4, [pc, #60]	; (8016ab8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8016a7a:	7823      	ldrb	r3, [r4, #0]
 8016a7c:	f3bf 8f5b 	dmb	ish
 8016a80:	07db      	lsls	r3, r3, #31
 8016a82:	d40b      	bmi.n	8016a9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016a84:	4620      	mov	r0, r4
 8016a86:	f005 f908 	bl	801bc9a <__cxa_guard_acquire>
 8016a8a:	b138      	cbz	r0, 8016a9c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	f005 f910 	bl	801bcb2 <__cxa_guard_release>
 8016a92:	4a06      	ldr	r2, [pc, #24]	; (8016aac <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8016a94:	4909      	ldr	r1, [pc, #36]	; (8016abc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8016a96:	480a      	ldr	r0, [pc, #40]	; (8016ac0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016a98:	f005 f8f8 	bl	801bc8c <__aeabi_atexit>
 8016a9c:	4b05      	ldr	r3, [pc, #20]	; (8016ab4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8016a9e:	64ab      	str	r3, [r5, #72]	; 0x48
 8016aa0:	4b07      	ldr	r3, [pc, #28]	; (8016ac0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8016aa2:	64eb      	str	r3, [r5, #76]	; 0x4c
 8016aa4:	bd38      	pop	{r3, r4, r5, pc}
 8016aa6:	bf00      	nop
 8016aa8:	2401aa50 	.word	0x2401aa50
 8016aac:	24000000 	.word	0x24000000
 8016ab0:	08014419 	.word	0x08014419
 8016ab4:	2400002c 	.word	0x2400002c
 8016ab8:	2401aa54 	.word	0x2401aa54
 8016abc:	08014417 	.word	0x08014417
 8016ac0:	24000030 	.word	0x24000030

08016ac4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	f7ff ff88 	bl	80169dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8016acc:	4620      	mov	r0, r4
 8016ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ad2:	f7ff bfbd 	b.w	8016a50 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08016ad6 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8016ad6:	b510      	push	{r4, lr}
 8016ad8:	4604      	mov	r4, r0
 8016ada:	f7ff fff3 	bl	8016ac4 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8016ade:	4620      	mov	r0, r4
 8016ae0:	f7ff ff72 	bl	80169c8 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	f7ff fe73 	bl	80167d0 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8016aea:	4620      	mov	r0, r4
 8016aec:	f7ff fdf2 	bl	80166d4 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8016af0:	4620      	mov	r0, r4
 8016af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016af6:	f7ff bee9 	b.w	80168cc <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08016afc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8016afc:	b538      	push	{r3, r4, r5, lr}
 8016afe:	4c0b      	ldr	r4, [pc, #44]	; (8016b2c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 8016b00:	4605      	mov	r5, r0
 8016b02:	7823      	ldrb	r3, [r4, #0]
 8016b04:	f3bf 8f5b 	dmb	ish
 8016b08:	07db      	lsls	r3, r3, #31
 8016b0a:	d40b      	bmi.n	8016b24 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8016b0c:	4620      	mov	r0, r4
 8016b0e:	f005 f8c4 	bl	801bc9a <__cxa_guard_acquire>
 8016b12:	b138      	cbz	r0, 8016b24 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8016b14:	4620      	mov	r0, r4
 8016b16:	f005 f8cc 	bl	801bcb2 <__cxa_guard_release>
 8016b1a:	4a05      	ldr	r2, [pc, #20]	; (8016b30 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8016b1c:	4905      	ldr	r1, [pc, #20]	; (8016b34 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 8016b1e:	4806      	ldr	r0, [pc, #24]	; (8016b38 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8016b20:	f005 f8b4 	bl	801bc8c <__aeabi_atexit>
 8016b24:	4b04      	ldr	r3, [pc, #16]	; (8016b38 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 8016b26:	65ab      	str	r3, [r5, #88]	; 0x58
 8016b28:	bd38      	pop	{r3, r4, r5, pc}
 8016b2a:	bf00      	nop
 8016b2c:	2401aa44 	.word	0x2401aa44
 8016b30:	24000000 	.word	0x24000000
 8016b34:	08014411 	.word	0x08014411
 8016b38:	24000024 	.word	0x24000024

08016b3c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 8016b3c:	b538      	push	{r3, r4, r5, lr}
 8016b3e:	4c0b      	ldr	r4, [pc, #44]	; (8016b6c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 8016b40:	4605      	mov	r5, r0
 8016b42:	7823      	ldrb	r3, [r4, #0]
 8016b44:	f3bf 8f5b 	dmb	ish
 8016b48:	07db      	lsls	r3, r3, #31
 8016b4a:	d40b      	bmi.n	8016b64 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8016b4c:	4620      	mov	r0, r4
 8016b4e:	f005 f8a4 	bl	801bc9a <__cxa_guard_acquire>
 8016b52:	b138      	cbz	r0, 8016b64 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 8016b54:	4620      	mov	r0, r4
 8016b56:	f005 f8ac 	bl	801bcb2 <__cxa_guard_release>
 8016b5a:	4a05      	ldr	r2, [pc, #20]	; (8016b70 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 8016b5c:	4905      	ldr	r1, [pc, #20]	; (8016b74 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 8016b5e:	4806      	ldr	r0, [pc, #24]	; (8016b78 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8016b60:	f005 f894 	bl	801bc8c <__aeabi_atexit>
 8016b64:	4b04      	ldr	r3, [pc, #16]	; (8016b78 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 8016b66:	65eb      	str	r3, [r5, #92]	; 0x5c
 8016b68:	bd38      	pop	{r3, r4, r5, pc}
 8016b6a:	bf00      	nop
 8016b6c:	2401aa48 	.word	0x2401aa48
 8016b70:	24000000 	.word	0x24000000
 8016b74:	0801440f 	.word	0x0801440f
 8016b78:	24000028 	.word	0x24000028

08016b7c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 8016b7c:	b570      	push	{r4, r5, r6, lr}
 8016b7e:	4d0c      	ldr	r5, [pc, #48]	; (8016bb0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 8016b80:	4606      	mov	r6, r0
 8016b82:	4c0c      	ldr	r4, [pc, #48]	; (8016bb4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8016b84:	782b      	ldrb	r3, [r5, #0]
 8016b86:	f3bf 8f5b 	dmb	ish
 8016b8a:	f013 0f01 	tst.w	r3, #1
 8016b8e:	d10d      	bne.n	8016bac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8016b90:	4628      	mov	r0, r5
 8016b92:	f005 f882 	bl	801bc9a <__cxa_guard_acquire>
 8016b96:	b148      	cbz	r0, 8016bac <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8016b98:	4b07      	ldr	r3, [pc, #28]	; (8016bb8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	6023      	str	r3, [r4, #0]
 8016b9e:	f005 f888 	bl	801bcb2 <__cxa_guard_release>
 8016ba2:	4a06      	ldr	r2, [pc, #24]	; (8016bbc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8016ba4:	4620      	mov	r0, r4
 8016ba6:	4906      	ldr	r1, [pc, #24]	; (8016bc0 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8016ba8:	f005 f870 	bl	801bc8c <__aeabi_atexit>
 8016bac:	6634      	str	r4, [r6, #96]	; 0x60
 8016bae:	bd70      	pop	{r4, r5, r6, pc}
 8016bb0:	2401aa4c 	.word	0x2401aa4c
 8016bb4:	2401aaa0 	.word	0x2401aaa0
 8016bb8:	0801e68c 	.word	0x0801e68c
 8016bbc:	24000000 	.word	0x24000000
 8016bc0:	0801440d 	.word	0x0801440d

08016bc4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8016bc4:	b510      	push	{r4, lr}
 8016bc6:	4604      	mov	r4, r0
 8016bc8:	f7ff ff98 	bl	8016afc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8016bcc:	4620      	mov	r0, r4
 8016bce:	f7ff ffb5 	bl	8016b3c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016bd8:	f7ff bfd0 	b.w	8016b7c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08016bdc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8016bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be0:	b087      	sub	sp, #28
 8016be2:	788d      	ldrb	r5, [r1, #2]
 8016be4:	f891 9000 	ldrb.w	r9, [r1]
 8016be8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8016bec:	9501      	str	r5, [sp, #4]
 8016bee:	784d      	ldrb	r5, [r1, #1]
 8016bf0:	9203      	str	r2, [sp, #12]
 8016bf2:	9502      	str	r5, [sp, #8]
 8016bf4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8016bf8:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8016bfc:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8016c00:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8016c04:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8016c08:	fb06 0708 	mla	r7, r6, r8, r0
 8016c0c:	2e00      	cmp	r6, #0
 8016c0e:	eb02 0a07 	add.w	sl, r2, r7
 8016c12:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8016c16:	9d01      	ldr	r5, [sp, #4]
 8016c18:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8016c1c:	ea45 0509 	orr.w	r5, r5, r9
 8016c20:	9505      	str	r5, [sp, #20]
 8016c22:	f2c0 80b2 	blt.w	8016d8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8016c26:	45b3      	cmp	fp, r6
 8016c28:	f340 80af 	ble.w	8016d8a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	f2c0 80aa 	blt.w	8016d86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8016c32:	4580      	cmp	r8, r0
 8016c34:	f340 80a7 	ble.w	8016d86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8016c38:	9a03      	ldr	r2, [sp, #12]
 8016c3a:	5dd7      	ldrb	r7, [r2, r7]
 8016c3c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016c40:	441f      	add	r7, r3
 8016c42:	1c42      	adds	r2, r0, #1
 8016c44:	f100 80a4 	bmi.w	8016d90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8016c48:	4590      	cmp	r8, r2
 8016c4a:	f340 80a1 	ble.w	8016d90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8016c4e:	2c00      	cmp	r4, #0
 8016c50:	f000 809e 	beq.w	8016d90 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8016c54:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c5c:	441d      	add	r5, r3
 8016c5e:	3601      	adds	r6, #1
 8016c60:	f100 809a 	bmi.w	8016d98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8016c64:	45b3      	cmp	fp, r6
 8016c66:	f340 8097 	ble.w	8016d98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8016c6a:	f1bc 0f00 	cmp.w	ip, #0
 8016c6e:	f000 8093 	beq.w	8016d98 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8016c72:	2800      	cmp	r0, #0
 8016c74:	f2c0 808e 	blt.w	8016d94 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8016c78:	4580      	cmp	r8, r0
 8016c7a:	f340 808b 	ble.w	8016d94 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8016c7e:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8016c82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016c86:	441e      	add	r6, r3
 8016c88:	3001      	adds	r0, #1
 8016c8a:	f100 8088 	bmi.w	8016d9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8016c8e:	4580      	cmp	r8, r0
 8016c90:	f340 8085 	ble.w	8016d9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8016c94:	2c00      	cmp	r4, #0
 8016c96:	f000 8082 	beq.w	8016d9e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8016c9a:	44d0      	add	r8, sl
 8016c9c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8016ca0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016ca4:	4413      	add	r3, r2
 8016ca6:	b2a4      	uxth	r4, r4
 8016ca8:	f895 a000 	ldrb.w	sl, [r5]
 8016cac:	fa1f fc8c 	uxth.w	ip, ip
 8016cb0:	fb04 fb0c 	mul.w	fp, r4, ip
 8016cb4:	0124      	lsls	r4, r4, #4
 8016cb6:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8016cba:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8016cbe:	eba4 040b 	sub.w	r4, r4, fp
 8016cc2:	fa1f f08c 	uxth.w	r0, ip
 8016cc6:	b2a2      	uxth	r2, r4
 8016cc8:	783c      	ldrb	r4, [r7, #0]
 8016cca:	eba8 0800 	sub.w	r8, r8, r0
 8016cce:	fa1f fc8e 	uxth.w	ip, lr
 8016cd2:	fb02 fa0a 	mul.w	sl, r2, sl
 8016cd6:	ea6f 0e0e 	mvn.w	lr, lr
 8016cda:	fa1f f888 	uxth.w	r8, r8
 8016cde:	fa5f fe8e 	uxtb.w	lr, lr
 8016ce2:	fb08 aa04 	mla	sl, r8, r4, sl
 8016ce6:	7834      	ldrb	r4, [r6, #0]
 8016ce8:	fb19 f90e 	smulbb	r9, r9, lr
 8016cec:	fb00 aa04 	mla	sl, r0, r4, sl
 8016cf0:	781c      	ldrb	r4, [r3, #0]
 8016cf2:	fb0b a404 	mla	r4, fp, r4, sl
 8016cf6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8016cfa:	fb04 990c 	mla	r9, r4, ip, r9
 8016cfe:	fa1f f989 	uxth.w	r9, r9
 8016d02:	f109 0401 	add.w	r4, r9, #1
 8016d06:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8016d0a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d0e:	f881 9000 	strb.w	r9, [r1]
 8016d12:	f895 9001 	ldrb.w	r9, [r5, #1]
 8016d16:	787c      	ldrb	r4, [r7, #1]
 8016d18:	fb02 f909 	mul.w	r9, r2, r9
 8016d1c:	fb08 9904 	mla	r9, r8, r4, r9
 8016d20:	7874      	ldrb	r4, [r6, #1]
 8016d22:	fb00 9904 	mla	r9, r0, r4, r9
 8016d26:	785c      	ldrb	r4, [r3, #1]
 8016d28:	fb0b 9404 	mla	r4, fp, r4, r9
 8016d2c:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8016d30:	9c02      	ldr	r4, [sp, #8]
 8016d32:	fb14 f90e 	smulbb	r9, r4, lr
 8016d36:	fb0a 940c 	mla	r4, sl, ip, r9
 8016d3a:	b2a4      	uxth	r4, r4
 8016d3c:	f104 0901 	add.w	r9, r4, #1
 8016d40:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8016d44:	1224      	asrs	r4, r4, #8
 8016d46:	704c      	strb	r4, [r1, #1]
 8016d48:	78ad      	ldrb	r5, [r5, #2]
 8016d4a:	78bc      	ldrb	r4, [r7, #2]
 8016d4c:	436a      	muls	r2, r5
 8016d4e:	789b      	ldrb	r3, [r3, #2]
 8016d50:	fb08 2204 	mla	r2, r8, r4, r2
 8016d54:	78b4      	ldrb	r4, [r6, #2]
 8016d56:	fb00 2004 	mla	r0, r0, r4, r2
 8016d5a:	fb0b 0b03 	mla	fp, fp, r3, r0
 8016d5e:	9b01      	ldr	r3, [sp, #4]
 8016d60:	fb13 fe0e 	smulbb	lr, r3, lr
 8016d64:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8016d68:	fb0b ec0c 	mla	ip, fp, ip, lr
 8016d6c:	fa1f fc8c 	uxth.w	ip, ip
 8016d70:	f10c 0e01 	add.w	lr, ip, #1
 8016d74:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8016d78:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016d7c:	f881 c002 	strb.w	ip, [r1, #2]
 8016d80:	b007      	add	sp, #28
 8016d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d86:	af05      	add	r7, sp, #20
 8016d88:	e75b      	b.n	8016c42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8016d8a:	ad05      	add	r5, sp, #20
 8016d8c:	462f      	mov	r7, r5
 8016d8e:	e766      	b.n	8016c5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8016d90:	ad05      	add	r5, sp, #20
 8016d92:	e764      	b.n	8016c5e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8016d94:	ae05      	add	r6, sp, #20
 8016d96:	e777      	b.n	8016c88 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8016d98:	ab05      	add	r3, sp, #20
 8016d9a:	461e      	mov	r6, r3
 8016d9c:	e783      	b.n	8016ca6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8016d9e:	ab05      	add	r3, sp, #20
 8016da0:	e781      	b.n	8016ca6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08016da2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da6:	b093      	sub	sp, #76	; 0x4c
 8016da8:	9210      	str	r2, [sp, #64]	; 0x40
 8016daa:	9309      	str	r3, [sp, #36]	; 0x24
 8016dac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016dae:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8016db2:	9011      	str	r0, [sp, #68]	; 0x44
 8016db4:	930e      	str	r3, [sp, #56]	; 0x38
 8016db6:	6850      	ldr	r0, [r2, #4]
 8016db8:	910d      	str	r1, [sp, #52]	; 0x34
 8016dba:	6812      	ldr	r2, [r2, #0]
 8016dbc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8016dc0:	fb00 1303 	mla	r3, r0, r3, r1
 8016dc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016dc8:	18d3      	adds	r3, r2, r3
 8016dca:	930a      	str	r3, [sp, #40]	; 0x28
 8016dcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	930c      	str	r3, [sp, #48]	; 0x30
 8016dd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016dd4:	685c      	ldr	r4, [r3, #4]
 8016dd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dd8:	3404      	adds	r4, #4
 8016dda:	43db      	mvns	r3, r3
 8016ddc:	b2db      	uxtb	r3, r3
 8016dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8016de0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	dc03      	bgt.n	8016dee <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8016de6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	f340 8250 	ble.w	801728e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8016dee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016df0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8016df4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8016df8:	1e48      	subs	r0, r1, #1
 8016dfa:	1e55      	subs	r5, r2, #1
 8016dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	f340 80ee 	ble.w	8016fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8016e04:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016e06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016e08:	1436      	asrs	r6, r6, #16
 8016e0a:	ea4f 4323 	mov.w	r3, r3, asr #16
 8016e0e:	d406      	bmi.n	8016e1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016e10:	4286      	cmp	r6, r0
 8016e12:	da04      	bge.n	8016e1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	db02      	blt.n	8016e1e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016e18:	42ab      	cmp	r3, r5
 8016e1a:	f2c0 80e2 	blt.w	8016fe2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8016e1e:	3601      	adds	r6, #1
 8016e20:	f100 80cf 	bmi.w	8016fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8016e24:	42b1      	cmp	r1, r6
 8016e26:	f2c0 80cc 	blt.w	8016fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8016e2a:	3301      	adds	r3, #1
 8016e2c:	f100 80c9 	bmi.w	8016fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8016e30:	429a      	cmp	r2, r3
 8016e32:	f2c0 80c6 	blt.w	8016fc2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8016e36:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8016e3a:	f1bb 0f00 	cmp.w	fp, #0
 8016e3e:	f340 80f1 	ble.w	8017024 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8016e42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016e44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016e46:	9824      	ldr	r0, [sp, #144]	; 0x90
 8016e48:	141d      	asrs	r5, r3, #16
 8016e4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016e4c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8016e50:	68c7      	ldr	r7, [r0, #12]
 8016e52:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016e54:	1418      	asrs	r0, r3, #16
 8016e56:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8016e5a:	6892      	ldr	r2, [r2, #8]
 8016e5c:	f100 8137 	bmi.w	80170ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8016e60:	f102 3cff 	add.w	ip, r2, #4294967295
 8016e64:	4560      	cmp	r0, ip
 8016e66:	f280 8132 	bge.w	80170ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8016e6a:	2d00      	cmp	r5, #0
 8016e6c:	f2c0 812f 	blt.w	80170ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8016e70:	f107 3cff 	add.w	ip, r7, #4294967295
 8016e74:	4565      	cmp	r5, ip
 8016e76:	f280 812a 	bge.w	80170ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8016e7a:	b212      	sxth	r2, r2
 8016e7c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016e7e:	fb05 0002 	mla	r0, r5, r2, r0
 8016e82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016e84:	f817 c000 	ldrb.w	ip, [r7, r0]
 8016e88:	4405      	add	r5, r0
 8016e8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016e8e:	eb04 0e0c 	add.w	lr, r4, ip
 8016e92:	f1b8 0f00 	cmp.w	r8, #0
 8016e96:	f000 810c 	beq.w	80170b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8016e9a:	786f      	ldrb	r7, [r5, #1]
 8016e9c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016ea0:	4427      	add	r7, r4
 8016ea2:	2900      	cmp	r1, #0
 8016ea4:	f000 810d 	beq.w	80170c2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8016ea8:	18a8      	adds	r0, r5, r2
 8016eaa:	5caa      	ldrb	r2, [r5, r2]
 8016eac:	7840      	ldrb	r0, [r0, #1]
 8016eae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016eb2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8016eb6:	4422      	add	r2, r4
 8016eb8:	4420      	add	r0, r4
 8016eba:	fa1f f388 	uxth.w	r3, r8
 8016ebe:	f814 a00c 	ldrb.w	sl, [r4, ip]
 8016ec2:	b289      	uxth	r1, r1
 8016ec4:	f897 c000 	ldrb.w	ip, [r7]
 8016ec8:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016ecc:	fb03 f901 	mul.w	r9, r3, r1
 8016ed0:	011b      	lsls	r3, r3, #4
 8016ed2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8016ed6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8016eda:	eba3 0309 	sub.w	r3, r3, r9
 8016ede:	b289      	uxth	r1, r1
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	eba8 0801 	sub.w	r8, r8, r1
 8016ee6:	fb03 fc0c 	mul.w	ip, r3, ip
 8016eea:	fa1f f888 	uxth.w	r8, r8
 8016eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ef2:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016ef6:	f892 a000 	ldrb.w	sl, [r2]
 8016efa:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016efe:	f890 a000 	ldrb.w	sl, [r0]
 8016f02:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016f06:	f896 a000 	ldrb.w	sl, [r6]
 8016f0a:	fb1a fa03 	smulbb	sl, sl, r3
 8016f0e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016f12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f14:	fb0c ac05 	mla	ip, ip, r5, sl
 8016f18:	fa1f fc8c 	uxth.w	ip, ip
 8016f1c:	f10c 0a01 	add.w	sl, ip, #1
 8016f20:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8016f24:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f28:	f886 a000 	strb.w	sl, [r6]
 8016f2c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8016f30:	f89e a001 	ldrb.w	sl, [lr, #1]
 8016f34:	fb03 fc0c 	mul.w	ip, r3, ip
 8016f38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f3a:	fb08 cc0a 	mla	ip, r8, sl, ip
 8016f3e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8016f42:	fb01 cc0a 	mla	ip, r1, sl, ip
 8016f46:	f890 a001 	ldrb.w	sl, [r0, #1]
 8016f4a:	fb09 cc0a 	mla	ip, r9, sl, ip
 8016f4e:	f896 a001 	ldrb.w	sl, [r6, #1]
 8016f52:	fb1a fa03 	smulbb	sl, sl, r3
 8016f56:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8016f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f5c:	fb0c ac05 	mla	ip, ip, r5, sl
 8016f60:	fa1f fc8c 	uxth.w	ip, ip
 8016f64:	f10c 0a01 	add.w	sl, ip, #1
 8016f68:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8016f6c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8016f70:	f886 c001 	strb.w	ip, [r6, #1]
 8016f74:	78bf      	ldrb	r7, [r7, #2]
 8016f76:	f89e c002 	ldrb.w	ip, [lr, #2]
 8016f7a:	437b      	muls	r3, r7
 8016f7c:	fb08 330c 	mla	r3, r8, ip, r3
 8016f80:	f892 c002 	ldrb.w	ip, [r2, #2]
 8016f84:	7882      	ldrb	r2, [r0, #2]
 8016f86:	fb01 310c 	mla	r1, r1, ip, r3
 8016f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016f8c:	fb09 1902 	mla	r9, r9, r2, r1
 8016f90:	78b1      	ldrb	r1, [r6, #2]
 8016f92:	fb11 f103 	smulbb	r1, r1, r3
 8016f96:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8016f9a:	fb09 1505 	mla	r5, r9, r5, r1
 8016f9e:	b2ad      	uxth	r5, r5
 8016fa0:	1c6b      	adds	r3, r5, #1
 8016fa2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8016fa6:	122d      	asrs	r5, r5, #8
 8016fa8:	70b5      	strb	r5, [r6, #2]
 8016faa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fac:	3603      	adds	r6, #3
 8016fae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8016fb0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016fb4:	4413      	add	r3, r2
 8016fb6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016fb8:	931d      	str	r3, [sp, #116]	; 0x74
 8016fba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016fbc:	4413      	add	r3, r2
 8016fbe:	931e      	str	r3, [sp, #120]	; 0x78
 8016fc0:	e73b      	b.n	8016e3a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016fc2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016fc4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8016fc6:	4433      	add	r3, r6
 8016fc8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016fca:	931d      	str	r3, [sp, #116]	; 0x74
 8016fcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016fce:	4433      	add	r3, r6
 8016fd0:	931e      	str	r3, [sp, #120]	; 0x78
 8016fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fd4:	3b01      	subs	r3, #1
 8016fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8016fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fda:	3303      	adds	r3, #3
 8016fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8016fde:	e70d      	b.n	8016dfc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016fe0:	d028      	beq.n	8017034 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8016fe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fe4:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8016fea:	fb00 5003 	mla	r0, r0, r3, r5
 8016fee:	1400      	asrs	r0, r0, #16
 8016ff0:	f53f af21 	bmi.w	8016e36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8016ff4:	3901      	subs	r1, #1
 8016ff6:	4288      	cmp	r0, r1
 8016ff8:	f6bf af1d 	bge.w	8016e36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8016ffc:	9920      	ldr	r1, [sp, #128]	; 0x80
 8016ffe:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017000:	fb01 0303 	mla	r3, r1, r3, r0
 8017004:	141b      	asrs	r3, r3, #16
 8017006:	f53f af16 	bmi.w	8016e36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801700a:	3a01      	subs	r2, #1
 801700c:	4293      	cmp	r3, r2
 801700e:	f6bf af12 	bge.w	8016e36 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017014:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8017018:	1cdf      	adds	r7, r3, #3
 801701a:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801701e:	f1b9 0f00 	cmp.w	r9, #0
 8017022:	dc73      	bgt.n	801710c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8017024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017028:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801702c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017030:	441a      	add	r2, r3
 8017032:	920a      	str	r2, [sp, #40]	; 0x28
 8017034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017036:	2b00      	cmp	r3, #0
 8017038:	f340 8129 	ble.w	801728e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801703c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017040:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017042:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017046:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801704a:	eef0 6a62 	vmov.f32	s13, s5
 801704e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017052:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017056:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801705a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801705e:	eef0 6a43 	vmov.f32	s13, s6
 8017062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017066:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801706a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801706e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017072:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017076:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801707a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801707e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017082:	ee12 2a90 	vmov	r2, s5
 8017086:	eef0 2a47 	vmov.f32	s5, s14
 801708a:	fb92 f3f3 	sdiv	r3, r2, r3
 801708e:	ee13 2a10 	vmov	r2, s6
 8017092:	931f      	str	r3, [sp, #124]	; 0x7c
 8017094:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017096:	eeb0 3a67 	vmov.f32	s6, s15
 801709a:	fb92 f3f3 	sdiv	r3, r2, r3
 801709e:	9320      	str	r3, [sp, #128]	; 0x80
 80170a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170a2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80170a4:	3b01      	subs	r3, #1
 80170a6:	930d      	str	r3, [sp, #52]	; 0x34
 80170a8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80170aa:	bf08      	it	eq
 80170ac:	4613      	moveq	r3, r2
 80170ae:	9309      	str	r3, [sp, #36]	; 0x24
 80170b0:	e696      	b.n	8016de0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80170b2:	b149      	cbz	r1, 80170c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80170b4:	5caa      	ldrb	r2, [r5, r2]
 80170b6:	4670      	mov	r0, lr
 80170b8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80170bc:	4422      	add	r2, r4
 80170be:	4677      	mov	r7, lr
 80170c0:	e6fb      	b.n	8016eba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80170c2:	4670      	mov	r0, lr
 80170c4:	4672      	mov	r2, lr
 80170c6:	e6f8      	b.n	8016eba <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 80170c8:	4670      	mov	r0, lr
 80170ca:	4672      	mov	r2, lr
 80170cc:	e7f7      	b.n	80170be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80170ce:	f110 0c01 	adds.w	ip, r0, #1
 80170d2:	f53f af6a 	bmi.w	8016faa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80170d6:	4562      	cmp	r2, ip
 80170d8:	f6ff af67 	blt.w	8016faa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80170dc:	f115 0c01 	adds.w	ip, r5, #1
 80170e0:	f53f af63 	bmi.w	8016faa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80170e4:	4567      	cmp	r7, ip
 80170e6:	f6ff af60 	blt.w	8016faa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80170ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170ec:	b23f      	sxth	r7, r7
 80170ee:	b212      	sxth	r2, r2
 80170f0:	9002      	str	r0, [sp, #8]
 80170f2:	9701      	str	r7, [sp, #4]
 80170f4:	9200      	str	r2, [sp, #0]
 80170f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80170f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80170fa:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80170fe:	e9cd 5803 	strd	r5, r8, [sp, #12]
 8017102:	4623      	mov	r3, r4
 8017104:	4631      	mov	r1, r6
 8017106:	f7ff fd69 	bl	8016bdc <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801710a:	e74e      	b.n	8016faa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801710c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801710e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017110:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8017114:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8017116:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017118:	1400      	asrs	r0, r0, #16
 801711a:	142d      	asrs	r5, r5, #16
 801711c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801711e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8017122:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8017126:	fb02 5000 	mla	r0, r2, r0, r5
 801712a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801712c:	f815 e000 	ldrb.w	lr, [r5, r0]
 8017130:	eb05 0c00 	add.w	ip, r5, r0
 8017134:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8017138:	eb04 060e 	add.w	r6, r4, lr
 801713c:	2b00      	cmp	r3, #0
 801713e:	f000 8097 	beq.w	8017270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8017142:	f89c 5001 	ldrb.w	r5, [ip, #1]
 8017146:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801714a:	4425      	add	r5, r4
 801714c:	2900      	cmp	r1, #0
 801714e:	f000 8098 	beq.w	8017282 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 8017152:	eb0c 0002 	add.w	r0, ip, r2
 8017156:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801715a:	7840      	ldrb	r0, [r0, #1]
 801715c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017160:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017164:	4422      	add	r2, r4
 8017166:	4420      	add	r0, r4
 8017168:	b29b      	uxth	r3, r3
 801716a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801716e:	b289      	uxth	r1, r1
 8017170:	f895 e000 	ldrb.w	lr, [r5]
 8017174:	3703      	adds	r7, #3
 8017176:	f109 39ff 	add.w	r9, r9, #4294967295
 801717a:	fb03 f801 	mul.w	r8, r3, r1
 801717e:	011b      	lsls	r3, r3, #4
 8017180:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8017184:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8017188:	eba3 0308 	sub.w	r3, r3, r8
 801718c:	b289      	uxth	r1, r1
 801718e:	b29b      	uxth	r3, r3
 8017190:	ebac 0c01 	sub.w	ip, ip, r1
 8017194:	fb03 fe0e 	mul.w	lr, r3, lr
 8017198:	fa1f fc8c 	uxth.w	ip, ip
 801719c:	930f      	str	r3, [sp, #60]	; 0x3c
 801719e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171a0:	fb0c ee0b 	mla	lr, ip, fp, lr
 80171a4:	f892 b000 	ldrb.w	fp, [r2]
 80171a8:	fb01 ee0b 	mla	lr, r1, fp, lr
 80171ac:	f890 b000 	ldrb.w	fp, [r0]
 80171b0:	fb08 ee0b 	mla	lr, r8, fp, lr
 80171b4:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 80171b8:	fb1b fb03 	smulbb	fp, fp, r3
 80171bc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80171c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80171c2:	fb0e be0a 	mla	lr, lr, sl, fp
 80171c6:	fa1f fe8e 	uxth.w	lr, lr
 80171ca:	f10e 0b01 	add.w	fp, lr, #1
 80171ce:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80171d2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80171d6:	f807 ec06 	strb.w	lr, [r7, #-6]
 80171da:	f895 e001 	ldrb.w	lr, [r5, #1]
 80171de:	f896 b001 	ldrb.w	fp, [r6, #1]
 80171e2:	fb03 fe0e 	mul.w	lr, r3, lr
 80171e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171e8:	fb0c ee0b 	mla	lr, ip, fp, lr
 80171ec:	f892 b001 	ldrb.w	fp, [r2, #1]
 80171f0:	fb01 ee0b 	mla	lr, r1, fp, lr
 80171f4:	f890 b001 	ldrb.w	fp, [r0, #1]
 80171f8:	fb08 ee0b 	mla	lr, r8, fp, lr
 80171fc:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 8017200:	fb1b fb03 	smulbb	fp, fp, r3
 8017204:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8017208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801720a:	fb0e be0a 	mla	lr, lr, sl, fp
 801720e:	fa1f fe8e 	uxth.w	lr, lr
 8017212:	f10e 0b01 	add.w	fp, lr, #1
 8017216:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801721a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801721e:	f807 ec05 	strb.w	lr, [r7, #-5]
 8017222:	78ad      	ldrb	r5, [r5, #2]
 8017224:	78b6      	ldrb	r6, [r6, #2]
 8017226:	436b      	muls	r3, r5
 8017228:	7895      	ldrb	r5, [r2, #2]
 801722a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801722c:	fb0c 3306 	mla	r3, ip, r6, r3
 8017230:	fb01 3305 	mla	r3, r1, r5, r3
 8017234:	7885      	ldrb	r5, [r0, #2]
 8017236:	fb08 3805 	mla	r8, r8, r5, r3
 801723a:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801723e:	fb13 f302 	smulbb	r3, r3, r2
 8017242:	f3c8 2807 	ubfx	r8, r8, #8, #8
 8017246:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8017248:	fb08 380a 	mla	r8, r8, sl, r3
 801724c:	fa1f f888 	uxth.w	r8, r8
 8017250:	f108 0301 	add.w	r3, r8, #1
 8017254:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8017258:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801725a:	4413      	add	r3, r2
 801725c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801725e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017262:	931d      	str	r3, [sp, #116]	; 0x74
 8017264:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017266:	f807 8c04 	strb.w	r8, [r7, #-4]
 801726a:	4413      	add	r3, r2
 801726c:	931e      	str	r3, [sp, #120]	; 0x78
 801726e:	e6d6      	b.n	801701e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8017270:	b151      	cbz	r1, 8017288 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8017272:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017276:	4630      	mov	r0, r6
 8017278:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801727c:	4422      	add	r2, r4
 801727e:	4635      	mov	r5, r6
 8017280:	e772      	b.n	8017168 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017282:	4630      	mov	r0, r6
 8017284:	4632      	mov	r2, r6
 8017286:	e76f      	b.n	8017168 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8017288:	4630      	mov	r0, r6
 801728a:	4632      	mov	r2, r6
 801728c:	e7f7      	b.n	801727e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801728e:	b013      	add	sp, #76	; 0x4c
 8017290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017294 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8017294:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017298:	784c      	ldrb	r4, [r1, #1]
 801729a:	f891 a002 	ldrb.w	sl, [r1, #2]
 801729e:	0224      	lsls	r4, r4, #8
 80172a0:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80172a4:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 80172a8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80172ac:	f891 a000 	ldrb.w	sl, [r1]
 80172b0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 80172b4:	ea44 040a 	orr.w	r4, r4, sl
 80172b8:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 80172bc:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 80172c0:	9401      	str	r4, [sp, #4]
 80172c2:	fb05 c70e 	mla	r7, r5, lr, ip
 80172c6:	2d00      	cmp	r5, #0
 80172c8:	eb02 0807 	add.w	r8, r2, r7
 80172cc:	db72      	blt.n	80173b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80172ce:	45a9      	cmp	r9, r5
 80172d0:	dd70      	ble.n	80173b4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 80172d2:	f1bc 0f00 	cmp.w	ip, #0
 80172d6:	db6b      	blt.n	80173b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80172d8:	45e6      	cmp	lr, ip
 80172da:	dd69      	ble.n	80173b0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 80172dc:	5dd7      	ldrb	r7, [r2, r7]
 80172de:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80172e2:	441f      	add	r7, r3
 80172e4:	f11c 0201 	adds.w	r2, ip, #1
 80172e8:	d467      	bmi.n	80173ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80172ea:	4596      	cmp	lr, r2
 80172ec:	dd65      	ble.n	80173ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80172ee:	2800      	cmp	r0, #0
 80172f0:	d063      	beq.n	80173ba <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 80172f2:	f898 4001 	ldrb.w	r4, [r8, #1]
 80172f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80172fa:	441c      	add	r4, r3
 80172fc:	3501      	adds	r5, #1
 80172fe:	d460      	bmi.n	80173c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017300:	45a9      	cmp	r9, r5
 8017302:	dd5e      	ble.n	80173c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017304:	2e00      	cmp	r6, #0
 8017306:	d05c      	beq.n	80173c2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8017308:	f1bc 0f00 	cmp.w	ip, #0
 801730c:	db57      	blt.n	80173be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801730e:	45e6      	cmp	lr, ip
 8017310:	dd55      	ble.n	80173be <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8017312:	f818 500e 	ldrb.w	r5, [r8, lr]
 8017316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801731a:	441d      	add	r5, r3
 801731c:	f11c 0201 	adds.w	r2, ip, #1
 8017320:	d452      	bmi.n	80173c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017322:	4596      	cmp	lr, r2
 8017324:	dd50      	ble.n	80173c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8017326:	2800      	cmp	r0, #0
 8017328:	d04e      	beq.n	80173c8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801732a:	44c6      	add	lr, r8
 801732c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8017330:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017334:	4413      	add	r3, r2
 8017336:	b280      	uxth	r0, r0
 8017338:	f897 8000 	ldrb.w	r8, [r7]
 801733c:	b2b2      	uxth	r2, r6
 801733e:	fb00 f602 	mul.w	r6, r0, r2
 8017342:	0100      	lsls	r0, r0, #4
 8017344:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8017348:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 801734c:	1b80      	subs	r0, r0, r6
 801734e:	fa1f fc82 	uxth.w	ip, r2
 8017352:	b282      	uxth	r2, r0
 8017354:	7820      	ldrb	r0, [r4, #0]
 8017356:	ebae 0e0c 	sub.w	lr, lr, ip
 801735a:	4350      	muls	r0, r2
 801735c:	fa1f fe8e 	uxth.w	lr, lr
 8017360:	fb0e 0808 	mla	r8, lr, r8, r0
 8017364:	7828      	ldrb	r0, [r5, #0]
 8017366:	fb0c 8800 	mla	r8, ip, r0, r8
 801736a:	7818      	ldrb	r0, [r3, #0]
 801736c:	fb06 8000 	mla	r0, r6, r0, r8
 8017370:	1200      	asrs	r0, r0, #8
 8017372:	7008      	strb	r0, [r1, #0]
 8017374:	7860      	ldrb	r0, [r4, #1]
 8017376:	f897 8001 	ldrb.w	r8, [r7, #1]
 801737a:	4350      	muls	r0, r2
 801737c:	fb0e 0808 	mla	r8, lr, r8, r0
 8017380:	7868      	ldrb	r0, [r5, #1]
 8017382:	fb0c 8800 	mla	r8, ip, r0, r8
 8017386:	7858      	ldrb	r0, [r3, #1]
 8017388:	fb06 8000 	mla	r0, r6, r0, r8
 801738c:	1200      	asrs	r0, r0, #8
 801738e:	7048      	strb	r0, [r1, #1]
 8017390:	78a0      	ldrb	r0, [r4, #2]
 8017392:	78bf      	ldrb	r7, [r7, #2]
 8017394:	4350      	muls	r0, r2
 8017396:	78aa      	ldrb	r2, [r5, #2]
 8017398:	fb0e 0007 	mla	r0, lr, r7, r0
 801739c:	fb0c 0c02 	mla	ip, ip, r2, r0
 80173a0:	789a      	ldrb	r2, [r3, #2]
 80173a2:	fb06 c202 	mla	r2, r6, r2, ip
 80173a6:	1212      	asrs	r2, r2, #8
 80173a8:	708a      	strb	r2, [r1, #2]
 80173aa:	b002      	add	sp, #8
 80173ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173b0:	af01      	add	r7, sp, #4
 80173b2:	e797      	b.n	80172e4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 80173b4:	ac01      	add	r4, sp, #4
 80173b6:	4627      	mov	r7, r4
 80173b8:	e7a0      	b.n	80172fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80173ba:	ac01      	add	r4, sp, #4
 80173bc:	e79e      	b.n	80172fc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 80173be:	ad01      	add	r5, sp, #4
 80173c0:	e7ac      	b.n	801731c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 80173c2:	ab01      	add	r3, sp, #4
 80173c4:	461d      	mov	r5, r3
 80173c6:	e7b6      	b.n	8017336 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 80173c8:	ab01      	add	r3, sp, #4
 80173ca:	e7b4      	b.n	8017336 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

080173cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80173cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d0:	b08d      	sub	sp, #52	; 0x34
 80173d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80173d6:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80173da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80173dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80173de:	9306      	str	r3, [sp, #24]
 80173e0:	6850      	ldr	r0, [r2, #4]
 80173e2:	6812      	ldr	r2, [r2, #0]
 80173e4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80173e6:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 80173ea:	fb00 1303 	mla	r3, r0, r3, r1
 80173ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173f2:	18d3      	adds	r3, r2, r3
 80173f4:	9307      	str	r3, [sp, #28]
 80173f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	9308      	str	r3, [sp, #32]
 80173fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80173fe:	685d      	ldr	r5, [r3, #4]
 8017400:	3504      	adds	r5, #4
 8017402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017404:	2b00      	cmp	r3, #0
 8017406:	dc03      	bgt.n	8017410 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8017408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801740a:	2b00      	cmp	r3, #0
 801740c:	f340 81e6 	ble.w	80177dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8017410:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8017412:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017416:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801741a:	1e48      	subs	r0, r1, #1
 801741c:	1e56      	subs	r6, r2, #1
 801741e:	9b06      	ldr	r3, [sp, #24]
 8017420:	2b00      	cmp	r3, #0
 8017422:	f340 80bd 	ble.w	80175a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8017426:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017428:	1427      	asrs	r7, r4, #16
 801742a:	ea4f 4323 	mov.w	r3, r3, asr #16
 801742e:	d406      	bmi.n	801743e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017430:	4287      	cmp	r7, r0
 8017432:	da04      	bge.n	801743e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017434:	2b00      	cmp	r3, #0
 8017436:	db02      	blt.n	801743e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017438:	42b3      	cmp	r3, r6
 801743a:	f2c0 80b2 	blt.w	80175a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801743e:	3701      	adds	r7, #1
 8017440:	f100 80a1 	bmi.w	8017586 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017444:	42b9      	cmp	r1, r7
 8017446:	f2c0 809e 	blt.w	8017586 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801744a:	3301      	adds	r3, #1
 801744c:	f100 809b 	bmi.w	8017586 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017450:	429a      	cmp	r2, r3
 8017452:	f2c0 8098 	blt.w	8017586 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8017456:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801745a:	f1bb 0f00 	cmp.w	fp, #0
 801745e:	f340 80bf 	ble.w	80175e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017464:	981e      	ldr	r0, [sp, #120]	; 0x78
 8017466:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017468:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801746c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8017470:	1420      	asrs	r0, r4, #16
 8017472:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8017474:	ea4f 4723 	mov.w	r7, r3, asr #16
 8017478:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801747c:	6892      	ldr	r2, [r2, #8]
 801747e:	f100 8103 	bmi.w	8017688 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017482:	f102 3eff 	add.w	lr, r2, #4294967295
 8017486:	4570      	cmp	r0, lr
 8017488:	f280 80fe 	bge.w	8017688 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801748c:	2f00      	cmp	r7, #0
 801748e:	f2c0 80fb 	blt.w	8017688 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8017492:	f10c 3eff 	add.w	lr, ip, #4294967295
 8017496:	4577      	cmp	r7, lr
 8017498:	f280 80f6 	bge.w	8017688 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801749c:	b212      	sxth	r2, r2
 801749e:	fb07 0002 	mla	r0, r7, r2, r0
 80174a2:	9f08      	ldr	r7, [sp, #32]
 80174a4:	f817 8000 	ldrb.w	r8, [r7, r0]
 80174a8:	eb07 0e00 	add.w	lr, r7, r0
 80174ac:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80174b0:	eb05 0c08 	add.w	ip, r5, r8
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	f000 80d8 	beq.w	801766a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 80174ba:	f89e 7001 	ldrb.w	r7, [lr, #1]
 80174be:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80174c2:	442f      	add	r7, r5
 80174c4:	2900      	cmp	r1, #0
 80174c6:	f000 80d9 	beq.w	801767c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80174ca:	eb0e 0002 	add.w	r0, lr, r2
 80174ce:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80174d2:	7840      	ldrb	r0, [r0, #1]
 80174d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80174d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80174dc:	442a      	add	r2, r5
 80174de:	4428      	add	r0, r5
 80174e0:	b29b      	uxth	r3, r3
 80174e2:	f815 a008 	ldrb.w	sl, [r5, r8]
 80174e6:	b289      	uxth	r1, r1
 80174e8:	f897 8000 	ldrb.w	r8, [r7]
 80174ec:	fb03 f901 	mul.w	r9, r3, r1
 80174f0:	011b      	lsls	r3, r3, #4
 80174f2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80174f6:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80174fa:	eba3 0309 	sub.w	r3, r3, r9
 80174fe:	b289      	uxth	r1, r1
 8017500:	b29b      	uxth	r3, r3
 8017502:	ebae 0e01 	sub.w	lr, lr, r1
 8017506:	fb03 f808 	mul.w	r8, r3, r8
 801750a:	fa1f fe8e 	uxth.w	lr, lr
 801750e:	fb0e 880a 	mla	r8, lr, sl, r8
 8017512:	f892 a000 	ldrb.w	sl, [r2]
 8017516:	fb01 880a 	mla	r8, r1, sl, r8
 801751a:	f890 a000 	ldrb.w	sl, [r0]
 801751e:	fb09 880a 	mla	r8, r9, sl, r8
 8017522:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017526:	f886 8000 	strb.w	r8, [r6]
 801752a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801752e:	f89c a001 	ldrb.w	sl, [ip, #1]
 8017532:	fb03 f808 	mul.w	r8, r3, r8
 8017536:	fb0e 880a 	mla	r8, lr, sl, r8
 801753a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801753e:	fb01 880a 	mla	r8, r1, sl, r8
 8017542:	f890 a001 	ldrb.w	sl, [r0, #1]
 8017546:	fb09 880a 	mla	r8, r9, sl, r8
 801754a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801754e:	f886 8001 	strb.w	r8, [r6, #1]
 8017552:	78bf      	ldrb	r7, [r7, #2]
 8017554:	f89c c002 	ldrb.w	ip, [ip, #2]
 8017558:	437b      	muls	r3, r7
 801755a:	7892      	ldrb	r2, [r2, #2]
 801755c:	fb0e 330c 	mla	r3, lr, ip, r3
 8017560:	fb01 3102 	mla	r1, r1, r2, r3
 8017564:	7882      	ldrb	r2, [r0, #2]
 8017566:	fb09 1902 	mla	r9, r9, r2, r1
 801756a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801756e:	f886 9002 	strb.w	r9, [r6, #2]
 8017572:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017574:	3603      	adds	r6, #3
 8017576:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8017578:	f10b 3bff 	add.w	fp, fp, #4294967295
 801757c:	441c      	add	r4, r3
 801757e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017580:	4413      	add	r3, r2
 8017582:	9318      	str	r3, [sp, #96]	; 0x60
 8017584:	e769      	b.n	801745a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017586:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017588:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 801758a:	441c      	add	r4, r3
 801758c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801758e:	443b      	add	r3, r7
 8017590:	9318      	str	r3, [sp, #96]	; 0x60
 8017592:	9b06      	ldr	r3, [sp, #24]
 8017594:	3b01      	subs	r3, #1
 8017596:	9306      	str	r3, [sp, #24]
 8017598:	9b07      	ldr	r3, [sp, #28]
 801759a:	3303      	adds	r3, #3
 801759c:	9307      	str	r3, [sp, #28]
 801759e:	e73e      	b.n	801741e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80175a0:	d026      	beq.n	80175f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80175a2:	9b06      	ldr	r3, [sp, #24]
 80175a4:	9819      	ldr	r0, [sp, #100]	; 0x64
 80175a6:	3b01      	subs	r3, #1
 80175a8:	fb00 4003 	mla	r0, r0, r3, r4
 80175ac:	1400      	asrs	r0, r0, #16
 80175ae:	f53f af52 	bmi.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80175b2:	3901      	subs	r1, #1
 80175b4:	4288      	cmp	r0, r1
 80175b6:	f6bf af4e 	bge.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80175ba:	991a      	ldr	r1, [sp, #104]	; 0x68
 80175bc:	9818      	ldr	r0, [sp, #96]	; 0x60
 80175be:	fb01 0303 	mla	r3, r1, r3, r0
 80175c2:	141b      	asrs	r3, r3, #16
 80175c4:	f53f af47 	bmi.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80175c8:	3a01      	subs	r2, #1
 80175ca:	4293      	cmp	r3, r2
 80175cc:	f6bf af43 	bge.w	8017456 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80175d0:	9b07      	ldr	r3, [sp, #28]
 80175d2:	f8dd a018 	ldr.w	sl, [sp, #24]
 80175d6:	f103 0803 	add.w	r8, r3, #3
 80175da:	f1ba 0f00 	cmp.w	sl, #0
 80175de:	dc71      	bgt.n	80176c4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 80175e0:	9b06      	ldr	r3, [sp, #24]
 80175e2:	9a07      	ldr	r2, [sp, #28]
 80175e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175ec:	441a      	add	r2, r3
 80175ee:	9207      	str	r2, [sp, #28]
 80175f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	f340 80f2 	ble.w	80177dc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80175f8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80175fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80175fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017602:	eeb0 6a62 	vmov.f32	s12, s5
 8017606:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801760a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801760e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017612:	ee16 4a10 	vmov	r4, s12
 8017616:	eeb0 6a43 	vmov.f32	s12, s6
 801761a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801761e:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8017622:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017626:	ee61 7a27 	vmul.f32	s15, s2, s15
 801762a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801762e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017632:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017636:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801763a:	ee12 2a90 	vmov	r2, s5
 801763e:	eef0 2a47 	vmov.f32	s5, s14
 8017642:	fb92 f3f3 	sdiv	r3, r2, r3
 8017646:	ee13 2a10 	vmov	r2, s6
 801764a:	9319      	str	r3, [sp, #100]	; 0x64
 801764c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801764e:	eeb0 3a67 	vmov.f32	s6, s15
 8017652:	fb92 f3f3 	sdiv	r3, r2, r3
 8017656:	931a      	str	r3, [sp, #104]	; 0x68
 8017658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801765a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801765c:	3b01      	subs	r3, #1
 801765e:	9309      	str	r3, [sp, #36]	; 0x24
 8017660:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017662:	bf08      	it	eq
 8017664:	4613      	moveq	r3, r2
 8017666:	9306      	str	r3, [sp, #24]
 8017668:	e6cb      	b.n	8017402 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801766a:	b151      	cbz	r1, 8017682 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801766c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8017670:	4660      	mov	r0, ip
 8017672:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017676:	442a      	add	r2, r5
 8017678:	4667      	mov	r7, ip
 801767a:	e731      	b.n	80174e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801767c:	4660      	mov	r0, ip
 801767e:	4662      	mov	r2, ip
 8017680:	e72e      	b.n	80174e0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8017682:	4660      	mov	r0, ip
 8017684:	4662      	mov	r2, ip
 8017686:	e7f7      	b.n	8017678 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8017688:	f110 0e01 	adds.w	lr, r0, #1
 801768c:	f53f af71 	bmi.w	8017572 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017690:	4572      	cmp	r2, lr
 8017692:	f6ff af6e 	blt.w	8017572 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8017696:	f117 0e01 	adds.w	lr, r7, #1
 801769a:	f53f af6a 	bmi.w	8017572 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801769e:	45f4      	cmp	ip, lr
 80176a0:	f6ff af67 	blt.w	8017572 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80176a4:	b212      	sxth	r2, r2
 80176a6:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80176aa:	fa0f f38c 	sxth.w	r3, ip
 80176ae:	9200      	str	r2, [sp, #0]
 80176b0:	4631      	mov	r1, r6
 80176b2:	9a08      	ldr	r2, [sp, #32]
 80176b4:	9301      	str	r3, [sp, #4]
 80176b6:	462b      	mov	r3, r5
 80176b8:	e9cd 0702 	strd	r0, r7, [sp, #8]
 80176bc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80176be:	f7ff fde9 	bl	8017294 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 80176c2:	e756      	b.n	8017572 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80176c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80176c6:	1426      	asrs	r6, r4, #16
 80176c8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80176ca:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80176ce:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80176d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80176d4:	1400      	asrs	r0, r0, #16
 80176d6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80176da:	fb02 6000 	mla	r0, r2, r0, r6
 80176de:	9e08      	ldr	r6, [sp, #32]
 80176e0:	f816 e000 	ldrb.w	lr, [r6, r0]
 80176e4:	eb06 0c00 	add.w	ip, r6, r0
 80176e8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80176ec:	eb05 070e 	add.w	r7, r5, lr
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d064      	beq.n	80177be <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80176f4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80176f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80176fc:	442e      	add	r6, r5
 80176fe:	2900      	cmp	r1, #0
 8017700:	d066      	beq.n	80177d0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8017702:	eb0c 0002 	add.w	r0, ip, r2
 8017706:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801770a:	7840      	ldrb	r0, [r0, #1]
 801770c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017710:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8017714:	442a      	add	r2, r5
 8017716:	4428      	add	r0, r5
 8017718:	b29b      	uxth	r3, r3
 801771a:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801771e:	b289      	uxth	r1, r1
 8017720:	f896 e000 	ldrb.w	lr, [r6]
 8017724:	f108 0803 	add.w	r8, r8, #3
 8017728:	f10a 3aff 	add.w	sl, sl, #4294967295
 801772c:	fb03 f901 	mul.w	r9, r3, r1
 8017730:	011b      	lsls	r3, r3, #4
 8017732:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017736:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 801773a:	eba3 0309 	sub.w	r3, r3, r9
 801773e:	b289      	uxth	r1, r1
 8017740:	b29b      	uxth	r3, r3
 8017742:	ebac 0c01 	sub.w	ip, ip, r1
 8017746:	fb03 fe0e 	mul.w	lr, r3, lr
 801774a:	fa1f fc8c 	uxth.w	ip, ip
 801774e:	fb0c ee0b 	mla	lr, ip, fp, lr
 8017752:	f892 b000 	ldrb.w	fp, [r2]
 8017756:	fb01 ee0b 	mla	lr, r1, fp, lr
 801775a:	f890 b000 	ldrb.w	fp, [r0]
 801775e:	fb09 ee0b 	mla	lr, r9, fp, lr
 8017762:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8017766:	f808 ec06 	strb.w	lr, [r8, #-6]
 801776a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801776e:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017772:	fb03 fe0e 	mul.w	lr, r3, lr
 8017776:	fb0c ee0b 	mla	lr, ip, fp, lr
 801777a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801777e:	fb01 ee0b 	mla	lr, r1, fp, lr
 8017782:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017786:	fb09 ee0b 	mla	lr, r9, fp, lr
 801778a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801778e:	f808 ec05 	strb.w	lr, [r8, #-5]
 8017792:	78b6      	ldrb	r6, [r6, #2]
 8017794:	78bf      	ldrb	r7, [r7, #2]
 8017796:	4373      	muls	r3, r6
 8017798:	7896      	ldrb	r6, [r2, #2]
 801779a:	7882      	ldrb	r2, [r0, #2]
 801779c:	fb0c 3307 	mla	r3, ip, r7, r3
 80177a0:	fb01 3306 	mla	r3, r1, r6, r3
 80177a4:	fb09 3902 	mla	r9, r9, r2, r3
 80177a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80177aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80177ac:	441c      	add	r4, r3
 80177ae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80177b0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80177b4:	4413      	add	r3, r2
 80177b6:	f808 9c04 	strb.w	r9, [r8, #-4]
 80177ba:	9318      	str	r3, [sp, #96]	; 0x60
 80177bc:	e70d      	b.n	80175da <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 80177be:	b151      	cbz	r1, 80177d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80177c0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80177c4:	4638      	mov	r0, r7
 80177c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80177ca:	442a      	add	r2, r5
 80177cc:	463e      	mov	r6, r7
 80177ce:	e7a3      	b.n	8017718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80177d0:	4638      	mov	r0, r7
 80177d2:	463a      	mov	r2, r7
 80177d4:	e7a0      	b.n	8017718 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80177d6:	4638      	mov	r0, r7
 80177d8:	463a      	mov	r2, r7
 80177da:	e7f7      	b.n	80177cc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80177dc:	b00d      	add	sp, #52	; 0x34
 80177de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80177e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e6:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80177ea:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80177ee:	2d00      	cmp	r5, #0
 80177f0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80177f4:	fb05 700c 	mla	r0, r5, ip, r7
 80177f8:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80177fc:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8017800:	eb02 0800 	add.w	r8, r2, r0
 8017804:	f2c0 8118 	blt.w	8017a38 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8017808:	45a9      	cmp	r9, r5
 801780a:	f340 8115 	ble.w	8017a38 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801780e:	2f00      	cmp	r7, #0
 8017810:	f2c0 8110 	blt.w	8017a34 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8017814:	45bc      	cmp	ip, r7
 8017816:	f340 810d 	ble.w	8017a34 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801781a:	5c12      	ldrb	r2, [r2, r0]
 801781c:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017820:	1c7a      	adds	r2, r7, #1
 8017822:	f100 810c 	bmi.w	8017a3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8017826:	4594      	cmp	ip, r2
 8017828:	f340 8109 	ble.w	8017a3e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801782c:	2c00      	cmp	r4, #0
 801782e:	f000 8108 	beq.w	8017a42 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8017832:	f898 2001 	ldrb.w	r2, [r8, #1]
 8017836:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801783a:	3501      	adds	r5, #1
 801783c:	f100 8105 	bmi.w	8017a4a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8017840:	45a9      	cmp	r9, r5
 8017842:	f340 8102 	ble.w	8017a4a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8017846:	f1be 0f00 	cmp.w	lr, #0
 801784a:	f000 8101 	beq.w	8017a50 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801784e:	2f00      	cmp	r7, #0
 8017850:	f2c0 80f9 	blt.w	8017a46 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8017854:	45bc      	cmp	ip, r7
 8017856:	f340 80f6 	ble.w	8017a46 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801785a:	f818 200c 	ldrb.w	r2, [r8, ip]
 801785e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017862:	3701      	adds	r7, #1
 8017864:	f100 80f7 	bmi.w	8017a56 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8017868:	45bc      	cmp	ip, r7
 801786a:	f340 80f4 	ble.w	8017a56 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801786e:	2c00      	cmp	r4, #0
 8017870:	f000 80f3 	beq.w	8017a5a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8017874:	44c4      	add	ip, r8
 8017876:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801787a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801787e:	fa1f fc84 	uxth.w	ip, r4
 8017882:	fa1f f48e 	uxth.w	r4, lr
 8017886:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801788a:	fb04 fe0c 	mul.w	lr, r4, ip
 801788e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8017892:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8017896:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801789a:	ebac 070e 	sub.w	r7, ip, lr
 801789e:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80178a2:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80178a6:	b2a4      	uxth	r4, r4
 80178a8:	b2bf      	uxth	r7, r7
 80178aa:	1b1b      	subs	r3, r3, r4
 80178ac:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80178b0:	fb07 fc0a 	mul.w	ip, r7, sl
 80178b4:	b29b      	uxth	r3, r3
 80178b6:	fb03 cc0b 	mla	ip, r3, fp, ip
 80178ba:	9300      	str	r3, [sp, #0]
 80178bc:	fb04 cc09 	mla	ip, r4, r9, ip
 80178c0:	fb0e cc08 	mla	ip, lr, r8, ip
 80178c4:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80178c8:	9301      	str	r3, [sp, #4]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	f000 80af 	beq.w	8017a2e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80178d0:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 80178d4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80178d8:	fb0b fc0c 	mul.w	ip, fp, ip
 80178dc:	fb0b f606 	mul.w	r6, fp, r6
 80178e0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80178e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80178e8:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80178ec:	44dc      	add	ip, fp
 80178ee:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80178f2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80178f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80178fa:	fb0a fb0b 	mul.w	fp, sl, fp
 80178fe:	fb0a fa00 	mul.w	sl, sl, r0
 8017902:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8017906:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801790a:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801790e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8017912:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8017916:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801791a:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801791e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017922:	0a36      	lsrs	r6, r6, #8
 8017924:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017928:	44dc      	add	ip, fp
 801792a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801792e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8017932:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8017936:	fb09 fb0b 	mul.w	fp, r9, fp
 801793a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801793e:	fb09 f905 	mul.w	r9, r9, r5
 8017942:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8017946:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801794a:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801794e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017952:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017956:	fb0c fc07 	mul.w	ip, ip, r7
 801795a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801795e:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8017962:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8017966:	4458      	add	r0, fp
 8017968:	fb08 f505 	mul.w	r5, r8, r5
 801796c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017970:	fb08 f802 	mul.w	r8, r8, r2
 8017974:	0a00      	lsrs	r0, r0, #8
 8017976:	0a2a      	lsrs	r2, r5, #8
 8017978:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801797c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8017980:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8017984:	4415      	add	r5, r2
 8017986:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801798a:	0a2d      	lsrs	r5, r5, #8
 801798c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017990:	9a00      	ldr	r2, [sp, #0]
 8017992:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8017996:	fb03 cc02 	mla	ip, r3, r2, ip
 801799a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801799e:	9b01      	ldr	r3, [sp, #4]
 80179a0:	fb05 c50e 	mla	r5, r5, lr, ip
 80179a4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80179a8:	fb00 5004 	mla	r0, r0, r4, r5
 80179ac:	0a00      	lsrs	r0, r0, #8
 80179ae:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 80179b2:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 80179b6:	4378      	muls	r0, r7
 80179b8:	fb02 0006 	mla	r0, r2, r6, r0
 80179bc:	fb0e 0e08 	mla	lr, lr, r8, r0
 80179c0:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 80179c4:	fb04 e000 	mla	r0, r4, r0, lr
 80179c8:	0a00      	lsrs	r0, r0, #8
 80179ca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80179ce:	4328      	orrs	r0, r5
 80179d0:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 80179d4:	b2ad      	uxth	r5, r5
 80179d6:	b2c4      	uxtb	r4, r0
 80179d8:	436b      	muls	r3, r5
 80179da:	fb14 f405 	smulbb	r4, r4, r5
 80179de:	1c5a      	adds	r2, r3, #1
 80179e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80179e4:	780b      	ldrb	r3, [r1, #0]
 80179e6:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80179ea:	b2d2      	uxtb	r2, r2
 80179ec:	fb03 4302 	mla	r3, r3, r2, r4
 80179f0:	b29b      	uxth	r3, r3
 80179f2:	1c5c      	adds	r4, r3, #1
 80179f4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80179f8:	784c      	ldrb	r4, [r1, #1]
 80179fa:	fb14 f402 	smulbb	r4, r4, r2
 80179fe:	121b      	asrs	r3, r3, #8
 8017a00:	700b      	strb	r3, [r1, #0]
 8017a02:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8017a06:	fb03 4305 	mla	r3, r3, r5, r4
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	1c5c      	adds	r4, r3, #1
 8017a0e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8017a12:	0c04      	lsrs	r4, r0, #16
 8017a14:	7888      	ldrb	r0, [r1, #2]
 8017a16:	121b      	asrs	r3, r3, #8
 8017a18:	fb10 f002 	smulbb	r0, r0, r2
 8017a1c:	704b      	strb	r3, [r1, #1]
 8017a1e:	fb04 0005 	mla	r0, r4, r5, r0
 8017a22:	b280      	uxth	r0, r0
 8017a24:	1c43      	adds	r3, r0, #1
 8017a26:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8017a2a:	1200      	asrs	r0, r0, #8
 8017a2c:	7088      	strb	r0, [r1, #2]
 8017a2e:	b003      	add	sp, #12
 8017a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a34:	2600      	movs	r6, #0
 8017a36:	e6f3      	b.n	8017820 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8017a38:	2000      	movs	r0, #0
 8017a3a:	4606      	mov	r6, r0
 8017a3c:	e6fd      	b.n	801783a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8017a3e:	2000      	movs	r0, #0
 8017a40:	e6fb      	b.n	801783a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8017a42:	4620      	mov	r0, r4
 8017a44:	e6f9      	b.n	801783a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8017a46:	2500      	movs	r5, #0
 8017a48:	e70b      	b.n	8017862 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8017a4a:	2200      	movs	r2, #0
 8017a4c:	4615      	mov	r5, r2
 8017a4e:	e716      	b.n	801787e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8017a50:	4672      	mov	r2, lr
 8017a52:	4675      	mov	r5, lr
 8017a54:	e713      	b.n	801787e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8017a56:	2200      	movs	r2, #0
 8017a58:	e711      	b.n	801787e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8017a5a:	4622      	mov	r2, r4
 8017a5c:	e70f      	b.n	801787e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08017a5e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a62:	b09f      	sub	sp, #124	; 0x7c
 8017a64:	921b      	str	r2, [sp, #108]	; 0x6c
 8017a66:	9309      	str	r3, [sp, #36]	; 0x24
 8017a68:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8017a6a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8017a6e:	901d      	str	r0, [sp, #116]	; 0x74
 8017a70:	931c      	str	r3, [sp, #112]	; 0x70
 8017a72:	6850      	ldr	r0, [r2, #4]
 8017a74:	9119      	str	r1, [sp, #100]	; 0x64
 8017a76:	6812      	ldr	r2, [r2, #0]
 8017a78:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8017a7a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8017a7e:	fb00 1303 	mla	r3, r0, r3, r1
 8017a82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a86:	18d3      	adds	r3, r2, r3
 8017a88:	930c      	str	r3, [sp, #48]	; 0x30
 8017a8a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	9312      	str	r3, [sp, #72]	; 0x48
 8017a90:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017a92:	685e      	ldr	r6, [r3, #4]
 8017a94:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8017a98:	3604      	adds	r6, #4
 8017a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8017a9c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	dc03      	bgt.n	8017aaa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	f340 8378 	ble.w	801819a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8017aaa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017aac:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017ab0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8017ab4:	1e48      	subs	r0, r1, #1
 8017ab6:	1e57      	subs	r7, r2, #1
 8017ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	f340 818c 	ble.w	8017dd8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8017ac0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8017ac2:	142b      	asrs	r3, r5, #16
 8017ac4:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8017ac8:	d406      	bmi.n	8017ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017aca:	4584      	cmp	ip, r0
 8017acc:	da04      	bge.n	8017ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	db02      	blt.n	8017ad8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8017ad2:	42bb      	cmp	r3, r7
 8017ad4:	f2c0 8181 	blt.w	8017dda <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8017ad8:	f11c 0c01 	adds.w	ip, ip, #1
 8017adc:	f100 816f 	bmi.w	8017dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017ae0:	4561      	cmp	r1, ip
 8017ae2:	f2c0 816c 	blt.w	8017dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017ae6:	3301      	adds	r3, #1
 8017ae8:	f100 8169 	bmi.w	8017dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017aec:	429a      	cmp	r2, r3
 8017aee:	f2c0 8166 	blt.w	8017dbe <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8017af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017af4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8017af6:	931a      	str	r3, [sp, #104]	; 0x68
 8017af8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	f340 818c 	ble.w	8017e18 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8017b00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017b02:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8017b06:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8017b0a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017b0e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017b10:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8017b14:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017b16:	141b      	asrs	r3, r3, #16
 8017b18:	f100 81d0 	bmi.w	8017ebc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017b1c:	f100 38ff 	add.w	r8, r0, #4294967295
 8017b20:	4543      	cmp	r3, r8
 8017b22:	f280 81cb 	bge.w	8017ebc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017b26:	f1bc 0f00 	cmp.w	ip, #0
 8017b2a:	f2c0 81c7 	blt.w	8017ebc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017b2e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8017b32:	45c4      	cmp	ip, r8
 8017b34:	f280 81c2 	bge.w	8017ebc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8017b38:	b200      	sxth	r0, r0
 8017b3a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017b3c:	fb0c 3300 	mla	r3, ip, r0, r3
 8017b40:	eb04 0803 	add.w	r8, r4, r3
 8017b44:	5ce3      	ldrb	r3, [r4, r3]
 8017b46:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017b4a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8017b4e:	2a00      	cmp	r2, #0
 8017b50:	f000 81a9 	beq.w	8017ea6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8017b54:	f898 c001 	ldrb.w	ip, [r8, #1]
 8017b58:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8017b5c:	940e      	str	r4, [sp, #56]	; 0x38
 8017b5e:	0e24      	lsrs	r4, r4, #24
 8017b60:	9415      	str	r4, [sp, #84]	; 0x54
 8017b62:	b179      	cbz	r1, 8017b84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017b64:	eb08 0c00 	add.w	ip, r8, r0
 8017b68:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017b6c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017b70:	900a      	str	r0, [sp, #40]	; 0x28
 8017b72:	0e00      	lsrs	r0, r0, #24
 8017b74:	9013      	str	r0, [sp, #76]	; 0x4c
 8017b76:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8017b7a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017b7e:	900f      	str	r0, [sp, #60]	; 0x3c
 8017b80:	0e00      	lsrs	r0, r0, #24
 8017b82:	9016      	str	r0, [sp, #88]	; 0x58
 8017b84:	b292      	uxth	r2, r2
 8017b86:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017b88:	b289      	uxth	r1, r1
 8017b8a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017b8c:	fb02 f901 	mul.w	r9, r2, r1
 8017b90:	0112      	lsls	r2, r2, #4
 8017b92:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8017b96:	eba2 0809 	sub.w	r8, r2, r9
 8017b9a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017b9e:	b289      	uxth	r1, r1
 8017ba0:	fa1f f888 	uxth.w	r8, r8
 8017ba4:	1a52      	subs	r2, r2, r1
 8017ba6:	fb08 f000 	mul.w	r0, r8, r0
 8017baa:	b292      	uxth	r2, r2
 8017bac:	fb02 000e 	mla	r0, r2, lr, r0
 8017bb0:	fb01 0004 	mla	r0, r1, r4, r0
 8017bb4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017bb6:	fb09 0004 	mla	r0, r9, r4, r0
 8017bba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017bbe:	2800      	cmp	r0, #0
 8017bc0:	f000 80f2 	beq.w	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017bc4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8017bc8:	d01b      	beq.n	8017c02 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8017bca:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017bce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017bd2:	fb0e fa0a 	mul.w	sl, lr, sl
 8017bd6:	fb0e fe03 	mul.w	lr, lr, r3
 8017bda:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017bde:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017be2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8017be6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017bea:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8017bee:	4453      	add	r3, sl
 8017bf0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017bf4:	0a1b      	lsrs	r3, r3, #8
 8017bf6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8017bfa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017bfe:	ea43 030c 	orr.w	r3, r3, ip
 8017c02:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017c04:	2cff      	cmp	r4, #255	; 0xff
 8017c06:	d021      	beq.n	8017c4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8017c08:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017c0a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017c0e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017c10:	fb04 fb0b 	mul.w	fp, r4, fp
 8017c14:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017c16:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017c1a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017c1c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017c20:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017c24:	fb04 fa0a 	mul.w	sl, r4, sl
 8017c28:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c2c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017c30:	44de      	add	lr, fp
 8017c32:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017c36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017c3a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017c3e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c42:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017c46:	ea4e 040a 	orr.w	r4, lr, sl
 8017c4a:	940e      	str	r4, [sp, #56]	; 0x38
 8017c4c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c4e:	2cff      	cmp	r4, #255	; 0xff
 8017c50:	d021      	beq.n	8017c96 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8017c52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c54:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017c58:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c5a:	fb04 fb0b 	mul.w	fp, r4, fp
 8017c5e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017c60:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017c64:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c66:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017c6a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017c6e:	fb04 fa0a 	mul.w	sl, r4, sl
 8017c72:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c76:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017c7a:	44de      	add	lr, fp
 8017c7c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017c80:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017c84:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017c88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017c8c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017c90:	ea4e 040a 	orr.w	r4, lr, sl
 8017c94:	940a      	str	r4, [sp, #40]	; 0x28
 8017c96:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017c98:	2cff      	cmp	r4, #255	; 0xff
 8017c9a:	d021      	beq.n	8017ce0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8017c9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c9e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8017ca2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017ca4:	fb04 fb0b 	mul.w	fp, r4, fp
 8017ca8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017caa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017cae:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8017cb0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8017cb4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8017cb8:	fb04 fa0a 	mul.w	sl, r4, sl
 8017cbc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017cc0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8017cc4:	44de      	add	lr, fp
 8017cc6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8017cca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8017cce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8017cd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8017cd6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8017cda:	ea4e 040a 	orr.w	r4, lr, sl
 8017cde:	940f      	str	r4, [sp, #60]	; 0x3c
 8017ce0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017ce2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8017ce6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017cea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8017cee:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017cf0:	fb08 fc0c 	mul.w	ip, r8, ip
 8017cf4:	fb02 cc0e 	mla	ip, r2, lr, ip
 8017cf8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017cfc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017cfe:	fb01 cc0e 	mla	ip, r1, lr, ip
 8017d02:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8017d06:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017d08:	fb09 cc0e 	mla	ip, r9, lr, ip
 8017d0c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8017d10:	fb08 f80e 	mul.w	r8, r8, lr
 8017d14:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8017d18:	fb02 8303 	mla	r3, r2, r3, r8
 8017d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d1e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017d22:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8017d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017d28:	fb01 330a 	mla	r3, r1, sl, r3
 8017d2c:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8017d30:	fb09 3901 	mla	r9, r9, r1, r3
 8017d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d36:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017d38:	4343      	muls	r3, r0
 8017d3a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8017d3e:	1c58      	adds	r0, r3, #1
 8017d40:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8017d44:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8017d48:	ea4c 0c09 	orr.w	ip, ip, r9
 8017d4c:	783b      	ldrb	r3, [r7, #0]
 8017d4e:	fa5f f28c 	uxtb.w	r2, ip
 8017d52:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8017d56:	fb12 f201 	smulbb	r2, r2, r1
 8017d5a:	b2c0      	uxtb	r0, r0
 8017d5c:	fb03 2300 	mla	r3, r3, r0, r2
 8017d60:	b29b      	uxth	r3, r3
 8017d62:	1c5a      	adds	r2, r3, #1
 8017d64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017d68:	787a      	ldrb	r2, [r7, #1]
 8017d6a:	fb12 f200 	smulbb	r2, r2, r0
 8017d6e:	121b      	asrs	r3, r3, #8
 8017d70:	703b      	strb	r3, [r7, #0]
 8017d72:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8017d76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8017d7a:	fb03 2301 	mla	r3, r3, r1, r2
 8017d7e:	b29b      	uxth	r3, r3
 8017d80:	1c5a      	adds	r2, r3, #1
 8017d82:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8017d86:	121b      	asrs	r3, r3, #8
 8017d88:	707b      	strb	r3, [r7, #1]
 8017d8a:	78bb      	ldrb	r3, [r7, #2]
 8017d8c:	fb13 f000 	smulbb	r0, r3, r0
 8017d90:	fb0c 0c01 	mla	ip, ip, r1, r0
 8017d94:	fa1f fc8c 	uxth.w	ip, ip
 8017d98:	f10c 0301 	add.w	r3, ip, #1
 8017d9c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017da0:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017da4:	f887 c002 	strb.w	ip, [r7, #2]
 8017da8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017daa:	3703      	adds	r7, #3
 8017dac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8017dae:	441a      	add	r2, r3
 8017db0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017db2:	441d      	add	r5, r3
 8017db4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8017db6:	9229      	str	r2, [sp, #164]	; 0xa4
 8017db8:	3b01      	subs	r3, #1
 8017dba:	931a      	str	r3, [sp, #104]	; 0x68
 8017dbc:	e69c      	b.n	8017af8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8017dbe:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8017dc0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8017dc2:	441c      	add	r4, r3
 8017dc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8017dc6:	441d      	add	r5, r3
 8017dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dca:	9429      	str	r4, [sp, #164]	; 0xa4
 8017dcc:	3b01      	subs	r3, #1
 8017dce:	9309      	str	r3, [sp, #36]	; 0x24
 8017dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017dd2:	3303      	adds	r3, #3
 8017dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8017dd6:	e66f      	b.n	8017ab8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017dd8:	d026      	beq.n	8017e28 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8017dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ddc:	982b      	ldr	r0, [sp, #172]	; 0xac
 8017dde:	3b01      	subs	r3, #1
 8017de0:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8017de2:	fb00 4003 	mla	r0, r0, r3, r4
 8017de6:	1400      	asrs	r0, r0, #16
 8017de8:	f53f ae83 	bmi.w	8017af2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017dec:	3901      	subs	r1, #1
 8017dee:	4288      	cmp	r0, r1
 8017df0:	f6bf ae7f 	bge.w	8017af2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017df4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8017df6:	fb01 5303 	mla	r3, r1, r3, r5
 8017dfa:	141b      	asrs	r3, r3, #16
 8017dfc:	f53f ae79 	bmi.w	8017af2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017e00:	3a01      	subs	r2, #1
 8017e02:	4293      	cmp	r3, r2
 8017e04:	f6bf ae75 	bge.w	8017af2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8017e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e0a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8017e0e:	f103 0e03 	add.w	lr, r3, #3
 8017e12:	f1bb 0f00 	cmp.w	fp, #0
 8017e16:	dc71      	bgt.n	8017efc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8017e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e1a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8017e1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e20:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017e24:	4423      	add	r3, r4
 8017e26:	930c      	str	r3, [sp, #48]	; 0x30
 8017e28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	f340 81b5 	ble.w	801819a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8017e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017e34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e36:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017e3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017e3e:	eef0 6a62 	vmov.f32	s13, s5
 8017e42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e46:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017e4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e4e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8017e52:	eef0 6a43 	vmov.f32	s13, s6
 8017e56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017e5a:	ee16 5a90 	vmov	r5, s13
 8017e5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017e62:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017e66:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017e6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017e6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017e72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017e76:	ee12 2a90 	vmov	r2, s5
 8017e7a:	eef0 2a47 	vmov.f32	s5, s14
 8017e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e82:	ee13 2a10 	vmov	r2, s6
 8017e86:	932b      	str	r3, [sp, #172]	; 0xac
 8017e88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e8a:	eeb0 3a67 	vmov.f32	s6, s15
 8017e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017e92:	932c      	str	r3, [sp, #176]	; 0xb0
 8017e94:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017e96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8017e98:	3b01      	subs	r3, #1
 8017e9a:	9319      	str	r3, [sp, #100]	; 0x64
 8017e9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017e9e:	bf08      	it	eq
 8017ea0:	4613      	moveq	r3, r2
 8017ea2:	9309      	str	r3, [sp, #36]	; 0x24
 8017ea4:	e5fa      	b.n	8017a9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017ea6:	2900      	cmp	r1, #0
 8017ea8:	f43f ae6c 	beq.w	8017b84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017eac:	f818 0000 	ldrb.w	r0, [r8, r0]
 8017eb0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8017eb4:	900a      	str	r0, [sp, #40]	; 0x28
 8017eb6:	0e00      	lsrs	r0, r0, #24
 8017eb8:	9013      	str	r0, [sp, #76]	; 0x4c
 8017eba:	e663      	b.n	8017b84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017ebc:	f113 0801 	adds.w	r8, r3, #1
 8017ec0:	f53f af72 	bmi.w	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017ec4:	4540      	cmp	r0, r8
 8017ec6:	f6ff af6f 	blt.w	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017eca:	f11c 0801 	adds.w	r8, ip, #1
 8017ece:	f53f af6b 	bmi.w	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017ed2:	45c6      	cmp	lr, r8
 8017ed4:	f6ff af68 	blt.w	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017ed8:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017eda:	b200      	sxth	r0, r0
 8017edc:	9302      	str	r3, [sp, #8]
 8017ede:	fa0f f38e 	sxth.w	r3, lr
 8017ee2:	9000      	str	r0, [sp, #0]
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	4633      	mov	r3, r6
 8017ee8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8017eea:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8017eee:	e9cd c203 	strd	ip, r2, [sp, #12]
 8017ef2:	4639      	mov	r1, r7
 8017ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017ef6:	f7ff fc74 	bl	80177e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8017efa:	e755      	b.n	8017da8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8017efc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8017efe:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8017f02:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8017f04:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8017f08:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8017f0a:	1427      	asrs	r7, r4, #16
 8017f0c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017f0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8017f12:	142b      	asrs	r3, r5, #16
 8017f14:	fb01 7303 	mla	r3, r1, r3, r7
 8017f18:	18e7      	adds	r7, r4, r3
 8017f1a:	5ce3      	ldrb	r3, [r4, r3]
 8017f1c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8017f20:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8017f24:	2a00      	cmp	r2, #0
 8017f26:	f000 812e 	beq.w	8018186 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8017f2a:	f897 8001 	ldrb.w	r8, [r7, #1]
 8017f2e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8017f32:	9410      	str	r4, [sp, #64]	; 0x40
 8017f34:	0e24      	lsrs	r4, r4, #24
 8017f36:	9417      	str	r4, [sp, #92]	; 0x5c
 8017f38:	b170      	cbz	r0, 8017f58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8017f3a:	eb07 0801 	add.w	r8, r7, r1
 8017f3e:	5c79      	ldrb	r1, [r7, r1]
 8017f40:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017f44:	910b      	str	r1, [sp, #44]	; 0x2c
 8017f46:	0e09      	lsrs	r1, r1, #24
 8017f48:	9114      	str	r1, [sp, #80]	; 0x50
 8017f4a:	f898 1001 	ldrb.w	r1, [r8, #1]
 8017f4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8017f52:	9111      	str	r1, [sp, #68]	; 0x44
 8017f54:	0e09      	lsrs	r1, r1, #24
 8017f56:	9118      	str	r1, [sp, #96]	; 0x60
 8017f58:	b292      	uxth	r2, r2
 8017f5a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8017f5c:	b280      	uxth	r0, r0
 8017f5e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017f60:	fb02 f900 	mul.w	r9, r2, r0
 8017f64:	0112      	lsls	r2, r2, #4
 8017f66:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8017f6a:	eba2 0809 	sub.w	r8, r2, r9
 8017f6e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8017f72:	b280      	uxth	r0, r0
 8017f74:	fa1f f888 	uxth.w	r8, r8
 8017f78:	1a12      	subs	r2, r2, r0
 8017f7a:	fb08 f101 	mul.w	r1, r8, r1
 8017f7e:	b292      	uxth	r2, r2
 8017f80:	fb02 110c 	mla	r1, r2, ip, r1
 8017f84:	fb00 1104 	mla	r1, r0, r4, r1
 8017f88:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8017f8a:	fb09 1104 	mla	r1, r9, r4, r1
 8017f8e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017f92:	2900      	cmp	r1, #0
 8017f94:	f000 80ec 	beq.w	8018170 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8017f98:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8017f9c:	d019      	beq.n	8017fd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 8017f9e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8017fa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017fa6:	fb0c fa0a 	mul.w	sl, ip, sl
 8017faa:	fb0c fc03 	mul.w	ip, ip, r3
 8017fae:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8017fb2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8017fb6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8017fba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fbe:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8017fc2:	4453      	add	r3, sl
 8017fc4:	0a3f      	lsrs	r7, r7, #8
 8017fc6:	0a1b      	lsrs	r3, r3, #8
 8017fc8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8017fcc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8017fd0:	433b      	orrs	r3, r7
 8017fd2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017fd4:	2cff      	cmp	r4, #255	; 0xff
 8017fd6:	d020      	beq.n	801801a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8017fd8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017fda:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8017fde:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017fe0:	4367      	muls	r7, r4
 8017fe2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017fe4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8017fe8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8017fec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017fee:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8017ff2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8017ff6:	fb04 fa0a 	mul.w	sl, r4, sl
 8017ffa:	44bc      	add	ip, r7
 8017ffc:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018000:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018004:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018008:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801800c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018010:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018014:	ea4c 040a 	orr.w	r4, ip, sl
 8018018:	9410      	str	r4, [sp, #64]	; 0x40
 801801a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801801c:	2cff      	cmp	r4, #255	; 0xff
 801801e:	d020      	beq.n	8018062 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 8018020:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018022:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018026:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018028:	4367      	muls	r7, r4
 801802a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801802c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018030:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018034:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018036:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801803a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801803e:	fb04 fa0a 	mul.w	sl, r4, sl
 8018042:	44bc      	add	ip, r7
 8018044:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018048:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801804c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018050:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018054:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018058:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801805c:	ea4c 040a 	orr.w	r4, ip, sl
 8018060:	940b      	str	r4, [sp, #44]	; 0x2c
 8018062:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018064:	2cff      	cmp	r4, #255	; 0xff
 8018066:	d020      	beq.n	80180aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8018068:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801806a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801806e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8018070:	4367      	muls	r7, r4
 8018072:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018074:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018078:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801807c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801807e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018086:	fb04 fa0a 	mul.w	sl, r4, sl
 801808a:	44bc      	add	ip, r7
 801808c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018090:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018094:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018098:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801809c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80180a0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80180a4:	ea4c 040a 	orr.w	r4, ip, sl
 80180a8:	9411      	str	r4, [sp, #68]	; 0x44
 80180aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80180ac:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80180b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80180b4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80180b8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80180ba:	fb08 f707 	mul.w	r7, r8, r7
 80180be:	fb02 770c 	mla	r7, r2, ip, r7
 80180c2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80180c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80180c8:	fb00 770c 	mla	r7, r0, ip, r7
 80180cc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80180d0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80180d2:	fb09 770c 	mla	r7, r9, ip, r7
 80180d6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 80180da:	fb08 f80c 	mul.w	r8, r8, ip
 80180de:	0a3f      	lsrs	r7, r7, #8
 80180e0:	fb02 8303 	mla	r3, r2, r3, r8
 80180e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80180e6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80180ea:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80180ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80180f0:	fb00 330a 	mla	r3, r0, sl, r3
 80180f4:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80180f8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80180fa:	fb09 3c0c 	mla	ip, r9, ip, r3
 80180fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018100:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018104:	434b      	muls	r3, r1
 8018106:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801810a:	1c59      	adds	r1, r3, #1
 801810c:	ea47 070c 	orr.w	r7, r7, ip
 8018110:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018114:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018118:	b2fa      	uxtb	r2, r7
 801811a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801811e:	fb12 f200 	smulbb	r2, r2, r0
 8018122:	b2c9      	uxtb	r1, r1
 8018124:	fb03 2301 	mla	r3, r3, r1, r2
 8018128:	b29b      	uxth	r3, r3
 801812a:	1c5a      	adds	r2, r3, #1
 801812c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018130:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8018134:	fb12 f201 	smulbb	r2, r2, r1
 8018138:	121b      	asrs	r3, r3, #8
 801813a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801813e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8018142:	0c3f      	lsrs	r7, r7, #16
 8018144:	fb03 2300 	mla	r3, r3, r0, r2
 8018148:	b29b      	uxth	r3, r3
 801814a:	1c5a      	adds	r2, r3, #1
 801814c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8018150:	121b      	asrs	r3, r3, #8
 8018152:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018156:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801815a:	fb13 f101 	smulbb	r1, r3, r1
 801815e:	fb07 1700 	mla	r7, r7, r0, r1
 8018162:	b2bf      	uxth	r7, r7
 8018164:	1c7b      	adds	r3, r7, #1
 8018166:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801816a:	123f      	asrs	r7, r7, #8
 801816c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018170:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018172:	f10e 0e03 	add.w	lr, lr, #3
 8018176:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018178:	f10b 3bff 	add.w	fp, fp, #4294967295
 801817c:	441a      	add	r2, r3
 801817e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018180:	9229      	str	r2, [sp, #164]	; 0xa4
 8018182:	441d      	add	r5, r3
 8018184:	e645      	b.n	8017e12 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8018186:	2800      	cmp	r0, #0
 8018188:	f43f aee6 	beq.w	8017f58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801818c:	5c79      	ldrb	r1, [r7, r1]
 801818e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018192:	910b      	str	r1, [sp, #44]	; 0x2c
 8018194:	0e09      	lsrs	r1, r1, #24
 8018196:	9114      	str	r1, [sp, #80]	; 0x50
 8018198:	e6de      	b.n	8017f58 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801819a:	b01f      	add	sp, #124	; 0x7c
 801819c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080181a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 80181a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a4:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 80181a8:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80181ac:	2d00      	cmp	r5, #0
 80181ae:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 80181b2:	fb05 700e 	mla	r0, r5, lr, r7
 80181b6:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80181ba:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 80181be:	eb02 0800 	add.w	r8, r2, r0
 80181c2:	f2c0 8105 	blt.w	80183d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80181c6:	45a9      	cmp	r9, r5
 80181c8:	f340 8102 	ble.w	80183d0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 80181cc:	2f00      	cmp	r7, #0
 80181ce:	f2c0 80fd 	blt.w	80183cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80181d2:	45be      	cmp	lr, r7
 80181d4:	f340 80fa 	ble.w	80183cc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 80181d8:	5c12      	ldrb	r2, [r2, r0]
 80181da:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80181de:	1c7a      	adds	r2, r7, #1
 80181e0:	f100 80f9 	bmi.w	80183d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80181e4:	4596      	cmp	lr, r2
 80181e6:	f340 80f6 	ble.w	80183d6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 80181ea:	2c00      	cmp	r4, #0
 80181ec:	f000 80f5 	beq.w	80183da <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 80181f0:	f898 2001 	ldrb.w	r2, [r8, #1]
 80181f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80181f8:	3501      	adds	r5, #1
 80181fa:	f100 80f2 	bmi.w	80183e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 80181fe:	45a9      	cmp	r9, r5
 8018200:	f340 80ef 	ble.w	80183e2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8018204:	f1bc 0f00 	cmp.w	ip, #0
 8018208:	f000 80ee 	beq.w	80183e8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801820c:	2f00      	cmp	r7, #0
 801820e:	f2c0 80e6 	blt.w	80183de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8018212:	45be      	cmp	lr, r7
 8018214:	f340 80e3 	ble.w	80183de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8018218:	f818 200e 	ldrb.w	r2, [r8, lr]
 801821c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018220:	3701      	adds	r7, #1
 8018222:	f100 80e4 	bmi.w	80183ee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8018226:	45be      	cmp	lr, r7
 8018228:	f340 80e1 	ble.w	80183ee <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801822c:	2c00      	cmp	r4, #0
 801822e:	f000 80e0 	beq.w	80183f2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8018232:	44c6      	add	lr, r8
 8018234:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801823c:	b2a3      	uxth	r3, r4
 801823e:	fa1f fc8c 	uxth.w	ip, ip
 8018242:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8018246:	fb0c fe03 	mul.w	lr, ip, r3
 801824a:	011b      	lsls	r3, r3, #4
 801824c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8018250:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8018254:	eba3 070e 	sub.w	r7, r3, lr
 8018258:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801825c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8018260:	fa1f f48c 	uxth.w	r4, ip
 8018264:	b2bf      	uxth	r7, r7
 8018266:	1b1b      	subs	r3, r3, r4
 8018268:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801826c:	fb07 fc0a 	mul.w	ip, r7, sl
 8018270:	b29b      	uxth	r3, r3
 8018272:	fb03 cc0b 	mla	ip, r3, fp, ip
 8018276:	9300      	str	r3, [sp, #0]
 8018278:	fb04 cc09 	mla	ip, r4, r9, ip
 801827c:	fb0e cc08 	mla	ip, lr, r8, ip
 8018280:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8018284:	9301      	str	r3, [sp, #4]
 8018286:	2b00      	cmp	r3, #0
 8018288:	f000 809d 	beq.w	80183c6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801828c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8018290:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8018294:	fb0b fc0c 	mul.w	ip, fp, ip
 8018298:	fb0b f606 	mul.w	r6, fp, r6
 801829c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80182a0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80182a4:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80182a8:	44dc      	add	ip, fp
 80182aa:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 80182ae:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80182b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80182b6:	fb0a fb0b 	mul.w	fp, sl, fp
 80182ba:	fb0a fa00 	mul.w	sl, sl, r0
 80182be:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80182c2:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80182c6:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 80182ca:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80182ce:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80182d2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80182d6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80182da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80182de:	0a36      	lsrs	r6, r6, #8
 80182e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80182e4:	44dc      	add	ip, fp
 80182e6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80182ea:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80182ee:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80182f2:	fb09 fb0b 	mul.w	fp, r9, fp
 80182f6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80182fa:	fb09 f905 	mul.w	r9, r9, r5
 80182fe:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8018302:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018306:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801830a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801830e:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8018312:	fb0c fc07 	mul.w	ip, ip, r7
 8018316:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801831a:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801831e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8018322:	4458      	add	r0, fp
 8018324:	fb08 f505 	mul.w	r5, r8, r5
 8018328:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801832c:	fb08 f802 	mul.w	r8, r8, r2
 8018330:	0a00      	lsrs	r0, r0, #8
 8018332:	0a2a      	lsrs	r2, r5, #8
 8018334:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8018338:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801833c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8018340:	4415      	add	r5, r2
 8018342:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8018346:	0a2d      	lsrs	r5, r5, #8
 8018348:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801834c:	9a00      	ldr	r2, [sp, #0]
 801834e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8018352:	fb03 cc02 	mla	ip, r3, r2, ip
 8018356:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801835a:	9b01      	ldr	r3, [sp, #4]
 801835c:	fb05 c50e 	mla	r5, r5, lr, ip
 8018360:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8018364:	43db      	mvns	r3, r3
 8018366:	fb00 5004 	mla	r0, r0, r4, r5
 801836a:	b2db      	uxtb	r3, r3
 801836c:	0a00      	lsrs	r0, r0, #8
 801836e:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8018372:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8018376:	4378      	muls	r0, r7
 8018378:	fb02 0006 	mla	r0, r2, r6, r0
 801837c:	780a      	ldrb	r2, [r1, #0]
 801837e:	fb0e 0e08 	mla	lr, lr, r8, r0
 8018382:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8018386:	fb04 e000 	mla	r0, r4, r0, lr
 801838a:	fb02 f403 	mul.w	r4, r2, r3
 801838e:	0a00      	lsrs	r0, r0, #8
 8018390:	1c62      	adds	r2, r4, #1
 8018392:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8018396:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801839a:	4328      	orrs	r0, r5
 801839c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80183a0:	700a      	strb	r2, [r1, #0]
 80183a2:	784a      	ldrb	r2, [r1, #1]
 80183a4:	435a      	muls	r2, r3
 80183a6:	1c54      	adds	r4, r2, #1
 80183a8:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 80183ac:	0a02      	lsrs	r2, r0, #8
 80183ae:	0c00      	lsrs	r0, r0, #16
 80183b0:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80183b4:	704a      	strb	r2, [r1, #1]
 80183b6:	788a      	ldrb	r2, [r1, #2]
 80183b8:	4353      	muls	r3, r2
 80183ba:	1c5a      	adds	r2, r3, #1
 80183bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80183c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80183c4:	7088      	strb	r0, [r1, #2]
 80183c6:	b003      	add	sp, #12
 80183c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183cc:	2600      	movs	r6, #0
 80183ce:	e706      	b.n	80181de <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 80183d0:	2000      	movs	r0, #0
 80183d2:	4606      	mov	r6, r0
 80183d4:	e710      	b.n	80181f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80183d6:	2000      	movs	r0, #0
 80183d8:	e70e      	b.n	80181f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80183da:	4620      	mov	r0, r4
 80183dc:	e70c      	b.n	80181f8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 80183de:	2500      	movs	r5, #0
 80183e0:	e71e      	b.n	8018220 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 80183e2:	2200      	movs	r2, #0
 80183e4:	4615      	mov	r5, r2
 80183e6:	e729      	b.n	801823c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80183e8:	4662      	mov	r2, ip
 80183ea:	4665      	mov	r5, ip
 80183ec:	e726      	b.n	801823c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80183ee:	2200      	movs	r2, #0
 80183f0:	e724      	b.n	801823c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 80183f2:	4622      	mov	r2, r4
 80183f4:	e722      	b.n	801823c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

080183f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80183f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80183fa:	b09b      	sub	sp, #108	; 0x6c
 80183fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018400:	9218      	str	r2, [sp, #96]	; 0x60
 8018402:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8018404:	9019      	str	r0, [sp, #100]	; 0x64
 8018406:	9116      	str	r1, [sp, #88]	; 0x58
 8018408:	6850      	ldr	r0, [r2, #4]
 801840a:	9307      	str	r3, [sp, #28]
 801840c:	6812      	ldr	r2, [r2, #0]
 801840e:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8018410:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8018414:	fb00 1303 	mla	r3, r0, r3, r1
 8018418:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801841c:	18d3      	adds	r3, r2, r3
 801841e:	930a      	str	r3, [sp, #40]	; 0x28
 8018420:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018422:	681b      	ldr	r3, [r3, #0]
 8018424:	930f      	str	r3, [sp, #60]	; 0x3c
 8018426:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018428:	685e      	ldr	r6, [r3, #4]
 801842a:	3604      	adds	r6, #4
 801842c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801842e:	2b00      	cmp	r3, #0
 8018430:	dc03      	bgt.n	801843a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018432:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018434:	2b00      	cmp	r3, #0
 8018436:	f340 834f 	ble.w	8018ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801843a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801843c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018440:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018444:	1e48      	subs	r0, r1, #1
 8018446:	1e57      	subs	r7, r2, #1
 8018448:	9b07      	ldr	r3, [sp, #28]
 801844a:	2b00      	cmp	r3, #0
 801844c:	f340 8178 	ble.w	8018740 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8018450:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8018452:	142b      	asrs	r3, r5, #16
 8018454:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8018458:	d406      	bmi.n	8018468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801845a:	4584      	cmp	ip, r0
 801845c:	da04      	bge.n	8018468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801845e:	2b00      	cmp	r3, #0
 8018460:	db02      	blt.n	8018468 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018462:	42bb      	cmp	r3, r7
 8018464:	f2c0 816d 	blt.w	8018742 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018468:	f11c 0c01 	adds.w	ip, ip, #1
 801846c:	f100 815b 	bmi.w	8018726 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018470:	4561      	cmp	r1, ip
 8018472:	f2c0 8158 	blt.w	8018726 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018476:	3301      	adds	r3, #1
 8018478:	f100 8155 	bmi.w	8018726 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801847c:	429a      	cmp	r2, r3
 801847e:	f2c0 8152 	blt.w	8018726 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8018482:	9b07      	ldr	r3, [sp, #28]
 8018484:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018486:	9317      	str	r3, [sp, #92]	; 0x5c
 8018488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801848a:	2b00      	cmp	r3, #0
 801848c:	f340 8178 	ble.w	8018780 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8018490:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8018492:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8018496:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801849a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801849e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80184a0:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 80184a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80184a6:	141b      	asrs	r3, r3, #16
 80184a8:	f100 81ba 	bmi.w	8018820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80184ac:	f101 38ff 	add.w	r8, r1, #4294967295
 80184b0:	4543      	cmp	r3, r8
 80184b2:	f280 81b5 	bge.w	8018820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80184b6:	f1bc 0f00 	cmp.w	ip, #0
 80184ba:	f2c0 81b1 	blt.w	8018820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80184be:	f10e 38ff 	add.w	r8, lr, #4294967295
 80184c2:	45c4      	cmp	ip, r8
 80184c4:	f280 81ac 	bge.w	8018820 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 80184c8:	b209      	sxth	r1, r1
 80184ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80184cc:	fb0c 3301 	mla	r3, ip, r1, r3
 80184d0:	eb04 0803 	add.w	r8, r4, r3
 80184d4:	5ce3      	ldrb	r3, [r4, r3]
 80184d6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80184da:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80184de:	2a00      	cmp	r2, #0
 80184e0:	f000 8193 	beq.w	801880a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80184e4:	f898 c001 	ldrb.w	ip, [r8, #1]
 80184e8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80184ec:	940b      	str	r4, [sp, #44]	; 0x2c
 80184ee:	0e24      	lsrs	r4, r4, #24
 80184f0:	9412      	str	r4, [sp, #72]	; 0x48
 80184f2:	b178      	cbz	r0, 8018514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80184f4:	eb08 0c01 	add.w	ip, r8, r1
 80184f8:	f818 1001 	ldrb.w	r1, [r8, r1]
 80184fc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018500:	9108      	str	r1, [sp, #32]
 8018502:	0e09      	lsrs	r1, r1, #24
 8018504:	9110      	str	r1, [sp, #64]	; 0x40
 8018506:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801850a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801850e:	910c      	str	r1, [sp, #48]	; 0x30
 8018510:	0e09      	lsrs	r1, r1, #24
 8018512:	9113      	str	r1, [sp, #76]	; 0x4c
 8018514:	b292      	uxth	r2, r2
 8018516:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018518:	b280      	uxth	r0, r0
 801851a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801851c:	fb02 f900 	mul.w	r9, r2, r0
 8018520:	0112      	lsls	r2, r2, #4
 8018522:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8018526:	eba2 0809 	sub.w	r8, r2, r9
 801852a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801852e:	b280      	uxth	r0, r0
 8018530:	fa1f f888 	uxth.w	r8, r8
 8018534:	1a12      	subs	r2, r2, r0
 8018536:	fb08 f101 	mul.w	r1, r8, r1
 801853a:	b292      	uxth	r2, r2
 801853c:	fb02 110e 	mla	r1, r2, lr, r1
 8018540:	fb00 1104 	mla	r1, r0, r4, r1
 8018544:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018546:	fb09 1104 	mla	r1, r9, r4, r1
 801854a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801854e:	2900      	cmp	r1, #0
 8018550:	f000 80de 	beq.w	8018710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018554:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8018558:	d01b      	beq.n	8018592 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801855a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801855e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018562:	fb0e fa0a 	mul.w	sl, lr, sl
 8018566:	fb0e fe03 	mul.w	lr, lr, r3
 801856a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801856e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018572:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8018576:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801857a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801857e:	4453      	add	r3, sl
 8018580:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018584:	0a1b      	lsrs	r3, r3, #8
 8018586:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801858a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801858e:	ea43 030c 	orr.w	r3, r3, ip
 8018592:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018594:	2cff      	cmp	r4, #255	; 0xff
 8018596:	d021      	beq.n	80185dc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8018598:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801859a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801859e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80185a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80185a4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80185a6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80185aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80185ac:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80185b0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80185b4:	fb04 fa0a 	mul.w	sl, r4, sl
 80185b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80185bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80185c0:	44de      	add	lr, fp
 80185c2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80185c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80185ca:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80185ce:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80185d2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80185d6:	ea4e 040a 	orr.w	r4, lr, sl
 80185da:	940b      	str	r4, [sp, #44]	; 0x2c
 80185dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80185de:	2cff      	cmp	r4, #255	; 0xff
 80185e0:	d021      	beq.n	8018626 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 80185e2:	9c08      	ldr	r4, [sp, #32]
 80185e4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80185e8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80185ea:	fb04 fb0b 	mul.w	fp, r4, fp
 80185ee:	9c08      	ldr	r4, [sp, #32]
 80185f0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80185f4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80185f6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80185fa:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80185fe:	fb04 fa0a 	mul.w	sl, r4, sl
 8018602:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018606:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801860a:	44de      	add	lr, fp
 801860c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8018610:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8018614:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018618:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801861c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018620:	ea4e 040a 	orr.w	r4, lr, sl
 8018624:	9408      	str	r4, [sp, #32]
 8018626:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018628:	2cff      	cmp	r4, #255	; 0xff
 801862a:	d021      	beq.n	8018670 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801862c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801862e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8018632:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018634:	fb04 fb0b 	mul.w	fp, r4, fp
 8018638:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801863a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801863e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018640:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8018644:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8018648:	fb04 fa0a 	mul.w	sl, r4, sl
 801864c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018650:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8018654:	44de      	add	lr, fp
 8018656:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801865a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801865e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018662:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8018666:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801866a:	ea4e 040a 	orr.w	r4, lr, sl
 801866e:	940c      	str	r4, [sp, #48]	; 0x30
 8018670:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8018672:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8018676:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801867a:	43c9      	mvns	r1, r1
 801867c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018680:	9c08      	ldr	r4, [sp, #32]
 8018682:	b2c9      	uxtb	r1, r1
 8018684:	fb08 fc0c 	mul.w	ip, r8, ip
 8018688:	fb02 cc0e 	mla	ip, r2, lr, ip
 801868c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8018690:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8018692:	fb00 cc0e 	mla	ip, r0, lr, ip
 8018696:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801869a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801869c:	fb09 cc0e 	mla	ip, r9, lr, ip
 80186a0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 80186a4:	fb08 f80e 	mul.w	r8, r8, lr
 80186a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80186ac:	fb02 8303 	mla	r3, r2, r3, r8
 80186b0:	9a08      	ldr	r2, [sp, #32]
 80186b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80186b6:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80186ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80186bc:	fb00 330a 	mla	r3, r0, sl, r3
 80186c0:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 80186c4:	fb09 3900 	mla	r9, r9, r0, r3
 80186c8:	783b      	ldrb	r3, [r7, #0]
 80186ca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80186ce:	fb03 f201 	mul.w	r2, r3, r1
 80186d2:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80186d6:	1c53      	adds	r3, r2, #1
 80186d8:	ea4c 0c09 	orr.w	ip, ip, r9
 80186dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80186e0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80186e4:	703b      	strb	r3, [r7, #0]
 80186e6:	787b      	ldrb	r3, [r7, #1]
 80186e8:	434b      	muls	r3, r1
 80186ea:	1c5a      	adds	r2, r3, #1
 80186ec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80186f0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80186f4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80186f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80186fc:	707b      	strb	r3, [r7, #1]
 80186fe:	78bb      	ldrb	r3, [r7, #2]
 8018700:	4359      	muls	r1, r3
 8018702:	1c4b      	adds	r3, r1, #1
 8018704:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8018708:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801870c:	f887 c002 	strb.w	ip, [r7, #2]
 8018710:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018712:	3703      	adds	r7, #3
 8018714:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018716:	441a      	add	r2, r3
 8018718:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801871a:	441d      	add	r5, r3
 801871c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801871e:	9225      	str	r2, [sp, #148]	; 0x94
 8018720:	3b01      	subs	r3, #1
 8018722:	9317      	str	r3, [sp, #92]	; 0x5c
 8018724:	e6b0      	b.n	8018488 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8018726:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018728:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801872a:	441c      	add	r4, r3
 801872c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801872e:	441d      	add	r5, r3
 8018730:	9b07      	ldr	r3, [sp, #28]
 8018732:	9425      	str	r4, [sp, #148]	; 0x94
 8018734:	3b01      	subs	r3, #1
 8018736:	9307      	str	r3, [sp, #28]
 8018738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801873a:	3303      	adds	r3, #3
 801873c:	930a      	str	r3, [sp, #40]	; 0x28
 801873e:	e683      	b.n	8018448 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018740:	d026      	beq.n	8018790 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8018742:	9b07      	ldr	r3, [sp, #28]
 8018744:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8018746:	3b01      	subs	r3, #1
 8018748:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801874a:	fb00 4003 	mla	r0, r0, r3, r4
 801874e:	1400      	asrs	r0, r0, #16
 8018750:	f53f ae97 	bmi.w	8018482 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018754:	3901      	subs	r1, #1
 8018756:	4288      	cmp	r0, r1
 8018758:	f6bf ae93 	bge.w	8018482 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801875c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801875e:	fb01 5303 	mla	r3, r1, r3, r5
 8018762:	141b      	asrs	r3, r3, #16
 8018764:	f53f ae8d 	bmi.w	8018482 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018768:	3a01      	subs	r2, #1
 801876a:	4293      	cmp	r3, r2
 801876c:	f6bf ae89 	bge.w	8018482 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8018770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018772:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8018776:	f103 0e03 	add.w	lr, r3, #3
 801877a:	f1bb 0f00 	cmp.w	fp, #0
 801877e:	dc6d      	bgt.n	801885c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8018780:	9b07      	ldr	r3, [sp, #28]
 8018782:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8018786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018788:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801878c:	4423      	add	r3, r4
 801878e:	930a      	str	r3, [sp, #40]	; 0x28
 8018790:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018792:	2b00      	cmp	r3, #0
 8018794:	f340 81a0 	ble.w	8018ad8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8018798:	ee30 0a04 	vadd.f32	s0, s0, s8
 801879c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801879e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80187a2:	eeb0 6a62 	vmov.f32	s12, s5
 80187a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80187aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80187ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187b2:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 80187b6:	eeb0 6a43 	vmov.f32	s12, s6
 80187ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80187be:	ee16 5a10 	vmov	r5, s12
 80187c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80187da:	ee12 2a90 	vmov	r2, s5
 80187de:	eef0 2a47 	vmov.f32	s5, s14
 80187e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80187e6:	ee13 2a10 	vmov	r2, s6
 80187ea:	9327      	str	r3, [sp, #156]	; 0x9c
 80187ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80187ee:	eeb0 3a67 	vmov.f32	s6, s15
 80187f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80187f6:	9328      	str	r3, [sp, #160]	; 0xa0
 80187f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80187fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80187fc:	3b01      	subs	r3, #1
 80187fe:	9316      	str	r3, [sp, #88]	; 0x58
 8018800:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018802:	bf08      	it	eq
 8018804:	4613      	moveq	r3, r2
 8018806:	9307      	str	r3, [sp, #28]
 8018808:	e610      	b.n	801842c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801880a:	2800      	cmp	r0, #0
 801880c:	f43f ae82 	beq.w	8018514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018810:	f818 1001 	ldrb.w	r1, [r8, r1]
 8018814:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018818:	9108      	str	r1, [sp, #32]
 801881a:	0e09      	lsrs	r1, r1, #24
 801881c:	9110      	str	r1, [sp, #64]	; 0x40
 801881e:	e679      	b.n	8018514 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018820:	f113 0801 	adds.w	r8, r3, #1
 8018824:	f53f af74 	bmi.w	8018710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018828:	4541      	cmp	r1, r8
 801882a:	f6ff af71 	blt.w	8018710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801882e:	f11c 0801 	adds.w	r8, ip, #1
 8018832:	f53f af6d 	bmi.w	8018710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8018836:	45c6      	cmp	lr, r8
 8018838:	f6ff af6a 	blt.w	8018710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801883c:	b209      	sxth	r1, r1
 801883e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8018842:	fa0f f38e 	sxth.w	r3, lr
 8018846:	9100      	str	r1, [sp, #0]
 8018848:	4639      	mov	r1, r7
 801884a:	9301      	str	r3, [sp, #4]
 801884c:	4633      	mov	r3, r6
 801884e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8018852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018854:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018856:	f7ff fca3 	bl	80181a0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801885a:	e759      	b.n	8018710 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801885c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801885e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8018862:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8018864:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8018868:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801886a:	1427      	asrs	r7, r4, #16
 801886c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801886e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018872:	142b      	asrs	r3, r5, #16
 8018874:	fb01 7303 	mla	r3, r1, r3, r7
 8018878:	18e7      	adds	r7, r4, r3
 801887a:	5ce3      	ldrb	r3, [r4, r3]
 801887c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8018880:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8018884:	2a00      	cmp	r2, #0
 8018886:	f000 811d 	beq.w	8018ac4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801888a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801888e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 8018892:	940d      	str	r4, [sp, #52]	; 0x34
 8018894:	0e24      	lsrs	r4, r4, #24
 8018896:	9414      	str	r4, [sp, #80]	; 0x50
 8018898:	b170      	cbz	r0, 80188b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801889a:	eb07 0801 	add.w	r8, r7, r1
 801889e:	5c79      	ldrb	r1, [r7, r1]
 80188a0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80188a4:	9109      	str	r1, [sp, #36]	; 0x24
 80188a6:	0e09      	lsrs	r1, r1, #24
 80188a8:	9111      	str	r1, [sp, #68]	; 0x44
 80188aa:	f898 1001 	ldrb.w	r1, [r8, #1]
 80188ae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80188b2:	910e      	str	r1, [sp, #56]	; 0x38
 80188b4:	0e09      	lsrs	r1, r1, #24
 80188b6:	9115      	str	r1, [sp, #84]	; 0x54
 80188b8:	b292      	uxth	r2, r2
 80188ba:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80188bc:	b280      	uxth	r0, r0
 80188be:	fb02 f900 	mul.w	r9, r2, r0
 80188c2:	0112      	lsls	r2, r2, #4
 80188c4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80188c8:	eba2 0809 	sub.w	r8, r2, r9
 80188cc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80188d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80188d2:	b280      	uxth	r0, r0
 80188d4:	fa1f f888 	uxth.w	r8, r8
 80188d8:	1a09      	subs	r1, r1, r0
 80188da:	fb08 f202 	mul.w	r2, r8, r2
 80188de:	b289      	uxth	r1, r1
 80188e0:	fb01 220c 	mla	r2, r1, ip, r2
 80188e4:	fb00 2204 	mla	r2, r0, r4, r2
 80188e8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80188ea:	fb09 2204 	mla	r2, r9, r4, r2
 80188ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80188f2:	2a00      	cmp	r2, #0
 80188f4:	f000 80db 	beq.w	8018aae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80188f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80188fc:	d019      	beq.n	8018932 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80188fe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8018902:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018906:	fb0c fa0a 	mul.w	sl, ip, sl
 801890a:	fb0c fc03 	mul.w	ip, ip, r3
 801890e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8018912:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8018916:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801891a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801891e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8018922:	4453      	add	r3, sl
 8018924:	0a3f      	lsrs	r7, r7, #8
 8018926:	0a1b      	lsrs	r3, r3, #8
 8018928:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801892c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8018930:	433b      	orrs	r3, r7
 8018932:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018934:	2cff      	cmp	r4, #255	; 0xff
 8018936:	d020      	beq.n	801897a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8018938:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801893a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801893e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018940:	4367      	muls	r7, r4
 8018942:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018944:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018948:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801894c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801894e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8018952:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8018956:	fb04 fa0a 	mul.w	sl, r4, sl
 801895a:	44bc      	add	ip, r7
 801895c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8018960:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018964:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018968:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801896c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018970:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018974:	ea4c 040a 	orr.w	r4, ip, sl
 8018978:	940d      	str	r4, [sp, #52]	; 0x34
 801897a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801897c:	2cff      	cmp	r4, #255	; 0xff
 801897e:	d020      	beq.n	80189c2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 8018980:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018982:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018986:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018988:	4367      	muls	r7, r4
 801898a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801898c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8018990:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8018994:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018996:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801899a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801899e:	fb04 fa0a 	mul.w	sl, r4, sl
 80189a2:	44bc      	add	ip, r7
 80189a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80189a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80189ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80189b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80189b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80189bc:	ea4c 040a 	orr.w	r4, ip, sl
 80189c0:	9409      	str	r4, [sp, #36]	; 0x24
 80189c2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80189c4:	2cff      	cmp	r4, #255	; 0xff
 80189c6:	d020      	beq.n	8018a0a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80189c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80189ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80189ce:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80189d0:	4367      	muls	r7, r4
 80189d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80189d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80189d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80189dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80189de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80189e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189e6:	fb04 fa0a 	mul.w	sl, r4, sl
 80189ea:	44bc      	add	ip, r7
 80189ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80189f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80189f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80189f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80189fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8018a00:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8018a04:	ea4c 040a 	orr.w	r4, ip, sl
 8018a08:	940e      	str	r4, [sp, #56]	; 0x38
 8018a0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018a0c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8018a10:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8018a14:	43d2      	mvns	r2, r2
 8018a16:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8018a1a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018a1c:	b2d2      	uxtb	r2, r2
 8018a1e:	fb08 f707 	mul.w	r7, r8, r7
 8018a22:	fb01 770c 	mla	r7, r1, ip, r7
 8018a26:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018a2a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018a2c:	fb00 770c 	mla	r7, r0, ip, r7
 8018a30:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8018a34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8018a36:	fb09 770c 	mla	r7, r9, ip, r7
 8018a3a:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8018a3e:	fb08 f80c 	mul.w	r8, r8, ip
 8018a42:	0a3f      	lsrs	r7, r7, #8
 8018a44:	fb01 8303 	mla	r3, r1, r3, r8
 8018a48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018a4a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8018a4e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8018a52:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018a54:	fb00 330a 	mla	r3, r0, sl, r3
 8018a58:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 8018a5c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8018a60:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8018a64:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8018a68:	fb03 f102 	mul.w	r1, r3, r2
 8018a6c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8018a70:	1c4b      	adds	r3, r1, #1
 8018a72:	ea47 070c 	orr.w	r7, r7, ip
 8018a76:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018a7a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 8018a7e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8018a82:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8018a86:	4353      	muls	r3, r2
 8018a88:	1c59      	adds	r1, r3, #1
 8018a8a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8018a8e:	0a3b      	lsrs	r3, r7, #8
 8018a90:	0c3f      	lsrs	r7, r7, #16
 8018a92:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8018a96:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8018a9a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8018a9e:	435a      	muls	r2, r3
 8018aa0:	1c53      	adds	r3, r2, #1
 8018aa2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8018aa6:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8018aaa:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8018aae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8018ab0:	f10e 0e03 	add.w	lr, lr, #3
 8018ab4:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8018ab6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018aba:	441a      	add	r2, r3
 8018abc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018abe:	9225      	str	r2, [sp, #148]	; 0x94
 8018ac0:	441d      	add	r5, r3
 8018ac2:	e65a      	b.n	801877a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8018ac4:	2800      	cmp	r0, #0
 8018ac6:	f43f aef7 	beq.w	80188b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018aca:	5c79      	ldrb	r1, [r7, r1]
 8018acc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8018ad0:	9109      	str	r1, [sp, #36]	; 0x24
 8018ad2:	0e09      	lsrs	r1, r1, #24
 8018ad4:	9111      	str	r1, [sp, #68]	; 0x44
 8018ad6:	e6ef      	b.n	80188b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8018ad8:	b01b      	add	sp, #108	; 0x6c
 8018ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018ade <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 8018ade:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ae2:	b08d      	sub	sp, #52	; 0x34
 8018ae4:	468b      	mov	fp, r1
 8018ae6:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 8018aea:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 8018aee:	fb0c 5703 	mla	r7, ip, r3, r5
 8018af2:	f1bc 0f00 	cmp.w	ip, #0
 8018af6:	910b      	str	r1, [sp, #44]	; 0x2c
 8018af8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018afc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 8018b00:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 8018b04:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 8018b08:	eb02 0607 	add.w	r6, r2, r7
 8018b0c:	f89b 4000 	ldrb.w	r4, [fp]
 8018b10:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8018b14:	f89b 1002 	ldrb.w	r1, [fp, #2]
 8018b18:	f2c0 80c1 	blt.w	8018c9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8018b1c:	45e6      	cmp	lr, ip
 8018b1e:	f340 80be 	ble.w	8018c9e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 8018b22:	2d00      	cmp	r5, #0
 8018b24:	f2c0 80b7 	blt.w	8018c96 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8018b28:	42ab      	cmp	r3, r5
 8018b2a:	f340 80b4 	ble.w	8018c96 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8018b2e:	5dd2      	ldrb	r2, [r2, r7]
 8018b30:	9205      	str	r2, [sp, #20]
 8018b32:	7872      	ldrb	r2, [r6, #1]
 8018b34:	9206      	str	r2, [sp, #24]
 8018b36:	78b2      	ldrb	r2, [r6, #2]
 8018b38:	9207      	str	r2, [sp, #28]
 8018b3a:	1c6a      	adds	r2, r5, #1
 8018b3c:	f100 80b6 	bmi.w	8018cac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8018b40:	4293      	cmp	r3, r2
 8018b42:	f340 80b3 	ble.w	8018cac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8018b46:	f1b8 0f00 	cmp.w	r8, #0
 8018b4a:	f000 80af 	beq.w	8018cac <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8018b4e:	78f2      	ldrb	r2, [r6, #3]
 8018b50:	9201      	str	r2, [sp, #4]
 8018b52:	7932      	ldrb	r2, [r6, #4]
 8018b54:	9202      	str	r2, [sp, #8]
 8018b56:	7972      	ldrb	r2, [r6, #5]
 8018b58:	9203      	str	r2, [sp, #12]
 8018b5a:	f11c 0c01 	adds.w	ip, ip, #1
 8018b5e:	f100 80ad 	bmi.w	8018cbc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8018b62:	45e6      	cmp	lr, ip
 8018b64:	f340 80aa 	ble.w	8018cbc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8018b68:	f1ba 0f00 	cmp.w	sl, #0
 8018b6c:	f000 80a6 	beq.w	8018cbc <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8018b70:	2d00      	cmp	r5, #0
 8018b72:	f2c0 809f 	blt.w	8018cb4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8018b76:	42ab      	cmp	r3, r5
 8018b78:	f340 809c 	ble.w	8018cb4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8018b7c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018b80:	f816 9002 	ldrb.w	r9, [r6, r2]
 8018b84:	2203      	movs	r2, #3
 8018b86:	fb03 6c02 	mla	ip, r3, r2, r6
 8018b8a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8018b8e:	f89c e002 	ldrb.w	lr, [ip, #2]
 8018b92:	9704      	str	r7, [sp, #16]
 8018b94:	3501      	adds	r5, #1
 8018b96:	f100 8098 	bmi.w	8018cca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8018b9a:	42ab      	cmp	r3, r5
 8018b9c:	f340 8095 	ble.w	8018cca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8018ba0:	f1b8 0f00 	cmp.w	r8, #0
 8018ba4:	f000 8091 	beq.w	8018cca <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8018ba8:	f04f 0c03 	mov.w	ip, #3
 8018bac:	fb13 c20c 	smlabb	r2, r3, ip, ip
 8018bb0:	5cb5      	ldrb	r5, [r6, r2]
 8018bb2:	fb03 620c 	mla	r2, r3, ip, r6
 8018bb6:	fb03 630c 	mla	r3, r3, ip, r6
 8018bba:	7912      	ldrb	r2, [r2, #4]
 8018bbc:	795e      	ldrb	r6, [r3, #5]
 8018bbe:	fa1f f388 	uxth.w	r3, r8
 8018bc2:	fa1f fc8a 	uxth.w	ip, sl
 8018bc6:	fb03 f70c 	mul.w	r7, r3, ip
 8018bca:	011b      	lsls	r3, r3, #4
 8018bcc:	9708      	str	r7, [sp, #32]
 8018bce:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 8018bd2:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 8018bd6:	1bdb      	subs	r3, r3, r7
 8018bd8:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8018bdc:	fa1f fc8c 	uxth.w	ip, ip
 8018be0:	b29b      	uxth	r3, r3
 8018be2:	9709      	str	r7, [sp, #36]	; 0x24
 8018be4:	ebaa 0a0c 	sub.w	sl, sl, ip
 8018be8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018bea:	930a      	str	r3, [sp, #40]	; 0x28
 8018bec:	fa1f fa8a 	uxth.w	sl, sl
 8018bf0:	ea6f 0807 	mvn.w	r8, r7
 8018bf4:	9f01      	ldr	r7, [sp, #4]
 8018bf6:	435f      	muls	r7, r3
 8018bf8:	9b05      	ldr	r3, [sp, #20]
 8018bfa:	fa5f f888 	uxtb.w	r8, r8
 8018bfe:	fb0a 7703 	mla	r7, sl, r3, r7
 8018c02:	9b08      	ldr	r3, [sp, #32]
 8018c04:	fb14 f408 	smulbb	r4, r4, r8
 8018c08:	fb0c 7709 	mla	r7, ip, r9, r7
 8018c0c:	fb10 f008 	smulbb	r0, r0, r8
 8018c10:	fb11 f108 	smulbb	r1, r1, r8
 8018c14:	fb03 7705 	mla	r7, r3, r5, r7
 8018c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c1a:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8018c1e:	fb07 4703 	mla	r7, r7, r3, r4
 8018c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c24:	b2bf      	uxth	r7, r7
 8018c26:	1c7c      	adds	r4, r7, #1
 8018c28:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8018c2c:	1224      	asrs	r4, r4, #8
 8018c2e:	f88b 4000 	strb.w	r4, [fp]
 8018c32:	9c02      	ldr	r4, [sp, #8]
 8018c34:	435c      	muls	r4, r3
 8018c36:	9b06      	ldr	r3, [sp, #24]
 8018c38:	fb0a 4403 	mla	r4, sl, r3, r4
 8018c3c:	9b04      	ldr	r3, [sp, #16]
 8018c3e:	fb0c 4403 	mla	r4, ip, r3, r4
 8018c42:	9b08      	ldr	r3, [sp, #32]
 8018c44:	fb03 4402 	mla	r4, r3, r2, r4
 8018c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018c4c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018c50:	fb04 0403 	mla	r4, r4, r3, r0
 8018c54:	9b03      	ldr	r3, [sp, #12]
 8018c56:	435a      	muls	r2, r3
 8018c58:	b2a4      	uxth	r4, r4
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	9a07      	ldr	r2, [sp, #28]
 8018c5e:	1c60      	adds	r0, r4, #1
 8018c60:	fb0a 3a02 	mla	sl, sl, r2, r3
 8018c64:	9b08      	ldr	r3, [sp, #32]
 8018c66:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8018c6a:	fb0c ac0e 	mla	ip, ip, lr, sl
 8018c6e:	1224      	asrs	r4, r4, #8
 8018c70:	fb03 c606 	mla	r6, r3, r6, ip
 8018c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c76:	f88b 4001 	strb.w	r4, [fp, #1]
 8018c7a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018c7e:	fb06 1103 	mla	r1, r6, r3, r1
 8018c82:	b289      	uxth	r1, r1
 8018c84:	1c4e      	adds	r6, r1, #1
 8018c86:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8018c8a:	1209      	asrs	r1, r1, #8
 8018c8c:	f88b 1002 	strb.w	r1, [fp, #2]
 8018c90:	b00d      	add	sp, #52	; 0x34
 8018c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018c9a:	9405      	str	r4, [sp, #20]
 8018c9c:	e74d      	b.n	8018b3a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 8018c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ca2:	9401      	str	r4, [sp, #4]
 8018ca4:	9405      	str	r4, [sp, #20]
 8018ca6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018caa:	e756      	b.n	8018b5a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8018cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018cb0:	9401      	str	r4, [sp, #4]
 8018cb2:	e752      	b.n	8018b5a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8018cb4:	468e      	mov	lr, r1
 8018cb6:	9004      	str	r0, [sp, #16]
 8018cb8:	46a1      	mov	r9, r4
 8018cba:	e76b      	b.n	8018b94 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8018cbc:	460e      	mov	r6, r1
 8018cbe:	4602      	mov	r2, r0
 8018cc0:	4625      	mov	r5, r4
 8018cc2:	468e      	mov	lr, r1
 8018cc4:	9004      	str	r0, [sp, #16]
 8018cc6:	46a1      	mov	r9, r4
 8018cc8:	e779      	b.n	8018bbe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 8018cca:	460e      	mov	r6, r1
 8018ccc:	4602      	mov	r2, r0
 8018cce:	4625      	mov	r5, r4
 8018cd0:	e775      	b.n	8018bbe <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

08018cd2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018cd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cd6:	b09f      	sub	sp, #124	; 0x7c
 8018cd8:	920e      	str	r2, [sp, #56]	; 0x38
 8018cda:	9307      	str	r3, [sp, #28]
 8018cdc:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8018cde:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8018ce2:	901d      	str	r0, [sp, #116]	; 0x74
 8018ce4:	930c      	str	r3, [sp, #48]	; 0x30
 8018ce6:	6850      	ldr	r0, [r2, #4]
 8018ce8:	910b      	str	r1, [sp, #44]	; 0x2c
 8018cea:	6812      	ldr	r2, [r2, #0]
 8018cec:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8018cf0:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 8018cf4:	fb00 1303 	mla	r3, r0, r3, r1
 8018cf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018cfc:	18d3      	adds	r3, r2, r3
 8018cfe:	9308      	str	r3, [sp, #32]
 8018d00:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	930a      	str	r3, [sp, #40]	; 0x28
 8018d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018d08:	43db      	mvns	r3, r3
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8018d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	dc03      	bgt.n	8018d1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	f340 81f5 	ble.w	8019106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8018d1c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018d1e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018d22:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018d26:	1e48      	subs	r0, r1, #1
 8018d28:	1e54      	subs	r4, r2, #1
 8018d2a:	9b07      	ldr	r3, [sp, #28]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	f340 80d5 	ble.w	8018edc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8018d32:	ea5f 452a 	movs.w	r5, sl, asr #16
 8018d36:	ea4f 4328 	mov.w	r3, r8, asr #16
 8018d3a:	d406      	bmi.n	8018d4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018d3c:	4285      	cmp	r5, r0
 8018d3e:	da04      	bge.n	8018d4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	db02      	blt.n	8018d4a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018d44:	42a3      	cmp	r3, r4
 8018d46:	f2c0 80ca 	blt.w	8018ede <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8018d4a:	3501      	adds	r5, #1
 8018d4c:	f100 80bb 	bmi.w	8018ec6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8018d50:	42a9      	cmp	r1, r5
 8018d52:	f2c0 80b8 	blt.w	8018ec6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8018d56:	3301      	adds	r3, #1
 8018d58:	f100 80b5 	bmi.w	8018ec6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	f2c0 80b2 	blt.w	8018ec6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8018d62:	9b07      	ldr	r3, [sp, #28]
 8018d64:	9d08      	ldr	r5, [sp, #32]
 8018d66:	930d      	str	r3, [sp, #52]	; 0x34
 8018d68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	f340 80d6 	ble.w	8018f1c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 8018d70:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8018d72:	ea4f 4428 	mov.w	r4, r8, asr #16
 8018d76:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8018d78:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8018d7c:	68c6      	ldr	r6, [r0, #12]
 8018d7e:	ea5f 402a 	movs.w	r0, sl, asr #16
 8018d82:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8018d86:	689b      	ldr	r3, [r3, #8]
 8018d88:	f100 810f 	bmi.w	8018faa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8018d8c:	1e5f      	subs	r7, r3, #1
 8018d8e:	42b8      	cmp	r0, r7
 8018d90:	f280 810b 	bge.w	8018faa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8018d94:	2c00      	cmp	r4, #0
 8018d96:	f2c0 8108 	blt.w	8018faa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8018d9a:	1e77      	subs	r7, r6, #1
 8018d9c:	42bc      	cmp	r4, r7
 8018d9e:	f280 8104 	bge.w	8018faa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8018da2:	b21b      	sxth	r3, r3
 8018da4:	fb04 0003 	mla	r0, r4, r3, r0
 8018da8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018daa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018dae:	1826      	adds	r6, r4, r0
 8018db0:	5c24      	ldrb	r4, [r4, r0]
 8018db2:	78b7      	ldrb	r7, [r6, #2]
 8018db4:	7870      	ldrb	r0, [r6, #1]
 8018db6:	970f      	str	r7, [sp, #60]	; 0x3c
 8018db8:	7977      	ldrb	r7, [r6, #5]
 8018dba:	f896 e003 	ldrb.w	lr, [r6, #3]
 8018dbe:	f896 c004 	ldrb.w	ip, [r6, #4]
 8018dc2:	9710      	str	r7, [sp, #64]	; 0x40
 8018dc4:	b1c9      	cbz	r1, 8018dfa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018dc6:	f04f 0b03 	mov.w	fp, #3
 8018dca:	f06f 0904 	mvn.w	r9, #4
 8018dce:	3605      	adds	r6, #5
 8018dd0:	fb13 930b 	smlabb	r3, r3, fp, r9
 8018dd4:	eb06 0b03 	add.w	fp, r6, r3
 8018dd8:	5cf3      	ldrb	r3, [r6, r3]
 8018dda:	9311      	str	r3, [sp, #68]	; 0x44
 8018ddc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8018de0:	9313      	str	r3, [sp, #76]	; 0x4c
 8018de2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8018de6:	9315      	str	r3, [sp, #84]	; 0x54
 8018de8:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8018dec:	9312      	str	r3, [sp, #72]	; 0x48
 8018dee:	f89b 3004 	ldrb.w	r3, [fp, #4]
 8018df2:	9314      	str	r3, [sp, #80]	; 0x50
 8018df4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 8018df8:	9316      	str	r3, [sp, #88]	; 0x58
 8018dfa:	b292      	uxth	r2, r2
 8018dfc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8018dfe:	b289      	uxth	r1, r1
 8018e00:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 8018e04:	fb02 f601 	mul.w	r6, r2, r1
 8018e08:	0112      	lsls	r2, r2, #4
 8018e0a:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 8018e0e:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 8018e12:	1b92      	subs	r2, r2, r6
 8018e14:	b289      	uxth	r1, r1
 8018e16:	b292      	uxth	r2, r2
 8018e18:	eba9 0901 	sub.w	r9, r9, r1
 8018e1c:	fb02 fe0e 	mul.w	lr, r2, lr
 8018e20:	fa1f f989 	uxth.w	r9, r9
 8018e24:	fb02 fc0c 	mul.w	ip, r2, ip
 8018e28:	fb09 e404 	mla	r4, r9, r4, lr
 8018e2c:	f895 e000 	ldrb.w	lr, [r5]
 8018e30:	fb09 c000 	mla	r0, r9, r0, ip
 8018e34:	fb01 4407 	mla	r4, r1, r7, r4
 8018e38:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8018e3a:	fb06 4407 	mla	r4, r6, r7, r4
 8018e3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018e40:	fb1e fe07 	smulbb	lr, lr, r7
 8018e44:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018e48:	fb04 e403 	mla	r4, r4, r3, lr
 8018e4c:	b2a4      	uxth	r4, r4
 8018e4e:	f104 0e01 	add.w	lr, r4, #1
 8018e52:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8018e56:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018e58:	fb01 0004 	mla	r0, r1, r4, r0
 8018e5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018e5e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018e62:	fb06 0004 	mla	r0, r6, r4, r0
 8018e66:	786c      	ldrb	r4, [r5, #1]
 8018e68:	f885 e000 	strb.w	lr, [r5]
 8018e6c:	fb14 f407 	smulbb	r4, r4, r7
 8018e70:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8018e74:	fb00 4003 	mla	r0, r0, r3, r4
 8018e78:	b280      	uxth	r0, r0
 8018e7a:	1c44      	adds	r4, r0, #1
 8018e7c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 8018e80:	1200      	asrs	r0, r0, #8
 8018e82:	7068      	strb	r0, [r5, #1]
 8018e84:	9810      	ldr	r0, [sp, #64]	; 0x40
 8018e86:	4342      	muls	r2, r0
 8018e88:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8018e8a:	fb09 2200 	mla	r2, r9, r0, r2
 8018e8e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018e90:	fb01 2100 	mla	r1, r1, r0, r2
 8018e94:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8018e96:	fb06 1602 	mla	r6, r6, r2, r1
 8018e9a:	78a9      	ldrb	r1, [r5, #2]
 8018e9c:	fb11 f107 	smulbb	r1, r1, r7
 8018ea0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8018ea4:	fb06 1303 	mla	r3, r6, r3, r1
 8018ea8:	b29b      	uxth	r3, r3
 8018eaa:	1c5e      	adds	r6, r3, #1
 8018eac:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 8018eb0:	121b      	asrs	r3, r3, #8
 8018eb2:	70ab      	strb	r3, [r5, #2]
 8018eb4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018eb6:	3503      	adds	r5, #3
 8018eb8:	449a      	add	sl, r3
 8018eba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018ebc:	4498      	add	r8, r3
 8018ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018ec0:	3b01      	subs	r3, #1
 8018ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8018ec4:	e750      	b.n	8018d68 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ec6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8018ec8:	449a      	add	sl, r3
 8018eca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8018ecc:	4498      	add	r8, r3
 8018ece:	9b07      	ldr	r3, [sp, #28]
 8018ed0:	3b01      	subs	r3, #1
 8018ed2:	9307      	str	r3, [sp, #28]
 8018ed4:	9b08      	ldr	r3, [sp, #32]
 8018ed6:	3303      	adds	r3, #3
 8018ed8:	9308      	str	r3, [sp, #32]
 8018eda:	e726      	b.n	8018d2a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018edc:	d026      	beq.n	8018f2c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 8018ede:	9b07      	ldr	r3, [sp, #28]
 8018ee0:	982b      	ldr	r0, [sp, #172]	; 0xac
 8018ee2:	3b01      	subs	r3, #1
 8018ee4:	fb00 a003 	mla	r0, r0, r3, sl
 8018ee8:	1400      	asrs	r0, r0, #16
 8018eea:	f53f af3a 	bmi.w	8018d62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018eee:	3901      	subs	r1, #1
 8018ef0:	4288      	cmp	r0, r1
 8018ef2:	f6bf af36 	bge.w	8018d62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018ef6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8018ef8:	fb01 8303 	mla	r3, r1, r3, r8
 8018efc:	141b      	asrs	r3, r3, #16
 8018efe:	f53f af30 	bmi.w	8018d62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018f02:	3a01      	subs	r2, #1
 8018f04:	4293      	cmp	r3, r2
 8018f06:	f6bf af2c 	bge.w	8018d62 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8018f0a:	9b08      	ldr	r3, [sp, #32]
 8018f0c:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8018f10:	1cdd      	adds	r5, r3, #3
 8018f12:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 8018f16:	f1bc 0f00 	cmp.w	ip, #0
 8018f1a:	dc5f      	bgt.n	8018fdc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 8018f1c:	9b07      	ldr	r3, [sp, #28]
 8018f1e:	9a08      	ldr	r2, [sp, #32]
 8018f20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018f24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f28:	441a      	add	r2, r3
 8018f2a:	9208      	str	r2, [sp, #32]
 8018f2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	f340 80e9 	ble.w	8019106 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8018f34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8018f38:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018f3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018f3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018f42:	eef0 6a62 	vmov.f32	s13, s5
 8018f46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8018f4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018f4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f52:	ee16 aa90 	vmov	sl, s13
 8018f56:	eef0 6a43 	vmov.f32	s13, s6
 8018f5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8018f5e:	ee16 8a90 	vmov	r8, s13
 8018f62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018f66:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018f6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018f6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018f72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018f76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018f7a:	ee12 2a90 	vmov	r2, s5
 8018f7e:	eef0 2a47 	vmov.f32	s5, s14
 8018f82:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f86:	ee13 2a10 	vmov	r2, s6
 8018f8a:	932b      	str	r3, [sp, #172]	; 0xac
 8018f8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018f8e:	eeb0 3a67 	vmov.f32	s6, s15
 8018f92:	fb92 f3f3 	sdiv	r3, r2, r3
 8018f96:	932c      	str	r3, [sp, #176]	; 0xb0
 8018f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018f9c:	3b01      	subs	r3, #1
 8018f9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8018fa0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018fa2:	bf08      	it	eq
 8018fa4:	4613      	moveq	r3, r2
 8018fa6:	9307      	str	r3, [sp, #28]
 8018fa8:	e6b1      	b.n	8018d0e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018faa:	1c47      	adds	r7, r0, #1
 8018fac:	d482      	bmi.n	8018eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8018fae:	42bb      	cmp	r3, r7
 8018fb0:	db80      	blt.n	8018eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8018fb2:	1c67      	adds	r7, r4, #1
 8018fb4:	f53f af7e 	bmi.w	8018eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8018fb8:	42be      	cmp	r6, r7
 8018fba:	f6ff af7b 	blt.w	8018eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8018fbe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8018fc0:	b236      	sxth	r6, r6
 8018fc2:	9001      	str	r0, [sp, #4]
 8018fc4:	b21b      	sxth	r3, r3
 8018fc6:	9600      	str	r6, [sp, #0]
 8018fc8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8018fca:	e9cd 1704 	strd	r1, r7, [sp, #16]
 8018fce:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8018fd2:	4629      	mov	r1, r5
 8018fd4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fd6:	f7ff fd82 	bl	8018ade <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 8018fda:	e76b      	b.n	8018eb4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8018fdc:	9930      	ldr	r1, [sp, #192]	; 0xc0
 8018fde:	ea4f 402a 	mov.w	r0, sl, asr #16
 8018fe2:	f3c8 3203 	ubfx	r2, r8, #12, #4
 8018fe6:	f3ca 3303 	ubfx	r3, sl, #12, #4
 8018fea:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8018fee:	ea4f 4128 	mov.w	r1, r8, asr #16
 8018ff2:	fb07 0101 	mla	r1, r7, r1, r0
 8018ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8018ff8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018ffc:	1844      	adds	r4, r0, r1
 8018ffe:	5c40      	ldrb	r0, [r0, r1]
 8019000:	78a6      	ldrb	r6, [r4, #2]
 8019002:	7861      	ldrb	r1, [r4, #1]
 8019004:	960f      	str	r6, [sp, #60]	; 0x3c
 8019006:	78e6      	ldrb	r6, [r4, #3]
 8019008:	910d      	str	r1, [sp, #52]	; 0x34
 801900a:	9610      	str	r6, [sp, #64]	; 0x40
 801900c:	f894 9004 	ldrb.w	r9, [r4, #4]
 8019010:	f894 b005 	ldrb.w	fp, [r4, #5]
 8019014:	b192      	cbz	r2, 801903c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8019016:	f06f 0604 	mvn.w	r6, #4
 801901a:	2103      	movs	r1, #3
 801901c:	3405      	adds	r4, #5
 801901e:	fb17 6701 	smlabb	r7, r7, r1, r6
 8019022:	19e6      	adds	r6, r4, r7
 8019024:	5de4      	ldrb	r4, [r4, r7]
 8019026:	9417      	str	r4, [sp, #92]	; 0x5c
 8019028:	7874      	ldrb	r4, [r6, #1]
 801902a:	9419      	str	r4, [sp, #100]	; 0x64
 801902c:	78b4      	ldrb	r4, [r6, #2]
 801902e:	941b      	str	r4, [sp, #108]	; 0x6c
 8019030:	78f4      	ldrb	r4, [r6, #3]
 8019032:	9418      	str	r4, [sp, #96]	; 0x60
 8019034:	7934      	ldrb	r4, [r6, #4]
 8019036:	941a      	str	r4, [sp, #104]	; 0x68
 8019038:	7974      	ldrb	r4, [r6, #5]
 801903a:	941c      	str	r4, [sp, #112]	; 0x70
 801903c:	b29b      	uxth	r3, r3
 801903e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8019040:	b292      	uxth	r2, r2
 8019042:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019044:	3503      	adds	r5, #3
 8019046:	f10c 3cff 	add.w	ip, ip, #4294967295
 801904a:	fb03 f402 	mul.w	r4, r3, r2
 801904e:	011b      	lsls	r3, r3, #4
 8019050:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8019054:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8019058:	1b1b      	subs	r3, r3, r4
 801905a:	b292      	uxth	r2, r2
 801905c:	b29b      	uxth	r3, r3
 801905e:	1ab6      	subs	r6, r6, r2
 8019060:	435f      	muls	r7, r3
 8019062:	b2b6      	uxth	r6, r6
 8019064:	fb03 f909 	mul.w	r9, r3, r9
 8019068:	fb03 fb0b 	mul.w	fp, r3, fp
 801906c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801906e:	fb06 7000 	mla	r0, r6, r0, r7
 8019072:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019074:	fb06 bb03 	mla	fp, r6, r3, fp
 8019078:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801907a:	fb02 0007 	mla	r0, r2, r7, r0
 801907e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8019080:	fb02 bb03 	mla	fp, r2, r3, fp
 8019084:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019086:	fb04 0007 	mla	r0, r4, r7, r0
 801908a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801908e:	fb17 f701 	smulbb	r7, r7, r1
 8019092:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019096:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019098:	fb00 700e 	mla	r0, r0, lr, r7
 801909c:	fb06 9101 	mla	r1, r6, r1, r9
 80190a0:	b280      	uxth	r0, r0
 80190a2:	1c47      	adds	r7, r0, #1
 80190a4:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 80190a8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80190aa:	1200      	asrs	r0, r0, #8
 80190ac:	f805 0c06 	strb.w	r0, [r5, #-6]
 80190b0:	9819      	ldr	r0, [sp, #100]	; 0x64
 80190b2:	fb02 1100 	mla	r1, r2, r0, r1
 80190b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 80190b8:	fb04 1100 	mla	r1, r4, r0, r1
 80190bc:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 80190c0:	fb04 b403 	mla	r4, r4, r3, fp
 80190c4:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 80190c8:	fb10 f007 	smulbb	r0, r0, r7
 80190cc:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80190d0:	fb13 f307 	smulbb	r3, r3, r7
 80190d4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80190d8:	fb01 010e 	mla	r1, r1, lr, r0
 80190dc:	fb04 340e 	mla	r4, r4, lr, r3
 80190e0:	b289      	uxth	r1, r1
 80190e2:	b2a4      	uxth	r4, r4
 80190e4:	1c48      	adds	r0, r1, #1
 80190e6:	1c63      	adds	r3, r4, #1
 80190e8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80190ec:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80190f0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80190f2:	1209      	asrs	r1, r1, #8
 80190f4:	1224      	asrs	r4, r4, #8
 80190f6:	449a      	add	sl, r3
 80190f8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80190fa:	f805 1c05 	strb.w	r1, [r5, #-5]
 80190fe:	f805 4c04 	strb.w	r4, [r5, #-4]
 8019102:	4498      	add	r8, r3
 8019104:	e707      	b.n	8018f16 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8019106:	b01f      	add	sp, #124	; 0x7c
 8019108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801910c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019110:	b087      	sub	sp, #28
 8019112:	780d      	ldrb	r5, [r1, #0]
 8019114:	784c      	ldrb	r4, [r1, #1]
 8019116:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801911a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801911e:	9004      	str	r0, [sp, #16]
 8019120:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8019124:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 8019128:	9005      	str	r0, [sp, #20]
 801912a:	fb06 bc03 	mla	ip, r6, r3, fp
 801912e:	2e00      	cmp	r6, #0
 8019130:	7888      	ldrb	r0, [r1, #2]
 8019132:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019136:	eb02 090c 	add.w	r9, r2, ip
 801913a:	f2c0 8084 	blt.w	8019246 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801913e:	42b7      	cmp	r7, r6
 8019140:	f340 8081 	ble.w	8019246 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8019144:	f1bb 0f00 	cmp.w	fp, #0
 8019148:	db79      	blt.n	801923e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801914a:	455b      	cmp	r3, fp
 801914c:	dd77      	ble.n	801923e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801914e:	f812 200c 	ldrb.w	r2, [r2, ip]
 8019152:	9201      	str	r2, [sp, #4]
 8019154:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019158:	9202      	str	r2, [sp, #8]
 801915a:	f899 2002 	ldrb.w	r2, [r9, #2]
 801915e:	9203      	str	r2, [sp, #12]
 8019160:	f11b 0201 	adds.w	r2, fp, #1
 8019164:	d476      	bmi.n	8019254 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019166:	4293      	cmp	r3, r2
 8019168:	dd74      	ble.n	8019254 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801916a:	9a04      	ldr	r2, [sp, #16]
 801916c:	2a00      	cmp	r2, #0
 801916e:	d071      	beq.n	8019254 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8019170:	f899 8003 	ldrb.w	r8, [r9, #3]
 8019174:	f899 c004 	ldrb.w	ip, [r9, #4]
 8019178:	f899 a005 	ldrb.w	sl, [r9, #5]
 801917c:	3601      	adds	r6, #1
 801917e:	d471      	bmi.n	8019264 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019180:	42b7      	cmp	r7, r6
 8019182:	dd6f      	ble.n	8019264 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8019184:	9a05      	ldr	r2, [sp, #20]
 8019186:	2a00      	cmp	r2, #0
 8019188:	d06c      	beq.n	8019264 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801918a:	f1bb 0f00 	cmp.w	fp, #0
 801918e:	db65      	blt.n	801925c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019190:	455b      	cmp	r3, fp
 8019192:	dd63      	ble.n	801925c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8019194:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019198:	f819 e002 	ldrb.w	lr, [r9, r2]
 801919c:	2203      	movs	r2, #3
 801919e:	fb03 9602 	mla	r6, r3, r2, r9
 80191a2:	7877      	ldrb	r7, [r6, #1]
 80191a4:	78b6      	ldrb	r6, [r6, #2]
 80191a6:	f11b 0b01 	adds.w	fp, fp, #1
 80191aa:	d40c      	bmi.n	80191c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80191ac:	455b      	cmp	r3, fp
 80191ae:	dd0a      	ble.n	80191c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80191b0:	9a04      	ldr	r2, [sp, #16]
 80191b2:	b142      	cbz	r2, 80191c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 80191b4:	2203      	movs	r2, #3
 80191b6:	fb13 2002 	smlabb	r0, r3, r2, r2
 80191ba:	f819 5000 	ldrb.w	r5, [r9, r0]
 80191be:	fb03 9002 	mla	r0, r3, r2, r9
 80191c2:	7904      	ldrb	r4, [r0, #4]
 80191c4:	7940      	ldrb	r0, [r0, #5]
 80191c6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 80191ca:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80191ce:	fb03 fb02 	mul.w	fp, r3, r2
 80191d2:	011b      	lsls	r3, r3, #4
 80191d4:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 80191d8:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80191dc:	eba3 030b 	sub.w	r3, r3, fp
 80191e0:	b292      	uxth	r2, r2
 80191e2:	b29b      	uxth	r3, r3
 80191e4:	eba9 0902 	sub.w	r9, r9, r2
 80191e8:	9304      	str	r3, [sp, #16]
 80191ea:	fa1f f989 	uxth.w	r9, r9
 80191ee:	fb03 f808 	mul.w	r8, r3, r8
 80191f2:	9b01      	ldr	r3, [sp, #4]
 80191f4:	fb09 8803 	mla	r8, r9, r3, r8
 80191f8:	9b04      	ldr	r3, [sp, #16]
 80191fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80191fe:	9b02      	ldr	r3, [sp, #8]
 8019200:	fb02 880e 	mla	r8, r2, lr, r8
 8019204:	fb09 cc03 	mla	ip, r9, r3, ip
 8019208:	9b04      	ldr	r3, [sp, #16]
 801920a:	fb0b 8805 	mla	r8, fp, r5, r8
 801920e:	fb02 c707 	mla	r7, r2, r7, ip
 8019212:	fb03 f30a 	mul.w	r3, r3, sl
 8019216:	ea4f 2828 	mov.w	r8, r8, asr #8
 801921a:	fb0b 7404 	mla	r4, fp, r4, r7
 801921e:	f881 8000 	strb.w	r8, [r1]
 8019222:	1224      	asrs	r4, r4, #8
 8019224:	704c      	strb	r4, [r1, #1]
 8019226:	9c03      	ldr	r4, [sp, #12]
 8019228:	fb09 3904 	mla	r9, r9, r4, r3
 801922c:	fb02 9206 	mla	r2, r2, r6, r9
 8019230:	fb0b 2000 	mla	r0, fp, r0, r2
 8019234:	1200      	asrs	r0, r0, #8
 8019236:	7088      	strb	r0, [r1, #2]
 8019238:	b007      	add	sp, #28
 801923a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801923e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8019242:	9501      	str	r5, [sp, #4]
 8019244:	e78c      	b.n	8019160 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8019246:	4682      	mov	sl, r0
 8019248:	46a4      	mov	ip, r4
 801924a:	46a8      	mov	r8, r5
 801924c:	9501      	str	r5, [sp, #4]
 801924e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8019252:	e793      	b.n	801917c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8019254:	4682      	mov	sl, r0
 8019256:	46a4      	mov	ip, r4
 8019258:	46a8      	mov	r8, r5
 801925a:	e78f      	b.n	801917c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801925c:	4606      	mov	r6, r0
 801925e:	4627      	mov	r7, r4
 8019260:	46ae      	mov	lr, r5
 8019262:	e7a0      	b.n	80191a6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8019264:	4606      	mov	r6, r0
 8019266:	4627      	mov	r7, r4
 8019268:	46ae      	mov	lr, r5
 801926a:	e7ac      	b.n	80191c6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801926c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801926c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019270:	b09b      	sub	sp, #108	; 0x6c
 8019272:	920b      	str	r2, [sp, #44]	; 0x2c
 8019274:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019276:	9019      	str	r0, [sp, #100]	; 0x64
 8019278:	9109      	str	r1, [sp, #36]	; 0x24
 801927a:	6850      	ldr	r0, [r2, #4]
 801927c:	9306      	str	r3, [sp, #24]
 801927e:	6812      	ldr	r2, [r2, #0]
 8019280:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019284:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 8019288:	fb00 1303 	mla	r3, r0, r3, r1
 801928c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019290:	18d3      	adds	r3, r2, r3
 8019292:	9307      	str	r3, [sp, #28]
 8019294:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	9308      	str	r3, [sp, #32]
 801929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801929c:	2b00      	cmp	r3, #0
 801929e:	dc03      	bgt.n	80192a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80192a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	f340 81ab 	ble.w	80195fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 80192a8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80192aa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80192ae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80192b2:	1e48      	subs	r0, r1, #1
 80192b4:	1e55      	subs	r5, r2, #1
 80192b6:	9b06      	ldr	r3, [sp, #24]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f340 80b1 	ble.w	8019420 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80192be:	ea5f 462b 	movs.w	r6, fp, asr #16
 80192c2:	ea4f 4324 	mov.w	r3, r4, asr #16
 80192c6:	d406      	bmi.n	80192d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80192c8:	4286      	cmp	r6, r0
 80192ca:	da04      	bge.n	80192d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	db02      	blt.n	80192d6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80192d0:	42ab      	cmp	r3, r5
 80192d2:	f2c0 80a6 	blt.w	8019422 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 80192d6:	3601      	adds	r6, #1
 80192d8:	f100 8097 	bmi.w	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80192dc:	42b1      	cmp	r1, r6
 80192de:	f2c0 8094 	blt.w	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80192e2:	3301      	adds	r3, #1
 80192e4:	f100 8091 	bmi.w	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80192e8:	429a      	cmp	r2, r3
 80192ea:	f2c0 808e 	blt.w	801940a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80192ee:	9b06      	ldr	r3, [sp, #24]
 80192f0:	9e07      	ldr	r6, [sp, #28]
 80192f2:	930a      	str	r3, [sp, #40]	; 0x28
 80192f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	f340 80b0 	ble.w	801945c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80192fc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80192fe:	1425      	asrs	r5, r4, #16
 8019300:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019302:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8019306:	68c7      	ldr	r7, [r0, #12]
 8019308:	ea5f 402b 	movs.w	r0, fp, asr #16
 801930c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8019310:	689b      	ldr	r3, [r3, #8]
 8019312:	f100 80ea 	bmi.w	80194ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019316:	f103 3cff 	add.w	ip, r3, #4294967295
 801931a:	4560      	cmp	r0, ip
 801931c:	f280 80e5 	bge.w	80194ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019320:	2d00      	cmp	r5, #0
 8019322:	f2c0 80e2 	blt.w	80194ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019326:	f107 3cff 	add.w	ip, r7, #4294967295
 801932a:	4565      	cmp	r5, ip
 801932c:	f280 80dd 	bge.w	80194ea <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8019330:	b21b      	sxth	r3, r3
 8019332:	fb05 0003 	mla	r0, r5, r3, r0
 8019336:	9d08      	ldr	r5, [sp, #32]
 8019338:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801933c:	182f      	adds	r7, r5, r0
 801933e:	5c2d      	ldrb	r5, [r5, r0]
 8019340:	7878      	ldrb	r0, [r7, #1]
 8019342:	f897 e002 	ldrb.w	lr, [r7, #2]
 8019346:	900c      	str	r0, [sp, #48]	; 0x30
 8019348:	f897 9003 	ldrb.w	r9, [r7, #3]
 801934c:	f897 8004 	ldrb.w	r8, [r7, #4]
 8019350:	f897 a005 	ldrb.w	sl, [r7, #5]
 8019354:	b1c9      	cbz	r1, 801938a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019356:	f04f 0c03 	mov.w	ip, #3
 801935a:	f06f 0004 	mvn.w	r0, #4
 801935e:	3705      	adds	r7, #5
 8019360:	fb13 030c 	smlabb	r3, r3, ip, r0
 8019364:	eb07 0c03 	add.w	ip, r7, r3
 8019368:	5cfb      	ldrb	r3, [r7, r3]
 801936a:	930d      	str	r3, [sp, #52]	; 0x34
 801936c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019370:	930f      	str	r3, [sp, #60]	; 0x3c
 8019372:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8019376:	9311      	str	r3, [sp, #68]	; 0x44
 8019378:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801937c:	930e      	str	r3, [sp, #56]	; 0x38
 801937e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8019382:	9310      	str	r3, [sp, #64]	; 0x40
 8019384:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8019388:	9312      	str	r3, [sp, #72]	; 0x48
 801938a:	b292      	uxth	r2, r2
 801938c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801938e:	b289      	uxth	r1, r1
 8019390:	fb02 f301 	mul.w	r3, r2, r1
 8019394:	0112      	lsls	r2, r2, #4
 8019396:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801939a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801939e:	1ad2      	subs	r2, r2, r3
 80193a0:	b289      	uxth	r1, r1
 80193a2:	b292      	uxth	r2, r2
 80193a4:	1a7f      	subs	r7, r7, r1
 80193a6:	fb02 f909 	mul.w	r9, r2, r9
 80193aa:	b2bf      	uxth	r7, r7
 80193ac:	fb02 f808 	mul.w	r8, r2, r8
 80193b0:	fb02 fa0a 	mul.w	sl, r2, sl
 80193b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80193b6:	fb07 9905 	mla	r9, r7, r5, r9
 80193ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80193bc:	fb07 8800 	mla	r8, r7, r0, r8
 80193c0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80193c2:	fb07 aa0e 	mla	sl, r7, lr, sl
 80193c6:	fb01 9905 	mla	r9, r1, r5, r9
 80193ca:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80193cc:	fb01 8800 	mla	r8, r1, r0, r8
 80193d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80193d2:	fb01 a102 	mla	r1, r1, r2, sl
 80193d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80193d8:	fb03 9905 	mla	r9, r3, r5, r9
 80193dc:	fb03 8800 	mla	r8, r3, r0, r8
 80193e0:	fb03 1302 	mla	r3, r3, r2, r1
 80193e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80193e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80193ec:	121b      	asrs	r3, r3, #8
 80193ee:	f886 9000 	strb.w	r9, [r6]
 80193f2:	f886 8001 	strb.w	r8, [r6, #1]
 80193f6:	70b3      	strb	r3, [r6, #2]
 80193f8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80193fa:	3603      	adds	r6, #3
 80193fc:	449b      	add	fp, r3
 80193fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019400:	441c      	add	r4, r3
 8019402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019404:	3b01      	subs	r3, #1
 8019406:	930a      	str	r3, [sp, #40]	; 0x28
 8019408:	e774      	b.n	80192f4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801940a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801940c:	449b      	add	fp, r3
 801940e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019410:	441c      	add	r4, r3
 8019412:	9b06      	ldr	r3, [sp, #24]
 8019414:	3b01      	subs	r3, #1
 8019416:	9306      	str	r3, [sp, #24]
 8019418:	9b07      	ldr	r3, [sp, #28]
 801941a:	3303      	adds	r3, #3
 801941c:	9307      	str	r3, [sp, #28]
 801941e:	e74a      	b.n	80192b6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019420:	d024      	beq.n	801946c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8019422:	9b06      	ldr	r3, [sp, #24]
 8019424:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019426:	3b01      	subs	r3, #1
 8019428:	fb00 b003 	mla	r0, r0, r3, fp
 801942c:	1400      	asrs	r0, r0, #16
 801942e:	f53f af5e 	bmi.w	80192ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019432:	3901      	subs	r1, #1
 8019434:	4288      	cmp	r0, r1
 8019436:	f6bf af5a 	bge.w	80192ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801943a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801943c:	fb01 4303 	mla	r3, r1, r3, r4
 8019440:	141b      	asrs	r3, r3, #16
 8019442:	f53f af54 	bmi.w	80192ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019446:	3a01      	subs	r2, #1
 8019448:	4293      	cmp	r3, r2
 801944a:	f6bf af50 	bge.w	80192ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801944e:	9b07      	ldr	r3, [sp, #28]
 8019450:	f8dd e018 	ldr.w	lr, [sp, #24]
 8019454:	1cde      	adds	r6, r3, #3
 8019456:	f1be 0f00 	cmp.w	lr, #0
 801945a:	dc5f      	bgt.n	801951c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801945c:	9b06      	ldr	r3, [sp, #24]
 801945e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019462:	9b07      	ldr	r3, [sp, #28]
 8019464:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019468:	4423      	add	r3, r4
 801946a:	9307      	str	r3, [sp, #28]
 801946c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801946e:	2b00      	cmp	r3, #0
 8019470:	f340 80c5 	ble.w	80195fe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8019474:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019478:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801947a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801947e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019482:	eef0 6a62 	vmov.f32	s13, s5
 8019486:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801948a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801948e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019492:	ee16 ba90 	vmov	fp, s13
 8019496:	eef0 6a43 	vmov.f32	s13, s6
 801949a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801949e:	ee16 4a90 	vmov	r4, s13
 80194a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80194a6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80194aa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80194ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80194b2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80194b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80194ba:	ee12 2a90 	vmov	r2, s5
 80194be:	eef0 2a47 	vmov.f32	s5, s14
 80194c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80194c6:	ee13 2a10 	vmov	r2, s6
 80194ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80194cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80194ce:	eeb0 3a67 	vmov.f32	s6, s15
 80194d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80194d6:	9328      	str	r3, [sp, #160]	; 0xa0
 80194d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80194da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80194dc:	3b01      	subs	r3, #1
 80194de:	9309      	str	r3, [sp, #36]	; 0x24
 80194e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80194e2:	bf08      	it	eq
 80194e4:	4613      	moveq	r3, r2
 80194e6:	9306      	str	r3, [sp, #24]
 80194e8:	e6d7      	b.n	801929a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80194ea:	f110 0c01 	adds.w	ip, r0, #1
 80194ee:	d483      	bmi.n	80193f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80194f0:	4563      	cmp	r3, ip
 80194f2:	db81      	blt.n	80193f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80194f4:	f115 0c01 	adds.w	ip, r5, #1
 80194f8:	f53f af7e 	bmi.w	80193f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 80194fc:	4567      	cmp	r7, ip
 80194fe:	f6ff af7b 	blt.w	80193f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8019502:	b23f      	sxth	r7, r7
 8019504:	b21b      	sxth	r3, r3
 8019506:	9700      	str	r7, [sp, #0]
 8019508:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801950c:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8019510:	9a08      	ldr	r2, [sp, #32]
 8019512:	4631      	mov	r1, r6
 8019514:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019516:	f7ff fdf9 	bl	801910c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801951a:	e76d      	b.n	80193f8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801951c:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801951e:	ea4f 402b 	mov.w	r0, fp, asr #16
 8019522:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8019526:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801952a:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801952e:	1421      	asrs	r1, r4, #16
 8019530:	930a      	str	r3, [sp, #40]	; 0x28
 8019532:	fb0c 0101 	mla	r1, ip, r1, r0
 8019536:	9808      	ldr	r0, [sp, #32]
 8019538:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801953c:	1845      	adds	r5, r0, r1
 801953e:	5c40      	ldrb	r0, [r0, r1]
 8019540:	796f      	ldrb	r7, [r5, #5]
 8019542:	7869      	ldrb	r1, [r5, #1]
 8019544:	f895 8002 	ldrb.w	r8, [r5, #2]
 8019548:	f895 a003 	ldrb.w	sl, [r5, #3]
 801954c:	f895 9004 	ldrb.w	r9, [r5, #4]
 8019550:	970c      	str	r7, [sp, #48]	; 0x30
 8019552:	b1a2      	cbz	r2, 801957e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8019554:	2703      	movs	r7, #3
 8019556:	f06f 0304 	mvn.w	r3, #4
 801955a:	3505      	adds	r5, #5
 801955c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8019560:	eb05 070c 	add.w	r7, r5, ip
 8019564:	f815 500c 	ldrb.w	r5, [r5, ip]
 8019568:	9513      	str	r5, [sp, #76]	; 0x4c
 801956a:	787d      	ldrb	r5, [r7, #1]
 801956c:	9515      	str	r5, [sp, #84]	; 0x54
 801956e:	78bd      	ldrb	r5, [r7, #2]
 8019570:	9517      	str	r5, [sp, #92]	; 0x5c
 8019572:	78fd      	ldrb	r5, [r7, #3]
 8019574:	9514      	str	r5, [sp, #80]	; 0x50
 8019576:	793d      	ldrb	r5, [r7, #4]
 8019578:	9516      	str	r5, [sp, #88]	; 0x58
 801957a:	797d      	ldrb	r5, [r7, #5]
 801957c:	9518      	str	r5, [sp, #96]	; 0x60
 801957e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8019582:	b292      	uxth	r2, r2
 8019584:	3603      	adds	r6, #3
 8019586:	f10e 3eff 	add.w	lr, lr, #4294967295
 801958a:	fb03 f502 	mul.w	r5, r3, r2
 801958e:	011b      	lsls	r3, r3, #4
 8019590:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8019594:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 8019598:	1b5b      	subs	r3, r3, r5
 801959a:	b292      	uxth	r2, r2
 801959c:	b29b      	uxth	r3, r3
 801959e:	1abf      	subs	r7, r7, r2
 80195a0:	fb03 f909 	mul.w	r9, r3, r9
 80195a4:	b2bf      	uxth	r7, r7
 80195a6:	fb03 fa0a 	mul.w	sl, r3, sl
 80195aa:	fb07 9901 	mla	r9, r7, r1, r9
 80195ae:	9915      	ldr	r1, [sp, #84]	; 0x54
 80195b0:	fb07 aa00 	mla	sl, r7, r0, sl
 80195b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80195b6:	fb02 9901 	mla	r9, r2, r1, r9
 80195ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80195bc:	fb02 aa00 	mla	sl, r2, r0, sl
 80195c0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80195c2:	fb05 9901 	mla	r9, r5, r1, r9
 80195c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80195c8:	fb05 aa00 	mla	sl, r5, r0, sl
 80195cc:	434b      	muls	r3, r1
 80195ce:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80195d0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80195d4:	fb07 3308 	mla	r3, r7, r8, r3
 80195d8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80195dc:	f806 ac06 	strb.w	sl, [r6, #-6]
 80195e0:	fb02 3201 	mla	r2, r2, r1, r3
 80195e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80195e6:	f806 9c05 	strb.w	r9, [r6, #-5]
 80195ea:	fb05 2503 	mla	r5, r5, r3, r2
 80195ee:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80195f0:	122d      	asrs	r5, r5, #8
 80195f2:	449b      	add	fp, r3
 80195f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80195f6:	f806 5c04 	strb.w	r5, [r6, #-4]
 80195fa:	441c      	add	r4, r3
 80195fc:	e72b      	b.n	8019456 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 80195fe:	b01b      	add	sp, #108	; 0x6c
 8019600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019604 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8019604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019608:	b087      	sub	sp, #28
 801960a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801960e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8019612:	fb05 7003 	mla	r0, r5, r3, r7
 8019616:	2d00      	cmp	r5, #0
 8019618:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801961c:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8019620:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8019624:	f2c0 811f 	blt.w	8019866 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8019628:	45a8      	cmp	r8, r5
 801962a:	f340 811c 	ble.w	8019866 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801962e:	2f00      	cmp	r7, #0
 8019630:	f2c0 8117 	blt.w	8019862 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8019634:	42bb      	cmp	r3, r7
 8019636:	f340 8114 	ble.w	8019862 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801963a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801963e:	1c7a      	adds	r2, r7, #1
 8019640:	f100 8114 	bmi.w	801986c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8019644:	4293      	cmp	r3, r2
 8019646:	f340 8111 	ble.w	801986c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801964a:	2c00      	cmp	r4, #0
 801964c:	f000 8110 	beq.w	8019870 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 8019650:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019654:	3501      	adds	r5, #1
 8019656:	f100 810f 	bmi.w	8019878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801965a:	45a8      	cmp	r8, r5
 801965c:	f340 810c 	ble.w	8019878 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8019660:	f1be 0f00 	cmp.w	lr, #0
 8019664:	f000 810b 	beq.w	801987e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8019668:	2f00      	cmp	r7, #0
 801966a:	f2c0 8103 	blt.w	8019874 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801966e:	42bb      	cmp	r3, r7
 8019670:	f340 8100 	ble.w	8019874 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8019674:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8019678:	3701      	adds	r7, #1
 801967a:	f100 8103 	bmi.w	8019884 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801967e:	42bb      	cmp	r3, r7
 8019680:	f340 8100 	ble.w	8019884 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8019684:	2c00      	cmp	r4, #0
 8019686:	f000 80ff 	beq.w	8019888 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801968a:	3301      	adds	r3, #1
 801968c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019690:	fa1f fc84 	uxth.w	ip, r4
 8019694:	fa1f fe8e 	uxth.w	lr, lr
 8019698:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801969c:	fb0c f90e 	mul.w	r9, ip, lr
 80196a0:	0e13      	lsrs	r3, r2, #24
 80196a2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80196a6:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 80196aa:	9302      	str	r3, [sp, #8]
 80196ac:	ebac 0709 	sub.w	r7, ip, r9
 80196b0:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 80196b4:	fa1f f48e 	uxth.w	r4, lr
 80196b8:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 80196bc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80196c0:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80196c4:	fb0a fe0e 	mul.w	lr, sl, lr
 80196c8:	1b1b      	subs	r3, r3, r4
 80196ca:	fb0a f606 	mul.w	r6, sl, r6
 80196ce:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80196d2:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80196d6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 80196da:	b29b      	uxth	r3, r3
 80196dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80196e0:	b2bf      	uxth	r7, r7
 80196e2:	9301      	str	r3, [sp, #4]
 80196e4:	44e6      	add	lr, ip
 80196e6:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 80196ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80196ee:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80196f2:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 80196f6:	9303      	str	r3, [sp, #12]
 80196f8:	0a33      	lsrs	r3, r6, #8
 80196fa:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 80196fe:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019702:	9304      	str	r3, [sp, #16]
 8019704:	fb0b f606 	mul.w	r6, fp, r6
 8019708:	fb0b f000 	mul.w	r0, fp, r0
 801970c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8019710:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8019714:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019718:	44b6      	add	lr, r6
 801971a:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801971e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8019722:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 8019726:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801972a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801972e:	fb08 f606 	mul.w	r6, r8, r6
 8019732:	0a03      	lsrs	r3, r0, #8
 8019734:	fb08 f505 	mul.w	r5, r8, r5
 8019738:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801973c:	0a30      	lsrs	r0, r6, #8
 801973e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8019742:	9305      	str	r3, [sp, #20]
 8019744:	0e13      	lsrs	r3, r2, #24
 8019746:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801974a:	fb0e fe07 	mul.w	lr, lr, r7
 801974e:	4430      	add	r0, r6
 8019750:	f505 7680 	add.w	r6, r5, #256	; 0x100
 8019754:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8019758:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801975c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019760:	0a00      	lsrs	r0, r0, #8
 8019762:	435e      	muls	r6, r3
 8019764:	0a2d      	lsrs	r5, r5, #8
 8019766:	435a      	muls	r2, r3
 8019768:	9b03      	ldr	r3, [sp, #12]
 801976a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801976e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 8019772:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019776:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801977a:	44b4      	add	ip, r6
 801977c:	f502 7680 	add.w	r6, r2, #256	; 0x100
 8019780:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019784:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8019788:	9e01      	ldr	r6, [sp, #4]
 801978a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801978e:	fb03 ee06 	mla	lr, r3, r6, lr
 8019792:	9b04      	ldr	r3, [sp, #16]
 8019794:	0a12      	lsrs	r2, r2, #8
 8019796:	fb0c ee09 	mla	lr, ip, r9, lr
 801979a:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801979e:	9b05      	ldr	r3, [sp, #20]
 80197a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80197a4:	fb00 ee04 	mla	lr, r0, r4, lr
 80197a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80197ac:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 80197b0:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 80197b4:	9b01      	ldr	r3, [sp, #4]
 80197b6:	fb07 fe0e 	mul.w	lr, r7, lr
 80197ba:	fb07 f70b 	mul.w	r7, r7, fp
 80197be:	fb03 ee06 	mla	lr, r3, r6, lr
 80197c2:	fb03 730a 	mla	r3, r3, sl, r7
 80197c6:	fb09 e202 	mla	r2, r9, r2, lr
 80197ca:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80197ce:	fb04 2e0e 	mla	lr, r4, lr, r2
 80197d2:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80197d6:	fb04 3408 	mla	r4, r4, r8, r3
 80197da:	9b02      	ldr	r3, [sp, #8]
 80197dc:	b292      	uxth	r2, r2
 80197de:	fb09 4903 	mla	r9, r9, r3, r4
 80197e2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80197e6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80197ea:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80197ee:	fb09 f902 	mul.w	r9, r9, r2
 80197f2:	ea40 0e0e 	orr.w	lr, r0, lr
 80197f6:	f109 0301 	add.w	r3, r9, #1
 80197fa:	fa5f f08e 	uxtb.w	r0, lr
 80197fe:	fb10 f002 	smulbb	r0, r0, r2
 8019802:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8019806:	780b      	ldrb	r3, [r1, #0]
 8019808:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801980c:	fa5f f989 	uxtb.w	r9, r9
 8019810:	fb03 0309 	mla	r3, r3, r9, r0
 8019814:	b29b      	uxth	r3, r3
 8019816:	1c58      	adds	r0, r3, #1
 8019818:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801981c:	7848      	ldrb	r0, [r1, #1]
 801981e:	fb10 f009 	smulbb	r0, r0, r9
 8019822:	121b      	asrs	r3, r3, #8
 8019824:	700b      	strb	r3, [r1, #0]
 8019826:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801982a:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801982e:	fb03 0302 	mla	r3, r3, r2, r0
 8019832:	b29b      	uxth	r3, r3
 8019834:	1c58      	adds	r0, r3, #1
 8019836:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801983a:	121b      	asrs	r3, r3, #8
 801983c:	704b      	strb	r3, [r1, #1]
 801983e:	788b      	ldrb	r3, [r1, #2]
 8019840:	fb13 f909 	smulbb	r9, r3, r9
 8019844:	fb0e 9e02 	mla	lr, lr, r2, r9
 8019848:	fa1f fe8e 	uxth.w	lr, lr
 801984c:	f10e 0301 	add.w	r3, lr, #1
 8019850:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8019854:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019858:	f881 e002 	strb.w	lr, [r1, #2]
 801985c:	b007      	add	sp, #28
 801985e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019862:	2600      	movs	r6, #0
 8019864:	e6eb      	b.n	801963e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8019866:	2000      	movs	r0, #0
 8019868:	4606      	mov	r6, r0
 801986a:	e6f3      	b.n	8019654 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801986c:	2000      	movs	r0, #0
 801986e:	e6f1      	b.n	8019654 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8019870:	4620      	mov	r0, r4
 8019872:	e6ef      	b.n	8019654 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8019874:	2500      	movs	r5, #0
 8019876:	e6ff      	b.n	8019678 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8019878:	2200      	movs	r2, #0
 801987a:	4615      	mov	r5, r2
 801987c:	e708      	b.n	8019690 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801987e:	4672      	mov	r2, lr
 8019880:	4675      	mov	r5, lr
 8019882:	e705      	b.n	8019690 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019884:	2200      	movs	r2, #0
 8019886:	e703      	b.n	8019690 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8019888:	4622      	mov	r2, r4
 801988a:	e701      	b.n	8019690 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801988c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801988c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019890:	b09d      	sub	sp, #116	; 0x74
 8019892:	9219      	str	r2, [sp, #100]	; 0x64
 8019894:	9307      	str	r3, [sp, #28]
 8019896:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8019898:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801989c:	901b      	str	r0, [sp, #108]	; 0x6c
 801989e:	931a      	str	r3, [sp, #104]	; 0x68
 80198a0:	6850      	ldr	r0, [r2, #4]
 80198a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80198a4:	6812      	ldr	r2, [r2, #0]
 80198a6:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80198aa:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 80198ae:	fb00 1303 	mla	r3, r0, r3, r1
 80198b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80198b6:	18d3      	adds	r3, r2, r3
 80198b8:	930a      	str	r3, [sp, #40]	; 0x28
 80198ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	9310      	str	r3, [sp, #64]	; 0x40
 80198c0:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80198c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80198c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	dc03      	bgt.n	80198d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80198cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	f340 8368 	ble.w	8019fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80198d4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80198d6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80198da:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80198de:	1e48      	subs	r0, r1, #1
 80198e0:	1e57      	subs	r7, r2, #1
 80198e2:	9b07      	ldr	r3, [sp, #28]
 80198e4:	2b00      	cmp	r3, #0
 80198e6:	f340 8187 	ble.w	8019bf8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80198ea:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80198ee:	ea4f 4326 	mov.w	r3, r6, asr #16
 80198f2:	d406      	bmi.n	8019902 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80198f4:	4584      	cmp	ip, r0
 80198f6:	da04      	bge.n	8019902 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	db02      	blt.n	8019902 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80198fc:	42bb      	cmp	r3, r7
 80198fe:	f2c0 817c 	blt.w	8019bfa <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 8019902:	f11c 0c01 	adds.w	ip, ip, #1
 8019906:	f100 816c 	bmi.w	8019be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801990a:	4561      	cmp	r1, ip
 801990c:	f2c0 8169 	blt.w	8019be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019910:	3301      	adds	r3, #1
 8019912:	f100 8166 	bmi.w	8019be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 8019916:	429a      	cmp	r2, r3
 8019918:	f2c0 8163 	blt.w	8019be2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801991c:	9b07      	ldr	r3, [sp, #28]
 801991e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019920:	9318      	str	r3, [sp, #96]	; 0x60
 8019922:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019924:	2b00      	cmp	r3, #0
 8019926:	f340 8186 	ble.w	8019c36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801992a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801992c:	142a      	asrs	r2, r5, #16
 801992e:	ea4f 4026 	mov.w	r0, r6, asr #16
 8019932:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019936:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801993a:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801993e:	f100 81cb 	bmi.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8019942:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019946:	4542      	cmp	r2, r8
 8019948:	f280 81c6 	bge.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801994c:	2800      	cmp	r0, #0
 801994e:	f2c0 81c3 	blt.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8019952:	f103 38ff 	add.w	r8, r3, #4294967295
 8019956:	4540      	cmp	r0, r8
 8019958:	f280 81be 	bge.w	8019cd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801995c:	fa0f f38e 	sxth.w	r3, lr
 8019960:	fb00 2203 	mla	r2, r0, r3, r2
 8019964:	9810      	ldr	r0, [sp, #64]	; 0x40
 8019966:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801996a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801996e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8019972:	2900      	cmp	r1, #0
 8019974:	f000 81a6 	beq.w	8019cc4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8019978:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801997c:	900c      	str	r0, [sp, #48]	; 0x30
 801997e:	0e00      	lsrs	r0, r0, #24
 8019980:	9013      	str	r0, [sp, #76]	; 0x4c
 8019982:	f1bc 0f00 	cmp.w	ip, #0
 8019986:	d00f      	beq.n	80199a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801998c:	3b01      	subs	r3, #1
 801998e:	009b      	lsls	r3, r3, #2
 8019990:	3304      	adds	r3, #4
 8019992:	eb08 0003 	add.w	r0, r8, r3
 8019996:	f858 3003 	ldr.w	r3, [r8, r3]
 801999a:	9308      	str	r3, [sp, #32]
 801999c:	0e1b      	lsrs	r3, r3, #24
 801999e:	9311      	str	r3, [sp, #68]	; 0x44
 80199a0:	6843      	ldr	r3, [r0, #4]
 80199a2:	930d      	str	r3, [sp, #52]	; 0x34
 80199a4:	0e1b      	lsrs	r3, r3, #24
 80199a6:	9314      	str	r3, [sp, #80]	; 0x50
 80199a8:	b289      	uxth	r1, r1
 80199aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80199ac:	fa1f fc8c 	uxth.w	ip, ip
 80199b0:	0108      	lsls	r0, r1, #4
 80199b2:	fb01 f90c 	mul.w	r9, r1, ip
 80199b6:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80199ba:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 80199be:	eba0 0809 	sub.w	r8, r0, r9
 80199c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80199c4:	fa1f f18c 	uxth.w	r1, ip
 80199c8:	fa1f f888 	uxth.w	r8, r8
 80199cc:	1a5b      	subs	r3, r3, r1
 80199ce:	fb08 f000 	mul.w	r0, r8, r0
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	fb03 000e 	mla	r0, r3, lr, r0
 80199d8:	fb01 0004 	mla	r0, r1, r4, r0
 80199dc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80199de:	fb09 0004 	mla	r0, r9, r4, r0
 80199e2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80199e6:	2800      	cmp	r0, #0
 80199e8:	f000 80f2 	beq.w	8019bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80199ec:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80199f0:	d01b      	beq.n	8019a2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80199f2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80199f6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80199fa:	fb0e fa0a 	mul.w	sl, lr, sl
 80199fe:	fb0e fe02 	mul.w	lr, lr, r2
 8019a02:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8019a06:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019a0a:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019a0e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019a12:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019a16:	4452      	add	r2, sl
 8019a18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a1c:	0a12      	lsrs	r2, r2, #8
 8019a1e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019a22:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019a26:	ea42 020c 	orr.w	r2, r2, ip
 8019a2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019a2c:	2cff      	cmp	r4, #255	; 0xff
 8019a2e:	d021      	beq.n	8019a74 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8019a30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019a32:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019a36:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019a38:	fb04 fb0b 	mul.w	fp, r4, fp
 8019a3c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019a3e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019a44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019a48:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a4c:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a50:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019a54:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019a58:	44de      	add	lr, fp
 8019a5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019a5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019a62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019a6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019a6e:	ea4e 040a 	orr.w	r4, lr, sl
 8019a72:	940c      	str	r4, [sp, #48]	; 0x30
 8019a74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a76:	2cff      	cmp	r4, #255	; 0xff
 8019a78:	d021      	beq.n	8019abe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019a7a:	9c08      	ldr	r4, [sp, #32]
 8019a7c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019a80:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a82:	fb04 fb0b 	mul.w	fp, r4, fp
 8019a86:	9c08      	ldr	r4, [sp, #32]
 8019a88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019a8c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019a8e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019a92:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a96:	fb04 fa0a 	mul.w	sl, r4, sl
 8019a9a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019a9e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019aa2:	44de      	add	lr, fp
 8019aa4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019aa8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019aac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ab0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ab4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019ab8:	ea4e 040a 	orr.w	r4, lr, sl
 8019abc:	9408      	str	r4, [sp, #32]
 8019abe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019ac0:	2cff      	cmp	r4, #255	; 0xff
 8019ac2:	d021      	beq.n	8019b08 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8019ac4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019ac6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019aca:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019acc:	fb04 fb0b 	mul.w	fp, r4, fp
 8019ad0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019ad2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019ad6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019ad8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019adc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019ae0:	fb04 fa0a 	mul.w	sl, r4, sl
 8019ae4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019ae8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019aec:	44de      	add	lr, fp
 8019aee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019af2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019af6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019afa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019afe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019b02:	ea4e 040a 	orr.w	r4, lr, sl
 8019b06:	940d      	str	r4, [sp, #52]	; 0x34
 8019b08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019b0a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8019b0e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019b12:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019b16:	9c08      	ldr	r4, [sp, #32]
 8019b18:	fb08 fc0c 	mul.w	ip, r8, ip
 8019b1c:	fb03 cc0e 	mla	ip, r3, lr, ip
 8019b20:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019b24:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019b26:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019b2a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019b2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019b30:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019b34:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019b38:	fb08 f80e 	mul.w	r8, r8, lr
 8019b3c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019b40:	fb03 8202 	mla	r2, r3, r2, r8
 8019b44:	9b08      	ldr	r3, [sp, #32]
 8019b46:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019b4a:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8019b4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b50:	fb01 220a 	mla	r2, r1, sl, r2
 8019b54:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8019b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b5a:	fb09 2901 	mla	r9, r9, r1, r2
 8019b5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019b60:	4343      	muls	r3, r0
 8019b62:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019b66:	1c58      	adds	r0, r3, #1
 8019b68:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019b6c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019b70:	783b      	ldrb	r3, [r7, #0]
 8019b72:	ea4c 0c09 	orr.w	ip, ip, r9
 8019b76:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019b7a:	fa5f f28c 	uxtb.w	r2, ip
 8019b7e:	b2c0      	uxtb	r0, r0
 8019b80:	fb12 f201 	smulbb	r2, r2, r1
 8019b84:	fb03 2300 	mla	r3, r3, r0, r2
 8019b88:	b29b      	uxth	r3, r3
 8019b8a:	1c5a      	adds	r2, r3, #1
 8019b8c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b90:	787a      	ldrb	r2, [r7, #1]
 8019b92:	fb12 f200 	smulbb	r2, r2, r0
 8019b96:	121b      	asrs	r3, r3, #8
 8019b98:	703b      	strb	r3, [r7, #0]
 8019b9a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019b9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019ba2:	fb03 2301 	mla	r3, r3, r1, r2
 8019ba6:	b29b      	uxth	r3, r3
 8019ba8:	1c5a      	adds	r2, r3, #1
 8019baa:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019bae:	121b      	asrs	r3, r3, #8
 8019bb0:	707b      	strb	r3, [r7, #1]
 8019bb2:	78bb      	ldrb	r3, [r7, #2]
 8019bb4:	fb13 f000 	smulbb	r0, r3, r0
 8019bb8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019bbc:	fa1f fc8c 	uxth.w	ip, ip
 8019bc0:	f10c 0301 	add.w	r3, ip, #1
 8019bc4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019bc8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019bcc:	f887 c002 	strb.w	ip, [r7, #2]
 8019bd0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019bd2:	3703      	adds	r7, #3
 8019bd4:	441d      	add	r5, r3
 8019bd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019bd8:	441e      	add	r6, r3
 8019bda:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019bdc:	3b01      	subs	r3, #1
 8019bde:	9318      	str	r3, [sp, #96]	; 0x60
 8019be0:	e69f      	b.n	8019922 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8019be2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019be4:	441d      	add	r5, r3
 8019be6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019be8:	441e      	add	r6, r3
 8019bea:	9b07      	ldr	r3, [sp, #28]
 8019bec:	3b01      	subs	r3, #1
 8019bee:	9307      	str	r3, [sp, #28]
 8019bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019bf2:	3303      	adds	r3, #3
 8019bf4:	930a      	str	r3, [sp, #40]	; 0x28
 8019bf6:	e674      	b.n	80198e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8019bf8:	d025      	beq.n	8019c46 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8019bfa:	9b07      	ldr	r3, [sp, #28]
 8019bfc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8019bfe:	3b01      	subs	r3, #1
 8019c00:	fb00 5003 	mla	r0, r0, r3, r5
 8019c04:	1400      	asrs	r0, r0, #16
 8019c06:	f53f ae89 	bmi.w	801991c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019c0a:	3901      	subs	r1, #1
 8019c0c:	4288      	cmp	r0, r1
 8019c0e:	f6bf ae85 	bge.w	801991c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019c12:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8019c14:	fb01 6303 	mla	r3, r1, r3, r6
 8019c18:	141b      	asrs	r3, r3, #16
 8019c1a:	f53f ae7f 	bmi.w	801991c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019c1e:	3a01      	subs	r2, #1
 8019c20:	4293      	cmp	r3, r2
 8019c22:	f6bf ae7b 	bge.w	801991c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c28:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019c2c:	f103 0e03 	add.w	lr, r3, #3
 8019c30:	f1bb 0f00 	cmp.w	fp, #0
 8019c34:	dc6e      	bgt.n	8019d14 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8019c36:	9b07      	ldr	r3, [sp, #28]
 8019c38:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c3e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019c42:	4423      	add	r3, r4
 8019c44:	930a      	str	r3, [sp, #40]	; 0x28
 8019c46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	f340 81ab 	ble.w	8019fa4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 8019c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019c52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019c54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019c58:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019c5c:	eef0 6a62 	vmov.f32	s13, s5
 8019c60:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019c64:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019c68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c6c:	ee16 5a90 	vmov	r5, s13
 8019c70:	eef0 6a43 	vmov.f32	s13, s6
 8019c74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019c78:	ee16 6a90 	vmov	r6, s13
 8019c7c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019c80:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019c84:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019c88:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019c8c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019c90:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019c94:	ee12 2a90 	vmov	r2, s5
 8019c98:	eef0 2a47 	vmov.f32	s5, s14
 8019c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8019ca0:	ee13 2a10 	vmov	r2, s6
 8019ca4:	9329      	str	r3, [sp, #164]	; 0xa4
 8019ca6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019ca8:	eeb0 3a67 	vmov.f32	s6, s15
 8019cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8019cb0:	932a      	str	r3, [sp, #168]	; 0xa8
 8019cb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019cb4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019cb6:	3b01      	subs	r3, #1
 8019cb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8019cba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019cbc:	bf08      	it	eq
 8019cbe:	4613      	moveq	r3, r2
 8019cc0:	9307      	str	r3, [sp, #28]
 8019cc2:	e600      	b.n	80198c6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019cc4:	f1bc 0f00 	cmp.w	ip, #0
 8019cc8:	f43f ae6e 	beq.w	80199a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019ccc:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8019cd0:	9308      	str	r3, [sp, #32]
 8019cd2:	0e1b      	lsrs	r3, r3, #24
 8019cd4:	9311      	str	r3, [sp, #68]	; 0x44
 8019cd6:	e667      	b.n	80199a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8019cd8:	f112 0801 	adds.w	r8, r2, #1
 8019cdc:	f53f af78 	bmi.w	8019bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019ce0:	45c6      	cmp	lr, r8
 8019ce2:	f6ff af75 	blt.w	8019bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019ce6:	f110 0801 	adds.w	r8, r0, #1
 8019cea:	f53f af71 	bmi.w	8019bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019cee:	4543      	cmp	r3, r8
 8019cf0:	f6ff af6e 	blt.w	8019bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019cf4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8019cf6:	b21b      	sxth	r3, r3
 8019cf8:	9201      	str	r2, [sp, #4]
 8019cfa:	9300      	str	r3, [sp, #0]
 8019cfc:	fa0f f38e 	sxth.w	r3, lr
 8019d00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019d02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019d06:	e9cd c404 	strd	ip, r4, [sp, #16]
 8019d0a:	4639      	mov	r1, r7
 8019d0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8019d0e:	f7ff fc79 	bl	8019604 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 8019d12:	e75d      	b.n	8019bd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 8019d14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8019d16:	142f      	asrs	r7, r5, #16
 8019d18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d1a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019d1e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8019d22:	1433      	asrs	r3, r6, #16
 8019d24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8019d28:	fb02 7303 	mla	r3, r2, r3, r7
 8019d2c:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 8019d30:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8019d34:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8019d38:	2900      	cmp	r1, #0
 8019d3a:	f000 812a 	beq.w	8019f92 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 8019d3e:	687c      	ldr	r4, [r7, #4]
 8019d40:	940e      	str	r4, [sp, #56]	; 0x38
 8019d42:	0e24      	lsrs	r4, r4, #24
 8019d44:	9415      	str	r4, [sp, #84]	; 0x54
 8019d46:	b178      	cbz	r0, 8019d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8019d48:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8019d4c:	3a01      	subs	r2, #1
 8019d4e:	0092      	lsls	r2, r2, #2
 8019d50:	3204      	adds	r2, #4
 8019d52:	eb07 0802 	add.w	r8, r7, r2
 8019d56:	58ba      	ldr	r2, [r7, r2]
 8019d58:	9209      	str	r2, [sp, #36]	; 0x24
 8019d5a:	0e12      	lsrs	r2, r2, #24
 8019d5c:	9212      	str	r2, [sp, #72]	; 0x48
 8019d5e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8019d62:	920f      	str	r2, [sp, #60]	; 0x3c
 8019d64:	0e12      	lsrs	r2, r2, #24
 8019d66:	9216      	str	r2, [sp, #88]	; 0x58
 8019d68:	b289      	uxth	r1, r1
 8019d6a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019d6c:	b280      	uxth	r0, r0
 8019d6e:	fb01 f900 	mul.w	r9, r1, r0
 8019d72:	0109      	lsls	r1, r1, #4
 8019d74:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019d78:	eba1 0809 	sub.w	r8, r1, r9
 8019d7c:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 8019d80:	9915      	ldr	r1, [sp, #84]	; 0x54
 8019d82:	b280      	uxth	r0, r0
 8019d84:	fa1f f888 	uxth.w	r8, r8
 8019d88:	1a12      	subs	r2, r2, r0
 8019d8a:	fb08 f101 	mul.w	r1, r8, r1
 8019d8e:	b292      	uxth	r2, r2
 8019d90:	fb02 110c 	mla	r1, r2, ip, r1
 8019d94:	fb00 1104 	mla	r1, r0, r4, r1
 8019d98:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019d9a:	fb09 1104 	mla	r1, r9, r4, r1
 8019d9e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019da2:	2900      	cmp	r1, #0
 8019da4:	f000 80ec 	beq.w	8019f80 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8019da8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019dac:	d019      	beq.n	8019de2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8019dae:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019db2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019db6:	fb0c fa0a 	mul.w	sl, ip, sl
 8019dba:	fb0c fc03 	mul.w	ip, ip, r3
 8019dbe:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019dc2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019dc6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019dca:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019dce:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019dd2:	4453      	add	r3, sl
 8019dd4:	0a3f      	lsrs	r7, r7, #8
 8019dd6:	0a1b      	lsrs	r3, r3, #8
 8019dd8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019ddc:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019de0:	433b      	orrs	r3, r7
 8019de2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019de4:	2cff      	cmp	r4, #255	; 0xff
 8019de6:	d020      	beq.n	8019e2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 8019de8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019dea:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019dee:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019df0:	4367      	muls	r7, r4
 8019df2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019df4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019df8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019dfc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019dfe:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019e02:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e06:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e0a:	44bc      	add	ip, r7
 8019e0c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019e10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e14:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019e18:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e1c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e20:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019e24:	ea4c 040a 	orr.w	r4, ip, sl
 8019e28:	940e      	str	r4, [sp, #56]	; 0x38
 8019e2a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e2c:	2cff      	cmp	r4, #255	; 0xff
 8019e2e:	d020      	beq.n	8019e72 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 8019e30:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019e32:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019e36:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e38:	4367      	muls	r7, r4
 8019e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019e3c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019e40:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019e44:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e46:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019e4a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e4e:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e52:	44bc      	add	ip, r7
 8019e54:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019e58:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e5c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019e60:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e68:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019e6c:	ea4c 040a 	orr.w	r4, ip, sl
 8019e70:	9409      	str	r4, [sp, #36]	; 0x24
 8019e72:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e74:	2cff      	cmp	r4, #255	; 0xff
 8019e76:	d020      	beq.n	8019eba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8019e78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019e7a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019e7e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e80:	4367      	muls	r7, r4
 8019e82:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019e84:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019e88:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019e8c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e8e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8019e92:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e96:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e9a:	44bc      	add	ip, r7
 8019e9c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8019ea0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ea4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019ea8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019eac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019eb0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019eb4:	ea4c 040a 	orr.w	r4, ip, sl
 8019eb8:	940f      	str	r4, [sp, #60]	; 0x3c
 8019eba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019ebc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8019ec0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019ec4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019ec8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019eca:	fb08 f707 	mul.w	r7, r8, r7
 8019ece:	fb02 770c 	mla	r7, r2, ip, r7
 8019ed2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ed6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019ed8:	fb00 770c 	mla	r7, r0, ip, r7
 8019edc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019ee0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019ee2:	fb09 770c 	mla	r7, r9, ip, r7
 8019ee6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019eea:	fb08 f80c 	mul.w	r8, r8, ip
 8019eee:	0a3f      	lsrs	r7, r7, #8
 8019ef0:	fb02 8303 	mla	r3, r2, r3, r8
 8019ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019ef6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019efa:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019efe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019f00:	fb00 330a 	mla	r3, r0, sl, r3
 8019f04:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019f08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019f0a:	fb09 3c0c 	mla	ip, r9, ip, r3
 8019f0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019f10:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019f14:	434b      	muls	r3, r1
 8019f16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019f1a:	1c59      	adds	r1, r3, #1
 8019f1c:	ea47 070c 	orr.w	r7, r7, ip
 8019f20:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019f24:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019f28:	b2fa      	uxtb	r2, r7
 8019f2a:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8019f2e:	fb12 f200 	smulbb	r2, r2, r0
 8019f32:	b2c9      	uxtb	r1, r1
 8019f34:	fb03 2301 	mla	r3, r3, r1, r2
 8019f38:	b29b      	uxth	r3, r3
 8019f3a:	1c5a      	adds	r2, r3, #1
 8019f3c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019f40:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8019f44:	fb12 f201 	smulbb	r2, r2, r1
 8019f48:	121b      	asrs	r3, r3, #8
 8019f4a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8019f4e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8019f52:	0c3f      	lsrs	r7, r7, #16
 8019f54:	fb03 2300 	mla	r3, r3, r0, r2
 8019f58:	b29b      	uxth	r3, r3
 8019f5a:	1c5a      	adds	r2, r3, #1
 8019f5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019f60:	121b      	asrs	r3, r3, #8
 8019f62:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8019f66:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8019f6a:	fb13 f101 	smulbb	r1, r3, r1
 8019f6e:	fb07 1700 	mla	r7, r7, r0, r1
 8019f72:	b2bf      	uxth	r7, r7
 8019f74:	1c79      	adds	r1, r7, #1
 8019f76:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8019f7a:	123f      	asrs	r7, r7, #8
 8019f7c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8019f80:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019f82:	f10e 0e03 	add.w	lr, lr, #3
 8019f86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019f8a:	441d      	add	r5, r3
 8019f8c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8019f8e:	441e      	add	r6, r3
 8019f90:	e64e      	b.n	8019c30 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 8019f92:	2800      	cmp	r0, #0
 8019f94:	f43f aee8 	beq.w	8019d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8019f98:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8019f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8019f9e:	0e12      	lsrs	r2, r2, #24
 8019fa0:	9212      	str	r2, [sp, #72]	; 0x48
 8019fa2:	e6e1      	b.n	8019d68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8019fa4:	b01d      	add	sp, #116	; 0x74
 8019fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019faa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8019faa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fae:	b087      	sub	sp, #28
 8019fb0:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 8019fb4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8019fb8:	fb05 7003 	mla	r0, r5, r3, r7
 8019fbc:	2d00      	cmp	r5, #0
 8019fbe:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8019fc2:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 8019fc6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8019fca:	f2c0 810a 	blt.w	801a1e2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8019fce:	45a8      	cmp	r8, r5
 8019fd0:	f340 8107 	ble.w	801a1e2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 8019fd4:	2f00      	cmp	r7, #0
 8019fd6:	f2c0 8102 	blt.w	801a1de <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8019fda:	42bb      	cmp	r3, r7
 8019fdc:	f340 80ff 	ble.w	801a1de <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 8019fe0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 8019fe4:	1c7a      	adds	r2, r7, #1
 8019fe6:	f100 80ff 	bmi.w	801a1e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8019fea:	4293      	cmp	r3, r2
 8019fec:	f340 80fc 	ble.w	801a1e8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 8019ff0:	2c00      	cmp	r4, #0
 8019ff2:	f000 80fb 	beq.w	801a1ec <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 8019ff6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019ffa:	3501      	adds	r5, #1
 8019ffc:	f100 80fa 	bmi.w	801a1f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801a000:	45a8      	cmp	r8, r5
 801a002:	f340 80f7 	ble.w	801a1f4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801a006:	f1be 0f00 	cmp.w	lr, #0
 801a00a:	f000 80f6 	beq.w	801a1fa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801a00e:	2f00      	cmp	r7, #0
 801a010:	f2c0 80ee 	blt.w	801a1f0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801a014:	42bb      	cmp	r3, r7
 801a016:	f340 80eb 	ble.w	801a1f0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801a01a:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801a01e:	3701      	adds	r7, #1
 801a020:	f100 80ee 	bmi.w	801a200 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801a024:	42bb      	cmp	r3, r7
 801a026:	f340 80eb 	ble.w	801a200 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801a02a:	2c00      	cmp	r4, #0
 801a02c:	f000 80ea 	beq.w	801a204 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801a030:	3301      	adds	r3, #1
 801a032:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a036:	fa1f fc84 	uxth.w	ip, r4
 801a03a:	fa1f fe8e 	uxth.w	lr, lr
 801a03e:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801a042:	fb0c f90e 	mul.w	r9, ip, lr
 801a046:	0e13      	lsrs	r3, r2, #24
 801a048:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801a04c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801a050:	9302      	str	r3, [sp, #8]
 801a052:	ebac 0709 	sub.w	r7, ip, r9
 801a056:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801a05a:	fa1f f48e 	uxth.w	r4, lr
 801a05e:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801a062:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a066:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801a06a:	fb0a fe0e 	mul.w	lr, sl, lr
 801a06e:	1b1b      	subs	r3, r3, r4
 801a070:	fb0a f606 	mul.w	r6, sl, r6
 801a074:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801a078:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801a07c:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801a080:	b29b      	uxth	r3, r3
 801a082:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a086:	b2bf      	uxth	r7, r7
 801a088:	9301      	str	r3, [sp, #4]
 801a08a:	44e6      	add	lr, ip
 801a08c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a090:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a094:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a098:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801a09c:	9303      	str	r3, [sp, #12]
 801a09e:	0a33      	lsrs	r3, r6, #8
 801a0a0:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801a0a4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a0a8:	9304      	str	r3, [sp, #16]
 801a0aa:	fb0b f606 	mul.w	r6, fp, r6
 801a0ae:	fb0b f000 	mul.w	r0, fp, r0
 801a0b2:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801a0b6:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a0ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0be:	44b6      	add	lr, r6
 801a0c0:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801a0c4:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801a0c8:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801a0cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a0d0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a0d4:	fb08 f606 	mul.w	r6, r8, r6
 801a0d8:	0a03      	lsrs	r3, r0, #8
 801a0da:	fb08 f505 	mul.w	r5, r8, r5
 801a0de:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a0e2:	0a30      	lsrs	r0, r6, #8
 801a0e4:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a0e8:	9305      	str	r3, [sp, #20]
 801a0ea:	0e13      	lsrs	r3, r2, #24
 801a0ec:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a0f0:	fb0e fe07 	mul.w	lr, lr, r7
 801a0f4:	4430      	add	r0, r6
 801a0f6:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801a0fa:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801a0fe:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801a102:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a106:	0a00      	lsrs	r0, r0, #8
 801a108:	435e      	muls	r6, r3
 801a10a:	0a2d      	lsrs	r5, r5, #8
 801a10c:	435a      	muls	r2, r3
 801a10e:	9b03      	ldr	r3, [sp, #12]
 801a110:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801a114:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801a118:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a11c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a120:	44b4      	add	ip, r6
 801a122:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801a126:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a12a:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801a12e:	9e01      	ldr	r6, [sp, #4]
 801a130:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a134:	fb03 ee06 	mla	lr, r3, r6, lr
 801a138:	9b04      	ldr	r3, [sp, #16]
 801a13a:	0a12      	lsrs	r2, r2, #8
 801a13c:	fb0c ee09 	mla	lr, ip, r9, lr
 801a140:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801a144:	9b05      	ldr	r3, [sp, #20]
 801a146:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a14a:	fb00 ee04 	mla	lr, r0, r4, lr
 801a14e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a152:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801a156:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801a15a:	9b01      	ldr	r3, [sp, #4]
 801a15c:	fb07 fe0e 	mul.w	lr, r7, lr
 801a160:	fb07 f70b 	mul.w	r7, r7, fp
 801a164:	fb03 ee06 	mla	lr, r3, r6, lr
 801a168:	fb03 730a 	mla	r3, r3, sl, r7
 801a16c:	fb09 e202 	mla	r2, r9, r2, lr
 801a170:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801a174:	fb04 2e0e 	mla	lr, r4, lr, r2
 801a178:	fb04 3408 	mla	r4, r4, r8, r3
 801a17c:	9b02      	ldr	r3, [sp, #8]
 801a17e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a182:	fb09 4903 	mla	r9, r9, r3, r4
 801a186:	780b      	ldrb	r3, [r1, #0]
 801a188:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a18c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801a190:	ea40 0e0e 	orr.w	lr, r0, lr
 801a194:	fa5f f989 	uxtb.w	r9, r9
 801a198:	fb03 f209 	mul.w	r2, r3, r9
 801a19c:	1c53      	adds	r3, r2, #1
 801a19e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a1a2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801a1a6:	700b      	strb	r3, [r1, #0]
 801a1a8:	784b      	ldrb	r3, [r1, #1]
 801a1aa:	fb03 f309 	mul.w	r3, r3, r9
 801a1ae:	1c5a      	adds	r2, r3, #1
 801a1b0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a1b4:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801a1b8:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801a1bc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a1c0:	704b      	strb	r3, [r1, #1]
 801a1c2:	788b      	ldrb	r3, [r1, #2]
 801a1c4:	fb03 f909 	mul.w	r9, r3, r9
 801a1c8:	f109 0301 	add.w	r3, r9, #1
 801a1cc:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801a1d0:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801a1d4:	f881 e002 	strb.w	lr, [r1, #2]
 801a1d8:	b007      	add	sp, #28
 801a1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1de:	2600      	movs	r6, #0
 801a1e0:	e700      	b.n	8019fe4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801a1e2:	2000      	movs	r0, #0
 801a1e4:	4606      	mov	r6, r0
 801a1e6:	e708      	b.n	8019ffa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801a1e8:	2000      	movs	r0, #0
 801a1ea:	e706      	b.n	8019ffa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801a1ec:	4620      	mov	r0, r4
 801a1ee:	e704      	b.n	8019ffa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801a1f0:	2500      	movs	r5, #0
 801a1f2:	e714      	b.n	801a01e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	4615      	mov	r5, r2
 801a1f8:	e71d      	b.n	801a036 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a1fa:	4672      	mov	r2, lr
 801a1fc:	4675      	mov	r5, lr
 801a1fe:	e71a      	b.n	801a036 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a200:	2200      	movs	r2, #0
 801a202:	e718      	b.n	801a036 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801a204:	4622      	mov	r2, r4
 801a206:	e716      	b.n	801a036 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801a208 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a20c:	b099      	sub	sp, #100	; 0x64
 801a20e:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801a212:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801a214:	9017      	str	r0, [sp, #92]	; 0x5c
 801a216:	9306      	str	r3, [sp, #24]
 801a218:	6850      	ldr	r0, [r2, #4]
 801a21a:	6812      	ldr	r2, [r2, #0]
 801a21c:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801a220:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801a224:	fb00 1303 	mla	r3, r0, r3, r1
 801a228:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a22c:	18d3      	adds	r3, r2, r3
 801a22e:	9309      	str	r3, [sp, #36]	; 0x24
 801a230:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	930e      	str	r3, [sp, #56]	; 0x38
 801a236:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a238:	2b00      	cmp	r3, #0
 801a23a:	dc03      	bgt.n	801a244 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a23c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a23e:	2b00      	cmp	r3, #0
 801a240:	f340 8360 	ble.w	801a904 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801a244:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a246:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a24a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a24e:	1e48      	subs	r0, r1, #1
 801a250:	1e57      	subs	r7, r2, #1
 801a252:	9b06      	ldr	r3, [sp, #24]
 801a254:	2b00      	cmp	r3, #0
 801a256:	f340 817b 	ble.w	801a550 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801a25a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801a25e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801a262:	d406      	bmi.n	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a264:	4584      	cmp	ip, r0
 801a266:	da04      	bge.n	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a268:	2b00      	cmp	r3, #0
 801a26a:	db02      	blt.n	801a272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801a26c:	42bb      	cmp	r3, r7
 801a26e:	f2c0 8170 	blt.w	801a552 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a272:	f11c 0c01 	adds.w	ip, ip, #1
 801a276:	f100 8160 	bmi.w	801a53a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a27a:	4561      	cmp	r1, ip
 801a27c:	f2c0 815d 	blt.w	801a53a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a280:	3301      	adds	r3, #1
 801a282:	f100 815a 	bmi.w	801a53a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a286:	429a      	cmp	r2, r3
 801a288:	f2c0 8157 	blt.w	801a53a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801a28c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801a290:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a292:	f1b8 0f00 	cmp.w	r8, #0
 801a296:	f340 8179 	ble.w	801a58c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801a29a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a29c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801a2a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a2a2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801a2a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801a2aa:	142a      	asrs	r2, r5, #16
 801a2ac:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a2b0:	689b      	ldr	r3, [r3, #8]
 801a2b2:	f100 81be 	bmi.w	801a632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a2b6:	f103 39ff 	add.w	r9, r3, #4294967295
 801a2ba:	454a      	cmp	r2, r9
 801a2bc:	f280 81b9 	bge.w	801a632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a2c0:	f1bc 0f00 	cmp.w	ip, #0
 801a2c4:	f2c0 81b5 	blt.w	801a632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a2c8:	f10e 39ff 	add.w	r9, lr, #4294967295
 801a2cc:	45cc      	cmp	ip, r9
 801a2ce:	f280 81b0 	bge.w	801a632 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a2d2:	b21b      	sxth	r3, r3
 801a2d4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a2d6:	fb0c 2203 	mla	r2, ip, r3, r2
 801a2da:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801a2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801a2e2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801a2e6:	2900      	cmp	r1, #0
 801a2e8:	f000 8197 	beq.w	801a61a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801a2ec:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801a2f0:	940a      	str	r4, [sp, #40]	; 0x28
 801a2f2:	0e24      	lsrs	r4, r4, #24
 801a2f4:	9411      	str	r4, [sp, #68]	; 0x44
 801a2f6:	b180      	cbz	r0, 801a31a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801a2f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801a2fc:	3b01      	subs	r3, #1
 801a2fe:	009b      	lsls	r3, r3, #2
 801a300:	3304      	adds	r3, #4
 801a302:	eb09 0c03 	add.w	ip, r9, r3
 801a306:	f859 3003 	ldr.w	r3, [r9, r3]
 801a30a:	9307      	str	r3, [sp, #28]
 801a30c:	0e1b      	lsrs	r3, r3, #24
 801a30e:	930f      	str	r3, [sp, #60]	; 0x3c
 801a310:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801a314:	930b      	str	r3, [sp, #44]	; 0x2c
 801a316:	0e1b      	lsrs	r3, r3, #24
 801a318:	9312      	str	r3, [sp, #72]	; 0x48
 801a31a:	b289      	uxth	r1, r1
 801a31c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a31e:	b280      	uxth	r0, r0
 801a320:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a322:	fb01 fa00 	mul.w	sl, r1, r0
 801a326:	0109      	lsls	r1, r1, #4
 801a328:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801a32c:	eba1 090a 	sub.w	r9, r1, sl
 801a330:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801a334:	b280      	uxth	r0, r0
 801a336:	fa1f f989 	uxth.w	r9, r9
 801a33a:	1a09      	subs	r1, r1, r0
 801a33c:	fb09 f303 	mul.w	r3, r9, r3
 801a340:	b289      	uxth	r1, r1
 801a342:	fb01 330e 	mla	r3, r1, lr, r3
 801a346:	fb00 3304 	mla	r3, r0, r4, r3
 801a34a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a34c:	fb0a 3304 	mla	r3, sl, r4, r3
 801a350:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a354:	2b00      	cmp	r3, #0
 801a356:	f000 80e8 	beq.w	801a52a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a35a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a35e:	d01b      	beq.n	801a398 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801a360:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801a364:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a368:	fb0e fb0b 	mul.w	fp, lr, fp
 801a36c:	fb0e fe02 	mul.w	lr, lr, r2
 801a370:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801a374:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a378:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a37c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a380:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a384:	445a      	add	r2, fp
 801a386:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a38a:	0a12      	lsrs	r2, r2, #8
 801a38c:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a390:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a394:	ea42 020c 	orr.w	r2, r2, ip
 801a398:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a39a:	2cff      	cmp	r4, #255	; 0xff
 801a39c:	d021      	beq.n	801a3e2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801a39e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a3a0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a3a4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3a6:	fb04 fc0c 	mul.w	ip, r4, ip
 801a3aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a3ac:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a3b0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a3b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a3b6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a3ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3be:	fb04 fb0b 	mul.w	fp, r4, fp
 801a3c2:	44e6      	add	lr, ip
 801a3c4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a3c8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a3cc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a3d0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a3d4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a3d8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a3dc:	ea4e 040b 	orr.w	r4, lr, fp
 801a3e0:	940a      	str	r4, [sp, #40]	; 0x28
 801a3e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a3e4:	2cff      	cmp	r4, #255	; 0xff
 801a3e6:	d021      	beq.n	801a42c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801a3e8:	9c07      	ldr	r4, [sp, #28]
 801a3ea:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a3ee:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a3f0:	fb04 fc0c 	mul.w	ip, r4, ip
 801a3f4:	9c07      	ldr	r4, [sp, #28]
 801a3f6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a3fa:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a3fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a400:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a404:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a408:	fb04 fb0b 	mul.w	fp, r4, fp
 801a40c:	44e6      	add	lr, ip
 801a40e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a412:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a416:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a41a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a41e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a422:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a426:	ea4e 040b 	orr.w	r4, lr, fp
 801a42a:	9407      	str	r4, [sp, #28]
 801a42c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a42e:	2cff      	cmp	r4, #255	; 0xff
 801a430:	d021      	beq.n	801a476 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801a432:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a434:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a438:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a43a:	fb04 fc0c 	mul.w	ip, r4, ip
 801a43e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a440:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a444:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801a448:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a44a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a44e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a452:	fb04 fb0b 	mul.w	fp, r4, fp
 801a456:	44e6      	add	lr, ip
 801a458:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801a45c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a460:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801a464:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a468:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801a46c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801a470:	ea4e 040b 	orr.w	r4, lr, fp
 801a474:	940b      	str	r4, [sp, #44]	; 0x2c
 801a476:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a478:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801a47c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a480:	2bff      	cmp	r3, #255	; 0xff
 801a482:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a486:	9c07      	ldr	r4, [sp, #28]
 801a488:	fb09 fc0c 	mul.w	ip, r9, ip
 801a48c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a490:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a494:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a496:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a49a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a49e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a4a0:	fb0a cc0e 	mla	ip, sl, lr, ip
 801a4a4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a4a8:	fb09 f90e 	mul.w	r9, r9, lr
 801a4ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4b0:	fb01 9202 	mla	r2, r1, r2, r9
 801a4b4:	9907      	ldr	r1, [sp, #28]
 801a4b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4ba:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801a4be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a4c0:	fb00 220b 	mla	r2, r0, fp, r2
 801a4c4:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801a4c8:	fb0a 2a00 	mla	sl, sl, r0, r2
 801a4cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a4d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a4d4:	ea4c 0c0a 	orr.w	ip, ip, sl
 801a4d8:	fa5f f08c 	uxtb.w	r0, ip
 801a4dc:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a4e0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a4e4:	f000 80a2 	beq.w	801a62c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801a4e8:	43db      	mvns	r3, r3
 801a4ea:	783a      	ldrb	r2, [r7, #0]
 801a4ec:	f897 a002 	ldrb.w	sl, [r7, #2]
 801a4f0:	b2db      	uxtb	r3, r3
 801a4f2:	fb02 fe03 	mul.w	lr, r2, r3
 801a4f6:	fb0a fa03 	mul.w	sl, sl, r3
 801a4fa:	f10e 0201 	add.w	r2, lr, #1
 801a4fe:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801a502:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a506:	703a      	strb	r2, [r7, #0]
 801a508:	787a      	ldrb	r2, [r7, #1]
 801a50a:	fb02 f003 	mul.w	r0, r2, r3
 801a50e:	f10a 0301 	add.w	r3, sl, #1
 801a512:	1c42      	adds	r2, r0, #1
 801a514:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801a518:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801a51c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a520:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a524:	707a      	strb	r2, [r7, #1]
 801a526:	f887 c002 	strb.w	ip, [r7, #2]
 801a52a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a52c:	3703      	adds	r7, #3
 801a52e:	f108 38ff 	add.w	r8, r8, #4294967295
 801a532:	441d      	add	r5, r3
 801a534:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a536:	441e      	add	r6, r3
 801a538:	e6ab      	b.n	801a292 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801a53a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a53c:	441d      	add	r5, r3
 801a53e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a540:	441e      	add	r6, r3
 801a542:	9b06      	ldr	r3, [sp, #24]
 801a544:	3b01      	subs	r3, #1
 801a546:	9306      	str	r3, [sp, #24]
 801a548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a54a:	3303      	adds	r3, #3
 801a54c:	9309      	str	r3, [sp, #36]	; 0x24
 801a54e:	e680      	b.n	801a252 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a550:	d024      	beq.n	801a59c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801a552:	9b06      	ldr	r3, [sp, #24]
 801a554:	9825      	ldr	r0, [sp, #148]	; 0x94
 801a556:	3b01      	subs	r3, #1
 801a558:	fb00 5003 	mla	r0, r0, r3, r5
 801a55c:	1400      	asrs	r0, r0, #16
 801a55e:	f53f ae95 	bmi.w	801a28c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a562:	3901      	subs	r1, #1
 801a564:	4288      	cmp	r0, r1
 801a566:	f6bf ae91 	bge.w	801a28c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a56a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801a56c:	fb01 6303 	mla	r3, r1, r3, r6
 801a570:	141b      	asrs	r3, r3, #16
 801a572:	f53f ae8b 	bmi.w	801a28c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a576:	3a01      	subs	r2, #1
 801a578:	4293      	cmp	r3, r2
 801a57a:	f6bf ae87 	bge.w	801a28c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801a57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a580:	f8dd b018 	ldr.w	fp, [sp, #24]
 801a584:	1cdf      	adds	r7, r3, #3
 801a586:	f1bb 0f00 	cmp.w	fp, #0
 801a58a:	dc6e      	bgt.n	801a66a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801a58c:	9b06      	ldr	r3, [sp, #24]
 801a58e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a594:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a598:	4423      	add	r3, r4
 801a59a:	9309      	str	r3, [sp, #36]	; 0x24
 801a59c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	f340 81b0 	ble.w	801a904 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801a5a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a5a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a5aa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a5ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a5b2:	eef0 6a62 	vmov.f32	s13, s5
 801a5b6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a5ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a5be:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5c2:	ee16 5a90 	vmov	r5, s13
 801a5c6:	eef0 6a43 	vmov.f32	s13, s6
 801a5ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a5ce:	ee16 6a90 	vmov	r6, s13
 801a5d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a5d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a5da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a5de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a5e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a5e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a5ea:	ee12 2a90 	vmov	r2, s5
 801a5ee:	eef0 2a47 	vmov.f32	s5, s14
 801a5f2:	fb92 f3f3 	sdiv	r3, r2, r3
 801a5f6:	ee13 2a10 	vmov	r2, s6
 801a5fa:	9325      	str	r3, [sp, #148]	; 0x94
 801a5fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a5fe:	eeb0 3a67 	vmov.f32	s6, s15
 801a602:	fb92 f3f3 	sdiv	r3, r2, r3
 801a606:	9326      	str	r3, [sp, #152]	; 0x98
 801a608:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a60a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a60c:	3b01      	subs	r3, #1
 801a60e:	9315      	str	r3, [sp, #84]	; 0x54
 801a610:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801a612:	bf08      	it	eq
 801a614:	4613      	moveq	r3, r2
 801a616:	9306      	str	r3, [sp, #24]
 801a618:	e60d      	b.n	801a236 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801a61a:	2800      	cmp	r0, #0
 801a61c:	f43f ae7d 	beq.w	801a31a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801a620:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801a624:	9307      	str	r3, [sp, #28]
 801a626:	0e1b      	lsrs	r3, r3, #24
 801a628:	930f      	str	r3, [sp, #60]	; 0x3c
 801a62a:	e676      	b.n	801a31a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801a62c:	7038      	strb	r0, [r7, #0]
 801a62e:	7079      	strb	r1, [r7, #1]
 801a630:	e779      	b.n	801a526 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801a632:	f112 0901 	adds.w	r9, r2, #1
 801a636:	f53f af78 	bmi.w	801a52a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a63a:	454b      	cmp	r3, r9
 801a63c:	f6ff af75 	blt.w	801a52a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a640:	f11c 0901 	adds.w	r9, ip, #1
 801a644:	f53f af71 	bmi.w	801a52a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a648:	45ce      	cmp	lr, r9
 801a64a:	f6ff af6e 	blt.w	801a52a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a64e:	b21b      	sxth	r3, r3
 801a650:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801a654:	fa0f f28e 	sxth.w	r2, lr
 801a658:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801a65c:	9200      	str	r2, [sp, #0]
 801a65e:	4639      	mov	r1, r7
 801a660:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a662:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a664:	f7ff fca1 	bl	8019faa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801a668:	e75f      	b.n	801a52a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801a66a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a66c:	1429      	asrs	r1, r5, #16
 801a66e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a670:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801a674:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801a678:	1433      	asrs	r3, r6, #16
 801a67a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801a67e:	fb0c 1303 	mla	r3, ip, r3, r1
 801a682:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a684:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801a688:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801a68c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a690:	2a00      	cmp	r2, #0
 801a692:	f000 8129 	beq.w	801a8e8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801a696:	684c      	ldr	r4, [r1, #4]
 801a698:	940c      	str	r4, [sp, #48]	; 0x30
 801a69a:	0e24      	lsrs	r4, r4, #24
 801a69c:	9413      	str	r4, [sp, #76]	; 0x4c
 801a69e:	b198      	cbz	r0, 801a6c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801a6a0:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801a6a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a6a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801a6ac:	f10c 0c04 	add.w	ip, ip, #4
 801a6b0:	eb01 080c 	add.w	r8, r1, ip
 801a6b4:	f851 100c 	ldr.w	r1, [r1, ip]
 801a6b8:	9108      	str	r1, [sp, #32]
 801a6ba:	0e09      	lsrs	r1, r1, #24
 801a6bc:	9110      	str	r1, [sp, #64]	; 0x40
 801a6be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a6c2:	910d      	str	r1, [sp, #52]	; 0x34
 801a6c4:	0e09      	lsrs	r1, r1, #24
 801a6c6:	9114      	str	r1, [sp, #80]	; 0x50
 801a6c8:	b292      	uxth	r2, r2
 801a6ca:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a6cc:	b280      	uxth	r0, r0
 801a6ce:	fb02 f900 	mul.w	r9, r2, r0
 801a6d2:	0112      	lsls	r2, r2, #4
 801a6d4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a6d8:	eba2 0809 	sub.w	r8, r2, r9
 801a6dc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a6e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a6e2:	b280      	uxth	r0, r0
 801a6e4:	fa1f f888 	uxth.w	r8, r8
 801a6e8:	1a09      	subs	r1, r1, r0
 801a6ea:	fb08 f202 	mul.w	r2, r8, r2
 801a6ee:	b289      	uxth	r1, r1
 801a6f0:	fb01 220e 	mla	r2, r1, lr, r2
 801a6f4:	fb00 2204 	mla	r2, r0, r4, r2
 801a6f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a6fa:	fb09 2204 	mla	r2, r9, r4, r2
 801a6fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a702:	2a00      	cmp	r2, #0
 801a704:	f000 80e8 	beq.w	801a8d8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801a708:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a70c:	d01b      	beq.n	801a746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801a70e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a712:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a716:	fb0e fa0a 	mul.w	sl, lr, sl
 801a71a:	fb0e fe03 	mul.w	lr, lr, r3
 801a71e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a722:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a726:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a72a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a72e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a732:	4453      	add	r3, sl
 801a734:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a738:	0a1b      	lsrs	r3, r3, #8
 801a73a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a73e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a742:	ea43 030c 	orr.w	r3, r3, ip
 801a746:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a748:	2cff      	cmp	r4, #255	; 0xff
 801a74a:	d021      	beq.n	801a790 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801a74c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a74e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a752:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a754:	fb04 fc0c 	mul.w	ip, r4, ip
 801a758:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a75a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a75e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a762:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a764:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a768:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a76c:	fb04 fa0a 	mul.w	sl, r4, sl
 801a770:	44e6      	add	lr, ip
 801a772:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a776:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a77a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a77e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a782:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a786:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a78a:	ea4e 040a 	orr.w	r4, lr, sl
 801a78e:	940c      	str	r4, [sp, #48]	; 0x30
 801a790:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a792:	2cff      	cmp	r4, #255	; 0xff
 801a794:	d021      	beq.n	801a7da <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801a796:	9c08      	ldr	r4, [sp, #32]
 801a798:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a79c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a79e:	fb04 fc0c 	mul.w	ip, r4, ip
 801a7a2:	9c08      	ldr	r4, [sp, #32]
 801a7a4:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a7a8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a7aa:	fb04 fa0e 	mul.w	sl, r4, lr
 801a7ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a7b2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a7b6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a7ba:	44e6      	add	lr, ip
 801a7bc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a7c0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a7c4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a7c8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a7cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a7d0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a7d4:	ea4e 040a 	orr.w	r4, lr, sl
 801a7d8:	9408      	str	r4, [sp, #32]
 801a7da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a7dc:	2cff      	cmp	r4, #255	; 0xff
 801a7de:	d021      	beq.n	801a824 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801a7e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a7e2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a7e6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a7e8:	fb04 fc0c 	mul.w	ip, r4, ip
 801a7ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a7ee:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801a7f2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a7f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a7f8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a7fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a800:	fb04 fa0a 	mul.w	sl, r4, sl
 801a804:	44e6      	add	lr, ip
 801a806:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a80a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a80e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a812:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a816:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a81a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a81e:	ea4e 040a 	orr.w	r4, lr, sl
 801a822:	940d      	str	r4, [sp, #52]	; 0x34
 801a824:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a826:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a82a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a82e:	2aff      	cmp	r2, #255	; 0xff
 801a830:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a834:	9c08      	ldr	r4, [sp, #32]
 801a836:	fb08 fc0c 	mul.w	ip, r8, ip
 801a83a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801a83e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a842:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a844:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a848:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a84c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a84e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a852:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a856:	fb08 f80e 	mul.w	r8, r8, lr
 801a85a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a85e:	fb01 8303 	mla	r3, r1, r3, r8
 801a862:	9908      	ldr	r1, [sp, #32]
 801a864:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a868:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a86c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a86e:	fb00 330a 	mla	r3, r0, sl, r3
 801a872:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801a876:	fb09 3e0e 	mla	lr, r9, lr, r3
 801a87a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a87e:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801a882:	ea4c 0c0e 	orr.w	ip, ip, lr
 801a886:	fa5f f08c 	uxtb.w	r0, ip
 801a88a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801a88e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a892:	d032      	beq.n	801a8fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801a894:	43d2      	mvns	r2, r2
 801a896:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801a89a:	b2d2      	uxtb	r2, r2
 801a89c:	fb0e fe02 	mul.w	lr, lr, r2
 801a8a0:	f10e 0301 	add.w	r3, lr, #1
 801a8a4:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801a8a8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801a8ac:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801a8b0:	4350      	muls	r0, r2
 801a8b2:	f807 3c03 	strb.w	r3, [r7, #-3]
 801a8b6:	1c43      	adds	r3, r0, #1
 801a8b8:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801a8bc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a8c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801a8c4:	4353      	muls	r3, r2
 801a8c6:	f807 1c02 	strb.w	r1, [r7, #-2]
 801a8ca:	1c5a      	adds	r2, r3, #1
 801a8cc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a8d0:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801a8d4:	f807 cc01 	strb.w	ip, [r7, #-1]
 801a8d8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a8da:	3703      	adds	r7, #3
 801a8dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a8e0:	441d      	add	r5, r3
 801a8e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801a8e4:	441e      	add	r6, r3
 801a8e6:	e64e      	b.n	801a586 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801a8e8:	2800      	cmp	r0, #0
 801a8ea:	f43f aeed 	beq.w	801a6c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801a8ee:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a8f2:	9108      	str	r1, [sp, #32]
 801a8f4:	0e09      	lsrs	r1, r1, #24
 801a8f6:	9110      	str	r1, [sp, #64]	; 0x40
 801a8f8:	e6e6      	b.n	801a6c8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801a8fa:	f807 0c03 	strb.w	r0, [r7, #-3]
 801a8fe:	f807 1c02 	strb.w	r1, [r7, #-2]
 801a902:	e7e7      	b.n	801a8d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801a904:	b019      	add	sp, #100	; 0x64
 801a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801a90c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801a914:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801a918:	2c00      	cmp	r4, #0
 801a91a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801a91e:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801a922:	fb00 4e03 	mla	lr, r0, r3, r4
 801a926:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801a92a:	f2c0 80b8 	blt.w	801aa9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801a92e:	45a1      	cmp	r9, r4
 801a930:	f340 80b5 	ble.w	801aa9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801a934:	2800      	cmp	r0, #0
 801a936:	f2c0 80b2 	blt.w	801aa9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801a93a:	4580      	cmp	r8, r0
 801a93c:	f340 80af 	ble.w	801aa9e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801a940:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801a944:	f01e 0f01 	tst.w	lr, #1
 801a948:	5d56      	ldrb	r6, [r2, r5]
 801a94a:	bf0c      	ite	eq
 801a94c:	f006 060f 	andeq.w	r6, r6, #15
 801a950:	1136      	asrne	r6, r6, #4
 801a952:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801a956:	b2f6      	uxtb	r6, r6
 801a958:	f114 0a01 	adds.w	sl, r4, #1
 801a95c:	f100 80a1 	bmi.w	801aaa2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801a960:	45d1      	cmp	r9, sl
 801a962:	f340 809e 	ble.w	801aaa2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801a966:	2800      	cmp	r0, #0
 801a968:	f2c0 809b 	blt.w	801aaa2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801a96c:	4580      	cmp	r8, r0
 801a96e:	f340 8098 	ble.w	801aaa2 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801a972:	2f00      	cmp	r7, #0
 801a974:	f000 8097 	beq.w	801aaa6 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801a978:	f10e 0b01 	add.w	fp, lr, #1
 801a97c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801a980:	f01b 0f01 	tst.w	fp, #1
 801a984:	5d55      	ldrb	r5, [r2, r5]
 801a986:	bf0c      	ite	eq
 801a988:	f005 050f 	andeq.w	r5, r5, #15
 801a98c:	112d      	asrne	r5, r5, #4
 801a98e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801a992:	b2ed      	uxtb	r5, r5
 801a994:	f1bc 0f00 	cmp.w	ip, #0
 801a998:	f000 8089 	beq.w	801aaae <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801a99c:	2c00      	cmp	r4, #0
 801a99e:	f100 0001 	add.w	r0, r0, #1
 801a9a2:	f2c0 8082 	blt.w	801aaaa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801a9a6:	45a1      	cmp	r9, r4
 801a9a8:	dd7f      	ble.n	801aaaa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801a9aa:	2800      	cmp	r0, #0
 801a9ac:	db7d      	blt.n	801aaaa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801a9ae:	4580      	cmp	r8, r0
 801a9b0:	dd7b      	ble.n	801aaaa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801a9b2:	eb03 0b0e 	add.w	fp, r3, lr
 801a9b6:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801a9ba:	f01b 0f01 	tst.w	fp, #1
 801a9be:	5d14      	ldrb	r4, [r2, r4]
 801a9c0:	bf0c      	ite	eq
 801a9c2:	f004 040f 	andeq.w	r4, r4, #15
 801a9c6:	1124      	asrne	r4, r4, #4
 801a9c8:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801a9cc:	b2e4      	uxtb	r4, r4
 801a9ce:	f1ba 0f00 	cmp.w	sl, #0
 801a9d2:	db6f      	blt.n	801aab4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801a9d4:	45d1      	cmp	r9, sl
 801a9d6:	dd6d      	ble.n	801aab4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801a9d8:	2800      	cmp	r0, #0
 801a9da:	db6b      	blt.n	801aab4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801a9dc:	4580      	cmp	r8, r0
 801a9de:	dd69      	ble.n	801aab4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801a9e0:	2f00      	cmp	r7, #0
 801a9e2:	d069      	beq.n	801aab8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801a9e4:	3301      	adds	r3, #1
 801a9e6:	449e      	add	lr, r3
 801a9e8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801a9ec:	f01e 0f01 	tst.w	lr, #1
 801a9f0:	5cd0      	ldrb	r0, [r2, r3]
 801a9f2:	bf0c      	ite	eq
 801a9f4:	f000 000f 	andeq.w	r0, r0, #15
 801a9f8:	1100      	asrne	r0, r0, #4
 801a9fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801a9fe:	b2c3      	uxtb	r3, r0
 801aa00:	b2ba      	uxth	r2, r7
 801aa02:	fa1f fc8c 	uxth.w	ip, ip
 801aa06:	fb02 f00c 	mul.w	r0, r2, ip
 801aa0a:	0112      	lsls	r2, r2, #4
 801aa0c:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801aa10:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801aa14:	1a12      	subs	r2, r2, r0
 801aa16:	fa1f fc8c 	uxth.w	ip, ip
 801aa1a:	b292      	uxth	r2, r2
 801aa1c:	eba7 070c 	sub.w	r7, r7, ip
 801aa20:	436a      	muls	r2, r5
 801aa22:	b2bf      	uxth	r7, r7
 801aa24:	fb06 2207 	mla	r2, r6, r7, r2
 801aa28:	fb0c 2404 	mla	r4, ip, r4, r2
 801aa2c:	fb00 4303 	mla	r3, r0, r3, r4
 801aa30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aa34:	b38b      	cbz	r3, 801aa9a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801aa36:	4a21      	ldr	r2, [pc, #132]	; (801aabc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801aa38:	6814      	ldr	r4, [r2, #0]
 801aa3a:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801aa3e:	b2e5      	uxtb	r5, r4
 801aa40:	4353      	muls	r3, r2
 801aa42:	1c5a      	adds	r2, r3, #1
 801aa44:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801aa48:	1212      	asrs	r2, r2, #8
 801aa4a:	b290      	uxth	r0, r2
 801aa4c:	43d2      	mvns	r2, r2
 801aa4e:	fb15 f500 	smulbb	r5, r5, r0
 801aa52:	b2d3      	uxtb	r3, r2
 801aa54:	780a      	ldrb	r2, [r1, #0]
 801aa56:	fb02 5203 	mla	r2, r2, r3, r5
 801aa5a:	b292      	uxth	r2, r2
 801aa5c:	1c55      	adds	r5, r2, #1
 801aa5e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801aa62:	784d      	ldrb	r5, [r1, #1]
 801aa64:	fb15 f503 	smulbb	r5, r5, r3
 801aa68:	1212      	asrs	r2, r2, #8
 801aa6a:	700a      	strb	r2, [r1, #0]
 801aa6c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801aa70:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801aa74:	fb02 5200 	mla	r2, r2, r0, r5
 801aa78:	b292      	uxth	r2, r2
 801aa7a:	1c55      	adds	r5, r2, #1
 801aa7c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801aa80:	1212      	asrs	r2, r2, #8
 801aa82:	704a      	strb	r2, [r1, #1]
 801aa84:	788a      	ldrb	r2, [r1, #2]
 801aa86:	fb12 f303 	smulbb	r3, r2, r3
 801aa8a:	fb04 3300 	mla	r3, r4, r0, r3
 801aa8e:	b29b      	uxth	r3, r3
 801aa90:	1c5a      	adds	r2, r3, #1
 801aa92:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801aa96:	121b      	asrs	r3, r3, #8
 801aa98:	708b      	strb	r3, [r1, #2]
 801aa9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa9e:	2600      	movs	r6, #0
 801aaa0:	e75a      	b.n	801a958 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801aaa2:	2500      	movs	r5, #0
 801aaa4:	e776      	b.n	801a994 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801aaa6:	463d      	mov	r5, r7
 801aaa8:	e774      	b.n	801a994 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801aaaa:	2400      	movs	r4, #0
 801aaac:	e78f      	b.n	801a9ce <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801aaae:	4663      	mov	r3, ip
 801aab0:	4664      	mov	r4, ip
 801aab2:	e7a5      	b.n	801aa00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801aab4:	2300      	movs	r3, #0
 801aab6:	e7a3      	b.n	801aa00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801aab8:	463b      	mov	r3, r7
 801aaba:	e7a1      	b.n	801aa00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801aabc:	2401a9c0 	.word	0x2401a9c0

0801aac0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aac4:	b097      	sub	sp, #92	; 0x5c
 801aac6:	9214      	str	r2, [sp, #80]	; 0x50
 801aac8:	9309      	str	r3, [sp, #36]	; 0x24
 801aaca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801aacc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801aad0:	9015      	str	r0, [sp, #84]	; 0x54
 801aad2:	910c      	str	r1, [sp, #48]	; 0x30
 801aad4:	6850      	ldr	r0, [r2, #4]
 801aad6:	930e      	str	r3, [sp, #56]	; 0x38
 801aad8:	6812      	ldr	r2, [r2, #0]
 801aada:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801aade:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801aae2:	fb00 1303 	mla	r3, r0, r3, r1
 801aae6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aaea:	eb02 0a03 	add.w	sl, r2, r3
 801aaee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aaf0:	689b      	ldr	r3, [r3, #8]
 801aaf2:	3301      	adds	r3, #1
 801aaf4:	f023 0301 	bic.w	r3, r3, #1
 801aaf8:	930f      	str	r3, [sp, #60]	; 0x3c
 801aafa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801aafc:	681f      	ldr	r7, [r3, #0]
 801aafe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab00:	2b00      	cmp	r3, #0
 801ab02:	dc03      	bgt.n	801ab0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ab04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	f340 8247 	ble.w	801af9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ab0c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ab0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ab12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ab16:	1e48      	subs	r0, r1, #1
 801ab18:	f102 3cff 	add.w	ip, r2, #4294967295
 801ab1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	f340 80e5 	ble.w	801acee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801ab24:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801ab28:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ab2c:	d406      	bmi.n	801ab3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ab2e:	4586      	cmp	lr, r0
 801ab30:	da04      	bge.n	801ab3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	db02      	blt.n	801ab3c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ab36:	4563      	cmp	r3, ip
 801ab38:	f2c0 80da 	blt.w	801acf0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801ab3c:	f11e 0e01 	adds.w	lr, lr, #1
 801ab40:	f100 80cb 	bmi.w	801acda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ab44:	4571      	cmp	r1, lr
 801ab46:	f2c0 80c8 	blt.w	801acda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	f100 80c5 	bmi.w	801acda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ab50:	429a      	cmp	r2, r3
 801ab52:	f2c0 80c2 	blt.w	801acda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ab56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab58:	46d0      	mov	r8, sl
 801ab5a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ab5e:	930d      	str	r3, [sp, #52]	; 0x34
 801ab60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	f340 80e3 	ble.w	801ad2e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ab68:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ab6a:	1430      	asrs	r0, r6, #16
 801ab6c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ab70:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ab74:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ab78:	142b      	asrs	r3, r5, #16
 801ab7a:	f100 812e 	bmi.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ab7e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801ab82:	455b      	cmp	r3, fp
 801ab84:	f280 8129 	bge.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ab88:	2800      	cmp	r0, #0
 801ab8a:	f2c0 8126 	blt.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ab8e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801ab92:	4558      	cmp	r0, fp
 801ab94:	f280 8121 	bge.w	801adda <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ab98:	fb00 3309 	mla	r3, r0, r9, r3
 801ab9c:	0858      	lsrs	r0, r3, #1
 801ab9e:	07dc      	lsls	r4, r3, #31
 801aba0:	f817 c000 	ldrb.w	ip, [r7, r0]
 801aba4:	bf54      	ite	pl
 801aba6:	f00c 0c0f 	andpl.w	ip, ip, #15
 801abaa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801abae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801abb2:	fa5f fc8c 	uxtb.w	ip, ip
 801abb6:	2a00      	cmp	r2, #0
 801abb8:	f000 80fe 	beq.w	801adb8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801abbc:	1c58      	adds	r0, r3, #1
 801abbe:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801abc2:	07c0      	lsls	r0, r0, #31
 801abc4:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801abc8:	bf54      	ite	pl
 801abca:	f00e 0e0f 	andpl.w	lr, lr, #15
 801abce:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801abd2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801abd6:	fa5f f08e 	uxtb.w	r0, lr
 801abda:	9010      	str	r0, [sp, #64]	; 0x40
 801abdc:	b1d9      	cbz	r1, 801ac16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801abde:	444b      	add	r3, r9
 801abe0:	0858      	lsrs	r0, r3, #1
 801abe2:	07dc      	lsls	r4, r3, #31
 801abe4:	f103 0301 	add.w	r3, r3, #1
 801abe8:	5c38      	ldrb	r0, [r7, r0]
 801abea:	bf54      	ite	pl
 801abec:	f000 000f 	andpl.w	r0, r0, #15
 801abf0:	1100      	asrmi	r0, r0, #4
 801abf2:	07dc      	lsls	r4, r3, #31
 801abf4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801abf8:	b2c0      	uxtb	r0, r0
 801abfa:	900a      	str	r0, [sp, #40]	; 0x28
 801abfc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801ac00:	f817 e000 	ldrb.w	lr, [r7, r0]
 801ac04:	bf54      	ite	pl
 801ac06:	f00e 030f 	andpl.w	r3, lr, #15
 801ac0a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801ac0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ac12:	b2db      	uxtb	r3, r3
 801ac14:	9311      	str	r3, [sp, #68]	; 0x44
 801ac16:	b292      	uxth	r2, r2
 801ac18:	b289      	uxth	r1, r1
 801ac1a:	0113      	lsls	r3, r2, #4
 801ac1c:	fb02 f001 	mul.w	r0, r2, r1
 801ac20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ac22:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801ac26:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801ac2a:	1a1b      	subs	r3, r3, r0
 801ac2c:	b289      	uxth	r1, r1
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	ebae 0e01 	sub.w	lr, lr, r1
 801ac34:	4353      	muls	r3, r2
 801ac36:	fa1f fe8e 	uxth.w	lr, lr
 801ac3a:	fb0c 320e 	mla	r2, ip, lr, r3
 801ac3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ac40:	fb01 2203 	mla	r2, r1, r3, r2
 801ac44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ac46:	fb00 2203 	mla	r2, r0, r3, r2
 801ac4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801ac4e:	2a00      	cmp	r2, #0
 801ac50:	d039      	beq.n	801acc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ac52:	4bc7      	ldr	r3, [pc, #796]	; (801af70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801ac54:	6819      	ldr	r1, [r3, #0]
 801ac56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ac58:	fa5f fc81 	uxtb.w	ip, r1
 801ac5c:	435a      	muls	r2, r3
 801ac5e:	1c53      	adds	r3, r2, #1
 801ac60:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ac64:	1212      	asrs	r2, r2, #8
 801ac66:	b290      	uxth	r0, r2
 801ac68:	43d2      	mvns	r2, r2
 801ac6a:	fb1c fc00 	smulbb	ip, ip, r0
 801ac6e:	b2d3      	uxtb	r3, r2
 801ac70:	f898 2000 	ldrb.w	r2, [r8]
 801ac74:	fb02 c203 	mla	r2, r2, r3, ip
 801ac78:	b292      	uxth	r2, r2
 801ac7a:	f102 0c01 	add.w	ip, r2, #1
 801ac7e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ac82:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ac86:	fb1c fc03 	smulbb	ip, ip, r3
 801ac8a:	1212      	asrs	r2, r2, #8
 801ac8c:	f888 2000 	strb.w	r2, [r8]
 801ac90:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801ac94:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801ac98:	fb02 c200 	mla	r2, r2, r0, ip
 801ac9c:	b292      	uxth	r2, r2
 801ac9e:	f102 0c01 	add.w	ip, r2, #1
 801aca2:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801aca6:	1212      	asrs	r2, r2, #8
 801aca8:	f888 2001 	strb.w	r2, [r8, #1]
 801acac:	f898 2002 	ldrb.w	r2, [r8, #2]
 801acb0:	fb12 f303 	smulbb	r3, r2, r3
 801acb4:	fb01 3300 	mla	r3, r1, r0, r3
 801acb8:	b29b      	uxth	r3, r3
 801acba:	1c5a      	adds	r2, r3, #1
 801acbc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801acc0:	121b      	asrs	r3, r3, #8
 801acc2:	f888 3002 	strb.w	r3, [r8, #2]
 801acc6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801acc8:	f108 0803 	add.w	r8, r8, #3
 801accc:	441d      	add	r5, r3
 801acce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801acd0:	441e      	add	r6, r3
 801acd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801acd4:	3b01      	subs	r3, #1
 801acd6:	930d      	str	r3, [sp, #52]	; 0x34
 801acd8:	e742      	b.n	801ab60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801acda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801acdc:	f10a 0a03 	add.w	sl, sl, #3
 801ace0:	441d      	add	r5, r3
 801ace2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ace4:	441e      	add	r6, r3
 801ace6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ace8:	3b01      	subs	r3, #1
 801acea:	9309      	str	r3, [sp, #36]	; 0x24
 801acec:	e716      	b.n	801ab1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801acee:	d024      	beq.n	801ad3a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acf2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801acf4:	3b01      	subs	r3, #1
 801acf6:	fb00 5003 	mla	r0, r0, r3, r5
 801acfa:	1400      	asrs	r0, r0, #16
 801acfc:	f53f af2b 	bmi.w	801ab56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad00:	3901      	subs	r1, #1
 801ad02:	4288      	cmp	r0, r1
 801ad04:	f6bf af27 	bge.w	801ab56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad08:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ad0a:	fb01 6303 	mla	r3, r1, r3, r6
 801ad0e:	141b      	asrs	r3, r3, #16
 801ad10:	f53f af21 	bmi.w	801ab56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad14:	3a01      	subs	r2, #1
 801ad16:	4293      	cmp	r3, r2
 801ad18:	f6bf af1d 	bge.w	801ab56 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ad1c:	f10a 0e03 	add.w	lr, sl, #3
 801ad20:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801ad24:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ad28:	f1b8 0f00 	cmp.w	r8, #0
 801ad2c:	dc76      	bgt.n	801ae1c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801ad2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad30:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ad34:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad38:	44a2      	add	sl, r4
 801ad3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	f340 812c 	ble.w	801af9a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ad42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ad46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ad48:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad50:	eef0 6a62 	vmov.f32	s13, s5
 801ad54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ad58:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ad5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad60:	ee16 5a90 	vmov	r5, s13
 801ad64:	eef0 6a43 	vmov.f32	s13, s6
 801ad68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ad6c:	ee16 6a90 	vmov	r6, s13
 801ad70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ad74:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ad78:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ad7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ad80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ad84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ad88:	ee12 2a90 	vmov	r2, s5
 801ad8c:	eef0 2a47 	vmov.f32	s5, s14
 801ad90:	fb92 f3f3 	sdiv	r3, r2, r3
 801ad94:	ee13 2a10 	vmov	r2, s6
 801ad98:	9323      	str	r3, [sp, #140]	; 0x8c
 801ad9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ad9c:	eeb0 3a67 	vmov.f32	s6, s15
 801ada0:	fb92 f3f3 	sdiv	r3, r2, r3
 801ada4:	9324      	str	r3, [sp, #144]	; 0x90
 801ada6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ada8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801adaa:	3b01      	subs	r3, #1
 801adac:	930c      	str	r3, [sp, #48]	; 0x30
 801adae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801adb0:	bf08      	it	eq
 801adb2:	4613      	moveq	r3, r2
 801adb4:	9309      	str	r3, [sp, #36]	; 0x24
 801adb6:	e6a2      	b.n	801aafe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801adb8:	2900      	cmp	r1, #0
 801adba:	f43f af2c 	beq.w	801ac16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801adbe:	eb09 0003 	add.w	r0, r9, r3
 801adc2:	0843      	lsrs	r3, r0, #1
 801adc4:	07c0      	lsls	r0, r0, #31
 801adc6:	5cfb      	ldrb	r3, [r7, r3]
 801adc8:	bf54      	ite	pl
 801adca:	f003 030f 	andpl.w	r3, r3, #15
 801adce:	111b      	asrmi	r3, r3, #4
 801add0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801add4:	b2db      	uxtb	r3, r3
 801add6:	930a      	str	r3, [sp, #40]	; 0x28
 801add8:	e71d      	b.n	801ac16 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801adda:	f113 0b01 	adds.w	fp, r3, #1
 801adde:	f53f af72 	bmi.w	801acc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ade2:	45dc      	cmp	ip, fp
 801ade4:	f6ff af6f 	blt.w	801acc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ade8:	f110 0b01 	adds.w	fp, r0, #1
 801adec:	f53f af6b 	bmi.w	801acc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801adf0:	45de      	cmp	lr, fp
 801adf2:	f6ff af68 	blt.w	801acc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801adf6:	9302      	str	r3, [sp, #8]
 801adf8:	fa0f f38e 	sxth.w	r3, lr
 801adfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801adfe:	9301      	str	r3, [sp, #4]
 801ae00:	fa0f f38c 	sxth.w	r3, ip
 801ae04:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ae08:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ae0c:	9300      	str	r3, [sp, #0]
 801ae0e:	463a      	mov	r2, r7
 801ae10:	464b      	mov	r3, r9
 801ae12:	4641      	mov	r1, r8
 801ae14:	9815      	ldr	r0, [sp, #84]	; 0x54
 801ae16:	f7ff fd79 	bl	801a90c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801ae1a:	e754      	b.n	801acc6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801ae1c:	142a      	asrs	r2, r5, #16
 801ae1e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ae22:	1433      	asrs	r3, r6, #16
 801ae24:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ae28:	fb09 2303 	mla	r3, r9, r3, r2
 801ae2c:	085a      	lsrs	r2, r3, #1
 801ae2e:	07dc      	lsls	r4, r3, #31
 801ae30:	5cba      	ldrb	r2, [r7, r2]
 801ae32:	bf54      	ite	pl
 801ae34:	f002 020f 	andpl.w	r2, r2, #15
 801ae38:	1112      	asrmi	r2, r2, #4
 801ae3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ae3e:	b2d2      	uxtb	r2, r2
 801ae40:	2900      	cmp	r1, #0
 801ae42:	f000 8097 	beq.w	801af74 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801ae46:	f103 0b01 	add.w	fp, r3, #1
 801ae4a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801ae4e:	f01b 0f01 	tst.w	fp, #1
 801ae52:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ae56:	bf0c      	ite	eq
 801ae58:	f00c 0c0f 	andeq.w	ip, ip, #15
 801ae5c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801ae60:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ae64:	fa5f f48c 	uxtb.w	r4, ip
 801ae68:	9412      	str	r4, [sp, #72]	; 0x48
 801ae6a:	b300      	cbz	r0, 801aeae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ae6c:	444b      	add	r3, r9
 801ae6e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ae72:	07dc      	lsls	r4, r3, #31
 801ae74:	f103 0301 	add.w	r3, r3, #1
 801ae78:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ae7c:	bf54      	ite	pl
 801ae7e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ae82:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ae86:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ae8a:	fa5f f48c 	uxtb.w	r4, ip
 801ae8e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ae92:	940b      	str	r4, [sp, #44]	; 0x2c
 801ae94:	07dc      	lsls	r4, r3, #31
 801ae96:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ae9a:	bf54      	ite	pl
 801ae9c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801aea0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801aea4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801aea8:	fa5f f38c 	uxtb.w	r3, ip
 801aeac:	9313      	str	r3, [sp, #76]	; 0x4c
 801aeae:	b289      	uxth	r1, r1
 801aeb0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801aeb2:	b280      	uxth	r0, r0
 801aeb4:	fb01 f300 	mul.w	r3, r1, r0
 801aeb8:	0109      	lsls	r1, r1, #4
 801aeba:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801aebe:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801aec2:	1ac9      	subs	r1, r1, r3
 801aec4:	b280      	uxth	r0, r0
 801aec6:	b289      	uxth	r1, r1
 801aec8:	ebac 0c00 	sub.w	ip, ip, r0
 801aecc:	4361      	muls	r1, r4
 801aece:	fa1f fc8c 	uxth.w	ip, ip
 801aed2:	fb02 120c 	mla	r2, r2, ip, r1
 801aed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801aed8:	fb00 2001 	mla	r0, r0, r1, r2
 801aedc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aede:	fb03 0302 	mla	r3, r3, r2, r0
 801aee2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d039      	beq.n	801af5e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801aeea:	4a21      	ldr	r2, [pc, #132]	; (801af70 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801aeec:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801aef0:	6810      	ldr	r0, [r2, #0]
 801aef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801aef4:	fa5f fc80 	uxtb.w	ip, r0
 801aef8:	4353      	muls	r3, r2
 801aefa:	1c5a      	adds	r2, r3, #1
 801aefc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801af00:	121b      	asrs	r3, r3, #8
 801af02:	b29a      	uxth	r2, r3
 801af04:	43db      	mvns	r3, r3
 801af06:	fb1c fc02 	smulbb	ip, ip, r2
 801af0a:	b2db      	uxtb	r3, r3
 801af0c:	fb01 c103 	mla	r1, r1, r3, ip
 801af10:	b289      	uxth	r1, r1
 801af12:	f101 0c01 	add.w	ip, r1, #1
 801af16:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801af1a:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801af1e:	fb1c fc03 	smulbb	ip, ip, r3
 801af22:	1209      	asrs	r1, r1, #8
 801af24:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801af28:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801af2c:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801af30:	fb01 c102 	mla	r1, r1, r2, ip
 801af34:	b289      	uxth	r1, r1
 801af36:	f101 0c01 	add.w	ip, r1, #1
 801af3a:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801af3e:	1209      	asrs	r1, r1, #8
 801af40:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801af44:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801af48:	fb11 f303 	smulbb	r3, r1, r3
 801af4c:	fb00 3002 	mla	r0, r0, r2, r3
 801af50:	b280      	uxth	r0, r0
 801af52:	1c42      	adds	r2, r0, #1
 801af54:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801af58:	1200      	asrs	r0, r0, #8
 801af5a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801af5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801af60:	f10e 0e03 	add.w	lr, lr, #3
 801af64:	f108 38ff 	add.w	r8, r8, #4294967295
 801af68:	441d      	add	r5, r3
 801af6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801af6c:	441e      	add	r6, r3
 801af6e:	e6db      	b.n	801ad28 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801af70:	2401a9c0 	.word	0x2401a9c0
 801af74:	2800      	cmp	r0, #0
 801af76:	d09a      	beq.n	801aeae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801af78:	444b      	add	r3, r9
 801af7a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801af7e:	07db      	lsls	r3, r3, #31
 801af80:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801af84:	bf54      	ite	pl
 801af86:	f00c 0c0f 	andpl.w	ip, ip, #15
 801af8a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801af8e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801af92:	fa5f f38c 	uxtb.w	r3, ip
 801af96:	930b      	str	r3, [sp, #44]	; 0x2c
 801af98:	e789      	b.n	801aeae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801af9a:	b017      	add	sp, #92	; 0x5c
 801af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801afa0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afa4:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801afa8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801afac:	2d00      	cmp	r5, #0
 801afae:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801afb2:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801afb6:	fb04 5e03 	mla	lr, r4, r3, r5
 801afba:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801afbe:	f2c0 80b1 	blt.w	801b124 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801afc2:	45a9      	cmp	r9, r5
 801afc4:	f340 80ae 	ble.w	801b124 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801afc8:	2c00      	cmp	r4, #0
 801afca:	f2c0 80ab 	blt.w	801b124 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801afce:	45a0      	cmp	r8, r4
 801afd0:	f340 80a8 	ble.w	801b124 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801afd4:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801afd8:	f01e 0f01 	tst.w	lr, #1
 801afdc:	5d97      	ldrb	r7, [r2, r6]
 801afde:	bf0c      	ite	eq
 801afe0:	f007 070f 	andeq.w	r7, r7, #15
 801afe4:	113f      	asrne	r7, r7, #4
 801afe6:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801afea:	b2ff      	uxtb	r7, r7
 801afec:	f115 0a01 	adds.w	sl, r5, #1
 801aff0:	f100 809a 	bmi.w	801b128 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801aff4:	45d1      	cmp	r9, sl
 801aff6:	f340 8097 	ble.w	801b128 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801affa:	2c00      	cmp	r4, #0
 801affc:	f2c0 8094 	blt.w	801b128 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801b000:	45a0      	cmp	r8, r4
 801b002:	f340 8091 	ble.w	801b128 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801b006:	2800      	cmp	r0, #0
 801b008:	f000 8090 	beq.w	801b12c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801b00c:	f10e 0b01 	add.w	fp, lr, #1
 801b010:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801b014:	f01b 0f01 	tst.w	fp, #1
 801b018:	5d96      	ldrb	r6, [r2, r6]
 801b01a:	bf0c      	ite	eq
 801b01c:	f006 060f 	andeq.w	r6, r6, #15
 801b020:	1136      	asrne	r6, r6, #4
 801b022:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801b026:	b2f6      	uxtb	r6, r6
 801b028:	f1bc 0f00 	cmp.w	ip, #0
 801b02c:	f000 8082 	beq.w	801b134 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801b030:	2d00      	cmp	r5, #0
 801b032:	f104 0401 	add.w	r4, r4, #1
 801b036:	db7b      	blt.n	801b130 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b038:	45a9      	cmp	r9, r5
 801b03a:	dd79      	ble.n	801b130 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b03c:	2c00      	cmp	r4, #0
 801b03e:	db77      	blt.n	801b130 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b040:	45a0      	cmp	r8, r4
 801b042:	dd75      	ble.n	801b130 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801b044:	eb03 0b0e 	add.w	fp, r3, lr
 801b048:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801b04c:	f01b 0f01 	tst.w	fp, #1
 801b050:	5d55      	ldrb	r5, [r2, r5]
 801b052:	bf0c      	ite	eq
 801b054:	f005 050f 	andeq.w	r5, r5, #15
 801b058:	112d      	asrne	r5, r5, #4
 801b05a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801b05e:	b2ed      	uxtb	r5, r5
 801b060:	f1ba 0f00 	cmp.w	sl, #0
 801b064:	db69      	blt.n	801b13a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b066:	45d1      	cmp	r9, sl
 801b068:	dd67      	ble.n	801b13a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b06a:	2c00      	cmp	r4, #0
 801b06c:	db65      	blt.n	801b13a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b06e:	45a0      	cmp	r8, r4
 801b070:	dd63      	ble.n	801b13a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801b072:	2800      	cmp	r0, #0
 801b074:	d063      	beq.n	801b13e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801b076:	3301      	adds	r3, #1
 801b078:	449e      	add	lr, r3
 801b07a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801b07e:	f01e 0f01 	tst.w	lr, #1
 801b082:	5cd4      	ldrb	r4, [r2, r3]
 801b084:	bf0c      	ite	eq
 801b086:	f004 040f 	andeq.w	r4, r4, #15
 801b08a:	1124      	asrne	r4, r4, #4
 801b08c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801b090:	b2e3      	uxtb	r3, r4
 801b092:	b282      	uxth	r2, r0
 801b094:	fa1f fc8c 	uxth.w	ip, ip
 801b098:	fb02 f40c 	mul.w	r4, r2, ip
 801b09c:	0112      	lsls	r2, r2, #4
 801b09e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801b0a2:	fa1f f08c 	uxth.w	r0, ip
 801b0a6:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801b0aa:	1b12      	subs	r2, r2, r4
 801b0ac:	ebac 0c00 	sub.w	ip, ip, r0
 801b0b0:	b292      	uxth	r2, r2
 801b0b2:	fa1f fc8c 	uxth.w	ip, ip
 801b0b6:	4372      	muls	r2, r6
 801b0b8:	fb07 220c 	mla	r2, r7, ip, r2
 801b0bc:	fb00 2005 	mla	r0, r0, r5, r2
 801b0c0:	fb04 0303 	mla	r3, r4, r3, r0
 801b0c4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b0c8:	b353      	cbz	r3, 801b120 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801b0ca:	4a1e      	ldr	r2, [pc, #120]	; (801b144 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801b0cc:	7808      	ldrb	r0, [r1, #0]
 801b0ce:	6814      	ldr	r4, [r2, #0]
 801b0d0:	b29a      	uxth	r2, r3
 801b0d2:	43db      	mvns	r3, r3
 801b0d4:	b2e5      	uxtb	r5, r4
 801b0d6:	b2db      	uxtb	r3, r3
 801b0d8:	fb15 f502 	smulbb	r5, r5, r2
 801b0dc:	fb00 5003 	mla	r0, r0, r3, r5
 801b0e0:	b280      	uxth	r0, r0
 801b0e2:	1c45      	adds	r5, r0, #1
 801b0e4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b0e8:	784d      	ldrb	r5, [r1, #1]
 801b0ea:	fb15 f503 	smulbb	r5, r5, r3
 801b0ee:	1200      	asrs	r0, r0, #8
 801b0f0:	7008      	strb	r0, [r1, #0]
 801b0f2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b0f6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801b0fa:	fb00 5002 	mla	r0, r0, r2, r5
 801b0fe:	b280      	uxth	r0, r0
 801b100:	1c45      	adds	r5, r0, #1
 801b102:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b106:	1200      	asrs	r0, r0, #8
 801b108:	7048      	strb	r0, [r1, #1]
 801b10a:	7888      	ldrb	r0, [r1, #2]
 801b10c:	fb10 f303 	smulbb	r3, r0, r3
 801b110:	fb04 3202 	mla	r2, r4, r2, r3
 801b114:	b292      	uxth	r2, r2
 801b116:	1c53      	adds	r3, r2, #1
 801b118:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801b11c:	1212      	asrs	r2, r2, #8
 801b11e:	708a      	strb	r2, [r1, #2]
 801b120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b124:	2700      	movs	r7, #0
 801b126:	e761      	b.n	801afec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801b128:	2600      	movs	r6, #0
 801b12a:	e77d      	b.n	801b028 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801b12c:	4606      	mov	r6, r0
 801b12e:	e77b      	b.n	801b028 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801b130:	2500      	movs	r5, #0
 801b132:	e795      	b.n	801b060 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801b134:	4663      	mov	r3, ip
 801b136:	4665      	mov	r5, ip
 801b138:	e7ab      	b.n	801b092 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801b13a:	2300      	movs	r3, #0
 801b13c:	e7a9      	b.n	801b092 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801b13e:	4603      	mov	r3, r0
 801b140:	e7a7      	b.n	801b092 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801b142:	bf00      	nop
 801b144:	2401a9c0 	.word	0x2401a9c0

0801b148 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b14c:	b093      	sub	sp, #76	; 0x4c
 801b14e:	461c      	mov	r4, r3
 801b150:	920c      	str	r2, [sp, #48]	; 0x30
 801b152:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b154:	9011      	str	r0, [sp, #68]	; 0x44
 801b156:	9107      	str	r1, [sp, #28]
 801b158:	6850      	ldr	r0, [r2, #4]
 801b15a:	6812      	ldr	r2, [r2, #0]
 801b15c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801b160:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801b164:	fb00 1303 	mla	r3, r0, r3, r1
 801b168:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b16c:	eb02 0b03 	add.w	fp, r2, r3
 801b170:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b172:	689b      	ldr	r3, [r3, #8]
 801b174:	3301      	adds	r3, #1
 801b176:	f023 0301 	bic.w	r3, r3, #1
 801b17a:	9309      	str	r3, [sp, #36]	; 0x24
 801b17c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b17e:	f8d3 8000 	ldr.w	r8, [r3]
 801b182:	9b07      	ldr	r3, [sp, #28]
 801b184:	2b00      	cmp	r3, #0
 801b186:	dc03      	bgt.n	801b190 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b188:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	f340 822b 	ble.w	801b5e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b192:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b196:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b19a:	1e48      	subs	r0, r1, #1
 801b19c:	1e57      	subs	r7, r2, #1
 801b19e:	2c00      	cmp	r4, #0
 801b1a0:	f340 80d7 	ble.w	801b352 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801b1a4:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b1a8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b1ac:	d406      	bmi.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b1ae:	4584      	cmp	ip, r0
 801b1b0:	da04      	bge.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	db02      	blt.n	801b1bc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b1b6:	42bb      	cmp	r3, r7
 801b1b8:	f2c0 80cc 	blt.w	801b354 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801b1bc:	f11c 0c01 	adds.w	ip, ip, #1
 801b1c0:	f100 80bf 	bmi.w	801b342 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b1c4:	4561      	cmp	r1, ip
 801b1c6:	f2c0 80bc 	blt.w	801b342 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b1ca:	3301      	adds	r3, #1
 801b1cc:	f100 80b9 	bmi.w	801b342 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b1d0:	429a      	cmp	r2, r3
 801b1d2:	f2c0 80b6 	blt.w	801b342 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801b1d6:	46a2      	mov	sl, r4
 801b1d8:	465f      	mov	r7, fp
 801b1da:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b1de:	f1ba 0f00 	cmp.w	sl, #0
 801b1e2:	f340 80d4 	ble.w	801b38e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801b1e6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801b1ea:	1430      	asrs	r0, r6, #16
 801b1ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b1f0:	9308      	str	r3, [sp, #32]
 801b1f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b1f4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801b1f8:	142b      	asrs	r3, r5, #16
 801b1fa:	f100 8124 	bmi.w	801b446 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b1fe:	f10c 32ff 	add.w	r2, ip, #4294967295
 801b202:	4293      	cmp	r3, r2
 801b204:	f280 811f 	bge.w	801b446 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b208:	2800      	cmp	r0, #0
 801b20a:	f2c0 811c 	blt.w	801b446 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b20e:	f10e 32ff 	add.w	r2, lr, #4294967295
 801b212:	4290      	cmp	r0, r2
 801b214:	f280 8117 	bge.w	801b446 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801b218:	fb00 3309 	mla	r3, r0, r9, r3
 801b21c:	0858      	lsrs	r0, r3, #1
 801b21e:	07da      	lsls	r2, r3, #31
 801b220:	9a08      	ldr	r2, [sp, #32]
 801b222:	f818 c000 	ldrb.w	ip, [r8, r0]
 801b226:	bf54      	ite	pl
 801b228:	f00c 0c0f 	andpl.w	ip, ip, #15
 801b22c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801b230:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801b234:	fa5f fc8c 	uxtb.w	ip, ip
 801b238:	2a00      	cmp	r2, #0
 801b23a:	f000 80ed 	beq.w	801b418 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801b23e:	1c58      	adds	r0, r3, #1
 801b240:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801b244:	07c0      	lsls	r0, r0, #31
 801b246:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801b24a:	bf54      	ite	pl
 801b24c:	f00e 0e0f 	andpl.w	lr, lr, #15
 801b250:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801b254:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801b258:	fa5f fe8e 	uxtb.w	lr, lr
 801b25c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801b260:	b1c9      	cbz	r1, 801b296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b262:	444b      	add	r3, r9
 801b264:	0858      	lsrs	r0, r3, #1
 801b266:	07da      	lsls	r2, r3, #31
 801b268:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b26c:	bf54      	ite	pl
 801b26e:	f000 000f 	andpl.w	r0, r0, #15
 801b272:	1100      	asrmi	r0, r0, #4
 801b274:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801b278:	b2c0      	uxtb	r0, r0
 801b27a:	900a      	str	r0, [sp, #40]	; 0x28
 801b27c:	1c58      	adds	r0, r3, #1
 801b27e:	0843      	lsrs	r3, r0, #1
 801b280:	07c2      	lsls	r2, r0, #31
 801b282:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b286:	bf54      	ite	pl
 801b288:	f003 030f 	andpl.w	r3, r3, #15
 801b28c:	111b      	asrmi	r3, r3, #4
 801b28e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b292:	b2db      	uxtb	r3, r3
 801b294:	930e      	str	r3, [sp, #56]	; 0x38
 801b296:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801b29a:	b289      	uxth	r1, r1
 801b29c:	fb02 f301 	mul.w	r3, r2, r1
 801b2a0:	0112      	lsls	r2, r2, #4
 801b2a2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b2a6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801b2aa:	1ad2      	subs	r2, r2, r3
 801b2ac:	b289      	uxth	r1, r1
 801b2ae:	b292      	uxth	r2, r2
 801b2b0:	1a40      	subs	r0, r0, r1
 801b2b2:	fa1f fe80 	uxth.w	lr, r0
 801b2b6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801b2b8:	4342      	muls	r2, r0
 801b2ba:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801b2be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b2c0:	fb01 c102 	mla	r1, r1, r2, ip
 801b2c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b2c6:	fb03 1302 	mla	r3, r3, r2, r1
 801b2ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b2ce:	b383      	cbz	r3, 801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b2d0:	4ac6      	ldr	r2, [pc, #792]	; (801b5ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801b2d2:	2bff      	cmp	r3, #255	; 0xff
 801b2d4:	6812      	ldr	r2, [r2, #0]
 801b2d6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801b2da:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801b2de:	b2d2      	uxtb	r2, r2
 801b2e0:	f000 80ac 	beq.w	801b43c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801b2e4:	b299      	uxth	r1, r3
 801b2e6:	43db      	mvns	r3, r3
 801b2e8:	f897 c000 	ldrb.w	ip, [r7]
 801b2ec:	fb12 f201 	smulbb	r2, r2, r1
 801b2f0:	b2db      	uxtb	r3, r3
 801b2f2:	fb10 f001 	smulbb	r0, r0, r1
 801b2f6:	fb0c 2203 	mla	r2, ip, r3, r2
 801b2fa:	fb1e f101 	smulbb	r1, lr, r1
 801b2fe:	b292      	uxth	r2, r2
 801b300:	f102 0c01 	add.w	ip, r2, #1
 801b304:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801b308:	1212      	asrs	r2, r2, #8
 801b30a:	703a      	strb	r2, [r7, #0]
 801b30c:	787a      	ldrb	r2, [r7, #1]
 801b30e:	fb02 0003 	mla	r0, r2, r3, r0
 801b312:	b280      	uxth	r0, r0
 801b314:	1c42      	adds	r2, r0, #1
 801b316:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b31a:	78ba      	ldrb	r2, [r7, #2]
 801b31c:	fb02 1303 	mla	r3, r2, r3, r1
 801b320:	1200      	asrs	r0, r0, #8
 801b322:	b29b      	uxth	r3, r3
 801b324:	7078      	strb	r0, [r7, #1]
 801b326:	f103 0e01 	add.w	lr, r3, #1
 801b32a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801b32e:	121b      	asrs	r3, r3, #8
 801b330:	70bb      	strb	r3, [r7, #2]
 801b332:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b334:	3703      	adds	r7, #3
 801b336:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b33a:	441d      	add	r5, r3
 801b33c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b33e:	441e      	add	r6, r3
 801b340:	e74d      	b.n	801b1de <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b342:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b344:	3c01      	subs	r4, #1
 801b346:	f10b 0b03 	add.w	fp, fp, #3
 801b34a:	441d      	add	r5, r3
 801b34c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b34e:	441e      	add	r6, r3
 801b350:	e725      	b.n	801b19e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b352:	d021      	beq.n	801b398 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801b354:	1e63      	subs	r3, r4, #1
 801b356:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b358:	fb00 5003 	mla	r0, r0, r3, r5
 801b35c:	1400      	asrs	r0, r0, #16
 801b35e:	f53f af3a 	bmi.w	801b1d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b362:	3901      	subs	r1, #1
 801b364:	4288      	cmp	r0, r1
 801b366:	f6bf af36 	bge.w	801b1d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b36a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801b36c:	fb01 6303 	mla	r3, r1, r3, r6
 801b370:	141b      	asrs	r3, r3, #16
 801b372:	f53f af30 	bmi.w	801b1d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b376:	3a01      	subs	r2, #1
 801b378:	4293      	cmp	r3, r2
 801b37a:	f6bf af2c 	bge.w	801b1d6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b37e:	f10b 0c03 	add.w	ip, fp, #3
 801b382:	46a6      	mov	lr, r4
 801b384:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801b388:	f1be 0f00 	cmp.w	lr, #0
 801b38c:	dc79      	bgt.n	801b482 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801b38e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801b392:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b396:	44a3      	add	fp, r4
 801b398:	9b07      	ldr	r3, [sp, #28]
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	f340 8123 	ble.w	801b5e6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b3a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b3a4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b3a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3ae:	eef0 6a62 	vmov.f32	s13, s5
 801b3b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b3b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b3be:	ee16 5a90 	vmov	r5, s13
 801b3c2:	eef0 6a43 	vmov.f32	s13, s6
 801b3c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b3ca:	ee16 6a90 	vmov	r6, s13
 801b3ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b3d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b3da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b3de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b3e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b3e6:	ee12 2a90 	vmov	r2, s5
 801b3ea:	eef0 2a47 	vmov.f32	s5, s14
 801b3ee:	fb92 f3f3 	sdiv	r3, r2, r3
 801b3f2:	ee13 2a10 	vmov	r2, s6
 801b3f6:	931f      	str	r3, [sp, #124]	; 0x7c
 801b3f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b3fa:	eeb0 3a67 	vmov.f32	s6, s15
 801b3fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801b402:	9320      	str	r3, [sp, #128]	; 0x80
 801b404:	9b07      	ldr	r3, [sp, #28]
 801b406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b408:	3b01      	subs	r3, #1
 801b40a:	9307      	str	r3, [sp, #28]
 801b40c:	bf08      	it	eq
 801b40e:	4614      	moveq	r4, r2
 801b410:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b412:	bf18      	it	ne
 801b414:	461c      	movne	r4, r3
 801b416:	e6b4      	b.n	801b182 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b418:	2900      	cmp	r1, #0
 801b41a:	f43f af3c 	beq.w	801b296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b41e:	eb09 0003 	add.w	r0, r9, r3
 801b422:	0843      	lsrs	r3, r0, #1
 801b424:	07c0      	lsls	r0, r0, #31
 801b426:	f818 3003 	ldrb.w	r3, [r8, r3]
 801b42a:	bf54      	ite	pl
 801b42c:	f003 030f 	andpl.w	r3, r3, #15
 801b430:	111b      	asrmi	r3, r3, #4
 801b432:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801b436:	b2db      	uxtb	r3, r3
 801b438:	930a      	str	r3, [sp, #40]	; 0x28
 801b43a:	e72c      	b.n	801b296 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801b43c:	703a      	strb	r2, [r7, #0]
 801b43e:	7078      	strb	r0, [r7, #1]
 801b440:	f887 e002 	strb.w	lr, [r7, #2]
 801b444:	e775      	b.n	801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b446:	1c5a      	adds	r2, r3, #1
 801b448:	f53f af73 	bmi.w	801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b44c:	4594      	cmp	ip, r2
 801b44e:	f6ff af70 	blt.w	801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b452:	1c42      	adds	r2, r0, #1
 801b454:	f53f af6d 	bmi.w	801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b458:	4596      	cmp	lr, r2
 801b45a:	f6ff af6a 	blt.w	801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b45e:	9302      	str	r3, [sp, #8]
 801b460:	fa0f f38e 	sxth.w	r3, lr
 801b464:	9a08      	ldr	r2, [sp, #32]
 801b466:	9301      	str	r3, [sp, #4]
 801b468:	fa0f f38c 	sxth.w	r3, ip
 801b46c:	9105      	str	r1, [sp, #20]
 801b46e:	4639      	mov	r1, r7
 801b470:	9300      	str	r3, [sp, #0]
 801b472:	464b      	mov	r3, r9
 801b474:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801b478:	4642      	mov	r2, r8
 801b47a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801b47c:	f7ff fd90 	bl	801afa0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801b480:	e757      	b.n	801b332 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b482:	142a      	asrs	r2, r5, #16
 801b484:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b488:	1433      	asrs	r3, r6, #16
 801b48a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801b48e:	fb09 2303 	mla	r3, r9, r3, r2
 801b492:	085a      	lsrs	r2, r3, #1
 801b494:	07d9      	lsls	r1, r3, #31
 801b496:	f818 2002 	ldrb.w	r2, [r8, r2]
 801b49a:	bf54      	ite	pl
 801b49c:	f002 020f 	andpl.w	r2, r2, #15
 801b4a0:	1112      	asrmi	r2, r2, #4
 801b4a2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801b4a6:	b2d2      	uxtb	r2, r2
 801b4a8:	2800      	cmp	r0, #0
 801b4aa:	f000 8085 	beq.w	801b5b8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801b4ae:	f103 0a01 	add.w	sl, r3, #1
 801b4b2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801b4b6:	f01a 0f01 	tst.w	sl, #1
 801b4ba:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b4be:	bf0c      	ite	eq
 801b4c0:	f001 010f 	andeq.w	r1, r1, #15
 801b4c4:	1109      	asrne	r1, r1, #4
 801b4c6:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b4ca:	b2c9      	uxtb	r1, r1
 801b4cc:	910f      	str	r1, [sp, #60]	; 0x3c
 801b4ce:	b1df      	cbz	r7, 801b508 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801b4d0:	444b      	add	r3, r9
 801b4d2:	0859      	lsrs	r1, r3, #1
 801b4d4:	f013 0f01 	tst.w	r3, #1
 801b4d8:	f103 0301 	add.w	r3, r3, #1
 801b4dc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b4e0:	bf0c      	ite	eq
 801b4e2:	f001 010f 	andeq.w	r1, r1, #15
 801b4e6:	1109      	asrne	r1, r1, #4
 801b4e8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b4ec:	b2c9      	uxtb	r1, r1
 801b4ee:	910b      	str	r1, [sp, #44]	; 0x2c
 801b4f0:	0859      	lsrs	r1, r3, #1
 801b4f2:	07db      	lsls	r3, r3, #31
 801b4f4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b4f8:	bf54      	ite	pl
 801b4fa:	f001 010f 	andpl.w	r1, r1, #15
 801b4fe:	1109      	asrmi	r1, r1, #4
 801b500:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b504:	b2c9      	uxtb	r1, r1
 801b506:	9110      	str	r1, [sp, #64]	; 0x40
 801b508:	b280      	uxth	r0, r0
 801b50a:	b2bf      	uxth	r7, r7
 801b50c:	fb00 f307 	mul.w	r3, r0, r7
 801b510:	0100      	lsls	r0, r0, #4
 801b512:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801b516:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801b51a:	1ac0      	subs	r0, r0, r3
 801b51c:	b2bf      	uxth	r7, r7
 801b51e:	b280      	uxth	r0, r0
 801b520:	1bc9      	subs	r1, r1, r7
 801b522:	fa1f fa81 	uxth.w	sl, r1
 801b526:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b528:	4348      	muls	r0, r1
 801b52a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b52c:	fb02 020a 	mla	r2, r2, sl, r0
 801b530:	fb07 2701 	mla	r7, r7, r1, r2
 801b534:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b536:	fb03 7302 	mla	r3, r3, r2, r7
 801b53a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801b53e:	b393      	cbz	r3, 801b5a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b540:	4a2a      	ldr	r2, [pc, #168]	; (801b5ec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801b542:	2bff      	cmp	r3, #255	; 0xff
 801b544:	6811      	ldr	r1, [r2, #0]
 801b546:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801b54a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801b54e:	b2c9      	uxtb	r1, r1
 801b550:	d042      	beq.n	801b5d8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801b552:	b298      	uxth	r0, r3
 801b554:	43db      	mvns	r3, r3
 801b556:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801b55a:	fb11 f100 	smulbb	r1, r1, r0
 801b55e:	b2db      	uxtb	r3, r3
 801b560:	fb17 f700 	smulbb	r7, r7, r0
 801b564:	fb02 1103 	mla	r1, r2, r3, r1
 801b568:	fb1a f000 	smulbb	r0, sl, r0
 801b56c:	b289      	uxth	r1, r1
 801b56e:	1c4a      	adds	r2, r1, #1
 801b570:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b574:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801b578:	fb02 7703 	mla	r7, r2, r3, r7
 801b57c:	1209      	asrs	r1, r1, #8
 801b57e:	b2bf      	uxth	r7, r7
 801b580:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b584:	1c7a      	adds	r2, r7, #1
 801b586:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801b58a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801b58e:	fb02 0303 	mla	r3, r2, r3, r0
 801b592:	123f      	asrs	r7, r7, #8
 801b594:	b29b      	uxth	r3, r3
 801b596:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b59a:	1c5a      	adds	r2, r3, #1
 801b59c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b5a0:	121b      	asrs	r3, r3, #8
 801b5a2:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801b5a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b5a8:	f10c 0c03 	add.w	ip, ip, #3
 801b5ac:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b5b0:	441d      	add	r5, r3
 801b5b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5b4:	441e      	add	r6, r3
 801b5b6:	e6e7      	b.n	801b388 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801b5b8:	2f00      	cmp	r7, #0
 801b5ba:	d0a5      	beq.n	801b508 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801b5bc:	444b      	add	r3, r9
 801b5be:	0859      	lsrs	r1, r3, #1
 801b5c0:	07db      	lsls	r3, r3, #31
 801b5c2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801b5c6:	bf54      	ite	pl
 801b5c8:	f001 010f 	andpl.w	r1, r1, #15
 801b5cc:	1109      	asrmi	r1, r1, #4
 801b5ce:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801b5d2:	b2c9      	uxtb	r1, r1
 801b5d4:	910b      	str	r1, [sp, #44]	; 0x2c
 801b5d6:	e797      	b.n	801b508 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801b5d8:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801b5dc:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801b5e0:	f80c ac01 	strb.w	sl, [ip, #-1]
 801b5e4:	e7df      	b.n	801b5a6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b5e6:	b013      	add	sp, #76	; 0x4c
 801b5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ec:	2401a9c0 	.word	0x2401a9c0

0801b5f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801b5f0:	b530      	push	{r4, r5, lr}
 801b5f2:	b29d      	uxth	r5, r3
 801b5f4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801b5f8:	780c      	ldrb	r4, [r1, #0]
 801b5fa:	b298      	uxth	r0, r3
 801b5fc:	7813      	ldrb	r3, [r2, #0]
 801b5fe:	fb14 f405 	smulbb	r4, r4, r5
 801b602:	fb13 f300 	smulbb	r3, r3, r0
 801b606:	441c      	add	r4, r3
 801b608:	b2a4      	uxth	r4, r4
 801b60a:	1c63      	adds	r3, r4, #1
 801b60c:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b610:	7853      	ldrb	r3, [r2, #1]
 801b612:	fb13 f300 	smulbb	r3, r3, r0
 801b616:	1224      	asrs	r4, r4, #8
 801b618:	7014      	strb	r4, [r2, #0]
 801b61a:	784c      	ldrb	r4, [r1, #1]
 801b61c:	fb14 f405 	smulbb	r4, r4, r5
 801b620:	441c      	add	r4, r3
 801b622:	b2a4      	uxth	r4, r4
 801b624:	1c63      	adds	r3, r4, #1
 801b626:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b62a:	1224      	asrs	r4, r4, #8
 801b62c:	7054      	strb	r4, [r2, #1]
 801b62e:	788b      	ldrb	r3, [r1, #2]
 801b630:	7891      	ldrb	r1, [r2, #2]
 801b632:	fb13 f305 	smulbb	r3, r3, r5
 801b636:	fb11 f000 	smulbb	r0, r1, r0
 801b63a:	4403      	add	r3, r0
 801b63c:	b29b      	uxth	r3, r3
 801b63e:	1c59      	adds	r1, r3, #1
 801b640:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b644:	121b      	asrs	r3, r3, #8
 801b646:	7093      	strb	r3, [r2, #2]
 801b648:	bd30      	pop	{r4, r5, pc}
	...

0801b64c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b650:	461c      	mov	r4, r3
 801b652:	b08b      	sub	sp, #44	; 0x2c
 801b654:	460e      	mov	r6, r1
 801b656:	4615      	mov	r5, r2
 801b658:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b65a:	4682      	mov	sl, r0
 801b65c:	6861      	ldr	r1, [r4, #4]
 801b65e:	aa06      	add	r2, sp, #24
 801b660:	6820      	ldr	r0, [r4, #0]
 801b662:	2702      	movs	r7, #2
 801b664:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 801b668:	3504      	adds	r5, #4
 801b66a:	c203      	stmia	r2!, {r0, r1}
 801b66c:	6818      	ldr	r0, [r3, #0]
 801b66e:	aa08      	add	r2, sp, #32
 801b670:	6859      	ldr	r1, [r3, #4]
 801b672:	c203      	stmia	r2!, {r0, r1}
 801b674:	a806      	add	r0, sp, #24
 801b676:	f7f4 fa01 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b67a:	4621      	mov	r1, r4
 801b67c:	a808      	add	r0, sp, #32
 801b67e:	f7f4 fa25 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b682:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801b686:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 801b68a:	f002 0301 	and.w	r3, r2, #1
 801b68e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801b692:	9302      	str	r3, [sp, #8]
 801b694:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b698:	f003 0101 	and.w	r1, r3, #1
 801b69c:	9101      	str	r1, [sp, #4]
 801b69e:	9801      	ldr	r0, [sp, #4]
 801b6a0:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801b6a4:	4403      	add	r3, r0
 801b6a6:	fb01 2303 	mla	r3, r1, r3, r2
 801b6aa:	fb93 f3f7 	sdiv	r3, r3, r7
 801b6ae:	441e      	add	r6, r3
 801b6b0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801b6b4:	441a      	add	r2, r3
 801b6b6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801b6ba:	4419      	add	r1, r3
 801b6bc:	4b70      	ldr	r3, [pc, #448]	; (801b880 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801b6be:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b6c2:	6818      	ldr	r0, [r3, #0]
 801b6c4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801b6c8:	6803      	ldr	r3, [r0, #0]
 801b6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b6cc:	4798      	blx	r3
 801b6ce:	4a6d      	ldr	r2, [pc, #436]	; (801b884 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801b6d0:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801b6d4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801b6d8:	8813      	ldrh	r3, [r2, #0]
 801b6da:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801b6de:	fb03 1404 	mla	r4, r3, r4, r1
 801b6e2:	4611      	mov	r1, r2
 801b6e4:	fb0b f303 	mul.w	r3, fp, r3
 801b6e8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b6ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b6f0:	4404      	add	r4, r0
 801b6f2:	4423      	add	r3, r4
 801b6f4:	d073      	beq.n	801b7de <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801b6f6:	9705      	str	r7, [sp, #20]
 801b6f8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801b6fc:	9b03      	ldr	r3, [sp, #12]
 801b6fe:	429c      	cmp	r4, r3
 801b700:	f080 80b5 	bcs.w	801b86e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801b704:	9b02      	ldr	r3, [sp, #8]
 801b706:	b35b      	cbz	r3, 801b760 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801b708:	7831      	ldrb	r1, [r6, #0]
 801b70a:	4622      	mov	r2, r4
 801b70c:	1c77      	adds	r7, r6, #1
 801b70e:	3403      	adds	r4, #3
 801b710:	f001 010f 	and.w	r1, r1, #15
 801b714:	f108 3bff 	add.w	fp, r8, #4294967295
 801b718:	464b      	mov	r3, r9
 801b71a:	4650      	mov	r0, sl
 801b71c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b720:	4429      	add	r1, r5
 801b722:	f7ff ff65 	bl	801b5f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801b726:	f1bb 0f01 	cmp.w	fp, #1
 801b72a:	dd1c      	ble.n	801b766 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801b72c:	7839      	ldrb	r1, [r7, #0]
 801b72e:	4622      	mov	r2, r4
 801b730:	464b      	mov	r3, r9
 801b732:	4650      	mov	r0, sl
 801b734:	0909      	lsrs	r1, r1, #4
 801b736:	f1ab 0b02 	sub.w	fp, fp, #2
 801b73a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b73e:	4429      	add	r1, r5
 801b740:	f7ff ff56 	bl	801b5f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801b744:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b748:	1ce2      	adds	r2, r4, #3
 801b74a:	464b      	mov	r3, r9
 801b74c:	f001 010f 	and.w	r1, r1, #15
 801b750:	4650      	mov	r0, sl
 801b752:	3406      	adds	r4, #6
 801b754:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b758:	4429      	add	r1, r5
 801b75a:	f7ff ff49 	bl	801b5f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801b75e:	e7e2      	b.n	801b726 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801b760:	4637      	mov	r7, r6
 801b762:	46c3      	mov	fp, r8
 801b764:	e7df      	b.n	801b726 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801b766:	d10a      	bne.n	801b77e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801b768:	7839      	ldrb	r1, [r7, #0]
 801b76a:	4622      	mov	r2, r4
 801b76c:	3403      	adds	r4, #3
 801b76e:	464b      	mov	r3, r9
 801b770:	0909      	lsrs	r1, r1, #4
 801b772:	4650      	mov	r0, sl
 801b774:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b778:	4429      	add	r1, r5
 801b77a:	f7ff ff39 	bl	801b5f0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801b77e:	9b04      	ldr	r3, [sp, #16]
 801b780:	9a01      	ldr	r2, [sp, #4]
 801b782:	881b      	ldrh	r3, [r3, #0]
 801b784:	eba3 0308 	sub.w	r3, r3, r8
 801b788:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b78c:	441c      	add	r4, r3
 801b78e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801b792:	4413      	add	r3, r2
 801b794:	9a05      	ldr	r2, [sp, #20]
 801b796:	fb93 f3f2 	sdiv	r3, r3, r2
 801b79a:	441e      	add	r6, r3
 801b79c:	e7ae      	b.n	801b6fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801b79e:	4632      	mov	r2, r6
 801b7a0:	46c4      	mov	ip, r8
 801b7a2:	e037      	b.n	801b814 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801b7a4:	d10e      	bne.n	801b7c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801b7a6:	7812      	ldrb	r2, [r2, #0]
 801b7a8:	3003      	adds	r0, #3
 801b7aa:	0912      	lsrs	r2, r2, #4
 801b7ac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b7b0:	18ac      	adds	r4, r5, r2
 801b7b2:	5caa      	ldrb	r2, [r5, r2]
 801b7b4:	f800 2c03 	strb.w	r2, [r0, #-3]
 801b7b8:	7862      	ldrb	r2, [r4, #1]
 801b7ba:	f800 2c02 	strb.w	r2, [r0, #-2]
 801b7be:	78a2      	ldrb	r2, [r4, #2]
 801b7c0:	f800 2c01 	strb.w	r2, [r0, #-1]
 801b7c4:	880c      	ldrh	r4, [r1, #0]
 801b7c6:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801b7ca:	eba4 0408 	sub.w	r4, r4, r8
 801b7ce:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7d2:	4404      	add	r4, r0
 801b7d4:	9801      	ldr	r0, [sp, #4]
 801b7d6:	4402      	add	r2, r0
 801b7d8:	fb92 f2f7 	sdiv	r2, r2, r7
 801b7dc:	4416      	add	r6, r2
 801b7de:	429c      	cmp	r4, r3
 801b7e0:	d245      	bcs.n	801b86e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801b7e2:	9a02      	ldr	r2, [sp, #8]
 801b7e4:	2a00      	cmp	r2, #0
 801b7e6:	d0da      	beq.n	801b79e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801b7e8:	7830      	ldrb	r0, [r6, #0]
 801b7ea:	1c72      	adds	r2, r6, #1
 801b7ec:	3403      	adds	r4, #3
 801b7ee:	f000 000f 	and.w	r0, r0, #15
 801b7f2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b7f6:	eb05 0c00 	add.w	ip, r5, r0
 801b7fa:	5c28      	ldrb	r0, [r5, r0]
 801b7fc:	f804 0c03 	strb.w	r0, [r4, #-3]
 801b800:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801b804:	f804 0c02 	strb.w	r0, [r4, #-2]
 801b808:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801b80c:	f108 3cff 	add.w	ip, r8, #4294967295
 801b810:	f804 0c01 	strb.w	r0, [r4, #-1]
 801b814:	f1bc 0f01 	cmp.w	ip, #1
 801b818:	4620      	mov	r0, r4
 801b81a:	f104 0406 	add.w	r4, r4, #6
 801b81e:	ddc1      	ble.n	801b7a4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801b820:	7810      	ldrb	r0, [r2, #0]
 801b822:	f1ac 0c02 	sub.w	ip, ip, #2
 801b826:	0900      	lsrs	r0, r0, #4
 801b828:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b82c:	eb05 0e00 	add.w	lr, r5, r0
 801b830:	5c28      	ldrb	r0, [r5, r0]
 801b832:	f804 0c06 	strb.w	r0, [r4, #-6]
 801b836:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801b83a:	f804 0c05 	strb.w	r0, [r4, #-5]
 801b83e:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801b842:	f804 0c04 	strb.w	r0, [r4, #-4]
 801b846:	f812 0b01 	ldrb.w	r0, [r2], #1
 801b84a:	f000 000f 	and.w	r0, r0, #15
 801b84e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b852:	eb05 0e00 	add.w	lr, r5, r0
 801b856:	5c28      	ldrb	r0, [r5, r0]
 801b858:	f804 0c03 	strb.w	r0, [r4, #-3]
 801b85c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801b860:	f804 0c02 	strb.w	r0, [r4, #-2]
 801b864:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801b868:	f804 0c01 	strb.w	r0, [r4, #-1]
 801b86c:	e7d2      	b.n	801b814 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801b86e:	4b04      	ldr	r3, [pc, #16]	; (801b880 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801b870:	6818      	ldr	r0, [r3, #0]
 801b872:	6803      	ldr	r3, [r0, #0]
 801b874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b876:	4798      	blx	r3
 801b878:	b00b      	add	sp, #44	; 0x2c
 801b87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b87e:	bf00      	nop
 801b880:	2401a9b8 	.word	0x2401a9b8
 801b884:	2401a9b2 	.word	0x2401a9b2

0801b888 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801b888:	b530      	push	{r4, r5, lr}
 801b88a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801b88e:	780d      	ldrb	r5, [r1, #0]
 801b890:	28ff      	cmp	r0, #255	; 0xff
 801b892:	d107      	bne.n	801b8a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801b894:	2bff      	cmp	r3, #255	; 0xff
 801b896:	d105      	bne.n	801b8a4 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801b898:	7015      	strb	r5, [r2, #0]
 801b89a:	784b      	ldrb	r3, [r1, #1]
 801b89c:	7053      	strb	r3, [r2, #1]
 801b89e:	788b      	ldrb	r3, [r1, #2]
 801b8a0:	7093      	strb	r3, [r2, #2]
 801b8a2:	bd30      	pop	{r4, r5, pc}
 801b8a4:	fb10 f003 	smulbb	r0, r0, r3
 801b8a8:	b283      	uxth	r3, r0
 801b8aa:	1c58      	adds	r0, r3, #1
 801b8ac:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b8b0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b8b4:	b284      	uxth	r4, r0
 801b8b6:	43c0      	mvns	r0, r0
 801b8b8:	fb15 f504 	smulbb	r5, r5, r4
 801b8bc:	b2c3      	uxtb	r3, r0
 801b8be:	7810      	ldrb	r0, [r2, #0]
 801b8c0:	fb00 5003 	mla	r0, r0, r3, r5
 801b8c4:	b280      	uxth	r0, r0
 801b8c6:	1c45      	adds	r5, r0, #1
 801b8c8:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b8cc:	7855      	ldrb	r5, [r2, #1]
 801b8ce:	fb15 f503 	smulbb	r5, r5, r3
 801b8d2:	1200      	asrs	r0, r0, #8
 801b8d4:	7010      	strb	r0, [r2, #0]
 801b8d6:	7848      	ldrb	r0, [r1, #1]
 801b8d8:	fb00 5004 	mla	r0, r0, r4, r5
 801b8dc:	b280      	uxth	r0, r0
 801b8de:	1c45      	adds	r5, r0, #1
 801b8e0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801b8e4:	1200      	asrs	r0, r0, #8
 801b8e6:	7050      	strb	r0, [r2, #1]
 801b8e8:	7888      	ldrb	r0, [r1, #2]
 801b8ea:	7891      	ldrb	r1, [r2, #2]
 801b8ec:	fb11 f303 	smulbb	r3, r1, r3
 801b8f0:	fb00 3304 	mla	r3, r0, r4, r3
 801b8f4:	b29b      	uxth	r3, r3
 801b8f6:	1c59      	adds	r1, r3, #1
 801b8f8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801b8fc:	121b      	asrs	r3, r3, #8
 801b8fe:	e7cf      	b.n	801b8a0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801b900 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b904:	461d      	mov	r5, r3
 801b906:	b08f      	sub	sp, #60	; 0x3c
 801b908:	460c      	mov	r4, r1
 801b90a:	4616      	mov	r6, r2
 801b90c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b90e:	4680      	mov	r8, r0
 801b910:	6869      	ldr	r1, [r5, #4]
 801b912:	aa0a      	add	r2, sp, #40	; 0x28
 801b914:	6828      	ldr	r0, [r5, #0]
 801b916:	3604      	adds	r6, #4
 801b918:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 801b91c:	4f57      	ldr	r7, [pc, #348]	; (801ba7c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801b91e:	c203      	stmia	r2!, {r0, r1}
 801b920:	6818      	ldr	r0, [r3, #0]
 801b922:	aa0c      	add	r2, sp, #48	; 0x30
 801b924:	6859      	ldr	r1, [r3, #4]
 801b926:	c203      	stmia	r2!, {r0, r1}
 801b928:	a80a      	add	r0, sp, #40	; 0x28
 801b92a:	f7f4 f8a7 	bl	800fa7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b92e:	4629      	mov	r1, r5
 801b930:	a80c      	add	r0, sp, #48	; 0x30
 801b932:	2502      	movs	r5, #2
 801b934:	f7f4 f8ca 	bl	800facc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b938:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801b93c:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 801b940:	f002 0301 	and.w	r3, r2, #1
 801b944:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 801b948:	9304      	str	r3, [sp, #16]
 801b94a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801b94e:	f003 0101 	and.w	r1, r3, #1
 801b952:	9103      	str	r1, [sp, #12]
 801b954:	9803      	ldr	r0, [sp, #12]
 801b956:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801b95a:	4403      	add	r3, r0
 801b95c:	6838      	ldr	r0, [r7, #0]
 801b95e:	fb01 2303 	mla	r3, r1, r3, r2
 801b962:	fb93 f3f5 	sdiv	r3, r3, r5
 801b966:	18e5      	adds	r5, r4, r3
 801b968:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b96c:	441a      	add	r2, r3
 801b96e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801b972:	4419      	add	r1, r3
 801b974:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801b978:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 801b97c:	6803      	ldr	r3, [r0, #0]
 801b97e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b980:	4798      	blx	r3
 801b982:	4a3f      	ldr	r2, [pc, #252]	; (801ba80 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801b984:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801b988:	8813      	ldrh	r3, [r2, #0]
 801b98a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801b98e:	9207      	str	r2, [sp, #28]
 801b990:	fb03 1404 	mla	r4, r3, r4, r1
 801b994:	fb0a f303 	mul.w	r3, sl, r3
 801b998:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b99c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9a0:	4404      	add	r4, r0
 801b9a2:	18e3      	adds	r3, r4, r3
 801b9a4:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801b9a8:	9b05      	ldr	r3, [sp, #20]
 801b9aa:	429c      	cmp	r4, r3
 801b9ac:	d25d      	bcs.n	801ba6a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801b9ae:	9b04      	ldr	r3, [sp, #16]
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d037      	beq.n	801ba24 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801b9b4:	782b      	ldrb	r3, [r5, #0]
 801b9b6:	1c6f      	adds	r7, r5, #1
 801b9b8:	f003 030f 	and.w	r3, r3, #15
 801b9bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b9c0:	9309      	str	r3, [sp, #36]	; 0x24
 801b9c2:	0e1b      	lsrs	r3, r3, #24
 801b9c4:	d006      	beq.n	801b9d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801b9c6:	9300      	str	r3, [sp, #0]
 801b9c8:	4622      	mov	r2, r4
 801b9ca:	464b      	mov	r3, r9
 801b9cc:	a909      	add	r1, sp, #36	; 0x24
 801b9ce:	4640      	mov	r0, r8
 801b9d0:	f7ff ff5a 	bl	801b888 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801b9d4:	3403      	adds	r4, #3
 801b9d6:	f10b 3aff 	add.w	sl, fp, #4294967295
 801b9da:	f1ba 0f01 	cmp.w	sl, #1
 801b9de:	dd24      	ble.n	801ba2a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801b9e0:	783b      	ldrb	r3, [r7, #0]
 801b9e2:	091b      	lsrs	r3, r3, #4
 801b9e4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b9e8:	9308      	str	r3, [sp, #32]
 801b9ea:	0e1b      	lsrs	r3, r3, #24
 801b9ec:	d006      	beq.n	801b9fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801b9ee:	9300      	str	r3, [sp, #0]
 801b9f0:	4622      	mov	r2, r4
 801b9f2:	464b      	mov	r3, r9
 801b9f4:	a908      	add	r1, sp, #32
 801b9f6:	4640      	mov	r0, r8
 801b9f8:	f7ff ff46 	bl	801b888 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801b9fc:	f817 3b01 	ldrb.w	r3, [r7], #1
 801ba00:	f003 030f 	and.w	r3, r3, #15
 801ba04:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ba08:	9309      	str	r3, [sp, #36]	; 0x24
 801ba0a:	0e1b      	lsrs	r3, r3, #24
 801ba0c:	d006      	beq.n	801ba1c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801ba0e:	9300      	str	r3, [sp, #0]
 801ba10:	1ce2      	adds	r2, r4, #3
 801ba12:	464b      	mov	r3, r9
 801ba14:	a909      	add	r1, sp, #36	; 0x24
 801ba16:	4640      	mov	r0, r8
 801ba18:	f7ff ff36 	bl	801b888 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ba1c:	3406      	adds	r4, #6
 801ba1e:	f1aa 0a02 	sub.w	sl, sl, #2
 801ba22:	e7da      	b.n	801b9da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801ba24:	462f      	mov	r7, r5
 801ba26:	46da      	mov	sl, fp
 801ba28:	e7d7      	b.n	801b9da <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801ba2a:	d10e      	bne.n	801ba4a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801ba2c:	783b      	ldrb	r3, [r7, #0]
 801ba2e:	091b      	lsrs	r3, r3, #4
 801ba30:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ba34:	9309      	str	r3, [sp, #36]	; 0x24
 801ba36:	0e1b      	lsrs	r3, r3, #24
 801ba38:	d006      	beq.n	801ba48 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801ba3a:	9300      	str	r3, [sp, #0]
 801ba3c:	4622      	mov	r2, r4
 801ba3e:	464b      	mov	r3, r9
 801ba40:	a909      	add	r1, sp, #36	; 0x24
 801ba42:	4640      	mov	r0, r8
 801ba44:	f7ff ff20 	bl	801b888 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801ba48:	3403      	adds	r4, #3
 801ba4a:	9b07      	ldr	r3, [sp, #28]
 801ba4c:	9a03      	ldr	r2, [sp, #12]
 801ba4e:	881b      	ldrh	r3, [r3, #0]
 801ba50:	eba3 030b 	sub.w	r3, r3, fp
 801ba54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba58:	441c      	add	r4, r3
 801ba5a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801ba5e:	4413      	add	r3, r2
 801ba60:	2202      	movs	r2, #2
 801ba62:	fb93 f3f2 	sdiv	r3, r3, r2
 801ba66:	441d      	add	r5, r3
 801ba68:	e79e      	b.n	801b9a8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801ba6a:	9b06      	ldr	r3, [sp, #24]
 801ba6c:	6818      	ldr	r0, [r3, #0]
 801ba6e:	6803      	ldr	r3, [r0, #0]
 801ba70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba72:	4798      	blx	r3
 801ba74:	b00f      	add	sp, #60	; 0x3c
 801ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba7a:	bf00      	nop
 801ba7c:	2401a9b8 	.word	0x2401a9b8
 801ba80:	2401a9b2 	.word	0x2401a9b2

0801ba84 <CRC_Lock>:
 801ba84:	4a20      	ldr	r2, [pc, #128]	; (801bb08 <CRC_Lock+0x84>)
 801ba86:	b530      	push	{r4, r5, lr}
 801ba88:	6813      	ldr	r3, [r2, #0]
 801ba8a:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801ba8e:	f24c 2540 	movw	r5, #49728	; 0xc240
 801ba92:	f023 0301 	bic.w	r3, r3, #1
 801ba96:	6013      	str	r3, [r2, #0]
 801ba98:	4b1c      	ldr	r3, [pc, #112]	; (801bb0c <CRC_Lock+0x88>)
 801ba9a:	681a      	ldr	r2, [r3, #0]
 801ba9c:	4022      	ands	r2, r4
 801ba9e:	42aa      	cmp	r2, r5
 801baa0:	d005      	beq.n	801baae <CRC_Lock+0x2a>
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	f24c 2270 	movw	r2, #49776	; 0xc270
 801baa8:	4023      	ands	r3, r4
 801baaa:	4293      	cmp	r3, r2
 801baac:	d124      	bne.n	801baf8 <CRC_Lock+0x74>
 801baae:	4b18      	ldr	r3, [pc, #96]	; (801bb10 <CRC_Lock+0x8c>)
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	bb0b      	cbnz	r3, 801baf8 <CRC_Lock+0x74>
 801bab4:	4b17      	ldr	r3, [pc, #92]	; (801bb14 <CRC_Lock+0x90>)
 801bab6:	681a      	ldr	r2, [r3, #0]
 801bab8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801babc:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801bac0:	d00d      	beq.n	801bade <CRC_Lock+0x5a>
 801bac2:	681a      	ldr	r2, [r3, #0]
 801bac4:	f240 4483 	movw	r4, #1155	; 0x483
 801bac8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801bacc:	42a2      	cmp	r2, r4
 801bace:	d006      	beq.n	801bade <CRC_Lock+0x5a>
 801bad0:	681b      	ldr	r3, [r3, #0]
 801bad2:	f240 4285 	movw	r2, #1157	; 0x485
 801bad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801bada:	4293      	cmp	r3, r2
 801badc:	d10c      	bne.n	801baf8 <CRC_Lock+0x74>
 801bade:	4b0e      	ldr	r3, [pc, #56]	; (801bb18 <CRC_Lock+0x94>)
 801bae0:	2201      	movs	r2, #1
 801bae2:	601a      	str	r2, [r3, #0]
 801bae4:	681a      	ldr	r2, [r3, #0]
 801bae6:	2a00      	cmp	r2, #0
 801bae8:	d1fc      	bne.n	801bae4 <CRC_Lock+0x60>
 801baea:	4b0c      	ldr	r3, [pc, #48]	; (801bb1c <CRC_Lock+0x98>)
 801baec:	6018      	str	r0, [r3, #0]
 801baee:	6818      	ldr	r0, [r3, #0]
 801baf0:	1a43      	subs	r3, r0, r1
 801baf2:	4258      	negs	r0, r3
 801baf4:	4158      	adcs	r0, r3
 801baf6:	bd30      	pop	{r4, r5, pc}
 801baf8:	4b09      	ldr	r3, [pc, #36]	; (801bb20 <CRC_Lock+0x9c>)
 801bafa:	2201      	movs	r2, #1
 801bafc:	601a      	str	r2, [r3, #0]
 801bafe:	681a      	ldr	r2, [r3, #0]
 801bb00:	2a00      	cmp	r2, #0
 801bb02:	d1fc      	bne.n	801bafe <CRC_Lock+0x7a>
 801bb04:	4b07      	ldr	r3, [pc, #28]	; (801bb24 <CRC_Lock+0xa0>)
 801bb06:	e7f1      	b.n	801baec <CRC_Lock+0x68>
 801bb08:	e0002000 	.word	0xe0002000
 801bb0c:	e000ed00 	.word	0xe000ed00
 801bb10:	e0042000 	.word	0xe0042000
 801bb14:	5c001000 	.word	0x5c001000
 801bb18:	58024c08 	.word	0x58024c08
 801bb1c:	58024c00 	.word	0x58024c00
 801bb20:	40023008 	.word	0x40023008
 801bb24:	40023000 	.word	0x40023000

0801bb28 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801bb28:	6101      	str	r1, [r0, #16]
 801bb2a:	4770      	bx	lr

0801bb2c <_ZN8touchgfx8Gestures4tickEv>:
 801bb2c:	7b83      	ldrb	r3, [r0, #14]
 801bb2e:	b14b      	cbz	r3, 801bb44 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801bb30:	8903      	ldrh	r3, [r0, #8]
 801bb32:	3301      	adds	r3, #1
 801bb34:	b29b      	uxth	r3, r3
 801bb36:	2b07      	cmp	r3, #7
 801bb38:	8103      	strh	r3, [r0, #8]
 801bb3a:	bf81      	itttt	hi
 801bb3c:	2300      	movhi	r3, #0
 801bb3e:	8143      	strhhi	r3, [r0, #10]
 801bb40:	8183      	strhhi	r3, [r0, #12]
 801bb42:	7383      	strbhi	r3, [r0, #14]
 801bb44:	4770      	bx	lr
	...

0801bb48 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801bb48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801bb4c:	4698      	mov	r8, r3
 801bb4e:	8883      	ldrh	r3, [r0, #4]
 801bb50:	4604      	mov	r4, r0
 801bb52:	4617      	mov	r7, r2
 801bb54:	f8ad 3006 	strh.w	r3, [sp, #6]
 801bb58:	eba8 0303 	sub.w	r3, r8, r3
 801bb5c:	4a19      	ldr	r2, [pc, #100]	; (801bbc4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801bb5e:	460e      	mov	r6, r1
 801bb60:	b21b      	sxth	r3, r3
 801bb62:	88c1      	ldrh	r1, [r0, #6]
 801bb64:	9200      	str	r2, [sp, #0]
 801bb66:	2000      	movs	r0, #0
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	8aa2      	ldrh	r2, [r4, #20]
 801bb6c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801bb70:	bfb8      	it	lt
 801bb72:	425b      	neglt	r3, r3
 801bb74:	f88d 0004 	strb.w	r0, [sp, #4]
 801bb78:	f8ad 1008 	strh.w	r1, [sp, #8]
 801bb7c:	b21b      	sxth	r3, r3
 801bb7e:	f8ad 800a 	strh.w	r8, [sp, #10]
 801bb82:	f8ad 500c 	strh.w	r5, [sp, #12]
 801bb86:	4293      	cmp	r3, r2
 801bb88:	dc07      	bgt.n	801bb9a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801bb8a:	1a69      	subs	r1, r5, r1
 801bb8c:	b209      	sxth	r1, r1
 801bb8e:	2900      	cmp	r1, #0
 801bb90:	bfb8      	it	lt
 801bb92:	4249      	neglt	r1, r1
 801bb94:	b209      	sxth	r1, r1
 801bb96:	428a      	cmp	r2, r1
 801bb98:	da10      	bge.n	801bbbc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801bb9a:	6920      	ldr	r0, [r4, #16]
 801bb9c:	4669      	mov	r1, sp
 801bb9e:	eba8 0606 	sub.w	r6, r8, r6
 801bba2:	1bef      	subs	r7, r5, r7
 801bba4:	6803      	ldr	r3, [r0, #0]
 801bba6:	685b      	ldr	r3, [r3, #4]
 801bba8:	4798      	blx	r3
 801bbaa:	2300      	movs	r3, #0
 801bbac:	2001      	movs	r0, #1
 801bbae:	8166      	strh	r6, [r4, #10]
 801bbb0:	8123      	strh	r3, [r4, #8]
 801bbb2:	81a7      	strh	r7, [r4, #12]
 801bbb4:	f8a4 8004 	strh.w	r8, [r4, #4]
 801bbb8:	80e5      	strh	r5, [r4, #6]
 801bbba:	73a0      	strb	r0, [r4, #14]
 801bbbc:	b004      	add	sp, #16
 801bbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bbc2:	bf00      	nop
 801bbc4:	0801e600 	.word	0x0801e600

0801bbc8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bbca:	461e      	mov	r6, r3
 801bbcc:	1e4b      	subs	r3, r1, #1
 801bbce:	b085      	sub	sp, #20
 801bbd0:	4604      	mov	r4, r0
 801bbd2:	2b01      	cmp	r3, #1
 801bbd4:	460d      	mov	r5, r1
 801bbd6:	4617      	mov	r7, r2
 801bbd8:	d84b      	bhi.n	801bc72 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801bbda:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801bbde:	1cd3      	adds	r3, r2, #3
 801bbe0:	b29b      	uxth	r3, r3
 801bbe2:	2b06      	cmp	r3, #6
 801bbe4:	d916      	bls.n	801bc14 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801bbe6:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801bc88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bbea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bbee:	f8cd c004 	str.w	ip, [sp, #4]
 801bbf2:	f04f 0c00 	mov.w	ip, #0
 801bbf6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bbfa:	6900      	ldr	r0, [r0, #16]
 801bbfc:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bc00:	a901      	add	r1, sp, #4
 801bc02:	f88d c008 	strb.w	ip, [sp, #8]
 801bc06:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bc0a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc0e:	6803      	ldr	r3, [r0, #0]
 801bc10:	689b      	ldr	r3, [r3, #8]
 801bc12:	4798      	blx	r3
 801bc14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc18:	1cd3      	adds	r3, r2, #3
 801bc1a:	b29b      	uxth	r3, r3
 801bc1c:	2b06      	cmp	r3, #6
 801bc1e:	d916      	bls.n	801bc4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bc20:	f8df c064 	ldr.w	ip, [pc, #100]	; 801bc88 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801bc24:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801bc28:	f8cd c004 	str.w	ip, [sp, #4]
 801bc2c:	f04f 0c01 	mov.w	ip, #1
 801bc30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bc34:	6920      	ldr	r0, [r4, #16]
 801bc36:	f8ad 100c 	strh.w	r1, [sp, #12]
 801bc3a:	a901      	add	r1, sp, #4
 801bc3c:	f88d c008 	strb.w	ip, [sp, #8]
 801bc40:	f8ad 200a 	strh.w	r2, [sp, #10]
 801bc44:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc48:	6803      	ldr	r3, [r0, #0]
 801bc4a:	689b      	ldr	r3, [r3, #8]
 801bc4c:	4798      	blx	r3
 801bc4e:	4b0d      	ldr	r3, [pc, #52]	; (801bc84 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801bc50:	a901      	add	r1, sp, #4
 801bc52:	6920      	ldr	r0, [r4, #16]
 801bc54:	9301      	str	r3, [sp, #4]
 801bc56:	2300      	movs	r3, #0
 801bc58:	f88d 5008 	strb.w	r5, [sp, #8]
 801bc5c:	f8ad 700a 	strh.w	r7, [sp, #10]
 801bc60:	f8ad 600c 	strh.w	r6, [sp, #12]
 801bc64:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bc68:	6803      	ldr	r3, [r0, #0]
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	4798      	blx	r3
 801bc6e:	b005      	add	sp, #20
 801bc70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc72:	2900      	cmp	r1, #0
 801bc74:	d1eb      	bne.n	801bc4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bc76:	80a2      	strh	r2, [r4, #4]
 801bc78:	80c6      	strh	r6, [r0, #6]
 801bc7a:	60a1      	str	r1, [r4, #8]
 801bc7c:	81a1      	strh	r1, [r4, #12]
 801bc7e:	73a1      	strb	r1, [r4, #14]
 801bc80:	e7e5      	b.n	801bc4e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801bc82:	bf00      	nop
 801bc84:	0801e5ec 	.word	0x0801e5ec
 801bc88:	0801e614 	.word	0x0801e614

0801bc8c <__aeabi_atexit>:
 801bc8c:	460b      	mov	r3, r1
 801bc8e:	4601      	mov	r1, r0
 801bc90:	4618      	mov	r0, r3
 801bc92:	f000 b90f 	b.w	801beb4 <__cxa_atexit>

0801bc96 <_ZdlPvj>:
 801bc96:	f000 b812 	b.w	801bcbe <_ZdlPv>

0801bc9a <__cxa_guard_acquire>:
 801bc9a:	6803      	ldr	r3, [r0, #0]
 801bc9c:	07db      	lsls	r3, r3, #31
 801bc9e:	d406      	bmi.n	801bcae <__cxa_guard_acquire+0x14>
 801bca0:	7843      	ldrb	r3, [r0, #1]
 801bca2:	b103      	cbz	r3, 801bca6 <__cxa_guard_acquire+0xc>
 801bca4:	deff      	udf	#255	; 0xff
 801bca6:	2301      	movs	r3, #1
 801bca8:	7043      	strb	r3, [r0, #1]
 801bcaa:	4618      	mov	r0, r3
 801bcac:	4770      	bx	lr
 801bcae:	2000      	movs	r0, #0
 801bcb0:	4770      	bx	lr

0801bcb2 <__cxa_guard_release>:
 801bcb2:	2301      	movs	r3, #1
 801bcb4:	6003      	str	r3, [r0, #0]
 801bcb6:	4770      	bx	lr

0801bcb8 <__cxa_pure_virtual>:
 801bcb8:	b508      	push	{r3, lr}
 801bcba:	f000 f80f 	bl	801bcdc <_ZSt9terminatev>

0801bcbe <_ZdlPv>:
 801bcbe:	f000 b845 	b.w	801bd4c <free>

0801bcc2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801bcc2:	b508      	push	{r3, lr}
 801bcc4:	4780      	blx	r0
 801bcc6:	f000 f80e 	bl	801bce6 <abort>
	...

0801bccc <_ZSt13get_terminatev>:
 801bccc:	4b02      	ldr	r3, [pc, #8]	; (801bcd8 <_ZSt13get_terminatev+0xc>)
 801bcce:	6818      	ldr	r0, [r3, #0]
 801bcd0:	f3bf 8f5b 	dmb	ish
 801bcd4:	4770      	bx	lr
 801bcd6:	bf00      	nop
 801bcd8:	2400007c 	.word	0x2400007c

0801bcdc <_ZSt9terminatev>:
 801bcdc:	b508      	push	{r3, lr}
 801bcde:	f7ff fff5 	bl	801bccc <_ZSt13get_terminatev>
 801bce2:	f7ff ffee 	bl	801bcc2 <_ZN10__cxxabiv111__terminateEPFvvE>

0801bce6 <abort>:
 801bce6:	b508      	push	{r3, lr}
 801bce8:	2006      	movs	r0, #6
 801bcea:	f000 fa39 	bl	801c160 <raise>
 801bcee:	2001      	movs	r0, #1
 801bcf0:	f7e5 f9e0 	bl	80010b4 <_exit>

0801bcf4 <__assert_func>:
 801bcf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bcf6:	4614      	mov	r4, r2
 801bcf8:	461a      	mov	r2, r3
 801bcfa:	4b09      	ldr	r3, [pc, #36]	; (801bd20 <__assert_func+0x2c>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	4605      	mov	r5, r0
 801bd00:	68d8      	ldr	r0, [r3, #12]
 801bd02:	b14c      	cbz	r4, 801bd18 <__assert_func+0x24>
 801bd04:	4b07      	ldr	r3, [pc, #28]	; (801bd24 <__assert_func+0x30>)
 801bd06:	9100      	str	r1, [sp, #0]
 801bd08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bd0c:	4906      	ldr	r1, [pc, #24]	; (801bd28 <__assert_func+0x34>)
 801bd0e:	462b      	mov	r3, r5
 801bd10:	f000 f982 	bl	801c018 <fiprintf>
 801bd14:	f7ff ffe7 	bl	801bce6 <abort>
 801bd18:	4b04      	ldr	r3, [pc, #16]	; (801bd2c <__assert_func+0x38>)
 801bd1a:	461c      	mov	r4, r3
 801bd1c:	e7f3      	b.n	801bd06 <__assert_func+0x12>
 801bd1e:	bf00      	nop
 801bd20:	240000d8 	.word	0x240000d8
 801bd24:	0801e884 	.word	0x0801e884
 801bd28:	0801e891 	.word	0x0801e891
 801bd2c:	0801e8bf 	.word	0x0801e8bf

0801bd30 <atexit>:
 801bd30:	2300      	movs	r3, #0
 801bd32:	4601      	mov	r1, r0
 801bd34:	461a      	mov	r2, r3
 801bd36:	4618      	mov	r0, r3
 801bd38:	f000 bb16 	b.w	801c368 <__register_exitproc>

0801bd3c <malloc>:
 801bd3c:	4b02      	ldr	r3, [pc, #8]	; (801bd48 <malloc+0xc>)
 801bd3e:	4601      	mov	r1, r0
 801bd40:	6818      	ldr	r0, [r3, #0]
 801bd42:	f000 b82b 	b.w	801bd9c <_malloc_r>
 801bd46:	bf00      	nop
 801bd48:	240000d8 	.word	0x240000d8

0801bd4c <free>:
 801bd4c:	4b02      	ldr	r3, [pc, #8]	; (801bd58 <free+0xc>)
 801bd4e:	4601      	mov	r1, r0
 801bd50:	6818      	ldr	r0, [r3, #0]
 801bd52:	f000 bb67 	b.w	801c424 <_free_r>
 801bd56:	bf00      	nop
 801bd58:	240000d8 	.word	0x240000d8

0801bd5c <sbrk_aligned>:
 801bd5c:	b570      	push	{r4, r5, r6, lr}
 801bd5e:	4e0e      	ldr	r6, [pc, #56]	; (801bd98 <sbrk_aligned+0x3c>)
 801bd60:	460c      	mov	r4, r1
 801bd62:	6831      	ldr	r1, [r6, #0]
 801bd64:	4605      	mov	r5, r0
 801bd66:	b911      	cbnz	r1, 801bd6e <sbrk_aligned+0x12>
 801bd68:	f000 faa0 	bl	801c2ac <_sbrk_r>
 801bd6c:	6030      	str	r0, [r6, #0]
 801bd6e:	4621      	mov	r1, r4
 801bd70:	4628      	mov	r0, r5
 801bd72:	f000 fa9b 	bl	801c2ac <_sbrk_r>
 801bd76:	1c43      	adds	r3, r0, #1
 801bd78:	d00a      	beq.n	801bd90 <sbrk_aligned+0x34>
 801bd7a:	1cc4      	adds	r4, r0, #3
 801bd7c:	f024 0403 	bic.w	r4, r4, #3
 801bd80:	42a0      	cmp	r0, r4
 801bd82:	d007      	beq.n	801bd94 <sbrk_aligned+0x38>
 801bd84:	1a21      	subs	r1, r4, r0
 801bd86:	4628      	mov	r0, r5
 801bd88:	f000 fa90 	bl	801c2ac <_sbrk_r>
 801bd8c:	3001      	adds	r0, #1
 801bd8e:	d101      	bne.n	801bd94 <sbrk_aligned+0x38>
 801bd90:	f04f 34ff 	mov.w	r4, #4294967295
 801bd94:	4620      	mov	r0, r4
 801bd96:	bd70      	pop	{r4, r5, r6, pc}
 801bd98:	2401b2e8 	.word	0x2401b2e8

0801bd9c <_malloc_r>:
 801bd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bda0:	1ccd      	adds	r5, r1, #3
 801bda2:	f025 0503 	bic.w	r5, r5, #3
 801bda6:	3508      	adds	r5, #8
 801bda8:	2d0c      	cmp	r5, #12
 801bdaa:	bf38      	it	cc
 801bdac:	250c      	movcc	r5, #12
 801bdae:	2d00      	cmp	r5, #0
 801bdb0:	4607      	mov	r7, r0
 801bdb2:	db01      	blt.n	801bdb8 <_malloc_r+0x1c>
 801bdb4:	42a9      	cmp	r1, r5
 801bdb6:	d905      	bls.n	801bdc4 <_malloc_r+0x28>
 801bdb8:	230c      	movs	r3, #12
 801bdba:	603b      	str	r3, [r7, #0]
 801bdbc:	2600      	movs	r6, #0
 801bdbe:	4630      	mov	r0, r6
 801bdc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bdc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801be98 <_malloc_r+0xfc>
 801bdc8:	f000 f868 	bl	801be9c <__malloc_lock>
 801bdcc:	f8d8 3000 	ldr.w	r3, [r8]
 801bdd0:	461c      	mov	r4, r3
 801bdd2:	bb5c      	cbnz	r4, 801be2c <_malloc_r+0x90>
 801bdd4:	4629      	mov	r1, r5
 801bdd6:	4638      	mov	r0, r7
 801bdd8:	f7ff ffc0 	bl	801bd5c <sbrk_aligned>
 801bddc:	1c43      	adds	r3, r0, #1
 801bdde:	4604      	mov	r4, r0
 801bde0:	d155      	bne.n	801be8e <_malloc_r+0xf2>
 801bde2:	f8d8 4000 	ldr.w	r4, [r8]
 801bde6:	4626      	mov	r6, r4
 801bde8:	2e00      	cmp	r6, #0
 801bdea:	d145      	bne.n	801be78 <_malloc_r+0xdc>
 801bdec:	2c00      	cmp	r4, #0
 801bdee:	d048      	beq.n	801be82 <_malloc_r+0xe6>
 801bdf0:	6823      	ldr	r3, [r4, #0]
 801bdf2:	4631      	mov	r1, r6
 801bdf4:	4638      	mov	r0, r7
 801bdf6:	eb04 0903 	add.w	r9, r4, r3
 801bdfa:	f000 fa57 	bl	801c2ac <_sbrk_r>
 801bdfe:	4581      	cmp	r9, r0
 801be00:	d13f      	bne.n	801be82 <_malloc_r+0xe6>
 801be02:	6821      	ldr	r1, [r4, #0]
 801be04:	1a6d      	subs	r5, r5, r1
 801be06:	4629      	mov	r1, r5
 801be08:	4638      	mov	r0, r7
 801be0a:	f7ff ffa7 	bl	801bd5c <sbrk_aligned>
 801be0e:	3001      	adds	r0, #1
 801be10:	d037      	beq.n	801be82 <_malloc_r+0xe6>
 801be12:	6823      	ldr	r3, [r4, #0]
 801be14:	442b      	add	r3, r5
 801be16:	6023      	str	r3, [r4, #0]
 801be18:	f8d8 3000 	ldr.w	r3, [r8]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d038      	beq.n	801be92 <_malloc_r+0xf6>
 801be20:	685a      	ldr	r2, [r3, #4]
 801be22:	42a2      	cmp	r2, r4
 801be24:	d12b      	bne.n	801be7e <_malloc_r+0xe2>
 801be26:	2200      	movs	r2, #0
 801be28:	605a      	str	r2, [r3, #4]
 801be2a:	e00f      	b.n	801be4c <_malloc_r+0xb0>
 801be2c:	6822      	ldr	r2, [r4, #0]
 801be2e:	1b52      	subs	r2, r2, r5
 801be30:	d41f      	bmi.n	801be72 <_malloc_r+0xd6>
 801be32:	2a0b      	cmp	r2, #11
 801be34:	d917      	bls.n	801be66 <_malloc_r+0xca>
 801be36:	1961      	adds	r1, r4, r5
 801be38:	42a3      	cmp	r3, r4
 801be3a:	6025      	str	r5, [r4, #0]
 801be3c:	bf18      	it	ne
 801be3e:	6059      	strne	r1, [r3, #4]
 801be40:	6863      	ldr	r3, [r4, #4]
 801be42:	bf08      	it	eq
 801be44:	f8c8 1000 	streq.w	r1, [r8]
 801be48:	5162      	str	r2, [r4, r5]
 801be4a:	604b      	str	r3, [r1, #4]
 801be4c:	4638      	mov	r0, r7
 801be4e:	f104 060b 	add.w	r6, r4, #11
 801be52:	f000 f829 	bl	801bea8 <__malloc_unlock>
 801be56:	f026 0607 	bic.w	r6, r6, #7
 801be5a:	1d23      	adds	r3, r4, #4
 801be5c:	1af2      	subs	r2, r6, r3
 801be5e:	d0ae      	beq.n	801bdbe <_malloc_r+0x22>
 801be60:	1b9b      	subs	r3, r3, r6
 801be62:	50a3      	str	r3, [r4, r2]
 801be64:	e7ab      	b.n	801bdbe <_malloc_r+0x22>
 801be66:	42a3      	cmp	r3, r4
 801be68:	6862      	ldr	r2, [r4, #4]
 801be6a:	d1dd      	bne.n	801be28 <_malloc_r+0x8c>
 801be6c:	f8c8 2000 	str.w	r2, [r8]
 801be70:	e7ec      	b.n	801be4c <_malloc_r+0xb0>
 801be72:	4623      	mov	r3, r4
 801be74:	6864      	ldr	r4, [r4, #4]
 801be76:	e7ac      	b.n	801bdd2 <_malloc_r+0x36>
 801be78:	4634      	mov	r4, r6
 801be7a:	6876      	ldr	r6, [r6, #4]
 801be7c:	e7b4      	b.n	801bde8 <_malloc_r+0x4c>
 801be7e:	4613      	mov	r3, r2
 801be80:	e7cc      	b.n	801be1c <_malloc_r+0x80>
 801be82:	230c      	movs	r3, #12
 801be84:	603b      	str	r3, [r7, #0]
 801be86:	4638      	mov	r0, r7
 801be88:	f000 f80e 	bl	801bea8 <__malloc_unlock>
 801be8c:	e797      	b.n	801bdbe <_malloc_r+0x22>
 801be8e:	6025      	str	r5, [r4, #0]
 801be90:	e7dc      	b.n	801be4c <_malloc_r+0xb0>
 801be92:	605b      	str	r3, [r3, #4]
 801be94:	deff      	udf	#255	; 0xff
 801be96:	bf00      	nop
 801be98:	2401b2e4 	.word	0x2401b2e4

0801be9c <__malloc_lock>:
 801be9c:	4801      	ldr	r0, [pc, #4]	; (801bea4 <__malloc_lock+0x8>)
 801be9e:	f000 ba52 	b.w	801c346 <__retarget_lock_acquire_recursive>
 801bea2:	bf00      	nop
 801bea4:	2401b42d 	.word	0x2401b42d

0801bea8 <__malloc_unlock>:
 801bea8:	4801      	ldr	r0, [pc, #4]	; (801beb0 <__malloc_unlock+0x8>)
 801beaa:	f000 ba4d 	b.w	801c348 <__retarget_lock_release_recursive>
 801beae:	bf00      	nop
 801beb0:	2401b42d 	.word	0x2401b42d

0801beb4 <__cxa_atexit>:
 801beb4:	b510      	push	{r4, lr}
 801beb6:	4c05      	ldr	r4, [pc, #20]	; (801becc <__cxa_atexit+0x18>)
 801beb8:	4613      	mov	r3, r2
 801beba:	b12c      	cbz	r4, 801bec8 <__cxa_atexit+0x14>
 801bebc:	460a      	mov	r2, r1
 801bebe:	4601      	mov	r1, r0
 801bec0:	2002      	movs	r0, #2
 801bec2:	f000 fa51 	bl	801c368 <__register_exitproc>
 801bec6:	bd10      	pop	{r4, pc}
 801bec8:	4620      	mov	r0, r4
 801beca:	e7fc      	b.n	801bec6 <__cxa_atexit+0x12>
 801becc:	0801c369 	.word	0x0801c369

0801bed0 <std>:
 801bed0:	2300      	movs	r3, #0
 801bed2:	b510      	push	{r4, lr}
 801bed4:	4604      	mov	r4, r0
 801bed6:	e9c0 3300 	strd	r3, r3, [r0]
 801beda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bede:	6083      	str	r3, [r0, #8]
 801bee0:	8181      	strh	r1, [r0, #12]
 801bee2:	6643      	str	r3, [r0, #100]	; 0x64
 801bee4:	81c2      	strh	r2, [r0, #14]
 801bee6:	6183      	str	r3, [r0, #24]
 801bee8:	4619      	mov	r1, r3
 801beea:	2208      	movs	r2, #8
 801beec:	305c      	adds	r0, #92	; 0x5c
 801beee:	f000 f906 	bl	801c0fe <memset>
 801bef2:	4b0d      	ldr	r3, [pc, #52]	; (801bf28 <std+0x58>)
 801bef4:	6263      	str	r3, [r4, #36]	; 0x24
 801bef6:	4b0d      	ldr	r3, [pc, #52]	; (801bf2c <std+0x5c>)
 801bef8:	62a3      	str	r3, [r4, #40]	; 0x28
 801befa:	4b0d      	ldr	r3, [pc, #52]	; (801bf30 <std+0x60>)
 801befc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801befe:	4b0d      	ldr	r3, [pc, #52]	; (801bf34 <std+0x64>)
 801bf00:	6323      	str	r3, [r4, #48]	; 0x30
 801bf02:	4b0d      	ldr	r3, [pc, #52]	; (801bf38 <std+0x68>)
 801bf04:	6224      	str	r4, [r4, #32]
 801bf06:	429c      	cmp	r4, r3
 801bf08:	d006      	beq.n	801bf18 <std+0x48>
 801bf0a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bf0e:	4294      	cmp	r4, r2
 801bf10:	d002      	beq.n	801bf18 <std+0x48>
 801bf12:	33d0      	adds	r3, #208	; 0xd0
 801bf14:	429c      	cmp	r4, r3
 801bf16:	d105      	bne.n	801bf24 <std+0x54>
 801bf18:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bf1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf20:	f000 ba10 	b.w	801c344 <__retarget_lock_init_recursive>
 801bf24:	bd10      	pop	{r4, pc}
 801bf26:	bf00      	nop
 801bf28:	0801c079 	.word	0x0801c079
 801bf2c:	0801c09b 	.word	0x0801c09b
 801bf30:	0801c0d3 	.word	0x0801c0d3
 801bf34:	0801c0f7 	.word	0x0801c0f7
 801bf38:	2401b2ec 	.word	0x2401b2ec

0801bf3c <stdio_exit_handler>:
 801bf3c:	4a02      	ldr	r2, [pc, #8]	; (801bf48 <stdio_exit_handler+0xc>)
 801bf3e:	4903      	ldr	r1, [pc, #12]	; (801bf4c <stdio_exit_handler+0x10>)
 801bf40:	4803      	ldr	r0, [pc, #12]	; (801bf50 <stdio_exit_handler+0x14>)
 801bf42:	f000 b87b 	b.w	801c03c <_fwalk_sglue>
 801bf46:	bf00      	nop
 801bf48:	24000080 	.word	0x24000080
 801bf4c:	0801cb71 	.word	0x0801cb71
 801bf50:	2400008c 	.word	0x2400008c

0801bf54 <cleanup_stdio>:
 801bf54:	6841      	ldr	r1, [r0, #4]
 801bf56:	4b0c      	ldr	r3, [pc, #48]	; (801bf88 <cleanup_stdio+0x34>)
 801bf58:	4299      	cmp	r1, r3
 801bf5a:	b510      	push	{r4, lr}
 801bf5c:	4604      	mov	r4, r0
 801bf5e:	d001      	beq.n	801bf64 <cleanup_stdio+0x10>
 801bf60:	f000 fe06 	bl	801cb70 <_fflush_r>
 801bf64:	68a1      	ldr	r1, [r4, #8]
 801bf66:	4b09      	ldr	r3, [pc, #36]	; (801bf8c <cleanup_stdio+0x38>)
 801bf68:	4299      	cmp	r1, r3
 801bf6a:	d002      	beq.n	801bf72 <cleanup_stdio+0x1e>
 801bf6c:	4620      	mov	r0, r4
 801bf6e:	f000 fdff 	bl	801cb70 <_fflush_r>
 801bf72:	68e1      	ldr	r1, [r4, #12]
 801bf74:	4b06      	ldr	r3, [pc, #24]	; (801bf90 <cleanup_stdio+0x3c>)
 801bf76:	4299      	cmp	r1, r3
 801bf78:	d004      	beq.n	801bf84 <cleanup_stdio+0x30>
 801bf7a:	4620      	mov	r0, r4
 801bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf80:	f000 bdf6 	b.w	801cb70 <_fflush_r>
 801bf84:	bd10      	pop	{r4, pc}
 801bf86:	bf00      	nop
 801bf88:	2401b2ec 	.word	0x2401b2ec
 801bf8c:	2401b354 	.word	0x2401b354
 801bf90:	2401b3bc 	.word	0x2401b3bc

0801bf94 <global_stdio_init.part.0>:
 801bf94:	b510      	push	{r4, lr}
 801bf96:	4b0b      	ldr	r3, [pc, #44]	; (801bfc4 <global_stdio_init.part.0+0x30>)
 801bf98:	4c0b      	ldr	r4, [pc, #44]	; (801bfc8 <global_stdio_init.part.0+0x34>)
 801bf9a:	4a0c      	ldr	r2, [pc, #48]	; (801bfcc <global_stdio_init.part.0+0x38>)
 801bf9c:	601a      	str	r2, [r3, #0]
 801bf9e:	4620      	mov	r0, r4
 801bfa0:	2200      	movs	r2, #0
 801bfa2:	2104      	movs	r1, #4
 801bfa4:	f7ff ff94 	bl	801bed0 <std>
 801bfa8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801bfac:	2201      	movs	r2, #1
 801bfae:	2109      	movs	r1, #9
 801bfb0:	f7ff ff8e 	bl	801bed0 <std>
 801bfb4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801bfb8:	2202      	movs	r2, #2
 801bfba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bfbe:	2112      	movs	r1, #18
 801bfc0:	f7ff bf86 	b.w	801bed0 <std>
 801bfc4:	2401b424 	.word	0x2401b424
 801bfc8:	2401b2ec 	.word	0x2401b2ec
 801bfcc:	0801bf3d 	.word	0x0801bf3d

0801bfd0 <__sfp_lock_acquire>:
 801bfd0:	4801      	ldr	r0, [pc, #4]	; (801bfd8 <__sfp_lock_acquire+0x8>)
 801bfd2:	f000 b9b8 	b.w	801c346 <__retarget_lock_acquire_recursive>
 801bfd6:	bf00      	nop
 801bfd8:	2401b42e 	.word	0x2401b42e

0801bfdc <__sfp_lock_release>:
 801bfdc:	4801      	ldr	r0, [pc, #4]	; (801bfe4 <__sfp_lock_release+0x8>)
 801bfde:	f000 b9b3 	b.w	801c348 <__retarget_lock_release_recursive>
 801bfe2:	bf00      	nop
 801bfe4:	2401b42e 	.word	0x2401b42e

0801bfe8 <__sinit>:
 801bfe8:	b510      	push	{r4, lr}
 801bfea:	4604      	mov	r4, r0
 801bfec:	f7ff fff0 	bl	801bfd0 <__sfp_lock_acquire>
 801bff0:	6a23      	ldr	r3, [r4, #32]
 801bff2:	b11b      	cbz	r3, 801bffc <__sinit+0x14>
 801bff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bff8:	f7ff bff0 	b.w	801bfdc <__sfp_lock_release>
 801bffc:	4b04      	ldr	r3, [pc, #16]	; (801c010 <__sinit+0x28>)
 801bffe:	6223      	str	r3, [r4, #32]
 801c000:	4b04      	ldr	r3, [pc, #16]	; (801c014 <__sinit+0x2c>)
 801c002:	681b      	ldr	r3, [r3, #0]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d1f5      	bne.n	801bff4 <__sinit+0xc>
 801c008:	f7ff ffc4 	bl	801bf94 <global_stdio_init.part.0>
 801c00c:	e7f2      	b.n	801bff4 <__sinit+0xc>
 801c00e:	bf00      	nop
 801c010:	0801bf55 	.word	0x0801bf55
 801c014:	2401b424 	.word	0x2401b424

0801c018 <fiprintf>:
 801c018:	b40e      	push	{r1, r2, r3}
 801c01a:	b503      	push	{r0, r1, lr}
 801c01c:	4601      	mov	r1, r0
 801c01e:	ab03      	add	r3, sp, #12
 801c020:	4805      	ldr	r0, [pc, #20]	; (801c038 <fiprintf+0x20>)
 801c022:	f853 2b04 	ldr.w	r2, [r3], #4
 801c026:	6800      	ldr	r0, [r0, #0]
 801c028:	9301      	str	r3, [sp, #4]
 801c02a:	f000 fa71 	bl	801c510 <_vfiprintf_r>
 801c02e:	b002      	add	sp, #8
 801c030:	f85d eb04 	ldr.w	lr, [sp], #4
 801c034:	b003      	add	sp, #12
 801c036:	4770      	bx	lr
 801c038:	240000d8 	.word	0x240000d8

0801c03c <_fwalk_sglue>:
 801c03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c040:	4607      	mov	r7, r0
 801c042:	4688      	mov	r8, r1
 801c044:	4614      	mov	r4, r2
 801c046:	2600      	movs	r6, #0
 801c048:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c04c:	f1b9 0901 	subs.w	r9, r9, #1
 801c050:	d505      	bpl.n	801c05e <_fwalk_sglue+0x22>
 801c052:	6824      	ldr	r4, [r4, #0]
 801c054:	2c00      	cmp	r4, #0
 801c056:	d1f7      	bne.n	801c048 <_fwalk_sglue+0xc>
 801c058:	4630      	mov	r0, r6
 801c05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c05e:	89ab      	ldrh	r3, [r5, #12]
 801c060:	2b01      	cmp	r3, #1
 801c062:	d907      	bls.n	801c074 <_fwalk_sglue+0x38>
 801c064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c068:	3301      	adds	r3, #1
 801c06a:	d003      	beq.n	801c074 <_fwalk_sglue+0x38>
 801c06c:	4629      	mov	r1, r5
 801c06e:	4638      	mov	r0, r7
 801c070:	47c0      	blx	r8
 801c072:	4306      	orrs	r6, r0
 801c074:	3568      	adds	r5, #104	; 0x68
 801c076:	e7e9      	b.n	801c04c <_fwalk_sglue+0x10>

0801c078 <__sread>:
 801c078:	b510      	push	{r4, lr}
 801c07a:	460c      	mov	r4, r1
 801c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c080:	f000 f8ee 	bl	801c260 <_read_r>
 801c084:	2800      	cmp	r0, #0
 801c086:	bfab      	itete	ge
 801c088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c08a:	89a3      	ldrhlt	r3, [r4, #12]
 801c08c:	181b      	addge	r3, r3, r0
 801c08e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c092:	bfac      	ite	ge
 801c094:	6563      	strge	r3, [r4, #84]	; 0x54
 801c096:	81a3      	strhlt	r3, [r4, #12]
 801c098:	bd10      	pop	{r4, pc}

0801c09a <__swrite>:
 801c09a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c09e:	461f      	mov	r7, r3
 801c0a0:	898b      	ldrh	r3, [r1, #12]
 801c0a2:	05db      	lsls	r3, r3, #23
 801c0a4:	4605      	mov	r5, r0
 801c0a6:	460c      	mov	r4, r1
 801c0a8:	4616      	mov	r6, r2
 801c0aa:	d505      	bpl.n	801c0b8 <__swrite+0x1e>
 801c0ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0b0:	2302      	movs	r3, #2
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	f000 f8c2 	bl	801c23c <_lseek_r>
 801c0b8:	89a3      	ldrh	r3, [r4, #12]
 801c0ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c0be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c0c2:	81a3      	strh	r3, [r4, #12]
 801c0c4:	4632      	mov	r2, r6
 801c0c6:	463b      	mov	r3, r7
 801c0c8:	4628      	mov	r0, r5
 801c0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c0ce:	f000 b8fd 	b.w	801c2cc <_write_r>

0801c0d2 <__sseek>:
 801c0d2:	b510      	push	{r4, lr}
 801c0d4:	460c      	mov	r4, r1
 801c0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0da:	f000 f8af 	bl	801c23c <_lseek_r>
 801c0de:	1c43      	adds	r3, r0, #1
 801c0e0:	89a3      	ldrh	r3, [r4, #12]
 801c0e2:	bf15      	itete	ne
 801c0e4:	6560      	strne	r0, [r4, #84]	; 0x54
 801c0e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c0ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c0ee:	81a3      	strheq	r3, [r4, #12]
 801c0f0:	bf18      	it	ne
 801c0f2:	81a3      	strhne	r3, [r4, #12]
 801c0f4:	bd10      	pop	{r4, pc}

0801c0f6 <__sclose>:
 801c0f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c0fa:	f000 b839 	b.w	801c170 <_close_r>

0801c0fe <memset>:
 801c0fe:	4402      	add	r2, r0
 801c100:	4603      	mov	r3, r0
 801c102:	4293      	cmp	r3, r2
 801c104:	d100      	bne.n	801c108 <memset+0xa>
 801c106:	4770      	bx	lr
 801c108:	f803 1b01 	strb.w	r1, [r3], #1
 801c10c:	e7f9      	b.n	801c102 <memset+0x4>

0801c10e <_raise_r>:
 801c10e:	291f      	cmp	r1, #31
 801c110:	b538      	push	{r3, r4, r5, lr}
 801c112:	4604      	mov	r4, r0
 801c114:	460d      	mov	r5, r1
 801c116:	d904      	bls.n	801c122 <_raise_r+0x14>
 801c118:	2316      	movs	r3, #22
 801c11a:	6003      	str	r3, [r0, #0]
 801c11c:	f04f 30ff 	mov.w	r0, #4294967295
 801c120:	bd38      	pop	{r3, r4, r5, pc}
 801c122:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c124:	b112      	cbz	r2, 801c12c <_raise_r+0x1e>
 801c126:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c12a:	b94b      	cbnz	r3, 801c140 <_raise_r+0x32>
 801c12c:	4620      	mov	r0, r4
 801c12e:	f000 f8bb 	bl	801c2a8 <_getpid_r>
 801c132:	462a      	mov	r2, r5
 801c134:	4601      	mov	r1, r0
 801c136:	4620      	mov	r0, r4
 801c138:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c13c:	f000 b8a2 	b.w	801c284 <_kill_r>
 801c140:	2b01      	cmp	r3, #1
 801c142:	d00a      	beq.n	801c15a <_raise_r+0x4c>
 801c144:	1c59      	adds	r1, r3, #1
 801c146:	d103      	bne.n	801c150 <_raise_r+0x42>
 801c148:	2316      	movs	r3, #22
 801c14a:	6003      	str	r3, [r0, #0]
 801c14c:	2001      	movs	r0, #1
 801c14e:	e7e7      	b.n	801c120 <_raise_r+0x12>
 801c150:	2400      	movs	r4, #0
 801c152:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c156:	4628      	mov	r0, r5
 801c158:	4798      	blx	r3
 801c15a:	2000      	movs	r0, #0
 801c15c:	e7e0      	b.n	801c120 <_raise_r+0x12>
	...

0801c160 <raise>:
 801c160:	4b02      	ldr	r3, [pc, #8]	; (801c16c <raise+0xc>)
 801c162:	4601      	mov	r1, r0
 801c164:	6818      	ldr	r0, [r3, #0]
 801c166:	f7ff bfd2 	b.w	801c10e <_raise_r>
 801c16a:	bf00      	nop
 801c16c:	240000d8 	.word	0x240000d8

0801c170 <_close_r>:
 801c170:	b538      	push	{r3, r4, r5, lr}
 801c172:	4d06      	ldr	r5, [pc, #24]	; (801c18c <_close_r+0x1c>)
 801c174:	2300      	movs	r3, #0
 801c176:	4604      	mov	r4, r0
 801c178:	4608      	mov	r0, r1
 801c17a:	602b      	str	r3, [r5, #0]
 801c17c:	f7e4 ffdd 	bl	800113a <_close>
 801c180:	1c43      	adds	r3, r0, #1
 801c182:	d102      	bne.n	801c18a <_close_r+0x1a>
 801c184:	682b      	ldr	r3, [r5, #0]
 801c186:	b103      	cbz	r3, 801c18a <_close_r+0x1a>
 801c188:	6023      	str	r3, [r4, #0]
 801c18a:	bd38      	pop	{r3, r4, r5, pc}
 801c18c:	2401b428 	.word	0x2401b428

0801c190 <_reclaim_reent>:
 801c190:	4b29      	ldr	r3, [pc, #164]	; (801c238 <_reclaim_reent+0xa8>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	4283      	cmp	r3, r0
 801c196:	b570      	push	{r4, r5, r6, lr}
 801c198:	4604      	mov	r4, r0
 801c19a:	d04b      	beq.n	801c234 <_reclaim_reent+0xa4>
 801c19c:	69c3      	ldr	r3, [r0, #28]
 801c19e:	b143      	cbz	r3, 801c1b2 <_reclaim_reent+0x22>
 801c1a0:	68db      	ldr	r3, [r3, #12]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d144      	bne.n	801c230 <_reclaim_reent+0xa0>
 801c1a6:	69e3      	ldr	r3, [r4, #28]
 801c1a8:	6819      	ldr	r1, [r3, #0]
 801c1aa:	b111      	cbz	r1, 801c1b2 <_reclaim_reent+0x22>
 801c1ac:	4620      	mov	r0, r4
 801c1ae:	f000 f939 	bl	801c424 <_free_r>
 801c1b2:	6961      	ldr	r1, [r4, #20]
 801c1b4:	b111      	cbz	r1, 801c1bc <_reclaim_reent+0x2c>
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	f000 f934 	bl	801c424 <_free_r>
 801c1bc:	69e1      	ldr	r1, [r4, #28]
 801c1be:	b111      	cbz	r1, 801c1c6 <_reclaim_reent+0x36>
 801c1c0:	4620      	mov	r0, r4
 801c1c2:	f000 f92f 	bl	801c424 <_free_r>
 801c1c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c1c8:	b111      	cbz	r1, 801c1d0 <_reclaim_reent+0x40>
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	f000 f92a 	bl	801c424 <_free_r>
 801c1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c1d2:	b111      	cbz	r1, 801c1da <_reclaim_reent+0x4a>
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	f000 f925 	bl	801c424 <_free_r>
 801c1da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c1dc:	b111      	cbz	r1, 801c1e4 <_reclaim_reent+0x54>
 801c1de:	4620      	mov	r0, r4
 801c1e0:	f000 f920 	bl	801c424 <_free_r>
 801c1e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c1e6:	b111      	cbz	r1, 801c1ee <_reclaim_reent+0x5e>
 801c1e8:	4620      	mov	r0, r4
 801c1ea:	f000 f91b 	bl	801c424 <_free_r>
 801c1ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c1f0:	b111      	cbz	r1, 801c1f8 <_reclaim_reent+0x68>
 801c1f2:	4620      	mov	r0, r4
 801c1f4:	f000 f916 	bl	801c424 <_free_r>
 801c1f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c1fa:	b111      	cbz	r1, 801c202 <_reclaim_reent+0x72>
 801c1fc:	4620      	mov	r0, r4
 801c1fe:	f000 f911 	bl	801c424 <_free_r>
 801c202:	6a23      	ldr	r3, [r4, #32]
 801c204:	b1b3      	cbz	r3, 801c234 <_reclaim_reent+0xa4>
 801c206:	4620      	mov	r0, r4
 801c208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c20c:	4718      	bx	r3
 801c20e:	5949      	ldr	r1, [r1, r5]
 801c210:	b941      	cbnz	r1, 801c224 <_reclaim_reent+0x94>
 801c212:	3504      	adds	r5, #4
 801c214:	69e3      	ldr	r3, [r4, #28]
 801c216:	2d80      	cmp	r5, #128	; 0x80
 801c218:	68d9      	ldr	r1, [r3, #12]
 801c21a:	d1f8      	bne.n	801c20e <_reclaim_reent+0x7e>
 801c21c:	4620      	mov	r0, r4
 801c21e:	f000 f901 	bl	801c424 <_free_r>
 801c222:	e7c0      	b.n	801c1a6 <_reclaim_reent+0x16>
 801c224:	680e      	ldr	r6, [r1, #0]
 801c226:	4620      	mov	r0, r4
 801c228:	f000 f8fc 	bl	801c424 <_free_r>
 801c22c:	4631      	mov	r1, r6
 801c22e:	e7ef      	b.n	801c210 <_reclaim_reent+0x80>
 801c230:	2500      	movs	r5, #0
 801c232:	e7ef      	b.n	801c214 <_reclaim_reent+0x84>
 801c234:	bd70      	pop	{r4, r5, r6, pc}
 801c236:	bf00      	nop
 801c238:	240000d8 	.word	0x240000d8

0801c23c <_lseek_r>:
 801c23c:	b538      	push	{r3, r4, r5, lr}
 801c23e:	4d07      	ldr	r5, [pc, #28]	; (801c25c <_lseek_r+0x20>)
 801c240:	4604      	mov	r4, r0
 801c242:	4608      	mov	r0, r1
 801c244:	4611      	mov	r1, r2
 801c246:	2200      	movs	r2, #0
 801c248:	602a      	str	r2, [r5, #0]
 801c24a:	461a      	mov	r2, r3
 801c24c:	f7e4 ff9c 	bl	8001188 <_lseek>
 801c250:	1c43      	adds	r3, r0, #1
 801c252:	d102      	bne.n	801c25a <_lseek_r+0x1e>
 801c254:	682b      	ldr	r3, [r5, #0]
 801c256:	b103      	cbz	r3, 801c25a <_lseek_r+0x1e>
 801c258:	6023      	str	r3, [r4, #0]
 801c25a:	bd38      	pop	{r3, r4, r5, pc}
 801c25c:	2401b428 	.word	0x2401b428

0801c260 <_read_r>:
 801c260:	b538      	push	{r3, r4, r5, lr}
 801c262:	4d07      	ldr	r5, [pc, #28]	; (801c280 <_read_r+0x20>)
 801c264:	4604      	mov	r4, r0
 801c266:	4608      	mov	r0, r1
 801c268:	4611      	mov	r1, r2
 801c26a:	2200      	movs	r2, #0
 801c26c:	602a      	str	r2, [r5, #0]
 801c26e:	461a      	mov	r2, r3
 801c270:	f7e4 ff2a 	bl	80010c8 <_read>
 801c274:	1c43      	adds	r3, r0, #1
 801c276:	d102      	bne.n	801c27e <_read_r+0x1e>
 801c278:	682b      	ldr	r3, [r5, #0]
 801c27a:	b103      	cbz	r3, 801c27e <_read_r+0x1e>
 801c27c:	6023      	str	r3, [r4, #0]
 801c27e:	bd38      	pop	{r3, r4, r5, pc}
 801c280:	2401b428 	.word	0x2401b428

0801c284 <_kill_r>:
 801c284:	b538      	push	{r3, r4, r5, lr}
 801c286:	4d07      	ldr	r5, [pc, #28]	; (801c2a4 <_kill_r+0x20>)
 801c288:	2300      	movs	r3, #0
 801c28a:	4604      	mov	r4, r0
 801c28c:	4608      	mov	r0, r1
 801c28e:	4611      	mov	r1, r2
 801c290:	602b      	str	r3, [r5, #0]
 801c292:	f7e4 feff 	bl	8001094 <_kill>
 801c296:	1c43      	adds	r3, r0, #1
 801c298:	d102      	bne.n	801c2a0 <_kill_r+0x1c>
 801c29a:	682b      	ldr	r3, [r5, #0]
 801c29c:	b103      	cbz	r3, 801c2a0 <_kill_r+0x1c>
 801c29e:	6023      	str	r3, [r4, #0]
 801c2a0:	bd38      	pop	{r3, r4, r5, pc}
 801c2a2:	bf00      	nop
 801c2a4:	2401b428 	.word	0x2401b428

0801c2a8 <_getpid_r>:
 801c2a8:	f7e4 beec 	b.w	8001084 <_getpid>

0801c2ac <_sbrk_r>:
 801c2ac:	b538      	push	{r3, r4, r5, lr}
 801c2ae:	4d06      	ldr	r5, [pc, #24]	; (801c2c8 <_sbrk_r+0x1c>)
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	4604      	mov	r4, r0
 801c2b4:	4608      	mov	r0, r1
 801c2b6:	602b      	str	r3, [r5, #0]
 801c2b8:	f7e4 ff74 	bl	80011a4 <_sbrk>
 801c2bc:	1c43      	adds	r3, r0, #1
 801c2be:	d102      	bne.n	801c2c6 <_sbrk_r+0x1a>
 801c2c0:	682b      	ldr	r3, [r5, #0]
 801c2c2:	b103      	cbz	r3, 801c2c6 <_sbrk_r+0x1a>
 801c2c4:	6023      	str	r3, [r4, #0]
 801c2c6:	bd38      	pop	{r3, r4, r5, pc}
 801c2c8:	2401b428 	.word	0x2401b428

0801c2cc <_write_r>:
 801c2cc:	b538      	push	{r3, r4, r5, lr}
 801c2ce:	4d07      	ldr	r5, [pc, #28]	; (801c2ec <_write_r+0x20>)
 801c2d0:	4604      	mov	r4, r0
 801c2d2:	4608      	mov	r0, r1
 801c2d4:	4611      	mov	r1, r2
 801c2d6:	2200      	movs	r2, #0
 801c2d8:	602a      	str	r2, [r5, #0]
 801c2da:	461a      	mov	r2, r3
 801c2dc:	f7e4 ff11 	bl	8001102 <_write>
 801c2e0:	1c43      	adds	r3, r0, #1
 801c2e2:	d102      	bne.n	801c2ea <_write_r+0x1e>
 801c2e4:	682b      	ldr	r3, [r5, #0]
 801c2e6:	b103      	cbz	r3, 801c2ea <_write_r+0x1e>
 801c2e8:	6023      	str	r3, [r4, #0]
 801c2ea:	bd38      	pop	{r3, r4, r5, pc}
 801c2ec:	2401b428 	.word	0x2401b428

0801c2f0 <__errno>:
 801c2f0:	4b01      	ldr	r3, [pc, #4]	; (801c2f8 <__errno+0x8>)
 801c2f2:	6818      	ldr	r0, [r3, #0]
 801c2f4:	4770      	bx	lr
 801c2f6:	bf00      	nop
 801c2f8:	240000d8 	.word	0x240000d8

0801c2fc <__libc_init_array>:
 801c2fc:	b570      	push	{r4, r5, r6, lr}
 801c2fe:	4d0d      	ldr	r5, [pc, #52]	; (801c334 <__libc_init_array+0x38>)
 801c300:	4c0d      	ldr	r4, [pc, #52]	; (801c338 <__libc_init_array+0x3c>)
 801c302:	1b64      	subs	r4, r4, r5
 801c304:	10a4      	asrs	r4, r4, #2
 801c306:	2600      	movs	r6, #0
 801c308:	42a6      	cmp	r6, r4
 801c30a:	d109      	bne.n	801c320 <__libc_init_array+0x24>
 801c30c:	4d0b      	ldr	r5, [pc, #44]	; (801c33c <__libc_init_array+0x40>)
 801c30e:	4c0c      	ldr	r4, [pc, #48]	; (801c340 <__libc_init_array+0x44>)
 801c310:	f000 fd70 	bl	801cdf4 <_init>
 801c314:	1b64      	subs	r4, r4, r5
 801c316:	10a4      	asrs	r4, r4, #2
 801c318:	2600      	movs	r6, #0
 801c31a:	42a6      	cmp	r6, r4
 801c31c:	d105      	bne.n	801c32a <__libc_init_array+0x2e>
 801c31e:	bd70      	pop	{r4, r5, r6, pc}
 801c320:	f855 3b04 	ldr.w	r3, [r5], #4
 801c324:	4798      	blx	r3
 801c326:	3601      	adds	r6, #1
 801c328:	e7ee      	b.n	801c308 <__libc_init_array+0xc>
 801c32a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c32e:	4798      	blx	r3
 801c330:	3601      	adds	r6, #1
 801c332:	e7f2      	b.n	801c31a <__libc_init_array+0x1e>
 801c334:	0807e4c8 	.word	0x0807e4c8
 801c338:	0807e4c8 	.word	0x0807e4c8
 801c33c:	0807e4c8 	.word	0x0807e4c8
 801c340:	0807e4dc 	.word	0x0807e4dc

0801c344 <__retarget_lock_init_recursive>:
 801c344:	4770      	bx	lr

0801c346 <__retarget_lock_acquire_recursive>:
 801c346:	4770      	bx	lr

0801c348 <__retarget_lock_release_recursive>:
 801c348:	4770      	bx	lr

0801c34a <memcpy>:
 801c34a:	440a      	add	r2, r1
 801c34c:	4291      	cmp	r1, r2
 801c34e:	f100 33ff 	add.w	r3, r0, #4294967295
 801c352:	d100      	bne.n	801c356 <memcpy+0xc>
 801c354:	4770      	bx	lr
 801c356:	b510      	push	{r4, lr}
 801c358:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c35c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c360:	4291      	cmp	r1, r2
 801c362:	d1f9      	bne.n	801c358 <memcpy+0xe>
 801c364:	bd10      	pop	{r4, pc}
	...

0801c368 <__register_exitproc>:
 801c368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c36c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801c420 <__register_exitproc+0xb8>
 801c370:	4606      	mov	r6, r0
 801c372:	f8d8 0000 	ldr.w	r0, [r8]
 801c376:	461f      	mov	r7, r3
 801c378:	460d      	mov	r5, r1
 801c37a:	4691      	mov	r9, r2
 801c37c:	f7ff ffe3 	bl	801c346 <__retarget_lock_acquire_recursive>
 801c380:	4b23      	ldr	r3, [pc, #140]	; (801c410 <__register_exitproc+0xa8>)
 801c382:	681c      	ldr	r4, [r3, #0]
 801c384:	b934      	cbnz	r4, 801c394 <__register_exitproc+0x2c>
 801c386:	4c23      	ldr	r4, [pc, #140]	; (801c414 <__register_exitproc+0xac>)
 801c388:	601c      	str	r4, [r3, #0]
 801c38a:	4b23      	ldr	r3, [pc, #140]	; (801c418 <__register_exitproc+0xb0>)
 801c38c:	b113      	cbz	r3, 801c394 <__register_exitproc+0x2c>
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801c394:	6863      	ldr	r3, [r4, #4]
 801c396:	2b1f      	cmp	r3, #31
 801c398:	dd07      	ble.n	801c3aa <__register_exitproc+0x42>
 801c39a:	f8d8 0000 	ldr.w	r0, [r8]
 801c39e:	f7ff ffd3 	bl	801c348 <__retarget_lock_release_recursive>
 801c3a2:	f04f 30ff 	mov.w	r0, #4294967295
 801c3a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c3aa:	b32e      	cbz	r6, 801c3f8 <__register_exitproc+0x90>
 801c3ac:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801c3b0:	b968      	cbnz	r0, 801c3ce <__register_exitproc+0x66>
 801c3b2:	4b1a      	ldr	r3, [pc, #104]	; (801c41c <__register_exitproc+0xb4>)
 801c3b4:	2b00      	cmp	r3, #0
 801c3b6:	d0f0      	beq.n	801c39a <__register_exitproc+0x32>
 801c3b8:	f44f 7084 	mov.w	r0, #264	; 0x108
 801c3bc:	f7ff fcbe 	bl	801bd3c <malloc>
 801c3c0:	2800      	cmp	r0, #0
 801c3c2:	d0ea      	beq.n	801c39a <__register_exitproc+0x32>
 801c3c4:	2300      	movs	r3, #0
 801c3c6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801c3ca:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801c3ce:	6863      	ldr	r3, [r4, #4]
 801c3d0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801c3d4:	2201      	movs	r2, #1
 801c3d6:	409a      	lsls	r2, r3
 801c3d8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801c3dc:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801c3e0:	4313      	orrs	r3, r2
 801c3e2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801c3e6:	2e02      	cmp	r6, #2
 801c3e8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801c3ec:	bf02      	ittt	eq
 801c3ee:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801c3f2:	4313      	orreq	r3, r2
 801c3f4:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801c3f8:	6863      	ldr	r3, [r4, #4]
 801c3fa:	f8d8 0000 	ldr.w	r0, [r8]
 801c3fe:	1c5a      	adds	r2, r3, #1
 801c400:	3302      	adds	r3, #2
 801c402:	6062      	str	r2, [r4, #4]
 801c404:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801c408:	f7ff ff9e 	bl	801c348 <__retarget_lock_release_recursive>
 801c40c:	2000      	movs	r0, #0
 801c40e:	e7ca      	b.n	801c3a6 <__register_exitproc+0x3e>
 801c410:	2401b4bc 	.word	0x2401b4bc
 801c414:	2401b430 	.word	0x2401b430
 801c418:	0801e8c0 	.word	0x0801e8c0
 801c41c:	0801bd3d 	.word	0x0801bd3d
 801c420:	240000dc 	.word	0x240000dc

0801c424 <_free_r>:
 801c424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c426:	2900      	cmp	r1, #0
 801c428:	d044      	beq.n	801c4b4 <_free_r+0x90>
 801c42a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c42e:	9001      	str	r0, [sp, #4]
 801c430:	2b00      	cmp	r3, #0
 801c432:	f1a1 0404 	sub.w	r4, r1, #4
 801c436:	bfb8      	it	lt
 801c438:	18e4      	addlt	r4, r4, r3
 801c43a:	f7ff fd2f 	bl	801be9c <__malloc_lock>
 801c43e:	4a1e      	ldr	r2, [pc, #120]	; (801c4b8 <_free_r+0x94>)
 801c440:	9801      	ldr	r0, [sp, #4]
 801c442:	6813      	ldr	r3, [r2, #0]
 801c444:	b933      	cbnz	r3, 801c454 <_free_r+0x30>
 801c446:	6063      	str	r3, [r4, #4]
 801c448:	6014      	str	r4, [r2, #0]
 801c44a:	b003      	add	sp, #12
 801c44c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c450:	f7ff bd2a 	b.w	801bea8 <__malloc_unlock>
 801c454:	42a3      	cmp	r3, r4
 801c456:	d908      	bls.n	801c46a <_free_r+0x46>
 801c458:	6825      	ldr	r5, [r4, #0]
 801c45a:	1961      	adds	r1, r4, r5
 801c45c:	428b      	cmp	r3, r1
 801c45e:	bf01      	itttt	eq
 801c460:	6819      	ldreq	r1, [r3, #0]
 801c462:	685b      	ldreq	r3, [r3, #4]
 801c464:	1949      	addeq	r1, r1, r5
 801c466:	6021      	streq	r1, [r4, #0]
 801c468:	e7ed      	b.n	801c446 <_free_r+0x22>
 801c46a:	461a      	mov	r2, r3
 801c46c:	685b      	ldr	r3, [r3, #4]
 801c46e:	b10b      	cbz	r3, 801c474 <_free_r+0x50>
 801c470:	42a3      	cmp	r3, r4
 801c472:	d9fa      	bls.n	801c46a <_free_r+0x46>
 801c474:	6811      	ldr	r1, [r2, #0]
 801c476:	1855      	adds	r5, r2, r1
 801c478:	42a5      	cmp	r5, r4
 801c47a:	d10b      	bne.n	801c494 <_free_r+0x70>
 801c47c:	6824      	ldr	r4, [r4, #0]
 801c47e:	4421      	add	r1, r4
 801c480:	1854      	adds	r4, r2, r1
 801c482:	42a3      	cmp	r3, r4
 801c484:	6011      	str	r1, [r2, #0]
 801c486:	d1e0      	bne.n	801c44a <_free_r+0x26>
 801c488:	681c      	ldr	r4, [r3, #0]
 801c48a:	685b      	ldr	r3, [r3, #4]
 801c48c:	6053      	str	r3, [r2, #4]
 801c48e:	440c      	add	r4, r1
 801c490:	6014      	str	r4, [r2, #0]
 801c492:	e7da      	b.n	801c44a <_free_r+0x26>
 801c494:	d902      	bls.n	801c49c <_free_r+0x78>
 801c496:	230c      	movs	r3, #12
 801c498:	6003      	str	r3, [r0, #0]
 801c49a:	e7d6      	b.n	801c44a <_free_r+0x26>
 801c49c:	6825      	ldr	r5, [r4, #0]
 801c49e:	1961      	adds	r1, r4, r5
 801c4a0:	428b      	cmp	r3, r1
 801c4a2:	bf04      	itt	eq
 801c4a4:	6819      	ldreq	r1, [r3, #0]
 801c4a6:	685b      	ldreq	r3, [r3, #4]
 801c4a8:	6063      	str	r3, [r4, #4]
 801c4aa:	bf04      	itt	eq
 801c4ac:	1949      	addeq	r1, r1, r5
 801c4ae:	6021      	streq	r1, [r4, #0]
 801c4b0:	6054      	str	r4, [r2, #4]
 801c4b2:	e7ca      	b.n	801c44a <_free_r+0x26>
 801c4b4:	b003      	add	sp, #12
 801c4b6:	bd30      	pop	{r4, r5, pc}
 801c4b8:	2401b2e4 	.word	0x2401b2e4

0801c4bc <__sfputc_r>:
 801c4bc:	6893      	ldr	r3, [r2, #8]
 801c4be:	3b01      	subs	r3, #1
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	b410      	push	{r4}
 801c4c4:	6093      	str	r3, [r2, #8]
 801c4c6:	da08      	bge.n	801c4da <__sfputc_r+0x1e>
 801c4c8:	6994      	ldr	r4, [r2, #24]
 801c4ca:	42a3      	cmp	r3, r4
 801c4cc:	db01      	blt.n	801c4d2 <__sfputc_r+0x16>
 801c4ce:	290a      	cmp	r1, #10
 801c4d0:	d103      	bne.n	801c4da <__sfputc_r+0x1e>
 801c4d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4d6:	f000 bb73 	b.w	801cbc0 <__swbuf_r>
 801c4da:	6813      	ldr	r3, [r2, #0]
 801c4dc:	1c58      	adds	r0, r3, #1
 801c4de:	6010      	str	r0, [r2, #0]
 801c4e0:	7019      	strb	r1, [r3, #0]
 801c4e2:	4608      	mov	r0, r1
 801c4e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c4e8:	4770      	bx	lr

0801c4ea <__sfputs_r>:
 801c4ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c4ec:	4606      	mov	r6, r0
 801c4ee:	460f      	mov	r7, r1
 801c4f0:	4614      	mov	r4, r2
 801c4f2:	18d5      	adds	r5, r2, r3
 801c4f4:	42ac      	cmp	r4, r5
 801c4f6:	d101      	bne.n	801c4fc <__sfputs_r+0x12>
 801c4f8:	2000      	movs	r0, #0
 801c4fa:	e007      	b.n	801c50c <__sfputs_r+0x22>
 801c4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c500:	463a      	mov	r2, r7
 801c502:	4630      	mov	r0, r6
 801c504:	f7ff ffda 	bl	801c4bc <__sfputc_r>
 801c508:	1c43      	adds	r3, r0, #1
 801c50a:	d1f3      	bne.n	801c4f4 <__sfputs_r+0xa>
 801c50c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c510 <_vfiprintf_r>:
 801c510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c514:	460d      	mov	r5, r1
 801c516:	b09d      	sub	sp, #116	; 0x74
 801c518:	4614      	mov	r4, r2
 801c51a:	4698      	mov	r8, r3
 801c51c:	4606      	mov	r6, r0
 801c51e:	b118      	cbz	r0, 801c528 <_vfiprintf_r+0x18>
 801c520:	6a03      	ldr	r3, [r0, #32]
 801c522:	b90b      	cbnz	r3, 801c528 <_vfiprintf_r+0x18>
 801c524:	f7ff fd60 	bl	801bfe8 <__sinit>
 801c528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c52a:	07d9      	lsls	r1, r3, #31
 801c52c:	d405      	bmi.n	801c53a <_vfiprintf_r+0x2a>
 801c52e:	89ab      	ldrh	r3, [r5, #12]
 801c530:	059a      	lsls	r2, r3, #22
 801c532:	d402      	bmi.n	801c53a <_vfiprintf_r+0x2a>
 801c534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c536:	f7ff ff06 	bl	801c346 <__retarget_lock_acquire_recursive>
 801c53a:	89ab      	ldrh	r3, [r5, #12]
 801c53c:	071b      	lsls	r3, r3, #28
 801c53e:	d501      	bpl.n	801c544 <_vfiprintf_r+0x34>
 801c540:	692b      	ldr	r3, [r5, #16]
 801c542:	b99b      	cbnz	r3, 801c56c <_vfiprintf_r+0x5c>
 801c544:	4629      	mov	r1, r5
 801c546:	4630      	mov	r0, r6
 801c548:	f000 fb78 	bl	801cc3c <__swsetup_r>
 801c54c:	b170      	cbz	r0, 801c56c <_vfiprintf_r+0x5c>
 801c54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c550:	07dc      	lsls	r4, r3, #31
 801c552:	d504      	bpl.n	801c55e <_vfiprintf_r+0x4e>
 801c554:	f04f 30ff 	mov.w	r0, #4294967295
 801c558:	b01d      	add	sp, #116	; 0x74
 801c55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c55e:	89ab      	ldrh	r3, [r5, #12]
 801c560:	0598      	lsls	r0, r3, #22
 801c562:	d4f7      	bmi.n	801c554 <_vfiprintf_r+0x44>
 801c564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c566:	f7ff feef 	bl	801c348 <__retarget_lock_release_recursive>
 801c56a:	e7f3      	b.n	801c554 <_vfiprintf_r+0x44>
 801c56c:	2300      	movs	r3, #0
 801c56e:	9309      	str	r3, [sp, #36]	; 0x24
 801c570:	2320      	movs	r3, #32
 801c572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c576:	f8cd 800c 	str.w	r8, [sp, #12]
 801c57a:	2330      	movs	r3, #48	; 0x30
 801c57c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c730 <_vfiprintf_r+0x220>
 801c580:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c584:	f04f 0901 	mov.w	r9, #1
 801c588:	4623      	mov	r3, r4
 801c58a:	469a      	mov	sl, r3
 801c58c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c590:	b10a      	cbz	r2, 801c596 <_vfiprintf_r+0x86>
 801c592:	2a25      	cmp	r2, #37	; 0x25
 801c594:	d1f9      	bne.n	801c58a <_vfiprintf_r+0x7a>
 801c596:	ebba 0b04 	subs.w	fp, sl, r4
 801c59a:	d00b      	beq.n	801c5b4 <_vfiprintf_r+0xa4>
 801c59c:	465b      	mov	r3, fp
 801c59e:	4622      	mov	r2, r4
 801c5a0:	4629      	mov	r1, r5
 801c5a2:	4630      	mov	r0, r6
 801c5a4:	f7ff ffa1 	bl	801c4ea <__sfputs_r>
 801c5a8:	3001      	adds	r0, #1
 801c5aa:	f000 80a9 	beq.w	801c700 <_vfiprintf_r+0x1f0>
 801c5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c5b0:	445a      	add	r2, fp
 801c5b2:	9209      	str	r2, [sp, #36]	; 0x24
 801c5b4:	f89a 3000 	ldrb.w	r3, [sl]
 801c5b8:	2b00      	cmp	r3, #0
 801c5ba:	f000 80a1 	beq.w	801c700 <_vfiprintf_r+0x1f0>
 801c5be:	2300      	movs	r3, #0
 801c5c0:	f04f 32ff 	mov.w	r2, #4294967295
 801c5c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c5c8:	f10a 0a01 	add.w	sl, sl, #1
 801c5cc:	9304      	str	r3, [sp, #16]
 801c5ce:	9307      	str	r3, [sp, #28]
 801c5d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c5d4:	931a      	str	r3, [sp, #104]	; 0x68
 801c5d6:	4654      	mov	r4, sl
 801c5d8:	2205      	movs	r2, #5
 801c5da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c5de:	4854      	ldr	r0, [pc, #336]	; (801c730 <_vfiprintf_r+0x220>)
 801c5e0:	f7e3 fe86 	bl	80002f0 <memchr>
 801c5e4:	9a04      	ldr	r2, [sp, #16]
 801c5e6:	b9d8      	cbnz	r0, 801c620 <_vfiprintf_r+0x110>
 801c5e8:	06d1      	lsls	r1, r2, #27
 801c5ea:	bf44      	itt	mi
 801c5ec:	2320      	movmi	r3, #32
 801c5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c5f2:	0713      	lsls	r3, r2, #28
 801c5f4:	bf44      	itt	mi
 801c5f6:	232b      	movmi	r3, #43	; 0x2b
 801c5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c5fc:	f89a 3000 	ldrb.w	r3, [sl]
 801c600:	2b2a      	cmp	r3, #42	; 0x2a
 801c602:	d015      	beq.n	801c630 <_vfiprintf_r+0x120>
 801c604:	9a07      	ldr	r2, [sp, #28]
 801c606:	4654      	mov	r4, sl
 801c608:	2000      	movs	r0, #0
 801c60a:	f04f 0c0a 	mov.w	ip, #10
 801c60e:	4621      	mov	r1, r4
 801c610:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c614:	3b30      	subs	r3, #48	; 0x30
 801c616:	2b09      	cmp	r3, #9
 801c618:	d94d      	bls.n	801c6b6 <_vfiprintf_r+0x1a6>
 801c61a:	b1b0      	cbz	r0, 801c64a <_vfiprintf_r+0x13a>
 801c61c:	9207      	str	r2, [sp, #28]
 801c61e:	e014      	b.n	801c64a <_vfiprintf_r+0x13a>
 801c620:	eba0 0308 	sub.w	r3, r0, r8
 801c624:	fa09 f303 	lsl.w	r3, r9, r3
 801c628:	4313      	orrs	r3, r2
 801c62a:	9304      	str	r3, [sp, #16]
 801c62c:	46a2      	mov	sl, r4
 801c62e:	e7d2      	b.n	801c5d6 <_vfiprintf_r+0xc6>
 801c630:	9b03      	ldr	r3, [sp, #12]
 801c632:	1d19      	adds	r1, r3, #4
 801c634:	681b      	ldr	r3, [r3, #0]
 801c636:	9103      	str	r1, [sp, #12]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	bfbb      	ittet	lt
 801c63c:	425b      	neglt	r3, r3
 801c63e:	f042 0202 	orrlt.w	r2, r2, #2
 801c642:	9307      	strge	r3, [sp, #28]
 801c644:	9307      	strlt	r3, [sp, #28]
 801c646:	bfb8      	it	lt
 801c648:	9204      	strlt	r2, [sp, #16]
 801c64a:	7823      	ldrb	r3, [r4, #0]
 801c64c:	2b2e      	cmp	r3, #46	; 0x2e
 801c64e:	d10c      	bne.n	801c66a <_vfiprintf_r+0x15a>
 801c650:	7863      	ldrb	r3, [r4, #1]
 801c652:	2b2a      	cmp	r3, #42	; 0x2a
 801c654:	d134      	bne.n	801c6c0 <_vfiprintf_r+0x1b0>
 801c656:	9b03      	ldr	r3, [sp, #12]
 801c658:	1d1a      	adds	r2, r3, #4
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	9203      	str	r2, [sp, #12]
 801c65e:	2b00      	cmp	r3, #0
 801c660:	bfb8      	it	lt
 801c662:	f04f 33ff 	movlt.w	r3, #4294967295
 801c666:	3402      	adds	r4, #2
 801c668:	9305      	str	r3, [sp, #20]
 801c66a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c740 <_vfiprintf_r+0x230>
 801c66e:	7821      	ldrb	r1, [r4, #0]
 801c670:	2203      	movs	r2, #3
 801c672:	4650      	mov	r0, sl
 801c674:	f7e3 fe3c 	bl	80002f0 <memchr>
 801c678:	b138      	cbz	r0, 801c68a <_vfiprintf_r+0x17a>
 801c67a:	9b04      	ldr	r3, [sp, #16]
 801c67c:	eba0 000a 	sub.w	r0, r0, sl
 801c680:	2240      	movs	r2, #64	; 0x40
 801c682:	4082      	lsls	r2, r0
 801c684:	4313      	orrs	r3, r2
 801c686:	3401      	adds	r4, #1
 801c688:	9304      	str	r3, [sp, #16]
 801c68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c68e:	4829      	ldr	r0, [pc, #164]	; (801c734 <_vfiprintf_r+0x224>)
 801c690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c694:	2206      	movs	r2, #6
 801c696:	f7e3 fe2b 	bl	80002f0 <memchr>
 801c69a:	2800      	cmp	r0, #0
 801c69c:	d03f      	beq.n	801c71e <_vfiprintf_r+0x20e>
 801c69e:	4b26      	ldr	r3, [pc, #152]	; (801c738 <_vfiprintf_r+0x228>)
 801c6a0:	bb1b      	cbnz	r3, 801c6ea <_vfiprintf_r+0x1da>
 801c6a2:	9b03      	ldr	r3, [sp, #12]
 801c6a4:	3307      	adds	r3, #7
 801c6a6:	f023 0307 	bic.w	r3, r3, #7
 801c6aa:	3308      	adds	r3, #8
 801c6ac:	9303      	str	r3, [sp, #12]
 801c6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6b0:	443b      	add	r3, r7
 801c6b2:	9309      	str	r3, [sp, #36]	; 0x24
 801c6b4:	e768      	b.n	801c588 <_vfiprintf_r+0x78>
 801c6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801c6ba:	460c      	mov	r4, r1
 801c6bc:	2001      	movs	r0, #1
 801c6be:	e7a6      	b.n	801c60e <_vfiprintf_r+0xfe>
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	3401      	adds	r4, #1
 801c6c4:	9305      	str	r3, [sp, #20]
 801c6c6:	4619      	mov	r1, r3
 801c6c8:	f04f 0c0a 	mov.w	ip, #10
 801c6cc:	4620      	mov	r0, r4
 801c6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6d2:	3a30      	subs	r2, #48	; 0x30
 801c6d4:	2a09      	cmp	r2, #9
 801c6d6:	d903      	bls.n	801c6e0 <_vfiprintf_r+0x1d0>
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d0c6      	beq.n	801c66a <_vfiprintf_r+0x15a>
 801c6dc:	9105      	str	r1, [sp, #20]
 801c6de:	e7c4      	b.n	801c66a <_vfiprintf_r+0x15a>
 801c6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c6e4:	4604      	mov	r4, r0
 801c6e6:	2301      	movs	r3, #1
 801c6e8:	e7f0      	b.n	801c6cc <_vfiprintf_r+0x1bc>
 801c6ea:	ab03      	add	r3, sp, #12
 801c6ec:	9300      	str	r3, [sp, #0]
 801c6ee:	462a      	mov	r2, r5
 801c6f0:	4b12      	ldr	r3, [pc, #72]	; (801c73c <_vfiprintf_r+0x22c>)
 801c6f2:	a904      	add	r1, sp, #16
 801c6f4:	4630      	mov	r0, r6
 801c6f6:	f3af 8000 	nop.w
 801c6fa:	4607      	mov	r7, r0
 801c6fc:	1c78      	adds	r0, r7, #1
 801c6fe:	d1d6      	bne.n	801c6ae <_vfiprintf_r+0x19e>
 801c700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c702:	07d9      	lsls	r1, r3, #31
 801c704:	d405      	bmi.n	801c712 <_vfiprintf_r+0x202>
 801c706:	89ab      	ldrh	r3, [r5, #12]
 801c708:	059a      	lsls	r2, r3, #22
 801c70a:	d402      	bmi.n	801c712 <_vfiprintf_r+0x202>
 801c70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c70e:	f7ff fe1b 	bl	801c348 <__retarget_lock_release_recursive>
 801c712:	89ab      	ldrh	r3, [r5, #12]
 801c714:	065b      	lsls	r3, r3, #25
 801c716:	f53f af1d 	bmi.w	801c554 <_vfiprintf_r+0x44>
 801c71a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c71c:	e71c      	b.n	801c558 <_vfiprintf_r+0x48>
 801c71e:	ab03      	add	r3, sp, #12
 801c720:	9300      	str	r3, [sp, #0]
 801c722:	462a      	mov	r2, r5
 801c724:	4b05      	ldr	r3, [pc, #20]	; (801c73c <_vfiprintf_r+0x22c>)
 801c726:	a904      	add	r1, sp, #16
 801c728:	4630      	mov	r0, r6
 801c72a:	f000 f879 	bl	801c820 <_printf_i>
 801c72e:	e7e4      	b.n	801c6fa <_vfiprintf_r+0x1ea>
 801c730:	0801e8c4 	.word	0x0801e8c4
 801c734:	0801e8ce 	.word	0x0801e8ce
 801c738:	00000000 	.word	0x00000000
 801c73c:	0801c4eb 	.word	0x0801c4eb
 801c740:	0801e8ca 	.word	0x0801e8ca

0801c744 <_printf_common>:
 801c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c748:	4616      	mov	r6, r2
 801c74a:	4699      	mov	r9, r3
 801c74c:	688a      	ldr	r2, [r1, #8]
 801c74e:	690b      	ldr	r3, [r1, #16]
 801c750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c754:	4293      	cmp	r3, r2
 801c756:	bfb8      	it	lt
 801c758:	4613      	movlt	r3, r2
 801c75a:	6033      	str	r3, [r6, #0]
 801c75c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c760:	4607      	mov	r7, r0
 801c762:	460c      	mov	r4, r1
 801c764:	b10a      	cbz	r2, 801c76a <_printf_common+0x26>
 801c766:	3301      	adds	r3, #1
 801c768:	6033      	str	r3, [r6, #0]
 801c76a:	6823      	ldr	r3, [r4, #0]
 801c76c:	0699      	lsls	r1, r3, #26
 801c76e:	bf42      	ittt	mi
 801c770:	6833      	ldrmi	r3, [r6, #0]
 801c772:	3302      	addmi	r3, #2
 801c774:	6033      	strmi	r3, [r6, #0]
 801c776:	6825      	ldr	r5, [r4, #0]
 801c778:	f015 0506 	ands.w	r5, r5, #6
 801c77c:	d106      	bne.n	801c78c <_printf_common+0x48>
 801c77e:	f104 0a19 	add.w	sl, r4, #25
 801c782:	68e3      	ldr	r3, [r4, #12]
 801c784:	6832      	ldr	r2, [r6, #0]
 801c786:	1a9b      	subs	r3, r3, r2
 801c788:	42ab      	cmp	r3, r5
 801c78a:	dc26      	bgt.n	801c7da <_printf_common+0x96>
 801c78c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c790:	1e13      	subs	r3, r2, #0
 801c792:	6822      	ldr	r2, [r4, #0]
 801c794:	bf18      	it	ne
 801c796:	2301      	movne	r3, #1
 801c798:	0692      	lsls	r2, r2, #26
 801c79a:	d42b      	bmi.n	801c7f4 <_printf_common+0xb0>
 801c79c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c7a0:	4649      	mov	r1, r9
 801c7a2:	4638      	mov	r0, r7
 801c7a4:	47c0      	blx	r8
 801c7a6:	3001      	adds	r0, #1
 801c7a8:	d01e      	beq.n	801c7e8 <_printf_common+0xa4>
 801c7aa:	6823      	ldr	r3, [r4, #0]
 801c7ac:	6922      	ldr	r2, [r4, #16]
 801c7ae:	f003 0306 	and.w	r3, r3, #6
 801c7b2:	2b04      	cmp	r3, #4
 801c7b4:	bf02      	ittt	eq
 801c7b6:	68e5      	ldreq	r5, [r4, #12]
 801c7b8:	6833      	ldreq	r3, [r6, #0]
 801c7ba:	1aed      	subeq	r5, r5, r3
 801c7bc:	68a3      	ldr	r3, [r4, #8]
 801c7be:	bf0c      	ite	eq
 801c7c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c7c4:	2500      	movne	r5, #0
 801c7c6:	4293      	cmp	r3, r2
 801c7c8:	bfc4      	itt	gt
 801c7ca:	1a9b      	subgt	r3, r3, r2
 801c7cc:	18ed      	addgt	r5, r5, r3
 801c7ce:	2600      	movs	r6, #0
 801c7d0:	341a      	adds	r4, #26
 801c7d2:	42b5      	cmp	r5, r6
 801c7d4:	d11a      	bne.n	801c80c <_printf_common+0xc8>
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	e008      	b.n	801c7ec <_printf_common+0xa8>
 801c7da:	2301      	movs	r3, #1
 801c7dc:	4652      	mov	r2, sl
 801c7de:	4649      	mov	r1, r9
 801c7e0:	4638      	mov	r0, r7
 801c7e2:	47c0      	blx	r8
 801c7e4:	3001      	adds	r0, #1
 801c7e6:	d103      	bne.n	801c7f0 <_printf_common+0xac>
 801c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801c7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7f0:	3501      	adds	r5, #1
 801c7f2:	e7c6      	b.n	801c782 <_printf_common+0x3e>
 801c7f4:	18e1      	adds	r1, r4, r3
 801c7f6:	1c5a      	adds	r2, r3, #1
 801c7f8:	2030      	movs	r0, #48	; 0x30
 801c7fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c7fe:	4422      	add	r2, r4
 801c800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c808:	3302      	adds	r3, #2
 801c80a:	e7c7      	b.n	801c79c <_printf_common+0x58>
 801c80c:	2301      	movs	r3, #1
 801c80e:	4622      	mov	r2, r4
 801c810:	4649      	mov	r1, r9
 801c812:	4638      	mov	r0, r7
 801c814:	47c0      	blx	r8
 801c816:	3001      	adds	r0, #1
 801c818:	d0e6      	beq.n	801c7e8 <_printf_common+0xa4>
 801c81a:	3601      	adds	r6, #1
 801c81c:	e7d9      	b.n	801c7d2 <_printf_common+0x8e>
	...

0801c820 <_printf_i>:
 801c820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c824:	7e0f      	ldrb	r7, [r1, #24]
 801c826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c828:	2f78      	cmp	r7, #120	; 0x78
 801c82a:	4691      	mov	r9, r2
 801c82c:	4680      	mov	r8, r0
 801c82e:	460c      	mov	r4, r1
 801c830:	469a      	mov	sl, r3
 801c832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c836:	d807      	bhi.n	801c848 <_printf_i+0x28>
 801c838:	2f62      	cmp	r7, #98	; 0x62
 801c83a:	d80a      	bhi.n	801c852 <_printf_i+0x32>
 801c83c:	2f00      	cmp	r7, #0
 801c83e:	f000 80d4 	beq.w	801c9ea <_printf_i+0x1ca>
 801c842:	2f58      	cmp	r7, #88	; 0x58
 801c844:	f000 80c0 	beq.w	801c9c8 <_printf_i+0x1a8>
 801c848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c84c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c850:	e03a      	b.n	801c8c8 <_printf_i+0xa8>
 801c852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c856:	2b15      	cmp	r3, #21
 801c858:	d8f6      	bhi.n	801c848 <_printf_i+0x28>
 801c85a:	a101      	add	r1, pc, #4	; (adr r1, 801c860 <_printf_i+0x40>)
 801c85c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c860:	0801c8b9 	.word	0x0801c8b9
 801c864:	0801c8cd 	.word	0x0801c8cd
 801c868:	0801c849 	.word	0x0801c849
 801c86c:	0801c849 	.word	0x0801c849
 801c870:	0801c849 	.word	0x0801c849
 801c874:	0801c849 	.word	0x0801c849
 801c878:	0801c8cd 	.word	0x0801c8cd
 801c87c:	0801c849 	.word	0x0801c849
 801c880:	0801c849 	.word	0x0801c849
 801c884:	0801c849 	.word	0x0801c849
 801c888:	0801c849 	.word	0x0801c849
 801c88c:	0801c9d1 	.word	0x0801c9d1
 801c890:	0801c8f9 	.word	0x0801c8f9
 801c894:	0801c98b 	.word	0x0801c98b
 801c898:	0801c849 	.word	0x0801c849
 801c89c:	0801c849 	.word	0x0801c849
 801c8a0:	0801c9f3 	.word	0x0801c9f3
 801c8a4:	0801c849 	.word	0x0801c849
 801c8a8:	0801c8f9 	.word	0x0801c8f9
 801c8ac:	0801c849 	.word	0x0801c849
 801c8b0:	0801c849 	.word	0x0801c849
 801c8b4:	0801c993 	.word	0x0801c993
 801c8b8:	682b      	ldr	r3, [r5, #0]
 801c8ba:	1d1a      	adds	r2, r3, #4
 801c8bc:	681b      	ldr	r3, [r3, #0]
 801c8be:	602a      	str	r2, [r5, #0]
 801c8c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c8c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c8c8:	2301      	movs	r3, #1
 801c8ca:	e09f      	b.n	801ca0c <_printf_i+0x1ec>
 801c8cc:	6820      	ldr	r0, [r4, #0]
 801c8ce:	682b      	ldr	r3, [r5, #0]
 801c8d0:	0607      	lsls	r7, r0, #24
 801c8d2:	f103 0104 	add.w	r1, r3, #4
 801c8d6:	6029      	str	r1, [r5, #0]
 801c8d8:	d501      	bpl.n	801c8de <_printf_i+0xbe>
 801c8da:	681e      	ldr	r6, [r3, #0]
 801c8dc:	e003      	b.n	801c8e6 <_printf_i+0xc6>
 801c8de:	0646      	lsls	r6, r0, #25
 801c8e0:	d5fb      	bpl.n	801c8da <_printf_i+0xba>
 801c8e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c8e6:	2e00      	cmp	r6, #0
 801c8e8:	da03      	bge.n	801c8f2 <_printf_i+0xd2>
 801c8ea:	232d      	movs	r3, #45	; 0x2d
 801c8ec:	4276      	negs	r6, r6
 801c8ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c8f2:	485a      	ldr	r0, [pc, #360]	; (801ca5c <_printf_i+0x23c>)
 801c8f4:	230a      	movs	r3, #10
 801c8f6:	e012      	b.n	801c91e <_printf_i+0xfe>
 801c8f8:	682b      	ldr	r3, [r5, #0]
 801c8fa:	6820      	ldr	r0, [r4, #0]
 801c8fc:	1d19      	adds	r1, r3, #4
 801c8fe:	6029      	str	r1, [r5, #0]
 801c900:	0605      	lsls	r5, r0, #24
 801c902:	d501      	bpl.n	801c908 <_printf_i+0xe8>
 801c904:	681e      	ldr	r6, [r3, #0]
 801c906:	e002      	b.n	801c90e <_printf_i+0xee>
 801c908:	0641      	lsls	r1, r0, #25
 801c90a:	d5fb      	bpl.n	801c904 <_printf_i+0xe4>
 801c90c:	881e      	ldrh	r6, [r3, #0]
 801c90e:	4853      	ldr	r0, [pc, #332]	; (801ca5c <_printf_i+0x23c>)
 801c910:	2f6f      	cmp	r7, #111	; 0x6f
 801c912:	bf0c      	ite	eq
 801c914:	2308      	moveq	r3, #8
 801c916:	230a      	movne	r3, #10
 801c918:	2100      	movs	r1, #0
 801c91a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c91e:	6865      	ldr	r5, [r4, #4]
 801c920:	60a5      	str	r5, [r4, #8]
 801c922:	2d00      	cmp	r5, #0
 801c924:	bfa2      	ittt	ge
 801c926:	6821      	ldrge	r1, [r4, #0]
 801c928:	f021 0104 	bicge.w	r1, r1, #4
 801c92c:	6021      	strge	r1, [r4, #0]
 801c92e:	b90e      	cbnz	r6, 801c934 <_printf_i+0x114>
 801c930:	2d00      	cmp	r5, #0
 801c932:	d04b      	beq.n	801c9cc <_printf_i+0x1ac>
 801c934:	4615      	mov	r5, r2
 801c936:	fbb6 f1f3 	udiv	r1, r6, r3
 801c93a:	fb03 6711 	mls	r7, r3, r1, r6
 801c93e:	5dc7      	ldrb	r7, [r0, r7]
 801c940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c944:	4637      	mov	r7, r6
 801c946:	42bb      	cmp	r3, r7
 801c948:	460e      	mov	r6, r1
 801c94a:	d9f4      	bls.n	801c936 <_printf_i+0x116>
 801c94c:	2b08      	cmp	r3, #8
 801c94e:	d10b      	bne.n	801c968 <_printf_i+0x148>
 801c950:	6823      	ldr	r3, [r4, #0]
 801c952:	07de      	lsls	r6, r3, #31
 801c954:	d508      	bpl.n	801c968 <_printf_i+0x148>
 801c956:	6923      	ldr	r3, [r4, #16]
 801c958:	6861      	ldr	r1, [r4, #4]
 801c95a:	4299      	cmp	r1, r3
 801c95c:	bfde      	ittt	le
 801c95e:	2330      	movle	r3, #48	; 0x30
 801c960:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c964:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c968:	1b52      	subs	r2, r2, r5
 801c96a:	6122      	str	r2, [r4, #16]
 801c96c:	f8cd a000 	str.w	sl, [sp]
 801c970:	464b      	mov	r3, r9
 801c972:	aa03      	add	r2, sp, #12
 801c974:	4621      	mov	r1, r4
 801c976:	4640      	mov	r0, r8
 801c978:	f7ff fee4 	bl	801c744 <_printf_common>
 801c97c:	3001      	adds	r0, #1
 801c97e:	d14a      	bne.n	801ca16 <_printf_i+0x1f6>
 801c980:	f04f 30ff 	mov.w	r0, #4294967295
 801c984:	b004      	add	sp, #16
 801c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c98a:	6823      	ldr	r3, [r4, #0]
 801c98c:	f043 0320 	orr.w	r3, r3, #32
 801c990:	6023      	str	r3, [r4, #0]
 801c992:	4833      	ldr	r0, [pc, #204]	; (801ca60 <_printf_i+0x240>)
 801c994:	2778      	movs	r7, #120	; 0x78
 801c996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c99a:	6823      	ldr	r3, [r4, #0]
 801c99c:	6829      	ldr	r1, [r5, #0]
 801c99e:	061f      	lsls	r7, r3, #24
 801c9a0:	f851 6b04 	ldr.w	r6, [r1], #4
 801c9a4:	d402      	bmi.n	801c9ac <_printf_i+0x18c>
 801c9a6:	065f      	lsls	r7, r3, #25
 801c9a8:	bf48      	it	mi
 801c9aa:	b2b6      	uxthmi	r6, r6
 801c9ac:	07df      	lsls	r7, r3, #31
 801c9ae:	bf48      	it	mi
 801c9b0:	f043 0320 	orrmi.w	r3, r3, #32
 801c9b4:	6029      	str	r1, [r5, #0]
 801c9b6:	bf48      	it	mi
 801c9b8:	6023      	strmi	r3, [r4, #0]
 801c9ba:	b91e      	cbnz	r6, 801c9c4 <_printf_i+0x1a4>
 801c9bc:	6823      	ldr	r3, [r4, #0]
 801c9be:	f023 0320 	bic.w	r3, r3, #32
 801c9c2:	6023      	str	r3, [r4, #0]
 801c9c4:	2310      	movs	r3, #16
 801c9c6:	e7a7      	b.n	801c918 <_printf_i+0xf8>
 801c9c8:	4824      	ldr	r0, [pc, #144]	; (801ca5c <_printf_i+0x23c>)
 801c9ca:	e7e4      	b.n	801c996 <_printf_i+0x176>
 801c9cc:	4615      	mov	r5, r2
 801c9ce:	e7bd      	b.n	801c94c <_printf_i+0x12c>
 801c9d0:	682b      	ldr	r3, [r5, #0]
 801c9d2:	6826      	ldr	r6, [r4, #0]
 801c9d4:	6961      	ldr	r1, [r4, #20]
 801c9d6:	1d18      	adds	r0, r3, #4
 801c9d8:	6028      	str	r0, [r5, #0]
 801c9da:	0635      	lsls	r5, r6, #24
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	d501      	bpl.n	801c9e4 <_printf_i+0x1c4>
 801c9e0:	6019      	str	r1, [r3, #0]
 801c9e2:	e002      	b.n	801c9ea <_printf_i+0x1ca>
 801c9e4:	0670      	lsls	r0, r6, #25
 801c9e6:	d5fb      	bpl.n	801c9e0 <_printf_i+0x1c0>
 801c9e8:	8019      	strh	r1, [r3, #0]
 801c9ea:	2300      	movs	r3, #0
 801c9ec:	6123      	str	r3, [r4, #16]
 801c9ee:	4615      	mov	r5, r2
 801c9f0:	e7bc      	b.n	801c96c <_printf_i+0x14c>
 801c9f2:	682b      	ldr	r3, [r5, #0]
 801c9f4:	1d1a      	adds	r2, r3, #4
 801c9f6:	602a      	str	r2, [r5, #0]
 801c9f8:	681d      	ldr	r5, [r3, #0]
 801c9fa:	6862      	ldr	r2, [r4, #4]
 801c9fc:	2100      	movs	r1, #0
 801c9fe:	4628      	mov	r0, r5
 801ca00:	f7e3 fc76 	bl	80002f0 <memchr>
 801ca04:	b108      	cbz	r0, 801ca0a <_printf_i+0x1ea>
 801ca06:	1b40      	subs	r0, r0, r5
 801ca08:	6060      	str	r0, [r4, #4]
 801ca0a:	6863      	ldr	r3, [r4, #4]
 801ca0c:	6123      	str	r3, [r4, #16]
 801ca0e:	2300      	movs	r3, #0
 801ca10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca14:	e7aa      	b.n	801c96c <_printf_i+0x14c>
 801ca16:	6923      	ldr	r3, [r4, #16]
 801ca18:	462a      	mov	r2, r5
 801ca1a:	4649      	mov	r1, r9
 801ca1c:	4640      	mov	r0, r8
 801ca1e:	47d0      	blx	sl
 801ca20:	3001      	adds	r0, #1
 801ca22:	d0ad      	beq.n	801c980 <_printf_i+0x160>
 801ca24:	6823      	ldr	r3, [r4, #0]
 801ca26:	079b      	lsls	r3, r3, #30
 801ca28:	d413      	bmi.n	801ca52 <_printf_i+0x232>
 801ca2a:	68e0      	ldr	r0, [r4, #12]
 801ca2c:	9b03      	ldr	r3, [sp, #12]
 801ca2e:	4298      	cmp	r0, r3
 801ca30:	bfb8      	it	lt
 801ca32:	4618      	movlt	r0, r3
 801ca34:	e7a6      	b.n	801c984 <_printf_i+0x164>
 801ca36:	2301      	movs	r3, #1
 801ca38:	4632      	mov	r2, r6
 801ca3a:	4649      	mov	r1, r9
 801ca3c:	4640      	mov	r0, r8
 801ca3e:	47d0      	blx	sl
 801ca40:	3001      	adds	r0, #1
 801ca42:	d09d      	beq.n	801c980 <_printf_i+0x160>
 801ca44:	3501      	adds	r5, #1
 801ca46:	68e3      	ldr	r3, [r4, #12]
 801ca48:	9903      	ldr	r1, [sp, #12]
 801ca4a:	1a5b      	subs	r3, r3, r1
 801ca4c:	42ab      	cmp	r3, r5
 801ca4e:	dcf2      	bgt.n	801ca36 <_printf_i+0x216>
 801ca50:	e7eb      	b.n	801ca2a <_printf_i+0x20a>
 801ca52:	2500      	movs	r5, #0
 801ca54:	f104 0619 	add.w	r6, r4, #25
 801ca58:	e7f5      	b.n	801ca46 <_printf_i+0x226>
 801ca5a:	bf00      	nop
 801ca5c:	0801e8d5 	.word	0x0801e8d5
 801ca60:	0801e8e6 	.word	0x0801e8e6

0801ca64 <__sflush_r>:
 801ca64:	898a      	ldrh	r2, [r1, #12]
 801ca66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca6a:	4605      	mov	r5, r0
 801ca6c:	0710      	lsls	r0, r2, #28
 801ca6e:	460c      	mov	r4, r1
 801ca70:	d458      	bmi.n	801cb24 <__sflush_r+0xc0>
 801ca72:	684b      	ldr	r3, [r1, #4]
 801ca74:	2b00      	cmp	r3, #0
 801ca76:	dc05      	bgt.n	801ca84 <__sflush_r+0x20>
 801ca78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ca7a:	2b00      	cmp	r3, #0
 801ca7c:	dc02      	bgt.n	801ca84 <__sflush_r+0x20>
 801ca7e:	2000      	movs	r0, #0
 801ca80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ca86:	2e00      	cmp	r6, #0
 801ca88:	d0f9      	beq.n	801ca7e <__sflush_r+0x1a>
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ca90:	682f      	ldr	r7, [r5, #0]
 801ca92:	6a21      	ldr	r1, [r4, #32]
 801ca94:	602b      	str	r3, [r5, #0]
 801ca96:	d032      	beq.n	801cafe <__sflush_r+0x9a>
 801ca98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ca9a:	89a3      	ldrh	r3, [r4, #12]
 801ca9c:	075a      	lsls	r2, r3, #29
 801ca9e:	d505      	bpl.n	801caac <__sflush_r+0x48>
 801caa0:	6863      	ldr	r3, [r4, #4]
 801caa2:	1ac0      	subs	r0, r0, r3
 801caa4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801caa6:	b10b      	cbz	r3, 801caac <__sflush_r+0x48>
 801caa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801caaa:	1ac0      	subs	r0, r0, r3
 801caac:	2300      	movs	r3, #0
 801caae:	4602      	mov	r2, r0
 801cab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cab2:	6a21      	ldr	r1, [r4, #32]
 801cab4:	4628      	mov	r0, r5
 801cab6:	47b0      	blx	r6
 801cab8:	1c43      	adds	r3, r0, #1
 801caba:	89a3      	ldrh	r3, [r4, #12]
 801cabc:	d106      	bne.n	801cacc <__sflush_r+0x68>
 801cabe:	6829      	ldr	r1, [r5, #0]
 801cac0:	291d      	cmp	r1, #29
 801cac2:	d82b      	bhi.n	801cb1c <__sflush_r+0xb8>
 801cac4:	4a29      	ldr	r2, [pc, #164]	; (801cb6c <__sflush_r+0x108>)
 801cac6:	410a      	asrs	r2, r1
 801cac8:	07d6      	lsls	r6, r2, #31
 801caca:	d427      	bmi.n	801cb1c <__sflush_r+0xb8>
 801cacc:	2200      	movs	r2, #0
 801cace:	6062      	str	r2, [r4, #4]
 801cad0:	04d9      	lsls	r1, r3, #19
 801cad2:	6922      	ldr	r2, [r4, #16]
 801cad4:	6022      	str	r2, [r4, #0]
 801cad6:	d504      	bpl.n	801cae2 <__sflush_r+0x7e>
 801cad8:	1c42      	adds	r2, r0, #1
 801cada:	d101      	bne.n	801cae0 <__sflush_r+0x7c>
 801cadc:	682b      	ldr	r3, [r5, #0]
 801cade:	b903      	cbnz	r3, 801cae2 <__sflush_r+0x7e>
 801cae0:	6560      	str	r0, [r4, #84]	; 0x54
 801cae2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cae4:	602f      	str	r7, [r5, #0]
 801cae6:	2900      	cmp	r1, #0
 801cae8:	d0c9      	beq.n	801ca7e <__sflush_r+0x1a>
 801caea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801caee:	4299      	cmp	r1, r3
 801caf0:	d002      	beq.n	801caf8 <__sflush_r+0x94>
 801caf2:	4628      	mov	r0, r5
 801caf4:	f7ff fc96 	bl	801c424 <_free_r>
 801caf8:	2000      	movs	r0, #0
 801cafa:	6360      	str	r0, [r4, #52]	; 0x34
 801cafc:	e7c0      	b.n	801ca80 <__sflush_r+0x1c>
 801cafe:	2301      	movs	r3, #1
 801cb00:	4628      	mov	r0, r5
 801cb02:	47b0      	blx	r6
 801cb04:	1c41      	adds	r1, r0, #1
 801cb06:	d1c8      	bne.n	801ca9a <__sflush_r+0x36>
 801cb08:	682b      	ldr	r3, [r5, #0]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d0c5      	beq.n	801ca9a <__sflush_r+0x36>
 801cb0e:	2b1d      	cmp	r3, #29
 801cb10:	d001      	beq.n	801cb16 <__sflush_r+0xb2>
 801cb12:	2b16      	cmp	r3, #22
 801cb14:	d101      	bne.n	801cb1a <__sflush_r+0xb6>
 801cb16:	602f      	str	r7, [r5, #0]
 801cb18:	e7b1      	b.n	801ca7e <__sflush_r+0x1a>
 801cb1a:	89a3      	ldrh	r3, [r4, #12]
 801cb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb20:	81a3      	strh	r3, [r4, #12]
 801cb22:	e7ad      	b.n	801ca80 <__sflush_r+0x1c>
 801cb24:	690f      	ldr	r7, [r1, #16]
 801cb26:	2f00      	cmp	r7, #0
 801cb28:	d0a9      	beq.n	801ca7e <__sflush_r+0x1a>
 801cb2a:	0793      	lsls	r3, r2, #30
 801cb2c:	680e      	ldr	r6, [r1, #0]
 801cb2e:	bf08      	it	eq
 801cb30:	694b      	ldreq	r3, [r1, #20]
 801cb32:	600f      	str	r7, [r1, #0]
 801cb34:	bf18      	it	ne
 801cb36:	2300      	movne	r3, #0
 801cb38:	eba6 0807 	sub.w	r8, r6, r7
 801cb3c:	608b      	str	r3, [r1, #8]
 801cb3e:	f1b8 0f00 	cmp.w	r8, #0
 801cb42:	dd9c      	ble.n	801ca7e <__sflush_r+0x1a>
 801cb44:	6a21      	ldr	r1, [r4, #32]
 801cb46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cb48:	4643      	mov	r3, r8
 801cb4a:	463a      	mov	r2, r7
 801cb4c:	4628      	mov	r0, r5
 801cb4e:	47b0      	blx	r6
 801cb50:	2800      	cmp	r0, #0
 801cb52:	dc06      	bgt.n	801cb62 <__sflush_r+0xfe>
 801cb54:	89a3      	ldrh	r3, [r4, #12]
 801cb56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb5a:	81a3      	strh	r3, [r4, #12]
 801cb5c:	f04f 30ff 	mov.w	r0, #4294967295
 801cb60:	e78e      	b.n	801ca80 <__sflush_r+0x1c>
 801cb62:	4407      	add	r7, r0
 801cb64:	eba8 0800 	sub.w	r8, r8, r0
 801cb68:	e7e9      	b.n	801cb3e <__sflush_r+0xda>
 801cb6a:	bf00      	nop
 801cb6c:	dfbffffe 	.word	0xdfbffffe

0801cb70 <_fflush_r>:
 801cb70:	b538      	push	{r3, r4, r5, lr}
 801cb72:	690b      	ldr	r3, [r1, #16]
 801cb74:	4605      	mov	r5, r0
 801cb76:	460c      	mov	r4, r1
 801cb78:	b913      	cbnz	r3, 801cb80 <_fflush_r+0x10>
 801cb7a:	2500      	movs	r5, #0
 801cb7c:	4628      	mov	r0, r5
 801cb7e:	bd38      	pop	{r3, r4, r5, pc}
 801cb80:	b118      	cbz	r0, 801cb8a <_fflush_r+0x1a>
 801cb82:	6a03      	ldr	r3, [r0, #32]
 801cb84:	b90b      	cbnz	r3, 801cb8a <_fflush_r+0x1a>
 801cb86:	f7ff fa2f 	bl	801bfe8 <__sinit>
 801cb8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	d0f3      	beq.n	801cb7a <_fflush_r+0xa>
 801cb92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cb94:	07d0      	lsls	r0, r2, #31
 801cb96:	d404      	bmi.n	801cba2 <_fflush_r+0x32>
 801cb98:	0599      	lsls	r1, r3, #22
 801cb9a:	d402      	bmi.n	801cba2 <_fflush_r+0x32>
 801cb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb9e:	f7ff fbd2 	bl	801c346 <__retarget_lock_acquire_recursive>
 801cba2:	4628      	mov	r0, r5
 801cba4:	4621      	mov	r1, r4
 801cba6:	f7ff ff5d 	bl	801ca64 <__sflush_r>
 801cbaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cbac:	07da      	lsls	r2, r3, #31
 801cbae:	4605      	mov	r5, r0
 801cbb0:	d4e4      	bmi.n	801cb7c <_fflush_r+0xc>
 801cbb2:	89a3      	ldrh	r3, [r4, #12]
 801cbb4:	059b      	lsls	r3, r3, #22
 801cbb6:	d4e1      	bmi.n	801cb7c <_fflush_r+0xc>
 801cbb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cbba:	f7ff fbc5 	bl	801c348 <__retarget_lock_release_recursive>
 801cbbe:	e7dd      	b.n	801cb7c <_fflush_r+0xc>

0801cbc0 <__swbuf_r>:
 801cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbc2:	460e      	mov	r6, r1
 801cbc4:	4614      	mov	r4, r2
 801cbc6:	4605      	mov	r5, r0
 801cbc8:	b118      	cbz	r0, 801cbd2 <__swbuf_r+0x12>
 801cbca:	6a03      	ldr	r3, [r0, #32]
 801cbcc:	b90b      	cbnz	r3, 801cbd2 <__swbuf_r+0x12>
 801cbce:	f7ff fa0b 	bl	801bfe8 <__sinit>
 801cbd2:	69a3      	ldr	r3, [r4, #24]
 801cbd4:	60a3      	str	r3, [r4, #8]
 801cbd6:	89a3      	ldrh	r3, [r4, #12]
 801cbd8:	071a      	lsls	r2, r3, #28
 801cbda:	d525      	bpl.n	801cc28 <__swbuf_r+0x68>
 801cbdc:	6923      	ldr	r3, [r4, #16]
 801cbde:	b31b      	cbz	r3, 801cc28 <__swbuf_r+0x68>
 801cbe0:	6823      	ldr	r3, [r4, #0]
 801cbe2:	6922      	ldr	r2, [r4, #16]
 801cbe4:	1a98      	subs	r0, r3, r2
 801cbe6:	6963      	ldr	r3, [r4, #20]
 801cbe8:	b2f6      	uxtb	r6, r6
 801cbea:	4283      	cmp	r3, r0
 801cbec:	4637      	mov	r7, r6
 801cbee:	dc04      	bgt.n	801cbfa <__swbuf_r+0x3a>
 801cbf0:	4621      	mov	r1, r4
 801cbf2:	4628      	mov	r0, r5
 801cbf4:	f7ff ffbc 	bl	801cb70 <_fflush_r>
 801cbf8:	b9e0      	cbnz	r0, 801cc34 <__swbuf_r+0x74>
 801cbfa:	68a3      	ldr	r3, [r4, #8]
 801cbfc:	3b01      	subs	r3, #1
 801cbfe:	60a3      	str	r3, [r4, #8]
 801cc00:	6823      	ldr	r3, [r4, #0]
 801cc02:	1c5a      	adds	r2, r3, #1
 801cc04:	6022      	str	r2, [r4, #0]
 801cc06:	701e      	strb	r6, [r3, #0]
 801cc08:	6962      	ldr	r2, [r4, #20]
 801cc0a:	1c43      	adds	r3, r0, #1
 801cc0c:	429a      	cmp	r2, r3
 801cc0e:	d004      	beq.n	801cc1a <__swbuf_r+0x5a>
 801cc10:	89a3      	ldrh	r3, [r4, #12]
 801cc12:	07db      	lsls	r3, r3, #31
 801cc14:	d506      	bpl.n	801cc24 <__swbuf_r+0x64>
 801cc16:	2e0a      	cmp	r6, #10
 801cc18:	d104      	bne.n	801cc24 <__swbuf_r+0x64>
 801cc1a:	4621      	mov	r1, r4
 801cc1c:	4628      	mov	r0, r5
 801cc1e:	f7ff ffa7 	bl	801cb70 <_fflush_r>
 801cc22:	b938      	cbnz	r0, 801cc34 <__swbuf_r+0x74>
 801cc24:	4638      	mov	r0, r7
 801cc26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cc28:	4621      	mov	r1, r4
 801cc2a:	4628      	mov	r0, r5
 801cc2c:	f000 f806 	bl	801cc3c <__swsetup_r>
 801cc30:	2800      	cmp	r0, #0
 801cc32:	d0d5      	beq.n	801cbe0 <__swbuf_r+0x20>
 801cc34:	f04f 37ff 	mov.w	r7, #4294967295
 801cc38:	e7f4      	b.n	801cc24 <__swbuf_r+0x64>
	...

0801cc3c <__swsetup_r>:
 801cc3c:	b538      	push	{r3, r4, r5, lr}
 801cc3e:	4b2a      	ldr	r3, [pc, #168]	; (801cce8 <__swsetup_r+0xac>)
 801cc40:	4605      	mov	r5, r0
 801cc42:	6818      	ldr	r0, [r3, #0]
 801cc44:	460c      	mov	r4, r1
 801cc46:	b118      	cbz	r0, 801cc50 <__swsetup_r+0x14>
 801cc48:	6a03      	ldr	r3, [r0, #32]
 801cc4a:	b90b      	cbnz	r3, 801cc50 <__swsetup_r+0x14>
 801cc4c:	f7ff f9cc 	bl	801bfe8 <__sinit>
 801cc50:	89a3      	ldrh	r3, [r4, #12]
 801cc52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc56:	0718      	lsls	r0, r3, #28
 801cc58:	d422      	bmi.n	801cca0 <__swsetup_r+0x64>
 801cc5a:	06d9      	lsls	r1, r3, #27
 801cc5c:	d407      	bmi.n	801cc6e <__swsetup_r+0x32>
 801cc5e:	2309      	movs	r3, #9
 801cc60:	602b      	str	r3, [r5, #0]
 801cc62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cc66:	81a3      	strh	r3, [r4, #12]
 801cc68:	f04f 30ff 	mov.w	r0, #4294967295
 801cc6c:	e034      	b.n	801ccd8 <__swsetup_r+0x9c>
 801cc6e:	0758      	lsls	r0, r3, #29
 801cc70:	d512      	bpl.n	801cc98 <__swsetup_r+0x5c>
 801cc72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc74:	b141      	cbz	r1, 801cc88 <__swsetup_r+0x4c>
 801cc76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cc7a:	4299      	cmp	r1, r3
 801cc7c:	d002      	beq.n	801cc84 <__swsetup_r+0x48>
 801cc7e:	4628      	mov	r0, r5
 801cc80:	f7ff fbd0 	bl	801c424 <_free_r>
 801cc84:	2300      	movs	r3, #0
 801cc86:	6363      	str	r3, [r4, #52]	; 0x34
 801cc88:	89a3      	ldrh	r3, [r4, #12]
 801cc8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cc8e:	81a3      	strh	r3, [r4, #12]
 801cc90:	2300      	movs	r3, #0
 801cc92:	6063      	str	r3, [r4, #4]
 801cc94:	6923      	ldr	r3, [r4, #16]
 801cc96:	6023      	str	r3, [r4, #0]
 801cc98:	89a3      	ldrh	r3, [r4, #12]
 801cc9a:	f043 0308 	orr.w	r3, r3, #8
 801cc9e:	81a3      	strh	r3, [r4, #12]
 801cca0:	6923      	ldr	r3, [r4, #16]
 801cca2:	b94b      	cbnz	r3, 801ccb8 <__swsetup_r+0x7c>
 801cca4:	89a3      	ldrh	r3, [r4, #12]
 801cca6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ccaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ccae:	d003      	beq.n	801ccb8 <__swsetup_r+0x7c>
 801ccb0:	4621      	mov	r1, r4
 801ccb2:	4628      	mov	r0, r5
 801ccb4:	f000 f840 	bl	801cd38 <__smakebuf_r>
 801ccb8:	89a0      	ldrh	r0, [r4, #12]
 801ccba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ccbe:	f010 0301 	ands.w	r3, r0, #1
 801ccc2:	d00a      	beq.n	801ccda <__swsetup_r+0x9e>
 801ccc4:	2300      	movs	r3, #0
 801ccc6:	60a3      	str	r3, [r4, #8]
 801ccc8:	6963      	ldr	r3, [r4, #20]
 801ccca:	425b      	negs	r3, r3
 801cccc:	61a3      	str	r3, [r4, #24]
 801ccce:	6923      	ldr	r3, [r4, #16]
 801ccd0:	b943      	cbnz	r3, 801cce4 <__swsetup_r+0xa8>
 801ccd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ccd6:	d1c4      	bne.n	801cc62 <__swsetup_r+0x26>
 801ccd8:	bd38      	pop	{r3, r4, r5, pc}
 801ccda:	0781      	lsls	r1, r0, #30
 801ccdc:	bf58      	it	pl
 801ccde:	6963      	ldrpl	r3, [r4, #20]
 801cce0:	60a3      	str	r3, [r4, #8]
 801cce2:	e7f4      	b.n	801ccce <__swsetup_r+0x92>
 801cce4:	2000      	movs	r0, #0
 801cce6:	e7f7      	b.n	801ccd8 <__swsetup_r+0x9c>
 801cce8:	240000d8 	.word	0x240000d8

0801ccec <__swhatbuf_r>:
 801ccec:	b570      	push	{r4, r5, r6, lr}
 801ccee:	460c      	mov	r4, r1
 801ccf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ccf4:	2900      	cmp	r1, #0
 801ccf6:	b096      	sub	sp, #88	; 0x58
 801ccf8:	4615      	mov	r5, r2
 801ccfa:	461e      	mov	r6, r3
 801ccfc:	da0d      	bge.n	801cd1a <__swhatbuf_r+0x2e>
 801ccfe:	89a3      	ldrh	r3, [r4, #12]
 801cd00:	f013 0f80 	tst.w	r3, #128	; 0x80
 801cd04:	f04f 0100 	mov.w	r1, #0
 801cd08:	bf0c      	ite	eq
 801cd0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801cd0e:	2340      	movne	r3, #64	; 0x40
 801cd10:	2000      	movs	r0, #0
 801cd12:	6031      	str	r1, [r6, #0]
 801cd14:	602b      	str	r3, [r5, #0]
 801cd16:	b016      	add	sp, #88	; 0x58
 801cd18:	bd70      	pop	{r4, r5, r6, pc}
 801cd1a:	466a      	mov	r2, sp
 801cd1c:	f000 f848 	bl	801cdb0 <_fstat_r>
 801cd20:	2800      	cmp	r0, #0
 801cd22:	dbec      	blt.n	801ccfe <__swhatbuf_r+0x12>
 801cd24:	9901      	ldr	r1, [sp, #4]
 801cd26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801cd2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801cd2e:	4259      	negs	r1, r3
 801cd30:	4159      	adcs	r1, r3
 801cd32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cd36:	e7eb      	b.n	801cd10 <__swhatbuf_r+0x24>

0801cd38 <__smakebuf_r>:
 801cd38:	898b      	ldrh	r3, [r1, #12]
 801cd3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cd3c:	079d      	lsls	r5, r3, #30
 801cd3e:	4606      	mov	r6, r0
 801cd40:	460c      	mov	r4, r1
 801cd42:	d507      	bpl.n	801cd54 <__smakebuf_r+0x1c>
 801cd44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801cd48:	6023      	str	r3, [r4, #0]
 801cd4a:	6123      	str	r3, [r4, #16]
 801cd4c:	2301      	movs	r3, #1
 801cd4e:	6163      	str	r3, [r4, #20]
 801cd50:	b002      	add	sp, #8
 801cd52:	bd70      	pop	{r4, r5, r6, pc}
 801cd54:	ab01      	add	r3, sp, #4
 801cd56:	466a      	mov	r2, sp
 801cd58:	f7ff ffc8 	bl	801ccec <__swhatbuf_r>
 801cd5c:	9900      	ldr	r1, [sp, #0]
 801cd5e:	4605      	mov	r5, r0
 801cd60:	4630      	mov	r0, r6
 801cd62:	f7ff f81b 	bl	801bd9c <_malloc_r>
 801cd66:	b948      	cbnz	r0, 801cd7c <__smakebuf_r+0x44>
 801cd68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cd6c:	059a      	lsls	r2, r3, #22
 801cd6e:	d4ef      	bmi.n	801cd50 <__smakebuf_r+0x18>
 801cd70:	f023 0303 	bic.w	r3, r3, #3
 801cd74:	f043 0302 	orr.w	r3, r3, #2
 801cd78:	81a3      	strh	r3, [r4, #12]
 801cd7a:	e7e3      	b.n	801cd44 <__smakebuf_r+0xc>
 801cd7c:	89a3      	ldrh	r3, [r4, #12]
 801cd7e:	6020      	str	r0, [r4, #0]
 801cd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cd84:	81a3      	strh	r3, [r4, #12]
 801cd86:	9b00      	ldr	r3, [sp, #0]
 801cd88:	6163      	str	r3, [r4, #20]
 801cd8a:	9b01      	ldr	r3, [sp, #4]
 801cd8c:	6120      	str	r0, [r4, #16]
 801cd8e:	b15b      	cbz	r3, 801cda8 <__smakebuf_r+0x70>
 801cd90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd94:	4630      	mov	r0, r6
 801cd96:	f000 f81d 	bl	801cdd4 <_isatty_r>
 801cd9a:	b128      	cbz	r0, 801cda8 <__smakebuf_r+0x70>
 801cd9c:	89a3      	ldrh	r3, [r4, #12]
 801cd9e:	f023 0303 	bic.w	r3, r3, #3
 801cda2:	f043 0301 	orr.w	r3, r3, #1
 801cda6:	81a3      	strh	r3, [r4, #12]
 801cda8:	89a3      	ldrh	r3, [r4, #12]
 801cdaa:	431d      	orrs	r5, r3
 801cdac:	81a5      	strh	r5, [r4, #12]
 801cdae:	e7cf      	b.n	801cd50 <__smakebuf_r+0x18>

0801cdb0 <_fstat_r>:
 801cdb0:	b538      	push	{r3, r4, r5, lr}
 801cdb2:	4d07      	ldr	r5, [pc, #28]	; (801cdd0 <_fstat_r+0x20>)
 801cdb4:	2300      	movs	r3, #0
 801cdb6:	4604      	mov	r4, r0
 801cdb8:	4608      	mov	r0, r1
 801cdba:	4611      	mov	r1, r2
 801cdbc:	602b      	str	r3, [r5, #0]
 801cdbe:	f7e4 f9c8 	bl	8001152 <_fstat>
 801cdc2:	1c43      	adds	r3, r0, #1
 801cdc4:	d102      	bne.n	801cdcc <_fstat_r+0x1c>
 801cdc6:	682b      	ldr	r3, [r5, #0]
 801cdc8:	b103      	cbz	r3, 801cdcc <_fstat_r+0x1c>
 801cdca:	6023      	str	r3, [r4, #0]
 801cdcc:	bd38      	pop	{r3, r4, r5, pc}
 801cdce:	bf00      	nop
 801cdd0:	2401b428 	.word	0x2401b428

0801cdd4 <_isatty_r>:
 801cdd4:	b538      	push	{r3, r4, r5, lr}
 801cdd6:	4d06      	ldr	r5, [pc, #24]	; (801cdf0 <_isatty_r+0x1c>)
 801cdd8:	2300      	movs	r3, #0
 801cdda:	4604      	mov	r4, r0
 801cddc:	4608      	mov	r0, r1
 801cdde:	602b      	str	r3, [r5, #0]
 801cde0:	f7e4 f9c7 	bl	8001172 <_isatty>
 801cde4:	1c43      	adds	r3, r0, #1
 801cde6:	d102      	bne.n	801cdee <_isatty_r+0x1a>
 801cde8:	682b      	ldr	r3, [r5, #0]
 801cdea:	b103      	cbz	r3, 801cdee <_isatty_r+0x1a>
 801cdec:	6023      	str	r3, [r4, #0]
 801cdee:	bd38      	pop	{r3, r4, r5, pc}
 801cdf0:	2401b428 	.word	0x2401b428

0801cdf4 <_init>:
 801cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cdf6:	bf00      	nop
 801cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cdfa:	bc08      	pop	{r3}
 801cdfc:	469e      	mov	lr, r3
 801cdfe:	4770      	bx	lr

0801ce00 <_fini>:
 801ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ce02:	bf00      	nop
 801ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ce06:	bc08      	pop	{r3}
 801ce08:	469e      	mov	lr, r3
 801ce0a:	4770      	bx	lr
