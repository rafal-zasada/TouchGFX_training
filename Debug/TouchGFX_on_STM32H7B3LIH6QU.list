
TouchGFX_on_STM32H7B3LIH6QU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e2d8  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba0  0801e588  0801e588  0002e588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000059e  08020128  08020128  00030128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000002c  080206c8  080206c8  000306c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000716c4  080206f4  080206f4  000306f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000003c  08091db8  08091db8  000a1db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .init_array   00000014  08091df4  08091df4  000a1df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  08091e08  08091e08  000a1e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000e0  24000000  08091e10  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0001b56c  240000e0  08091ef0  000b00e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2401b64c  08091ef0  000bb64c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000b00e0  2**0
                  CONTENTS, READONLY
 13 .comment      000000c2  00000000  00000000  000b010e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0008775b  00000000  00000000  000b01d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000101be  00000000  00000000  0013792b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000034c0  00000000  00000000  00147af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000272a  00000000  00000000  0014afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003ec3d  00000000  00000000  0014d6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e9f7  00000000  00000000  0018c317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0016ff23  00000000  00000000  001cad0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000e5bc  00000000  00000000  0033ac34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  003491f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000e0 	.word	0x240000e0
 80002cc:	00000000 	.word	0x00000000
 80002d0:	0801e570 	.word	0x0801e570

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000e4 	.word	0x240000e4
 80002ec:	0801e570 	.word	0x0801e570

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <MX_CRC_Init+0x3c>)
 8000396:	4a0e      	ldr	r2, [pc, #56]	; (80003d0 <MX_CRC_Init+0x40>)
 8000398:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <MX_CRC_Init+0x3c>)
 800039c:	2200      	movs	r2, #0
 800039e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <MX_CRC_Init+0x3c>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <MX_CRC_Init+0x3c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <MX_CRC_Init+0x3c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <MX_CRC_Init+0x3c>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <MX_CRC_Init+0x3c>)
 80003ba:	f001 fa19 	bl	80017f0 <HAL_CRC_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003c4:	f000 fd7c 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	240000fc 	.word	0x240000fc
 80003d0:	40023000 	.word	0x40023000

080003d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a0b      	ldr	r2, [pc, #44]	; (8000410 <HAL_CRC_MspInit+0x3c>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d10e      	bne.n	8000404 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_CRC_MspInit+0x40>)
 80003e8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80003ec:	4a09      	ldr	r2, [pc, #36]	; (8000414 <HAL_CRC_MspInit+0x40>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80003f6:	4b07      	ldr	r3, [pc, #28]	; (8000414 <HAL_CRC_MspInit+0x40>)
 80003f8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80003fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000404:	bf00      	nop
 8000406:	3714      	adds	r7, #20
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023000 	.word	0x40023000
 8000414:	58024400 	.word	0x58024400

08000418 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800041c:	4b19      	ldr	r3, [pc, #100]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800041e:	4a1a      	ldr	r2, [pc, #104]	; (8000488 <MX_DMA2D_Init+0x70>)
 8000420:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000422:	4b18      	ldr	r3, [pc, #96]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800042a:	2201      	movs	r2, #1
 800042c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000436:	2200      	movs	r2, #0
 8000438:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800043c:	2201      	movs	r2, #1
 800043e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000440:	4b10      	ldr	r3, [pc, #64]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000442:	2200      	movs	r2, #0
 8000444:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000448:	2200      	movs	r2, #0
 800044a:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800044e:	2200      	movs	r2, #0
 8000450:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000454:	2200      	movs	r2, #0
 8000456:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <MX_DMA2D_Init+0x6c>)
 800045a:	2200      	movs	r2, #0
 800045c:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800045e:	4809      	ldr	r0, [pc, #36]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000460:	f001 fab8 	bl	80019d4 <HAL_DMA2D_Init>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800046a:	f000 fd29 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800046e:	2101      	movs	r1, #1
 8000470:	4804      	ldr	r0, [pc, #16]	; (8000484 <MX_DMA2D_Init+0x6c>)
 8000472:	f001 fc23 	bl	8001cbc <HAL_DMA2D_ConfigLayer>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_DMA2D_Init+0x68>
  {
    Error_Handler();
 800047c:	f000 fd20 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	24000120 	.word	0x24000120
 8000488:	52001000 	.word	0x52001000

0800048c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_DMA2D_MspInit+0x48>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d116      	bne.n	80004cc <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <HAL_DMA2D_MspInit+0x4c>)
 80004a0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <HAL_DMA2D_MspInit+0x4c>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_DMA2D_MspInit+0x4c>)
 80004b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80004b4:	f003 0310 	and.w	r3, r3, #16
 80004b8:	60fb      	str	r3, [r7, #12]
 80004ba:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2105      	movs	r1, #5
 80004c0:	205a      	movs	r0, #90	; 0x5a
 80004c2:	f001 f8f1 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80004c6:	205a      	movs	r0, #90	; 0x5a
 80004c8:	f001 f908 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	52001000 	.word	0x52001000
 80004d8:	58024400 	.word	0x58024400

080004dc <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80004f4:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_FMC_Init+0x9c>)
 80004f6:	4a21      	ldr	r2, [pc, #132]	; (800057c <MX_FMC_Init+0xa0>)
 80004f8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <MX_FMC_Init+0x9c>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000500:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_FMC_Init+0x9c>)
 8000502:	2201      	movs	r2, #1
 8000504:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <MX_FMC_Init+0x9c>)
 8000508:	2204      	movs	r2, #4
 800050a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800050c:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <MX_FMC_Init+0x9c>)
 800050e:	2210      	movs	r2, #16
 8000510:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_FMC_Init+0x9c>)
 8000514:	2240      	movs	r2, #64	; 0x40
 8000516:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <MX_FMC_Init+0x9c>)
 800051a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800051e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000520:	4b15      	ldr	r3, [pc, #84]	; (8000578 <MX_FMC_Init+0x9c>)
 8000522:	2200      	movs	r2, #0
 8000524:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000526:	4b14      	ldr	r3, [pc, #80]	; (8000578 <MX_FMC_Init+0x9c>)
 8000528:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800052c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_FMC_Init+0x9c>)
 8000530:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000534:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <MX_FMC_Init+0x9c>)
 8000538:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053c:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800053e:	2302      	movs	r3, #2
 8000540:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000542:	2307      	movs	r3, #7
 8000544:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000546:	2304      	movs	r3, #4
 8000548:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800054a:	2307      	movs	r3, #7
 800054c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800054e:	2303      	movs	r3, #3
 8000550:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000556:	2302      	movs	r3, #2
 8000558:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	4619      	mov	r1, r3
 800055e:	4806      	ldr	r0, [pc, #24]	; (8000578 <MX_FMC_Init+0x9c>)
 8000560:	f004 fe62 	bl	8005228 <HAL_SDRAM_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_FMC_Init+0x92>
  {
    Error_Handler( );
 800056a:	f000 fca9 	bl	8000ec0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800056e:	bf00      	nop
 8000570:	3720      	adds	r7, #32
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	24000188 	.word	0x24000188
 800057c:	52004140 	.word	0x52004140

08000580 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000580:	b580      	push	{r7, lr}
 8000582:	b0b8      	sub	sp, #224	; 0xe0
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <HAL_FMC_MspInit+0x15c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	f040 8099 	bne.w	80006d2 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80005a0:	4b4e      	ldr	r3, [pc, #312]	; (80006dc <HAL_FMC_MspInit+0x15c>)
 80005a2:	2201      	movs	r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	22c0      	movs	r2, #192	; 0xc0
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f01d f963 	bl	801d87a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80005b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005b8:	f04f 0300 	mov.w	r3, #0
 80005bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fb0b 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 80005d4:	f000 fc74 	bl	8000ec0 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80005d8:	4b41      	ldr	r3, [pc, #260]	; (80006e0 <HAL_FMC_MspInit+0x160>)
 80005da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80005de:	4a40      	ldr	r2, [pc, #256]	; (80006e0 <HAL_FMC_MspInit+0x160>)
 80005e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e4:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80005e8:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <HAL_FMC_MspInit+0x160>)
 80005ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80005ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80005f6:	f248 1333 	movw	r3, #33075	; 0x8133
 80005fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005fe:	2302      	movs	r3, #2
 8000600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000610:	230c      	movs	r3, #12
 8000612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000616:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800061a:	4619      	mov	r1, r3
 800061c:	4831      	ldr	r0, [pc, #196]	; (80006e4 <HAL_FMC_MspInit+0x164>)
 800061e:	f001 fbfb 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_15
 8000622:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062a:	2302      	movs	r3, #2
 800062c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800063c:	230c      	movs	r3, #12
 800063e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000642:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000646:	4619      	mov	r1, r3
 8000648:	4827      	ldr	r0, [pc, #156]	; (80006e8 <HAL_FMC_MspInit+0x168>)
 800064a:	f001 fbe5 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_7
 800064e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000652:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000656:	2302      	movs	r3, #2
 8000658:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000662:	2303      	movs	r3, #3
 8000664:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000668:	230c      	movs	r3, #12
 800066a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000672:	4619      	mov	r1, r3
 8000674:	481d      	ldr	r0, [pc, #116]	; (80006ec <HAL_FMC_MspInit+0x16c>)
 8000676:	f001 fbcf 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800067a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800067e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_11
                          |GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000682:	2302      	movs	r3, #2
 8000684:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068e:	2303      	movs	r3, #3
 8000690:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000694:	230c      	movs	r3, #12
 8000696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800069a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800069e:	4619      	mov	r1, r3
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <HAL_FMC_MspInit+0x170>)
 80006a2:	f001 fbb9 	bl	8001e18 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_7;
 80006a6:	23e0      	movs	r3, #224	; 0xe0
 80006a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006be:	230c      	movs	r3, #12
 80006c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006c4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80006c8:	4619      	mov	r1, r3
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <HAL_FMC_MspInit+0x174>)
 80006cc:	f001 fba4 	bl	8001e18 <HAL_GPIO_Init>
 80006d0:	e000      	b.n	80006d4 <HAL_FMC_MspInit+0x154>
    return;
 80006d2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80006d4:	37e0      	adds	r7, #224	; 0xe0
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	240001bc 	.word	0x240001bc
 80006e0:	58024400 	.word	0x58024400
 80006e4:	58021800 	.word	0x58021800
 80006e8:	58020c00 	.word	0x58020c00
 80006ec:	58021000 	.word	0x58021000
 80006f0:	58021400 	.word	0x58021400
 80006f4:	58021c00 	.word	0x58021c00

080006f8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000700:	f7ff ff3e 	bl	8000580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
void vApplicationIdleHook( void )
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <MX_FREERTOS_Init+0x28>)
 8000722:	2100      	movs	r1, #0
 8000724:	4808      	ldr	r0, [pc, #32]	; (8000748 <MX_FREERTOS_Init+0x2c>)
 8000726:	f005 fa81 	bl	8005c2c <osThreadNew>
 800072a:	4603      	mov	r3, r0
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <MX_FREERTOS_Init+0x30>)
 800072e:	6013      	str	r3, [r2, #0]

  /* creation of GUI_Task */
  GUI_TaskHandle = osThreadNew(StartGUI_Task, NULL, &GUI_Task_attributes);
 8000730:	4a07      	ldr	r2, [pc, #28]	; (8000750 <MX_FREERTOS_Init+0x34>)
 8000732:	2100      	movs	r1, #0
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <MX_FREERTOS_Init+0x38>)
 8000736:	f005 fa79 	bl	8005c2c <osThreadNew>
 800073a:	4603      	mov	r3, r0
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <MX_FREERTOS_Init+0x3c>)
 800073e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	0801ef58 	.word	0x0801ef58
 8000748:	0800075d 	.word	0x0800075d
 800074c:	240001c0 	.word	0x240001c0
 8000750:	0801ef7c 	.word	0x0801ef7c
 8000754:	0800076d 	.word	0x0800076d
 8000758:	240001c4 	.word	0x240001c4

0800075c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f005 faf3 	bl	8005d50 <osDelay>
 800076a:	e7fb      	b.n	8000764 <StartDefaultTask+0x8>

0800076c <StartGUI_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGUI_Task */
void StartGUI_Task(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGUI_Task */

	TouchGFX_Task();
 8000774:	f008 fe13 	bl	800939e <TouchGFX_Task>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f005 fae9 	bl	8005d50 <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartGUI_Task+0xc>

08000780 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000796:	4b80      	ldr	r3, [pc, #512]	; (8000998 <MX_GPIO_Init+0x218>)
 8000798:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079c:	4a7e      	ldr	r2, [pc, #504]	; (8000998 <MX_GPIO_Init+0x218>)
 800079e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a6:	4b7c      	ldr	r3, [pc, #496]	; (8000998 <MX_GPIO_Init+0x218>)
 80007a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80007b4:	4b78      	ldr	r3, [pc, #480]	; (8000998 <MX_GPIO_Init+0x218>)
 80007b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ba:	4a77      	ldr	r2, [pc, #476]	; (8000998 <MX_GPIO_Init+0x218>)
 80007bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c4:	4b74      	ldr	r3, [pc, #464]	; (8000998 <MX_GPIO_Init+0x218>)
 80007c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007ce:	61fb      	str	r3, [r7, #28]
 80007d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d2:	4b71      	ldr	r3, [pc, #452]	; (8000998 <MX_GPIO_Init+0x218>)
 80007d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d8:	4a6f      	ldr	r2, [pc, #444]	; (8000998 <MX_GPIO_Init+0x218>)
 80007da:	f043 0308 	orr.w	r3, r3, #8
 80007de:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e2:	4b6d      	ldr	r3, [pc, #436]	; (8000998 <MX_GPIO_Init+0x218>)
 80007e4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e8:	f003 0308 	and.w	r3, r3, #8
 80007ec:	61bb      	str	r3, [r7, #24]
 80007ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f0:	4b69      	ldr	r3, [pc, #420]	; (8000998 <MX_GPIO_Init+0x218>)
 80007f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007f6:	4a68      	ldr	r2, [pc, #416]	; (8000998 <MX_GPIO_Init+0x218>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000800:	4b65      	ldr	r3, [pc, #404]	; (8000998 <MX_GPIO_Init+0x218>)
 8000802:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800080e:	4b62      	ldr	r3, [pc, #392]	; (8000998 <MX_GPIO_Init+0x218>)
 8000810:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000814:	4a60      	ldr	r2, [pc, #384]	; (8000998 <MX_GPIO_Init+0x218>)
 8000816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800081a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <MX_GPIO_Init+0x218>)
 8000820:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b5a      	ldr	r3, [pc, #360]	; (8000998 <MX_GPIO_Init+0x218>)
 800082e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000832:	4a59      	ldr	r2, [pc, #356]	; (8000998 <MX_GPIO_Init+0x218>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <MX_GPIO_Init+0x218>)
 800083e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	4b53      	ldr	r3, [pc, #332]	; (8000998 <MX_GPIO_Init+0x218>)
 800084c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000850:	4a51      	ldr	r2, [pc, #324]	; (8000998 <MX_GPIO_Init+0x218>)
 8000852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000856:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800085a:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <MX_GPIO_Init+0x218>)
 800085c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000868:	4b4b      	ldr	r3, [pc, #300]	; (8000998 <MX_GPIO_Init+0x218>)
 800086a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800086e:	4a4a      	ldr	r2, [pc, #296]	; (8000998 <MX_GPIO_Init+0x218>)
 8000870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000874:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000878:	4b47      	ldr	r3, [pc, #284]	; (8000998 <MX_GPIO_Init+0x218>)
 800087a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000886:	4b44      	ldr	r3, [pc, #272]	; (8000998 <MX_GPIO_Init+0x218>)
 8000888:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088c:	4a42      	ldr	r2, [pc, #264]	; (8000998 <MX_GPIO_Init+0x218>)
 800088e:	f043 0320 	orr.w	r3, r3, #32
 8000892:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MX_GPIO_Init+0x218>)
 8000898:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800089c:	f003 0320 	and.w	r3, r3, #32
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED3_Pin|USER_LED2_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f640 0104 	movw	r1, #2052	; 0x804
 80008aa:	483c      	ldr	r0, [pc, #240]	; (800099c <MX_GPIO_Init+0x21c>)
 80008ac:	f001 fc64 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	f44f 41c4 	mov.w	r1, #25088	; 0x6200
 80008b6:	483a      	ldr	r0, [pc, #232]	; (80009a0 <MX_GPIO_Init+0x220>)
 80008b8:	f001 fc5e 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4838      	ldr	r0, [pc, #224]	; (80009a4 <MX_GPIO_Init+0x224>)
 80008c4:	f001 fc58 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 80008c8:	2201      	movs	r2, #1
 80008ca:	2106      	movs	r1, #6
 80008cc:	4836      	ldr	r0, [pc, #216]	; (80009a8 <MX_GPIO_Init+0x228>)
 80008ce:	f001 fc53 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED3_Pin|USER_LED2_Pin;
 80008d2:	f640 0304 	movw	r3, #2052	; 0x804
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d8:	2301      	movs	r3, #1
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e8:	4619      	mov	r1, r3
 80008ea:	482c      	ldr	r0, [pc, #176]	; (800099c <MX_GPIO_Init+0x21c>)
 80008ec:	f001 fa94 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin|MCU_ACTIVE_Pin;
 80008f0:	f44f 43c4 	mov.w	r3, #25088	; 0x6200
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fe:	2303      	movs	r3, #3
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000906:	4619      	mov	r1, r3
 8000908:	4825      	ldr	r0, [pc, #148]	; (80009a0 <MX_GPIO_Init+0x220>)
 800090a:	f001 fa85 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 800090e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4619      	mov	r1, r3
 8000926:	481f      	ldr	r0, [pc, #124]	; (80009a4 <MX_GPIO_Init+0x224>)
 8000928:	f001 fa76 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800092c:	2304      	movs	r3, #4
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000930:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000936:	2301      	movs	r3, #1
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_GPIO_Init+0x220>)
 8000942:	f001 fa69 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000946:	2302      	movs	r3, #2
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094a:	2301      	movs	r3, #1
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095a:	4619      	mov	r1, r3
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_GPIO_Init+0x228>)
 800095e:	f001 fa5b 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_ON_OFF_Pin;
 8000962:	2304      	movs	r3, #4
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096a:	2301      	movs	r3, #1
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0x228>)
 800097a:	f001 fa4d 	bl	8001e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2100      	movs	r1, #0
 8000982:	2008      	movs	r0, #8
 8000984:	f000 fe90 	bl	80016a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000988:	2008      	movs	r0, #8
 800098a:	f000 fea7 	bl	80016dc <HAL_NVIC_EnableIRQ>

}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	; 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	58024400 	.word	0x58024400
 800099c:	58021800 	.word	0x58021800
 80009a0:	58021c00 	.word	0x58021c00
 80009a4:	58022000 	.word	0x58022000
 80009a8:	58020000 	.word	0x58020000

080009ac <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2234      	movs	r2, #52	; 0x34
 80009b6:	2100      	movs	r1, #0
 80009b8:	4618      	mov	r0, r3
 80009ba:	f01c ff5e 	bl	801d87a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009c0:	4a3a      	ldr	r2, [pc, #232]	; (8000aac <MX_LTDC_Init+0x100>)
 80009c2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009c4:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009d0:	4b35      	ldr	r3, [pc, #212]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009de:	2228      	movs	r2, #40	; 0x28
 80009e0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009e4:	2209      	movs	r2, #9
 80009e6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 42;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009ea:	222a      	movs	r2, #42	; 0x2a
 80009ec:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009f0:	220b      	movs	r2, #11
 80009f2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 522;
 80009f4:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009f6:	f240 220a 	movw	r2, #522	; 0x20a
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 80009fe:	f240 121b 	movw	r2, #283	; 0x11b
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 554;
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a06:	f240 222a 	movw	r2, #554	; 0x22a
 8000a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a0e:	f240 121d 	movw	r2, #285	; 0x11d
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a1c:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a2c:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a2e:	f001 fbfb 	bl	8002228 <HAL_LTDC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a38:	f000 fa42 	bl	8000ec0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000a40:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a44:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000a4a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a4e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000a50:	2301      	movs	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a54:	23ff      	movs	r3, #255	; 0xff
 8000a56:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a60:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000a62:	2305      	movs	r3, #5
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a66:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8000a6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8000a72:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 255;
 8000a78:	23ff      	movs	r3, #255	; 0xff
 8000a7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_LTDC_Init+0xfc>)
 8000a92:	f001 fd51 	bl	8002538 <HAL_LTDC_ConfigLayer>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8000a9c:	f000 fa10 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	240001c8 	.word	0x240001c8
 8000aac:	50001000 	.word	0x50001000

08000ab0 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b0bc      	sub	sp, #240	; 0xf0
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	22c0      	movs	r2, #192	; 0xc0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f01c fed2 	bl	801d87a <memset>
  if(ltdcHandle->Instance==LTDC)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a57      	ldr	r2, [pc, #348]	; (8000c38 <HAL_LTDC_MspInit+0x188>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	f040 80a6 	bne.w	8000c2e <HAL_LTDC_MspInit+0x17e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000ae2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 8000aee:	2318      	movs	r3, #24
 8000af0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 201;
 8000af2:	23c9      	movs	r3, #201	; 0xc9
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000af6:	2302      	movs	r3, #2
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 21;
 8000afe:	2315      	movs	r3, #21
 8000b00:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462.0;
 8000b0a:	f241 5356 	movw	r3, #5462	; 0x1556
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b10:	f107 0318 	add.w	r3, r7, #24
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 f865 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000b20:	f000 f9ce 	bl	8000ec0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000b24:	4b45      	ldr	r3, [pc, #276]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b26:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000b2a:	4a44      	ldr	r2, [pc, #272]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b2c:	f043 0308 	orr.w	r3, r3, #8
 8000b30:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b36:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b42:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b48:	4a3c      	ldr	r2, [pc, #240]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b66:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b84:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_LTDC_MspInit+0x18c>)
 8000b90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_4
 8000b9c:	23fd      	movs	r3, #253	; 0xfd
 8000b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_7|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bb4:	230e      	movs	r3, #14
 8000bb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000bba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481f      	ldr	r0, [pc, #124]	; (8000c40 <HAL_LTDC_MspInit+0x190>)
 8000bc2:	f001 f929 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12
 8000bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5
                          |GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000be0:	230e      	movs	r3, #14
 8000be2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000be6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bea:	4619      	mov	r1, r3
 8000bec:	4815      	ldr	r0, [pc, #84]	; (8000c44 <HAL_LTDC_MspInit+0x194>)
 8000bee:	f001 f913 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_13
 8000bf2:	f24f 0302 	movw	r3, #61442	; 0xf002
 8000bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c0c:	230e      	movs	r3, #14
 8000c0e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c12:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c16:	4619      	mov	r1, r3
 8000c18:	480b      	ldr	r0, [pc, #44]	; (8000c48 <HAL_LTDC_MspInit+0x198>)
 8000c1a:	f001 f8fd 	bl	8001e18 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	2058      	movs	r0, #88	; 0x58
 8000c24:	f000 fd40 	bl	80016a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000c28:	2058      	movs	r0, #88	; 0x58
 8000c2a:	f000 fd57 	bl	80016dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	37f0      	adds	r7, #240	; 0xf0
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	50001000 	.word	0x50001000
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58022800 	.word	0x58022800
 8000c44:	58022400 	.word	0x58022400
 8000c48:	58022000 	.word	0x58022000

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 fbf2 	bl	8001438 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c54:	f000 f8f6 	bl	8000e44 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f820 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f7ff fd90 	bl	8000780 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000c60:	f7ff fbda 	bl	8000418 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000c64:	f7ff fc3a 	bl	80004dc <MX_FMC_Init>
  MX_OCTOSPI1_Init();
 8000c68:	f000 f930 	bl	8000ecc <MX_OCTOSPI1_Init>
  MX_CRC_Init();
 8000c6c:	f7ff fb90 	bl	8000390 <MX_CRC_Init>
  MX_LTDC_Init();
 8000c70:	f7ff fe9c 	bl	80009ac <MX_LTDC_Init>
  MX_TouchGFX_Init();
 8000c74:	f008 fb8b 	bl	800938e <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8000c78:	f008 fb82 	bl	8009380 <MX_TouchGFX_PreOSInit>

  // ------------------------- Development board copied code start ----------------------------------


  // this code has been copied from development board example
  SDRAM_Initialization_Sequence(&hsdram1, &command);
 8000c7c:	4905      	ldr	r1, [pc, #20]	; (8000c94 <main+0x48>)
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <main+0x4c>)
 8000c80:	f000 f882 	bl	8000d88 <SDRAM_Initialization_Sequence>
  // ------------------------- Development board copied code end ------------------------------------

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000c84:	f004 ff88 	bl	8005b98 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000c88:	f7ff fd48 	bl	800071c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c8c:	f004 ffa8 	bl	8005be0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <main+0x44>
 8000c92:	bf00      	nop
 8000c94:	24000270 	.word	0x24000270
 8000c98:	24000188 	.word	0x24000188

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca6:	224c      	movs	r2, #76	; 0x4c
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f01c fde5 	bl	801d87a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f01c fddf 	bl	801d87a <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000cbc:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <SystemClock_Config+0xe4>)
 8000cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000cc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f001 ff48 	bl	8002b5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
 8000cd0:	4b2c      	ldr	r3, [pc, #176]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a2b      	ldr	r2, [pc, #172]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b29      	ldr	r3, [pc, #164]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ce8:	bf00      	nop
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <SystemClock_Config+0xe8>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf6:	d1f8      	bne.n	8000cea <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 280;
 8000d0e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000d12:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d14:	2302      	movs	r3, #2
 8000d16:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000d20:	2304      	movs	r3, #4
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff6d 	bl	8002c10 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d3c:	f000 f8c0 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	233f      	movs	r3, #63	; 0x3f
 8000d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d44:	2303      	movs	r3, #3
 8000d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d54:	2340      	movs	r3, #64	; 0x40
 8000d56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d5e:	2340      	movs	r3, #64	; 0x40
 8000d60:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2103      	movs	r1, #3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fb84 	bl	8003474 <HAL_RCC_ClockConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000d72:	f000 f8a5 	bl	8000ec0 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3770      	adds	r7, #112	; 0x70
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58024800 	.word	0x58024800

08000d88 <SDRAM_Initialization_Sequence>:

/* USER CODE BEGIN 4 */

// ------------------------- Development board copied code start ----------------------------------
static void SDRAM_Initialization_Sequence(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmpmrd =0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
  /* Step 1:  Configure a clock configuration enable command */
  Command->CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	2208      	movs	r2, #8
 8000da0:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	2201      	movs	r2, #1
 8000da6:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000dae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f004 fa73 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fb98 	bl	80014f0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command->CommandMode = FMC_SDRAM_CMD_PALL;
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2208      	movs	r2, #8
 8000dca:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2201      	movs	r2, #1
 8000dd0:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ddc:	6839      	ldr	r1, [r7, #0]
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f004 fa5e 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 4 : Configure a Auto-Refresh command */
  Command->CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2203      	movs	r2, #3
 8000de8:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2208      	movs	r2, #8
 8000dee:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 8;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2208      	movs	r2, #8
 8000df4:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = 0;
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000dfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e00:	6839      	ldr	r1, [r7, #0]
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f004 fa4c 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000e08:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000e0c:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_2           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command->CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	2204      	movs	r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
  Command->CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	2208      	movs	r2, #8
 8000e18:	605a      	str	r2, [r3, #4]
  Command->AutoRefreshNumber = 1;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	609a      	str	r2, [r3, #8]
  Command->ModeRegisterDefinition = tmpmrd;
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(hsdram, Command, SDRAM_TIMEOUT);
 8000e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e2a:	6839      	ldr	r1, [r7, #0]
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f004 fa37 	bl	80052a0 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8000e32:	f240 6103 	movw	r1, #1539	; 0x603
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f004 fa67 	bl	800530a <HAL_SDRAM_ProgramRefreshRate>

}
 8000e3c:	bf00      	nop
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e56:	f000 fc4f 	bl	80016f8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e66:	231f      	movs	r3, #31
 8000e68:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e6a:	2387      	movs	r3, #135	; 0x87
 8000e6c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e72:	2300      	movs	r3, #0
 8000e74:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e86:	463b      	mov	r3, r7
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fc6d 	bl	8001768 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f000 fc4a 	bl	8001728 <HAL_MPU_Enable>

}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eae:	f000 faff 	bl	80014b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40001000 	.word	0x40001000

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <MX_OCTOSPI1_Init>:

OSPI_HandleTypeDef hospi1;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END OCTOSPI1_Init 0 */

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <MX_OCTOSPI1_Init+0x7c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 26;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000eea:	221a      	movs	r2, #26
 8000eec:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f20:	2208      	movs	r2, #8
 8000f22:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_OCTOSPI1_Init+0x78>)
 8000f32:	f001 fd11 	bl	8002958 <HAL_OSPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8000f3c:	f7ff ffc0 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	24000280 	.word	0x24000280
 8000f48:	52005000 	.word	0x52005000

08000f4c <HAL_OSPI_MspInit>:

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0b4      	sub	sp, #208	; 0xd0
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f54:	f107 0310 	add.w	r3, r7, #16
 8000f58:	22c0      	movs	r2, #192	; 0xc0
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f01c fc8c 	bl	801d87a <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <HAL_OSPI_MspInit+0x88>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d12f      	bne.n	8000fcc <HAL_OSPI_MspInit+0x80>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4618      	mov	r0, r3
 8000f82:	f002 fe2f 	bl	8003be4 <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_OSPI_MspInit+0x44>
    {
      Error_Handler();
 8000f8c:	f7ff ff98 	bl	8000ec0 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000f92:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000f98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f9c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fa2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fb0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fb4:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_OSPI_MspInit+0x8c>)
 8000fc0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }
}
 8000fcc:	bf00      	nop
 8000fce:	37d0      	adds	r7, #208	; 0xd0
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	52005000 	.word	0x52005000
 8000fd8:	58024400 	.word	0x58024400

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x38>)
 8000fe4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_MspInit+0x38>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_MspInit+0x38>)
 8000ff4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	210f      	movs	r1, #15
 8001004:	f06f 0001 	mvn.w	r0, #1
 8001008:	f000 fb4e 	bl	80016a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	58024400 	.word	0x58024400

08001018 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b090      	sub	sp, #64	; 0x40
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b0f      	cmp	r3, #15
 8001024:	d827      	bhi.n	8001076 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001026:	2200      	movs	r2, #0
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	2036      	movs	r0, #54	; 0x36
 800102c:	f000 fb3c 	bl	80016a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f000 fb53 	bl	80016dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001036:	4a29      	ldr	r2, [pc, #164]	; (80010dc <HAL_InitTick+0xc4>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800103c:	4b28      	ldr	r3, [pc, #160]	; (80010e0 <HAL_InitTick+0xc8>)
 800103e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001042:	4a27      	ldr	r2, [pc, #156]	; (80010e0 <HAL_InitTick+0xc8>)
 8001044:	f043 0310 	orr.w	r3, r3, #16
 8001048:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <HAL_InitTick+0xc8>)
 800104e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800105a:	f107 0210 	add.w	r2, r7, #16
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f002 fd7b 	bl	8003b60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800106e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_InitTick+0x6a>
 8001074:	e001      	b.n	800107a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e02b      	b.n	80010d2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800107a:	f002 fd5b 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 800107e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001080:	e004      	b.n	800108c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001082:	f002 fd57 	bl	8003b34 <HAL_RCC_GetPCLK1Freq>
 8001086:	4603      	mov	r3, r0
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108e:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <HAL_InitTick+0xcc>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	0c9b      	lsrs	r3, r3, #18
 8001096:	3b01      	subs	r3, #1
 8001098:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_InitTick+0xd0>)
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <HAL_InitTick+0xd4>)
 800109e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_InitTick+0xd0>)
 80010a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010a8:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_InitTick+0xd0>)
 80010aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_InitTick+0xd0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_InitTick+0xd0>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <HAL_InitTick+0xd0>)
 80010bc:	f004 f94d 	bl	800535a <HAL_TIM_Base_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d104      	bne.n	80010d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010c6:	4808      	ldr	r0, [pc, #32]	; (80010e8 <HAL_InitTick+0xd0>)
 80010c8:	f004 f9a8 	bl	800541c <HAL_TIM_Base_Start_IT>
 80010cc:	4603      	mov	r3, r0
 80010ce:	e000      	b.n	80010d2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3740      	adds	r7, #64	; 0x40
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	58024400 	.word	0x58024400
 80010e4:	431bde83 	.word	0x431bde83
 80010e8:	240002dc 	.word	0x240002dc
 80010ec:	40001000 	.word	0x40001000

080010f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <NMI_Handler+0x4>

080010f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <MemManage_Handler+0x4>

08001102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <UsageFault_Handler+0x4>

0800110e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8001120:	2004      	movs	r0, #4
 8001122:	f001 f85c 	bl	80021de <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM6_DAC_IRQHandler+0x10>)
 8001132:	f004 f9eb 	bl	800550c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	240002dc 	.word	0x240002dc

08001140 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <LTDC_IRQHandler+0x10>)
 8001146:	f001 f93f 	bl	80023c8 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	240001c8 	.word	0x240001c8

08001154 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA2D_IRQHandler+0x10>)
 800115a:	f000 fc9f 	bl	8001a9c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	24000120 	.word	0x24000120

08001168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return 1;
 800116c:	2301      	movs	r3, #1
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_kill>:

int _kill(int pid, int sig)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001182:	f01c fc73 	bl	801da6c <__errno>
 8001186:	4603      	mov	r3, r0
 8001188:	2216      	movs	r2, #22
 800118a:	601a      	str	r2, [r3, #0]
  return -1;
 800118c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_exit>:

void _exit (int status)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011a0:	f04f 31ff 	mov.w	r1, #4294967295
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ffe7 	bl	8001178 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011aa:	e7fe      	b.n	80011aa <_exit+0x12>

080011ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	e00a      	b.n	80011d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011be:	f3af 8000 	nop.w
 80011c2:	4601      	mov	r1, r0
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	60ba      	str	r2, [r7, #8]
 80011ca:	b2ca      	uxtb	r2, r1
 80011cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	3301      	adds	r3, #1
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	dbf0      	blt.n	80011be <_read+0x12>
  }

  return len;
 80011dc:	687b      	ldr	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	e009      	b.n	800120c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	60ba      	str	r2, [r7, #8]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf1      	blt.n	80011f8 <_write+0x12>
  }
  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_close>:

int _close(int file)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001246:	605a      	str	r2, [r3, #4]
  return 0;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <_isatty>:

int _isatty(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f01c fbd8 	bl	801da6c <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	24100000 	.word	0x24100000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	24000328 	.word	0x24000328
 80012f0:	2401b650 	.word	0x2401b650

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <SystemInit+0xd0>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a31      	ldr	r2, [pc, #196]	; (80013c4 <SystemInit+0xd0>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <SystemInit+0xd4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b02      	cmp	r3, #2
 8001312:	d807      	bhi.n	8001324 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <SystemInit+0xd4>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 030f 	bic.w	r3, r3, #15
 800131c:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <SystemInit+0xd4>)
 800131e:	f043 0303 	orr.w	r3, r3, #3
 8001322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <SystemInit+0xd8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a28      	ldr	r2, [pc, #160]	; (80013cc <SystemInit+0xd8>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001330:	4b26      	ldr	r3, [pc, #152]	; (80013cc <SystemInit+0xd8>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <SystemInit+0xd8>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4924      	ldr	r1, [pc, #144]	; (80013cc <SystemInit+0xd8>)
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <SystemInit+0xdc>)
 800133e:	4013      	ands	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001342:	4b21      	ldr	r3, [pc, #132]	; (80013c8 <SystemInit+0xd4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134e:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <SystemInit+0xd4>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <SystemInit+0xd4>)
 8001358:	f043 0303 	orr.w	r3, r3, #3
 800135c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <SystemInit+0xd8>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <SystemInit+0xd8>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <SystemInit+0xd8>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001370:	4b16      	ldr	r3, [pc, #88]	; (80013cc <SystemInit+0xd8>)
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <SystemInit+0xe0>)
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <SystemInit+0xd8>)
 8001378:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <SystemInit+0xe4>)
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <SystemInit+0xd8>)
 800137e:	4a17      	ldr	r2, [pc, #92]	; (80013dc <SystemInit+0xe8>)
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <SystemInit+0xd8>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <SystemInit+0xd8>)
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <SystemInit+0xe8>)
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <SystemInit+0xd8>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <SystemInit+0xd8>)
 8001396:	4a11      	ldr	r2, [pc, #68]	; (80013dc <SystemInit+0xe8>)
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <SystemInit+0xd8>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SystemInit+0xd8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a09      	ldr	r2, [pc, #36]	; (80013cc <SystemInit+0xd8>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <SystemInit+0xd8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <SystemInit+0xec>)
 80013b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ba:	bf00      	nop
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00
 80013c8:	52002000 	.word	0x52002000
 80013cc:	58024400 	.word	0x58024400
 80013d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80013d4:	02020200 	.word	0x02020200
 80013d8:	01ff0000 	.word	0x01ff0000
 80013dc:	01010280 	.word	0x01010280
 80013e0:	52004000 	.word	0x52004000

080013e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013e8:	f7ff ff84 	bl	80012f4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013ec:	480c      	ldr	r0, [pc, #48]	; (8001420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ee:	490d      	ldr	r1, [pc, #52]	; (8001424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013f0:	4a0d      	ldr	r2, [pc, #52]	; (8001428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f4:	e002      	b.n	80013fc <LoopCopyDataInit>

080013f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013fa:	3304      	adds	r3, #4

080013fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001400:	d3f9      	bcc.n	80013f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001404:	4c0a      	ldr	r4, [pc, #40]	; (8001430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001408:	e001      	b.n	800140e <LoopFillZerobss>

0800140a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800140a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800140c:	3204      	adds	r2, #4

0800140e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001410:	d3fb      	bcc.n	800140a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001412:	f01c fb31 	bl	801da78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001416:	f7ff fc19 	bl	8000c4c <main>
  bx  lr
 800141a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800141c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001420:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001424:	240000e0 	.word	0x240000e0
  ldr r2, =_sidata
 8001428:	08091e10 	.word	0x08091e10
  ldr r2, =_sbss
 800142c:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 8001430:	2401b64c 	.word	0x2401b64c

08001434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC_IRQHandler>
	...

08001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143e:	2003      	movs	r0, #3
 8001440:	f000 f927 	bl	8001692 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001444:	f002 f9cc 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_Init+0x68>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	0a1b      	lsrs	r3, r3, #8
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	4913      	ldr	r1, [pc, #76]	; (80014a4 <HAL_Init+0x6c>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	f003 031f 	and.w	r3, r3, #31
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <HAL_Init+0x68>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	4a0e      	ldr	r2, [pc, #56]	; (80014a4 <HAL_Init+0x6c>)
 800146c:	5cd3      	ldrb	r3, [r2, r3]
 800146e:	f003 031f 	and.w	r3, r3, #31
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	fa22 f303 	lsr.w	r3, r2, r3
 8001478:	4a0b      	ldr	r2, [pc, #44]	; (80014a8 <HAL_Init+0x70>)
 800147a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800147c:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <HAL_Init+0x74>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fdc8 	bl	8001018 <HAL_InitTick>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e002      	b.n	8001498 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001492:	f7ff fda3 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	58024400 	.word	0x58024400
 80014a4:	0801efa0 	.word	0x0801efa0
 80014a8:	24000008 	.word	0x24000008
 80014ac:	24000004 	.word	0x24000004

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	24000010 	.word	0x24000010
 80014d4:	2400032c 	.word	0x2400032c

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2400032c 	.word	0x2400032c

080014f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014f8:	f7ff ffee 	bl	80014d8 <HAL_GetTick>
 80014fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001508:	d005      	beq.n	8001516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <HAL_Delay+0x44>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4413      	add	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001516:	bf00      	nop
 8001518:	f7ff ffde 	bl	80014d8 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d8f7      	bhi.n	8001518 <HAL_Delay+0x28>
  {
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	24000010 	.word	0x24000010

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	4313      	orrs	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <__NVIC_SetPriorityGrouping+0x40>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00
 800157c:	05fa0000 	.word	0x05fa0000

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff4c 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016b6:	f7ff ff63 	bl	8001580 <__NVIC_GetPriorityGrouping>
 80016ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	68b9      	ldr	r1, [r7, #8]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff ffb3 	bl	800162c <NVIC_EncodePriority>
 80016c6:	4602      	mov	r2, r0
 80016c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff82 	bl	80015d8 <__NVIC_SetPriority>
}
 80016d4:	bf00      	nop
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ff56 	bl	800159c <__NVIC_EnableIRQ>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016fc:	f3bf 8f5f 	dmb	sy
}
 8001700:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_MPU_Disable+0x28>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_MPU_Disable+0x28>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <HAL_MPU_Disable+0x2c>)
 8001710:	2200      	movs	r2, #0
 8001712:	605a      	str	r2, [r3, #4]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	e000ed90 	.word	0xe000ed90

08001728 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_MPU_Enable+0x38>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_MPU_Enable+0x3c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	4a09      	ldr	r2, [pc, #36]	; (8001764 <HAL_MPU_Enable+0x3c>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001744:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001746:	f3bf 8f4f 	dsb	sy
}
 800174a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800174c:	f3bf 8f6f 	isb	sy
}
 8001750:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed90 	.word	0xe000ed90
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	785a      	ldrb	r2, [r3, #1]
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 8001776:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d029      	beq.n	80017d4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001780:	4a1a      	ldr	r2, [pc, #104]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7b1b      	ldrb	r3, [r3, #12]
 800178c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7adb      	ldrb	r3, [r3, #11]
 8001792:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001794:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a9b      	ldrb	r3, [r3, #10]
 800179a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800179c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7b5b      	ldrb	r3, [r3, #13]
 80017a2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80017a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7b9b      	ldrb	r3, [r3, #14]
 80017aa:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80017ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	7bdb      	ldrb	r3, [r3, #15]
 80017b2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80017b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7a5b      	ldrb	r3, [r3, #9]
 80017ba:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80017bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7a1b      	ldrb	r3, [r3, #8]
 80017c2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80017c4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	7812      	ldrb	r2, [r2, #0]
 80017ca:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017ce:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80017d2:	e005      	b.n	80017e0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <HAL_MPU_ConfigRegion+0x84>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed90 	.word	0xe000ed90

080017f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e054      	b.n	80018ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7f5b      	ldrb	r3, [r3, #29]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fdde 	bl	80003d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	791b      	ldrb	r3, [r3, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10c      	bne.n	8001840 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a22      	ldr	r2, [pc, #136]	; (80018b4 <HAL_CRC_Init+0xc4>)
 800182c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0218 	bic.w	r2, r2, #24
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	e00c      	b.n	800185a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6899      	ldr	r1, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	461a      	mov	r2, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f834 	bl	80018b8 <HAL_CRCEx_Polynomial_Set>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e028      	b.n	80018ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	795b      	ldrb	r3, [r3, #5]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d105      	bne.n	800186e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f04f 32ff 	mov.w	r2, #4294967295
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	e004      	b.n	8001878 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6912      	ldr	r2, [r2, #16]
 8001876:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	04c11db7 	.word	0x04c11db7

080018b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80018c8:	231f      	movs	r3, #31
 80018ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	75fb      	strb	r3, [r7, #23]
 80018da:	e063      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80018dc:	bf00      	nop
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1e5a      	subs	r2, r3, #1
 80018e2:	613a      	str	r2, [r7, #16]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d009      	beq.n	80018fc <HAL_CRCEx_Polynomial_Set+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	fa22 f303 	lsr.w	r3, r2, r3
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b18      	cmp	r3, #24
 8001900:	d846      	bhi.n	8001990 <HAL_CRCEx_Polynomial_Set+0xd8>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001997 	.word	0x08001997
 800190c:	08001991 	.word	0x08001991
 8001910:	08001991 	.word	0x08001991
 8001914:	08001991 	.word	0x08001991
 8001918:	08001991 	.word	0x08001991
 800191c:	08001991 	.word	0x08001991
 8001920:	08001991 	.word	0x08001991
 8001924:	08001991 	.word	0x08001991
 8001928:	08001985 	.word	0x08001985
 800192c:	08001991 	.word	0x08001991
 8001930:	08001991 	.word	0x08001991
 8001934:	08001991 	.word	0x08001991
 8001938:	08001991 	.word	0x08001991
 800193c:	08001991 	.word	0x08001991
 8001940:	08001991 	.word	0x08001991
 8001944:	08001991 	.word	0x08001991
 8001948:	08001979 	.word	0x08001979
 800194c:	08001991 	.word	0x08001991
 8001950:	08001991 	.word	0x08001991
 8001954:	08001991 	.word	0x08001991
 8001958:	08001991 	.word	0x08001991
 800195c:	08001991 	.word	0x08001991
 8001960:	08001991 	.word	0x08001991
 8001964:	08001991 	.word	0x08001991
 8001968:	0800196d 	.word	0x0800196d
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	2b06      	cmp	r3, #6
 8001970:	d913      	bls.n	800199a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001976:	e010      	b.n	800199a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	2b07      	cmp	r3, #7
 800197c:	d90f      	bls.n	800199e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8001982:	e00c      	b.n	800199e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	2b0f      	cmp	r3, #15
 8001988:	d90b      	bls.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800198e:	e008      	b.n	80019a2 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	75fb      	strb	r3, [r7, #23]
        break;
 8001994:	e006      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8001996:	bf00      	nop
 8001998:	e004      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800199a:	bf00      	nop
 800199c:	e002      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800199e:	bf00      	nop
 80019a0:	e000      	b.n	80019a4 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80019a2:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 0118 	bic.w	r1, r3, #24
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e04f      	b.n	8001a86 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fd46 	bl	800048c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_DMA2D_Init+0xbc>)
 8001a10:	4013      	ands	r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6851      	ldr	r1, [r2, #4]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	69d2      	ldr	r2, [r2, #28]
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6812      	ldr	r2, [r2, #0]
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_DMA2D_Init+0xc0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6891      	ldr	r1, [r2, #8]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6992      	ldr	r2, [r2, #24]
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_DMA2D_Init+0xc4>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68d1      	ldr	r1, [r2, #12]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	430b      	orrs	r3, r1
 8001a54:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	051a      	lsls	r2, r3, #20
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	fff8ffbf 	.word	0xfff8ffbf
 8001a94:	fffffef8 	.word	0xfffffef8
 8001a98:	ffff0000 	.word	0xffff0000

08001a9c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d026      	beq.n	8001b0c <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d021      	beq.n	8001b0c <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001adc:	f043 0201 	orr.w	r2, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d026      	beq.n	8001b64 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d021      	beq.n	8001b64 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b3c:	f043 0202 	orr.w	r2, r3, #2
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2204      	movs	r2, #4
 8001b48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d026      	beq.n	8001bbc <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d021      	beq.n	8001bbc <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b86:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00e      	beq.n	8001bee <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bde:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2204      	movs	r2, #4
 8001be6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f853 	bl	8001c94 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d024      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01f      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c10:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2202      	movs	r2, #2
 8001c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0310 	and.w	r3, r3, #16
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01f      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f80e 	bl	8001ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_DMA2D_ConfigLayer+0x24>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e092      	b.n	8001e06 <HAL_DMA2D_ConfigLayer+0x14a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3328      	adds	r3, #40	; 0x28
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001d14:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8001d20:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_DMA2D_ConfigLayer+0x158>)
 8001d22:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b0a      	cmp	r3, #10
 8001d2a:	d003      	beq.n	8001d34 <HAL_DMA2D_ConfigLayer+0x78>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b09      	cmp	r3, #9
 8001d32:	d107      	bne.n	8001d44 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	e005      	b.n	8001d50 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d120      	bne.n	8001d98 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	ea02 0103 	and.w	r1, r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b0a      	cmp	r3, #10
 8001d7e:	d003      	beq.n	8001d88 <HAL_DMA2D_ConfigLayer+0xcc>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d135      	bne.n	8001df4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d94:	629a      	str	r2, [r3, #40]	; 0x28
 8001d96:	e02d      	b.n	8001df4 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b0b      	cmp	r3, #11
 8001d9e:	d109      	bne.n	8001db4 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	049b      	lsls	r3, r3, #18
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8001db2:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	ea02 0103 	and.w	r1, r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d003      	beq.n	8001de6 <HAL_DMA2D_ConfigLayer+0x12a>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d106      	bne.n	8001df4 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001df2:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	371c      	adds	r7, #28
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	ff33000f 	.word	0xff33000f

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <HAL_GPIO_Init+0x234>)
 8001e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e2a:	e194      	b.n	8002156 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	2101      	movs	r1, #1
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	fa01 f303 	lsl.w	r3, r1, r3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8186 	beq.w	8002150 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d005      	beq.n	8001e5c <HAL_GPIO_Init+0x44>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d130      	bne.n	8001ebe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e92:	2201      	movs	r2, #1
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0201 	and.w	r2, r3, #1
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d017      	beq.n	8001efa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d123      	bne.n	8001f4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	08da      	lsrs	r2, r3, #3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3208      	adds	r2, #8
 8001f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691a      	ldr	r2, [r3, #16]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	f003 0307 	and.w	r3, r3, #7
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	69b9      	ldr	r1, [r7, #24]
 8001f4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	2203      	movs	r2, #3
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 0203 	and.w	r2, r3, #3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80e0 	beq.w	8002150 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x238>)
 8001f92:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <HAL_GPIO_Init+0x238>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	; (8002050 <HAL_GPIO_Init+0x238>)
 8001fa2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <HAL_GPIO_Init+0x23c>)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	089b      	lsrs	r3, r3, #2
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_GPIO_Init+0x240>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d052      	beq.n	8002080 <HAL_GPIO_Init+0x268>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <HAL_GPIO_Init+0x244>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d031      	beq.n	8002046 <HAL_GPIO_Init+0x22e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_GPIO_Init+0x248>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d02b      	beq.n	8002042 <HAL_GPIO_Init+0x22a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a1d      	ldr	r2, [pc, #116]	; (8002064 <HAL_GPIO_Init+0x24c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x226>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_GPIO_Init+0x250>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x222>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_GPIO_Init+0x254>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x21e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a1a      	ldr	r2, [pc, #104]	; (8002070 <HAL_GPIO_Init+0x258>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x21a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a19      	ldr	r2, [pc, #100]	; (8002074 <HAL_GPIO_Init+0x25c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x216>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a18      	ldr	r2, [pc, #96]	; (8002078 <HAL_GPIO_Init+0x260>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x212>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_GPIO_Init+0x264>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x20e>
 8002022:	2309      	movs	r3, #9
 8002024:	e02d      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002026:	230a      	movs	r3, #10
 8002028:	e02b      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800202a:	2308      	movs	r3, #8
 800202c:	e029      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800202e:	2307      	movs	r3, #7
 8002030:	e027      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002032:	2306      	movs	r3, #6
 8002034:	e025      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002036:	2305      	movs	r3, #5
 8002038:	e023      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800203a:	2304      	movs	r3, #4
 800203c:	e021      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800203e:	2303      	movs	r3, #3
 8002040:	e01f      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002042:	2302      	movs	r3, #2
 8002044:	e01d      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 8002046:	2301      	movs	r3, #1
 8002048:	e01b      	b.n	8002082 <HAL_GPIO_Init+0x26a>
 800204a:	bf00      	nop
 800204c:	58000080 	.word	0x58000080
 8002050:	58024400 	.word	0x58024400
 8002054:	58000400 	.word	0x58000400
 8002058:	58020000 	.word	0x58020000
 800205c:	58020400 	.word	0x58020400
 8002060:	58020800 	.word	0x58020800
 8002064:	58020c00 	.word	0x58020c00
 8002068:	58021000 	.word	0x58021000
 800206c:	58021400 	.word	0x58021400
 8002070:	58021800 	.word	0x58021800
 8002074:	58021c00 	.word	0x58021c00
 8002078:	58022000 	.word	0x58022000
 800207c:	58022400 	.word	0x58022400
 8002080:	2300      	movs	r3, #0
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f002 0203 	and.w	r2, r2, #3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4093      	lsls	r3, r2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002092:	4938      	ldr	r1, [pc, #224]	; (8002174 <HAL_GPIO_Init+0x35c>)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	3302      	adds	r3, #2
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d003      	beq.n	80020f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	3301      	adds	r3, #1
 8002154:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa22 f303 	lsr.w	r3, r2, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	f47f ae63 	bne.w	8001e2c <HAL_GPIO_Init+0x14>
  }
}
 8002166:	bf00      	nop
 8002168:	bf00      	nop
 800216a:	3724      	adds	r7, #36	; 0x24
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	58000400 	.word	0x58000400

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021bc:	887a      	ldrh	r2, [r7, #2]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43d9      	mvns	r1, r3
 80021c8:	887b      	ldrh	r3, [r7, #2]
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fc:	88fb      	ldrh	r3, [r7, #6]
 80021fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 f804 	bl	8002212 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e0bf      	b.n	80023ba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fc2e 	bl	8000ab0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800226a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6999      	ldr	r1, [r3, #24]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002280:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6899      	ldr	r1, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 800229c:	400b      	ands	r3, r1
 800229e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6899      	ldr	r1, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68d9      	ldr	r1, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	041b      	lsls	r3, r3, #16
 80022d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1a      	ldr	r2, [r3, #32]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 80022f8:	400b      	ands	r3, r1
 80022fa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6919      	ldr	r1, [r3, #16]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6959      	ldr	r1, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_LTDC_Init+0x19c>)
 8002326:	400b      	ands	r3, r1
 8002328:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	041b      	lsls	r3, r3, #16
 8002330:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6959      	ldr	r1, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002358:	041b      	lsls	r3, r3, #16
 800235a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800236a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0206 	orr.w	r2, r2, #6
 8002396:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	699a      	ldr	r2, [r3, #24]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	f000f800 	.word	0xf000f800

080023c8 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d023      	beq.n	8002432 <HAL_LTDC_IRQHandler+0x6a>
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01e      	beq.n	8002432 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0204 	bic.w	r2, r2, #4
 8002402:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2204      	movs	r2, #4
 800240a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2204      	movs	r2, #4
 8002420:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f86f 	bl	8002510 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d023      	beq.n	8002484 <HAL_LTDC_IRQHandler+0xbc>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d01e      	beq.n	8002484 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0202 	bic.w	r2, r2, #2
 8002454:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2202      	movs	r2, #2
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002464:	f043 0202 	orr.w	r2, r3, #2
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2204      	movs	r2, #4
 8002472:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f846 	bl	8002510 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01b      	beq.n	80024c6 <HAL_LTDC_IRQHandler+0xfe>
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2201      	movs	r2, #1
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f00b fbdb 	bl	800dc7c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_LTDC_IRQHandler+0x140>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d016      	beq.n	8002508 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0208 	bic.w	r2, r2, #8
 80024e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2208      	movs	r2, #8
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f80e 	bl	8002524 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002538:	b5b0      	push	{r4, r5, r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_LTDC_ConfigLayer+0x1a>
 800254e:	2302      	movs	r3, #2
 8002550:	e02c      	b.n	80025ac <HAL_LTDC_ConfigLayer+0x74>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2134      	movs	r1, #52	; 0x34
 8002568:	fb01 f303 	mul.w	r3, r1, r3
 800256c:	4413      	add	r3, r2
 800256e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4614      	mov	r4, r2
 8002576:	461d      	mov	r5, r3
 8002578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	682b      	ldr	r3, [r5, #0]
 8002586:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	68b9      	ldr	r1, [r7, #8]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f849 	bl	8002624 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2201      	movs	r2, #1
 8002598:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bdb0      	pop	{r4, r5, r7, pc}

080025b4 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_LTDC_ProgramLineEvent+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e023      	b.n	8002614 <HAL_LTDC_ProgramLineEvent+0x60>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2202      	movs	r2, #2
 80025d8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 80025ec:	4a0c      	ldr	r2, [pc, #48]	; (8002620 <HAL_LTDC_ProgramLineEvent+0x6c>)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	50001000 	.word	0x50001000

08002624 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	0c1b      	lsrs	r3, r3, #16
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	4413      	add	r3, r2
 8002642:	041b      	lsls	r3, r3, #16
 8002644:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	01db      	lsls	r3, r3, #7
 8002650:	4413      	add	r3, r2
 8002652:	3384      	adds	r3, #132	; 0x84
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4611      	mov	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	01d2      	lsls	r2, r2, #7
 8002660:	440a      	add	r2, r1
 8002662:	3284      	adds	r2, #132	; 0x84
 8002664:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002668:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800267a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800267c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	440b      	add	r3, r1
 800268a:	3384      	adds	r3, #132	; 0x84
 800268c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002692:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026a2:	4413      	add	r3, r2
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	01db      	lsls	r3, r3, #7
 80026b2:	4413      	add	r3, r2
 80026b4:	3384      	adds	r3, #132	; 0x84
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	4611      	mov	r1, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	01d2      	lsls	r2, r2, #7
 80026c2:	440a      	add	r2, r1
 80026c4:	3284      	adds	r2, #132	; 0x84
 80026c6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80026ca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026da:	4413      	add	r3, r2
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4619      	mov	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	01db      	lsls	r3, r3, #7
 80026e8:	440b      	add	r3, r1
 80026ea:	3384      	adds	r3, #132	; 0x84
 80026ec:	4619      	mov	r1, r3
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	01db      	lsls	r3, r3, #7
 80026fe:	4413      	add	r3, r2
 8002700:	3384      	adds	r3, #132	; 0x84
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4611      	mov	r1, r2
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	01d2      	lsls	r2, r2, #7
 800270e:	440a      	add	r2, r1
 8002710:	3284      	adds	r2, #132	; 0x84
 8002712:	f023 0307 	bic.w	r3, r3, #7
 8002716:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	01db      	lsls	r3, r3, #7
 8002722:	4413      	add	r3, r2
 8002724:	3384      	adds	r3, #132	; 0x84
 8002726:	461a      	mov	r2, r3
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800273e:	041b      	lsls	r3, r3, #16
 8002740:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	061b      	lsls	r3, r3, #24
 8002748:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	461a      	mov	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	01db      	lsls	r3, r3, #7
 8002754:	4413      	add	r3, r2
 8002756:	3384      	adds	r3, #132	; 0x84
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	01db      	lsls	r3, r3, #7
 8002764:	4413      	add	r3, r2
 8002766:	3384      	adds	r3, #132	; 0x84
 8002768:	461a      	mov	r2, r3
 800276a:	2300      	movs	r3, #0
 800276c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002774:	461a      	mov	r2, r3
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	431a      	orrs	r2, r3
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	440b      	add	r3, r1
 800278a:	3384      	adds	r3, #132	; 0x84
 800278c:	4619      	mov	r1, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	01db      	lsls	r3, r3, #7
 800279e:	4413      	add	r3, r2
 80027a0:	3384      	adds	r3, #132	; 0x84
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	01d2      	lsls	r2, r2, #7
 80027ae:	440a      	add	r2, r1
 80027b0:	3284      	adds	r2, #132	; 0x84
 80027b2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	01db      	lsls	r3, r3, #7
 80027c2:	4413      	add	r3, r2
 80027c4:	3384      	adds	r3, #132	; 0x84
 80027c6:	461a      	mov	r2, r3
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	4413      	add	r3, r2
 80027da:	3384      	adds	r3, #132	; 0x84
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4619      	mov	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	01db      	lsls	r3, r3, #7
 80027e8:	440b      	add	r3, r1
 80027ea:	3384      	adds	r3, #132	; 0x84
 80027ec:	4619      	mov	r1, r3
 80027ee:	4b58      	ldr	r3, [pc, #352]	; (8002950 <LTDC_SetConfig+0x32c>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	69da      	ldr	r2, [r3, #28]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	6809      	ldr	r1, [r1, #0]
 8002800:	4608      	mov	r0, r1
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	01c9      	lsls	r1, r1, #7
 8002806:	4401      	add	r1, r0
 8002808:	3184      	adds	r1, #132	; 0x84
 800280a:	4313      	orrs	r3, r2
 800280c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	01db      	lsls	r3, r3, #7
 8002818:	4413      	add	r3, r2
 800281a:	3384      	adds	r3, #132	; 0x84
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	01db      	lsls	r3, r3, #7
 8002828:	4413      	add	r3, r2
 800282a:	3384      	adds	r3, #132	; 0x84
 800282c:	461a      	mov	r2, r3
 800282e:	2300      	movs	r3, #0
 8002830:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	01db      	lsls	r3, r3, #7
 800283c:	4413      	add	r3, r2
 800283e:	3384      	adds	r3, #132	; 0x84
 8002840:	461a      	mov	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d102      	bne.n	8002856 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8002850:	2304      	movs	r3, #4
 8002852:	61fb      	str	r3, [r7, #28]
 8002854:	e01b      	b.n	800288e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d102      	bne.n	8002864 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800285e:	2303      	movs	r3, #3
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e014      	b.n	800288e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d00b      	beq.n	8002884 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002870:	2b02      	cmp	r3, #2
 8002872:	d007      	beq.n	8002884 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002878:	2b03      	cmp	r3, #3
 800287a:	d003      	beq.n	8002884 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002880:	2b07      	cmp	r3, #7
 8002882:	d102      	bne.n	800288a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8002884:	2302      	movs	r3, #2
 8002886:	61fb      	str	r3, [r7, #28]
 8002888:	e001      	b.n	800288e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	01db      	lsls	r3, r3, #7
 8002898:	4413      	add	r3, r2
 800289a:	3384      	adds	r3, #132	; 0x84
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	4611      	mov	r1, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	01d2      	lsls	r2, r2, #7
 80028a8:	440a      	add	r2, r1
 80028aa:	3284      	adds	r2, #132	; 0x84
 80028ac:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80028b0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	fb02 f303 	mul.w	r3, r2, r3
 80028bc:	041a      	lsls	r2, r3, #16
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	1acb      	subs	r3, r1, r3
 80028c8:	69f9      	ldr	r1, [r7, #28]
 80028ca:	fb01 f303 	mul.w	r3, r1, r3
 80028ce:	3307      	adds	r3, #7
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	6809      	ldr	r1, [r1, #0]
 80028d4:	4608      	mov	r0, r1
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	01c9      	lsls	r1, r1, #7
 80028da:	4401      	add	r1, r0
 80028dc:	3184      	adds	r1, #132	; 0x84
 80028de:	4313      	orrs	r3, r2
 80028e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	461a      	mov	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	4413      	add	r3, r2
 80028ee:	3384      	adds	r3, #132	; 0x84
 80028f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4619      	mov	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	01db      	lsls	r3, r3, #7
 80028fc:	440b      	add	r3, r1
 80028fe:	3384      	adds	r3, #132	; 0x84
 8002900:	4619      	mov	r1, r3
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <LTDC_SetConfig+0x330>)
 8002904:	4013      	ands	r3, r2
 8002906:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	01db      	lsls	r3, r3, #7
 8002912:	4413      	add	r3, r2
 8002914:	3384      	adds	r3, #132	; 0x84
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	01db      	lsls	r3, r3, #7
 8002928:	4413      	add	r3, r2
 800292a:	3384      	adds	r3, #132	; 0x84
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4611      	mov	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	01d2      	lsls	r2, r2, #7
 8002938:	440a      	add	r2, r1
 800293a:	3284      	adds	r2, #132	; 0x84
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	fffff8f8 	.word	0xfffff8f8
 8002954:	fffff800 	.word	0xfffff800

08002958 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7fe fdb8 	bl	80014d8 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
 8002974:	e0a5      	b.n	8002ac2 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	2b00      	cmp	r3, #0
 8002982:	f040 809e 	bne.w	8002ac2 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fe fae0 	bl	8000f4c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800298c:	f241 3188 	movw	r1, #5000	; 0x1388
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f89d 	bl	8002ad0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <HAL_OSPI_Init+0x174>)
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	68d1      	ldr	r1, [r2, #12]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6912      	ldr	r2, [r2, #16]
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0412      	lsls	r2, r2, #16
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6952      	ldr	r2, [r2, #20]
 80029b2:	3a01      	subs	r2, #1
 80029b4:	0212      	lsls	r2, r2, #8
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	69d2      	ldr	r2, [r2, #28]
 80029c2:	4311      	orrs	r1, r2
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6812      	ldr	r2, [r2, #0]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a1a      	ldr	r2, [r3, #32]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029fc:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	021a      	lsls	r2, r3, #8
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2120      	movs	r1, #32
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f862 	bl	8002aee <OSPI_WaitFlagStateUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d146      	bne.n	8002ac2 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1e5a      	subs	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a6a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f042 0201 	orr.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d107      	bne.n	8002aaa <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f042 0202 	orr.w	r2, r2, #2
 8002aa8:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ab2:	d103      	bne.n	8002abc <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8002aba:	e002      	b.n	8002ac2 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	f8e0f8f4 	.word	0xf8e0f8f4

08002ad0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	603b      	str	r3, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002afe:	e01a      	b.n	8002b36 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b06:	d016      	beq.n	8002b36 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	f7fe fce6 	bl	80014d8 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d302      	bcc.n	8002b1e <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10b      	bne.n	8002b36 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f043 0201 	orr.w	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54

        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00e      	b.n	8002b54 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	bf14      	ite	ne
 8002b44:	2301      	movne	r3, #1
 8002b46:	2300      	moveq	r3, #0
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d1d6      	bne.n	8002b00 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	2b06      	cmp	r3, #6
 8002b6e:	d00a      	beq.n	8002b86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d001      	beq.n	8002b82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e040      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e03e      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b86:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b8e:	491f      	ldr	r1, [pc, #124]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b96:	f7fe fc9f 	bl	80014d8 <HAL_GetTick>
 8002b9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b9c:	e009      	b.n	8002bb2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b9e:	f7fe fc9b 	bl	80014d8 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bac:	d901      	bls.n	8002bb2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e028      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bb2:	4b16      	ldr	r3, [pc, #88]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbe:	d1ee      	bne.n	8002b9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b1e      	cmp	r3, #30
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PWREx_ConfigSupply+0x7c>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8002bca:	d005      	beq.n	8002bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b1d      	cmp	r3, #29
 8002bd0:	d002      	beq.n	8002bd8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b2d      	cmp	r3, #45	; 0x2d
 8002bd6:	d114      	bne.n	8002c02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002bd8:	f7fe fc7e 	bl	80014d8 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bde:	e009      	b.n	8002bf4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002be0:	f7fe fc7a 	bl	80014d8 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bee:	d901      	bls.n	8002bf4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e007      	b.n	8002c04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002bf4:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_PWREx_ConfigSupply+0xb0>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d1ee      	bne.n	8002be0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	58024800 	.word	0x58024800

08002c10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08c      	sub	sp, #48	; 0x30
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d102      	bne.n	8002c24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f000 bc1f 	b.w	8003462 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80b3 	beq.w	8002d98 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c32:	4b95      	ldr	r3, [pc, #596]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c3c:	4b92      	ldr	r3, [pc, #584]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d007      	beq.n	8002c58 <HAL_RCC_OscConfig+0x48>
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	2b18      	cmp	r3, #24
 8002c4c:	d112      	bne.n	8002c74 <HAL_RCC_OscConfig+0x64>
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d10d      	bne.n	8002c74 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c58:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 8098 	beq.w	8002d96 <HAL_RCC_OscConfig+0x186>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 8093 	bne.w	8002d96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e3f6      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d106      	bne.n	8002c8c <HAL_RCC_OscConfig+0x7c>
 8002c7e:	4b82      	ldr	r3, [pc, #520]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a81      	ldr	r2, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e058      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d112      	bne.n	8002cba <HAL_RCC_OscConfig+0xaa>
 8002c94:	4b7c      	ldr	r3, [pc, #496]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a7b      	ldr	r2, [pc, #492]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9e:	6013      	str	r3, [r2, #0]
 8002ca0:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a78      	ldr	r2, [pc, #480]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002ca6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002caa:	6013      	str	r3, [r2, #0]
 8002cac:	4b76      	ldr	r3, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a75      	ldr	r2, [pc, #468]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cb6:	6013      	str	r3, [r2, #0]
 8002cb8:	e041      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cc2:	d112      	bne.n	8002cea <HAL_RCC_OscConfig+0xda>
 8002cc4:	4b70      	ldr	r3, [pc, #448]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a6f      	ldr	r2, [pc, #444]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a6c      	ldr	r2, [pc, #432]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cd6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a69      	ldr	r2, [pc, #420]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	e029      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002cf2:	d112      	bne.n	8002d1a <HAL_RCC_OscConfig+0x10a>
 8002cf4:	4b64      	ldr	r3, [pc, #400]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a63      	ldr	r2, [pc, #396]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b61      	ldr	r3, [pc, #388]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a60      	ldr	r2, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b5e      	ldr	r3, [pc, #376]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	e011      	b.n	8002d3e <HAL_RCC_OscConfig+0x12e>
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a5a      	ldr	r2, [pc, #360]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a57      	ldr	r2, [pc, #348]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d38:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d013      	beq.n	8002d6e <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fe fbc7 	bl	80014d8 <HAL_GetTick>
 8002d4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4e:	f7fe fbc3 	bl	80014d8 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b64      	cmp	r3, #100	; 0x64
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e380      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d60:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x13e>
 8002d6c:	e014      	b.n	8002d98 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fbb3 	bl	80014d8 <HAL_GetTick>
 8002d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d76:	f7fe fbaf 	bl	80014d8 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e36c      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x166>
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 808c 	beq.w	8002ebe <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da6:	4b38      	ldr	r3, [pc, #224]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db4:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <HAL_RCC_OscConfig+0x1bc>
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	2b18      	cmp	r3, #24
 8002dc0:	d137      	bne.n	8002e32 <HAL_RCC_OscConfig+0x222>
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0303 	and.w	r3, r3, #3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d132      	bne.n	8002e32 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_OscConfig+0x1d4>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e33e      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002de4:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 0219 	bic.w	r2, r3, #25
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fb6f 	bl	80014d8 <HAL_GetTick>
 8002dfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dfe:	f7fe fb6b 	bl	80014d8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e328      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0f0      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e1c:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	4917      	ldr	r1, [pc, #92]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e30:	e045      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d028      	beq.n	8002e8c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 0219 	bic.w	r2, r3, #25
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4910      	ldr	r1, [pc, #64]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fb44 	bl	80014d8 <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7fe fb40 	bl	80014d8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e2fd      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	061b      	lsls	r3, r3, #24
 8002e80:	4901      	ldr	r1, [pc, #4]	; (8002e88 <HAL_RCC_OscConfig+0x278>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
 8002e86:	e01a      	b.n	8002ebe <HAL_RCC_OscConfig+0x2ae>
 8002e88:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e8c:	4b97      	ldr	r3, [pc, #604]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a96      	ldr	r2, [pc, #600]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fb1e 	bl	80014d8 <HAL_GetTick>
 8002e9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ea0:	f7fe fb1a 	bl	80014d8 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e2d7      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eb2:	4b8e      	ldr	r3, [pc, #568]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06a      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed4:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d007      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2e0>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b18      	cmp	r3, #24
 8002ee4:	d11b      	bne.n	8002f1e <HAL_RCC_OscConfig+0x30e>
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d116      	bne.n	8002f1e <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2f8>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b80      	cmp	r3, #128	; 0x80
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e2ac      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f08:	4b78      	ldr	r3, [pc, #480]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	061b      	lsls	r3, r3, #24
 8002f16:	4975      	ldr	r1, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f1c:	e040      	b.n	8002fa0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d023      	beq.n	8002f6e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f26:	4b71      	ldr	r3, [pc, #452]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a70      	ldr	r2, [pc, #448]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe fad1 	bl	80014d8 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f38:	e008      	b.n	8002f4c <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f3a:	f7fe facd 	bl	80014d8 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e28a      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f4c:	4b67      	ldr	r3, [pc, #412]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f0      	beq.n	8002f3a <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	061b      	lsls	r3, r3, #24
 8002f66:	4961      	ldr	r1, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60cb      	str	r3, [r1, #12]
 8002f6c:	e018      	b.n	8002fa0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5e      	ldr	r2, [pc, #376]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7a:	f7fe faad 	bl	80014d8 <HAL_GetTick>
 8002f7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f82:	f7fe faa9 	bl	80014d8 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e266      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f94:	4b55      	ldr	r3, [pc, #340]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f0      	bne.n	8002f82 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d036      	beq.n	800301a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d019      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe fa8a 	bl	80014d8 <HAL_GetTick>
 8002fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc8:	f7fe fa86 	bl	80014d8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e243      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x3b8>
 8002fe6:	e018      	b.n	800301a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe8:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	4a3f      	ldr	r2, [pc, #252]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8002fee:	f023 0301 	bic.w	r3, r3, #1
 8002ff2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fa70 	bl	80014d8 <HAL_GetTick>
 8002ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ffa:	e008      	b.n	800300e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffc:	f7fe fa6c 	bl	80014d8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d901      	bls.n	800300e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e229      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1f0      	bne.n	8002ffc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	2b00      	cmp	r3, #0
 8003024:	d036      	beq.n	8003094 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d019      	beq.n	8003062 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a2e      	ldr	r2, [pc, #184]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003038:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800303a:	f7fe fa4d 	bl	80014d8 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003042:	f7fe fa49 	bl	80014d8 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e206      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003054:	4b25      	ldr	r3, [pc, #148]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x432>
 8003060:	e018      	b.n	8003094 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 8003068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800306c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800306e:	f7fe fa33 	bl	80014d8 <HAL_GetTick>
 8003072:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003076:	f7fe fa2f 	bl	80014d8 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1ec      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80af 	beq.w	8003200 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030a2:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <HAL_RCC_OscConfig+0x4e0>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a12      	ldr	r2, [pc, #72]	; (80030f0 <HAL_RCC_OscConfig+0x4e0>)
 80030a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030ae:	f7fe fa13 	bl	80014d8 <HAL_GetTick>
 80030b2:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b4:	e008      	b.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b6:	f7fe fa0f 	bl	80014d8 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	; 0x64
 80030c2:	d901      	bls.n	80030c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e1cc      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <HAL_RCC_OscConfig+0x4e0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0f0      	beq.n	80030b6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x4e4>
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a02      	ldr	r2, [pc, #8]	; (80030ec <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e05b      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 80030ea:	bf00      	nop
 80030ec:	58024400 	.word	0x58024400
 80030f0:	58024800 	.word	0x58024800
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d112      	bne.n	8003122 <HAL_RCC_OscConfig+0x512>
 80030fc:	4b9d      	ldr	r3, [pc, #628]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a9c      	ldr	r2, [pc, #624]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	4b9a      	ldr	r3, [pc, #616]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4a99      	ldr	r2, [pc, #612]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800310e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
 8003114:	4b97      	ldr	r3, [pc, #604]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003118:	4a96      	ldr	r2, [pc, #600]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800311a:	f023 0304 	bic.w	r3, r3, #4
 800311e:	6713      	str	r3, [r2, #112]	; 0x70
 8003120:	e03f      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d112      	bne.n	8003150 <HAL_RCC_OscConfig+0x540>
 800312a:	4b92      	ldr	r3, [pc, #584]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312e:	4a91      	ldr	r2, [pc, #580]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003130:	f043 0304 	orr.w	r3, r3, #4
 8003134:	6713      	str	r3, [r2, #112]	; 0x70
 8003136:	4b8f      	ldr	r3, [pc, #572]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313a:	4a8e      	ldr	r2, [pc, #568]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800313c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	4b8c      	ldr	r3, [pc, #560]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	4a8b      	ldr	r2, [pc, #556]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e028      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b85      	cmp	r3, #133	; 0x85
 8003156:	d112      	bne.n	800317e <HAL_RCC_OscConfig+0x56e>
 8003158:	4b86      	ldr	r3, [pc, #536]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	4a85      	ldr	r2, [pc, #532]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4b83      	ldr	r3, [pc, #524]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a82      	ldr	r2, [pc, #520]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800316a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a7f      	ldr	r2, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e011      	b.n	80031a2 <HAL_RCC_OscConfig+0x592>
 800317e:	4b7d      	ldr	r3, [pc, #500]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	4a7c      	ldr	r2, [pc, #496]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003184:	f023 0301 	bic.w	r3, r3, #1
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
 800318a:	4b7a      	ldr	r3, [pc, #488]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	4a79      	ldr	r2, [pc, #484]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	6713      	str	r3, [r2, #112]	; 0x70
 8003196:	4b77      	ldr	r3, [pc, #476]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319a:	4a76      	ldr	r2, [pc, #472]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800319c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d015      	beq.n	80031d6 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031aa:	f7fe f995 	bl	80014d8 <HAL_GetTick>
 80031ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031b0:	e00a      	b.n	80031c8 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b2:	f7fe f991 	bl	80014d8 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e14c      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80031ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0ee      	beq.n	80031b2 <HAL_RCC_OscConfig+0x5a2>
 80031d4:	e014      	b.n	8003200 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d6:	f7fe f97f 	bl	80014d8 <HAL_GetTick>
 80031da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031dc:	e00a      	b.n	80031f4 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031de:	f7fe f97b 	bl	80014d8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e136      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031f4:	4b5f      	ldr	r3, [pc, #380]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1ee      	bne.n	80031de <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 812b 	beq.w	8003460 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800320a:	4b5a      	ldr	r3, [pc, #360]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003212:	2b18      	cmp	r3, #24
 8003214:	f000 80bb 	beq.w	800338e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 8095 	bne.w	800334c <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003222:	4b54      	ldr	r3, [pc, #336]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a53      	ldr	r2, [pc, #332]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322e:	f7fe f953 	bl	80014d8 <HAL_GetTick>
 8003232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7fe f94f 	bl	80014d8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e10c      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003248:	4b4a      	ldr	r3, [pc, #296]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f0      	bne.n	8003236 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003254:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003256:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003258:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x768>)
 800325a:	4013      	ands	r3, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003264:	0112      	lsls	r2, r2, #4
 8003266:	430a      	orrs	r2, r1
 8003268:	4942      	ldr	r1, [pc, #264]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800326a:	4313      	orrs	r3, r2
 800326c:	628b      	str	r3, [r1, #40]	; 0x28
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	3b01      	subs	r3, #1
 8003274:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	3b01      	subs	r3, #1
 800327e:	025b      	lsls	r3, r3, #9
 8003280:	b29b      	uxth	r3, r3
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	3b01      	subs	r3, #1
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003290:	431a      	orrs	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	3b01      	subs	r3, #1
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800329e:	4935      	ldr	r1, [pc, #212]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032a4:	4b33      	ldr	r3, [pc, #204]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032aa:	f023 0301 	bic.w	r3, r3, #1
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032b0:	4b30      	ldr	r3, [pc, #192]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b4:	4b31      	ldr	r3, [pc, #196]	; (800337c <HAL_RCC_OscConfig+0x76c>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032bc:	00d2      	lsls	r2, r2, #3
 80032be:	492d      	ldr	r1, [pc, #180]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032c4:	4b2b      	ldr	r3, [pc, #172]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f023 020c 	bic.w	r2, r3, #12
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	4928      	ldr	r1, [pc, #160]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032d6:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f023 0202 	bic.w	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	4924      	ldr	r1, [pc, #144]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032e8:	4b22      	ldr	r3, [pc, #136]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ec:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4a1e      	ldr	r2, [pc, #120]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003300:	4b1c      	ldr	r3, [pc, #112]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	4a1b      	ldr	r2, [pc, #108]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003306:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800330a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800330c:	4b19      	ldr	r3, [pc, #100]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	4a18      	ldr	r2, [pc, #96]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003318:	4b16      	ldr	r3, [pc, #88]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe f8d8 	bl	80014d8 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe f8d4 	bl	80014d8 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e091      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800333e:	4b0d      	ldr	r3, [pc, #52]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x71c>
 800334a:	e089      	b.n	8003460 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <HAL_RCC_OscConfig+0x764>)
 8003352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe f8be 	bl	80014d8 <HAL_GetTick>
 800335c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800335e:	e00f      	b.n	8003380 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe f8ba 	bl	80014d8 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d908      	bls.n	8003380 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e077      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
 8003372:	bf00      	nop
 8003374:	58024400 	.word	0x58024400
 8003378:	fffffc0c 	.word	0xfffffc0c
 800337c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003380:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e9      	bne.n	8003360 <HAL_RCC_OscConfig+0x750>
 800338c:	e068      	b.n	8003460 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800338e:	4b37      	ldr	r3, [pc, #220]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d031      	beq.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f003 0203 	and.w	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d12a      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d122      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d11a      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	0a5b      	lsrs	r3, r3, #9
 80033d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d111      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d108      	bne.n	8003406 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	0e1b      	lsrs	r3, r3, #24
 80033f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003400:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e02b      	b.n	8003462 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800340a:	4b18      	ldr	r3, [pc, #96]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 800340c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340e:	08db      	lsrs	r3, r3, #3
 8003410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003414:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	429a      	cmp	r2, r3
 800341e:	d01f      	beq.n	8003460 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a11      	ldr	r2, [pc, #68]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003426:	f023 0301 	bic.w	r3, r3, #1
 800342a:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800342c:	f7fe f854 	bl	80014d8 <HAL_GetTick>
 8003430:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003432:	bf00      	nop
 8003434:	f7fe f850 	bl	80014d8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	4293      	cmp	r3, r2
 800343e:	d0f9      	beq.n	8003434 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_RCC_OscConfig+0x860>)
 8003446:	4013      	ands	r3, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800344c:	00d2      	lsls	r2, r2, #3
 800344e:	4907      	ldr	r1, [pc, #28]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	4a04      	ldr	r2, [pc, #16]	; (800346c <HAL_RCC_OscConfig+0x85c>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3730      	adds	r7, #48	; 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	ffff0007 	.word	0xffff0007

08003474 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e19c      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b8a      	ldr	r3, [pc, #552]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d910      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b87      	ldr	r3, [pc, #540]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 020f 	bic.w	r2, r3, #15
 800349e:	4985      	ldr	r1, [pc, #532]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b83      	ldr	r3, [pc, #524]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e184      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	4b7b      	ldr	r3, [pc, #492]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d908      	bls.n	80034e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034d4:	4b78      	ldr	r3, [pc, #480]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	4975      	ldr	r1, [pc, #468]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d010      	beq.n	8003514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	4b70      	ldr	r3, [pc, #448]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fe:	429a      	cmp	r2, r3
 8003500:	d908      	bls.n	8003514 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003502:	4b6d      	ldr	r3, [pc, #436]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	496a      	ldr	r1, [pc, #424]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003510:	4313      	orrs	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d010      	beq.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	4b64      	ldr	r3, [pc, #400]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800352c:	429a      	cmp	r2, r3
 800352e:	d908      	bls.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003530:	4b61      	ldr	r3, [pc, #388]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	495e      	ldr	r1, [pc, #376]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800353e:	4313      	orrs	r3, r2
 8003540:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	d010      	beq.n	8003570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800355a:	429a      	cmp	r2, r3
 800355c:	d908      	bls.n	8003570 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800355e:	4b56      	ldr	r3, [pc, #344]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003560:	6a1b      	ldr	r3, [r3, #32]
 8003562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	4953      	ldr	r1, [pc, #332]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800356c:	4313      	orrs	r3, r2
 800356e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d010      	beq.n	800359e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	4b4d      	ldr	r3, [pc, #308]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	429a      	cmp	r2, r3
 800358a:	d908      	bls.n	800359e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800358c:	4b4a      	ldr	r3, [pc, #296]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	f023 020f 	bic.w	r2, r3, #15
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4947      	ldr	r1, [pc, #284]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 800359a:	4313      	orrs	r3, r2
 800359c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d055      	beq.n	8003656 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035aa:	4b43      	ldr	r3, [pc, #268]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	4940      	ldr	r1, [pc, #256]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d107      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035c4:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e0f6      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d107      	bne.n	80035ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035dc:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d115      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0ea      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035f4:	4b30      	ldr	r3, [pc, #192]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d109      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e0de      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003604:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e0d6      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003614:	4b28      	ldr	r3, [pc, #160]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	4925      	ldr	r1, [pc, #148]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003622:	4313      	orrs	r3, r2
 8003624:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003626:	f7fd ff57 	bl	80014d8 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362c:	e00a      	b.n	8003644 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800362e:	f7fd ff53 	bl	80014d8 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0be      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003644:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	429a      	cmp	r2, r3
 8003654:	d1eb      	bne.n	800362e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d010      	beq.n	8003684 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	429a      	cmp	r2, r3
 8003670:	d208      	bcs.n	8003684 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003672:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f023 020f 	bic.w	r2, r3, #15
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	490e      	ldr	r1, [pc, #56]	; (80036b8 <HAL_RCC_ClockConfig+0x244>)
 8003680:	4313      	orrs	r3, r2
 8003682:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 030f 	and.w	r3, r3, #15
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d214      	bcs.n	80036bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 020f 	bic.w	r2, r3, #15
 800369a:	4906      	ldr	r1, [pc, #24]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_RCC_ClockConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d005      	beq.n	80036bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e086      	b.n	80037c2 <HAL_RCC_ClockConfig+0x34e>
 80036b4:	52002000 	.word	0x52002000
 80036b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d010      	beq.n	80036ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d208      	bcs.n	80036ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036d8:	4b3c      	ldr	r3, [pc, #240]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	4939      	ldr	r1, [pc, #228]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	4b34      	ldr	r3, [pc, #208]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003702:	429a      	cmp	r2, r3
 8003704:	d208      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	492e      	ldr	r1, [pc, #184]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003714:	4313      	orrs	r3, r2
 8003716:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d010      	beq.n	8003746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699a      	ldr	r2, [r3, #24]
 8003728:	4b28      	ldr	r3, [pc, #160]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003730:	429a      	cmp	r2, r3
 8003732:	d208      	bcs.n	8003746 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	4922      	ldr	r1, [pc, #136]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003742:	4313      	orrs	r3, r2
 8003744:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b00      	cmp	r3, #0
 8003750:	d010      	beq.n	8003774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800375e:	429a      	cmp	r2, r3
 8003760:	d208      	bcs.n	8003774 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003762:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4917      	ldr	r1, [pc, #92]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003774:	f000 f834 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	4912      	ldr	r1, [pc, #72]	; (80037d0 <HAL_RCC_ClockConfig+0x35c>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
 8003790:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <HAL_RCC_ClockConfig+0x358>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <HAL_RCC_ClockConfig+0x35c>)
 800379c:	5cd3      	ldrb	r3, [r2, r3]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_RCC_ClockConfig+0x360>)
 80037aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ac:	4a0a      	ldr	r2, [pc, #40]	; (80037d8 <HAL_RCC_ClockConfig+0x364>)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <HAL_RCC_ClockConfig+0x368>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fd fc2e 	bl	8001018 <HAL_InitTick>
 80037bc:	4603      	mov	r3, r0
 80037be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
 80037d0:	0801efa0 	.word	0x0801efa0
 80037d4:	24000008 	.word	0x24000008
 80037d8:	24000004 	.word	0x24000004
 80037dc:	2400000c 	.word	0x2400000c

080037e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e6:	4bb3      	ldr	r3, [pc, #716]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037ee:	2b18      	cmp	r3, #24
 80037f0:	f200 8155 	bhi.w	8003a9e <HAL_RCC_GetSysClockFreq+0x2be>
 80037f4:	a201      	add	r2, pc, #4	; (adr r2, 80037fc <HAL_RCC_GetSysClockFreq+0x1c>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003861 	.word	0x08003861
 8003800:	08003a9f 	.word	0x08003a9f
 8003804:	08003a9f 	.word	0x08003a9f
 8003808:	08003a9f 	.word	0x08003a9f
 800380c:	08003a9f 	.word	0x08003a9f
 8003810:	08003a9f 	.word	0x08003a9f
 8003814:	08003a9f 	.word	0x08003a9f
 8003818:	08003a9f 	.word	0x08003a9f
 800381c:	08003887 	.word	0x08003887
 8003820:	08003a9f 	.word	0x08003a9f
 8003824:	08003a9f 	.word	0x08003a9f
 8003828:	08003a9f 	.word	0x08003a9f
 800382c:	08003a9f 	.word	0x08003a9f
 8003830:	08003a9f 	.word	0x08003a9f
 8003834:	08003a9f 	.word	0x08003a9f
 8003838:	08003a9f 	.word	0x08003a9f
 800383c:	0800388d 	.word	0x0800388d
 8003840:	08003a9f 	.word	0x08003a9f
 8003844:	08003a9f 	.word	0x08003a9f
 8003848:	08003a9f 	.word	0x08003a9f
 800384c:	08003a9f 	.word	0x08003a9f
 8003850:	08003a9f 	.word	0x08003a9f
 8003854:	08003a9f 	.word	0x08003a9f
 8003858:	08003a9f 	.word	0x08003a9f
 800385c:	08003893 	.word	0x08003893
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003860:	4b94      	ldr	r3, [pc, #592]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d009      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800386c:	4b91      	ldr	r3, [pc, #580]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	08db      	lsrs	r3, r3, #3
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	4a90      	ldr	r2, [pc, #576]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800387e:	e111      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003880:	4b8d      	ldr	r3, [pc, #564]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003882:	61bb      	str	r3, [r7, #24]
      break;
 8003884:	e10e      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003886:	4b8d      	ldr	r3, [pc, #564]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003888:	61bb      	str	r3, [r7, #24]
      break;
 800388a:	e10b      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800388c:	4b8c      	ldr	r3, [pc, #560]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800388e:	61bb      	str	r3, [r7, #24]
      break;
 8003890:	e108      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003892:	4b88      	ldr	r3, [pc, #544]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800389c:	4b85      	ldr	r3, [pc, #532]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038a8:	4b82      	ldr	r3, [pc, #520]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038b2:	4b80      	ldr	r3, [pc, #512]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b6:	08db      	lsrs	r3, r3, #3
 80038b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80e1 	beq.w	8003a98 <HAL_RCC_GetSysClockFreq+0x2b8>
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	f000 8083 	beq.w	80039e4 <HAL_RCC_GetSysClockFreq+0x204>
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f200 80a1 	bhi.w	8003a28 <HAL_RCC_GetSysClockFreq+0x248>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0x114>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d056      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038f2:	e099      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038f4:	4b6f      	ldr	r3, [pc, #444]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0320 	and.w	r3, r3, #32
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d02d      	beq.n	800395c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003900:	4b6c      	ldr	r3, [pc, #432]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	4a6b      	ldr	r2, [pc, #428]	; (8003ab8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
 8003910:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	ee07 3a90 	vmov	s15, r3
 8003918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	ee07 3a90 	vmov	s15, r3
 8003922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800392a:	4b62      	ldr	r3, [pc, #392]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800393a:	ed97 6a02 	vldr	s12, [r7, #8]
 800393e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800394a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003956:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800395a:	e087      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ac8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b51      	ldr	r3, [pc, #324]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003982:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800399e:	e065      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2ec>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039e2:	e043      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003ad0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b2f      	ldr	r3, [pc, #188]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a0a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a26:	e021      	b.n	8003a6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003acc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a4e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003ac4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a70:	0a5b      	lsrs	r3, r3, #9
 8003a72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a76:	3301      	adds	r3, #1
 8003a78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	ee07 3a90 	vmov	s15, r3
 8003a80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a84:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a90:	ee17 3a90 	vmov	r3, s15
 8003a94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61bb      	str	r3, [r7, #24]
      break;
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003aa0:	61bb      	str	r3, [r7, #24]
      break;
 8003aa2:	bf00      	nop
  }

  return sysclockfreq;
 8003aa4:	69bb      	ldr	r3, [r7, #24]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3724      	adds	r7, #36	; 0x24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	03d09000 	.word	0x03d09000
 8003abc:	003d0900 	.word	0x003d0900
 8003ac0:	016e3600 	.word	0x016e3600
 8003ac4:	46000000 	.word	0x46000000
 8003ac8:	4c742400 	.word	0x4c742400
 8003acc:	4a742400 	.word	0x4a742400
 8003ad0:	4bb71b00 	.word	0x4bb71b00

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003ada:	f7ff fe81 	bl	80037e0 <HAL_RCC_GetSysClockFreq>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	0a1b      	lsrs	r3, r3, #8
 8003ae6:	f003 030f 	and.w	r3, r3, #15
 8003aea:	490f      	ldr	r1, [pc, #60]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003aec:	5ccb      	ldrb	r3, [r1, r3]
 8003aee:	f003 031f 	and.w	r3, r3, #31
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003af8:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <HAL_RCC_GetHCLKFreq+0x50>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	4a09      	ldr	r2, [pc, #36]	; (8003b28 <HAL_RCC_GetHCLKFreq+0x54>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a07      	ldr	r2, [pc, #28]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b10:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b12:	4a07      	ldr	r2, [pc, #28]	; (8003b30 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x58>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58024400 	.word	0x58024400
 8003b28:	0801efa0 	.word	0x0801efa0
 8003b2c:	24000008 	.word	0x24000008
 8003b30:	24000004 	.word	0x24000004

08003b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003b38:	f7ff ffcc 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b4a:	5ccb      	ldrb	r3, [r1, r3]
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	0801efa0 	.word	0x0801efa0

08003b60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003b70:	4b1a      	ldr	r3, [pc, #104]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	f003 0207 	and.w	r2, r3, #7
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8003b7c:	4b17      	ldr	r3, [pc, #92]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <HAL_RCC_GetClockConfig+0x7c>)
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_GetClockConfig+0x80>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	52002000 	.word	0x52002000

08003be4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003be8:	b0c8      	sub	sp, #288	; 0x120
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003c08:	2500      	movs	r5, #0
 8003c0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003c0e:	d049      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c1a:	d02f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c20:	d828      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c26:	d01a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2c:	d822      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003c32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c36:	d007      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c38:	e01c      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3a:	4ba7      	ldr	r3, [pc, #668]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4aa6      	ldr	r2, [pc, #664]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c46:	e01a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f985 	bl	8004f60 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c62:	3328      	adds	r3, #40	; 0x28
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 fa2c 	bl	80050c4 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c86:	4b94      	ldr	r3, [pc, #592]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c94:	4a90      	ldr	r2, [pc, #576]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6513      	str	r3, [r2, #80]	; 0x50
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ca0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003cb0:	f04f 0900 	mov.w	r9, #0
 8003cb4:	ea58 0309 	orrs.w	r3, r8, r9
 8003cb8:	d047      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d82a      	bhi.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003cc4:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003ce1 	.word	0x08003ce1
 8003cd0:	08003cef 	.word	0x08003cef
 8003cd4:	08003d05 	.word	0x08003d05
 8003cd8:	08003d23 	.word	0x08003d23
 8003cdc:	08003d23 	.word	0x08003d23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce0:	4b7d      	ldr	r3, [pc, #500]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	4a7c      	ldr	r2, [pc, #496]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cec:	e01a      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f932 	bl	8004f60 <RCCEx_PLL2_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d02:	e00f      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d08:	3328      	adds	r3, #40	; 0x28
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f001 f9d9 	bl	80050c4 <RCCEx_PLL3_Config>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d18:	e004      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d20:	e000      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003d22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d24:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d2c:	4b6a      	ldr	r3, [pc, #424]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d30:	f023 0107 	bic.w	r1, r3, #7
 8003d34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	4a67      	ldr	r2, [pc, #412]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003d40:	e003      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003d4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003d56:	f04f 0b00 	mov.w	fp, #0
 8003d5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d5e:	d054      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d6a:	d036      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003d6c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d70:	d82f      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d76:	d032      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d829      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d80:	d02f      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003d82:	2bc0      	cmp	r3, #192	; 0xc0
 8003d84:	d825      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d86:	2b80      	cmp	r3, #128	; 0x80
 8003d88:	d018      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003d8a:	2b80      	cmp	r3, #128	; 0x80
 8003d8c:	d821      	bhi.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d007      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003d96:	e01c      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d98:	4b4f      	ldr	r3, [pc, #316]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003da4:	e01e      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003daa:	3308      	adds	r3, #8
 8003dac:	2100      	movs	r1, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 f8d6 	bl	8004f60 <RCCEx_PLL2_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dba:	e013      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc0:	3328      	adds	r3, #40	; 0x28
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f97d 	bl	80050c4 <RCCEx_PLL3_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003dd0:	e008      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dd8:	e004      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003dec:	4b3a      	ldr	r3, [pc, #232]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfa:	4a37      	ldr	r2, [pc, #220]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6513      	str	r3, [r2, #80]	; 0x50
 8003e00:	e003      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e02:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e06:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003e16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003e20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003e24:	460b      	mov	r3, r1
 8003e26:	4313      	orrs	r3, r2
 8003e28:	d05c      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e30:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e34:	d03b      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003e36:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003e3a:	d834      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e40:	d037      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e46:	d82e      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e48:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e4c:	d033      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003e4e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e52:	d828      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e58:	d01a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5e:	d822      	bhi.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e68:	d007      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e6c:	4b1a      	ldr	r3, [pc, #104]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	4a19      	ldr	r2, [pc, #100]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e78:	e01e      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e7e:	3308      	adds	r3, #8
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f001 f86c 	bl	8004f60 <RCCEx_PLL2_Config>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003e8e:	e013      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	2100      	movs	r1, #0
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f913 	bl	80050c4 <RCCEx_PLL3_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003eac:	e004      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eae:	bf00      	nop
 8003eb0:	e002      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eb2:	bf00      	nop
 8003eb4:	e000      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ec4:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003ec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ece:	4a02      	ldr	r2, [pc, #8]	; (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	6513      	str	r3, [r2, #80]	; 0x50
 8003ed4:	e006      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003ed6:	bf00      	nop
 8003ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003edc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ee0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ee4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003efa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003efe:	460b      	mov	r3, r1
 8003f00:	4313      	orrs	r3, r2
 8003f02:	d03a      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003f04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	2b30      	cmp	r3, #48	; 0x30
 8003f0c:	d01f      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003f0e:	2b30      	cmp	r3, #48	; 0x30
 8003f10:	d819      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f12:	2b20      	cmp	r3, #32
 8003f14:	d00c      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d815      	bhi.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d019      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003f1e:	2b10      	cmp	r3, #16
 8003f20:	d111      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f22:	4bae      	ldr	r3, [pc, #696]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4aad      	ldr	r2, [pc, #692]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f2e:	e011      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f34:	3308      	adds	r3, #8
 8003f36:	2102      	movs	r1, #2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f001 f811 	bl	8004f60 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003f44:	e006      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f4c:	e002      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f4e:	bf00      	nop
 8003f50:	e000      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f54:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003f5c:	4b9f      	ldr	r3, [pc, #636]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	4a9c      	ldr	r2, [pc, #624]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f70:	e003      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f72:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f76:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003f7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003f86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f90:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4313      	orrs	r3, r2
 8003f98:	d051      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fa4:	d035      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003fa6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003faa:	d82e      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb0:	d031      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003fb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fb6:	d828      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc2:	d822      	bhi.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fcc:	d007      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003fce:	e01c      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fd0:	4b82      	ldr	r3, [pc, #520]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	4a81      	ldr	r2, [pc, #516]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e01c      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f000 ffba 	bl	8004f60 <RCCEx_PLL2_Config>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003ff2:	e011      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	3328      	adds	r3, #40	; 0x28
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f861 	bl	80050c4 <RCCEx_PLL3_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8004016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004020:	4b6e      	ldr	r3, [pc, #440]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800402e:	4a6b      	ldr	r2, [pc, #428]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6513      	str	r3, [r2, #80]	; 0x50
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800403a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800404a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004054:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d053      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004068:	d033      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800406a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800406e:	d82c      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004070:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004074:	d02f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8004076:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800407a:	d826      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800407c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004080:	d02b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004082:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004086:	d820      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004088:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800408c:	d012      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800408e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004092:	d81a      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d115      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800409e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040a2:	3308      	adds	r3, #8
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 ff5a 	bl	8004f60 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b8:	3328      	adds	r3, #40	; 0x28
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f001 f801 	bl	80050c4 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80040e8:	4b3c      	ldr	r3, [pc, #240]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f6:	4a39      	ldr	r2, [pc, #228]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6513      	str	r3, [r2, #80]	; 0x50
 80040fc:	e003      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004102:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004106:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004116:	2300      	movs	r3, #0
 8004118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800411c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004120:	460b      	mov	r3, r1
 8004122:	4313      	orrs	r3, r2
 8004124:	d060      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800412a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800412e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004132:	d039      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8004134:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004138:	d832      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800413a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413e:	d035      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004144:	d82c      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d031      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800414c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004150:	d826      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004152:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004156:	d02d      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800415c:	d820      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800415e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004162:	d012      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004168:	d81a      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800416a:	2b00      	cmp	r3, #0
 800416c:	d024      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800416e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004172:	d115      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004178:	3308      	adds	r3, #8
 800417a:	2101      	movs	r1, #1
 800417c:	4618      	mov	r0, r3
 800417e:	f000 feef 	bl	8004f60 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004188:	e017      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800418a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800418e:	3328      	adds	r3, #40	; 0x28
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff96 	bl	80050c4 <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800419e:	e00c      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041a6:	e008      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041a8:	bf00      	nop
 80041aa:	e006      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041ac:	bf00      	nop
 80041ae:	e004      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041b0:	bf00      	nop
 80041b2:	e002      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041b4:	bf00      	nop
 80041b6:	e000      	b.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80041b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80041ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80041d2:	4a02      	ldr	r2, [pc, #8]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6593      	str	r3, [r2, #88]	; 0x58
 80041d8:	e006      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80041da:	bf00      	nop
 80041dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041e4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80041e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80041f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80041fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004202:	460b      	mov	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	d037      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800420e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004212:	d00e      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004218:	d816      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800421e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004222:	d111      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004224:	4bc4      	ldr	r3, [pc, #784]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004228:	4ac3      	ldr	r2, [pc, #780]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800422a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800422e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004230:	e00f      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004236:	3308      	adds	r3, #8
 8004238:	2101      	movs	r1, #1
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fe90 	bl	8004f60 <RCCEx_PLL2_Config>
 8004240:	4603      	mov	r3, r0
 8004242:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004246:	e004      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800424e:	e000      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004252:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800425a:	4bb7      	ldr	r3, [pc, #732]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800425c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004262:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004268:	4ab3      	ldr	r2, [pc, #716]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800426a:	430b      	orrs	r3, r1
 800426c:	6513      	str	r3, [r2, #80]	; 0x50
 800426e:	e003      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004274:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004278:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004280:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800428e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004292:	460b      	mov	r3, r1
 8004294:	4313      	orrs	r3, r2
 8004296:	d039      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d81c      	bhi.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042e5 	.word	0x080042e5
 80042ac:	080042b9 	.word	0x080042b9
 80042b0:	080042c7 	.word	0x080042c7
 80042b4:	080042e5 	.word	0x080042e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b8:	4b9f      	ldr	r3, [pc, #636]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a9e      	ldr	r2, [pc, #632]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042c4:	e00f      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ca:	3308      	adds	r3, #8
 80042cc:	2102      	movs	r1, #2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fe46 	bl	8004f60 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 80042da:	e004      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042e2:	e000      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80042e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10a      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80042ee:	4b92      	ldr	r3, [pc, #584]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	f023 0103 	bic.w	r1, r3, #3
 80042f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042fc:	4a8e      	ldr	r2, [pc, #568]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042fe:	430b      	orrs	r3, r1
 8004300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004302:	e003      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004304:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004308:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800430c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800431c:	2300      	movs	r3, #0
 800431e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004322:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004326:	460b      	mov	r3, r1
 8004328:	4313      	orrs	r3, r2
 800432a:	f000 8099 	beq.w	8004460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800432e:	4b83      	ldr	r3, [pc, #524]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a82      	ldr	r2, [pc, #520]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004338:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800433a:	f7fd f8cd 	bl	80014d8 <HAL_GetTick>
 800433e:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004342:	e00b      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fd f8c8 	bl	80014d8 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b64      	cmp	r3, #100	; 0x64
 8004352:	d903      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800435a:	e005      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435c:	4b77      	ldr	r3, [pc, #476]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ed      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004368:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800436c:	2b00      	cmp	r3, #0
 800436e:	d173      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004370:	4b71      	ldr	r3, [pc, #452]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004374:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004378:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800437c:	4053      	eors	r3, r2
 800437e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004382:	2b00      	cmp	r3, #0
 8004384:	d015      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004386:	4b6c      	ldr	r3, [pc, #432]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004392:	4b69      	ldr	r3, [pc, #420]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	4a68      	ldr	r2, [pc, #416]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800439e:	4b66      	ldr	r3, [pc, #408]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a65      	ldr	r2, [pc, #404]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043aa:	4a63      	ldr	r2, [pc, #396]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80043ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043be:	d118      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043c0:	f7fd f88a 	bl	80014d8 <HAL_GetTick>
 80043c4:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043c8:	e00d      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ca:	f7fd f885 	bl	80014d8 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80043d4:	1ad2      	subs	r2, r2, r3
 80043d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80043da:	429a      	cmp	r2, r3
 80043dc:	d903      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 80043e4:	e005      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043e6:	4b54      	ldr	r3, [pc, #336]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0eb      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80043f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d129      	bne.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440a:	d10e      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800440c:	4b4a      	ldr	r3, [pc, #296]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004414:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004418:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800441c:	091a      	lsrs	r2, r3, #4
 800441e:	4b48      	ldr	r3, [pc, #288]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004420:	4013      	ands	r3, r2
 8004422:	4a45      	ldr	r2, [pc, #276]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004424:	430b      	orrs	r3, r1
 8004426:	6113      	str	r3, [r2, #16]
 8004428:	e005      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800442a:	4b43      	ldr	r3, [pc, #268]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4a42      	ldr	r2, [pc, #264]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004430:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004434:	6113      	str	r3, [r2, #16]
 8004436:	4b40      	ldr	r3, [pc, #256]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004438:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800443a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800443e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004446:	4a3c      	ldr	r2, [pc, #240]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004448:	430b      	orrs	r3, r1
 800444a:	6713      	str	r3, [r2, #112]	; 0x70
 800444c:	e008      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800444e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004452:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8004456:	e003      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800445c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004468:	f002 0301 	and.w	r3, r2, #1
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004470:	2300      	movs	r3, #0
 8004472:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004476:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800447a:	460b      	mov	r3, r1
 800447c:	4313      	orrs	r3, r2
 800447e:	f000 8090 	beq.w	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	2b28      	cmp	r3, #40	; 0x28
 800448c:	d870      	bhi.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	08004579 	.word	0x08004579
 8004498:	08004571 	.word	0x08004571
 800449c:	08004571 	.word	0x08004571
 80044a0:	08004571 	.word	0x08004571
 80044a4:	08004571 	.word	0x08004571
 80044a8:	08004571 	.word	0x08004571
 80044ac:	08004571 	.word	0x08004571
 80044b0:	08004571 	.word	0x08004571
 80044b4:	08004545 	.word	0x08004545
 80044b8:	08004571 	.word	0x08004571
 80044bc:	08004571 	.word	0x08004571
 80044c0:	08004571 	.word	0x08004571
 80044c4:	08004571 	.word	0x08004571
 80044c8:	08004571 	.word	0x08004571
 80044cc:	08004571 	.word	0x08004571
 80044d0:	08004571 	.word	0x08004571
 80044d4:	0800455b 	.word	0x0800455b
 80044d8:	08004571 	.word	0x08004571
 80044dc:	08004571 	.word	0x08004571
 80044e0:	08004571 	.word	0x08004571
 80044e4:	08004571 	.word	0x08004571
 80044e8:	08004571 	.word	0x08004571
 80044ec:	08004571 	.word	0x08004571
 80044f0:	08004571 	.word	0x08004571
 80044f4:	08004579 	.word	0x08004579
 80044f8:	08004571 	.word	0x08004571
 80044fc:	08004571 	.word	0x08004571
 8004500:	08004571 	.word	0x08004571
 8004504:	08004571 	.word	0x08004571
 8004508:	08004571 	.word	0x08004571
 800450c:	08004571 	.word	0x08004571
 8004510:	08004571 	.word	0x08004571
 8004514:	08004579 	.word	0x08004579
 8004518:	08004571 	.word	0x08004571
 800451c:	08004571 	.word	0x08004571
 8004520:	08004571 	.word	0x08004571
 8004524:	08004571 	.word	0x08004571
 8004528:	08004571 	.word	0x08004571
 800452c:	08004571 	.word	0x08004571
 8004530:	08004571 	.word	0x08004571
 8004534:	08004579 	.word	0x08004579
 8004538:	58024400 	.word	0x58024400
 800453c:	58024800 	.word	0x58024800
 8004540:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004548:	3308      	adds	r3, #8
 800454a:	2101      	movs	r1, #1
 800454c:	4618      	mov	r0, r3
 800454e:	f000 fd07 	bl	8004f60 <RCCEx_PLL2_Config>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004558:	e00f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455e:	3328      	adds	r3, #40	; 0x28
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fdae 	bl	80050c4 <RCCEx_PLL3_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800456e:	e004      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004576:	e000      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10b      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004582:	4bc0      	ldr	r3, [pc, #768]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004586:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	4abc      	ldr	r2, [pc, #752]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004594:	430b      	orrs	r3, r1
 8004596:	6553      	str	r3, [r2, #84]	; 0x54
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800459e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f002 0302 	and.w	r3, r2, #2
 80045ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80045b8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d043      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80045c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045ca:	2b05      	cmp	r3, #5
 80045cc:	d824      	bhi.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 80045ce:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004621 	.word	0x08004621
 80045d8:	080045ed 	.word	0x080045ed
 80045dc:	08004603 	.word	0x08004603
 80045e0:	08004621 	.word	0x08004621
 80045e4:	08004621 	.word	0x08004621
 80045e8:	08004621 	.word	0x08004621
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f0:	3308      	adds	r3, #8
 80045f2:	2101      	movs	r1, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 fcb3 	bl	8004f60 <RCCEx_PLL2_Config>
 80045fa:	4603      	mov	r3, r0
 80045fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004600:	e00f      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004606:	3328      	adds	r3, #40	; 0x28
 8004608:	2101      	movs	r1, #1
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fd5a 	bl	80050c4 <RCCEx_PLL3_Config>
 8004610:	4603      	mov	r3, r0
 8004612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004616:	e004      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800461e:	e000      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800462a:	4b96      	ldr	r3, [pc, #600]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800462c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462e:	f023 0107 	bic.w	r1, r3, #7
 8004632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800463a:	4a92      	ldr	r2, [pc, #584]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800463c:	430b      	orrs	r3, r1
 800463e:	6553      	str	r3, [r2, #84]	; 0x54
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004642:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004646:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f002 0304 	and.w	r3, r2, #4
 8004656:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800465a:	2300      	movs	r3, #0
 800465c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004660:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d043      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800466a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800466e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004672:	2b05      	cmp	r3, #5
 8004674:	d824      	bhi.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004676:	a201      	add	r2, pc, #4	; (adr r2, 800467c <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 8004678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467c:	080046c9 	.word	0x080046c9
 8004680:	08004695 	.word	0x08004695
 8004684:	080046ab 	.word	0x080046ab
 8004688:	080046c9 	.word	0x080046c9
 800468c:	080046c9 	.word	0x080046c9
 8004690:	080046c9 	.word	0x080046c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004694:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004698:	3308      	adds	r3, #8
 800469a:	2101      	movs	r1, #1
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fc5f 	bl	8004f60 <RCCEx_PLL2_Config>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046a8:	e00f      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ae:	3328      	adds	r3, #40	; 0x28
 80046b0:	2101      	movs	r1, #1
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fd06 	bl	80050c4 <RCCEx_PLL3_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80046be:	e004      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046c6:	e000      	b.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 80046c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d2:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d6:	f023 0107 	bic.w	r1, r3, #7
 80046da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046e2:	4a68      	ldr	r2, [pc, #416]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046e4:	430b      	orrs	r3, r1
 80046e6:	6593      	str	r3, [r2, #88]	; 0x58
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	f002 0320 	and.w	r3, r2, #32
 80046fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004702:	2300      	movs	r3, #0
 8004704:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004708:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800470c:	460b      	mov	r3, r1
 800470e:	4313      	orrs	r3, r2
 8004710:	d055      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800471a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800471e:	d033      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004720:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004724:	d82c      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800472a:	d02f      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d826      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004732:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004736:	d02b      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004738:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800473c:	d820      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800473e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004742:	d012      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004748:	d81a      	bhi.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800474a:	2b00      	cmp	r3, #0
 800474c:	d022      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004752:	d115      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004758:	3308      	adds	r3, #8
 800475a:	2100      	movs	r1, #0
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fbff 	bl	8004f60 <RCCEx_PLL2_Config>
 8004762:	4603      	mov	r3, r0
 8004764:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004768:	e015      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800476a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800476e:	3328      	adds	r3, #40	; 0x28
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 fca6 	bl	80050c4 <RCCEx_PLL3_Config>
 8004778:	4603      	mov	r3, r0
 800477a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800477e:	e00a      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004786:	e006      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004788:	bf00      	nop
 800478a:	e004      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800478c:	bf00      	nop
 800478e:	e002      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004790:	bf00      	nop
 8004792:	e000      	b.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004796:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800479e:	4b39      	ldr	r3, [pc, #228]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ae:	4a35      	ldr	r2, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6553      	str	r3, [r2, #84]	; 0x54
 80047b4:	e003      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80047be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80047ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047ce:	2300      	movs	r3, #0
 80047d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80047d8:	460b      	mov	r3, r1
 80047da:	4313      	orrs	r3, r2
 80047dc:	d058      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047ea:	d033      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80047ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80047f0:	d82c      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f6:	d02f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047fc:	d826      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80047fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004802:	d02b      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004804:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004808:	d820      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d012      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004814:	d81a      	bhi.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004816:	2b00      	cmp	r3, #0
 8004818:	d022      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800481a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481e:	d115      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004824:	3308      	adds	r3, #8
 8004826:	2100      	movs	r1, #0
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fb99 	bl	8004f60 <RCCEx_PLL2_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004834:	e015      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004836:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800483a:	3328      	adds	r3, #40	; 0x28
 800483c:	2102      	movs	r1, #2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fc40 	bl	80050c4 <RCCEx_PLL3_Config>
 8004844:	4603      	mov	r3, r0
 8004846:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800484a:	e00a      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004852:	e006      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004854:	bf00      	nop
 8004856:	e004      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004858:	bf00      	nop
 800485a:	e002      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800485c:	bf00      	nop
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004862:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10e      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800486a:	4b06      	ldr	r3, [pc, #24]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004872:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800487a:	4a02      	ldr	r2, [pc, #8]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800487c:	430b      	orrs	r3, r1
 800487e:	6593      	str	r3, [r2, #88]	; 0x58
 8004880:	e006      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 8004882:	bf00      	nop
 8004884:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800488c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048a0:	2300      	movs	r3, #0
 80048a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048aa:	460b      	mov	r3, r1
 80048ac:	4313      	orrs	r3, r2
 80048ae:	d055      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80048b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80048b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048bc:	d033      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80048be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80048c2:	d82c      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c8:	d02f      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80048ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ce:	d826      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048d4:	d02b      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80048d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80048da:	d820      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e0:	d012      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 80048e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e6:	d81a      	bhi.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d022      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 80048ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f0:	d115      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f6:	3308      	adds	r3, #8
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb30 	bl	8004f60 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004906:	e015      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490c:	3328      	adds	r3, #40	; 0x28
 800490e:	2102      	movs	r1, #2
 8004910:	4618      	mov	r0, r3
 8004912:	f000 fbd7 	bl	80050c4 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800491c:	e00a      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004924:	e006      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004926:	bf00      	nop
 8004928:	e004      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800492a:	bf00      	nop
 800492c:	e002      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800492e:	bf00      	nop
 8004930:	e000      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10b      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800493c:	4ba1      	ldr	r3, [pc, #644]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004940:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004948:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800494c:	4a9d      	ldr	r2, [pc, #628]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800494e:	430b      	orrs	r3, r1
 8004950:	6593      	str	r3, [r2, #88]	; 0x58
 8004952:	e003      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004958:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800495c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f002 0308 	and.w	r3, r2, #8
 8004968:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800496c:	2300      	movs	r3, #0
 800496e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004972:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004976:	460b      	mov	r3, r1
 8004978:	4313      	orrs	r3, r2
 800497a:	d01e      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800497c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800498a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800498e:	3328      	adds	r3, #40	; 0x28
 8004990:	2102      	movs	r1, #2
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fb96 	bl	80050c4 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80049a4:	4b87      	ldr	r3, [pc, #540]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b4:	4a83      	ldr	r2, [pc, #524]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049b6:	430b      	orrs	r3, r1
 80049b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f002 0310 	and.w	r3, r2, #16
 80049c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80049d4:	460b      	mov	r3, r1
 80049d6:	4313      	orrs	r3, r2
 80049d8:	d01e      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80049da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049e6:	d10c      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049ec:	3328      	adds	r3, #40	; 0x28
 80049ee:	2102      	movs	r1, #2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 fb67 	bl	80050c4 <RCCEx_PLL3_Config>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a02:	4b70      	ldr	r3, [pc, #448]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a12:	4a6c      	ldr	r2, [pc, #432]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a14:	430b      	orrs	r3, r1
 8004a16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004a24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004a32:	460b      	mov	r3, r1
 8004a34:	4313      	orrs	r3, r2
 8004a36:	d03e      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a44:	d022      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xea8>
 8004a46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a4a:	d81b      	bhi.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a54:	d00b      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 8004a56:	e015      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 fa7d 	bl	8004f60 <RCCEx_PLL2_Config>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a6c:	e00f      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a72:	3328      	adds	r3, #40	; 0x28
 8004a74:	2102      	movs	r1, #2
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fb24 	bl	80050c4 <RCCEx_PLL3_Config>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004a82:	e004      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a8a:	e000      	b.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004a8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a8e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a96:	4b4b      	ldr	r3, [pc, #300]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004aa6:	4a47      	ldr	r2, [pc, #284]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004aa8:	430b      	orrs	r3, r1
 8004aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8004aac:	e003      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ab2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004ac2:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ac8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004acc:	460b      	mov	r3, r1
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	d03b      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004ad2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ade:	d01f      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004ae0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ae4:	d818      	bhi.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d003      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004aec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004af0:	d007      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004af4:	4b33      	ldr	r3, [pc, #204]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	4a32      	ldr	r2, [pc, #200]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b00:	e00f      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b06:	3328      	adds	r3, #40	; 0x28
 8004b08:	2101      	movs	r1, #1
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fada 	bl	80050c4 <RCCEx_PLL3_Config>
 8004b10:	4603      	mov	r3, r0
 8004b12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b16:	e004      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b2a:	4b26      	ldr	r3, [pc, #152]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6553      	str	r3, [r2, #84]	; 0x54
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b46:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004b56:	673b      	str	r3, [r7, #112]	; 0x70
 8004b58:	2300      	movs	r3, #0
 8004b5a:	677b      	str	r3, [r7, #116]	; 0x74
 8004b5c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004b60:	460b      	mov	r3, r1
 8004b62:	4313      	orrs	r3, r2
 8004b64:	d034      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b74:	d007      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004b76:	e011      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b84:	e00e      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f9e6 	bl	8004f60 <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10d      	bne.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bac:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bba:	4a02      	ldr	r2, [pc, #8]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bcc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004bd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004bdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bde:	2300      	movs	r3, #0
 8004be0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004be2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004be6:	460b      	mov	r3, r1
 8004be8:	4313      	orrs	r3, r2
 8004bea:	d00c      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf0:	3328      	adds	r3, #40	; 0x28
 8004bf2:	2102      	movs	r1, #2
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fa65 	bl	80050c4 <RCCEx_PLL3_Config>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d002      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004c12:	663b      	str	r3, [r7, #96]	; 0x60
 8004c14:	2300      	movs	r3, #0
 8004c16:	667b      	str	r3, [r7, #100]	; 0x64
 8004c18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	d038      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2e:	d018      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c34:	d811      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c3a:	d014      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c40:	d80b      	bhi.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d011      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4a:	d106      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4bc3      	ldr	r3, [pc, #780]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	4ac2      	ldr	r2, [pc, #776]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004c58:	e008      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004c60:	e004      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c62:	bf00      	nop
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10b      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c74:	4bb9      	ldr	r3, [pc, #740]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	4ab5      	ldr	r2, [pc, #724]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c86:	430b      	orrs	r3, r1
 8004c88:	6553      	str	r3, [r2, #84]	; 0x54
 8004c8a:	e003      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c90:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ca6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004caa:	460b      	mov	r3, r1
 8004cac:	4313      	orrs	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cb0:	4baa      	ldr	r3, [pc, #680]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cbe:	4aa7      	ldr	r2, [pc, #668]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ccc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	657b      	str	r3, [r7, #84]	; 0x54
 8004cd6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	d009      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ce0:	4b9e      	ldr	r3, [pc, #632]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cee:	4a9b      	ldr	r2, [pc, #620]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cf0:	430b      	orrs	r3, r1
 8004cf2:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004d00:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d02:	2300      	movs	r3, #0
 8004d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	d009      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004d10:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1e:	4a8f      	ldr	r2, [pc, #572]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d20:	430b      	orrs	r3, r1
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004d30:	643b      	str	r3, [r7, #64]	; 0x40
 8004d32:	2300      	movs	r3, #0
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
 8004d36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d40:	4b86      	ldr	r3, [pc, #536]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	4a85      	ldr	r2, [pc, #532]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004d4a:	6113      	str	r3, [r2, #16]
 8004d4c:	4b83      	ldr	r3, [pc, #524]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d4e:	6919      	ldr	r1, [r3, #16]
 8004d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004d58:	4a80      	ldr	r2, [pc, #512]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004d74:	460b      	mov	r3, r1
 8004d76:	4313      	orrs	r3, r2
 8004d78:	d009      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d7a:	4b78      	ldr	r3, [pc, #480]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004d82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	4a74      	ldr	r2, [pc, #464]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d96:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004da0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004da4:	460b      	mov	r3, r1
 8004da6:	4313      	orrs	r3, r2
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004daa:	4b6c      	ldr	r3, [pc, #432]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	4a68      	ldr	r2, [pc, #416]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004dbc:	430b      	orrs	r3, r1
 8004dbe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	2100      	movs	r1, #0
 8004dca:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dd2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	d011      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004de0:	3308      	adds	r3, #8
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f8bb 	bl	8004f60 <RCCEx_PLL2_Config>
 8004dea:	4603      	mov	r3, r0
 8004dec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dfc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	2100      	movs	r1, #0
 8004e0a:	6239      	str	r1, [r7, #32]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e16:	460b      	mov	r3, r1
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	d011      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e20:	3308      	adds	r3, #8
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f89b 	bl	8004f60 <RCCEx_PLL2_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	f003 0304 	and.w	r3, r3, #4
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004e56:	460b      	mov	r3, r1
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	d011      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e60:	3308      	adds	r3, #8
 8004e62:	2102      	movs	r1, #2
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f87b 	bl	8004f60 <RCCEx_PLL2_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e78:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004e80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	2100      	movs	r1, #0
 8004e8a:	6139      	str	r1, [r7, #16]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004e96:	460b      	mov	r3, r1
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	d011      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ea0:	3328      	adds	r3, #40	; 0x28
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f90d 	bl	80050c4 <RCCEx_PLL3_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004eb0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ebc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004ec0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	2100      	movs	r1, #0
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d011      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004edc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ee0:	3328      	adds	r3, #40	; 0x28
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 f8ed 	bl	80050c4 <RCCEx_PLL3_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004ef0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004efc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	6039      	str	r1, [r7, #0]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d011      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004f20:	3328      	adds	r3, #40	; 0x28
 8004f22:	2102      	movs	r1, #2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 f8cd 	bl	80050c4 <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004f30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004f3c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004f40:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	e000      	b.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5a:	bf00      	nop
 8004f5c:	58024400 	.word	0x58024400

08004f60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f6e:	4b53      	ldr	r3, [pc, #332]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d101      	bne.n	8004f7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e099      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f7e:	4b4f      	ldr	r3, [pc, #316]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f8a:	f7fc faa5 	bl	80014d8 <HAL_GetTick>
 8004f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f90:	e008      	b.n	8004fa4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f92:	f7fc faa1 	bl	80014d8 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e086      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fa4:	4b45      	ldr	r3, [pc, #276]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1f0      	bne.n	8004f92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004fb0:	4b42      	ldr	r3, [pc, #264]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	031b      	lsls	r3, r3, #12
 8004fbe:	493f      	ldr	r1, [pc, #252]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	628b      	str	r3, [r1, #40]	; 0x28
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	025b      	lsls	r3, r3, #9
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	041b      	lsls	r3, r3, #16
 8004fe2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ff4:	4931      	ldr	r1, [pc, #196]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ffa:	4b30      	ldr	r3, [pc, #192]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	492d      	ldr	r1, [pc, #180]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800500c:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	f023 0220 	bic.w	r2, r3, #32
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	4928      	ldr	r1, [pc, #160]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800501a:	4313      	orrs	r3, r2
 800501c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	4a26      	ldr	r2, [pc, #152]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800502a:	4b24      	ldr	r3, [pc, #144]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800502c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800502e:	4b24      	ldr	r3, [pc, #144]	; (80050c0 <RCCEx_PLL2_Config+0x160>)
 8005030:	4013      	ands	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	69d2      	ldr	r2, [r2, #28]
 8005036:	00d2      	lsls	r2, r2, #3
 8005038:	4920      	ldr	r1, [pc, #128]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800503e:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005044:	f043 0310 	orr.w	r3, r3, #16
 8005048:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a19      	ldr	r2, [pc, #100]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005056:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800505a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800505c:	e00f      	b.n	800507e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d106      	bne.n	8005072 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005064:	4b15      	ldr	r3, [pc, #84]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005068:	4a14      	ldr	r2, [pc, #80]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 800506a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800506e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005070:	e005      	b.n	800507e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005076:	4a11      	ldr	r2, [pc, #68]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005078:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800507c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 8005084:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800508a:	f7fc fa25 	bl	80014d8 <HAL_GetTick>
 800508e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005090:	e008      	b.n	80050a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005092:	f7fc fa21 	bl	80014d8 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e006      	b.n	80050b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <RCCEx_PLL2_Config+0x15c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	58024400 	.word	0x58024400
 80050c0:	ffff0007 	.word	0xffff0007

080050c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050d2:	4b53      	ldr	r3, [pc, #332]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	2b03      	cmp	r3, #3
 80050dc:	d101      	bne.n	80050e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e099      	b.n	8005216 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80050e2:	4b4f      	ldr	r3, [pc, #316]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a4e      	ldr	r2, [pc, #312]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fc f9f3 	bl	80014d8 <HAL_GetTick>
 80050f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80050f4:	e008      	b.n	8005108 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050f6:	f7fc f9ef 	bl	80014d8 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d901      	bls.n	8005108 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e086      	b.n	8005216 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005108:	4b45      	ldr	r3, [pc, #276]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1f0      	bne.n	80050f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005114:	4b42      	ldr	r3, [pc, #264]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	051b      	lsls	r3, r3, #20
 8005122:	493f      	ldr	r1, [pc, #252]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005124:	4313      	orrs	r3, r2
 8005126:	628b      	str	r3, [r1, #40]	; 0x28
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	3b01      	subs	r3, #1
 800512e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	3b01      	subs	r3, #1
 8005138:	025b      	lsls	r3, r3, #9
 800513a:	b29b      	uxth	r3, r3
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	3b01      	subs	r3, #1
 8005144:	041b      	lsls	r3, r3, #16
 8005146:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	3b01      	subs	r3, #1
 8005152:	061b      	lsls	r3, r3, #24
 8005154:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005158:	4931      	ldr	r1, [pc, #196]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800515a:	4313      	orrs	r3, r2
 800515c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800515e:	4b30      	ldr	r3, [pc, #192]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	492d      	ldr	r1, [pc, #180]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	4928      	ldr	r1, [pc, #160]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005182:	4b27      	ldr	r3, [pc, #156]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005186:	4a26      	ldr	r2, [pc, #152]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005188:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800518c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 8005190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005192:	4b24      	ldr	r3, [pc, #144]	; (8005224 <RCCEx_PLL3_Config+0x160>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69d2      	ldr	r2, [r2, #28]
 800519a:	00d2      	lsls	r2, r2, #3
 800519c:	4920      	ldr	r1, [pc, #128]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80051a2:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80051b4:	4b1a      	ldr	r3, [pc, #104]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a19      	ldr	r2, [pc, #100]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051c0:	e00f      	b.n	80051e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d106      	bne.n	80051d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80051c8:	4b15      	ldr	r3, [pc, #84]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	4a14      	ldr	r2, [pc, #80]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051d4:	e005      	b.n	80051e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80051d6:	4b12      	ldr	r3, [pc, #72]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80051e2:	4b0f      	ldr	r3, [pc, #60]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a0e      	ldr	r2, [pc, #56]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 80051e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ee:	f7fc f973 	bl	80014d8 <HAL_GetTick>
 80051f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80051f4:	e008      	b.n	8005208 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80051f6:	f7fc f96f 	bl	80014d8 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e006      	b.n	8005216 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005208:	4b05      	ldr	r3, [pc, #20]	; (8005220 <RCCEx_PLL3_Config+0x15c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005214:	7bfb      	ldrb	r3, [r7, #15]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	58024400 	.word	0x58024400
 8005224:	ffff0007 	.word	0xffff0007

08005228 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e02b      	b.n	8005294 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	d106      	bne.n	8005256 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f7fb fa51 	bl	80006f8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3304      	adds	r3, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 fb4f 	bl	800590c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	461a      	mov	r2, r3
 8005278:	6839      	ldr	r1, [r7, #0]
 800527a:	f000 fba3 	bl	80059c4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <HAL_SDRAM_Init+0x74>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a06      	ldr	r2, [pc, #24]	; (800529c <HAL_SDRAM_Init+0x74>)
 8005284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005288:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	52004000 	.word	0x52004000

080052a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d101      	bne.n	80052be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
 80052bc:	e021      	b.n	8005302 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80052be:	7dfb      	ldrb	r3, [r7, #23]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d002      	beq.n	80052ca <HAL_SDRAM_SendCommand+0x2a>
 80052c4:	7dfb      	ldrb	r3, [r7, #23]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d118      	bne.n	80052fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2202      	movs	r2, #2
 80052ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	4618      	mov	r0, r3
 80052dc:	f000 fbdc 	bl	8005a98 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d104      	bne.n	80052f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2205      	movs	r2, #5
 80052ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052f0:	e006      	b.n	8005300 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80052fa:	e001      	b.n	8005300 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800530a:	b580      	push	{r7, lr}
 800530c:	b082      	sub	sp, #8
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d101      	bne.n	8005324 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8005320:	2302      	movs	r3, #2
 8005322:	e016      	b.n	8005352 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2b01      	cmp	r3, #1
 800532e:	d10f      	bne.n	8005350 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6839      	ldr	r1, [r7, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fbce 	bl	8005ae0 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
 800534e:	e000      	b.n	8005352 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
}
 8005352:	4618      	mov	r0, r3
 8005354:	3708      	adds	r7, #8
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b082      	sub	sp, #8
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e049      	b.n	8005400 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005372:	b2db      	uxtb	r3, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f841 	bl	8005408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f000 f9ff 	bl	800579c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d001      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e054      	b.n	80054de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0201 	orr.w	r2, r2, #1
 800544a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a26      	ldr	r2, [pc, #152]	; (80054ec <HAL_TIM_Base_Start_IT+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d022      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545e:	d01d      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a22      	ldr	r2, [pc, #136]	; (80054f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d018      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a21      	ldr	r2, [pc, #132]	; (80054f4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00e      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a1e      	ldr	r2, [pc, #120]	; (80054fc <HAL_TIM_Base_Start_IT+0xe0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d009      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1c      	ldr	r2, [pc, #112]	; (8005500 <HAL_TIM_Base_Start_IT+0xe4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d004      	beq.n	800549c <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1b      	ldr	r2, [pc, #108]	; (8005504 <HAL_TIM_Base_Start_IT+0xe8>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d115      	bne.n	80054c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_TIM_Base_Start_IT+0xec>)
 80054a4:	4013      	ands	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b06      	cmp	r3, #6
 80054ac:	d015      	beq.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054b4:	d011      	beq.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054c6:	e008      	b.n	80054da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f042 0201 	orr.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	e000      	b.n	80054dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40001800 	.word	0x40001800
 8005504:	40014000 	.word	0x40014000
 8005508:	00010007 	.word	0x00010007

0800550c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b082      	sub	sp, #8
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	f003 0302 	and.w	r3, r3, #2
 800551e:	2b02      	cmp	r3, #2
 8005520:	d122      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11b      	bne.n	8005568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0202 	mvn.w	r2, #2
 8005538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f905 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8f7 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f908 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d122      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f06f 0204 	mvn.w	r2, #4
 800558c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2202      	movs	r2, #2
 8005592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f8db 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80055a8:	e005      	b.n	80055b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f8cd 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f8de 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d122      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d11b      	bne.n	8005610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0208 	mvn.w	r2, #8
 80055e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2204      	movs	r2, #4
 80055e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f8b1 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 80055fc:	e005      	b.n	800560a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f8a3 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f8b4 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0310 	and.w	r3, r3, #16
 800561a:	2b10      	cmp	r3, #16
 800561c:	d122      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0310 	and.w	r3, r3, #16
 8005628:	2b10      	cmp	r3, #16
 800562a:	d11b      	bne.n	8005664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0210 	mvn.w	r2, #16
 8005634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2208      	movs	r2, #8
 800563a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f887 	bl	800575e <HAL_TIM_IC_CaptureCallback>
 8005650:	e005      	b.n	800565e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f879 	bl	800574a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 f88a 	bl	8005772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d10e      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	2b01      	cmp	r3, #1
 800567e:	d107      	bne.n	8005690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0201 	mvn.w	r2, #1
 8005688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fb fc06 	bl	8000e9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d10e      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b80      	cmp	r3, #128	; 0x80
 80056aa:	d107      	bne.n	80056bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f914 	bl	80058e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ca:	d10e      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f907 	bl	80058f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f4:	2b40      	cmp	r3, #64	; 0x40
 80056f6:	d10e      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005702:	2b40      	cmp	r3, #64	; 0x40
 8005704:	d107      	bne.n	8005716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f838 	bl	8005786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	691b      	ldr	r3, [r3, #16]
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b20      	cmp	r3, #32
 8005722:	d10e      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	2b20      	cmp	r3, #32
 8005730:	d107      	bne.n	8005742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f06f 0220 	mvn.w	r2, #32
 800573a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 f8c7 	bl	80058d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
	...

0800579c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a40      	ldr	r2, [pc, #256]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d013      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ba:	d00f      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a3d      	ldr	r2, [pc, #244]	; (80058b4 <TIM_Base_SetConfig+0x118>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00b      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a3c      	ldr	r2, [pc, #240]	; (80058b8 <TIM_Base_SetConfig+0x11c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a3b      	ldr	r2, [pc, #236]	; (80058bc <TIM_Base_SetConfig+0x120>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d003      	beq.n	80057dc <TIM_Base_SetConfig+0x40>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a3a      	ldr	r2, [pc, #232]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d108      	bne.n	80057ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2f      	ldr	r2, [pc, #188]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01f      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d01b      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a2c      	ldr	r2, [pc, #176]	; (80058b4 <TIM_Base_SetConfig+0x118>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d017      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a2b      	ldr	r2, [pc, #172]	; (80058b8 <TIM_Base_SetConfig+0x11c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <TIM_Base_SetConfig+0x120>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00f      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a29      	ldr	r2, [pc, #164]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d00b      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <TIM_Base_SetConfig+0x128>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d007      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a27      	ldr	r2, [pc, #156]	; (80058c8 <TIM_Base_SetConfig+0x12c>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d003      	beq.n	8005836 <TIM_Base_SetConfig+0x9a>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <TIM_Base_SetConfig+0x130>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d108      	bne.n	8005848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4313      	orrs	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a10      	ldr	r2, [pc, #64]	; (80058b0 <TIM_Base_SetConfig+0x114>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d00f      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <TIM_Base_SetConfig+0x124>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00b      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a11      	ldr	r2, [pc, #68]	; (80058c4 <TIM_Base_SetConfig+0x128>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d007      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a10      	ldr	r2, [pc, #64]	; (80058c8 <TIM_Base_SetConfig+0x12c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_Base_SetConfig+0xf8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a0f      	ldr	r2, [pc, #60]	; (80058cc <TIM_Base_SetConfig+0x130>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d103      	bne.n	800589c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	691a      	ldr	r2, [r3, #16]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	615a      	str	r2, [r3, #20]
}
 80058a2:	bf00      	nop
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40010400 	.word	0x40010400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d121      	bne.n	8005962 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <FMC_SDRAM_Init+0xb4>)
 8005924:	4013      	ands	r3, r2
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	6851      	ldr	r1, [r2, #4]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	4311      	orrs	r1, r2
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	68d2      	ldr	r2, [r2, #12]
 8005934:	4311      	orrs	r1, r2
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	6912      	ldr	r2, [r2, #16]
 800593a:	4311      	orrs	r1, r2
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	6952      	ldr	r2, [r2, #20]
 8005940:	4311      	orrs	r1, r2
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	6992      	ldr	r2, [r2, #24]
 8005946:	4311      	orrs	r1, r2
 8005948:	683a      	ldr	r2, [r7, #0]
 800594a:	69d2      	ldr	r2, [r2, #28]
 800594c:	4311      	orrs	r1, r2
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	6a12      	ldr	r2, [r2, #32]
 8005952:	4311      	orrs	r1, r2
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005958:	430a      	orrs	r2, r1
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e026      	b.n	80059b0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	69d9      	ldr	r1, [r3, #28]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	4319      	orrs	r1, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	430b      	orrs	r3, r1
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685a      	ldr	r2, [r3, #4]
 8005984:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <FMC_SDRAM_Init+0xb4>)
 8005986:	4013      	ands	r3, r2
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	6851      	ldr	r1, [r2, #4]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	4311      	orrs	r1, r2
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	68d2      	ldr	r2, [r2, #12]
 8005996:	4311      	orrs	r1, r2
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	6912      	ldr	r2, [r2, #16]
 800599c:	4311      	orrs	r1, r2
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	6952      	ldr	r2, [r2, #20]
 80059a2:	4311      	orrs	r1, r2
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	6992      	ldr	r2, [r2, #24]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	ffff8000 	.word	0xffff8000

080059c4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d128      	bne.n	8005a28 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	1e59      	subs	r1, r3, #1
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	4319      	orrs	r1, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	4319      	orrs	r1, r3
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	031b      	lsls	r3, r3, #12
 8005a00:	4319      	orrs	r1, r3
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	041b      	lsls	r3, r3, #16
 8005a0a:	4319      	orrs	r1, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	051b      	lsls	r3, r3, #20
 8005a14:	4319      	orrs	r1, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	431a      	orrs	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	e02d      	b.n	8005a84 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	4b19      	ldr	r3, [pc, #100]	; (8005a94 <FMC_SDRAM_Timing_Init+0xd0>)
 8005a2e:	4013      	ands	r3, r2
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	68d2      	ldr	r2, [r2, #12]
 8005a34:	3a01      	subs	r2, #1
 8005a36:	0311      	lsls	r1, r2, #12
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	6952      	ldr	r2, [r2, #20]
 8005a3c:	3a01      	subs	r2, #1
 8005a3e:	0512      	lsls	r2, r2, #20
 8005a40:	430a      	orrs	r2, r1
 8005a42:	431a      	orrs	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1e59      	subs	r1, r3, #1
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4319      	orrs	r1, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	4319      	orrs	r1, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	4319      	orrs	r1, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	061b      	lsls	r3, r3, #24
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	431a      	orrs	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop
 8005a94:	ff0f0fff 	.word	0xff0f0fff

08005a98 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <FMC_SDRAM_SendCommand+0x44>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	6811      	ldr	r1, [r2, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	4311      	orrs	r1, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6892      	ldr	r2, [r2, #8]
 8005aba:	3a01      	subs	r2, #1
 8005abc:	0152      	lsls	r2, r2, #5
 8005abe:	4311      	orrs	r1, r2
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	68d2      	ldr	r2, [r2, #12]
 8005ac4:	0252      	lsls	r2, r2, #9
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	ffc00000 	.word	0xffc00000

08005ae0 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	0052      	lsls	r2, r2, #1
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	ffffc001 	.word	0xffffc001

08005b10 <__NVIC_SetPriority>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	4603      	mov	r3, r0
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db0a      	blt.n	8005b3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2da      	uxtb	r2, r3
 8005b28:	490c      	ldr	r1, [pc, #48]	; (8005b5c <__NVIC_SetPriority+0x4c>)
 8005b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b2e:	0112      	lsls	r2, r2, #4
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	440b      	add	r3, r1
 8005b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005b38:	e00a      	b.n	8005b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	4908      	ldr	r1, [pc, #32]	; (8005b60 <__NVIC_SetPriority+0x50>)
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	3b04      	subs	r3, #4
 8005b48:	0112      	lsls	r2, r2, #4
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	440b      	add	r3, r1
 8005b4e:	761a      	strb	r2, [r3, #24]
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	e000e100 	.word	0xe000e100
 8005b60:	e000ed00 	.word	0xe000ed00

08005b64 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <SysTick_Handler+0x1c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005b6c:	f002 faa0 	bl	80080b0 <xTaskGetSchedulerState>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d001      	beq.n	8005b7a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005b76:	f003 f987 	bl	8008e88 <xPortSysTickHandler>
  }
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	e000e010 	.word	0xe000e010

08005b84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005b88:	2100      	movs	r1, #0
 8005b8a:	f06f 0004 	mvn.w	r0, #4
 8005b8e:	f7ff ffbf 	bl	8005b10 <__NVIC_SetPriority>
#endif
}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
	...

08005b98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
 8005ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8005ba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005baa:	f06f 0305 	mvn.w	r3, #5
 8005bae:	607b      	str	r3, [r7, #4]
 8005bb0:	e00c      	b.n	8005bcc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <osKernelInitialize+0x44>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <osKernelInitialize+0x44>)
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	607b      	str	r3, [r7, #4]
 8005bc4:	e002      	b.n	8005bcc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005bcc:	687b      	ldr	r3, [r7, #4]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	24000330 	.word	0x24000330

08005be0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005be6:	f3ef 8305 	mrs	r3, IPSR
 8005bea:	603b      	str	r3, [r7, #0]
  return(result);
 8005bec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <osKernelStart+0x1a>
    stat = osErrorISR;
 8005bf2:	f06f 0305 	mvn.w	r3, #5
 8005bf6:	607b      	str	r3, [r7, #4]
 8005bf8:	e010      	b.n	8005c1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <osKernelStart+0x48>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d109      	bne.n	8005c16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005c02:	f7ff ffbf 	bl	8005b84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005c06:	4b08      	ldr	r3, [pc, #32]	; (8005c28 <osKernelStart+0x48>)
 8005c08:	2202      	movs	r2, #2
 8005c0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005c0c:	f001 fdf2 	bl	80077f4 <vTaskStartScheduler>
      stat = osOK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	607b      	str	r3, [r7, #4]
 8005c14:	e002      	b.n	8005c1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005c16:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005c1c:	687b      	ldr	r3, [r7, #4]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	24000330 	.word	0x24000330

08005c2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08e      	sub	sp, #56	; 0x38
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c3c:	f3ef 8305 	mrs	r3, IPSR
 8005c40:	617b      	str	r3, [r7, #20]
  return(result);
 8005c42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d17e      	bne.n	8005d46 <osThreadNew+0x11a>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d07b      	beq.n	8005d46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005c4e:	2380      	movs	r3, #128	; 0x80
 8005c50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005c52:	2318      	movs	r3, #24
 8005c54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005c56:	2300      	movs	r3, #0
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d045      	beq.n	8005cf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <osThreadNew+0x48>
        name = attr->name;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d008      	beq.n	8005c9a <osThreadNew+0x6e>
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	2b38      	cmp	r3, #56	; 0x38
 8005c8c:	d805      	bhi.n	8005c9a <osThreadNew+0x6e>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <osThreadNew+0x72>
        return (NULL);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e054      	b.n	8005d48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	089b      	lsrs	r3, r3, #2
 8005cac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00e      	beq.n	8005cd4 <osThreadNew+0xa8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2bab      	cmp	r3, #171	; 0xab
 8005cbc:	d90a      	bls.n	8005cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <osThreadNew+0xa8>
        mem = 1;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e010      	b.n	8005cf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10c      	bne.n	8005cf6 <osThreadNew+0xca>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d108      	bne.n	8005cf6 <osThreadNew+0xca>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <osThreadNew+0xca>
          mem = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61bb      	str	r3, [r7, #24]
 8005cf0:	e001      	b.n	8005cf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d110      	bne.n	8005d1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d04:	9202      	str	r2, [sp, #8]
 8005d06:	9301      	str	r3, [sp, #4]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f001 fb7e 	bl	8007414 <xTaskCreateStatic>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	613b      	str	r3, [r7, #16]
 8005d1c:	e013      	b.n	8005d46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d110      	bne.n	8005d46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f001 fbc9 	bl	80074ce <xTaskCreate>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d001      	beq.n	8005d46 <osThreadNew+0x11a>
            hTask = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d46:	693b      	ldr	r3, [r7, #16]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	; 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d58:	f3ef 8305 	mrs	r3, IPSR
 8005d5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <osDelay+0x1c>
    stat = osErrorISR;
 8005d64:	f06f 0305 	mvn.w	r3, #5
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e007      	b.n	8005d7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d002      	beq.n	8005d7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f001 fd08 	bl	800778c <vTaskDelay>
    }
  }

  return (stat);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	; 0x28
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d96:	f3ef 8305 	mrs	r3, IPSR
 8005d9a:	613b      	str	r3, [r7, #16]
  return(result);
 8005d9c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d175      	bne.n	8005e8e <osSemaphoreNew+0x108>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d072      	beq.n	8005e8e <osSemaphoreNew+0x108>
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d86e      	bhi.n	8005e8e <osSemaphoreNew+0x108>
    mem = -1;
 8005db0:	f04f 33ff 	mov.w	r3, #4294967295
 8005db4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d015      	beq.n	8005de8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d006      	beq.n	8005dd2 <osSemaphoreNew+0x4c>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8005dca:	d902      	bls.n	8005dd2 <osSemaphoreNew+0x4c>
        mem = 1;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	61bb      	str	r3, [r7, #24]
 8005dd0:	e00c      	b.n	8005dec <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d108      	bne.n	8005dec <osSemaphoreNew+0x66>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d104      	bne.n	8005dec <osSemaphoreNew+0x66>
          mem = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	e001      	b.n	8005dec <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005de8:	2300      	movs	r3, #0
 8005dea:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d04c      	beq.n	8005e8e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d128      	bne.n	8005e4c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d10a      	bne.n	8005e16 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	2203      	movs	r2, #3
 8005e06:	9200      	str	r2, [sp, #0]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	2001      	movs	r0, #1
 8005e0e:	f000 fb5b 	bl	80064c8 <xQueueGenericCreateStatic>
 8005e12:	61f8      	str	r0, [r7, #28]
 8005e14:	e005      	b.n	8005e22 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005e16:	2203      	movs	r2, #3
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f000 fbcc 	bl	80065b8 <xQueueGenericCreate>
 8005e20:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d022      	beq.n	8005e6e <osSemaphoreNew+0xe8>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01f      	beq.n	8005e6e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2200      	movs	r2, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	69f8      	ldr	r0, [r7, #28]
 8005e36:	f000 fc87 	bl	8006748 <xQueueGenericSend>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d016      	beq.n	8005e6e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005e40:	69f8      	ldr	r0, [r7, #28]
 8005e42:	f001 f913 	bl	800706c <vQueueDelete>
            hSemaphore = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	e010      	b.n	8005e6e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d108      	bne.n	8005e64 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	461a      	mov	r2, r3
 8005e58:	68b9      	ldr	r1, [r7, #8]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f000 fc09 	bl	8006672 <xQueueCreateCountingSemaphoreStatic>
 8005e60:	61f8      	str	r0, [r7, #28]
 8005e62:	e004      	b.n	8005e6e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fc3a 	bl	80066e0 <xQueueCreateCountingSemaphore>
 8005e6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d003      	beq.n	8005e82 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e001      	b.n	8005e86 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005e86:	6979      	ldr	r1, [r7, #20]
 8005e88:	69f8      	ldr	r0, [r7, #28]
 8005e8a:	f001 fa3b 	bl	8007304 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3720      	adds	r7, #32
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005eb0:	f06f 0303 	mvn.w	r3, #3
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e039      	b.n	8005f2c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb8:	f3ef 8305 	mrs	r3, IPSR
 8005ebc:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d022      	beq.n	8005f0a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d003      	beq.n	8005ed2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005eca:	f06f 0303 	mvn.w	r3, #3
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	e02c      	b.n	8005f2c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	461a      	mov	r2, r3
 8005edc:	2100      	movs	r1, #0
 8005ede:	6938      	ldr	r0, [r7, #16]
 8005ee0:	f001 f844 	bl	8006f6c <xQueueReceiveFromISR>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d003      	beq.n	8005ef2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005eea:	f06f 0302 	mvn.w	r3, #2
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e01c      	b.n	8005f2c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d019      	beq.n	8005f2c <osSemaphoreAcquire+0x94>
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <osSemaphoreAcquire+0xa0>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	e010      	b.n	8005f2c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005f0a:	6839      	ldr	r1, [r7, #0]
 8005f0c:	6938      	ldr	r0, [r7, #16]
 8005f0e:	f000 ff21 	bl	8006d54 <xQueueSemaphoreTake>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d009      	beq.n	8005f2c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005f1e:	f06f 0301 	mvn.w	r3, #1
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	e002      	b.n	8005f2c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005f26:	f06f 0302 	mvn.w	r3, #2
 8005f2a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005f2c:	697b      	ldr	r3, [r7, #20]
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d103      	bne.n	8005f5a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005f52:	f06f 0303 	mvn.w	r3, #3
 8005f56:	617b      	str	r3, [r7, #20]
 8005f58:	e02c      	b.n	8005fb4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5a:	f3ef 8305 	mrs	r3, IPSR
 8005f5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f60:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01a      	beq.n	8005f9c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005f6a:	f107 0308 	add.w	r3, r7, #8
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6938      	ldr	r0, [r7, #16]
 8005f72:	f000 fd82 	bl	8006a7a <xQueueGiveFromISR>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d003      	beq.n	8005f84 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005f7c:	f06f 0302 	mvn.w	r3, #2
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	e017      	b.n	8005fb4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d014      	beq.n	8005fb4 <osSemaphoreRelease+0x78>
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	; (8005fc0 <osSemaphoreRelease+0x84>)
 8005f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	f3bf 8f6f 	isb	sy
 8005f9a:	e00b      	b.n	8005fb4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2100      	movs	r1, #0
 8005fa2:	6938      	ldr	r0, [r7, #16]
 8005fa4:	f000 fbd0 	bl	8006748 <xQueueGenericSend>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d002      	beq.n	8005fb4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005fae:	f06f 0302 	mvn.w	r3, #2
 8005fb2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005fb4:	697b      	ldr	r3, [r7, #20]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	e000ed04 	.word	0xe000ed04

08005fc4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08a      	sub	sp, #40	; 0x28
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fd4:	f3ef 8305 	mrs	r3, IPSR
 8005fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d15f      	bne.n	80060a0 <osMessageQueueNew+0xdc>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d05c      	beq.n	80060a0 <osMessageQueueNew+0xdc>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d059      	beq.n	80060a0 <osMessageQueueNew+0xdc>
    mem = -1;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d029      	beq.n	800604c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <osMessageQueueNew+0x62>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	2b4f      	cmp	r3, #79	; 0x4f
 8006006:	d90e      	bls.n	8006026 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00a      	beq.n	8006026 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	695a      	ldr	r2, [r3, #20]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68b9      	ldr	r1, [r7, #8]
 8006018:	fb01 f303 	mul.w	r3, r1, r3
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <osMessageQueueNew+0x62>
        mem = 1;
 8006020:	2301      	movs	r3, #1
 8006022:	61bb      	str	r3, [r7, #24]
 8006024:	e014      	b.n	8006050 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d110      	bne.n	8006050 <osMessageQueueNew+0x8c>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d10c      	bne.n	8006050 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800603a:	2b00      	cmp	r3, #0
 800603c:	d108      	bne.n	8006050 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <osMessageQueueNew+0x8c>
          mem = 0;
 8006046:	2300      	movs	r3, #0
 8006048:	61bb      	str	r3, [r7, #24]
 800604a:	e001      	b.n	8006050 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10b      	bne.n	800606e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	2100      	movs	r1, #0
 8006060:	9100      	str	r1, [sp, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fa2f 	bl	80064c8 <xQueueGenericCreateStatic>
 800606a:	61f8      	str	r0, [r7, #28]
 800606c:	e008      	b.n	8006080 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006074:	2200      	movs	r2, #0
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 fa9d 	bl	80065b8 <xQueueGenericCreate>
 800607e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00c      	beq.n	80060a0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <osMessageQueueNew+0xd0>
        name = attr->name;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	e001      	b.n	8006098 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006098:	6979      	ldr	r1, [r7, #20]
 800609a:	69f8      	ldr	r0, [r7, #28]
 800609c:	f001 f932 	bl	8007304 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80060a0:	69fb      	ldr	r3, [r7, #28]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	603b      	str	r3, [r7, #0]
 80060b8:	4613      	mov	r3, r2
 80060ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c4:	f3ef 8305 	mrs	r3, IPSR
 80060c8:	617b      	str	r3, [r7, #20]
  return(result);
 80060ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d028      	beq.n	8006122 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <osMessageQueuePut+0x36>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <osMessageQueuePut+0x36>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80060e2:	f06f 0303 	mvn.w	r3, #3
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	e038      	b.n	800615c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80060ee:	f107 0210 	add.w	r2, r7, #16
 80060f2:	2300      	movs	r3, #0
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	69b8      	ldr	r0, [r7, #24]
 80060f8:	f000 fc24 	bl	8006944 <xQueueGenericSendFromISR>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d003      	beq.n	800610a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006102:	f06f 0302 	mvn.w	r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
 8006108:	e028      	b.n	800615c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d025      	beq.n	800615c <osMessageQueuePut+0xb0>
 8006110:	4b15      	ldr	r3, [pc, #84]	; (8006168 <osMessageQueuePut+0xbc>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	e01c      	b.n	800615c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d002      	beq.n	800612e <osMessageQueuePut+0x82>
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d103      	bne.n	8006136 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800612e:	f06f 0303 	mvn.w	r3, #3
 8006132:	61fb      	str	r3, [r7, #28]
 8006134:	e012      	b.n	800615c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006136:	2300      	movs	r3, #0
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	69b8      	ldr	r0, [r7, #24]
 800613e:	f000 fb03 	bl	8006748 <xQueueGenericSend>
 8006142:	4603      	mov	r3, r0
 8006144:	2b01      	cmp	r3, #1
 8006146:	d009      	beq.n	800615c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800614e:	f06f 0301 	mvn.w	r3, #1
 8006152:	61fb      	str	r3, [r7, #28]
 8006154:	e002      	b.n	800615c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006156:	f06f 0302 	mvn.w	r3, #2
 800615a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800615c:	69fb      	ldr	r3, [r7, #28]
}
 800615e:	4618      	mov	r0, r3
 8006160:	3720      	adds	r7, #32
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800617e:	2300      	movs	r3, #0
 8006180:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006182:	f3ef 8305 	mrs	r3, IPSR
 8006186:	617b      	str	r3, [r7, #20]
  return(result);
 8006188:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800618a:	2b00      	cmp	r3, #0
 800618c:	d028      	beq.n	80061e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <osMessageQueueGet+0x34>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d002      	beq.n	80061a0 <osMessageQueueGet+0x34>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80061a0:	f06f 0303 	mvn.w	r3, #3
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	e037      	b.n	8006218 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	461a      	mov	r2, r3
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	69b8      	ldr	r0, [r7, #24]
 80061b6:	f000 fed9 	bl	8006f6c <xQueueReceiveFromISR>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d003      	beq.n	80061c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80061c0:	f06f 0302 	mvn.w	r3, #2
 80061c4:	61fb      	str	r3, [r7, #28]
 80061c6:	e027      	b.n	8006218 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d024      	beq.n	8006218 <osMessageQueueGet+0xac>
 80061ce:	4b15      	ldr	r3, [pc, #84]	; (8006224 <osMessageQueueGet+0xb8>)
 80061d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	e01b      	b.n	8006218 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <osMessageQueueGet+0x80>
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d103      	bne.n	80061f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80061ec:	f06f 0303 	mvn.w	r3, #3
 80061f0:	61fb      	str	r3, [r7, #28]
 80061f2:	e011      	b.n	8006218 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	68b9      	ldr	r1, [r7, #8]
 80061f8:	69b8      	ldr	r0, [r7, #24]
 80061fa:	f000 fccb 	bl	8006b94 <xQueueReceive>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b01      	cmp	r3, #1
 8006202:	d009      	beq.n	8006218 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d003      	beq.n	8006212 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800620a:	f06f 0301 	mvn.w	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e002      	b.n	8006218 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006212:	f06f 0302 	mvn.w	r3, #2
 8006216:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006218:	69fb      	ldr	r3, [r7, #28]
}
 800621a:	4618      	mov	r0, r3
 800621c:	3720      	adds	r7, #32
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a07      	ldr	r2, [pc, #28]	; (8006254 <vApplicationGetIdleTaskMemory+0x2c>)
 8006238:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	4a06      	ldr	r2, [pc, #24]	; (8006258 <vApplicationGetIdleTaskMemory+0x30>)
 800623e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	601a      	str	r2, [r3, #0]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	24000334 	.word	0x24000334
 8006258:	240003e0 	.word	0x240003e0

0800625c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4a07      	ldr	r2, [pc, #28]	; (8006288 <vApplicationGetTimerTaskMemory+0x2c>)
 800626c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <vApplicationGetTimerTaskMemory+0x30>)
 8006272:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800627a:	601a      	str	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	240005e0 	.word	0x240005e0
 800628c:	2400068c 	.word	0x2400068c

08006290 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f103 0208 	add.w	r2, r3, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f04f 32ff 	mov.w	r2, #4294967295
 80062a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f103 0208 	add.w	r2, r3, #8
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f103 0208 	add.w	r2, r3, #8
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	689a      	ldr	r2, [r3, #8]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	1c5a      	adds	r2, r3, #1
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006332:	b480      	push	{r7}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d103      	bne.n	8006352 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e00c      	b.n	800636c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	3308      	adds	r3, #8
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e002      	b.n	8006360 <vListInsert+0x2e>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	429a      	cmp	r2, r3
 800636a:	d2f6      	bcs.n	800635a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1c5a      	adds	r2, r3, #1
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
}
 8006398:	bf00      	nop
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	6892      	ldr	r2, [r2, #8]
 80063ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	6852      	ldr	r2, [r2, #4]
 80063c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d103      	bne.n	80063d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	1e5a      	subs	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10a      	bne.n	8006422 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800641e:	bf00      	nop
 8006420:	e7fe      	b.n	8006420 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006422:	f002 fc9f 	bl	8008d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006432:	fb01 f303 	mul.w	r3, r1, r3
 8006436:	441a      	add	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	3b01      	subs	r3, #1
 8006454:	68f9      	ldr	r1, [r7, #12]
 8006456:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	441a      	add	r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	22ff      	movs	r2, #255	; 0xff
 8006466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	22ff      	movs	r2, #255	; 0xff
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d114      	bne.n	80064a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d01a      	beq.n	80064b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	3310      	adds	r3, #16
 8006484:	4618      	mov	r0, r3
 8006486:	f001 fc4f 	bl	8007d28 <xTaskRemoveFromEventList>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006490:	4b0c      	ldr	r3, [pc, #48]	; (80064c4 <xQueueGenericReset+0xcc>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	e009      	b.n	80064b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3310      	adds	r3, #16
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fef2 	bl	8006290 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3324      	adds	r3, #36	; 0x24
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff feed 	bl	8006290 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064b6:	f002 fc85 	bl	8008dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ba:	2301      	movs	r3, #1
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3710      	adds	r7, #16
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	e000ed04 	.word	0xe000ed04

080064c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08e      	sub	sp, #56	; 0x38
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <xQueueGenericCreateStatic+0x52>
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <xQueueGenericCreateStatic+0x56>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <xQueueGenericCreateStatic+0x58>
 800651e:	2300      	movs	r3, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10a      	bne.n	800653a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	f383 8811 	msr	BASEPRI, r3
 800652c:	f3bf 8f6f 	isb	sy
 8006530:	f3bf 8f4f 	dsb	sy
 8006534:	623b      	str	r3, [r7, #32]
}
 8006536:	bf00      	nop
 8006538:	e7fe      	b.n	8006538 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <xQueueGenericCreateStatic+0x7e>
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueGenericCreateStatic+0x82>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueGenericCreateStatic+0x84>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006554:	f383 8811 	msr	BASEPRI, r3
 8006558:	f3bf 8f6f 	isb	sy
 800655c:	f3bf 8f4f 	dsb	sy
 8006560:	61fb      	str	r3, [r7, #28]
}
 8006562:	bf00      	nop
 8006564:	e7fe      	b.n	8006564 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006566:	2350      	movs	r3, #80	; 0x50
 8006568:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	2b50      	cmp	r3, #80	; 0x50
 800656e:	d00a      	beq.n	8006586 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006574:	f383 8811 	msr	BASEPRI, r3
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	f3bf 8f4f 	dsb	sy
 8006580:	61bb      	str	r3, [r7, #24]
}
 8006582:	bf00      	nop
 8006584:	e7fe      	b.n	8006584 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006586:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00d      	beq.n	80065ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800659a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4613      	mov	r3, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 f83f 	bl	800662c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3730      	adds	r7, #48	; 0x30
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08a      	sub	sp, #40	; 0x28
 80065bc:	af02      	add	r7, sp, #8
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	4613      	mov	r3, r2
 80065c4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10a      	bne.n	80065e2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	613b      	str	r3, [r7, #16]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	3350      	adds	r3, #80	; 0x50
 80065f0:	4618      	mov	r0, r3
 80065f2:	f002 fcd9 	bl	8008fa8 <pvPortMalloc>
 80065f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	3350      	adds	r3, #80	; 0x50
 8006606:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006610:	79fa      	ldrb	r2, [r7, #7]
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	4613      	mov	r3, r2
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	68b9      	ldr	r1, [r7, #8]
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f805 	bl	800662c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006622:	69bb      	ldr	r3, [r7, #24]
	}
 8006624:	4618      	mov	r0, r3
 8006626:	3720      	adds	r7, #32
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d103      	bne.n	8006648 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	e002      	b.n	800664e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800665a:	2101      	movs	r1, #1
 800665c:	69b8      	ldr	r0, [r7, #24]
 800665e:	f7ff fecb 	bl	80063f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	78fa      	ldrb	r2, [r7, #3]
 8006666:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006672:	b580      	push	{r7, lr}
 8006674:	b08a      	sub	sp, #40	; 0x28
 8006676:	af02      	add	r7, sp, #8
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	60b9      	str	r1, [r7, #8]
 800667c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	61bb      	str	r3, [r7, #24]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d90a      	bls.n	80066b8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	617b      	str	r3, [r7, #20]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066b8:	2302      	movs	r3, #2
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	2100      	movs	r1, #0
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff ff00 	bl	80064c8 <xQueueGenericCreateStatic>
 80066c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	68ba      	ldr	r2, [r7, #8]
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066d6:	69fb      	ldr	r3, [r7, #28]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	3720      	adds	r7, #32
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10a      	bne.n	8006706 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	613b      	str	r3, [r7, #16]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	d90a      	bls.n	8006724 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	60fb      	str	r3, [r7, #12]
}
 8006720:	bf00      	nop
 8006722:	e7fe      	b.n	8006722 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006724:	2202      	movs	r2, #2
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f7ff ff45 	bl	80065b8 <xQueueGenericCreate>
 800672e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	683a      	ldr	r2, [r7, #0]
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800673c:	697b      	ldr	r3, [r7, #20]
	}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
	...

08006748 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08e      	sub	sp, #56	; 0x38
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xQueueGenericSend+0x32>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d103      	bne.n	8006788 <xQueueGenericSend+0x40>
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <xQueueGenericSend+0x44>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <xQueueGenericSend+0x46>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <xQueueGenericSend+0x60>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	f3bf 8f6f 	isb	sy
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067a4:	bf00      	nop
 80067a6:	e7fe      	b.n	80067a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d103      	bne.n	80067b6 <xQueueGenericSend+0x6e>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <xQueueGenericSend+0x72>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGenericSend+0x74>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	623b      	str	r3, [r7, #32]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067d6:	f001 fc6b 	bl	80080b0 <xTaskGetSchedulerState>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <xQueueGenericSend+0x9e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <xQueueGenericSend+0xa2>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <xQueueGenericSend+0xa4>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10a      	bne.n	8006806 <xQueueGenericSend+0xbe>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	61fb      	str	r3, [r7, #28]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006806:	f002 faad 	bl	8008d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	429a      	cmp	r2, r3
 8006814:	d302      	bcc.n	800681c <xQueueGenericSend+0xd4>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	2b02      	cmp	r3, #2
 800681a:	d129      	bne.n	8006870 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006822:	f000 fc5e 	bl	80070e2 <prvCopyDataToQueue>
 8006826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	2b00      	cmp	r3, #0
 800682e:	d010      	beq.n	8006852 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4618      	mov	r0, r3
 8006836:	f001 fa77 	bl	8007d28 <xTaskRemoveFromEventList>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d013      	beq.n	8006868 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006840:	4b3f      	ldr	r3, [pc, #252]	; (8006940 <xQueueGenericSend+0x1f8>)
 8006842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006846:	601a      	str	r2, [r3, #0]
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	e00a      	b.n	8006868 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	2b00      	cmp	r3, #0
 8006856:	d007      	beq.n	8006868 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006858:	4b39      	ldr	r3, [pc, #228]	; (8006940 <xQueueGenericSend+0x1f8>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006868:	f002 faac 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 800686c:	2301      	movs	r3, #1
 800686e:	e063      	b.n	8006938 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d103      	bne.n	800687e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006876:	f002 faa5 	bl	8008dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800687a:	2300      	movs	r3, #0
 800687c:	e05c      	b.n	8006938 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006880:	2b00      	cmp	r3, #0
 8006882:	d106      	bne.n	8006892 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006884:	f107 0314 	add.w	r3, r7, #20
 8006888:	4618      	mov	r0, r3
 800688a:	f001 fab1 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800688e:	2301      	movs	r3, #1
 8006890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006892:	f002 fa97 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006896:	f001 f81d 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800689a:	f002 fa63 	bl	8008d64 <vPortEnterCritical>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068a4:	b25b      	sxtb	r3, r3
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	d103      	bne.n	80068b4 <xQueueGenericSend+0x16c>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ba:	b25b      	sxtb	r3, r3
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSend+0x182>
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068ca:	f002 fa7b 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ce:	1d3a      	adds	r2, r7, #4
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f001 faa0 	bl	8007e1c <xTaskCheckForTimeOut>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d124      	bne.n	800692c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80068e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068e4:	f000 fcf5 	bl	80072d2 <prvIsQueueFull>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d018      	beq.n	8006920 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	3310      	adds	r3, #16
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f9c6 	bl	8007c88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80068fe:	f000 fc80 	bl	8007202 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006902:	f000 fff5 	bl	80078f0 <xTaskResumeAll>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	f47f af7c 	bne.w	8006806 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800690e:	4b0c      	ldr	r3, [pc, #48]	; (8006940 <xQueueGenericSend+0x1f8>)
 8006910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006914:	601a      	str	r2, [r3, #0]
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	e772      	b.n	8006806 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006922:	f000 fc6e 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006926:	f000 ffe3 	bl	80078f0 <xTaskResumeAll>
 800692a:	e76c      	b.n	8006806 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800692c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692e:	f000 fc68 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006932:	f000 ffdd 	bl	80078f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006938:	4618      	mov	r0, r3
 800693a:	3738      	adds	r7, #56	; 0x38
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b090      	sub	sp, #64	; 0x40
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
 8006950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <xQueueGenericSendFromISR+0x3c>
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	d101      	bne.n	8006984 <xQueueGenericSendFromISR+0x40>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <xQueueGenericSendFromISR+0x42>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10a      	bne.n	80069a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d103      	bne.n	80069ae <xQueueGenericSendFromISR+0x6a>
 80069a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d101      	bne.n	80069b2 <xQueueGenericSendFromISR+0x6e>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGenericSendFromISR+0x70>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	623b      	str	r3, [r7, #32]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ce:	f002 faab 	bl	8008f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069d2:	f3ef 8211 	mrs	r2, BASEPRI
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	61fa      	str	r2, [r7, #28]
 80069e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d302      	bcc.n	8006a00 <xQueueGenericSendFromISR+0xbc>
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d12f      	bne.n	8006a60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a16:	f000 fb64 	bl	80070e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d112      	bne.n	8006a4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d016      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	3324      	adds	r3, #36	; 0x24
 8006a30:	4618      	mov	r0, r3
 8006a32:	f001 f979 	bl	8007d28 <xTaskRemoveFromEventList>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	e007      	b.n	8006a5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a4e:	3301      	adds	r3, #1
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	b25a      	sxtb	r2, r3
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a5e:	e001      	b.n	8006a64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3740      	adds	r7, #64	; 0x40
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b08e      	sub	sp, #56	; 0x38
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10a      	bne.n	8006aa4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	623b      	str	r3, [r7, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	e7fe      	b.n	8006aa2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00a      	beq.n	8006ac2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	61fb      	str	r3, [r7, #28]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d103      	bne.n	8006ad2 <xQueueGiveFromISR+0x58>
 8006aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d101      	bne.n	8006ad6 <xQueueGiveFromISR+0x5c>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e000      	b.n	8006ad8 <xQueueGiveFromISR+0x5e>
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	61bb      	str	r3, [r7, #24]
}
 8006aee:	bf00      	nop
 8006af0:	e7fe      	b.n	8006af0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006af2:	f002 fa19 	bl	8008f28 <vPortValidateInterruptPriority>
	__asm volatile
 8006af6:	f3ef 8211 	mrs	r2, BASEPRI
 8006afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	617a      	str	r2, [r7, #20]
 8006b0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006b0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d22b      	bcs.n	8006b7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d112      	bne.n	8006b64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d016      	beq.n	8006b74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	3324      	adds	r3, #36	; 0x24
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f001 f8ec 	bl	8007d28 <xTaskRemoveFromEventList>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00e      	beq.n	8006b74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00b      	beq.n	8006b74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	e007      	b.n	8006b74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b68:	3301      	adds	r3, #1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	b25a      	sxtb	r2, r3
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006b74:	2301      	movs	r3, #1
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	e001      	b.n	8006b7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f383 8811 	msr	BASEPRI, r3
}
 8006b88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3738      	adds	r7, #56	; 0x38
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	; 0x30
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <xQueueReceive+0x30>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	623b      	str	r3, [r7, #32]
}
 8006bc0:	bf00      	nop
 8006bc2:	e7fe      	b.n	8006bc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <xQueueReceive+0x3e>
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <xQueueReceive+0x42>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueReceive+0x44>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueReceive+0x5e>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61fb      	str	r3, [r7, #28]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf2:	f001 fa5d 	bl	80080b0 <xTaskGetSchedulerState>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <xQueueReceive+0x6e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <xQueueReceive+0x72>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <xQueueReceive+0x74>
 8006c06:	2300      	movs	r3, #0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueReceive+0x8e>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61bb      	str	r3, [r7, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c22:	f002 f89f 	bl	8008d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01f      	beq.n	8006c72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c36:	f000 fabe 	bl	80071b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	1e5a      	subs	r2, r3, #1
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00f      	beq.n	8006c6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	3310      	adds	r3, #16
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f86a 	bl	8007d28 <xTaskRemoveFromEventList>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c5a:	4b3d      	ldr	r3, [pc, #244]	; (8006d50 <xQueueReceive+0x1bc>)
 8006c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c6a:	f002 f8ab 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e069      	b.n	8006d46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d103      	bne.n	8006c80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c78:	f002 f8a4 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	e062      	b.n	8006d46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d106      	bne.n	8006c94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c86:	f107 0310 	add.w	r3, r7, #16
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f001 f8b0 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c90:	2301      	movs	r3, #1
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c94:	f002 f896 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c98:	f000 fe1c 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c9c:	f002 f862 	bl	8008d64 <vPortEnterCritical>
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d103      	bne.n	8006cb6 <xQueueReceive+0x122>
 8006cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cbc:	b25b      	sxtb	r3, r3
 8006cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc2:	d103      	bne.n	8006ccc <xQueueReceive+0x138>
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ccc:	f002 f87a 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cd0:	1d3a      	adds	r2, r7, #4
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	4611      	mov	r1, r2
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 f89f 	bl	8007e1c <xTaskCheckForTimeOut>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d123      	bne.n	8006d2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce6:	f000 fade 	bl	80072a6 <prvIsQueueEmpty>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d017      	beq.n	8006d20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	3324      	adds	r3, #36	; 0x24
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ffc5 	bl	8007c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d00:	f000 fa7f 	bl	8007202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d04:	f000 fdf4 	bl	80078f0 <xTaskResumeAll>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d189      	bne.n	8006c22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <xQueueReceive+0x1bc>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	e780      	b.n	8006c22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d22:	f000 fa6e 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d26:	f000 fde3 	bl	80078f0 <xTaskResumeAll>
 8006d2a:	e77a      	b.n	8006c22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d2e:	f000 fa68 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d32:	f000 fddd 	bl	80078f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d38:	f000 fab5 	bl	80072a6 <prvIsQueueEmpty>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f43f af6f 	beq.w	8006c22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	; 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08e      	sub	sp, #56	; 0x38
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10a      	bne.n	8006d86 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	623b      	str	r3, [r7, #32]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	61fb      	str	r3, [r7, #28]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006da4:	f001 f984 	bl	80080b0 <xTaskGetSchedulerState>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d102      	bne.n	8006db4 <xQueueSemaphoreTake+0x60>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <xQueueSemaphoreTake+0x64>
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <xQueueSemaphoreTake+0x66>
 8006db8:	2300      	movs	r3, #0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10a      	bne.n	8006dd4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	61bb      	str	r3, [r7, #24]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dd4:	f001 ffc6 	bl	8008d64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d024      	beq.n	8006e2e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	1e5a      	subs	r2, r3, #1
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006df4:	f001 fad2 	bl	800839c <pvTaskIncrementMutexHeldCount>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00f      	beq.n	8006e26 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	3310      	adds	r3, #16
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 ff8c 	bl	8007d28 <xTaskRemoveFromEventList>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d007      	beq.n	8006e26 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e16:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <xQueueSemaphoreTake+0x214>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e26:	f001 ffcd 	bl	8008dc4 <vPortExitCritical>
				return pdPASS;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e097      	b.n	8006f5e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d111      	bne.n	8006e58 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	617b      	str	r3, [r7, #20]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e50:	f001 ffb8 	bl	8008dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e082      	b.n	8006f5e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5e:	f107 030c 	add.w	r3, r7, #12
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 ffc4 	bl	8007df0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6c:	f001 ffaa 	bl	8008dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e70:	f000 fd30 	bl	80078d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e74:	f001 ff76 	bl	8008d64 <vPortEnterCritical>
 8006e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d103      	bne.n	8006e8e <xQueueSemaphoreTake+0x13a>
 8006e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d103      	bne.n	8006ea4 <xQueueSemaphoreTake+0x150>
 8006e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea4:	f001 ff8e 	bl	8008dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	f107 030c 	add.w	r3, r7, #12
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 ffb3 	bl	8007e1c <xTaskCheckForTimeOut>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d132      	bne.n	8006f22 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ebe:	f000 f9f2 	bl	80072a6 <prvIsQueueEmpty>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d026      	beq.n	8006f16 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d109      	bne.n	8006ee4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006ed0:	f001 ff48 	bl	8008d64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f001 f907 	bl	80080ec <xTaskPriorityInherit>
 8006ede:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006ee0:	f001 ff70 	bl	8008dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee6:	3324      	adds	r3, #36	; 0x24
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	4611      	mov	r1, r2
 8006eec:	4618      	mov	r0, r3
 8006eee:	f000 fecb 	bl	8007c88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef4:	f000 f985 	bl	8007202 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ef8:	f000 fcfa 	bl	80078f0 <xTaskResumeAll>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f af68 	bne.w	8006dd4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f04:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <xQueueSemaphoreTake+0x214>)
 8006f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	e75e      	b.n	8006dd4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f18:	f000 f973 	bl	8007202 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f1c:	f000 fce8 	bl	80078f0 <xTaskResumeAll>
 8006f20:	e758      	b.n	8006dd4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f24:	f000 f96d 	bl	8007202 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f28:	f000 fce2 	bl	80078f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f2e:	f000 f9ba 	bl	80072a6 <prvIsQueueEmpty>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f43f af4d 	beq.w	8006dd4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00d      	beq.n	8006f5c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f40:	f001 ff10 	bl	8008d64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f46:	f000 f8b4 	bl	80070b2 <prvGetDisinheritPriorityAfterTimeout>
 8006f4a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 f9a0 	bl	8008298 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f58:	f001 ff34 	bl	8008dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3738      	adds	r7, #56	; 0x38
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	e000ed04 	.word	0xe000ed04

08006f6c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08e      	sub	sp, #56	; 0x38
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f86:	f383 8811 	msr	BASEPRI, r3
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	623b      	str	r3, [r7, #32]
}
 8006f94:	bf00      	nop
 8006f96:	e7fe      	b.n	8006f96 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d103      	bne.n	8006fa6 <xQueueReceiveFromISR+0x3a>
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <xQueueReceiveFromISR+0x3e>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e000      	b.n	8006fac <xQueueReceiveFromISR+0x40>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d10a      	bne.n	8006fc6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	61fb      	str	r3, [r7, #28]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fc6:	f001 ffaf 	bl	8008f28 <vPortValidateInterruptPriority>
	__asm volatile
 8006fca:	f3ef 8211 	mrs	r2, BASEPRI
 8006fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd2:	f383 8811 	msr	BASEPRI, r3
 8006fd6:	f3bf 8f6f 	isb	sy
 8006fda:	f3bf 8f4f 	dsb	sy
 8006fde:	61ba      	str	r2, [r7, #24]
 8006fe0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fe2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d02f      	beq.n	8007052 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ffc:	68b9      	ldr	r1, [r7, #8]
 8006ffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007000:	f000 f8d9 	bl	80071b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	1e5a      	subs	r2, r3, #1
 8007008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800700c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007014:	d112      	bne.n	800703c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d016      	beq.n	800704c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	3310      	adds	r3, #16
 8007022:	4618      	mov	r0, r3
 8007024:	f000 fe80 	bl	8007d28 <xTaskRemoveFromEventList>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00e      	beq.n	800704c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	601a      	str	r2, [r3, #0]
 800703a:	e007      	b.n	800704c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800703c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007040:	3301      	adds	r3, #1
 8007042:	b2db      	uxtb	r3, r3
 8007044:	b25a      	sxtb	r2, r3
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800704c:	2301      	movs	r3, #1
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
 8007050:	e001      	b.n	8007056 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	613b      	str	r3, [r7, #16]
	__asm volatile
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f383 8811 	msr	BASEPRI, r3
}
 8007060:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007064:	4618      	mov	r0, r3
 8007066:	3738      	adds	r7, #56	; 0x38
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10a      	bne.n	8007094 <vQueueDelete+0x28>
	__asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	60bb      	str	r3, [r7, #8]
}
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f95f 	bl	8007358 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d102      	bne.n	80070aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f002 f84b 	bl	8009140 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d006      	beq.n	80070d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80070cc:	60fb      	str	r3, [r7, #12]
 80070ce:	e001      	b.n	80070d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070d4:	68fb      	ldr	r3, [r7, #12]
	}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b086      	sub	sp, #24
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	60f8      	str	r0, [r7, #12]
 80070ea:	60b9      	str	r1, [r7, #8]
 80070ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070ee:	2300      	movs	r3, #0
 80070f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10d      	bne.n	800711c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d14d      	bne.n	80071a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f855 	bl	80081bc <xTaskPriorityDisinherit>
 8007112:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	609a      	str	r2, [r3, #8]
 800711a:	e043      	b.n	80071a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d119      	bne.n	8007156 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6858      	ldr	r0, [r3, #4]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	461a      	mov	r2, r3
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	f016 fcca 	bl	801dac6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	441a      	add	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	429a      	cmp	r2, r3
 800714a:	d32b      	bcc.n	80071a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	605a      	str	r2, [r3, #4]
 8007154:	e026      	b.n	80071a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68d8      	ldr	r0, [r3, #12]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	461a      	mov	r2, r3
 8007160:	68b9      	ldr	r1, [r7, #8]
 8007162:	f016 fcb0 	bl	801dac6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716e:	425b      	negs	r3, r3
 8007170:	441a      	add	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d207      	bcs.n	8007192 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718a:	425b      	negs	r3, r3
 800718c:	441a      	add	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d105      	bne.n	80071a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80071ac:	697b      	ldr	r3, [r7, #20]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b082      	sub	sp, #8
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d018      	beq.n	80071fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d0:	441a      	add	r2, r3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d303      	bcc.n	80071ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68d9      	ldr	r1, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	461a      	mov	r2, r3
 80071f4:	6838      	ldr	r0, [r7, #0]
 80071f6:	f016 fc66 	bl	801dac6 <memcpy>
	}
}
 80071fa:	bf00      	nop
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b084      	sub	sp, #16
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800720a:	f001 fdab 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007214:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007216:	e011      	b.n	800723c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d012      	beq.n	8007246 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3324      	adds	r3, #36	; 0x24
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fd7f 	bl	8007d28 <xTaskRemoveFromEventList>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d001      	beq.n	8007234 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007230:	f000 fe56 	bl	8007ee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
 8007236:	3b01      	subs	r3, #1
 8007238:	b2db      	uxtb	r3, r3
 800723a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800723c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007240:	2b00      	cmp	r3, #0
 8007242:	dce9      	bgt.n	8007218 <prvUnlockQueue+0x16>
 8007244:	e000      	b.n	8007248 <prvUnlockQueue+0x46>
					break;
 8007246:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	22ff      	movs	r2, #255	; 0xff
 800724c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007250:	f001 fdb8 	bl	8008dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007254:	f001 fd86 	bl	8008d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800725e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007260:	e011      	b.n	8007286 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d012      	beq.n	8007290 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fd5a 	bl	8007d28 <xTaskRemoveFromEventList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800727a:	f000 fe31 	bl	8007ee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800727e:	7bbb      	ldrb	r3, [r7, #14]
 8007280:	3b01      	subs	r3, #1
 8007282:	b2db      	uxtb	r3, r3
 8007284:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	dce9      	bgt.n	8007262 <prvUnlockQueue+0x60>
 800728e:	e000      	b.n	8007292 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007290:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	22ff      	movs	r2, #255	; 0xff
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800729a:	f001 fd93 	bl	8008dc4 <vPortExitCritical>
}
 800729e:	bf00      	nop
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072ae:	f001 fd59 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d102      	bne.n	80072c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e001      	b.n	80072c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072c0:	2300      	movs	r3, #0
 80072c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072c4:	f001 fd7e 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80072c8:	68fb      	ldr	r3, [r7, #12]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072da:	f001 fd43 	bl	8008d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d102      	bne.n	80072f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072ea:	2301      	movs	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e001      	b.n	80072f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072f4:	f001 fd66 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 80072f8:	68fb      	ldr	r3, [r7, #12]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800730e:	2300      	movs	r3, #0
 8007310:	60fb      	str	r3, [r7, #12]
 8007312:	e014      	b.n	800733e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007314:	4a0f      	ldr	r2, [pc, #60]	; (8007354 <vQueueAddToRegistry+0x50>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007320:	490c      	ldr	r1, [pc, #48]	; (8007354 <vQueueAddToRegistry+0x50>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800732a:	4a0a      	ldr	r2, [pc, #40]	; (8007354 <vQueueAddToRegistry+0x50>)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007336:	e006      	b.n	8007346 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b07      	cmp	r3, #7
 8007342:	d9e7      	bls.n	8007314 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	24000a8c 	.word	0x24000a8c

08007358 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007360:	2300      	movs	r3, #0
 8007362:	60fb      	str	r3, [r7, #12]
 8007364:	e016      	b.n	8007394 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007366:	4a10      	ldr	r2, [pc, #64]	; (80073a8 <vQueueUnregisterQueue+0x50>)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4413      	add	r3, r2
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	429a      	cmp	r2, r3
 8007374:	d10b      	bne.n	800738e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007376:	4a0c      	ldr	r2, [pc, #48]	; (80073a8 <vQueueUnregisterQueue+0x50>)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2100      	movs	r1, #0
 800737c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007380:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <vQueueUnregisterQueue+0x50>)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	2200      	movs	r2, #0
 800738a:	605a      	str	r2, [r3, #4]
				break;
 800738c:	e006      	b.n	800739c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b07      	cmp	r3, #7
 8007398:	d9e5      	bls.n	8007366 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800739a:	bf00      	nop
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	24000a8c 	.word	0x24000a8c

080073ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073bc:	f001 fcd2 	bl	8008d64 <vPortEnterCritical>
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c6:	b25b      	sxtb	r3, r3
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d103      	bne.n	80073d6 <vQueueWaitForMessageRestricted+0x2a>
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073dc:	b25b      	sxtb	r3, r3
 80073de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073e2:	d103      	bne.n	80073ec <vQueueWaitForMessageRestricted+0x40>
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073ec:	f001 fcea 	bl	8008dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d106      	bne.n	8007406 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	3324      	adds	r3, #36	; 0x24
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fc65 	bl	8007cd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007406:	6978      	ldr	r0, [r7, #20]
 8007408:	f7ff fefb 	bl	8007202 <prvUnlockQueue>
	}
 800740c:	bf00      	nop
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08e      	sub	sp, #56	; 0x38
 8007418:	af04      	add	r7, sp, #16
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007424:	2b00      	cmp	r3, #0
 8007426:	d10a      	bne.n	800743e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742c:	f383 8811 	msr	BASEPRI, r3
 8007430:	f3bf 8f6f 	isb	sy
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	623b      	str	r3, [r7, #32]
}
 800743a:	bf00      	nop
 800743c:	e7fe      	b.n	800743c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800743e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10a      	bne.n	800745a <xTaskCreateStatic+0x46>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61fb      	str	r3, [r7, #28]
}
 8007456:	bf00      	nop
 8007458:	e7fe      	b.n	8007458 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800745a:	23ac      	movs	r3, #172	; 0xac
 800745c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2bac      	cmp	r3, #172	; 0xac
 8007462:	d00a      	beq.n	800747a <xTaskCreateStatic+0x66>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	61bb      	str	r3, [r7, #24]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800747a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d01e      	beq.n	80074c0 <xTaskCreateStatic+0xac>
 8007482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007484:	2b00      	cmp	r3, #0
 8007486:	d01b      	beq.n	80074c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800748c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007490:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	2202      	movs	r2, #2
 8007496:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800749a:	2300      	movs	r3, #0
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	9302      	str	r3, [sp, #8]
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	9301      	str	r3, [sp, #4]
 80074a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f000 f850 	bl	8007558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ba:	f000 f8f7 	bl	80076ac <prvAddNewTaskToReadyList>
 80074be:	e001      	b.n	80074c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074c4:	697b      	ldr	r3, [r7, #20]
	}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3728      	adds	r7, #40	; 0x28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b08c      	sub	sp, #48	; 0x30
 80074d2:	af04      	add	r7, sp, #16
 80074d4:	60f8      	str	r0, [r7, #12]
 80074d6:	60b9      	str	r1, [r7, #8]
 80074d8:	603b      	str	r3, [r7, #0]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074de:	88fb      	ldrh	r3, [r7, #6]
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 fd60 	bl	8008fa8 <pvPortMalloc>
 80074e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00e      	beq.n	800750e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074f0:	20ac      	movs	r0, #172	; 0xac
 80074f2:	f001 fd59 	bl	8008fa8 <pvPortMalloc>
 80074f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	631a      	str	r2, [r3, #48]	; 0x30
 8007504:	e005      	b.n	8007512 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007506:	6978      	ldr	r0, [r7, #20]
 8007508:	f001 fe1a 	bl	8009140 <vPortFree>
 800750c:	e001      	b.n	8007512 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800750e:	2300      	movs	r3, #0
 8007510:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007520:	88fa      	ldrh	r2, [r7, #6]
 8007522:	2300      	movs	r3, #0
 8007524:	9303      	str	r3, [sp, #12]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	9302      	str	r3, [sp, #8]
 800752a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f80e 	bl	8007558 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800753c:	69f8      	ldr	r0, [r7, #28]
 800753e:	f000 f8b5 	bl	80076ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007542:	2301      	movs	r3, #1
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e002      	b.n	800754e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800754e:	69bb      	ldr	r3, [r7, #24]
	}
 8007550:	4618      	mov	r0, r3
 8007552:	3720      	adds	r7, #32
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007568:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	461a      	mov	r2, r3
 8007570:	21a5      	movs	r1, #165	; 0xa5
 8007572:	f016 f982 	bl	801d87a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007580:	440b      	add	r3, r1
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	f023 0307 	bic.w	r3, r3, #7
 800758e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	f003 0307 	and.w	r3, r3, #7
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	617b      	str	r3, [r7, #20]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d01f      	beq.n	80075f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075b6:	2300      	movs	r3, #0
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e012      	b.n	80075e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	7819      	ldrb	r1, [r3, #0]
 80075c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	4413      	add	r3, r2
 80075ca:	3334      	adds	r3, #52	; 0x34
 80075cc:	460a      	mov	r2, r1
 80075ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d006      	beq.n	80075ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b0f      	cmp	r3, #15
 80075e6:	d9e9      	bls.n	80075bc <prvInitialiseNewTask+0x64>
 80075e8:	e000      	b.n	80075ec <prvInitialiseNewTask+0x94>
			{
				break;
 80075ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075f4:	e003      	b.n	80075fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	2b37      	cmp	r3, #55	; 0x37
 8007602:	d901      	bls.n	8007608 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007604:	2337      	movs	r3, #55	; 0x37
 8007606:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007612:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007616:	2200      	movs	r2, #0
 8007618:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	3304      	adds	r3, #4
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fe56 	bl	80062d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	3318      	adds	r3, #24
 8007628:	4618      	mov	r0, r3
 800762a:	f7fe fe51 	bl	80062d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007632:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007636:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007642:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8007644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007646:	2200      	movs	r2, #0
 8007648:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	2200      	movs	r2, #0
 800764e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	2200      	movs	r2, #0
 8007656:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800765a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765c:	3358      	adds	r3, #88	; 0x58
 800765e:	224c      	movs	r2, #76	; 0x4c
 8007660:	2100      	movs	r1, #0
 8007662:	4618      	mov	r0, r3
 8007664:	f016 f909 	bl	801d87a <memset>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <prvInitialiseNewTask+0x148>)
 800766c:	65da      	str	r2, [r3, #92]	; 0x5c
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <prvInitialiseNewTask+0x14c>)
 8007672:	661a      	str	r2, [r3, #96]	; 0x60
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	4a0c      	ldr	r2, [pc, #48]	; (80076a8 <prvInitialiseNewTask+0x150>)
 8007678:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	68f9      	ldr	r1, [r7, #12]
 800767e:	69b8      	ldr	r0, [r7, #24]
 8007680:	f001 fa42 	bl	8008b08 <pxPortInitialiseStack>
 8007684:	4602      	mov	r2, r0
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d002      	beq.n	8007696 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007696:	bf00      	nop
 8007698:	3720      	adds	r7, #32
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	2401b370 	.word	0x2401b370
 80076a4:	2401b3d8 	.word	0x2401b3d8
 80076a8:	2401b440 	.word	0x2401b440

080076ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 fb56 	bl	8008d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076b8:	4b2d      	ldr	r3, [pc, #180]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a2c      	ldr	r2, [pc, #176]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076c2:	4b2c      	ldr	r3, [pc, #176]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ca:	4a2a      	ldr	r2, [pc, #168]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d110      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076d8:	f000 fc28 	bl	8007f2c <prvInitialiseTaskLists>
 80076dc:	e00d      	b.n	80076fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076de:	4b26      	ldr	r3, [pc, #152]	; (8007778 <prvAddNewTaskToReadyList+0xcc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076e6:	4b23      	ldr	r3, [pc, #140]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d802      	bhi.n	80076fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076f4:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076fa:	4b20      	ldr	r3, [pc, #128]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	4a1e      	ldr	r2, [pc, #120]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <prvAddNewTaskToReadyList+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <prvAddNewTaskToReadyList+0x74>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a18      	ldr	r2, [pc, #96]	; (8007780 <prvAddNewTaskToReadyList+0xd4>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <prvAddNewTaskToReadyList+0xd8>)
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fe fdd7 	bl	80062ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800773c:	f001 fb42 	bl	8008dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007740:	4b0d      	ldr	r3, [pc, #52]	; (8007778 <prvAddNewTaskToReadyList+0xcc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007748:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <prvAddNewTaskToReadyList+0xc8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d207      	bcs.n	8007766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <prvAddNewTaskToReadyList+0xdc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	24000fa0 	.word	0x24000fa0
 8007774:	24000acc 	.word	0x24000acc
 8007778:	24000fac 	.word	0x24000fac
 800777c:	24000fbc 	.word	0x24000fbc
 8007780:	24000fa8 	.word	0x24000fa8
 8007784:	24000ad0 	.word	0x24000ad0
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d017      	beq.n	80077ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800779e:	4b13      	ldr	r3, [pc, #76]	; (80077ec <vTaskDelay+0x60>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <vTaskDelay+0x30>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	e7fe      	b.n	80077ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077bc:	f000 f88a 	bl	80078d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c0:	2100      	movs	r1, #0
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fdfe 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077c8:	f000 f892 	bl	80078f0 <xTaskResumeAll>
 80077cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <vTaskDelay+0x64>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e4:	bf00      	nop
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	24000fc8 	.word	0x24000fc8
 80077f0:	e000ed04 	.word	0xe000ed04

080077f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b08a      	sub	sp, #40	; 0x28
 80077f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007802:	463a      	mov	r2, r7
 8007804:	1d39      	adds	r1, r7, #4
 8007806:	f107 0308 	add.w	r3, r7, #8
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe fd0c 	bl	8006228 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	9202      	str	r2, [sp, #8]
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	2300      	movs	r3, #0
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	2300      	movs	r3, #0
 8007820:	460a      	mov	r2, r1
 8007822:	4924      	ldr	r1, [pc, #144]	; (80078b4 <vTaskStartScheduler+0xc0>)
 8007824:	4824      	ldr	r0, [pc, #144]	; (80078b8 <vTaskStartScheduler+0xc4>)
 8007826:	f7ff fdf5 	bl	8007414 <xTaskCreateStatic>
 800782a:	4603      	mov	r3, r0
 800782c:	4a23      	ldr	r2, [pc, #140]	; (80078bc <vTaskStartScheduler+0xc8>)
 800782e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007830:	4b22      	ldr	r3, [pc, #136]	; (80078bc <vTaskStartScheduler+0xc8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007838:	2301      	movs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	e001      	b.n	8007842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d102      	bne.n	800784e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007848:	f000 fe10 	bl	800846c <xTimerCreateTimerTask>
 800784c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d11b      	bne.n	800788c <vTaskStartScheduler+0x98>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	613b      	str	r3, [r7, #16]
}
 8007866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007868:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <vTaskStartScheduler+0xcc>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3358      	adds	r3, #88	; 0x58
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <vTaskStartScheduler+0xd0>)
 8007870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007872:	4b15      	ldr	r3, [pc, #84]	; (80078c8 <vTaskStartScheduler+0xd4>)
 8007874:	f04f 32ff 	mov.w	r2, #4294967295
 8007878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <vTaskStartScheduler+0xd8>)
 800787c:	2201      	movs	r2, #1
 800787e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <vTaskStartScheduler+0xdc>)
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007886:	f001 f9cb 	bl	8008c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800788a:	e00e      	b.n	80078aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d10a      	bne.n	80078aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <vTaskStartScheduler+0xb4>
}
 80078aa:	bf00      	nop
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	0801e5a0 	.word	0x0801e5a0
 80078b8:	08007ef9 	.word	0x08007ef9
 80078bc:	24000fc4 	.word	0x24000fc4
 80078c0:	24000acc 	.word	0x24000acc
 80078c4:	240000d8 	.word	0x240000d8
 80078c8:	24000fc0 	.word	0x24000fc0
 80078cc:	24000fac 	.word	0x24000fac
 80078d0:	24000fa4 	.word	0x24000fa4

080078d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <vTaskSuspendAll+0x18>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a03      	ldr	r2, [pc, #12]	; (80078ec <vTaskSuspendAll+0x18>)
 80078e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078e2:	bf00      	nop
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	24000fc8 	.word	0x24000fc8

080078f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078fe:	4b42      	ldr	r3, [pc, #264]	; (8007a08 <xTaskResumeAll+0x118>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xTaskResumeAll+0x2c>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	603b      	str	r3, [r7, #0]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800791c:	f001 fa22 	bl	8008d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007920:	4b39      	ldr	r3, [pc, #228]	; (8007a08 <xTaskResumeAll+0x118>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	4a38      	ldr	r2, [pc, #224]	; (8007a08 <xTaskResumeAll+0x118>)
 8007928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800792a:	4b37      	ldr	r3, [pc, #220]	; (8007a08 <xTaskResumeAll+0x118>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d162      	bne.n	80079f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007932:	4b36      	ldr	r3, [pc, #216]	; (8007a0c <xTaskResumeAll+0x11c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d05e      	beq.n	80079f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800793a:	e02f      	b.n	800799c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800793c:	4b34      	ldr	r3, [pc, #208]	; (8007a10 <xTaskResumeAll+0x120>)
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3318      	adds	r3, #24
 8007948:	4618      	mov	r0, r3
 800794a:	f7fe fd2b 	bl	80063a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3304      	adds	r3, #4
 8007952:	4618      	mov	r0, r3
 8007954:	f7fe fd26 	bl	80063a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795c:	4b2d      	ldr	r3, [pc, #180]	; (8007a14 <xTaskResumeAll+0x124>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d903      	bls.n	800796c <xTaskResumeAll+0x7c>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	4a2a      	ldr	r2, [pc, #168]	; (8007a14 <xTaskResumeAll+0x124>)
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <xTaskResumeAll+0x128>)
 800797a:	441a      	add	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	4619      	mov	r1, r3
 8007982:	4610      	mov	r0, r2
 8007984:	f7fe fcb1 	bl	80062ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <xTaskResumeAll+0x12c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007992:	429a      	cmp	r2, r3
 8007994:	d302      	bcc.n	800799c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007996:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <xTaskResumeAll+0x130>)
 8007998:	2201      	movs	r2, #1
 800799a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800799c:	4b1c      	ldr	r3, [pc, #112]	; (8007a10 <xTaskResumeAll+0x120>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1cb      	bne.n	800793c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d001      	beq.n	80079ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079aa:	f000 fb61 	bl	8008070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079ae:	4b1d      	ldr	r3, [pc, #116]	; (8007a24 <xTaskResumeAll+0x134>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d010      	beq.n	80079dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079ba:	f000 f847 	bl	8007a4c <xTaskIncrementTick>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079c4:	4b16      	ldr	r3, [pc, #88]	; (8007a20 <xTaskResumeAll+0x130>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f1      	bne.n	80079ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <xTaskResumeAll+0x134>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <xTaskResumeAll+0x130>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079e8:	4b0f      	ldr	r3, [pc, #60]	; (8007a28 <xTaskResumeAll+0x138>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079f8:	f001 f9e4 	bl	8008dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80079fc:	68bb      	ldr	r3, [r7, #8]
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3710      	adds	r7, #16
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	24000fc8 	.word	0x24000fc8
 8007a0c:	24000fa0 	.word	0x24000fa0
 8007a10:	24000f60 	.word	0x24000f60
 8007a14:	24000fa8 	.word	0x24000fa8
 8007a18:	24000ad0 	.word	0x24000ad0
 8007a1c:	24000acc 	.word	0x24000acc
 8007a20:	24000fb4 	.word	0x24000fb4
 8007a24:	24000fb0 	.word	0x24000fb0
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a32:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <xTaskGetTickCount+0x1c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a38:	687b      	ldr	r3, [r7, #4]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	24000fa4 	.word	0x24000fa4

08007a4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a56:	4b4f      	ldr	r3, [pc, #316]	; (8007b94 <xTaskIncrementTick+0x148>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f040 808f 	bne.w	8007b7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a60:	4b4d      	ldr	r3, [pc, #308]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a68:	4a4b      	ldr	r2, [pc, #300]	; (8007b98 <xTaskIncrementTick+0x14c>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d120      	bne.n	8007ab6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a74:	4b49      	ldr	r3, [pc, #292]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00a      	beq.n	8007a94 <xTaskIncrementTick+0x48>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	603b      	str	r3, [r7, #0]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <xTaskIncrementTick+0x46>
 8007a94:	4b41      	ldr	r3, [pc, #260]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	4b41      	ldr	r3, [pc, #260]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a3f      	ldr	r2, [pc, #252]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4a3f      	ldr	r2, [pc, #252]	; (8007ba0 <xTaskIncrementTick+0x154>)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b3e      	ldr	r3, [pc, #248]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a3d      	ldr	r2, [pc, #244]	; (8007ba4 <xTaskIncrementTick+0x158>)
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	f000 fadd 	bl	8008070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d349      	bcc.n	8007b54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ac0:	4b36      	ldr	r3, [pc, #216]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	4b37      	ldr	r3, [pc, #220]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	601a      	str	r2, [r3, #0]
					break;
 8007ad2:	e03f      	b.n	8007b54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b31      	ldr	r3, [pc, #196]	; (8007b9c <xTaskIncrementTick+0x150>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d203      	bcs.n	8007af4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aec:	4a2e      	ldr	r2, [pc, #184]	; (8007ba8 <xTaskIncrementTick+0x15c>)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007af2:	e02f      	b.n	8007b54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe fc53 	bl	80063a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fc4a 	bl	80063a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4b25      	ldr	r3, [pc, #148]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d903      	bls.n	8007b24 <xTaskIncrementTick+0xd8>
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <xTaskIncrementTick+0x160>)
 8007b22:	6013      	str	r3, [r2, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b28:	4613      	mov	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	4413      	add	r3, r2
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b32:	441a      	add	r2, r3
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f7fe fbd5 	bl	80062ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d3b8      	bcc.n	8007ac0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b52:	e7b5      	b.n	8007ac0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b54:	4b17      	ldr	r3, [pc, #92]	; (8007bb4 <xTaskIncrementTick+0x168>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5a:	4915      	ldr	r1, [pc, #84]	; (8007bb0 <xTaskIncrementTick+0x164>)
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d901      	bls.n	8007b70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <xTaskIncrementTick+0x16c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d007      	beq.n	8007b88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e004      	b.n	8007b88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b7e:	4b0f      	ldr	r3, [pc, #60]	; (8007bbc <xTaskIncrementTick+0x170>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	4a0d      	ldr	r2, [pc, #52]	; (8007bbc <xTaskIncrementTick+0x170>)
 8007b86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b88:	697b      	ldr	r3, [r7, #20]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3718      	adds	r7, #24
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	24000fc8 	.word	0x24000fc8
 8007b98:	24000fa4 	.word	0x24000fa4
 8007b9c:	24000f58 	.word	0x24000f58
 8007ba0:	24000f5c 	.word	0x24000f5c
 8007ba4:	24000fb8 	.word	0x24000fb8
 8007ba8:	24000fc0 	.word	0x24000fc0
 8007bac:	24000fa8 	.word	0x24000fa8
 8007bb0:	24000ad0 	.word	0x24000ad0
 8007bb4:	24000acc 	.word	0x24000acc
 8007bb8:	24000fb4 	.word	0x24000fb4
 8007bbc:	24000fb0 	.word	0x24000fb0

08007bc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bc6:	4b2a      	ldr	r3, [pc, #168]	; (8007c70 <vTaskSwitchContext+0xb0>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d003      	beq.n	8007bd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bce:	4b29      	ldr	r3, [pc, #164]	; (8007c74 <vTaskSwitchContext+0xb4>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bd4:	e046      	b.n	8007c64 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007bd6:	4b27      	ldr	r3, [pc, #156]	; (8007c74 <vTaskSwitchContext+0xb4>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bdc:	4b26      	ldr	r3, [pc, #152]	; (8007c78 <vTaskSwitchContext+0xb8>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	e010      	b.n	8007c06 <vTaskSwitchContext+0x46>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <vTaskSwitchContext+0x40>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	607b      	str	r3, [r7, #4]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vTaskSwitchContext+0x3e>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	491d      	ldr	r1, [pc, #116]	; (8007c7c <vTaskSwitchContext+0xbc>)
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0e4      	beq.n	8007be4 <vTaskSwitchContext+0x24>
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4a15      	ldr	r2, [pc, #84]	; (8007c7c <vTaskSwitchContext+0xbc>)
 8007c26:	4413      	add	r3, r2
 8007c28:	60bb      	str	r3, [r7, #8]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	605a      	str	r2, [r3, #4]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	3308      	adds	r3, #8
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d104      	bne.n	8007c4a <vTaskSwitchContext+0x8a>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	4a0b      	ldr	r2, [pc, #44]	; (8007c80 <vTaskSwitchContext+0xc0>)
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	4a08      	ldr	r2, [pc, #32]	; (8007c78 <vTaskSwitchContext+0xb8>)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c5a:	4b09      	ldr	r3, [pc, #36]	; (8007c80 <vTaskSwitchContext+0xc0>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3358      	adds	r3, #88	; 0x58
 8007c60:	4a08      	ldr	r2, [pc, #32]	; (8007c84 <vTaskSwitchContext+0xc4>)
 8007c62:	6013      	str	r3, [r2, #0]
}
 8007c64:	bf00      	nop
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	24000fc8 	.word	0x24000fc8
 8007c74:	24000fb4 	.word	0x24000fb4
 8007c78:	24000fa8 	.word	0x24000fa8
 8007c7c:	24000ad0 	.word	0x24000ad0
 8007c80:	24000acc 	.word	0x24000acc
 8007c84:	240000d8 	.word	0x240000d8

08007c88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d10a      	bne.n	8007cae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	e7fe      	b.n	8007cac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cae:	4b07      	ldr	r3, [pc, #28]	; (8007ccc <vTaskPlaceOnEventList+0x44>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3318      	adds	r3, #24
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fe fb3b 	bl	8006332 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	6838      	ldr	r0, [r7, #0]
 8007cc0:	f000 fb80 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	24000acc 	.word	0x24000acc

08007cd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	617b      	str	r3, [r7, #20]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	; (8007d24 <vTaskPlaceOnEventListRestricted+0x54>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	3318      	adds	r3, #24
 8007cfe:	4619      	mov	r1, r3
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f7fe faf2 	bl	80062ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d002      	beq.n	8007d12 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d10:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	68b8      	ldr	r0, [r7, #8]
 8007d16:	f000 fb55 	bl	80083c4 <prvAddCurrentTaskToDelayedList>
	}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	24000acc 	.word	0x24000acc

08007d28 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d10a      	bne.n	8007d54 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3318      	adds	r3, #24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fb23 	bl	80063a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d5e:	4b1e      	ldr	r3, [pc, #120]	; (8007dd8 <xTaskRemoveFromEventList+0xb0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d11d      	bne.n	8007da2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fb1a 	bl	80063a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d70:	693b      	ldr	r3, [r7, #16]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4b19      	ldr	r3, [pc, #100]	; (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d903      	bls.n	8007d84 <xTaskRemoveFromEventList+0x5c>
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d80:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <xTaskRemoveFromEventList+0xb4>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <xTaskRemoveFromEventList+0xb8>)
 8007d92:	441a      	add	r2, r3
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	3304      	adds	r3, #4
 8007d98:	4619      	mov	r1, r3
 8007d9a:	4610      	mov	r0, r2
 8007d9c:	f7fe faa5 	bl	80062ea <vListInsertEnd>
 8007da0:	e005      	b.n	8007dae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	3318      	adds	r3, #24
 8007da6:	4619      	mov	r1, r3
 8007da8:	480e      	ldr	r0, [pc, #56]	; (8007de4 <xTaskRemoveFromEventList+0xbc>)
 8007daa:	f7fe fa9e 	bl	80062ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007db2:	4b0d      	ldr	r3, [pc, #52]	; (8007de8 <xTaskRemoveFromEventList+0xc0>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d905      	bls.n	8007dc8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <xTaskRemoveFromEventList+0xc4>)
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	e001      	b.n	8007dcc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dcc:	697b      	ldr	r3, [r7, #20]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	24000fc8 	.word	0x24000fc8
 8007ddc:	24000fa8 	.word	0x24000fa8
 8007de0:	24000ad0 	.word	0x24000ad0
 8007de4:	24000f60 	.word	0x24000f60
 8007de8:	24000acc 	.word	0x24000acc
 8007dec:	24000fb4 	.word	0x24000fb4

08007df0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <vTaskInternalSetTimeOutState+0x24>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e00:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <vTaskInternalSetTimeOutState+0x28>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	24000fb8 	.word	0x24000fb8
 8007e18:	24000fa4 	.word	0x24000fa4

08007e1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
}
 8007e5a:	bf00      	nop
 8007e5c:	e7fe      	b.n	8007e5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007e5e:	f000 ff81 	bl	8008d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e62:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <xTaskCheckForTimeOut+0xbc>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	69ba      	ldr	r2, [r7, #24]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e7a:	d102      	bne.n	8007e82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e023      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <xTaskCheckForTimeOut+0xc0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d007      	beq.n	8007e9e <xTaskCheckForTimeOut+0x82>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d302      	bcc.n	8007e9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	e015      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d20b      	bcs.n	8007ec0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	1ad2      	subs	r2, r2, r3
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ff9b 	bl	8007df0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	61fb      	str	r3, [r7, #28]
 8007ebe:	e004      	b.n	8007eca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eca:	f000 ff7b 	bl	8008dc4 <vPortExitCritical>

	return xReturn;
 8007ece:	69fb      	ldr	r3, [r7, #28]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3720      	adds	r7, #32
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	24000fa4 	.word	0x24000fa4
 8007edc:	24000fb8 	.word	0x24000fb8

08007ee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ee4:	4b03      	ldr	r3, [pc, #12]	; (8007ef4 <vTaskMissedYield+0x14>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	24000fb4 	.word	0x24000fb4

08007ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f00:	f000 f854 	bl	8007fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f04:	4b07      	ldr	r3, [pc, #28]	; (8007f24 <prvIdleTask+0x2c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d907      	bls.n	8007f1c <prvIdleTask+0x24>
			{
				taskYIELD();
 8007f0c:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <prvIdleTask+0x30>)
 8007f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f12:	601a      	str	r2, [r3, #0]
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007f1c:	f7f8 fbf6 	bl	800070c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007f20:	e7ee      	b.n	8007f00 <prvIdleTask+0x8>
 8007f22:	bf00      	nop
 8007f24:	24000ad0 	.word	0x24000ad0
 8007f28:	e000ed04 	.word	0xe000ed04

08007f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f32:	2300      	movs	r3, #0
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	e00c      	b.n	8007f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4a12      	ldr	r2, [pc, #72]	; (8007f8c <prvInitialiseTaskLists+0x60>)
 8007f44:	4413      	add	r3, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe f9a2 	bl	8006290 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	607b      	str	r3, [r7, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b37      	cmp	r3, #55	; 0x37
 8007f56:	d9ef      	bls.n	8007f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f58:	480d      	ldr	r0, [pc, #52]	; (8007f90 <prvInitialiseTaskLists+0x64>)
 8007f5a:	f7fe f999 	bl	8006290 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f5e:	480d      	ldr	r0, [pc, #52]	; (8007f94 <prvInitialiseTaskLists+0x68>)
 8007f60:	f7fe f996 	bl	8006290 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f64:	480c      	ldr	r0, [pc, #48]	; (8007f98 <prvInitialiseTaskLists+0x6c>)
 8007f66:	f7fe f993 	bl	8006290 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f6a:	480c      	ldr	r0, [pc, #48]	; (8007f9c <prvInitialiseTaskLists+0x70>)
 8007f6c:	f7fe f990 	bl	8006290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f70:	480b      	ldr	r0, [pc, #44]	; (8007fa0 <prvInitialiseTaskLists+0x74>)
 8007f72:	f7fe f98d 	bl	8006290 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <prvInitialiseTaskLists+0x78>)
 8007f78:	4a05      	ldr	r2, [pc, #20]	; (8007f90 <prvInitialiseTaskLists+0x64>)
 8007f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <prvInitialiseTaskLists+0x7c>)
 8007f7e:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <prvInitialiseTaskLists+0x68>)
 8007f80:	601a      	str	r2, [r3, #0]
}
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	24000ad0 	.word	0x24000ad0
 8007f90:	24000f30 	.word	0x24000f30
 8007f94:	24000f44 	.word	0x24000f44
 8007f98:	24000f60 	.word	0x24000f60
 8007f9c:	24000f74 	.word	0x24000f74
 8007fa0:	24000f8c 	.word	0x24000f8c
 8007fa4:	24000f58 	.word	0x24000f58
 8007fa8:	24000f5c 	.word	0x24000f5c

08007fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fb2:	e019      	b.n	8007fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fb4:	f000 fed6 	bl	8008d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fb8:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <prvCheckTasksWaitingTermination+0x50>)
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe f9ed 	bl	80063a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fca:	4b0d      	ldr	r3, [pc, #52]	; (8008000 <prvCheckTasksWaitingTermination+0x54>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	4a0b      	ldr	r2, [pc, #44]	; (8008000 <prvCheckTasksWaitingTermination+0x54>)
 8007fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fd4:	4b0b      	ldr	r3, [pc, #44]	; (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	4a0a      	ldr	r2, [pc, #40]	; (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fde:	f000 fef1 	bl	8008dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f810 	bl	8008008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fe8:	4b06      	ldr	r3, [pc, #24]	; (8008004 <prvCheckTasksWaitingTermination+0x58>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e1      	bne.n	8007fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ff0:	bf00      	nop
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	24000f74 	.word	0x24000f74
 8008000:	24000fa0 	.word	0x24000fa0
 8008004:	24000f88 	.word	0x24000f88

08008008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3358      	adds	r3, #88	; 0x58
 8008014:	4618      	mov	r0, r3
 8008016:	f015 fc79 	bl	801d90c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8008020:	2b00      	cmp	r3, #0
 8008022:	d108      	bne.n	8008036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	4618      	mov	r0, r3
 800802a:	f001 f889 	bl	8009140 <vPortFree>
				vPortFree( pxTCB );
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 f886 	bl	8009140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008034:	e018      	b.n	8008068 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800803c:	2b01      	cmp	r3, #1
 800803e:	d103      	bne.n	8008048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f001 f87d 	bl	8009140 <vPortFree>
	}
 8008046:	e00f      	b.n	8008068 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800804e:	2b02      	cmp	r3, #2
 8008050:	d00a      	beq.n	8008068 <prvDeleteTCB+0x60>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60fb      	str	r3, [r7, #12]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <prvDeleteTCB+0x5e>
	}
 8008068:	bf00      	nop
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <prvResetNextTaskUnblockTime+0x38>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d104      	bne.n	800808a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <prvResetNextTaskUnblockTime+0x3c>)
 8008082:	f04f 32ff 	mov.w	r2, #4294967295
 8008086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008088:	e008      	b.n	800809c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800808a:	4b07      	ldr	r3, [pc, #28]	; (80080a8 <prvResetNextTaskUnblockTime+0x38>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	4a04      	ldr	r2, [pc, #16]	; (80080ac <prvResetNextTaskUnblockTime+0x3c>)
 800809a:	6013      	str	r3, [r2, #0]
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr
 80080a8:	24000f58 	.word	0x24000f58
 80080ac:	24000fc0 	.word	0x24000fc0

080080b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <xTaskGetSchedulerState+0x34>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d102      	bne.n	80080c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080be:	2301      	movs	r3, #1
 80080c0:	607b      	str	r3, [r7, #4]
 80080c2:	e008      	b.n	80080d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c4:	4b08      	ldr	r3, [pc, #32]	; (80080e8 <xTaskGetSchedulerState+0x38>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d102      	bne.n	80080d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080cc:	2302      	movs	r3, #2
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	e001      	b.n	80080d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080d6:	687b      	ldr	r3, [r7, #4]
	}
 80080d8:	4618      	mov	r0, r3
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr
 80080e4:	24000fac 	.word	0x24000fac
 80080e8:	24000fc8 	.word	0x24000fc8

080080ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d051      	beq.n	80081a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008106:	4b2a      	ldr	r3, [pc, #168]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	429a      	cmp	r2, r3
 800810e:	d241      	bcs.n	8008194 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	2b00      	cmp	r3, #0
 8008116:	db06      	blt.n	8008126 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008118:	4b25      	ldr	r3, [pc, #148]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6959      	ldr	r1, [r3, #20]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800812e:	4613      	mov	r3, r2
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	4a1f      	ldr	r2, [pc, #124]	; (80081b4 <xTaskPriorityInherit+0xc8>)
 8008138:	4413      	add	r3, r2
 800813a:	4299      	cmp	r1, r3
 800813c:	d122      	bne.n	8008184 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	3304      	adds	r3, #4
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe f92e 	bl	80063a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008148:	4b19      	ldr	r3, [pc, #100]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008156:	4b18      	ldr	r3, [pc, #96]	; (80081b8 <xTaskPriorityInherit+0xcc>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d903      	bls.n	8008166 <xTaskPriorityInherit+0x7a>
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008162:	4a15      	ldr	r2, [pc, #84]	; (80081b8 <xTaskPriorityInherit+0xcc>)
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <xTaskPriorityInherit+0xc8>)
 8008174:	441a      	add	r2, r3
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	3304      	adds	r3, #4
 800817a:	4619      	mov	r1, r3
 800817c:	4610      	mov	r0, r2
 800817e:	f7fe f8b4 	bl	80062ea <vListInsertEnd>
 8008182:	e004      	b.n	800818e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008184:	4b0a      	ldr	r3, [pc, #40]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800818e:	2301      	movs	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	e008      	b.n	80081a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <xTaskPriorityInherit+0xc4>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800819e:	429a      	cmp	r2, r3
 80081a0:	d201      	bcs.n	80081a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80081a2:	2301      	movs	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081a6:	68fb      	ldr	r3, [r7, #12]
	}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	24000acc 	.word	0x24000acc
 80081b4:	24000ad0 	.word	0x24000ad0
 80081b8:	24000fa8 	.word	0x24000fa8

080081bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d056      	beq.n	8008280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081d2:	4b2e      	ldr	r3, [pc, #184]	; (800828c <xTaskPriorityDisinherit+0xd0>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d00a      	beq.n	80081f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e0:	f383 8811 	msr	BASEPRI, r3
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	f3bf 8f4f 	dsb	sy
 80081ec:	60fb      	str	r3, [r7, #12]
}
 80081ee:	bf00      	nop
 80081f0:	e7fe      	b.n	80081f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	60bb      	str	r3, [r7, #8]
}
 800820c:	bf00      	nop
 800820e:	e7fe      	b.n	800820e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008214:	1e5a      	subs	r2, r3, #1
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008222:	429a      	cmp	r2, r3
 8008224:	d02c      	beq.n	8008280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d128      	bne.n	8008280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	3304      	adds	r3, #4
 8008232:	4618      	mov	r0, r3
 8008234:	f7fe f8b6 	bl	80063a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008250:	4b0f      	ldr	r3, [pc, #60]	; (8008290 <xTaskPriorityDisinherit+0xd4>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	429a      	cmp	r2, r3
 8008256:	d903      	bls.n	8008260 <xTaskPriorityDisinherit+0xa4>
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	4a0c      	ldr	r2, [pc, #48]	; (8008290 <xTaskPriorityDisinherit+0xd4>)
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4613      	mov	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4a09      	ldr	r2, [pc, #36]	; (8008294 <xTaskPriorityDisinherit+0xd8>)
 800826e:	441a      	add	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	3304      	adds	r3, #4
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe f837 	bl	80062ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800827c:	2301      	movs	r3, #1
 800827e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008280:	697b      	ldr	r3, [r7, #20]
	}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	24000acc 	.word	0x24000acc
 8008290:	24000fa8 	.word	0x24000fa8
 8008294:	24000ad0 	.word	0x24000ad0

08008298 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80082a6:	2301      	movs	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d06a      	beq.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	60fb      	str	r3, [r7, #12]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d902      	bls.n	80082de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	61fb      	str	r3, [r7, #28]
 80082dc:	e002      	b.n	80082e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e8:	69fa      	ldr	r2, [r7, #28]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d04b      	beq.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d146      	bne.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	69ba      	ldr	r2, [r7, #24]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d10a      	bne.n	8008318 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	60bb      	str	r3, [r7, #8]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	69fa      	ldr	r2, [r7, #28]
 8008322:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db04      	blt.n	8008336 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	6959      	ldr	r1, [r3, #20]
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4a13      	ldr	r2, [pc, #76]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008346:	4413      	add	r3, r2
 8008348:	4299      	cmp	r1, r3
 800834a:	d11c      	bne.n	8008386 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	3304      	adds	r3, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe f827 	bl	80063a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800835a:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	429a      	cmp	r2, r3
 8008360:	d903      	bls.n	800836a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	4a0c      	ldr	r2, [pc, #48]	; (8008398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008368:	6013      	str	r3, [r2, #0]
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	4613      	mov	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	4413      	add	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4a07      	ldr	r2, [pc, #28]	; (8008394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008378:	441a      	add	r2, r3
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	3304      	adds	r3, #4
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7fd ffb2 	bl	80062ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008386:	bf00      	nop
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	24000acc 	.word	0x24000acc
 8008394:	24000ad0 	.word	0x24000ad0
 8008398:	24000fa8 	.word	0x24000fa8

0800839c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800839c:	b480      	push	{r7}
 800839e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80083a8:	4b05      	ldr	r3, [pc, #20]	; (80083c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80083ae:	3201      	adds	r2, #1
 80083b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80083b2:	4b03      	ldr	r3, [pc, #12]	; (80083c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80083b4:	681b      	ldr	r3, [r3, #0]
	}
 80083b6:	4618      	mov	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	24000acc 	.word	0x24000acc

080083c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ce:	4b21      	ldr	r3, [pc, #132]	; (8008454 <prvAddCurrentTaskToDelayedList+0x90>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d4:	4b20      	ldr	r3, [pc, #128]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd ffe2 	bl	80063a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e6:	d10a      	bne.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80083ee:	4b1a      	ldr	r3, [pc, #104]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3304      	adds	r3, #4
 80083f4:	4619      	mov	r1, r3
 80083f6:	4819      	ldr	r0, [pc, #100]	; (800845c <prvAddCurrentTaskToDelayedList+0x98>)
 80083f8:	f7fd ff77 	bl	80062ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80083fc:	e026      	b.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4413      	add	r3, r2
 8008404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	429a      	cmp	r2, r3
 8008414:	d209      	bcs.n	800842a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008416:	4b12      	ldr	r3, [pc, #72]	; (8008460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3304      	adds	r3, #4
 8008420:	4619      	mov	r1, r3
 8008422:	4610      	mov	r0, r2
 8008424:	f7fd ff85 	bl	8006332 <vListInsert>
}
 8008428:	e010      	b.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800842a:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <prvAddCurrentTaskToDelayedList+0x94>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3304      	adds	r3, #4
 8008434:	4619      	mov	r1, r3
 8008436:	4610      	mov	r0, r2
 8008438:	f7fd ff7b 	bl	8006332 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800843c:	4b0a      	ldr	r3, [pc, #40]	; (8008468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	429a      	cmp	r2, r3
 8008444:	d202      	bcs.n	800844c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008446:	4a08      	ldr	r2, [pc, #32]	; (8008468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	6013      	str	r3, [r2, #0]
}
 800844c:	bf00      	nop
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	24000fa4 	.word	0x24000fa4
 8008458:	24000acc 	.word	0x24000acc
 800845c:	24000f8c 	.word	0x24000f8c
 8008460:	24000f5c 	.word	0x24000f5c
 8008464:	24000f58 	.word	0x24000f58
 8008468:	24000fc0 	.word	0x24000fc0

0800846c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b08a      	sub	sp, #40	; 0x28
 8008470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008476:	f000 fb07 	bl	8008a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800847a:	4b1c      	ldr	r3, [pc, #112]	; (80084ec <xTimerCreateTimerTask+0x80>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d021      	beq.n	80084c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800848a:	1d3a      	adds	r2, r7, #4
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	f107 030c 	add.w	r3, r7, #12
 8008494:	4618      	mov	r0, r3
 8008496:	f7fd fee1 	bl	800625c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	9202      	str	r2, [sp, #8]
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	2302      	movs	r3, #2
 80084a6:	9300      	str	r3, [sp, #0]
 80084a8:	2300      	movs	r3, #0
 80084aa:	460a      	mov	r2, r1
 80084ac:	4910      	ldr	r1, [pc, #64]	; (80084f0 <xTimerCreateTimerTask+0x84>)
 80084ae:	4811      	ldr	r0, [pc, #68]	; (80084f4 <xTimerCreateTimerTask+0x88>)
 80084b0:	f7fe ffb0 	bl	8007414 <xTaskCreateStatic>
 80084b4:	4603      	mov	r3, r0
 80084b6:	4a10      	ldr	r2, [pc, #64]	; (80084f8 <xTimerCreateTimerTask+0x8c>)
 80084b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ba:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <xTimerCreateTimerTask+0x8c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084c2:	2301      	movs	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	613b      	str	r3, [r7, #16]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80084e2:	697b      	ldr	r3, [r7, #20]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3718      	adds	r7, #24
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	24000ffc 	.word	0x24000ffc
 80084f0:	0801e5a8 	.word	0x0801e5a8
 80084f4:	08008631 	.word	0x08008631
 80084f8:	24001000 	.word	0x24001000

080084fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	; 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800850a:	2300      	movs	r3, #0
 800850c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d10a      	bne.n	800852a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	623b      	str	r3, [r7, #32]
}
 8008526:	bf00      	nop
 8008528:	e7fe      	b.n	8008528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800852a:	4b1a      	ldr	r3, [pc, #104]	; (8008594 <xTimerGenericCommand+0x98>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d02a      	beq.n	8008588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	2b05      	cmp	r3, #5
 8008542:	dc18      	bgt.n	8008576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008544:	f7ff fdb4 	bl	80080b0 <xTaskGetSchedulerState>
 8008548:	4603      	mov	r3, r0
 800854a:	2b02      	cmp	r3, #2
 800854c:	d109      	bne.n	8008562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800854e:	4b11      	ldr	r3, [pc, #68]	; (8008594 <xTimerGenericCommand+0x98>)
 8008550:	6818      	ldr	r0, [r3, #0]
 8008552:	f107 0110 	add.w	r1, r7, #16
 8008556:	2300      	movs	r3, #0
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	f7fe f8f5 	bl	8006748 <xQueueGenericSend>
 800855e:	6278      	str	r0, [r7, #36]	; 0x24
 8008560:	e012      	b.n	8008588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008562:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <xTimerGenericCommand+0x98>)
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	f107 0110 	add.w	r1, r7, #16
 800856a:	2300      	movs	r3, #0
 800856c:	2200      	movs	r2, #0
 800856e:	f7fe f8eb 	bl	8006748 <xQueueGenericSend>
 8008572:	6278      	str	r0, [r7, #36]	; 0x24
 8008574:	e008      	b.n	8008588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008576:	4b07      	ldr	r3, [pc, #28]	; (8008594 <xTimerGenericCommand+0x98>)
 8008578:	6818      	ldr	r0, [r3, #0]
 800857a:	f107 0110 	add.w	r1, r7, #16
 800857e:	2300      	movs	r3, #0
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	f7fe f9df 	bl	8006944 <xQueueGenericSendFromISR>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800858a:	4618      	mov	r0, r3
 800858c:	3728      	adds	r7, #40	; 0x28
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	24000ffc 	.word	0x24000ffc

08008598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b088      	sub	sp, #32
 800859c:	af02      	add	r7, sp, #8
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085a2:	4b22      	ldr	r3, [pc, #136]	; (800862c <prvProcessExpiredTimer+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd fef7 	bl	80063a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085bc:	f003 0304 	and.w	r3, r3, #4
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d022      	beq.n	800860a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	699a      	ldr	r2, [r3, #24]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	18d1      	adds	r1, r2, r3
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	6978      	ldr	r0, [r7, #20]
 80085d2:	f000 f8d1 	bl	8008778 <prvInsertTimerInActiveList>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01f      	beq.n	800861c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085dc:	2300      	movs	r3, #0
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	2100      	movs	r1, #0
 80085e6:	6978      	ldr	r0, [r7, #20]
 80085e8:	f7ff ff88 	bl	80084fc <xTimerGenericCommand>
 80085ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d113      	bne.n	800861c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	60fb      	str	r3, [r7, #12]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	b2da      	uxtb	r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	6978      	ldr	r0, [r7, #20]
 8008622:	4798      	blx	r3
}
 8008624:	bf00      	nop
 8008626:	3718      	adds	r7, #24
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	24000ff4 	.word	0x24000ff4

08008630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008638:	f107 0308 	add.w	r3, r7, #8
 800863c:	4618      	mov	r0, r3
 800863e:	f000 f857 	bl	80086f0 <prvGetNextExpireTime>
 8008642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f803 	bl	8008654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800864e:	f000 f8d5 	bl	80087fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008652:	e7f1      	b.n	8008638 <prvTimerTask+0x8>

08008654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800865e:	f7ff f939 	bl	80078d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008662:	f107 0308 	add.w	r3, r7, #8
 8008666:	4618      	mov	r0, r3
 8008668:	f000 f866 	bl	8008738 <prvSampleTimeNow>
 800866c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d130      	bne.n	80086d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <prvProcessTimerOrBlockTask+0x3c>
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	429a      	cmp	r2, r3
 8008680:	d806      	bhi.n	8008690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008682:	f7ff f935 	bl	80078f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff85 	bl	8008598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800868e:	e024      	b.n	80086da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d008      	beq.n	80086a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008696:	4b13      	ldr	r3, [pc, #76]	; (80086e4 <prvProcessTimerOrBlockTask+0x90>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <prvProcessTimerOrBlockTask+0x50>
 80086a0:	2301      	movs	r3, #1
 80086a2:	e000      	b.n	80086a6 <prvProcessTimerOrBlockTask+0x52>
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086a8:	4b0f      	ldr	r3, [pc, #60]	; (80086e8 <prvProcessTimerOrBlockTask+0x94>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7fe fe79 	bl	80073ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086ba:	f7ff f919 	bl	80078f0 <xTaskResumeAll>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086c4:	4b09      	ldr	r3, [pc, #36]	; (80086ec <prvProcessTimerOrBlockTask+0x98>)
 80086c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	f3bf 8f6f 	isb	sy
}
 80086d4:	e001      	b.n	80086da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086d6:	f7ff f90b 	bl	80078f0 <xTaskResumeAll>
}
 80086da:	bf00      	nop
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	24000ff8 	.word	0x24000ff8
 80086e8:	24000ffc 	.word	0x24000ffc
 80086ec:	e000ed04 	.word	0xe000ed04

080086f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80086f0:	b480      	push	{r7}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80086f8:	4b0e      	ldr	r3, [pc, #56]	; (8008734 <prvGetNextExpireTime+0x44>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d101      	bne.n	8008706 <prvGetNextExpireTime+0x16>
 8008702:	2201      	movs	r2, #1
 8008704:	e000      	b.n	8008708 <prvGetNextExpireTime+0x18>
 8008706:	2200      	movs	r2, #0
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008714:	4b07      	ldr	r3, [pc, #28]	; (8008734 <prvGetNextExpireTime+0x44>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e001      	b.n	8008724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	24000ff4 	.word	0x24000ff4

08008738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008740:	f7ff f974 	bl	8007a2c <xTaskGetTickCount>
 8008744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvSampleTimeNow+0x3c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	429a      	cmp	r2, r3
 800874e:	d205      	bcs.n	800875c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008750:	f000 f936 	bl	80089c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
 800875a:	e002      	b.n	8008762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008762:	4a04      	ldr	r2, [pc, #16]	; (8008774 <prvSampleTimeNow+0x3c>)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008768:	68fb      	ldr	r3, [r7, #12]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	24001004 	.word	0x24001004

08008778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d812      	bhi.n	80087c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d302      	bcc.n	80087b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	617b      	str	r3, [r7, #20]
 80087b0:	e01b      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087b2:	4b10      	ldr	r3, [pc, #64]	; (80087f4 <prvInsertTimerInActiveList+0x7c>)
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	3304      	adds	r3, #4
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f7fd fdb8 	bl	8006332 <vListInsert>
 80087c2:	e012      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d206      	bcs.n	80087da <prvInsertTimerInActiveList+0x62>
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d302      	bcc.n	80087da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	617b      	str	r3, [r7, #20]
 80087d8:	e007      	b.n	80087ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087da:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <prvInsertTimerInActiveList+0x80>)
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	3304      	adds	r3, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	4610      	mov	r0, r2
 80087e6:	f7fd fda4 	bl	8006332 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80087ea:	697b      	ldr	r3, [r7, #20]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3718      	adds	r7, #24
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	24000ff8 	.word	0x24000ff8
 80087f8:	24000ff4 	.word	0x24000ff4

080087fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b08e      	sub	sp, #56	; 0x38
 8008800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008802:	e0ca      	b.n	800899a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	da18      	bge.n	800883c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800880a:	1d3b      	adds	r3, r7, #4
 800880c:	3304      	adds	r3, #4
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	61fb      	str	r3, [r7, #28]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800882c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008832:	6850      	ldr	r0, [r2, #4]
 8008834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008836:	6892      	ldr	r2, [r2, #8]
 8008838:	4611      	mov	r1, r2
 800883a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f2c0 80ab 	blt.w	800899a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884a:	695b      	ldr	r3, [r3, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d004      	beq.n	800885a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008852:	3304      	adds	r3, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fd fda5 	bl	80063a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800885a:	463b      	mov	r3, r7
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff ff6b 	bl	8008738 <prvSampleTimeNow>
 8008862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2b09      	cmp	r3, #9
 8008868:	f200 8096 	bhi.w	8008998 <prvProcessReceivedCommands+0x19c>
 800886c:	a201      	add	r2, pc, #4	; (adr r2, 8008874 <prvProcessReceivedCommands+0x78>)
 800886e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008872:	bf00      	nop
 8008874:	0800889d 	.word	0x0800889d
 8008878:	0800889d 	.word	0x0800889d
 800887c:	0800889d 	.word	0x0800889d
 8008880:	08008911 	.word	0x08008911
 8008884:	08008925 	.word	0x08008925
 8008888:	0800896f 	.word	0x0800896f
 800888c:	0800889d 	.word	0x0800889d
 8008890:	0800889d 	.word	0x0800889d
 8008894:	08008911 	.word	0x08008911
 8008898:	08008925 	.word	0x08008925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a2:	f043 0301 	orr.w	r3, r3, #1
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	18d1      	adds	r1, r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088bc:	f7ff ff5c 	bl	8008778 <prvInsertTimerInActiveList>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d069      	beq.n	800899a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d05e      	beq.n	800899a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	441a      	add	r2, r3
 80088e4:	2300      	movs	r3, #0
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	2100      	movs	r1, #0
 80088ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088ee:	f7ff fe05 	bl	80084fc <xTimerGenericCommand>
 80088f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80088f4:	6a3b      	ldr	r3, [r7, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d14f      	bne.n	800899a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	61bb      	str	r3, [r7, #24]
}
 800890c:	bf00      	nop
 800890e:	e7fe      	b.n	800890e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008916:	f023 0301 	bic.w	r3, r3, #1
 800891a:	b2da      	uxtb	r2, r3
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008922:	e03a      	b.n	800899a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	b2da      	uxtb	r2, r3
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008936:	68ba      	ldr	r2, [r7, #8]
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10a      	bne.n	800895a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008948:	f383 8811 	msr	BASEPRI, r3
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	f3bf 8f4f 	dsb	sy
 8008954:	617b      	str	r3, [r7, #20]
}
 8008956:	bf00      	nop
 8008958:	e7fe      	b.n	8008958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800895a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895c:	699a      	ldr	r2, [r3, #24]
 800895e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008960:	18d1      	adds	r1, r2, r3
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008968:	f7ff ff06 	bl	8008778 <prvInsertTimerInActiveList>
					break;
 800896c:	e015      	b.n	800899a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800897c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800897e:	f000 fbdf 	bl	8009140 <vPortFree>
 8008982:	e00a      	b.n	800899a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898a:	f023 0301 	bic.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008996:	e000      	b.n	800899a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800899a:	4b08      	ldr	r3, [pc, #32]	; (80089bc <prvProcessReceivedCommands+0x1c0>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	1d39      	adds	r1, r7, #4
 80089a0:	2200      	movs	r2, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe f8f6 	bl	8006b94 <xQueueReceive>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f47f af2a 	bne.w	8008804 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	3730      	adds	r7, #48	; 0x30
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	24000ffc 	.word	0x24000ffc

080089c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089c6:	e048      	b.n	8008a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089c8:	4b2d      	ldr	r3, [pc, #180]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d2:	4b2b      	ldr	r3, [pc, #172]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3304      	adds	r3, #4
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fd fcdf 	bl	80063a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	68f8      	ldr	r0, [r7, #12]
 80089ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089f4:	f003 0304 	and.w	r3, r3, #4
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d02e      	beq.n	8008a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	699b      	ldr	r3, [r3, #24]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	4413      	add	r3, r2
 8008a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d90e      	bls.n	8008a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	68ba      	ldr	r2, [r7, #8]
 8008a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a1a:	4b19      	ldr	r3, [pc, #100]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4619      	mov	r1, r3
 8008a24:	4610      	mov	r0, r2
 8008a26:	f7fd fc84 	bl	8006332 <vListInsert>
 8008a2a:	e016      	b.n	8008a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	2300      	movs	r3, #0
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	2100      	movs	r1, #0
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f7ff fd60 	bl	80084fc <xTimerGenericCommand>
 8008a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a48:	f383 8811 	msr	BASEPRI, r3
 8008a4c:	f3bf 8f6f 	isb	sy
 8008a50:	f3bf 8f4f 	dsb	sy
 8008a54:	603b      	str	r3, [r7, #0]
}
 8008a56:	bf00      	nop
 8008a58:	e7fe      	b.n	8008a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a5a:	4b09      	ldr	r3, [pc, #36]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1b1      	bne.n	80089c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a6a:	4b06      	ldr	r3, [pc, #24]	; (8008a84 <prvSwitchTimerLists+0xc4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a04      	ldr	r2, [pc, #16]	; (8008a80 <prvSwitchTimerLists+0xc0>)
 8008a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a72:	4a04      	ldr	r2, [pc, #16]	; (8008a84 <prvSwitchTimerLists+0xc4>)
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	6013      	str	r3, [r2, #0]
}
 8008a78:	bf00      	nop
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	24000ff4 	.word	0x24000ff4
 8008a84:	24000ff8 	.word	0x24000ff8

08008a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a8e:	f000 f969 	bl	8008d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d120      	bne.n	8008adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a9a:	4814      	ldr	r0, [pc, #80]	; (8008aec <prvCheckForValidListAndQueue+0x64>)
 8008a9c:	f7fd fbf8 	bl	8006290 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008aa0:	4813      	ldr	r0, [pc, #76]	; (8008af0 <prvCheckForValidListAndQueue+0x68>)
 8008aa2:	f7fd fbf5 	bl	8006290 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <prvCheckForValidListAndQueue+0x6c>)
 8008aa8:	4a10      	ldr	r2, [pc, #64]	; (8008aec <prvCheckForValidListAndQueue+0x64>)
 8008aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008aac:	4b12      	ldr	r3, [pc, #72]	; (8008af8 <prvCheckForValidListAndQueue+0x70>)
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <prvCheckForValidListAndQueue+0x68>)
 8008ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4b11      	ldr	r3, [pc, #68]	; (8008afc <prvCheckForValidListAndQueue+0x74>)
 8008ab8:	4a11      	ldr	r2, [pc, #68]	; (8008b00 <prvCheckForValidListAndQueue+0x78>)
 8008aba:	2110      	movs	r1, #16
 8008abc:	200a      	movs	r0, #10
 8008abe:	f7fd fd03 	bl	80064c8 <xQueueGenericCreateStatic>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4a08      	ldr	r2, [pc, #32]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ac8:	4b07      	ldr	r3, [pc, #28]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d005      	beq.n	8008adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <prvCheckForValidListAndQueue+0x60>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	490b      	ldr	r1, [pc, #44]	; (8008b04 <prvCheckForValidListAndQueue+0x7c>)
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fc14 	bl	8007304 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008adc:	f000 f972 	bl	8008dc4 <vPortExitCritical>
}
 8008ae0:	bf00      	nop
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	24000ffc 	.word	0x24000ffc
 8008aec:	24000fcc 	.word	0x24000fcc
 8008af0:	24000fe0 	.word	0x24000fe0
 8008af4:	24000ff4 	.word	0x24000ff4
 8008af8:	24000ff8 	.word	0x24000ff8
 8008afc:	240010a8 	.word	0x240010a8
 8008b00:	24001008 	.word	0x24001008
 8008b04:	0801e5b0 	.word	0x0801e5b0

08008b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3b04      	subs	r3, #4
 8008b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b04      	subs	r3, #4
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	f023 0201 	bic.w	r2, r3, #1
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3b04      	subs	r3, #4
 8008b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b38:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <pxPortInitialiseStack+0x64>)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b14      	subs	r3, #20
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f06f 0202 	mvn.w	r2, #2
 8008b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	3b20      	subs	r3, #32
 8008b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	08008b71 	.word	0x08008b71

08008b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <prvTaskExitError+0x54>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b82:	d00a      	beq.n	8008b9a <prvTaskExitError+0x2a>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	60fb      	str	r3, [r7, #12]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <prvTaskExitError+0x28>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	60bb      	str	r3, [r7, #8]
}
 8008bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bae:	bf00      	nop
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0fc      	beq.n	8008bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	24000014 	.word	0x24000014
	...

08008bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008bd0:	4b07      	ldr	r3, [pc, #28]	; (8008bf0 <pxCurrentTCBConst2>)
 8008bd2:	6819      	ldr	r1, [r3, #0]
 8008bd4:	6808      	ldr	r0, [r1, #0]
 8008bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bda:	f380 8809 	msr	PSP, r0
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f04f 0000 	mov.w	r0, #0
 8008be6:	f380 8811 	msr	BASEPRI, r0
 8008bea:	4770      	bx	lr
 8008bec:	f3af 8000 	nop.w

08008bf0 <pxCurrentTCBConst2>:
 8008bf0:	24000acc 	.word	0x24000acc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop

08008bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008bf8:	4808      	ldr	r0, [pc, #32]	; (8008c1c <prvPortStartFirstTask+0x24>)
 8008bfa:	6800      	ldr	r0, [r0, #0]
 8008bfc:	6800      	ldr	r0, [r0, #0]
 8008bfe:	f380 8808 	msr	MSP, r0
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8814 	msr	CONTROL, r0
 8008c0a:	b662      	cpsie	i
 8008c0c:	b661      	cpsie	f
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	df00      	svc	0
 8008c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c1a:	bf00      	nop
 8008c1c:	e000ed08 	.word	0xe000ed08

08008c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c26:	4b46      	ldr	r3, [pc, #280]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a46      	ldr	r2, [pc, #280]	; (8008d44 <xPortStartScheduler+0x124>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10a      	bne.n	8008c46 <xPortStartScheduler+0x26>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	613b      	str	r3, [r7, #16]
}
 8008c42:	bf00      	nop
 8008c44:	e7fe      	b.n	8008c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c46:	4b3e      	ldr	r3, [pc, #248]	; (8008d40 <xPortStartScheduler+0x120>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a3f      	ldr	r2, [pc, #252]	; (8008d48 <xPortStartScheduler+0x128>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d10a      	bne.n	8008c66 <xPortStartScheduler+0x46>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60fb      	str	r3, [r7, #12]
}
 8008c62:	bf00      	nop
 8008c64:	e7fe      	b.n	8008c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c66:	4b39      	ldr	r3, [pc, #228]	; (8008d4c <xPortStartScheduler+0x12c>)
 8008c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	22ff      	movs	r2, #255	; 0xff
 8008c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	781b      	ldrb	r3, [r3, #0]
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <xPortStartScheduler+0x130>)
 8008c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c8e:	4b31      	ldr	r3, [pc, #196]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c94:	e009      	b.n	8008caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008c96:	4b2f      	ldr	r3, [pc, #188]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	4a2d      	ldr	r2, [pc, #180]	; (8008d54 <xPortStartScheduler+0x134>)
 8008c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ca0:	78fb      	ldrb	r3, [r7, #3]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	005b      	lsls	r3, r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cb2:	2b80      	cmp	r3, #128	; 0x80
 8008cb4:	d0ef      	beq.n	8008c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f1c3 0307 	rsb	r3, r3, #7
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d00a      	beq.n	8008cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60bb      	str	r3, [r7, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008cd8:	4b1e      	ldr	r3, [pc, #120]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	4a1d      	ldr	r2, [pc, #116]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <xPortStartScheduler+0x134>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cea:	4a1a      	ldr	r2, [pc, #104]	; (8008d54 <xPortStartScheduler+0x134>)
 8008cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cf6:	4b18      	ldr	r3, [pc, #96]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a17      	ldr	r2, [pc, #92]	; (8008d58 <xPortStartScheduler+0x138>)
 8008cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d02:	4b15      	ldr	r3, [pc, #84]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a14      	ldr	r2, [pc, #80]	; (8008d58 <xPortStartScheduler+0x138>)
 8008d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d0e:	f000 f8dd 	bl	8008ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d12:	4b12      	ldr	r3, [pc, #72]	; (8008d5c <xPortStartScheduler+0x13c>)
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d18:	f000 f8fc 	bl	8008f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <xPortStartScheduler+0x140>)
 8008d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d28:	f7ff ff66 	bl	8008bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d2c:	f7fe ff48 	bl	8007bc0 <vTaskSwitchContext>
	prvTaskExitError();
 8008d30:	f7ff ff1e 	bl	8008b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	e000ed00 	.word	0xe000ed00
 8008d44:	410fc271 	.word	0x410fc271
 8008d48:	410fc270 	.word	0x410fc270
 8008d4c:	e000e400 	.word	0xe000e400
 8008d50:	240010f8 	.word	0x240010f8
 8008d54:	240010fc 	.word	0x240010fc
 8008d58:	e000ed20 	.word	0xe000ed20
 8008d5c:	24000014 	.word	0x24000014
 8008d60:	e000ef34 	.word	0xe000ef34

08008d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
	__asm volatile
 8008d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6e:	f383 8811 	msr	BASEPRI, r3
 8008d72:	f3bf 8f6f 	isb	sy
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	607b      	str	r3, [r7, #4]
}
 8008d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d7e:	4b0f      	ldr	r3, [pc, #60]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d88:	4b0c      	ldr	r3, [pc, #48]	; (8008dbc <vPortEnterCritical+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d10f      	bne.n	8008db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <vPortEnterCritical+0x5c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	603b      	str	r3, [r7, #0]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <vPortEnterCritical+0x4a>
	}
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	24000014 	.word	0x24000014
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008dca:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <vPortExitCritical+0x50>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10a      	bne.n	8008de8 <vPortExitCritical+0x24>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	607b      	str	r3, [r7, #4]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <vPortExitCritical+0x50>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	3b01      	subs	r3, #1
 8008dee:	4a09      	ldr	r2, [pc, #36]	; (8008e14 <vPortExitCritical+0x50>)
 8008df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008df2:	4b08      	ldr	r3, [pc, #32]	; (8008e14 <vPortExitCritical+0x50>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d105      	bne.n	8008e06 <vPortExitCritical+0x42>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	f383 8811 	msr	BASEPRI, r3
}
 8008e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	24000014 	.word	0x24000014
	...

08008e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e20:	f3ef 8009 	mrs	r0, PSP
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	4b15      	ldr	r3, [pc, #84]	; (8008e80 <pxCurrentTCBConst>)
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	f01e 0f10 	tst.w	lr, #16
 8008e30:	bf08      	it	eq
 8008e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e3a:	6010      	str	r0, [r2, #0]
 8008e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e44:	f380 8811 	msr	BASEPRI, r0
 8008e48:	f3bf 8f4f 	dsb	sy
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f7fe feb6 	bl	8007bc0 <vTaskSwitchContext>
 8008e54:	f04f 0000 	mov.w	r0, #0
 8008e58:	f380 8811 	msr	BASEPRI, r0
 8008e5c:	bc09      	pop	{r0, r3}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e66:	f01e 0f10 	tst.w	lr, #16
 8008e6a:	bf08      	it	eq
 8008e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008e70:	f380 8809 	msr	PSP, r0
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst>:
 8008e80:	24000acc 	.word	0x24000acc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e92:	f383 8811 	msr	BASEPRI, r3
 8008e96:	f3bf 8f6f 	isb	sy
 8008e9a:	f3bf 8f4f 	dsb	sy
 8008e9e:	607b      	str	r3, [r7, #4]
}
 8008ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ea2:	f7fe fdd3 	bl	8007a4c <xTaskIncrementTick>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d003      	beq.n	8008eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008eac:	4b06      	ldr	r3, [pc, #24]	; (8008ec8 <xPortSysTickHandler+0x40>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f383 8811 	msr	BASEPRI, r3
}
 8008ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	e000ed04 	.word	0xe000ed04

08008ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ed0:	4b0b      	ldr	r3, [pc, #44]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ed6:	4b0b      	ldr	r3, [pc, #44]	; (8008f04 <vPortSetupTimerInterrupt+0x38>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <vPortSetupTimerInterrupt+0x3c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <vPortSetupTimerInterrupt+0x40>)
 8008ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee6:	099b      	lsrs	r3, r3, #6
 8008ee8:	4a09      	ldr	r2, [pc, #36]	; (8008f10 <vPortSetupTimerInterrupt+0x44>)
 8008eea:	3b01      	subs	r3, #1
 8008eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008eee:	4b04      	ldr	r3, [pc, #16]	; (8008f00 <vPortSetupTimerInterrupt+0x34>)
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	601a      	str	r2, [r3, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	e000e010 	.word	0xe000e010
 8008f04:	e000e018 	.word	0xe000e018
 8008f08:	24000004 	.word	0x24000004
 8008f0c:	10624dd3 	.word	0x10624dd3
 8008f10:	e000e014 	.word	0xe000e014

08008f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008f24 <vPortEnableVFP+0x10>
 8008f18:	6801      	ldr	r1, [r0, #0]
 8008f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008f1e:	6001      	str	r1, [r0, #0]
 8008f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f22:	bf00      	nop
 8008f24:	e000ed88 	.word	0xe000ed88

08008f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f2e:	f3ef 8305 	mrs	r3, IPSR
 8008f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b0f      	cmp	r3, #15
 8008f38:	d914      	bls.n	8008f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f3a:	4a17      	ldr	r2, [pc, #92]	; (8008f98 <vPortValidateInterruptPriority+0x70>)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f44:	4b15      	ldr	r3, [pc, #84]	; (8008f9c <vPortValidateInterruptPriority+0x74>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	7afa      	ldrb	r2, [r7, #11]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d20a      	bcs.n	8008f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	607b      	str	r3, [r7, #4]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f64:	4b0e      	ldr	r3, [pc, #56]	; (8008fa0 <vPortValidateInterruptPriority+0x78>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f6c:	4b0d      	ldr	r3, [pc, #52]	; (8008fa4 <vPortValidateInterruptPriority+0x7c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d90a      	bls.n	8008f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f78:	f383 8811 	msr	BASEPRI, r3
 8008f7c:	f3bf 8f6f 	isb	sy
 8008f80:	f3bf 8f4f 	dsb	sy
 8008f84:	603b      	str	r3, [r7, #0]
}
 8008f86:	bf00      	nop
 8008f88:	e7fe      	b.n	8008f88 <vPortValidateInterruptPriority+0x60>
	}
 8008f8a:	bf00      	nop
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	e000e3f0 	.word	0xe000e3f0
 8008f9c:	240010f8 	.word	0x240010f8
 8008fa0:	e000ed0c 	.word	0xe000ed0c
 8008fa4:	240010fc 	.word	0x240010fc

08008fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08a      	sub	sp, #40	; 0x28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008fb4:	f7fe fc8e 	bl	80078d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <pvPortMalloc+0x180>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d101      	bne.n	8008fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008fc0:	f000 f920 	bl	8009204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008fc4:	4b59      	ldr	r3, [pc, #356]	; (800912c <pvPortMalloc+0x184>)
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f040 8093 	bne.w	80090f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01d      	beq.n	8009014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fd8:	2208      	movs	r2, #8
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d014      	beq.n	8009014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 0307 	and.w	r3, r3, #7
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <pvPortMalloc+0x6c>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	617b      	str	r3, [r7, #20]
}
 8009010:	bf00      	nop
 8009012:	e7fe      	b.n	8009012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d06e      	beq.n	80090f8 <pvPortMalloc+0x150>
 800901a:	4b45      	ldr	r3, [pc, #276]	; (8009130 <pvPortMalloc+0x188>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d869      	bhi.n	80090f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009024:	4b43      	ldr	r3, [pc, #268]	; (8009134 <pvPortMalloc+0x18c>)
 8009026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009028:	4b42      	ldr	r3, [pc, #264]	; (8009134 <pvPortMalloc+0x18c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800902e:	e004      	b.n	800903a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800903a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	429a      	cmp	r2, r3
 8009042:	d903      	bls.n	800904c <pvPortMalloc+0xa4>
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1f1      	bne.n	8009030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800904c:	4b36      	ldr	r3, [pc, #216]	; (8009128 <pvPortMalloc+0x180>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009052:	429a      	cmp	r2, r3
 8009054:	d050      	beq.n	80090f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2208      	movs	r2, #8
 800905c:	4413      	add	r3, r2
 800905e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	6a3b      	ldr	r3, [r7, #32]
 8009066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	1ad2      	subs	r2, r2, r3
 8009070:	2308      	movs	r3, #8
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	429a      	cmp	r2, r3
 8009076:	d91f      	bls.n	80090b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4413      	add	r3, r2
 800907e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00a      	beq.n	80090a0 <pvPortMalloc+0xf8>
	__asm volatile
 800908a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908e:	f383 8811 	msr	BASEPRI, r3
 8009092:	f3bf 8f6f 	isb	sy
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	613b      	str	r3, [r7, #16]
}
 800909c:	bf00      	nop
 800909e:	e7fe      	b.n	800909e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	69bb      	ldr	r3, [r7, #24]
 80090aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80090b2:	69b8      	ldr	r0, [r7, #24]
 80090b4:	f000 f90a 	bl	80092cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80090b8:	4b1d      	ldr	r3, [pc, #116]	; (8009130 <pvPortMalloc+0x188>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	4a1b      	ldr	r2, [pc, #108]	; (8009130 <pvPortMalloc+0x188>)
 80090c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80090c6:	4b1a      	ldr	r3, [pc, #104]	; (8009130 <pvPortMalloc+0x188>)
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b1b      	ldr	r3, [pc, #108]	; (8009138 <pvPortMalloc+0x190>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d203      	bcs.n	80090da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090d2:	4b17      	ldr	r3, [pc, #92]	; (8009130 <pvPortMalloc+0x188>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a18      	ldr	r2, [pc, #96]	; (8009138 <pvPortMalloc+0x190>)
 80090d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <pvPortMalloc+0x184>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ea:	2200      	movs	r2, #0
 80090ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <pvPortMalloc+0x194>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	3301      	adds	r3, #1
 80090f4:	4a11      	ldr	r2, [pc, #68]	; (800913c <pvPortMalloc+0x194>)
 80090f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090f8:	f7fe fbfa 	bl	80078f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <pvPortMalloc+0x174>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	60fb      	str	r3, [r7, #12]
}
 8009118:	bf00      	nop
 800911a:	e7fe      	b.n	800911a <pvPortMalloc+0x172>
	return pvReturn;
 800911c:	69fb      	ldr	r3, [r7, #28]
}
 800911e:	4618      	mov	r0, r3
 8009120:	3728      	adds	r7, #40	; 0x28
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	240197a8 	.word	0x240197a8
 800912c:	240197bc 	.word	0x240197bc
 8009130:	240197ac 	.word	0x240197ac
 8009134:	240197a0 	.word	0x240197a0
 8009138:	240197b0 	.word	0x240197b0
 800913c:	240197b4 	.word	0x240197b4

08009140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04d      	beq.n	80091ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009152:	2308      	movs	r3, #8
 8009154:	425b      	negs	r3, r3
 8009156:	697a      	ldr	r2, [r7, #20]
 8009158:	4413      	add	r3, r2
 800915a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	4b24      	ldr	r3, [pc, #144]	; (80091f8 <vPortFree+0xb8>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4013      	ands	r3, r2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d10a      	bne.n	8009184 <vPortFree+0x44>
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	60fb      	str	r3, [r7, #12]
}
 8009180:	bf00      	nop
 8009182:	e7fe      	b.n	8009182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <vPortFree+0x62>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	60bb      	str	r3, [r7, #8]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	4b14      	ldr	r3, [pc, #80]	; (80091f8 <vPortFree+0xb8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4013      	ands	r3, r2
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01e      	beq.n	80091ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d11a      	bne.n	80091ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b0e      	ldr	r3, [pc, #56]	; (80091f8 <vPortFree+0xb8>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	43db      	mvns	r3, r3
 80091c2:	401a      	ands	r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80091c8:	f7fe fb84 	bl	80078d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	4b0a      	ldr	r3, [pc, #40]	; (80091fc <vPortFree+0xbc>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	4a09      	ldr	r2, [pc, #36]	; (80091fc <vPortFree+0xbc>)
 80091d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80091da:	6938      	ldr	r0, [r7, #16]
 80091dc:	f000 f876 	bl	80092cc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80091e0:	4b07      	ldr	r3, [pc, #28]	; (8009200 <vPortFree+0xc0>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	3301      	adds	r3, #1
 80091e6:	4a06      	ldr	r2, [pc, #24]	; (8009200 <vPortFree+0xc0>)
 80091e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80091ea:	f7fe fb81 	bl	80078f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091ee:	bf00      	nop
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	240197bc 	.word	0x240197bc
 80091fc:	240197ac 	.word	0x240197ac
 8009200:	240197b8 	.word	0x240197b8

08009204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800920a:	4b29      	ldr	r3, [pc, #164]	; (80092b0 <prvHeapInit+0xac>)
 800920c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800920e:	4b29      	ldr	r3, [pc, #164]	; (80092b4 <prvHeapInit+0xb0>)
 8009210:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f003 0307 	and.w	r3, r3, #7
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00c      	beq.n	8009236 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	3307      	adds	r3, #7
 8009220:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f023 0307 	bic.w	r3, r3, #7
 8009228:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800922a:	68ba      	ldr	r2, [r7, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	4a20      	ldr	r2, [pc, #128]	; (80092b4 <prvHeapInit+0xb0>)
 8009232:	4413      	add	r3, r2
 8009234:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800923a:	4a1f      	ldr	r2, [pc, #124]	; (80092b8 <prvHeapInit+0xb4>)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009240:	4b1d      	ldr	r3, [pc, #116]	; (80092b8 <prvHeapInit+0xb4>)
 8009242:	2200      	movs	r2, #0
 8009244:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	4413      	add	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800924e:	2208      	movs	r2, #8
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1a9b      	subs	r3, r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f023 0307 	bic.w	r3, r3, #7
 800925c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4a16      	ldr	r2, [pc, #88]	; (80092bc <prvHeapInit+0xb8>)
 8009262:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009264:	4b15      	ldr	r3, [pc, #84]	; (80092bc <prvHeapInit+0xb8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2200      	movs	r2, #0
 800926a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800926c:	4b13      	ldr	r3, [pc, #76]	; (80092bc <prvHeapInit+0xb8>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2200      	movs	r2, #0
 8009272:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	1ad2      	subs	r2, r2, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009282:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <prvHeapInit+0xb8>)
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <prvHeapInit+0xbc>)
 8009290:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	4a0b      	ldr	r2, [pc, #44]	; (80092c4 <prvHeapInit+0xc0>)
 8009298:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800929a:	4b0b      	ldr	r3, [pc, #44]	; (80092c8 <prvHeapInit+0xc4>)
 800929c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092a0:	601a      	str	r2, [r3, #0]
}
 80092a2:	bf00      	nop
 80092a4:	3714      	adds	r7, #20
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr
 80092ae:	bf00      	nop
 80092b0:	000186a0 	.word	0x000186a0
 80092b4:	24001100 	.word	0x24001100
 80092b8:	240197a0 	.word	0x240197a0
 80092bc:	240197a8 	.word	0x240197a8
 80092c0:	240197b0 	.word	0x240197b0
 80092c4:	240197ac 	.word	0x240197ac
 80092c8:	240197bc 	.word	0x240197bc

080092cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80092cc:	b480      	push	{r7}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80092d4:	4b28      	ldr	r3, [pc, #160]	; (8009378 <prvInsertBlockIntoFreeList+0xac>)
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e002      	b.n	80092e0 <prvInsertBlockIntoFreeList+0x14>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d8f7      	bhi.n	80092da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	4413      	add	r3, r2
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d108      	bne.n	800930e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685a      	ldr	r2, [r3, #4]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	441a      	add	r2, r3
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	441a      	add	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d118      	bne.n	8009354 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	4b15      	ldr	r3, [pc, #84]	; (800937c <prvInsertBlockIntoFreeList+0xb0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	429a      	cmp	r2, r3
 800932c:	d00d      	beq.n	800934a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	441a      	add	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e008      	b.n	800935c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800934a:	4b0c      	ldr	r3, [pc, #48]	; (800937c <prvInsertBlockIntoFreeList+0xb0>)
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	e003      	b.n	800935c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d002      	beq.n	800936a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800936a:	bf00      	nop
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	240197a0 	.word	0x240197a0
 800937c:	240197a8 	.word	0x240197a8

08009380 <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 8009392:	f004 f809 	bl	800d3a8 <touchgfx_components_init>
  touchgfx_init();
 8009396:	f003 ffdd 	bl	800d354 <touchgfx_init>
}
 800939a:	bf00      	nop
 800939c:	bd80      	pop	{r7, pc}

0800939e <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b082      	sub	sp, #8
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80093a6:	f004 f807 	bl	800d3b8 <touchgfx_taskEntry>
}
 80093aa:	bf00      	nop
 80093ac:	3708      	adds	r7, #8
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
	...

080093b4 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
    {
 80093bc:	4a04      	ldr	r2, [pc, #16]	; (80093d0 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
    }
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4618      	mov	r0, r3
 80093c6:	370c      	adds	r7, #12
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr
 80093d0:	0801efcc 	.word	0x0801efcc

080093d4 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
    }
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7ff ffe9 	bl	80093b4 <_ZN8touchgfx12FontProviderD1Ev>
 80093e2:	2104      	movs	r1, #4
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f014 f814 	bl	801d412 <_ZdlPvj>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4618      	mov	r0, r3
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	460b      	mov	r3, r1
 80093fe:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8009400:	887b      	ldrh	r3, [r7, #2]
 8009402:	2b02      	cmp	r3, #2
 8009404:	d010      	beq.n	8009428 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8009406:	2b02      	cmp	r3, #2
 8009408:	dc13      	bgt.n	8009432 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800940e:	2b01      	cmp	r3, #1
 8009410:	d005      	beq.n	800941e <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8009412:	e00e      	b.n	8009432 <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8009414:	f002 fb32 	bl	800ba7c <_ZN17TypedTextDatabase8getFontsEv>
 8009418:	4603      	mov	r3, r0
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	e00a      	b.n	8009434 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800941e:	f002 fb2d 	bl	800ba7c <_ZN17TypedTextDatabase8getFontsEv>
 8009422:	4603      	mov	r3, r0
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	e005      	b.n	8009434 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8009428:	f002 fb28 	bl	800ba7c <_ZN17TypedTextDatabase8getFontsEv>
 800942c:	4603      	mov	r3, r0
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	e000      	b.n	8009434 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8009432:	2300      	movs	r3, #0
    }
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800943c:	b580      	push	{r7, lr}
 800943e:	b082      	sub	sp, #8
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	4a05      	ldr	r2, [pc, #20]	; (800945c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4618      	mov	r0, r3
 800944e:	f7ff ffb1 	bl	80093b4 <_ZN8touchgfx12FontProviderD1Ev>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	0801efb8 	.word	0x0801efb8

08009460 <_ZN23ApplicationFontProviderD0Ev>:
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f7ff ffe7 	bl	800943c <_ZN23ApplicationFontProviderD1Ev>
 800946e:	2104      	movs	r1, #4
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f013 ffce 	bl	801d412 <_ZdlPvj>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8009480:	b480      	push	{r7}
 8009482:	b083      	sub	sp, #12
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
    {
 8009488:	4a04      	ldr	r2, [pc, #16]	; (800949c <_ZN8touchgfx4FontD1Ev+0x1c>)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
    }
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4618      	mov	r0, r3
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	0801f464 	.word	0x0801f464

080094a0 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
    }
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff ffe9 	bl	8009480 <_ZN8touchgfx4FontD1Ev>
 80094ae:	2114      	movs	r1, #20
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f013 ffae 	bl	801d412 <_ZdlPvj>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	4618      	mov	r0, r3
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80094c0:	b590      	push	{r4, r7, lr}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	460b      	mov	r3, r1
 80094ca:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 80094cc:	887b      	ldrh	r3, [r7, #2]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 80094d2:	2300      	movs	r3, #0
 80094d4:	e010      	b.n	80094f8 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3308      	adds	r3, #8
 80094e4:	681c      	ldr	r4, [r3, #0]
 80094e6:	f107 030f 	add.w	r3, r7, #15
 80094ea:	f107 0210 	add.w	r2, r7, #16
 80094ee:	8879      	ldrh	r1, [r7, #2]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	47a0      	blx	r4
 80094f4:	6178      	str	r0, [r7, #20]
        return glyph;
 80094f6:	697b      	ldr	r3, [r7, #20]
    }
 80094f8:	4618      	mov	r0, r3
 80094fa:	371c      	adds	r7, #28
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd90      	pop	{r4, r7, pc}

08009500 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	89db      	ldrh	r3, [r3, #14]
    }
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8a1b      	ldrh	r3, [r3, #16]
    }
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The baseline position.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	88db      	ldrh	r3, [r3, #6]
    }
 800953c:	4618      	mov	r0, r3
 800953e:	370c      	adds	r7, #12
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 8009548:	b480      	push	{r7}
 800954a:	b083      	sub	sp, #12
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	889b      	ldrh	r3, [r3, #4]
    }
 8009554:	4618      	mov	r0, r3
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	7a9b      	ldrb	r3, [r3, #10]
 800956c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8009570:	b2db      	uxtb	r3, r3
    }
 8009572:	4618      	mov	r0, r3
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	7a9b      	ldrb	r3, [r3, #10]
 800958a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800958e:	b2db      	uxtb	r3, r3
    }
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	4a05      	ldr	r2, [pc, #20]	; (80095bc <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	601a      	str	r2, [r3, #0]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff ff67 	bl	8009480 <_ZN8touchgfx4FontD1Ev>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4618      	mov	r0, r3
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	0801fdbc 	.word	0x0801fdbc

080095c0 <_ZN8touchgfx9ConstFontD0Ev>:
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f7ff ffe7 	bl	800959c <_ZN8touchgfx9ConstFontD1Ev>
 80095ce:	211c      	movs	r1, #28
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f013 ff1e 	bl	801d412 <_ZdlPvj>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4618      	mov	r0, r3
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	4a05      	ldr	r2, [pc, #20]	; (8009600 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7ff ffd3 	bl	800959c <_ZN8touchgfx9ConstFontD1Ev>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4618      	mov	r0, r3
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	0801eff0 	.word	0x0801eff0

08009604 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff ffe7 	bl	80095e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009612:	212c      	movs	r1, #44	; 0x2c
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f013 fefc 	bl	801d412 <_ZdlPvj>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
    {
 800962c:	4a04      	ldr	r2, [pc, #16]	; (8009640 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
    }
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	0801efe0 	.word	0x0801efe0

08009644 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
    }
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff ffe9 	bl	8009624 <_ZN8touchgfx9TypedTextD1Ev>
 8009652:	2108      	movs	r1, #8
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f013 fedc 	bl	801d412 <_ZdlPvj>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4618      	mov	r0, r3
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 8009688:	4618      	mov	r0, r3
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af0a      	add	r7, sp, #40	; 0x28
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	4611      	mov	r1, r2
 80096a0:	461a      	mov	r2, r3
 80096a2:	460b      	mov	r3, r1
 80096a4:	80fb      	strh	r3, [r7, #6]
 80096a6:	4613      	mov	r3, r2
 80096a8:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	88b9      	ldrh	r1, [r7, #4]
 80096ae:	88fa      	ldrh	r2, [r7, #6]
 80096b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80096b4:	9308      	str	r3, [sp, #32]
 80096b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80096b8:	9307      	str	r3, [sp, #28]
 80096ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80096be:	9306      	str	r3, [sp, #24]
 80096c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096d6:	9302      	str	r3, [sp, #8]
 80096d8:	7f3b      	ldrb	r3, [r7, #28]
 80096da:	9301      	str	r3, [sp, #4]
 80096dc:	8b3b      	ldrh	r3, [r7, #24]
 80096de:	9300      	str	r3, [sp, #0]
 80096e0:	460b      	mov	r3, r1
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	f008 ffd8 	bl	8012698 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 80096e8:	4a09      	ldr	r2, [pc, #36]	; (8009710 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	601a      	str	r2, [r3, #0]
      glyphData(glyphDataInternalFlash),
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096f2:	61da      	str	r2, [r3, #28]
      kerningData(kerningList),
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096f8:	621a      	str	r2, [r3, #32]
      gsubTable(gsubData),
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096fe:	625a      	str	r2, [r3, #36]	; 0x24
      arabicTable(formsTable)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009704:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	0801eff0 	.word	0x0801eff0

08009714 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	889b      	ldrh	r3, [r3, #4]
 8009728:	0adb      	lsrs	r3, r3, #11
 800972a:	b29b      	uxth	r3, r3
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4413      	add	r3, r2
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8009746:	b480      	push	{r7}
 8009748:	b089      	sub	sp, #36	; 0x24
 800974a:	af00      	add	r7, sp, #0
 800974c:	60f8      	str	r0, [r7, #12]
 800974e:	460b      	mov	r3, r1
 8009750:	607a      	str	r2, [r7, #4]
 8009752:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7b1b      	ldrb	r3, [r3, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8009762:	2300      	movs	r3, #0
 8009764:	e031      	b.n	80097ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a1a      	ldr	r2, [r3, #32]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	7b5b      	ldrb	r3, [r3, #13]
 8009772:	021b      	lsls	r3, r3, #8
 8009774:	b21b      	sxth	r3, r3
 8009776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800977a:	b219      	sxth	r1, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	7adb      	ldrb	r3, [r3, #11]
 8009780:	b21b      	sxth	r3, r3
 8009782:	430b      	orrs	r3, r1
 8009784:	b21b      	sxth	r3, r3
 8009786:	b29b      	uxth	r3, r3
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7b1b      	ldrb	r3, [r3, #12]
 8009792:	837b      	strh	r3, [r7, #26]
 8009794:	e013      	b.n	80097be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x78>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	897a      	ldrh	r2, [r7, #10]
 800979c:	429a      	cmp	r2, r3
 800979e:	d103      	bne.n	80097a8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x62>
        {
            return kerndata->distance;
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80097a6:	e010      	b.n	80097ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x84>
        }
        if (prevChar < kerndata->unicodePrevChar)
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	897a      	ldrh	r2, [r7, #10]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d309      	bcc.n	80097c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 80097b2:	8b7b      	ldrh	r3, [r7, #26]
 80097b4:	3b01      	subs	r3, #1
 80097b6:	837b      	strh	r3, [r7, #26]
 80097b8:	69fb      	ldr	r3, [r7, #28]
 80097ba:	3304      	adds	r3, #4
 80097bc:	61fb      	str	r3, [r7, #28]
 80097be:	8b7b      	ldrh	r3, [r7, #26]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d1e8      	bne.n	8009796 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x50>
 80097c4:	e000      	b.n	80097c8 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        {
            break;
 80097c6:	bf00      	nop
        }
    }
    return 0;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3724      	adds	r7, #36	; 0x24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
	...

080097d8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80097d8:	b580      	push	{r7, lr}
 80097da:	af00      	add	r7, sp, #0
 80097dc:	4801      	ldr	r0, [pc, #4]	; (80097e4 <__tcf_0+0xc>)
 80097de:	f7ff feff 	bl	80095e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	240197c0 	.word	0x240197c0

080097e8 <_Z23getFont_verdana_10_4bppv>:
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08e      	sub	sp, #56	; 0x38
 80097ec:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80097ee:	4b21      	ldr	r3, [pc, #132]	; (8009874 <_Z23getFont_verdana_10_4bppv+0x8c>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f3bf 8f5b 	dmb	ish
 80097f6:	f003 0301 	and.w	r3, r3, #1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bf0c      	ite	eq
 80097fe:	2301      	moveq	r3, #1
 8009800:	2300      	movne	r3, #0
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	d030      	beq.n	800986a <_Z23getFont_verdana_10_4bppv+0x82>
 8009808:	481a      	ldr	r0, [pc, #104]	; (8009874 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800980a:	f013 fe04 	bl	801d416 <__cxa_guard_acquire>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf14      	ite	ne
 8009814:	2301      	movne	r3, #1
 8009816:	2300      	moveq	r3, #0
 8009818:	b2db      	uxtb	r3, r3
 800981a:	2b00      	cmp	r3, #0
 800981c:	d025      	beq.n	800986a <_Z23getFont_verdana_10_4bppv+0x82>
 800981e:	2300      	movs	r3, #0
 8009820:	930c      	str	r3, [sp, #48]	; 0x30
 8009822:	2300      	movs	r3, #0
 8009824:	930b      	str	r3, [sp, #44]	; 0x2c
 8009826:	2300      	movs	r3, #0
 8009828:	930a      	str	r3, [sp, #40]	; 0x28
 800982a:	233f      	movs	r3, #63	; 0x3f
 800982c:	9309      	str	r3, [sp, #36]	; 0x24
 800982e:	4b12      	ldr	r3, [pc, #72]	; (8009878 <_Z23getFont_verdana_10_4bppv+0x90>)
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	4b12      	ldr	r3, [pc, #72]	; (800987c <_Z23getFont_verdana_10_4bppv+0x94>)
 8009834:	9307      	str	r3, [sp, #28]
 8009836:	2300      	movs	r3, #0
 8009838:	9306      	str	r3, [sp, #24]
 800983a:	2300      	movs	r3, #0
 800983c:	9305      	str	r3, [sp, #20]
 800983e:	2301      	movs	r3, #1
 8009840:	9304      	str	r3, [sp, #16]
 8009842:	2304      	movs	r3, #4
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	2300      	movs	r3, #0
 8009848:	9302      	str	r3, [sp, #8]
 800984a:	2300      	movs	r3, #0
 800984c:	9301      	str	r3, [sp, #4]
 800984e:	230a      	movs	r3, #10
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	230a      	movs	r3, #10
 8009854:	2201      	movs	r2, #1
 8009856:	490a      	ldr	r1, [pc, #40]	; (8009880 <_Z23getFont_verdana_10_4bppv+0x98>)
 8009858:	480a      	ldr	r0, [pc, #40]	; (8009884 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800985a:	f7ff ff1b 	bl	8009694 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800985e:	480a      	ldr	r0, [pc, #40]	; (8009888 <_Z23getFont_verdana_10_4bppv+0xa0>)
 8009860:	f013 fe24 	bl	801d4ac <atexit>
 8009864:	4803      	ldr	r0, [pc, #12]	; (8009874 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8009866:	f013 fde2 	bl	801d42e <__cxa_guard_release>
    return verdana_10_4bpp;
 800986a:	4b06      	ldr	r3, [pc, #24]	; (8009884 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800986c:	4618      	mov	r0, r3
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	240197ec 	.word	0x240197ec
 8009878:	080206c8 	.word	0x080206c8
 800987c:	080206e8 	.word	0x080206e8
 8009880:	080205e4 	.word	0x080205e4
 8009884:	240197c0 	.word	0x240197c0
 8009888:	080097d9 	.word	0x080097d9

0800988c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 14, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
 8009890:	4801      	ldr	r0, [pc, #4]	; (8009898 <__tcf_0+0xc>)
 8009892:	f7ff fea5 	bl	80095e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 8009896:	bd80      	pop	{r7, pc}
 8009898:	240197f0 	.word	0x240197f0

0800989c <_Z23getFont_verdana_20_4bppv>:
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b08e      	sub	sp, #56	; 0x38
 80098a0:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 14, 20, 20, 0, 0, 4, 1, 0, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 80098a2:	4b21      	ldr	r3, [pc, #132]	; (8009928 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f3bf 8f5b 	dmb	ish
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bf0c      	ite	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	2300      	movne	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d030      	beq.n	800991e <_Z23getFont_verdana_20_4bppv+0x82>
 80098bc:	481a      	ldr	r0, [pc, #104]	; (8009928 <_Z23getFont_verdana_20_4bppv+0x8c>)
 80098be:	f013 fdaa 	bl	801d416 <__cxa_guard_acquire>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	bf14      	ite	ne
 80098c8:	2301      	movne	r3, #1
 80098ca:	2300      	moveq	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d025      	beq.n	800991e <_Z23getFont_verdana_20_4bppv+0x82>
 80098d2:	2300      	movs	r3, #0
 80098d4:	930c      	str	r3, [sp, #48]	; 0x30
 80098d6:	2300      	movs	r3, #0
 80098d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098da:	2300      	movs	r3, #0
 80098dc:	930a      	str	r3, [sp, #40]	; 0x28
 80098de:	233f      	movs	r3, #63	; 0x3f
 80098e0:	9309      	str	r3, [sp, #36]	; 0x24
 80098e2:	4b12      	ldr	r3, [pc, #72]	; (800992c <_Z23getFont_verdana_20_4bppv+0x90>)
 80098e4:	9308      	str	r3, [sp, #32]
 80098e6:	4b12      	ldr	r3, [pc, #72]	; (8009930 <_Z23getFont_verdana_20_4bppv+0x94>)
 80098e8:	9307      	str	r3, [sp, #28]
 80098ea:	2301      	movs	r3, #1
 80098ec:	9306      	str	r3, [sp, #24]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	2301      	movs	r3, #1
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	2304      	movs	r3, #4
 80098f8:	9303      	str	r3, [sp, #12]
 80098fa:	2300      	movs	r3, #0
 80098fc:	9302      	str	r3, [sp, #8]
 80098fe:	2300      	movs	r3, #0
 8009900:	9301      	str	r3, [sp, #4]
 8009902:	2314      	movs	r3, #20
 8009904:	9300      	str	r3, [sp, #0]
 8009906:	2314      	movs	r3, #20
 8009908:	220e      	movs	r2, #14
 800990a:	490a      	ldr	r1, [pc, #40]	; (8009934 <_Z23getFont_verdana_20_4bppv+0x98>)
 800990c:	480a      	ldr	r0, [pc, #40]	; (8009938 <_Z23getFont_verdana_20_4bppv+0x9c>)
 800990e:	f7ff fec1 	bl	8009694 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8009912:	480a      	ldr	r0, [pc, #40]	; (800993c <_Z23getFont_verdana_20_4bppv+0xa0>)
 8009914:	f013 fdca 	bl	801d4ac <atexit>
 8009918:	4803      	ldr	r0, [pc, #12]	; (8009928 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800991a:	f013 fd88 	bl	801d42e <__cxa_guard_release>
    return verdana_20_4bpp;
 800991e:	4b06      	ldr	r3, [pc, #24]	; (8009938 <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 8009920:	4618      	mov	r0, r3
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2401981c 	.word	0x2401981c
 800992c:	080206cc 	.word	0x080206cc
 8009930:	080206ec 	.word	0x080206ec
 8009934:	080205f4 	.word	0x080205f4
 8009938:	240197f0 	.word	0x240197f0
 800993c:	0800988d 	.word	0x0800988d

08009940 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__tcf_0+0xc>)
 8009946:	f7ff fe4b 	bl	80095e0 <_ZN8touchgfx13GeneratedFontD1Ev>
 800994a:	bd80      	pop	{r7, pc}
 800994c:	24019820 	.word	0x24019820

08009950 <_Z23getFont_verdana_40_4bppv>:
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08e      	sub	sp, #56	; 0x38
 8009954:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8009956:	4b21      	ldr	r3, [pc, #132]	; (80099dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f3bf 8f5b 	dmb	ish
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b00      	cmp	r3, #0
 8009964:	bf0c      	ite	eq
 8009966:	2301      	moveq	r3, #1
 8009968:	2300      	movne	r3, #0
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d030      	beq.n	80099d2 <_Z23getFont_verdana_40_4bppv+0x82>
 8009970:	481a      	ldr	r0, [pc, #104]	; (80099dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 8009972:	f013 fd50 	bl	801d416 <__cxa_guard_acquire>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	bf14      	ite	ne
 800997c:	2301      	movne	r3, #1
 800997e:	2300      	moveq	r3, #0
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d025      	beq.n	80099d2 <_Z23getFont_verdana_40_4bppv+0x82>
 8009986:	2300      	movs	r3, #0
 8009988:	930c      	str	r3, [sp, #48]	; 0x30
 800998a:	2300      	movs	r3, #0
 800998c:	930b      	str	r3, [sp, #44]	; 0x2c
 800998e:	2300      	movs	r3, #0
 8009990:	930a      	str	r3, [sp, #40]	; 0x28
 8009992:	233f      	movs	r3, #63	; 0x3f
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	4b12      	ldr	r3, [pc, #72]	; (80099e0 <_Z23getFont_verdana_40_4bppv+0x90>)
 8009998:	9308      	str	r3, [sp, #32]
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <_Z23getFont_verdana_40_4bppv+0x94>)
 800999c:	9307      	str	r3, [sp, #28]
 800999e:	2300      	movs	r3, #0
 80099a0:	9306      	str	r3, [sp, #24]
 80099a2:	2300      	movs	r3, #0
 80099a4:	9305      	str	r3, [sp, #20]
 80099a6:	2301      	movs	r3, #1
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	2304      	movs	r3, #4
 80099ac:	9303      	str	r3, [sp, #12]
 80099ae:	2300      	movs	r3, #0
 80099b0:	9302      	str	r3, [sp, #8]
 80099b2:	2300      	movs	r3, #0
 80099b4:	9301      	str	r3, [sp, #4]
 80099b6:	2328      	movs	r3, #40	; 0x28
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	2328      	movs	r3, #40	; 0x28
 80099bc:	2201      	movs	r2, #1
 80099be:	490a      	ldr	r1, [pc, #40]	; (80099e8 <_Z23getFont_verdana_40_4bppv+0x98>)
 80099c0:	480a      	ldr	r0, [pc, #40]	; (80099ec <_Z23getFont_verdana_40_4bppv+0x9c>)
 80099c2:	f7ff fe67 	bl	8009694 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80099c6:	480a      	ldr	r0, [pc, #40]	; (80099f0 <_Z23getFont_verdana_40_4bppv+0xa0>)
 80099c8:	f013 fd70 	bl	801d4ac <atexit>
 80099cc:	4803      	ldr	r0, [pc, #12]	; (80099dc <_Z23getFont_verdana_40_4bppv+0x8c>)
 80099ce:	f013 fd2e 	bl	801d42e <__cxa_guard_release>
    return verdana_40_4bpp;
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	2401984c 	.word	0x2401984c
 80099e0:	080206e4 	.word	0x080206e4
 80099e4:	080206f0 	.word	0x080206f0
 80099e8:	080206b8 	.word	0x080206b8
 80099ec:	24019820 	.word	0x24019820
 80099f0:	08009941 	.word	0x08009941

080099f4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a16:	bf00      	nop
 8009a18:	370c      	adds	r7, #12
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8009a22:	b480      	push	{r7}
 8009a24:	b083      	sub	sp, #12
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8009a42:	bf00      	nop
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 8009a4e:	b480      	push	{r7}
 8009a50:	b083      	sub	sp, #12
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8009a66:	b480      	push	{r7}
 8009a68:	b083      	sub	sp, #12
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
    {
    }
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 8009a7a:	b480      	push	{r7}
 8009a7c:	b083      	sub	sp, #12
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
    {
    }
 8009a82:	bf00      	nop
 8009a84:	370c      	adds	r7, #12
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
	...

08009a90 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
    {
 8009a98:	4a04      	ldr	r2, [pc, #16]	; (8009aac <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	601a      	str	r2, [r3, #0]
    }
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr
 8009aac:	0801f170 	.word	0x0801f170

08009ab0 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
    }
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ffe9 	bl	8009a90 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009abe:	2104      	movs	r1, #4
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f013 fca6 	bl	801d412 <_ZdlPvj>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
    {
    }
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8009b0e:	6810      	ldr	r0, [r2, #0]
 8009b10:	6851      	ldr	r1, [r2, #4]
 8009b12:	c303      	stmia	r3!, {r0, r1}
    }
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f007 fcb2 	bl	8011496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 8009b32:	bf00      	nop
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
    {
 8009b44:	4a04      	ldr	r2, [pc, #16]	; (8009b58 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	601a      	str	r2, [r3, #0]
    }
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	0801f158 	.word	0x0801f158

08009b5c <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
    }
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ffe9 	bl	8009b3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8009b6a:	2104      	movs	r1, #4
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f013 fc50 	bl	801d412 <_ZdlPvj>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
    {
        return instance;
 8009b80:	4b03      	ldr	r3, [pc, #12]	; (8009b90 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8009b82:	681b      	ldr	r3, [r3, #0]
    }
 8009b84:	4618      	mov	r0, r3
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	2401aa3c 	.word	0x2401aa3c

08009b94 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8009b98:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d008      	beq.n	8009bb6 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8009ba4:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 8009bae:	4b06      	ldr	r3, [pc, #24]	; (8009bc8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bb4:	e002      	b.n	8009bbc <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 8009bb6:	4b04      	ldr	r3, [pc, #16]	; (8009bc8 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689b      	ldr	r3, [r3, #8]
    }
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	2401aa3c 	.word	0x2401aa3c

08009bcc <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8009bd4:	4a07      	ldr	r2, [pc, #28]	; (8009bf4 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	721a      	strb	r2, [r3, #8]
    {
    }
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	0801f134 	.word	0x0801f134

08009bf8 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
    {
 8009c00:	4a04      	ldr	r2, [pc, #16]	; (8009c14 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	601a      	str	r2, [r3, #0]
    }
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4618      	mov	r0, r3
 8009c0a:	370c      	adds	r7, #12
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	0801f134 	.word	0x0801f134

08009c18 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
    }
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff ffe9 	bl	8009bf8 <_ZN8touchgfx10TransitionD1Ev>
 8009c26:	210c      	movs	r1, #12
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f013 fbf2 	bl	801d412 <_ZdlPvj>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4618      	mov	r0, r3
 8009c32:	3708      	adds	r7, #8
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
    {
    }
 8009c40:	bf00      	nop
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
    {
    }
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
    {
    }
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8009c7c:	f007 fbe6 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 8009c80:	4603      	mov	r3, r0
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	323c      	adds	r2, #60	; 0x3c
 8009c86:	6812      	ldr	r2, [r2, #0]
 8009c88:	4618      	mov	r0, r3
 8009c8a:	4790      	blx	r2
    }
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
    }
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	4a05      	ldr	r2, [pc, #20]	; (8009cd0 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	601a      	str	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff fee5 	bl	8009a90 <_ZN8touchgfx15UIEventListenerD1Ev>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	0801fd00 	.word	0x0801fd00

08009cd4 <_ZN8touchgfx11ApplicationD0Ev>:
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f7ff ffe7 	bl	8009cb0 <_ZN8touchgfx11ApplicationD1Ev>
 8009ce2:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f013 fb93 	bl	801d412 <_ZdlPvj>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f007 fc68 	bl	80115d8 <_ZN8touchgfx11ApplicationC1Ev>
 8009d08:	4a09      	ldr	r2, [pc, #36]	; (8009d30 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	601a      	str	r2, [r3, #0]
        : currentPresenter(0),
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
          pendingScreenTransitionCallback(0)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	4a04      	ldr	r2, [pc, #16]	; (8009d34 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8009d22:	6013      	str	r3, [r2, #0]
    }
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4618      	mov	r0, r3
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	0801f0e0 	.word	0x0801f0e0
 8009d34:	2401aa88 	.word	0x2401aa88

08009d38 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f804 	bl	8009d4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b082      	sub	sp, #8
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00f      	beq.n	8009d80 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	330c      	adds	r3, #12
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4610      	mov	r0, r2
 8009d74:	4798      	blx	r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d001      	beq.n	8009d80 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e000      	b.n	8009d82 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8009d80:	2300      	movs	r3, #0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00e      	beq.n	8009da4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8009dac:	b480      	push	{r7}
 8009dae:	b083      	sub	sp, #12
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	601a      	str	r2, [r3, #0]
    }
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	4a05      	ldr	r2, [pc, #20]	; (8009de8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	601a      	str	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff ff69 	bl	8009cb0 <_ZN8touchgfx11ApplicationD1Ev>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	0801f0e0 	.word	0x0801f0e0

08009dec <_ZN8touchgfx14MVPApplicationD0Ev>:
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ffe7 	bl	8009dc8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009dfa:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f013 fb07 	bl	801d412 <_ZdlPvj>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
	...

08009e10 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b082      	sub	sp, #8
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	4a08      	ldr	r2, [pc, #32]	; (8009e3c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	601a      	str	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 facd 	bl	800a3c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff ffcb 	bl	8009dc8 <_ZN8touchgfx14MVPApplicationD1Ev>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4618      	mov	r0, r3
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	0801f074 	.word	0x0801f074

08009e40 <_ZN23FrontendApplicationBaseD0Ev>:
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff ffe1 	bl	8009e10 <_ZN23FrontendApplicationBaseD1Ev>
 8009e4e:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f013 fadd 	bl	801d412 <_ZdlPvj>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3708      	adds	r7, #8
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
    {
        gotoscreenScreenNoTransition();
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f882 	bl	8009f74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	721a      	strb	r2, [r3, #8]
    }
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	605a      	str	r2, [r3, #4]
    }
 8009ea2:	bf00      	nop
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr
	...

08009eb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f7ff ff1a 	bl	8009cf8 <_ZN8touchgfx14MVPApplicationC1Ev>
 8009ec4:	4a16      	ldr	r2, [pc, #88]	; (8009f20 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	601a      	str	r2, [r3, #0]
      transitionCallback(),
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 f8a5 	bl	800a020 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
      frontendHeap(heap),
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
      model(m)
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8009ee6:	f7ff fe49 	bl	8009b7c <_ZN8touchgfx3HAL11getInstanceEv>
 8009eea:	4603      	mov	r3, r0
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	3208      	adds	r2, #8
 8009ef0:	6812      	ldr	r2, [r2, #0]
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 8009ef8:	2000      	movs	r0, #0
 8009efa:	f001 fd47 	bl	800b98c <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8009efe:	f7ff fe49 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4618      	mov	r0, r3
 8009f06:	f00e f9a4 	bl	8018252 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8009f0a:	f7ff fe43 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	4618      	mov	r0, r3
 8009f12:	f00e fa15 	bl	8018340 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
}
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	0801f074 	.word	0x0801f074

08009f24 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4618      	mov	r0, r3
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	683a      	ldr	r2, [r7, #0]
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7ff ffe9 	bl	8009f24 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	605a      	str	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	3308      	adds	r3, #8
 8009f60:	3208      	adds	r2, #8
 8009f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f66:	e883 0003 	stmia.w	r3, {r0, r1}
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>:
 */

// screen

void FrontendApplicationBase::gotoscreenScreenNoTransition()
{
 8009f74:	b590      	push	{r4, r7, lr}
 8009f76:	b089      	sub	sp, #36	; 0x24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoscreenScreenNoTransitionImpl);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 8009f82:	4b10      	ldr	r3, [pc, #64]	; (8009fc4 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv+0x50>)
 8009f84:	61bb      	str	r3, [r7, #24]
 8009f86:	2300      	movs	r3, #0
 8009f88:	61fb      	str	r3, [r7, #28]
 8009f8a:	f107 0008 	add.w	r0, r7, #8
 8009f8e:	f107 0318 	add.w	r3, r7, #24
 8009f92:	cb0c      	ldmia	r3, {r2, r3}
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	f000 f85f 	bl	800a058 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8009f9a:	f107 0308 	add.w	r3, r7, #8
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f7ff ffcb 	bl	8009f3c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8009fa6:	f107 0308 	add.w	r3, r7, #8
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 fa0a 	bl	800a3c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 8009fbc:	bf00      	nop
 8009fbe:	3724      	adds	r7, #36	; 0x24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd90      	pop	{r4, r7, pc}
 8009fc4:	08009fc9 	.word	0x08009fc9

08009fc8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoscreenScreenNoTransitionImpl()
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af02      	add	r7, sp, #8
 8009fce:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<screenView, screenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8009fdc:	461a      	mov	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	4b04      	ldr	r3, [pc, #16]	; (8009ff8 <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x30>)
 8009fe8:	4804      	ldr	r0, [pc, #16]	; (8009ffc <_ZN23FrontendApplicationBase32gotoscreenScreenNoTransitionImplEv+0x34>)
 8009fea:	f000 f867 	bl	800a0bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2401aa7c 	.word	0x2401aa7c
 8009ffc:	2401aa78 	.word	0x2401aa78

0800a000 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	4a04      	ldr	r2, [pc, #16]	; (800a01c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4618      	mov	r0, r3
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	0801f158 	.word	0x0801f158

0800a020 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7ff ffe8 	bl	800a000 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a030:	4a08      	ldr	r2, [pc, #32]	; (800a054 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	605a      	str	r2, [r3, #4]
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	609a      	str	r2, [r3, #8]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	60da      	str	r2, [r3, #12]
    {
    }
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	0801f0c8 	.word	0x0801f0c8

0800a058 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4639      	mov	r1, r7
 800a064:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7ff ffc8 	bl	800a000 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800a070:	4a08      	ldr	r2, [pc, #32]	; (800a094 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	605a      	str	r2, [r3, #4]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	3308      	adds	r3, #8
 800a080:	463a      	mov	r2, r7
 800a082:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a086:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	4618      	mov	r0, r3
 800a08e:	3710      	adds	r7, #16
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	0801f0c8 	.word	0x0801f0c8

0800a098 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff fd92 	bl	8009bcc <_ZN8touchgfx10TransitionC1Ev>
 800a0a8:	4a03      	ldr	r2, [pc, #12]	; (800a0b8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	0801f050 	.word	0x0801f050

0800a0bc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800a0bc:	b590      	push	{r4, r7, lr}
 800a0be:	b08f      	sub	sp, #60	; 0x3c
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	60f8      	str	r0, [r7, #12]
 800a0c4:	60b9      	str	r1, [r7, #8]
 800a0c6:	607a      	str	r2, [r7, #4]
 800a0c8:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	3320      	adds	r3, #32
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4610      	mov	r0, r2
 800a0da:	4798      	blx	r3
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f5b3 7fc2 	cmp.w	r3, #388	; 0x184
 800a0e2:	d205      	bcs.n	800a0f0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 800a0e4:	4b7d      	ldr	r3, [pc, #500]	; (800a2dc <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800a0e6:	4a7e      	ldr	r2, [pc, #504]	; (800a2e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a0e8:	21a3      	movs	r1, #163	; 0xa3
 800a0ea:	487e      	ldr	r0, [pc, #504]	; (800a2e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a0ec:	f013 f9c0 	bl	801d470 <__assert_func>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3320      	adds	r3, #32
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4610      	mov	r0, r2
 800a100:	4798      	blx	r3
 800a102:	4603      	mov	r3, r0
 800a104:	2b0f      	cmp	r3, #15
 800a106:	d805      	bhi.n	800a114 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800a108:	4b77      	ldr	r3, [pc, #476]	; (800a2e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800a10a:	4a75      	ldr	r2, [pc, #468]	; (800a2e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a10c:	21a4      	movs	r1, #164	; 0xa4
 800a10e:	4875      	ldr	r0, [pc, #468]	; (800a2e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a110:	f013 f9ae 	bl	801d470 <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68da      	ldr	r2, [r3, #12]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	3320      	adds	r3, #32
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4610      	mov	r0, r2
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	2b0b      	cmp	r3, #11
 800a12a:	d805      	bhi.n	800a138 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7c>
 800a12c:	4b6f      	ldr	r3, [pc, #444]	; (800a2ec <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800a12e:	4a6c      	ldr	r2, [pc, #432]	; (800a2e0 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800a130:	21a5      	movs	r1, #165	; 0xa5
 800a132:	486c      	ldr	r0, [pc, #432]	; (800a2e4 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800a134:	f013 f99c 	bl	801d470 <__assert_func>
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	627b      	str	r3, [r7, #36]	; 0x24
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800a144:	f007 f982 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 800a148:	4603      	mov	r3, r0
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff fce8 	bl	8009b20 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800a150:	6a3b      	ldr	r3, [r7, #32]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d008      	beq.n	800a16a <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xae>
        (*currentTrans)->tearDown();
 800a158:	6a3b      	ldr	r3, [r7, #32]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	6a3b      	ldr	r3, [r7, #32]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	330c      	adds	r3, #12
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4610      	mov	r0, r2
 800a168:	4798      	blx	r3
    if (*currentTrans)
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xc6>
        (*currentTrans)->~Transition();
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4610      	mov	r0, r2
 800a180:	4798      	blx	r3
    if (*currentScreen)
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d008      	beq.n	800a19c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
        (*currentScreen)->tearDownScreen();
 800a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	3314      	adds	r3, #20
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4610      	mov	r0, r2
 800a19a:	4798      	blx	r3
    if (*currentPresenter)
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d008      	beq.n	800a1b6 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfa>
        (*currentPresenter)->deactivate();
 800a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3304      	adds	r3, #4
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4798      	blx	r3
    if (*currentScreen)
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d007      	beq.n	800a1ce <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
        (*currentScreen)->~Screen();
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	4798      	blx	r3
    if (*currentPresenter)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
        (*currentPresenter)->~Presenter();
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4610      	mov	r0, r2
 800a1e6:	4798      	blx	r3
}
 800a1e8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 f87d 	bl	800a2f0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	200c      	movs	r0, #12
 800a1fc:	f7ff fbfa 	bl	80099f4 <_ZnwjPv>
 800a200:	4604      	mov	r4, r0
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff ff48 	bl	800a098 <_ZN8touchgfx12NoTransitionC1Ev>
 800a208:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	2100      	movs	r1, #0
 800a210:	4618      	mov	r0, r3
 800a212:	f000 f880 	bl	800a316 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>
 800a216:	4603      	mov	r3, r0
 800a218:	4619      	mov	r1, r3
 800a21a:	f44f 70c2 	mov.w	r0, #388	; 0x184
 800a21e:	f7ff fbe9 	bl	80099f4 <_ZnwjPv>
 800a222:	4604      	mov	r4, r0
 800a224:	4620      	mov	r0, r4
 800a226:	f001 fdc5 	bl	800bdb4 <_ZN10screenViewC1Ev>
 800a22a:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f000 f882 	bl	800a33c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>
 800a238:	4603      	mov	r3, r0
 800a23a:	4619      	mov	r1, r3
 800a23c:	2010      	movs	r0, #16
 800a23e:	f7ff fbd9 	bl	80099f4 <_ZnwjPv>
 800a242:	4604      	mov	r4, r0
 800a244:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a246:	4620      	mov	r0, r4
 800a248:	f001 fd5c 	bl	800bd04 <_ZN15screenPresenterC1ER10screenView>
 800a24c:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a252:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a258:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25e:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b0>
 800a266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a268:	3304      	adds	r3, #4
 800a26a:	e000      	b.n	800a26e <_ZN8touchgfx14makeTransitionI10screenView15screenPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800a26c:	2300      	movs	r3, #0
 800a26e:	4619      	mov	r1, r3
 800a270:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a272:	f7ff fd9b 	bl	8009dac <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	3304      	adds	r3, #4
 800a27a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a27c:	4618      	mov	r0, r3
 800a27e:	f7ff fe08 	bl	8009e92 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a286:	4618      	mov	r0, r3
 800a288:	f000 f86b 	bl	800a362 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28e:	61fb      	str	r3, [r7, #28]
 800a290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a292:	61bb      	str	r3, [r7, #24]
 800a294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a296:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	330c      	adds	r3, #12
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69f8      	ldr	r0, [r7, #28]
 800a2a2:	4798      	blx	r3
    newPresenter->activate();
 800a2a4:	69bb      	ldr	r3, [r7, #24]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	69b8      	ldr	r0, [r7, #24]
 800a2ac:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800a2ae:	6979      	ldr	r1, [r7, #20]
 800a2b0:	69f8      	ldr	r0, [r7, #28]
 800a2b2:	f008 fd8f 	bl	8012dd4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3310      	adds	r3, #16
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	6978      	ldr	r0, [r7, #20]
 800a2c0:	4798      	blx	r3
    newTransition->invalidate();
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	3314      	adds	r3, #20
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6978      	ldr	r0, [r7, #20]
 800a2cc:	4798      	blx	r3
}
 800a2ce:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	373c      	adds	r7, #60	; 0x3c
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd90      	pop	{r4, r7, pc}
 800a2da:	bf00      	nop
 800a2dc:	0801e5b8 	.word	0x0801e5b8
 800a2e0:	0801e648 	.word	0x0801e648
 800a2e4:	0801e74c 	.word	0x0801e74c
 800a2e8:	0801e790 	.word	0x0801e790
 800a2ec:	0801e834 	.word	0x0801e834

0800a2f0 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3324      	adds	r3, #36	; 0x24
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	887a      	ldrh	r2, [r7, #2]
 800a306:	4611      	mov	r1, r2
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	4798      	blx	r3
 800a30c:	4603      	mov	r3, r0
    }
 800a30e:	4618      	mov	r0, r3
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <_ZN8touchgfx17AbstractPartition2atI10screenViewEERT_t>:
    T& at(const uint16_t index)
 800a316:	b580      	push	{r7, lr}
 800a318:	b082      	sub	sp, #8
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	460b      	mov	r3, r1
 800a320:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	3324      	adds	r3, #36	; 0x24
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	887a      	ldrh	r2, [r7, #2]
 800a32c:	4611      	mov	r1, r2
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	4798      	blx	r3
 800a332:	4603      	mov	r3, r0
    }
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <_ZN8touchgfx17AbstractPartition2atI15screenPresenterEERT_t>:
    T& at(const uint16_t index)
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	460b      	mov	r3, r1
 800a346:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3324      	adds	r3, #36	; 0x24
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	887a      	ldrh	r2, [r7, #2]
 800a352:	4611      	mov	r1, r2
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	4798      	blx	r3
 800a358:	4603      	mov	r3, r0
    }
 800a35a:	4618      	mov	r0, r3
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <_ZN8touchgfx4ViewI15screenPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800a372:	bf00      	nop
 800a374:	370c      	adds	r7, #12
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
	...

0800a380 <_ZN8touchgfx12NoTransitionD1Ev>:
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	4a05      	ldr	r2, [pc, #20]	; (800a3a0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fc31 	bl	8009bf8 <_ZN8touchgfx10TransitionD1Ev>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	0801f050 	.word	0x0801f050

0800a3a4 <_ZN8touchgfx12NoTransitionD0Ev>:
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ffe7 	bl	800a380 <_ZN8touchgfx12NoTransitionD1Ev>
 800a3b2:	210c      	movs	r1, #12
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f013 f82c 	bl	801d412 <_ZdlPvj>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	4a05      	ldr	r2, [pc, #20]	; (800a3e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	601a      	str	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff fbb1 	bl	8009b3c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	0801f0c8 	.word	0x0801f0c8

0800a3e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ffe7 	bl	800a3c4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800a3f6:	2110      	movs	r1, #16
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f013 f80a 	bl	801d412 <_ZdlPvj>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	68d2      	ldr	r2, [r2, #12]
 800a418:	1052      	asrs	r2, r2, #1
 800a41a:	1899      	adds	r1, r3, r2
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	e00a      	b.n	800a444 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	68d2      	ldr	r2, [r2, #12]
 800a436:	1052      	asrs	r2, r2, #1
 800a438:	4413      	add	r3, r2
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	6892      	ldr	r2, [r2, #8]
 800a440:	4413      	add	r3, r2
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4608      	mov	r0, r1
 800a446:	4798      	blx	r3
    }
 800a448:	bf00      	nop
 800a44a:	3708      	adds	r7, #8
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}

0800a450 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d010      	beq.n	800a482 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d107      	bne.n	800a478 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d101      	bne.n	800a478 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800a474:	2301      	movs	r3, #1
 800a476:	e000      	b.n	800a47a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800a478:	2300      	movs	r3, #0
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d001      	beq.n	800a482 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800a482:	2300      	movs	r3, #0
    }
 800a484:	4618      	mov	r0, r3
 800a486:	370c      	adds	r7, #12
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
        : color(0)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	601a      	str	r2, [r3, #0]
    {
    }
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
        : color(col)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	601a      	str	r2, [r3, #0]
    {
    }
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	805a      	strh	r2, [r3, #2]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	809a      	strh	r2, [r3, #4]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	80da      	strh	r2, [r3, #6]
    {
    }
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	4608      	mov	r0, r1
 800a502:	4611      	mov	r1, r2
 800a504:	461a      	mov	r2, r3
 800a506:	4603      	mov	r3, r0
 800a508:	817b      	strh	r3, [r7, #10]
 800a50a:	460b      	mov	r3, r1
 800a50c:	813b      	strh	r3, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	897a      	ldrh	r2, [r7, #10]
 800a516:	801a      	strh	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	893a      	ldrh	r2, [r7, #8]
 800a51c:	805a      	strh	r2, [r3, #2]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	88fa      	ldrh	r2, [r7, #6]
 800a522:	809a      	strh	r2, [r3, #4]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8b3a      	ldrh	r2, [r7, #24]
 800a528:	80da      	strh	r2, [r3, #6]
    {
    }
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4618      	mov	r0, r3
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	887a      	ldrh	r2, [r7, #2]
 800a548:	801a      	strh	r2, [r3, #0]
    {
    }
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
    /**
     * Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
    {
        return clickEventType;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	791b      	ldrb	r3, [r3, #4]
    }
 800a564:	4618      	mov	r0, r3
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800a578:	4a14      	ldr	r2, [pc, #80]	; (800a5cc <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	601a      	str	r2, [r3, #0]
        : rect(),
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	3304      	adds	r3, #4
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff ffa1 	bl	800a4ca <_ZN8touchgfx4RectC1Ev>
          cachedVisibleRect(),
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	330c      	adds	r3, #12
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff ff9c 	bl	800a4ca <_ZN8touchgfx4RectC1Ev>
          parent(0),
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	615a      	str	r2, [r3, #20]
          nextSibling(0),
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	619a      	str	r2, [r3, #24]
          nextDrawChainElement(0),
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	61da      	str	r2, [r3, #28]
          cachedAbsX(0),
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	841a      	strh	r2, [r3, #32]
          cachedAbsY(0),
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	845a      	strh	r2, [r3, #34]	; 0x22
          touchable(false),
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          visible(true)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0801fd54 	.word	0x0801fd54

0800a5d0 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
    {
 800a5d8:	4a04      	ldr	r2, [pc, #16]	; (800a5ec <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	601a      	str	r2, [r3, #0]
    }
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr
 800a5ec:	0801fd54 	.word	0x0801fd54

0800a5f0 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
    }
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff ffe9 	bl	800a5d0 <_ZN8touchgfx8DrawableD1Ev>
 800a5fe:	2128      	movs	r1, #40	; 0x28
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f012 ff06 	bl	801d412 <_ZdlPvj>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d005      	beq.n	800a62e <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3314      	adds	r3, #20
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	4798      	blx	r3
        }
    }
 800a62e:	bf00      	nop
 800a630:	3708      	adds	r7, #8
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}

0800a636 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800a63e:	2300      	movs	r3, #0
    }
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	4608      	mov	r0, r1
 800a656:	4611      	mov	r1, r2
 800a658:	461a      	mov	r2, r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	817b      	strh	r3, [r7, #10]
 800a65e:	460b      	mov	r3, r1
 800a660:	813b      	strh	r3, [r7, #8]
 800a662:	4613      	mov	r3, r2
 800a664:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800a666:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800a66a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a66e:	4619      	mov	r1, r3
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 f82a 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800a676:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800a67a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a67e:	4619      	mov	r1, r3
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f87e 	bl	800a782 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800a68e:	b480      	push	{r7}
 800a690:	b083      	sub	sp, #12
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	887a      	ldrh	r2, [r7, #2]
 800a69e:	809a      	strh	r2, [r3, #4]
    }
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	460b      	mov	r3, r1
 800a6b6:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	887a      	ldrh	r2, [r7, #2]
 800a6bc:	80da      	strh	r2, [r3, #6]
    }
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	807b      	strh	r3, [r7, #2]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3330      	adds	r3, #48	; 0x30
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	4798      	blx	r3
        setY(y);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3334      	adds	r3, #52	; 0x34
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	4798      	blx	r3
    }
 800a6fe:	bf00      	nop
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}

0800a706 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	460b      	mov	r3, r1
 800a710:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	887a      	ldrh	r2, [r7, #2]
 800a716:	811a      	strh	r2, [r3, #8]
    }
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	887a      	ldrh	r2, [r7, #2]
 800a734:	815a      	strh	r2, [r3, #10]
    }
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800a742:	b480      	push	{r7}
 800a744:	b083      	sub	sp, #12
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
    {
    }
 800a74a:	bf00      	nop
 800a74c:	370c      	adds	r7, #12
 800a74e:	46bd      	mov	sp, r7
 800a750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a754:	4770      	bx	lr

0800a756 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800a756:	b480      	push	{r7}
 800a758:	b083      	sub	sp, #12
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
 800a78a:	460b      	mov	r3, r1
 800a78c:	807b      	strh	r3, [r7, #2]
 800a78e:	4613      	mov	r3, r2
 800a790:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3338      	adds	r3, #56	; 0x38
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800a79e:	4611      	mov	r1, r2
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	4798      	blx	r3
        setHeight(height);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	333c      	adds	r3, #60	; 0x3c
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f9b7 2000 	ldrsh.w	r2, [r7]
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	4798      	blx	r3
    }
 800a7b6:	bf00      	nop
 800a7b8:	3708      	adds	r7, #8
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}

0800a7be <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
 800a7c6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
    {
    }
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800a816:	4618      	mov	r0, r3
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	807b      	strh	r3, [r7, #2]
 800a848:	4613      	mov	r3, r2
 800a84a:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3354      	adds	r3, #84	; 0x54
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	8879      	ldrh	r1, [r7, #2]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800a85c:	b292      	uxth	r2, r2
 800a85e:	1a8a      	subs	r2, r1, r2
 800a860:	b292      	uxth	r2, r2
 800a862:	b210      	sxth	r0, r2
 800a864:	8839      	ldrh	r1, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800a86c:	b292      	uxth	r2, r2
 800a86e:	1a8a      	subs	r2, r1, r2
 800a870:	b292      	uxth	r2, r2
 800a872:	b212      	sxth	r2, r2
 800a874:	4601      	mov	r1, r0
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
    }
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800a882:	b480      	push	{r7}
 800a884:	b083      	sub	sp, #12
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a890:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a898:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8a0:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800a8a2:	bf00      	nop
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	60b9      	str	r1, [r7, #8]
 800a8b8:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff ffe1 	bl	800a882 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	601a      	str	r2, [r3, #0]
    }
 800a8ce:	bf00      	nop
 800a8d0:	3710      	adds	r7, #16
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
	...

0800a8d8 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7ff fe44 	bl	800a570 <_ZN8touchgfx8DrawableC1Ev>
 800a8e8:	4a05      	ldr	r2, [pc, #20]	; (800a900 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	601a      	str	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	0801f8f4 	.word	0x0801f8f4

0800a904 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800a910:	4618      	mov	r0, r3
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
    {
 800a924:	4a06      	ldr	r2, [pc, #24]	; (800a940 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	3304      	adds	r3, #4
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 f91a 	bl	800ab68 <_ZN8touchgfx9ContainerD1Ev>
    }
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	0801fe58 	.word	0x0801fe58

0800a944 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
    }
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f7ff ffe5 	bl	800a91c <_ZN8touchgfx6ScreenD1Ev>
 800a952:	213c      	movs	r1, #60	; 0x3c
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f012 fd5c 	bl	801d412 <_ZdlPvj>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4618      	mov	r0, r3
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
    {
    }
 800a96c:	bf00      	nop
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr

0800a978 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
    {
    }
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
    {
    }
 800a994:	bf00      	nop
 800a996:	370c      	adds	r7, #12
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
    {
    }
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800a9b4:	b480      	push	{r7}
 800a9b6:	b083      	sub	sp, #12
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	460b      	mov	r3, r1
 800a9be:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f003 f9cf 	bl	800dd80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	607b      	str	r3, [r7, #4]
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	817b      	strh	r3, [r7, #10]
 800a9f8:	4613      	mov	r3, r2
 800a9fa:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff ff02 	bl	800a808 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d008      	beq.n	800aa1c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff ff08 	bl	800a822 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e000      	b.n	800aa1e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	601a      	str	r2, [r3, #0]
        }
    }
 800aa28:	bf00      	nop
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff fd98 	bl	800a570 <_ZN8touchgfx8DrawableC1Ev>
 800aa40:	4a03      	ldr	r2, [pc, #12]	; (800aa50 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	0801f3d4 	.word	0x0801f3d4

0800aa54 <_ZN8touchgfx6WidgetD1Ev>:
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	4a05      	ldr	r2, [pc, #20]	; (800aa74 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7ff fdb3 	bl	800a5d0 <_ZN8touchgfx8DrawableD1Ev>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3708      	adds	r7, #8
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	0801f3d4 	.word	0x0801f3d4

0800aa78 <_ZN8touchgfx6WidgetD0Ev>:
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff ffe7 	bl	800aa54 <_ZN8touchgfx6WidgetD1Ev>
 800aa86:	2128      	movs	r1, #40	; 0x28
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f012 fcc2 	bl	801d412 <_ZdlPvj>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	2326      	movs	r3, #38	; 0x26
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	f012 fee6 	bl	801d87a <memset>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff ffbd 	bl	800aa30 <_ZN8touchgfx6WidgetC1Ev>
 800aab6:	4a09      	ldr	r2, [pc, #36]	; (800aadc <_ZN8touchgfx3BoxC1Ev+0x44>)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	22ff      	movs	r2, #255	; 0xff
 800aac0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3328      	adds	r3, #40	; 0x28
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f7ff fcee 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	0801fb6c 	.word	0x0801fb6c

0800aae0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800aae0:	b480      	push	{r7}
 800aae2:	b083      	sub	sp, #12
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800aaf0:	bf00      	nop
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <_ZN8touchgfx3Box8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	78fa      	ldrb	r2, [r7, #3]
 800ab0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 800ab10:	bf00      	nop
 800ab12:	370c      	adds	r7, #12
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr

0800ab1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4618      	mov	r0, r3
 800ab2a:	2326      	movs	r3, #38	; 0x26
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	2100      	movs	r1, #0
 800ab30:	f012 fea3 	bl	801d87a <memset>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7ff ff7a 	bl	800aa30 <_ZN8touchgfx6WidgetC1Ev>
 800ab3c:	4a09      	ldr	r2, [pc, #36]	; (800ab64 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	8812      	ldrh	r2, [r2, #0]
 800ab48:	84da      	strh	r2, [r3, #38]	; 0x26
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	22ff      	movs	r2, #255	; 0xff
 800ab4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f004 ff3c 	bl	800f9d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	0801fc3c 	.word	0x0801fc3c

0800ab68 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	4a05      	ldr	r2, [pc, #20]	; (800ab88 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	601a      	str	r2, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff fd29 	bl	800a5d0 <_ZN8touchgfx8DrawableD1Ev>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4618      	mov	r0, r3
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	0801f8f4 	.word	0x0801f8f4

0800ab8c <_ZN8touchgfx9ContainerD0Ev>:
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f7ff ffe7 	bl	800ab68 <_ZN8touchgfx9ContainerD1Ev>
 800ab9a:	212c      	movs	r1, #44	; 0x2c
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f012 fc38 	bl	801d412 <_ZdlPvj>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
 * @see ClickButtonTrigger, RepeatButtonTrigger, ToggleButtonTrigger, TouchButtonTrigger
 */
class AbstractButtonContainer : public Container
{
public:
    AbstractButtonContainer()
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
        : pressed(false), alpha(255), action(0)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff fe8e 	bl	800a8d8 <_ZN8touchgfx9ContainerC1Ev>
 800abbc:	4a0b      	ldr	r2, [pc, #44]	; (800abec <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	601a      	str	r2, [r3, #0]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22ff      	movs	r2, #255	; 0xff
 800abce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2101      	movs	r1, #1
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff fe03 	bl	800a7e8 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4618      	mov	r0, r3
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	0801f338 	.word	0x0801f338

0800abf0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @param  isPressed True if is pressed, false if not.
     *
     * @see getPressed, handlePressedUpdated
     */
    void setPressed(bool isPressed)
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	460b      	mov	r3, r1
 800abfa:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	338c      	adds	r3, #140	; 0x8c
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
    }
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @return True if it succeeds, false if it fails.
     *
     * @see setPressed
     */
    bool getPressed()
 800ac18:	b480      	push	{r7}
 800ac1a:	b083      	sub	sp, #12
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800ac26:	4618      	mov	r0, r3
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
        alpha = newAlpha;
        handleAlphaUpdated();
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
 800ac32:	b480      	push	{r7}
 800ac34:	b083      	sub	sp, #12
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 800ac40:	4618      	mov	r0, r3
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr

0800ac4c <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
    {
        if (action && action->isValid())
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00d      	beq.n	800ac78 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	330c      	adds	r3, #12
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	4798      	blx	r3
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2c>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e000      	b.n	800ac7a <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x2e>
 800ac78:	2300      	movs	r3, #0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d009      	beq.n	800ac92 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x46>
        {
            action->execute(*this);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	3308      	adds	r3, #8
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6879      	ldr	r1, [r7, #4]
 800ac8e:	4610      	mov	r0, r2
 800ac90:	4798      	blx	r3
        }
    }
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    uint8_t alpha; ///< The current alpha value. 255 denotes solid, 0 denotes completely invisible.

    GenericCallback<const AbstractButtonContainer&>* action; ///< The action to be executed

    /** Handles what should happen when the pressed state is updated. */
    virtual void handlePressedUpdated()
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
    {
    }
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:

    /** Handles what should happen when the alpha is updated. */
    virtual void handleAlphaUpdated()
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
    {
    }
 800acb6:	bf00      	nop
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
	...

0800acc4 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	4a05      	ldr	r2, [pc, #20]	; (800ace4 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4618      	mov	r0, r3
 800acd6:	f7ff febd 	bl	800aa54 <_ZN8touchgfx6WidgetD1Ev>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4618      	mov	r0, r3
 800acde:	3708      	adds	r7, #8
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	0801fc3c 	.word	0x0801fc3c

0800ace8 <_ZN8touchgfx5ImageD0Ev>:
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f7ff ffe7 	bl	800acc4 <_ZN8touchgfx5ImageD1Ev>
 800acf6:	212c      	movs	r1, #44	; 0x2c
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f012 fb8a 	bl	801d412 <_ZdlPvj>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	4a05      	ldr	r2, [pc, #20]	; (800ad28 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	601a      	str	r2, [r3, #0]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fe9b 	bl	800aa54 <_ZN8touchgfx6WidgetD1Ev>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	0801fb6c 	.word	0x0801fb6c

0800ad2c <_ZN8touchgfx3BoxD0Ev>:
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f7ff ffe7 	bl	800ad08 <_ZN8touchgfx3BoxD1Ev>
 800ad3a:	212c      	movs	r1, #44	; 0x2c
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f012 fb68 	bl	801d412 <_ZdlPvj>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7ff fe9e 	bl	800aa98 <_ZN8touchgfx3BoxC1Ev>
 800ad5c:	4a08      	ldr	r2, [pc, #32]	; (800ad80 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	332c      	adds	r3, #44	; 0x2c
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fb9f 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4618      	mov	r0, r3
 800ad78:	3708      	adds	r7, #8
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	0801fbd4 	.word	0x0801fbd4

0800ad84 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
 800ad8c:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800ad94:	bf00      	nop
 800ad96:	370c      	adds	r7, #12
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	460b      	mov	r3, r1
 800adaa:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	887a      	ldrh	r2, [r7, #2]
 800adb0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff ff24 	bl	800ac18 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 800add4:	6838      	ldr	r0, [r7, #0]
 800add6:	f7ff fbbf 	bl	800a558 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	bf0c      	ite	eq
 800ade0:	2301      	moveq	r3, #1
 800ade2:	2300      	movne	r3, #0
 800ade4:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800ade6:	7bbb      	ldrb	r3, [r7, #14]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d005      	beq.n	800adf8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	f083 0301 	eor.w	r3, r3, #1
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d108      	bne.n	800ae0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	f083 0301 	eor.w	r3, r3, #1
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00f      	beq.n	800ae24 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00c      	beq.n	800ae24 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	7bba      	ldrb	r2, [r7, #14]
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff feed 	bl	800abf0 <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3314      	adds	r3, #20
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4610      	mov	r0, r2
 800ae22:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d007      	beq.n	800ae3a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800ae2a:	6838      	ldr	r0, [r7, #0]
 800ae2c:	f7ff fb94 	bl	800a558 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d101      	bne.n	800ae3a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7c>
 800ae36:	2301      	movs	r3, #1
 800ae38:	e000      	b.n	800ae3c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7e>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d006      	beq.n	800ae4e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x90>
        {
            executeAction();
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	3388      	adds	r3, #136	; 0x88
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	4798      	blx	r3
        }
    }
 800ae4e:	bf00      	nop
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
class AbstractButtonContainer : public Container
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	4a05      	ldr	r2, [pc, #20]	; (800ae78 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff fe7d 	bl	800ab68 <_ZN8touchgfx9ContainerD1Ev>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	0801f338 	.word	0x0801f338

0800ae7c <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f7ff ffe7 	bl	800ae58 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800ae8a:	2134      	movs	r1, #52	; 0x34
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f012 fac0 	bl	801d412 <_ZdlPvj>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800aea8:	4a06      	ldr	r2, [pc, #24]	; (800aec4 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	887a      	ldrh	r2, [r7, #2]
 800aeb2:	809a      	strh	r2, [r3, #4]
    }
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	370c      	adds	r7, #12
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	0801efe0 	.word	0x0801efe0

0800aec8 <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4618      	mov	r0, r3
 800aed4:	2326      	movs	r3, #38	; 0x26
 800aed6:	461a      	mov	r2, r3
 800aed8:	2100      	movs	r1, #0
 800aeda:	f012 fcce 	bl	801d87a <memset>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fda5 	bl	800aa30 <_ZN8touchgfx6WidgetC1Ev>
 800aee6:	4a16      	ldr	r2, [pc, #88]	; (800af40 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	601a      	str	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	3328      	adds	r3, #40	; 0x28
 800aef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff ffd1 	bl	800ae9c <_ZN8touchgfx9TypedTextC1Et>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	3330      	adds	r3, #48	; 0x30
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff fad3 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	869a      	strh	r2, [r3, #52]	; 0x34
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	22ff      	movs	r2, #255	; 0xff
 800af10:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	333c      	adds	r3, #60	; 0x3c
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f807 	bl	800af44 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	0801fadc 	.word	0x0801fadc

0800af44 <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af02      	add	r7, sp, #8
 800af4a:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f04f 33ff 	mov.w	r3, #4294967295
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	f04f 33ff 	mov.w	r3, #4294967295
 800af58:	2200      	movs	r2, #0
 800af5a:	2100      	movs	r1, #0
 800af5c:	f7ff facc 	bl	800a4f8 <_ZN8touchgfx4RectC1Essss>
              text(0)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2200      	movs	r2, #0
 800af64:	609a      	str	r2, [r3, #8]
        {
        }
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	4a08      	ldr	r2, [pc, #32]	; (800af9c <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	3328      	adds	r3, #40	; 0x28
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe fb4e 	bl	8009624 <_ZN8touchgfx9TypedTextD1Ev>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff fd62 	bl	800aa54 <_ZN8touchgfx6WidgetD1Ev>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	0801fadc 	.word	0x0801fadc

0800afa0 <_ZN8touchgfx8TextAreaD0Ev>:
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f7ff ffe1 	bl	800af70 <_ZN8touchgfx8TextAreaD1Ev>
 800afae:	2148      	movs	r1, #72	; 0x48
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f012 fa2e 	bl	801d412 <_ZdlPvj>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>:
class View : public Screen
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	4a05      	ldr	r2, [pc, #20]	; (800afe0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev+0x20>)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f7ff fca3 	bl	800a91c <_ZN8touchgfx6ScreenD1Ev>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	0801f268 	.word	0x0801f268

0800afe4 <_ZN8touchgfx4ViewI15screenPresenterED0Ev>:
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff ffe7 	bl	800afc0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
 800aff2:	2140      	movs	r1, #64	; 0x40
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f012 fa0c 	bl	801d412 <_ZdlPvj>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4618      	mov	r0, r3
 800affe:	3708      	adds	r7, #8
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <_ZN14screenViewBaseC1Ev>:
#include <gui_generated/screen_screen/screenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>
#include <texts/TextKeysAndLanguages.hpp>

screenViewBase::screenViewBase()
 800b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b008:	b09e      	sub	sp, #120	; 0x78
 800b00a:	af02      	add	r7, sp, #8
 800b00c:	6178      	str	r0, [r7, #20]
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f9ff 	bl	800b414 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>
 800b016:	4ad9      	ldr	r2, [pc, #868]	; (800b37c <_ZN14screenViewBaseC1Ev+0x378>)
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	601a      	str	r2, [r3, #0]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	3340      	adds	r3, #64	; 0x40
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fd39 	bl	800aa98 <_ZN8touchgfx3BoxC1Ev>
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b02c:	f107 0320 	add.w	r3, r7, #32
 800b030:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b034:	4618      	mov	r0, r3
 800b036:	f7ff fa7f 	bl	800a538 <_ZN8touchgfx6BitmapC1Et>
 800b03a:	f107 0320 	add.w	r3, r7, #32
 800b03e:	4619      	mov	r1, r3
 800b040:	4620      	mov	r0, r4
 800b042:	f7ff fd6b 	bl	800ab1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	3398      	adds	r3, #152	; 0x98
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 fa4e 	bl	800b4ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b056:	4618      	mov	r0, r3
 800b058:	f7ff ff36 	bl	800aec8 <_ZN8touchgfx8TextAreaC1Ev>
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 800b062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b066:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fa64 	bl	800a538 <_ZN8touchgfx6BitmapC1Et>
 800b070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b074:	4619      	mov	r1, r3
 800b076:	4620      	mov	r0, r4
 800b078:	f7ff fd50 	bl	800ab1c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
{
    __background.setPosition(0, 0, 480, 272);
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800b082:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b08c:	2200      	movs	r2, #0
 800b08e:	2100      	movs	r1, #0
 800b090:	f7ff fadc 	bl	800a64c <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800b09a:	2300      	movs	r3, #0
 800b09c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800b0ac:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800b0b0:	041b      	lsls	r3, r3, #16
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b0b8:	021b      	lsls	r3, r3, #8
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b0c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800b0ca:	4611      	mov	r1, r2
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f7ff f9ed 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800b0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f7ff fd02 	bl	800aae0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	3340      	adds	r3, #64	; 0x40
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7ff fc71 	bl	800a9cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	336c      	adds	r3, #108	; 0x6c
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7ff fae9 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_MY_BACKGROUND2_ID));
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800b0fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b102:	2101      	movs	r1, #1
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff fa17 	bl	800a538 <_ZN8touchgfx6BitmapC1Et>
 800b10a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b10e:	4619      	mov	r1, r3
 800b110:	4620      	mov	r0, r4
 800b112:	f004 fc5e 	bl	800f9d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image1);
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	336c      	adds	r3, #108	; 0x6c
 800b11c:	4619      	mov	r1, r3
 800b11e:	4610      	mov	r0, r2
 800b120:	f7ff fc54 	bl	800a9cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    flexButton2.setBoxWithBorderPosition(0, 0, 126, 33);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800b12a:	2321      	movs	r3, #33	; 0x21
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	237e      	movs	r3, #126	; 0x7e
 800b130:	2200      	movs	r2, #0
 800b132:	2100      	movs	r1, #0
 800b134:	f000 fa1a 	bl	800b56c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton2.setBorderSize(5);
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	3398      	adds	r3, #152	; 0x98
 800b13c:	2105      	movs	r1, #5
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 fa34 	bl	800b5ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton2.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800b14a:	2300      	movs	r3, #0
 800b14c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b150:	2366      	movs	r3, #102	; 0x66
 800b152:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 800b156:	2399      	movs	r3, #153	; 0x99
 800b158:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 800b15c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b160:	041b      	lsls	r3, r3, #16
 800b162:	461a      	mov	r2, r3
 800b164:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800b168:	021b      	lsls	r3, r3, #8
 800b16a:	431a      	orrs	r2, r3
 800b16c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800b170:	4313      	orrs	r3, r2
 800b172:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b176:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b17a:	4611      	mov	r1, r2
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff f995 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800b182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b184:	461d      	mov	r5, r3
 800b186:	2300      	movs	r3, #0
 800b188:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 800b18c:	2399      	movs	r3, #153	; 0x99
 800b18e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 800b192:	23cc      	movs	r3, #204	; 0xcc
 800b194:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 800b198:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800b19c:	041b      	lsls	r3, r3, #16
 800b19e:	461a      	mov	r2, r3
 800b1a0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 800b1a4:	021b      	lsls	r3, r3, #8
 800b1a6:	431a      	orrs	r2, r3
 800b1a8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b1b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff f977 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800b1be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c0:	461e      	mov	r6, r3
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800b1c8:	2333      	movs	r3, #51	; 0x33
 800b1ca:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 800b1ce:	2366      	movs	r3, #102	; 0x66
 800b1d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800b1d4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800b1d8:	041b      	lsls	r3, r3, #16
 800b1da:	461a      	mov	r2, r3
 800b1dc:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800b1e0:	021b      	lsls	r3, r3, #8
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b1ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7ff f959 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800b1fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1fc:	4698      	mov	r8, r3
 800b1fe:	2333      	movs	r3, #51	; 0x33
 800b200:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 800b204:	2366      	movs	r3, #102	; 0x66
 800b206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b20a:	2399      	movs	r3, #153	; 0x99
 800b20c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 800b210:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800b214:	041b      	lsls	r3, r3, #16
 800b216:	461a      	mov	r2, r3
 800b218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b21c:	021b      	lsls	r3, r3, #8
 800b21e:	431a      	orrs	r2, r3
 800b220:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 800b224:	4313      	orrs	r3, r2
 800b226:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b22a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff f93b 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	9300      	str	r3, [sp, #0]
 800b23a:	4643      	mov	r3, r8
 800b23c:	4632      	mov	r2, r6
 800b23e:	4629      	mov	r1, r5
 800b240:	4620      	mov	r0, r4
 800b242:	f000 f9c5 	bl	800b5d0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton2.setPosition(29, 215, 126, 33);
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800b24c:	2321      	movs	r3, #33	; 0x21
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	237e      	movs	r3, #126	; 0x7e
 800b252:	22d7      	movs	r2, #215	; 0xd7
 800b254:	211d      	movs	r1, #29
 800b256:	f7ff f9f9 	bl	800a64c <_ZN8touchgfx8Drawable11setPositionEssss>
    add(flexButton2);
 800b25a:	697a      	ldr	r2, [r7, #20]
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	3398      	adds	r3, #152	; 0x98
 800b260:	4619      	mov	r1, r3
 800b262:	4610      	mov	r0, r2
 800b264:	f7ff fbb2 	bl	800a9cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    textArea1.setXY(36, 7);
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b26e:	2207      	movs	r2, #7
 800b270:	2124      	movs	r1, #36	; 0x24
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fa29 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800b27e:	23ff      	movs	r3, #255	; 0xff
 800b280:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 800b284:	23ff      	movs	r3, #255	; 0xff
 800b286:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800b28a:	23ff      	movs	r3, #255	; 0xff
 800b28c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800b290:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800b294:	041b      	lsls	r3, r3, #16
 800b296:	461a      	mov	r2, r3
 800b298:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800b29c:	021b      	lsls	r3, r3, #8
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800b2aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7ff f8fb 	bl	800a4ac <_ZN8touchgfx9colortypeC1Em>
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2b8:	667c      	str	r4, [r7, #100]	; 0x64
 800b2ba:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800b2bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2be:	69fa      	ldr	r2, [r7, #28]
 800b2c0:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800b2c2:	bf00      	nop
    textArea1.setLinespacing(0);
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b2ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
        linespace = space;
 800b2d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2d4:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 800b2d8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800b2da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3384      	adds	r3, #132	; 0x84
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800b2e4:	463a      	mov	r2, r7
 800b2e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800b2f0:	463a      	mov	r2, r7
 800b2f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800b2f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800b2f8:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_V5D1));
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f503 7488 	add.w	r4, r3, #272	; 0x110
 800b300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b304:	2101      	movs	r1, #1
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff fdc8 	bl	800ae9c <_ZN8touchgfx9TypedTextC1Et>
 800b30c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b310:	4619      	mov	r1, r3
 800b312:	4620      	mov	r0, r4
 800b314:	f004 fa7e 	bl	800f814 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800b318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe f981 	bl	8009624 <_ZN8touchgfx9TypedTextD1Ev>
    add(textArea1);
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7ff fb4d 	bl	800a9cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image2.setXY(17, 41);
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b338:	2229      	movs	r2, #41	; 0x29
 800b33a:	2111      	movs	r1, #17
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff f9c4 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_COLOURS_ID));
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f503 74ac 	add.w	r4, r3, #344	; 0x158
 800b348:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b34c:	2100      	movs	r1, #0
 800b34e:	4618      	mov	r0, r3
 800b350:	f7ff f8f2 	bl	800a538 <_ZN8touchgfx6BitmapC1Et>
 800b354:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b358:	4619      	mov	r1, r3
 800b35a:	4620      	mov	r0, r4
 800b35c:	f004 fb39 	bl	800f9d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image2);
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b368:	4619      	mov	r1, r3
 800b36a:	4610      	mov	r0, r2
 800b36c:	f7ff fb2e 	bl	800a9cc <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	4618      	mov	r0, r3
 800b374:	3770      	adds	r7, #112	; 0x70
 800b376:	46bd      	mov	sp, r7
 800b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b37c:	0801f198 	.word	0x0801f198

0800b380 <_ZN14screenViewBaseD1Ev>:

screenViewBase::~screenViewBase()
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	4a13      	ldr	r2, [pc, #76]	; (800b3d8 <_ZN14screenViewBaseD1Ev+0x58>)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800b394:	4618      	mov	r0, r3
 800b396:	f7ff fc95 	bl	800acc4 <_ZN8touchgfx5ImageD1Ev>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7ff fde5 	bl	800af70 <_ZN8touchgfx8TextAreaD1Ev>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3398      	adds	r3, #152	; 0x98
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 f960 	bl	800b670 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	336c      	adds	r3, #108	; 0x6c
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7ff fc85 	bl	800acc4 <_ZN8touchgfx5ImageD1Ev>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	3340      	adds	r3, #64	; 0x40
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff fca2 	bl	800ad08 <_ZN8touchgfx3BoxD1Ev>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f7ff fdfa 	bl	800afc0 <_ZN8touchgfx4ViewI15screenPresenterED1Ev>
{

}
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3708      	adds	r7, #8
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	0801f198 	.word	0x0801f198

0800b3dc <_ZN14screenViewBaseD0Ev>:
screenViewBase::~screenViewBase()
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
}
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f7ff ffcb 	bl	800b380 <_ZN14screenViewBaseD1Ev>
 800b3ea:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f012 f80f 	bl	801d412 <_ZdlPvj>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <_ZN14screenViewBase11setupScreenEv>:

void screenViewBase::setupScreen()
{
 800b3fe:	b480      	push	{r7}
 800b400:	b083      	sub	sp, #12
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]

}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
	...

0800b414 <_ZN8touchgfx4ViewI15screenPresenterEC1Ev>:
    View()
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4618      	mov	r0, r3
 800b420:	f007 fb2c 	bl	8012a7c <_ZN8touchgfx6ScreenC1Ev>
 800b424:	4a05      	ldr	r2, [pc, #20]	; (800b43c <_ZN8touchgfx4ViewI15screenPresenterEC1Ev+0x28>)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	601a      	str	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4618      	mov	r0, r3
 800b434:	3708      	adds	r7, #8
 800b436:	46bd      	mov	sp, r7
 800b438:	bd80      	pop	{r7, pc}
 800b43a:	bf00      	nop
 800b43c:	0801f268 	.word	0x0801f268

0800b440 <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
class ClickButtonTrigger : public AbstractButtonContainer
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fbae 	bl	800abac <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 800b450:	4a03      	ldr	r2, [pc, #12]	; (800b460 <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	0801f29c 	.word	0x0801f29c

0800b464 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	4a05      	ldr	r2, [pc, #20]	; (800b484 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fcef 	bl	800ae58 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4618      	mov	r0, r3
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	0801f29c 	.word	0x0801f29c

0800b488 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ffe7 	bl	800b464 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800b496:	2134      	movs	r1, #52	; 0x34
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f011 ffba 	bl	801d412 <_ZdlPvj>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3708      	adds	r7, #8
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	4a05      	ldr	r2, [pc, #20]	; (800b4c8 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7ff fc25 	bl	800ad08 <_ZN8touchgfx3BoxD1Ev>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	0801fbd4 	.word	0x0801fbd4

0800b4cc <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f7ff ffe7 	bl	800b4a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800b4da:	2134      	movs	r1, #52	; 0x34
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f011 ff98 	bl	801d412 <_ZdlPvj>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
 */
template <class T>
class BoxWithBorderButtonStyle : public T
{
public:
    BoxWithBorderButtonStyle()
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
        : T(), up(), down()
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	2334      	movs	r3, #52	; 0x34
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	f012 f9bc 	bl	801d87a <memset>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4618      	mov	r0, r3
 800b506:	f7ff ff9b 	bl	800b440 <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 800b50a:	4a17      	ldr	r2, [pc, #92]	; (800b568 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x7c>)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3334      	adds	r3, #52	; 0x34
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff fc19 	bl	800ad4c <_ZN8touchgfx13BoxWithBorderC1Ev>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3368      	adds	r3, #104	; 0x68
 800b51e:	4618      	mov	r0, r3
 800b520:	f7fe ffb6 	bl	800a490 <_ZN8touchgfx9colortypeC1Ev>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	336c      	adds	r3, #108	; 0x6c
 800b528:	4618      	mov	r0, r3
 800b52a:	f7fe ffb1 	bl	800a490 <_ZN8touchgfx9colortypeC1Ev>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3370      	adds	r3, #112	; 0x70
 800b532:	4618      	mov	r0, r3
 800b534:	f7fe ffac 	bl	800a490 <_ZN8touchgfx9colortypeC1Ev>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	3374      	adds	r3, #116	; 0x74
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7fe ffa7 	bl	800a490 <_ZN8touchgfx9colortypeC1Ev>
    {
        borderBox.setXY(0, 0);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	3334      	adds	r3, #52	; 0x34
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff f8bd 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	3334      	adds	r3, #52	; 0x34
 800b556:	4619      	mov	r1, r3
 800b558:	4610      	mov	r0, r2
 800b55a:	f002 fc11 	bl	800dd80 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	0801f1cc 	.word	0x0801f1cc

0800b56c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param  width  The width of this BoxWithBorderButtonStyle.
     * @param  height The height of this BoxWithBorderButtonStyle.
     *
     * @note Changing this does not automatically yield a redraw.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800b56c:	b590      	push	{r4, r7, lr}
 800b56e:	b087      	sub	sp, #28
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	4608      	mov	r0, r1
 800b576:	4611      	mov	r1, r2
 800b578:	461a      	mov	r2, r3
 800b57a:	4603      	mov	r3, r0
 800b57c:	817b      	strh	r3, [r7, #10]
 800b57e:	460b      	mov	r3, r1
 800b580:	813b      	strh	r3, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800b58c:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 800b590:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b594:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800b598:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b59c:	9300      	str	r3, [sp, #0]
 800b59e:	4623      	mov	r3, r4
 800b5a0:	f7ff f854 	bl	800a64c <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 800b5a4:	bf00      	nop
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd90      	pop	{r4, r7, pc}

0800b5ac <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
    /**
     * Sets border size.
     *
     * @param  size The size.
     */
    void setBorderSize(uint8_t size)
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	3334      	adds	r3, #52	; 0x34
 800b5bc:	78fa      	ldrb	r2, [r7, #3]
 800b5be:	b292      	uxth	r2, r2
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7ff fbec 	bl	800ada0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>
    }
 800b5c8:	bf00      	nop
 800b5ca:	3708      	adds	r7, #8
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}

0800b5d0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	68ba      	ldr	r2, [r7, #8]
 800b5e2:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	69ba      	ldr	r2, [r7, #24]
 800b5f4:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	338c      	adds	r3, #140	; 0x8c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	4798      	blx	r3
    }
 800b602:	bf00      	nop
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype down;          ///< The down
    colortype borderUp;      ///< The border up
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 800b60a:	b590      	push	{r4, r7, lr}
 800b60c:	b083      	sub	sp, #12
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7ff fafc 	bl	800ac18 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	336c      	adds	r3, #108	; 0x6c
 800b62a:	e001      	b.n	800b630 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3368      	adds	r3, #104	; 0x68
 800b630:	6819      	ldr	r1, [r3, #0]
 800b632:	4620      	mov	r0, r4
 800b634:	f7ff fa54 	bl	800aae0 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fae9 	bl	800ac18 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d002      	beq.n	800b652 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	3374      	adds	r3, #116	; 0x74
 800b650:	e001      	b.n	800b656 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3370      	adds	r3, #112	; 0x70
 800b656:	6819      	ldr	r1, [r3, #0]
 800b658:	4620      	mov	r0, r4
 800b65a:	f7ff fb93 	bl	800ad84 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff fb1a 	bl	800ac9a <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd90      	pop	{r4, r7, pc}
	...

0800b670 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	4a08      	ldr	r2, [pc, #32]	; (800b69c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	3334      	adds	r3, #52	; 0x34
 800b682:	4618      	mov	r0, r3
 800b684:	f7ff ff10 	bl	800b4a8 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f7ff feea 	bl	800b464 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	4618      	mov	r0, r3
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	0801f1cc 	.word	0x0801f1cc

0800b6a0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f7ff ffe1 	bl	800b670 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 800b6ae:	2178      	movs	r1, #120	; 0x78
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f011 feae 	bl	801d412 <_ZdlPvj>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:

    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
 800b6c0:	b590      	push	{r4, r7, lr}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f103 0434 	add.w	r4, r3, #52	; 0x34
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff faae 	bl	800ac32 <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	4619      	mov	r1, r3
 800b6da:	4620      	mov	r0, r4
 800b6dc:	f7ff fa0e 	bl	800aafc <_ZN8touchgfx3Box8setAlphaEh>
        T::handleAlphaUpdated();
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7ff fae3 	bl	800acae <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd90      	pop	{r4, r7, pc}

0800b6f0 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	af00      	add	r7, sp, #0
    return bitmap_database;
 800b6f4:	4b02      	ldr	r3, [pc, #8]	; (800b700 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	0801f434 	.word	0x0801f434

0800b704 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 800b708:	2302      	movs	r3, #2
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr

0800b714 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800b714:	b480      	push	{r7}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	460b      	mov	r3, r1
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800b722:	2300      	movs	r3, #0
    }
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b738:	2300      	movs	r3, #0
    }
 800b73a:	4618      	mov	r0, r3
 800b73c:	370c      	adds	r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr

0800b746 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800b746:	b480      	push	{r7}
 800b748:	b083      	sub	sp, #12
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800b74e:	2300      	movs	r3, #0
    }
 800b750:	4618      	mov	r0, r3
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr

0800b75c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800b75c:	b480      	push	{r7}
 800b75e:	b085      	sub	sp, #20
 800b760:	af00      	add	r7, sp, #0
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	4613      	mov	r3, r2
 800b768:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800b76a:	4a07      	ldr	r2, [pc, #28]	; (800b788 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6013      	str	r3, [r2, #0]
        fonts = f;
 800b770:	4a06      	ldr	r2, [pc, #24]	; (800b78c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800b776:	4a06      	ldr	r2, [pc, #24]	; (800b790 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800b778:	88fb      	ldrh	r3, [r7, #6]
 800b77a:	8013      	strh	r3, [r2, #0]
    }
 800b77c:	bf00      	nop
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr
 800b788:	2401aa8c 	.word	0x2401aa8c
 800b78c:	2401aa94 	.word	0x2401aa94
 800b790:	2401aa90 	.word	0x2401aa90

0800b794 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800b794:	b40e      	push	{r1, r2, r3}
 800b796:	b580      	push	{r7, lr}
 800b798:	b085      	sub	sp, #20
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800b79e:	f107 0320 	add.w	r3, r7, #32
 800b7a2:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	69fa      	ldr	r2, [r7, #28]
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f006 fd9c 	bl	80122e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800b7b4:	89fb      	ldrh	r3, [r7, #14]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7c0:	b003      	add	sp, #12
 800b7c2:	4770      	bx	lr

0800b7c4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800b7c4:	b40c      	push	{r2, r3}
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800b7d2:	f107 031c 	add.w	r3, r7, #28
 800b7d6:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800b7d8:	78f9      	ldrb	r1, [r7, #3]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f006 fd82 	bl	80122e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800b7e8:	89fb      	ldrh	r3, [r7, #14]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b7f4:	b002      	add	sp, #8
 800b7f6:	4770      	bx	lr

0800b7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	; 0x28
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d016      	beq.n	800b83a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3322      	adds	r3, #34	; 0x22
 800b810:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800b812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b814:	8adb      	ldrh	r3, [r3, #22]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d105      	bne.n	800b826 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800b81a:	4b43      	ldr	r3, [pc, #268]	; (800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800b81c:	4a43      	ldr	r2, [pc, #268]	; (800b92c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800b81e:	21c5      	movs	r1, #197	; 0xc5
 800b820:	4843      	ldr	r0, [pc, #268]	; (800b930 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b822:	f011 fe25 	bl	801d470 <__assert_func>
            return buffer[pos];
 800b826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b828:	8a9b      	ldrh	r3, [r3, #20]
 800b82a:	461a      	mov	r2, r3
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800b836:	2301      	movs	r3, #1
 800b838:	e000      	b.n	800b83c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800b83a:	2300      	movs	r3, #0
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d06a      	beq.n	800b916 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f007 fff7 	bl	8013834 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	3322      	adds	r3, #34	; 0x22
 800b84a:	623b      	str	r3, [r7, #32]
 800b84c:	2301      	movs	r3, #1
 800b84e:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	8adb      	ldrh	r3, [r3, #22]
 800b854:	8bfa      	ldrh	r2, [r7, #30]
 800b856:	429a      	cmp	r2, r3
 800b858:	d305      	bcc.n	800b866 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800b85a:	4b36      	ldr	r3, [pc, #216]	; (800b934 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800b85c:	4a36      	ldr	r2, [pc, #216]	; (800b938 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800b85e:	21cb      	movs	r1, #203	; 0xcb
 800b860:	4833      	ldr	r0, [pc, #204]	; (800b930 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b862:	f011 fe05 	bl	801d470 <__assert_func>
            const uint16_t index = pos + offset;
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	8a9a      	ldrh	r2, [r3, #20]
 800b86a:	8bfb      	ldrh	r3, [r7, #30]
 800b86c:	4413      	add	r3, r2
 800b86e:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800b870:	8bbb      	ldrh	r3, [r7, #28]
 800b872:	2b09      	cmp	r3, #9
 800b874:	d801      	bhi.n	800b87a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800b876:	8bbb      	ldrh	r3, [r7, #28]
 800b878:	e001      	b.n	800b87e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800b87a:	8bbb      	ldrh	r3, [r7, #28]
 800b87c:	3b0a      	subs	r3, #10
 800b87e:	6a3a      	ldr	r2, [r7, #32]
 800b880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b884:	f640 123f 	movw	r2, #2367	; 0x93f
 800b888:	4293      	cmp	r3, r2
 800b88a:	bf0c      	ite	eq
 800b88c:	2301      	moveq	r3, #1
 800b88e:	2300      	movne	r3, #0
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b00      	cmp	r3, #0
 800b894:	d03f      	beq.n	800b916 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	3322      	adds	r3, #34	; 0x22
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	3222      	adds	r2, #34	; 0x22
 800b89e:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	8ad2      	ldrh	r2, [r2, #22]
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	d105      	bne.n	800b8b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800b8a8:	4b1f      	ldr	r3, [pc, #124]	; (800b928 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800b8aa:	4a20      	ldr	r2, [pc, #128]	; (800b92c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800b8ac:	21c5      	movs	r1, #197	; 0xc5
 800b8ae:	4820      	ldr	r0, [pc, #128]	; (800b930 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b8b0:	f011 fdde 	bl	801d470 <__assert_func>
            return buffer[pos];
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	8a92      	ldrh	r2, [r2, #20]
 800b8b8:	4611      	mov	r1, r2
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800b8c0:	613b      	str	r3, [r7, #16]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	8adb      	ldrh	r3, [r3, #22]
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d806      	bhi.n	800b8dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800b8ce:	4b1b      	ldr	r3, [pc, #108]	; (800b93c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800b8d0:	4a1b      	ldr	r2, [pc, #108]	; (800b940 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800b8d2:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800b8d6:	4816      	ldr	r0, [pc, #88]	; (800b930 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800b8d8:	f011 fdca 	bl	801d470 <__assert_func>
            const uint16_t index = pos + 1;
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	8a9b      	ldrh	r3, [r3, #20]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800b8e4:	89bb      	ldrh	r3, [r7, #12]
 800b8e6:	2b09      	cmp	r3, #9
 800b8e8:	d801      	bhi.n	800b8ee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800b8ea:	89bb      	ldrh	r3, [r7, #12]
 800b8ec:	e000      	b.n	800b8f0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	693a      	ldr	r2, [r7, #16]
 800b8f2:	89f9      	ldrh	r1, [r7, #14]
 800b8f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800b8f8:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	3322      	adds	r3, #34	; 0x22
 800b8fe:	61bb      	str	r3, [r7, #24]
 800b900:	f640 133f 	movw	r3, #2367	; 0x93f
 800b904:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	8a9b      	ldrh	r3, [r3, #20]
 800b90a:	4619      	mov	r1, r3
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	8afa      	ldrh	r2, [r7, #22]
 800b910:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800b914:	bf00      	nop
        }
    }
    return getNextChar();
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f007 fe8e 	bl	8013638 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800b91c:	4603      	mov	r3, r0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3728      	adds	r7, #40	; 0x28
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	0801e8d8 	.word	0x0801e8d8
 800b92c:	0801e8e4 	.word	0x0801e8e4
 800b930:	0801e990 	.word	0x0801e990
 800b934:	0801e9d8 	.word	0x0801e9d8
 800b938:	0801e9e8 	.word	0x0801e9e8
 800b93c:	0801eabc 	.word	0x0801eabc
 800b940:	0801eac8 	.word	0x0801eac8

0800b944 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f007 fe3c 	bl	80135ca <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800b952:	bf00      	nop
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b088      	sub	sp, #32
 800b95e:	af02      	add	r7, sp, #8
 800b960:	60f8      	str	r0, [r7, #12]
 800b962:	1d38      	adds	r0, r7, #4
 800b964:	e880 0006 	stmia.w	r0, {r1, r2}
 800b968:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 800b96a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b96e:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 800b970:	1d39      	adds	r1, r7, #4
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	f005 f90c 	bl	8010b9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800b984:	bf00      	nop
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800b99a:	88fb      	ldrh	r3, [r7, #6]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d127      	bne.n	800b9f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800b9a0:	88fb      	ldrh	r3, [r7, #6]
 800b9a2:	4a1e      	ldr	r2, [pc, #120]	; (800ba1c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b9a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d016      	beq.n	800b9da <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800b9ac:	88fb      	ldrh	r3, [r7, #6]
 800b9ae:	4a1b      	ldr	r2, [pc, #108]	; (800ba1c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800b9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9b4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4413      	add	r3, r2
 800b9be:	4a18      	ldr	r2, [pc, #96]	; (800ba20 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b9c0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	4a16      	ldr	r2, [pc, #88]	; (800ba24 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b9cc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	e00a      	b.n	800b9f0 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800b9da:	4b11      	ldr	r3, [pc, #68]	; (800ba20 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800b9dc:	4a12      	ldr	r2, [pc, #72]	; (800ba28 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800b9de:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800b9e0:	4a12      	ldr	r2, [pc, #72]	; (800ba2c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800b9e2:	4b10      	ldr	r3, [pc, #64]	; (800ba24 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800b9e4:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800b9e6:	88fb      	ldrh	r3, [r7, #6]
 800b9e8:	4a11      	ldr	r2, [pc, #68]	; (800ba30 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800b9ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9ee:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00d      	beq.n	800ba12 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800b9f6:	4a0f      	ldr	r2, [pc, #60]	; (800ba34 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800b9f8:	88fb      	ldrh	r3, [r7, #6]
 800b9fa:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800b9fc:	f000 f83e 	bl	800ba7c <_ZN17TypedTextDatabase8getFontsEv>
 800ba00:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800ba02:	f000 f833 	bl	800ba6c <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800ba06:	4603      	mov	r3, r0
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff fea5 	bl	800b75c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800ba12:	bf00      	nop
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd90      	pop	{r4, r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	24019850 	.word	0x24019850
 800ba20:	24019858 	.word	0x24019858
 800ba24:	2401985c 	.word	0x2401985c
 800ba28:	08091dc0 	.word	0x08091dc0
 800ba2c:	08091db8 	.word	0x08091db8
 800ba30:	08091df0 	.word	0x08091df0
 800ba34:	24019854 	.word	0x24019854

0800ba38 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 800ba44:	4b07      	ldr	r3, [pc, #28]	; (800ba64 <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	4b07      	ldr	r3, [pc, #28]	; (800ba68 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 800ba4a:	6819      	ldr	r1, [r3, #0]
 800ba4c:	887b      	ldrh	r3, [r7, #2]
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	440b      	add	r3, r1
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4413      	add	r3, r2
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr
 800ba64:	24019858 	.word	0x24019858
 800ba68:	2401985c 	.word	0x2401985c

0800ba6c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 800ba70:	2302      	movs	r3, #2
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800ba80:	4b02      	ldr	r3, [pc, #8]	; (800ba8c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr
 800ba8c:	24019860 	.word	0x24019860

0800ba90 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d113      	bne.n	800bac8 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d10e      	bne.n	800bac8 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800baaa:	f7fd fef7 	bl	800989c <_Z23getFont_verdana_20_4bppv>
 800baae:	4603      	mov	r3, r0
};
 800bab0:	4a07      	ldr	r2, [pc, #28]	; (800bad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bab2:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800bab4:	f7fd ff4c 	bl	8009950 <_Z23getFont_verdana_40_4bppv>
 800bab8:	4603      	mov	r3, r0
};
 800baba:	4a05      	ldr	r2, [pc, #20]	; (800bad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800babc:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800babe:	f7fd fe93 	bl	80097e8 <_Z23getFont_verdana_10_4bppv>
 800bac2:	4603      	mov	r3, r0
};
 800bac4:	4a02      	ldr	r2, [pc, #8]	; (800bad0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800bac6:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800bac8:	bf00      	nop
 800baca:	3708      	adds	r7, #8
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	24019860 	.word	0x24019860

0800bad4 <_GLOBAL__sub_I_touchgfx_fonts>:
 800bad4:	b580      	push	{r7, lr}
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800badc:	2001      	movs	r0, #1
 800bade:	f7ff ffd7 	bl	800ba90 <_Z41__static_initialization_and_destruction_0ii>
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	4a05      	ldr	r2, [pc, #20]	; (800bb04 <_ZN19FrontendApplicationD1Ev+0x20>)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	601a      	str	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe f98b 	bl	8009e10 <_ZN23FrontendApplicationBaseD1Ev>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	0801f4c0 	.word	0x0801f4c0

0800bb08 <_ZN19FrontendApplicationD0Ev>:
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7ff ffe7 	bl	800bae4 <_ZN19FrontendApplicationD1Ev>
 800bb16:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f011 fc79 	bl	801d412 <_ZdlPvj>
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	4618      	mov	r0, r3
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f000 f82d 	bl	800bb98 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f005 fd05 	bl	8011550 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800bb46:	bf00      	nop
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	60f8      	str	r0, [r7, #12]
 800bb58:	60b9      	str	r1, [r7, #8]
 800bb5a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	68b9      	ldr	r1, [r7, #8]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fe f9a4 	bl	8009eb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800bb68:	4a03      	ldr	r2, [pc, #12]	; (800bb78 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	601a      	str	r2, [r3, #0]
{

}
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	4618      	mov	r0, r3
 800bb72:	3710      	adds	r7, #16
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	0801f4c0 	.word	0x0801f4c0

0800bb7c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]
{

}
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <_ZN5Model4tickEv>:

void Model::tick()
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]

}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800bbac:	b480      	push	{r7}
 800bbae:	b083      	sub	sp, #12
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
    {
    }
 800bbb4:	bf00      	nop
 800bbb6:	370c      	adds	r7, #12
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
    {
    }
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
    {
 800bbdc:	4a04      	ldr	r2, [pc, #16]	; (800bbf0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	601a      	str	r2, [r3, #0]
    }
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	0801f54c 	.word	0x0801f54c

0800bbf4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
    }
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff ffe9 	bl	800bbd4 <_ZN8touchgfx9PresenterD1Ev>
 800bc02:	2104      	movs	r1, #4
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f011 fc04 	bl	801d412 <_ZdlPvj>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3708      	adds	r7, #8
 800bc10:	46bd      	mov	sp, r7
 800bc12:	bd80      	pop	{r7, pc}

0800bc14 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800bc14:	b480      	push	{r7}
 800bc16:	b083      	sub	sp, #12
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
    {
 800bc1c:	4a04      	ldr	r2, [pc, #16]	; (800bc30 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	601a      	str	r2, [r3, #0]
    }
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4618      	mov	r0, r3
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	0801f54c 	.word	0x0801f54c

0800bc34 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
 800bc3c:	4a06      	ldr	r2, [pc, #24]	; (800bc58 <_ZN13ModelListenerC1Ev+0x24>)
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	605a      	str	r2, [r3, #4]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	370c      	adds	r7, #12
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	0801f53c 	.word	0x0801f53c

0800bc5c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
 800bc64:	4a04      	ldr	r2, [pc, #16]	; (800bc78 <_ZN13ModelListenerD1Ev+0x1c>)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	0801f53c 	.word	0x0801f53c

0800bc7c <_ZN13ModelListenerD0Ev>:
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f7ff ffe9 	bl	800bc5c <_ZN13ModelListenerD1Ev>
 800bc8a:	2108      	movs	r1, #8
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f011 fbc0 	bl	801d412 <_ZdlPvj>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4618      	mov	r0, r3
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <_ZN15screenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~screenPresenter() {}
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	4a09      	ldr	r2, [pc, #36]	; (800bccc <_ZN15screenPresenterD1Ev+0x30>)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	601a      	str	r2, [r3, #0]
 800bcaa:	4a09      	ldr	r2, [pc, #36]	; (800bcd0 <_ZN15screenPresenterD1Ev+0x34>)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	605a      	str	r2, [r3, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	3304      	adds	r3, #4
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff ffd1 	bl	800bc5c <_ZN13ModelListenerD1Ev>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f7ff ff89 	bl	800bbd4 <_ZN8touchgfx9PresenterD1Ev>
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	0801f514 	.word	0x0801f514
 800bcd0:	0801f52c 	.word	0x0801f52c

0800bcd4 <_ZThn4_N15screenPresenterD1Ev>:
 800bcd4:	f1a0 0004 	sub.w	r0, r0, #4
 800bcd8:	e7e0      	b.n	800bc9c <_ZN15screenPresenterD1Ev>
 800bcda:	bf00      	nop

0800bcdc <_ZN15screenPresenterD0Ev>:
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f7ff ffd9 	bl	800bc9c <_ZN15screenPresenterD1Ev>
 800bcea:	2110      	movs	r1, #16
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f011 fb90 	bl	801d412 <_ZdlPvj>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <_ZThn4_N15screenPresenterD0Ev>:
 800bcfc:	f1a0 0004 	sub.w	r0, r0, #4
 800bd00:	e7ec      	b.n	800bcdc <_ZN15screenPresenterD0Ev>
	...

0800bd04 <_ZN15screenPresenterC1ER10screenView>:
#include <gui/screen_screen/screenView.hpp>
#include <gui/screen_screen/screenPresenter.hpp>

screenPresenter::screenPresenter(screenView& v)
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
    : view(v)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7ff ff7f 	bl	800bc14 <_ZN8touchgfx9PresenterC1Ev>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	3304      	adds	r3, #4
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff ff8a 	bl	800bc34 <_ZN13ModelListenerC1Ev>
 800bd20:	4a06      	ldr	r2, [pc, #24]	; (800bd3c <_ZN15screenPresenterC1ER10screenView+0x38>)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	601a      	str	r2, [r3, #0]
 800bd26:	4a06      	ldr	r2, [pc, #24]	; (800bd40 <_ZN15screenPresenterC1ER10screenView+0x3c>)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	605a      	str	r2, [r3, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	60da      	str	r2, [r3, #12]
{

}
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4618      	mov	r0, r3
 800bd36:	3708      	adds	r7, #8
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	0801f514 	.word	0x0801f514
 800bd40:	0801f52c 	.word	0x0801f52c

0800bd44 <_ZN15screenPresenter8activateEv>:

void screenPresenter::activate()
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]

}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr

0800bd58 <_ZN15screenPresenter10deactivateEv>:

void screenPresenter::deactivate()
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]

}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <_ZN10screenViewD1Ev>:

class screenView : public screenViewBase
{
public:
    screenView();
    virtual ~screenView() {}
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	4a05      	ldr	r2, [pc, #20]	; (800bd8c <_ZN10screenViewD1Ev+0x20>)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7ff faff 	bl	800b380 <_ZN14screenViewBaseD1Ev>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}
 800bd8c:	0801f564 	.word	0x0801f564

0800bd90 <_ZN10screenViewD0Ev>:
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff ffe7 	bl	800bd6c <_ZN10screenViewD1Ev>
 800bd9e:	f44f 71c2 	mov.w	r1, #388	; 0x184
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f011 fb35 	bl	801d412 <_ZdlPvj>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <_ZN10screenViewC1Ev>:
#include <gui/screen_screen/screenView.hpp>

screenView::screenView()
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7ff f920 	bl	800b004 <_ZN14screenViewBaseC1Ev>
 800bdc4:	4a03      	ldr	r2, [pc, #12]	; (800bdd4 <_ZN10screenViewC1Ev+0x20>)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	601a      	str	r2, [r3, #0]
{

}
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	0801f564 	.word	0x0801f564

0800bdd8 <_ZN10screenView11setupScreenEv>:

void screenView::setupScreen()
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
    screenViewBase::setupScreen();
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7ff fb0b 	bl	800b3fe <_ZN14screenViewBase11setupScreenEv>
}
 800bde8:	bf00      	nop
 800bdea:	3708      	adds	r7, #8
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bd80      	pop	{r7, pc}

0800bdf0 <_ZN10screenView14tearDownScreenEv>:

void screenView::tearDownScreen()
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
    screenViewBase::tearDownScreen();
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fdc6 	bl	800a98c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
    {
 800be10:	4a04      	ldr	r2, [pc, #16]	; (800be24 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
    }
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	0801f5b0 	.word	0x0801f5b0

0800be28 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
    }
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff ffe9 	bl	800be08 <_ZN8touchgfx15TouchControllerD1Ev>
 800be36:	2104      	movs	r1, #4
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f011 faea 	bl	801d412 <_ZdlPvj>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4618      	mov	r0, r3
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b085      	sub	sp, #20
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3714      	adds	r7, #20
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr
	...

0800be78 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
 800be80:	4a05      	ldr	r2, [pc, #20]	; (800be98 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	601a      	str	r2, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4618      	mov	r0, r3
 800be8a:	f7ff ffbd 	bl	800be08 <_ZN8touchgfx15TouchControllerD1Ev>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	0801f598 	.word	0x0801f598

0800be9c <_ZN20STM32TouchControllerD0Ev>:
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f7ff ffe7 	bl	800be78 <_ZN20STM32TouchControllerD1Ev>
 800beaa:	2104      	movs	r1, #4
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f011 fab0 	bl	801d412 <_ZdlPvj>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800bebc:	b480      	push	{r7}
 800bebe:	af00      	add	r7, sp, #0

}
 800bec0:	bf00      	nop
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr
	...

0800becc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800bed6:	79fb      	ldrb	r3, [r7, #7]
 800bed8:	2b03      	cmp	r3, #3
 800beda:	d827      	bhi.n	800bf2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
 800bedc:	a201      	add	r2, pc, #4	; (adr r2, 800bee4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800bede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee2:	bf00      	nop
 800bee4:	0800bef5 	.word	0x0800bef5
 800bee8:	0800bf03 	.word	0x0800bf03
 800beec:	0800bf11 	.word	0x0800bf11
 800bef0:	0800bf1f 	.word	0x0800bf1f
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
 800bef4:	2201      	movs	r2, #1
 800bef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800befa:	480e      	ldr	r0, [pc, #56]	; (800bf34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800befc:	f7f6 f93c 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf00:	e014      	b.n	800bf2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_SET);
 800bf02:	2201      	movs	r2, #1
 800bf04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bf08:	480a      	ldr	r0, [pc, #40]	; (800bf34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800bf0a:	f7f6 f935 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf0e:	e00d      	b.n	800bf2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_SET);
 800bf10:	2201      	movs	r2, #1
 800bf12:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf16:	4808      	ldr	r0, [pc, #32]	; (800bf38 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x6c>)
 800bf18:	f7f6 f92e 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf1c:	e006      	b.n	800bf2c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
 800bf1e:	2201      	movs	r2, #1
 800bf20:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf24:	4803      	ldr	r0, [pc, #12]	; (800bf34 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x68>)
 800bf26:	f7f6 f927 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf2a:	bf00      	nop
    }
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	58021c00 	.word	0x58021c00
 800bf38:	58022000 	.word	0x58022000

0800bf3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4603      	mov	r3, r0
 800bf44:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800bf46:	79fb      	ldrb	r3, [r7, #7]
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d827      	bhi.n	800bf9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
 800bf4c:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800bf4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf52:	bf00      	nop
 800bf54:	0800bf65 	.word	0x0800bf65
 800bf58:	0800bf73 	.word	0x0800bf73
 800bf5c:	0800bf81 	.word	0x0800bf81
 800bf60:	0800bf8f 	.word	0x0800bf8f
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800bf64:	2200      	movs	r2, #0
 800bf66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf6a:	480e      	ldr	r0, [pc, #56]	; (800bfa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800bf6c:	f7f6 f904 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf70:	e014      	b.n	800bf9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, GPIO_PIN_RESET);
 800bf72:	2200      	movs	r2, #0
 800bf74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bf78:	480a      	ldr	r0, [pc, #40]	; (800bfa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800bf7a:	f7f6 f8fd 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf7e:	e00d      	b.n	800bf9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 800bf80:	2200      	movs	r2, #0
 800bf82:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf86:	4808      	ldr	r0, [pc, #32]	; (800bfa8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x6c>)
 800bf88:	f7f6 f8f6 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf8c:	e006      	b.n	800bf9c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bf94:	4803      	ldr	r0, [pc, #12]	; (800bfa4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x68>)
 800bf96:	f7f6 f8ef 	bl	8002178 <HAL_GPIO_WritePin>
#endif
        break;
 800bf9a:	bf00      	nop
    }
}
 800bf9c:	bf00      	nop
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	58021c00 	.word	0x58021c00
 800bfa8:	58022000 	.word	0x58022000

0800bfac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800bfb6:	79fb      	ldrb	r3, [r7, #7]
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d823      	bhi.n	800c004 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
 800bfbc:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800bfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc2:	bf00      	nop
 800bfc4:	0800bfd5 	.word	0x0800bfd5
 800bfc8:	0800bfe1 	.word	0x0800bfe1
 800bfcc:	0800bfed 	.word	0x0800bfed
 800bfd0:	0800bff9 	.word	0x0800bff9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800bfd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bfd8:	480c      	ldr	r0, [pc, #48]	; (800c00c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800bfda:	f7f6 f8e6 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800bfde:	e011      	b.n	800c004 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 800bfe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800bfe4:	4809      	ldr	r0, [pc, #36]	; (800c00c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800bfe6:	f7f6 f8e0 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800bfea:	e00b      	b.n	800c004 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800bfec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bff0:	4807      	ldr	r0, [pc, #28]	; (800c010 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x64>)
 800bff2:	f7f6 f8da 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800bff6:	e005      	b.n	800c004 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800bff8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bffc:	4803      	ldr	r0, [pc, #12]	; (800c00c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800bffe:	f7f6 f8d4 	bl	80021aa <HAL_GPIO_TogglePin>
#endif
        break;
 800c002:	bf00      	nop
    }
}
 800c004:	bf00      	nop
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	58021c00 	.word	0x58021c00
 800c010:	58022000 	.word	0x58022000

0800c014 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
    {
 800c01c:	4a04      	ldr	r2, [pc, #16]	; (800c030 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	601a      	str	r2, [r3, #0]
    }
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4618      	mov	r0, r3
 800c026:	370c      	adds	r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	0801f990 	.word	0x0801f990

0800c034 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
    }
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff ffe9 	bl	800c014 <_ZN8touchgfx3HALD1Ev>
 800c042:	217c      	movs	r1, #124	; 0x7c
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f011 f9e4 	bl	801d412 <_ZdlPvj>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4618      	mov	r0, r3
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        displayOrientationChangeRequested = true;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2201      	movs	r2, #1
 800c06c:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
    }
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	807b      	strh	r3, [r7, #2]
 800c088:	4613      	mov	r3, r2
 800c08a:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800c08c:	4b0c      	ldr	r3, [pc, #48]	; (800c0c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800c08e:	881b      	ldrh	r3, [r3, #0]
 800c090:	887a      	ldrh	r2, [r7, #2]
 800c092:	429a      	cmp	r2, r3
 800c094:	d304      	bcc.n	800c0a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800c096:	4b0b      	ldr	r3, [pc, #44]	; (800c0c4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800c098:	881b      	ldrh	r3, [r3, #0]
 800c09a:	883a      	ldrh	r2, [r7, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d205      	bcs.n	800c0ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800c0a0:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800c0a2:	4a0a      	ldr	r2, [pc, #40]	; (800c0cc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800c0a4:	219e      	movs	r1, #158	; 0x9e
 800c0a6:	480a      	ldr	r0, [pc, #40]	; (800c0d0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800c0a8:	f011 f9e2 	bl	801d470 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800c0ac:	4a09      	ldr	r2, [pc, #36]	; (800c0d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800c0ae:	887b      	ldrh	r3, [r7, #2]
 800c0b0:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800c0b2:	4a09      	ldr	r2, [pc, #36]	; (800c0d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800c0b4:	883b      	ldrh	r3, [r7, #0]
 800c0b6:	8013      	strh	r3, [r2, #0]
    }
 800c0b8:	bf00      	nop
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	2401aa30 	.word	0x2401aa30
 800c0c4:	2401aa32 	.word	0x2401aa32
 800c0c8:	0801eb7c 	.word	0x0801eb7c
 800c0cc:	0801ebe0 	.word	0x0801ebe0
 800c0d0:	0801ec24 	.word	0x0801ec24
 800c0d4:	2401aa36 	.word	0x2401aa36
 800c0d8:	2401aa38 	.word	0x2401aa38

0800c0dc <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d009      	beq.n	800c102 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	685a      	ldr	r2, [r3, #4]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	4798      	blx	r3
 800c0fe:	4603      	mov	r3, r0
 800c100:	e000      	b.n	800c104 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800c102:	2300      	movs	r3, #0
    }
 800c104:	4618      	mov	r0, r3
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f002 fe67 	bl	800ede8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	33ac      	adds	r3, #172	; 0xac
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
    }
 800c126:	bf00      	nop
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800c12e:	b480      	push	{r7}
 800c130:	b083      	sub	sp, #12
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800c138:	2300      	movs	r3, #0
    }
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr
	...

0800c148 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d106      	bne.n	800c16a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800c15c:	4b0f      	ldr	r3, [pc, #60]	; (800c19c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800c15e:	4a10      	ldr	r2, [pc, #64]	; (800c1a0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800c160:	f240 21d2 	movw	r1, #722	; 0x2d2
 800c164:	480f      	ldr	r0, [pc, #60]	; (800c1a4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800c166:	f011 f983 	bl	801d470 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	bf14      	ite	ne
 800c17c:	2301      	movne	r3, #1
 800c17e:	2300      	moveq	r3, #0
 800c180:	b2da      	uxtb	r2, r3
 800c182:	4b09      	ldr	r3, [pc, #36]	; (800c1a8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800c184:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	338c      	adds	r3, #140	; 0x8c
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	6839      	ldr	r1, [r7, #0]
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	4798      	blx	r3
    }
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}
 800c19c:	0801ec68 	.word	0x0801ec68
 800c1a0:	0801eca0 	.word	0x0801eca0
 800c1a4:	0801ec24 	.word	0x0801ec24
 800c1a8:	2401aa3a 	.word	0x2401aa3a

0800c1ac <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800c1ac:	b480      	push	{r7}
 800c1ae:	b083      	sub	sp, #12
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	683a      	ldr	r2, [r7, #0]
 800c1ba:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	bf14      	ite	ne
 800c1c2:	2301      	movne	r3, #1
 800c1c4:	2300      	moveq	r3, #0
 800c1c6:	b2da      	uxtb	r2, r3
 800c1c8:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800c1ca:	701a      	strb	r2, [r3, #0]
    }
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	2401aa3b 	.word	0x2401aa3b

0800c1dc <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800c1e4:	2300      	movs	r3, #0
    }
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800c1f2:	b580      	push	{r7, lr}
 800c1f4:	b082      	sub	sp, #8
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	2b00      	cmp	r3, #0
 800c204:	d004      	beq.n	800c210 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c20a:	887a      	ldrh	r2, [r7, #2]
 800c20c:	4610      	mov	r0, r2
 800c20e:	4798      	blx	r3
        }
    }
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	685a      	ldr	r2, [r3, #4]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3318      	adds	r3, #24
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4610      	mov	r0, r2
 800c230:	4798      	blx	r3
 800c232:	4603      	mov	r3, r0
    }
 800c234:	4618      	mov	r0, r3
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800c23c:	b480      	push	{r7}
 800c23e:	b085      	sub	sp, #20
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c250:	429a      	cmp	r2, r3
 800c252:	d011      	beq.n	800c278 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800c254:	4b14      	ldr	r3, [pc, #80]	; (800c2a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d11e      	bne.n	800c29a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800c25c:	4b13      	ldr	r3, [pc, #76]	; (800c2ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c25e:	881b      	ldrh	r3, [r3, #0]
 800c260:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800c262:	4b13      	ldr	r3, [pc, #76]	; (800c2b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c264:	881a      	ldrh	r2, [r3, #0]
 800c266:	4b11      	ldr	r3, [pc, #68]	; (800c2ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c268:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800c26a:	4a11      	ldr	r2, [pc, #68]	; (800c2b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c26c:	89bb      	ldrh	r3, [r7, #12]
 800c26e:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800c270:	4b0d      	ldr	r3, [pc, #52]	; (800c2a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c272:	2201      	movs	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800c276:	e010      	b.n	800c29a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800c278:	4b0b      	ldr	r3, [pc, #44]	; (800c2a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00c      	beq.n	800c29a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800c280:	4b0a      	ldr	r3, [pc, #40]	; (800c2ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c282:	881b      	ldrh	r3, [r3, #0]
 800c284:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800c286:	4b0a      	ldr	r3, [pc, #40]	; (800c2b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c288:	881a      	ldrh	r2, [r3, #0]
 800c28a:	4b08      	ldr	r3, [pc, #32]	; (800c2ac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800c28c:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800c28e:	4a08      	ldr	r2, [pc, #32]	; (800c2b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800c290:	89fb      	ldrh	r3, [r7, #14]
 800c292:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 800c294:	4b04      	ldr	r3, [pc, #16]	; (800c2a8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800c296:	2200      	movs	r2, #0
 800c298:	701a      	strb	r2, [r3, #0]
    }
 800c29a:	bf00      	nop
 800c29c:	3714      	adds	r7, #20
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a4:	4770      	bx	lr
 800c2a6:	bf00      	nop
 800c2a8:	2401aa34 	.word	0x2401aa34
 800c2ac:	2401aa32 	.word	0x2401aa32
 800c2b0:	2401aa30 	.word	0x2401aa30

0800c2b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f001 ffef 	bl	800e2a2 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 800c2c4:	bf00      	nop
 800c2c6:	3708      	adds	r7, #8
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	4a05      	ldr	r2, [pc, #20]	; (800c2ec <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7ff fe99 	bl	800c014 <_ZN8touchgfx3HALD1Ev>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	0801f7e8 	.word	0x0801f7e8

0800c2f0 <_ZN20TouchGFXGeneratedHALD0Ev>:
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff ffe7 	bl	800c2cc <_ZN20TouchGFXGeneratedHALD1Ev>
 800c2fe:	217c      	movs	r1, #124	; 0x7c
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f011 f886 	bl	801d412 <_ZdlPvj>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4618      	mov	r0, r3
 800c30a:	3708      	adds	r7, #8
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff ffca 	bl	800c2b4 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 800c320:	bf00      	nop
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	f001 faf6 	bl	800d924 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 800c338:	bf00      	nop
 800c33a:	3708      	adds	r7, #8
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4618      	mov	r0, r3
 800c34c:	f001 fb8c 	bl	800da68 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 800c350:	4603      	mov	r3, r0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3708      	adds	r7, #8
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}

0800c35a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 800c35a:	b580      	push	{r7, lr}
 800c35c:	b082      	sub	sp, #8
 800c35e:	af00      	add	r7, sp, #0
 800c360:	6078      	str	r0, [r7, #4]
 800c362:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6839      	ldr	r1, [r7, #0]
 800c368:	4618      	mov	r0, r3
 800c36a:	f001 fb8b 	bl	800da84 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 800c36e:	bf00      	nop
 800c370:	3708      	adds	r7, #8
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b082      	sub	sp, #8
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
 800c37e:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	4618      	mov	r0, r3
 800c386:	f001 fb93 	bl	800dab0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 800c38a:	bf00      	nop
 800c38c:	3708      	adds	r7, #8
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	607a      	str	r2, [r7, #4]
 800c39e:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 800c3a0:	68f8      	ldr	r0, [r7, #12]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	68b9      	ldr	r1, [r7, #8]
 800c3a8:	f001 fb90 	bl	800dacc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 800c3ac:	4603      	mov	r3, r0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b082      	sub	sp, #8
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f001 fadd 	bl	800d980 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 800c3c6:	bf00      	nop
 800c3c8:	3708      	adds	r7, #8
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b082      	sub	sp, #8
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f001 fae1 	bl	800d9a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 800c3de:	bf00      	nop
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f001 fae3 	bl	800d9bc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 800c3f6:	bf00      	nop
 800c3f8:	3708      	adds	r7, #8
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	bd80      	pop	{r7, pc}

0800c3fe <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 800c3fe:	b580      	push	{r7, lr}
 800c400:	b082      	sub	sp, #8
 800c402:	af00      	add	r7, sp, #0
 800c404:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4618      	mov	r0, r3
 800c40a:	f001 fae5 	bl	800d9d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 800c40e:	bf00      	nop
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b082      	sub	sp, #8
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4618      	mov	r0, r3
 800c422:	f001 fb07 	bl	800da34 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 800c426:	4603      	mov	r3, r0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 fb07 	bl	800da4e <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	4a05      	ldr	r2, [pc, #20]	; (800c468 <_ZN11TouchGFXHALD1Ev+0x20>)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff ff37 	bl	800c2cc <_ZN20TouchGFXGeneratedHALD1Ev>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4618      	mov	r0, r3
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	0801f5c8 	.word	0x0801f5c8

0800c46c <_ZN11TouchGFXHALD0Ev>:
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff ffe7 	bl	800c448 <_ZN11TouchGFXHALD1Ev>
 800c47a:	217c      	movs	r1, #124	; 0x7c
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f010 ffc8 	bl	801d412 <_ZdlPvj>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4618      	mov	r0, r3
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 800c490:	2200      	movs	r2, #0
 800c492:	2101      	movs	r1, #1
 800c494:	2001      	movs	r0, #1
 800c496:	f7f9 fc76 	bl	8005d86 <osSemaphoreNew>
 800c49a:	4603      	mov	r3, r0
 800c49c:	4a0f      	ldr	r2, [pc, #60]	; (800c4dc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800c49e:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 800c4a0:	4b0e      	ldr	r3, [pc, #56]	; (800c4dc <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d105      	bne.n	800c4b4 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 800c4a8:	4b0d      	ldr	r3, [pc, #52]	; (800c4e0 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 800c4aa:	4a0e      	ldr	r2, [pc, #56]	; (800c4e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800c4ac:	2128      	movs	r1, #40	; 0x28
 800c4ae:	480e      	ldr	r0, [pc, #56]	; (800c4e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800c4b0:	f010 ffde 	bl	801d470 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	2104      	movs	r1, #4
 800c4b8:	2001      	movs	r0, #1
 800c4ba:	f7f9 fd83 	bl	8005fc4 <osMessageQueueNew>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4a0a      	ldr	r2, [pc, #40]	; (800c4ec <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800c4c2:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800c4c4:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d105      	bne.n	800c4d8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 800c4cc:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 800c4ce:	4a05      	ldr	r2, [pc, #20]	; (800c4e4 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 800c4d0:	212c      	movs	r1, #44	; 0x2c
 800c4d2:	4805      	ldr	r0, [pc, #20]	; (800c4e8 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 800c4d4:	f010 ffcc 	bl	801d470 <__assert_func>
}
 800c4d8:	bf00      	nop
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	2401986c 	.word	0x2401986c
 800c4e0:	0801ecf0 	.word	0x0801ecf0
 800c4e4:	0801ed3c 	.word	0x0801ed3c
 800c4e8:	0801ed6c 	.word	0x0801ed6c
 800c4ec:	24019870 	.word	0x24019870
 800c4f0:	0801ed98 	.word	0x0801ed98

0800c4f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 800c4f8:	4b04      	ldr	r3, [pc, #16]	; (800c50c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c500:	4618      	mov	r0, r3
 800c502:	f7f9 fcc9 	bl	8005e98 <osSemaphoreAcquire>
}
 800c506:	bf00      	nop
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	2401986c 	.word	0x2401986c

0800c510 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800c514:	4b03      	ldr	r3, [pc, #12]	; (800c524 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4618      	mov	r0, r3
 800c51a:	f7f9 fd0f 	bl	8005f3c <osSemaphoreRelease>
}
 800c51e:	bf00      	nop
 800c520:	bd80      	pop	{r7, pc}
 800c522:	bf00      	nop
 800c524:	2401986c 	.word	0x2401986c

0800c528 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800c52c:	4b03      	ldr	r3, [pc, #12]	; (800c53c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2100      	movs	r1, #0
 800c532:	4618      	mov	r0, r3
 800c534:	f7f9 fcb0 	bl	8005e98 <osSemaphoreAcquire>
}
 800c538:	bf00      	nop
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	2401986c 	.word	0x2401986c

0800c540 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 800c540:	b580      	push	{r7, lr}
 800c542:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 800c544:	4b03      	ldr	r3, [pc, #12]	; (800c554 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f7f9 fcf7 	bl	8005f3c <osSemaphoreRelease>
}
 800c54e:	bf00      	nop
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	2401986c 	.word	0x2401986c

0800c558 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 800c55c:	4b04      	ldr	r3, [pc, #16]	; (800c570 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 800c55e:	6818      	ldr	r0, [r3, #0]
 800c560:	2300      	movs	r3, #0
 800c562:	2200      	movs	r2, #0
 800c564:	4903      	ldr	r1, [pc, #12]	; (800c574 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 800c566:	f7f9 fda1 	bl	80060ac <osMessageQueuePut>
}
 800c56a:	bf00      	nop
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	24019870 	.word	0x24019870
 800c574:	24000018 	.word	0x24000018

0800c578 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 800c57e:	4b09      	ldr	r3, [pc, #36]	; (800c5a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800c580:	6818      	ldr	r0, [r3, #0]
 800c582:	1d39      	adds	r1, r7, #4
 800c584:	2300      	movs	r3, #0
 800c586:	2200      	movs	r2, #0
 800c588:	f7f9 fdf0 	bl	800616c <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 800c58c:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 800c58e:	6818      	ldr	r0, [r3, #0]
 800c590:	1d39      	adds	r1, r7, #4
 800c592:	f04f 33ff 	mov.w	r3, #4294967295
 800c596:	2200      	movs	r2, #0
 800c598:	f7f9 fde8 	bl	800616c <osMessageQueueGet>
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	24019870 	.word	0x24019870

0800c5a8 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 800c5b2:	88fb      	ldrh	r3, [r7, #6]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f9 fbcb 	bl	8005d50 <osDelay>
}
 800c5ba:	bf00      	nop
 800c5bc:	3708      	adds	r7, #8
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
	...

0800c5c4 <__NVIC_EnableIRQ>:
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c5ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	db0b      	blt.n	800c5ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c5d6:	88fb      	ldrh	r3, [r7, #6]
 800c5d8:	f003 021f 	and.w	r2, r3, #31
 800c5dc:	4907      	ldr	r1, [pc, #28]	; (800c5fc <__NVIC_EnableIRQ+0x38>)
 800c5de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5e2:	095b      	lsrs	r3, r3, #5
 800c5e4:	2001      	movs	r0, #1
 800c5e6:	fa00 f202 	lsl.w	r2, r0, r2
 800c5ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c5ee:	bf00      	nop
 800c5f0:	370c      	adds	r7, #12
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	e000e100 	.word	0xe000e100

0800c600 <__NVIC_DisableIRQ>:
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c60a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	db12      	blt.n	800c638 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c612:	88fb      	ldrh	r3, [r7, #6]
 800c614:	f003 021f 	and.w	r2, r3, #31
 800c618:	490a      	ldr	r1, [pc, #40]	; (800c644 <__NVIC_DisableIRQ+0x44>)
 800c61a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c61e:	095b      	lsrs	r3, r3, #5
 800c620:	2001      	movs	r0, #1
 800c622:	fa00 f202 	lsl.w	r2, r0, r2
 800c626:	3320      	adds	r3, #32
 800c628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c62c:	f3bf 8f4f 	dsb	sy
}
 800c630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c632:	f3bf 8f6f 	isb	sy
}
 800c636:	bf00      	nop
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr
 800c644:	e000e100 	.word	0xe000e100

0800c648 <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
        return color;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
    }
 800c654:	4618      	mov	r0, r3
 800c656:	370c      	adds	r7, #12
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 800c660:	b480      	push	{r7}
 800c662:	b083      	sub	sp, #12
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
    {
 800c668:	4a04      	ldr	r2, [pc, #16]	; (800c67c <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	601a      	str	r2, [r3, #0]
    }
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4618      	mov	r0, r3
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	0801f6f0 	.word	0x0801f6f0

0800c680 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
    }
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff ffe9 	bl	800c660 <_ZN8touchgfx9DMA_QueueD1Ev>
 800c68e:	2104      	movs	r1, #4
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f010 febe 	bl	801d412 <_ZdlPvj>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	3344      	adds	r3, #68	; 0x44
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	4798      	blx	r3
    }
 800c6b4:	bf00      	nop
 800c6b6:	3708      	adds	r7, #8
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
    {
 800c6c4:	4a04      	ldr	r2, [pc, #16]	; (800c6d8 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
    }
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr
 800c6d8:	0801fa68 	.word	0x0801fa68

0800c6dc <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
    }
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff ffe9 	bl	800c6bc <_ZN8touchgfx13DMA_InterfaceD1Ev>
 800c6ea:	210c      	movs	r1, #12
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f010 fe90 	bl	801d412 <_ZdlPvj>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3708      	adds	r7, #8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}

0800c6fc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800c706:	4a09      	ldr	r2, [pc, #36]	; (800c72c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	601a      	str	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	605a      	str	r2, [r3, #4]
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	721a      	strb	r2, [r3, #8]
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	725a      	strb	r2, [r3, #9]
    {
    }
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4618      	mov	r0, r3
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	0801fa68 	.word	0x0801fa68

0800c730 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 800c738:	2301      	movs	r3, #1
    }
 800c73a:	4618      	mov	r0, r3
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3328      	adds	r3, #40	; 0x28
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4610      	mov	r0, r2
 800c75a:	4798      	blx	r3
    }
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	3314      	adds	r3, #20
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4610      	mov	r0, r2
 800c77c:	4798      	blx	r3
    }
 800c77e:	bf00      	nop
 800c780:	3708      	adds	r7, #8
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 800c78e:	f7fd f9f5 	bl	8009b7c <_ZN8touchgfx3HAL11getInstanceEv>
 800c792:	4603      	mov	r3, r0
 800c794:	4618      	mov	r0, r3
 800c796:	f7ff ffe5 	bl	800c764 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 800c79a:	bf00      	nop
 800c79c:	3708      	adds	r7, #8
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b082      	sub	sp, #8
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	330c      	adds	r3, #12
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fd fe6e 	bl	800a490 <_ZN8touchgfx9colortypeC1Ev>
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 800c7c0:	b5b0      	push	{r4, r5, r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	330c      	adds	r3, #12
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	f7ff ff93 	bl	800c6fc <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 800c7d6:	4a0e      	ldr	r2, [pc, #56]	; (800c810 <_ZN8STM32DMAC1Ev+0x50>)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f103 000c 	add.w	r0, r3, #12
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	3320      	adds	r3, #32
 800c7e6:	2260      	movs	r2, #96	; 0x60
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f002 fc37 	bl	800f05c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	3320      	adds	r3, #32
 800c7f2:	245f      	movs	r4, #95	; 0x5f
 800c7f4:	461d      	mov	r5, r3
 800c7f6:	e004      	b.n	800c802 <_ZN8STM32DMAC1Ev+0x42>
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	f7ff ffd2 	bl	800c7a2 <_ZN8touchgfx6BlitOpC1Ev>
 800c7fe:	3524      	adds	r5, #36	; 0x24
 800c800:	3c01      	subs	r4, #1
 800c802:	2c00      	cmp	r4, #0
 800c804:	daf8      	bge.n	800c7f8 <_ZN8STM32DMAC1Ev+0x38>
{
}
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	4618      	mov	r0, r3
 800c80a:	3708      	adds	r7, #8
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bdb0      	pop	{r4, r5, r7, pc}
 800c810:	0801f6a0 	.word	0x0801f6a0

0800c814 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	4a09      	ldr	r2, [pc, #36]	; (800c844 <_ZN8STM32DMAD1Ev+0x30>)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 800c822:	205a      	movs	r0, #90	; 0x5a
 800c824:	f7ff feec 	bl	800c600 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	330c      	adds	r3, #12
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fab3 	bl	800cd98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4618      	mov	r0, r3
 800c836:	f7ff ff41 	bl	800c6bc <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	0801f6a0 	.word	0x0801f6a0

0800c848 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
}
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ffdf 	bl	800c814 <_ZN8STM32DMAD1Ev>
 800c856:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f010 fdd9 	bl	801d412 <_ZdlPvj>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
	...

0800c86c <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800c874:	4b12      	ldr	r3, [pc, #72]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c876:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c87a:	4a11      	ldr	r2, [pc, #68]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c87c:	f043 0310 	orr.w	r3, r3, #16
 800c880:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 800c884:	4b0e      	ldr	r3, [pc, #56]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c886:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800c88a:	f003 0310 	and.w	r3, r3, #16
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 800c892:	4b0b      	ldr	r3, [pc, #44]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c896:	4a0a      	ldr	r2, [pc, #40]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c898:	f043 0310 	orr.w	r3, r3, #16
 800c89c:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800c89e:	4b08      	ldr	r3, [pc, #32]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a2:	4a07      	ldr	r2, [pc, #28]	; (800c8c0 <_ZN8STM32DMA10initializeEv+0x54>)
 800c8a4:	f023 0310 	bic.w	r3, r3, #16
 800c8a8:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 800c8aa:	4b06      	ldr	r3, [pc, #24]	; (800c8c4 <_ZN8STM32DMA10initializeEv+0x58>)
 800c8ac:	4a06      	ldr	r2, [pc, #24]	; (800c8c8 <_ZN8STM32DMA10initializeEv+0x5c>)
 800c8ae:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 800c8b0:	205a      	movs	r0, #90	; 0x5a
 800c8b2:	f7ff fe87 	bl	800c5c4 <__NVIC_EnableIRQ>
}
 800c8b6:	bf00      	nop
 800c8b8:	3710      	adds	r7, #16
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	58024400 	.word	0x58024400
 800c8c4:	24000120 	.word	0x24000120
 800c8c8:	0800c787 	.word	0x0800c787

0800c8cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60fb      	str	r3, [r7, #12]

    switch (format)
 800c8dc:	78fb      	ldrb	r3, [r7, #3]
 800c8de:	2b0b      	cmp	r3, #11
 800c8e0:	d826      	bhi.n	800c930 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 800c8e2:	a201      	add	r2, pc, #4	; (adr r2, 800c8e8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c925 	.word	0x0800c925
 800c8ec:	0800c91f 	.word	0x0800c91f
 800c8f0:	0800c919 	.word	0x0800c919
 800c8f4:	0800c931 	.word	0x0800c931
 800c8f8:	0800c931 	.word	0x0800c931
 800c8fc:	0800c931 	.word	0x0800c931
 800c900:	0800c931 	.word	0x0800c931
 800c904:	0800c92b 	.word	0x0800c92b
 800c908:	0800c92b 	.word	0x0800c92b
 800c90c:	0800c92b 	.word	0x0800c92b
 800c910:	0800c92b 	.word	0x0800c92b
 800c914:	0800c92b 	.word	0x0800c92b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]
        break;
 800c91c:	e00e      	b.n	800c93c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800c91e:	2301      	movs	r3, #1
 800c920:	60fb      	str	r3, [r7, #12]
        break;
 800c922:	e00b      	b.n	800c93c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800c924:	2302      	movs	r3, #2
 800c926:	60fb      	str	r3, [r7, #12]
        break;
 800c928:	e008      	b.n	800c93c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800c92a:	2305      	movs	r3, #5
 800c92c:	60fb      	str	r3, [r7, #12]
        break;
 800c92e:	e005      	b.n	800c93c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 800c930:	4b05      	ldr	r3, [pc, #20]	; (800c948 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 800c932:	4a06      	ldr	r2, [pc, #24]	; (800c94c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 800c934:	2165      	movs	r1, #101	; 0x65
 800c936:	4806      	ldr	r0, [pc, #24]	; (800c950 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 800c938:	f010 fd9a 	bl	801d470 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800c93c:	68fb      	ldr	r3, [r7, #12]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	0801eddc 	.word	0x0801eddc
 800c94c:	0801edf8 	.word	0x0801edf8
 800c950:	0801ee44 	.word	0x0801ee44

0800c954 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	460b      	mov	r3, r1
 800c95e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800c960:	2300      	movs	r3, #0
 800c962:	60fb      	str	r3, [r7, #12]

    switch (format)
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	2b0a      	cmp	r3, #10
 800c968:	d821      	bhi.n	800c9ae <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 800c96a:	a201      	add	r2, pc, #4	; (adr r2, 800c970 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800c9a9 	.word	0x0800c9a9
 800c974:	0800c9a3 	.word	0x0800c9a3
 800c978:	0800c99d 	.word	0x0800c99d
 800c97c:	0800c9af 	.word	0x0800c9af
 800c980:	0800c9af 	.word	0x0800c9af
 800c984:	0800c9af 	.word	0x0800c9af
 800c988:	0800c9af 	.word	0x0800c9af
 800c98c:	0800c9a3 	.word	0x0800c9a3
 800c990:	0800c9a3 	.word	0x0800c9a3
 800c994:	0800c9a3 	.word	0x0800c9a3
 800c998:	0800c9a3 	.word	0x0800c9a3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 800c99c:	2300      	movs	r3, #0
 800c99e:	60fb      	str	r3, [r7, #12]
        break;
 800c9a0:	e00b      	b.n	800c9ba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 800c9a2:	2301      	movs	r3, #1
 800c9a4:	60fb      	str	r3, [r7, #12]
        break;
 800c9a6:	e008      	b.n	800c9ba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 800c9a8:	2302      	movs	r3, #2
 800c9aa:	60fb      	str	r3, [r7, #12]
        break;
 800c9ac:	e005      	b.n	800c9ba <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 800c9ae:	4b05      	ldr	r3, [pc, #20]	; (800c9c4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 800c9b0:	4a05      	ldr	r2, [pc, #20]	; (800c9c8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 800c9b2:	2186      	movs	r1, #134	; 0x86
 800c9b4:	4805      	ldr	r0, [pc, #20]	; (800c9cc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 800c9b6:	f010 fd5b 	bl	801d470 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3710      	adds	r7, #16
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd80      	pop	{r7, pc}
 800c9c4:	0801eddc 	.word	0x0801eddc
 800c9c8:	0801ee70 	.word	0x0801ee70
 800c9cc:	0801ee44 	.word	0x0801ee44

0800c9d0 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 800c9d8:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 800c9e8:	b590      	push	{r4, r7, lr}
 800c9ea:	b089      	sub	sp, #36	; 0x24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	7f5b      	ldrb	r3, [r3, #29]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f7ff ff67 	bl	800c8cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800c9fe:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	7f9b      	ldrb	r3, [r3, #30]
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff ff60 	bl	800c8cc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ca0c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	7f9b      	ldrb	r3, [r3, #30]
 800ca12:	4619      	mov	r1, r3
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f7ff ff9d 	bl	800c954 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ca1a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	8b5b      	ldrh	r3, [r3, #26]
 800ca20:	461a      	mov	r2, r3
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	8a9b      	ldrh	r3, [r3, #20]
 800ca26:	1ad2      	subs	r2, r2, r3
 800ca28:	4b92      	ldr	r3, [pc, #584]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	8b5b      	ldrh	r3, [r3, #26]
 800ca30:	461a      	mov	r2, r3
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	8a9b      	ldrh	r3, [r3, #20]
 800ca36:	1ad2      	subs	r2, r2, r3
 800ca38:	4b8e      	ldr	r3, [pc, #568]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca3a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	8b1b      	ldrh	r3, [r3, #24]
 800ca40:	461a      	mov	r2, r3
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	8a9b      	ldrh	r3, [r3, #20]
 800ca46:	1ad2      	subs	r2, r2, r3
 800ca48:	4b8a      	ldr	r3, [pc, #552]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca4a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800ca4c:	4a89      	ldr	r2, [pc, #548]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	8adb      	ldrh	r3, [r3, #22]
 800ca56:	461a      	mov	r2, r3
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	8a9b      	ldrh	r3, [r3, #20]
 800ca5c:	041b      	lsls	r3, r3, #16
 800ca5e:	431a      	orrs	r2, r3
 800ca60:	4b84      	ldr	r3, [pc, #528]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	4b82      	ldr	r3, [pc, #520]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	4b80      	ldr	r3, [pc, #512]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800ca72:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca7c:	d037      	beq.n	800caee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
 800ca7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca82:	f200 80e3 	bhi.w	800cc4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ca86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca8a:	d015      	beq.n	800cab8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800ca8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca90:	f200 80dc 	bhi.w	800cc4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ca94:	2b80      	cmp	r3, #128	; 0x80
 800ca96:	d045      	beq.n	800cb24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>
 800ca98:	2b80      	cmp	r3, #128	; 0x80
 800ca9a:	f200 80d7 	bhi.w	800cc4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800ca9e:	2b40      	cmp	r3, #64	; 0x40
 800caa0:	f000 80bf 	beq.w	800cc22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800caa4:	2b40      	cmp	r3, #64	; 0x40
 800caa6:	f200 80d1 	bhi.w	800cc4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
 800caaa:	2b04      	cmp	r3, #4
 800caac:	f000 80a4 	beq.w	800cbf8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
 800cab0:	2b20      	cmp	r3, #32
 800cab2:	f000 80b6 	beq.w	800cc22 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
 800cab6:	e0c9      	b.n	800cc4c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x264>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	7f1b      	ldrb	r3, [r3, #28]
 800cabc:	061b      	lsls	r3, r3, #24
 800cabe:	4619      	mov	r1, r3
 800cac0:	4a6c      	ldr	r2, [pc, #432]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cac2:	4b6d      	ldr	r3, [pc, #436]	; (800cc78 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 800cac4:	430b      	orrs	r3, r1
 800cac6:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	330c      	adds	r3, #12
 800cacc:	4c69      	ldr	r4, [pc, #420]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff fdba 	bl	800c648 <_ZNK8touchgfx9colortypecvmEv>
 800cad4:	4603      	mov	r3, r0
 800cad6:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cad8:	4a66      	ldr	r2, [pc, #408]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	691a      	ldr	r2, [r3, #16]
 800cae2:	4b64      	ldr	r3, [pc, #400]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cae4:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cae6:	4b63      	ldr	r3, [pc, #396]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cae8:	4a64      	ldr	r2, [pc, #400]	; (800cc7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800caea:	601a      	str	r2, [r3, #0]
        break;
 800caec:	e0d9      	b.n	800cca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	7f1b      	ldrb	r3, [r3, #28]
 800caf2:	061b      	lsls	r3, r3, #24
 800caf4:	4619      	mov	r1, r3
 800caf6:	4a5f      	ldr	r2, [pc, #380]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800caf8:	4b61      	ldr	r3, [pc, #388]	; (800cc80 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 800cafa:	430b      	orrs	r3, r1
 800cafc:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	330c      	adds	r3, #12
 800cb02:	4c5c      	ldr	r4, [pc, #368]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb04:	4618      	mov	r0, r3
 800cb06:	f7ff fd9f 	bl	800c648 <_ZNK8touchgfx9colortypecvmEv>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	6223      	str	r3, [r4, #32]
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cb0e:	4a59      	ldr	r2, [pc, #356]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	691a      	ldr	r2, [r3, #16]
 800cb18:	4b56      	ldr	r3, [pc, #344]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb1a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cb1c:	4b55      	ldr	r3, [pc, #340]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb1e:	4a57      	ldr	r2, [pc, #348]	; (800cc7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cb20:	601a      	str	r2, [r3, #0]
        break;
 800cb22:	e0be      	b.n	800cca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	60fb      	str	r3, [r7, #12]
            bool blend = true;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	77fb      	strb	r3, [r7, #31]

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	7f1b      	ldrb	r3, [r3, #28]
 800cb32:	061b      	lsls	r3, r3, #24
 800cb34:	461a      	mov	r2, r3
 800cb36:	69bb      	ldr	r3, [r7, #24]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	4a4e      	ldr	r2, [pc, #312]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb40:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cb42:	4a4c      	ldr	r2, [pc, #304]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	691a      	ldr	r2, [r3, #16]
 800cb4c:	4b49      	ldr	r3, [pc, #292]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb4e:	615a      	str	r2, [r3, #20]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	1d1a      	adds	r2, r3, #4
 800cb54:	4b47      	ldr	r3, [pc, #284]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb56:	62da      	str	r2, [r3, #44]	; 0x2c

            switch ((Bitmap::ClutFormat)palette->format)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d002      	beq.n	800cb68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x180>
 800cb62:	2b01      	cmp	r3, #1
 800cb64:	d00d      	beq.n	800cb82 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19a>
 800cb66:	e020      	b.n	800cbaa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 800cb68:	4b42      	ldr	r3, [pc, #264]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb6a:	69da      	ldr	r2, [r3, #28]
 800cb6c:	4b45      	ldr	r3, [pc, #276]	; (800cc84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cb6e:	4013      	ands	r3, r2
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	8852      	ldrh	r2, [r2, #2]
 800cb74:	3a01      	subs	r2, #1
 800cb76:	0212      	lsls	r2, r2, #8
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4a3e      	ldr	r2, [pc, #248]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb7c:	430b      	orrs	r3, r1
 800cb7e:	61d3      	str	r3, [r2, #28]
                break;
 800cb80:	e01a      	b.n	800cbb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if (blitOp.alpha == 255)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	7f1b      	ldrb	r3, [r3, #28]
 800cb86:	2bff      	cmp	r3, #255	; 0xff
 800cb88:	d101      	bne.n	800cb8e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a6>
                {
                    blend = false;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800cb8e:	4b39      	ldr	r3, [pc, #228]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cb90:	69da      	ldr	r2, [r3, #28]
 800cb92:	4b3c      	ldr	r3, [pc, #240]	; (800cc84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 800cb94:	4013      	ands	r3, r2
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	8852      	ldrh	r2, [r2, #2]
 800cb9a:	3a01      	subs	r2, #1
 800cb9c:	0212      	lsls	r2, r2, #8
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	4a34      	ldr	r2, [pc, #208]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cba2:	f043 0310 	orr.w	r3, r3, #16
 800cba6:	61d3      	str	r3, [r2, #28]
                break;
 800cba8:	e006      	b.n	800cbb8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>
            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 800cbaa:	4b37      	ldr	r3, [pc, #220]	; (800cc88 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 800cbac:	4a37      	ldr	r2, [pc, #220]	; (800cc8c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 800cbae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cbb2:	4837      	ldr	r0, [pc, #220]	; (800cc90 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800cbb4:	f010 fc5c 	bl	801d470 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800cbb8:	4b2e      	ldr	r3, [pc, #184]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbba:	69db      	ldr	r3, [r3, #28]
 800cbbc:	4a2d      	ldr	r2, [pc, #180]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbbe:	f043 0320 	orr.w	r3, r3, #32
 800cbc2:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800cbc4:	bf00      	nop
 800cbc6:	4b2b      	ldr	r3, [pc, #172]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbc8:	69db      	ldr	r3, [r3, #28]
 800cbca:	f003 0320 	and.w	r3, r3, #32
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	bf14      	ite	ne
 800cbd2:	2301      	movne	r3, #1
 800cbd4:	2300      	moveq	r3, #0
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1f4      	bne.n	800cbc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1de>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800cbdc:	4b25      	ldr	r3, [pc, #148]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbde:	2210      	movs	r2, #16
 800cbe0:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if (blend)
 800cbe2:	7ffb      	ldrb	r3, [r7, #31]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d003      	beq.n	800cbf0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cbe8:	4b22      	ldr	r3, [pc, #136]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbea:	4a24      	ldr	r2, [pc, #144]	; (800cc7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cbec:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 800cbee:	e058      	b.n	800cca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800cbf0:	4b20      	ldr	r3, [pc, #128]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cbf2:	4a28      	ldr	r2, [pc, #160]	; (800cc94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800cbf4:	601a      	str	r2, [r3, #0]
        break;
 800cbf6:	e054      	b.n	800cca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	7f1b      	ldrb	r3, [r3, #28]
 800cbfc:	061b      	lsls	r3, r3, #24
 800cbfe:	461a      	mov	r2, r3
 800cc00:	69bb      	ldr	r3, [r7, #24]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	4a1b      	ldr	r2, [pc, #108]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc0a:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cc0c:	4a19      	ldr	r2, [pc, #100]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	691a      	ldr	r2, [r3, #16]
 800cc16:	4b17      	ldr	r3, [pc, #92]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc18:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cc1a:	4b16      	ldr	r3, [pc, #88]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc1c:	4a17      	ldr	r2, [pc, #92]	; (800cc7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cc1e:	601a      	str	r2, [r3, #0]
        break;
 800cc20:	e03f      	b.n	800cca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	7f1b      	ldrb	r3, [r3, #28]
 800cc26:	061b      	lsls	r3, r3, #24
 800cc28:	461a      	mov	r2, r3
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	4313      	orrs	r3, r2
 800cc2e:	4a11      	ldr	r2, [pc, #68]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc34:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cc36:	4a0f      	ldr	r2, [pc, #60]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	691a      	ldr	r2, [r3, #16]
 800cc40:	4b0c      	ldr	r3, [pc, #48]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc42:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800cc44:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc46:	4a0d      	ldr	r2, [pc, #52]	; (800cc7c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800cc48:	601a      	str	r2, [r3, #0]
        break;
 800cc4a:	e02a      	b.n	800cca2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	7f1b      	ldrb	r3, [r3, #28]
 800cc50:	061b      	lsls	r3, r3, #24
 800cc52:	461a      	mov	r2, r3
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	4313      	orrs	r3, r2
 800cc58:	4a06      	ldr	r2, [pc, #24]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc5e:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	7f5a      	ldrb	r2, [r3, #29]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	7f9b      	ldrb	r3, [r3, #30]
 800cc68:	429a      	cmp	r2, r3
 800cc6a:	d015      	beq.n	800cc98 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 800cc6c:	4b01      	ldr	r3, [pc, #4]	; (800cc74 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800cc6e:	4a09      	ldr	r2, [pc, #36]	; (800cc94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800cc70:	601a      	str	r2, [r3, #0]
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }

        break;
 800cc72:	e015      	b.n	800cca0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 800cc74:	52001000 	.word	0x52001000
 800cc78:	0002000a 	.word	0x0002000a
 800cc7c:	00020201 	.word	0x00020201
 800cc80:	00020009 	.word	0x00020009
 800cc84:	ffff00ef 	.word	0xffff00ef
 800cc88:	0801eebc 	.word	0x0801eebc
 800cc8c:	0801eed8 	.word	0x0801eed8
 800cc90:	0801ee44 	.word	0x0801ee44
 800cc94:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 800cc98:	4b04      	ldr	r3, [pc, #16]	; (800ccac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 800cc9a:	f240 2201 	movw	r2, #513	; 0x201
 800cc9e:	601a      	str	r2, [r3, #0]
        break;
 800cca0:	bf00      	nop
    }
}
 800cca2:	bf00      	nop
 800cca4:	3724      	adds	r7, #36	; 0x24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd90      	pop	{r4, r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	52001000 	.word	0x52001000

0800ccb0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 800ccb0:	b590      	push	{r4, r7, lr}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	7f9b      	ldrb	r3, [r3, #30]
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f7ff fe47 	bl	800c954 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800ccc6:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800ccc8:	4a2f      	ldr	r2, [pc, #188]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	8adb      	ldrh	r3, [r3, #22]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	8a9b      	ldrh	r3, [r3, #20]
 800ccd8:	041b      	lsls	r3, r3, #16
 800ccda:	431a      	orrs	r2, r3
 800ccdc:	4b2a      	ldr	r3, [pc, #168]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ccde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	691a      	ldr	r2, [r3, #16]
 800cce4:	4b28      	ldr	r3, [pc, #160]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cce6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	8b5b      	ldrh	r3, [r3, #26]
 800ccec:	461a      	mov	r2, r3
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	8a9b      	ldrh	r3, [r3, #20]
 800ccf2:	1ad2      	subs	r2, r2, r3
 800ccf4:	4b24      	ldr	r3, [pc, #144]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800ccf6:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b08      	cmp	r3, #8
 800ccfe:	d12e      	bne.n	800cd5e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	8b5b      	ldrh	r3, [r3, #26]
 800cd04:	461a      	mov	r2, r3
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	8a9b      	ldrh	r3, [r3, #20]
 800cd0a:	1ad2      	subs	r2, r2, r3
 800cd0c:	4b1e      	ldr	r3, [pc, #120]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd0e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	8b5b      	ldrh	r3, [r3, #26]
 800cd14:	461a      	mov	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	8a9b      	ldrh	r3, [r3, #20]
 800cd1a:	1ad2      	subs	r2, r2, r3
 800cd1c:	4b1a      	ldr	r3, [pc, #104]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd1e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800cd20:	4a19      	ldr	r2, [pc, #100]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	7f1b      	ldrb	r3, [r3, #28]
 800cd2a:	061b      	lsls	r3, r3, #24
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	4a16      	ldr	r2, [pc, #88]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd30:	4b16      	ldr	r3, [pc, #88]	; (800cd8c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xdc>)
 800cd32:	430b      	orrs	r3, r1
 800cd34:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	330c      	adds	r3, #12
 800cd3a:	4c13      	ldr	r4, [pc, #76]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff fc83 	bl	800c648 <_ZNK8touchgfx9colortypecvmEv>
 800cd42:	4603      	mov	r3, r0
 800cd44:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	691a      	ldr	r2, [r3, #16]
 800cd4a:	4b0f      	ldr	r3, [pc, #60]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd4c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	691a      	ldr	r2, [r3, #16]
 800cd52:	4b0d      	ldr	r3, [pc, #52]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd54:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 800cd56:	4b0c      	ldr	r3, [pc, #48]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd58:	4a0d      	ldr	r2, [pc, #52]	; (800cd90 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe0>)
 800cd5a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800cd5c:	e010      	b.n	800cd80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd0>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800cd5e:	4a0a      	ldr	r2, [pc, #40]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd66:	2200      	movs	r2, #0
 800cd68:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	330c      	adds	r3, #12
 800cd6e:	4c06      	ldr	r4, [pc, #24]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff fc69 	bl	800c648 <_ZNK8touchgfx9colortypecvmEv>
 800cd76:	4603      	mov	r3, r0
 800cd78:	63a3      	str	r3, [r4, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 800cd7a:	4b03      	ldr	r3, [pc, #12]	; (800cd88 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xd8>)
 800cd7c:	4a05      	ldr	r2, [pc, #20]	; (800cd94 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe4>)
 800cd7e:	601a      	str	r2, [r3, #0]
}
 800cd80:	bf00      	nop
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd90      	pop	{r4, r7, pc}
 800cd88:	52001000 	.word	0x52001000
 800cd8c:	00010009 	.word	0x00010009
 800cd90:	00020201 	.word	0x00020201
 800cd94:	00030201 	.word	0x00030201

0800cd98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	4a05      	ldr	r2, [pc, #20]	; (800cdb8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f7ff fc59 	bl	800c660 <_ZN8touchgfx9DMA_QueueD1Ev>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	0801fab8 	.word	0x0801fab8

0800cdbc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	6078      	str	r0, [r7, #4]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff ffe7 	bl	800cd98 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800cdca:	2114      	movs	r1, #20
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f010 fb20 	bl	801d412 <_ZdlPvj>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 800cde4:	4a04      	ldr	r2, [pc, #16]	; (800cdf8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6013      	str	r3, [r2, #0]
    }
 800cdea:	bf00      	nop
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr
 800cdf6:	bf00      	nop
 800cdf8:	2401aa98 	.word	0x2401aa98

0800cdfc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800ce0a:	4a0b      	ldr	r2, [pc, #44]	; (800ce38 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	601a      	str	r2, [r3, #0]
        : presenterStorage(pres),
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	605a      	str	r2, [r3, #4]
          screenStorage(scr),
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	609a      	str	r2, [r3, #8]
          transitionStorage(tra),
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	60da      	str	r2, [r3, #12]
          frontendApplication(app)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	69ba      	ldr	r2, [r7, #24]
 800ce26:	611a      	str	r2, [r3, #16]
    {
    }
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	0801f7d8 	.word	0x0801f7d8

0800ce3c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800ce3c:	b480      	push	{r7}
 800ce3e:	b083      	sub	sp, #12
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
    {
 800ce44:	4a04      	ldr	r2, [pc, #16]	; (800ce58 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	601a      	str	r2, [r3, #0]
    }
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	370c      	adds	r7, #12
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr
 800ce58:	0801f7d8 	.word	0x0801f7d8

0800ce5c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
    }
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ffe9 	bl	800ce3c <_ZN8touchgfx7MVPHeapD1Ev>
 800ce6a:	2114      	movs	r1, #20
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f010 fad0 	bl	801d412 <_ZdlPvj>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
    {
 800ce84:	4a04      	ldr	r2, [pc, #16]	; (800ce98 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	601a      	str	r2, [r3, #0]
    }
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	0801fca8 	.word	0x0801fca8

0800ce9c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
    }
 800cea4:	6878      	ldr	r0, [r7, #4]
 800cea6:	f7ff ffe9 	bl	800ce7c <_ZN8touchgfx3LCDD1Ev>
 800ceaa:	2108      	movs	r1, #8
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f010 fab0 	bl	801d412 <_ZdlPvj>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
            : startX(0),
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	801a      	strh	r2, [r3, #0]
              startY(0),
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	805a      	strh	r2, [r3, #2]
              downX(0),
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	809a      	strh	r2, [r3, #4]
              downY(0),
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	80da      	strh	r2, [r3, #6]
              tickCount(0),
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2200      	movs	r2, #0
 800cee0:	811a      	strh	r2, [r3, #8]
              velocityX(0),
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	815a      	strh	r2, [r3, #10]
              velocityY(0),
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	819a      	strh	r2, [r3, #12]
              inProgress(false)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	739a      	strb	r2, [r3, #14]
        {
        }
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4618      	mov	r0, r3
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 800cf02:	b580      	push	{r7, lr}
 800cf04:	b082      	sub	sp, #8
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff ffd5 	bl	800cebc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2200      	movs	r2, #0
 800cf16:	611a      	str	r2, [r3, #16]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	829a      	strh	r2, [r3, #20]
    {
    }
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4618      	mov	r0, r3
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 800cf36:	4a55      	ldr	r2, [pc, #340]	; (800d08c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	601a      	str	r2, [r3, #0]
        : dma(dmaInterface),
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	605a      	str	r2, [r3, #4]
          lcdRef(display),
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	609a      	str	r2, [r3, #8]
          touchController(touchCtrl),
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	60da      	str	r2, [r3, #12]
          mcuInstrumentation(0),
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	611a      	str	r2, [r3, #16]
          buttonController(0),
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	615a      	str	r2, [r3, #20]
          frameBufferAllocator(0),
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	619a      	str	r2, [r3, #24]
          gestures(),
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	331c      	adds	r3, #28
 800cf64:	4618      	mov	r0, r3
 800cf66:	f7ff ffcc 	bl	800cf02 <_ZN8touchgfx8GesturesC1Ev>
          nativeDisplayOrientation(ORIENTATION_LANDSCAPE),
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          taskDelayFunc(0),
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	639a      	str	r2, [r3, #56]	; 0x38
          frameBuffer0(0),
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	63da      	str	r2, [r3, #60]	; 0x3c
          frameBuffer1(0),
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	641a      	str	r2, [r3, #64]	; 0x40
          frameBuffer2(0),
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2200      	movs	r2, #0
 800cf88:	645a      	str	r2, [r3, #68]	; 0x44
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
          fingerSize(1),
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2201      	movs	r2, #1
 800cf96:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
          lockDMAToPorch(false),
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
          frameBufferUpdatedThisFrame(false),
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
          auxiliaryLCD(0),
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	2200      	movs	r2, #0
 800cfae:	64da      	str	r2, [r3, #76]	; 0x4c
          partialFrameBufferRect(),
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	3350      	adds	r3, #80	; 0x50
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fd fa88 	bl	800a4ca <_ZN8touchgfx4RectC1Ev>
          useAuxiliaryLCD(false),
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
          listener(0),
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	65da      	str	r2, [r3, #92]	; 0x5c
          lastX(0),
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2200      	movs	r2, #0
 800cfcc:	661a      	str	r2, [r3, #96]	; 0x60
          lastY(0),
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	665a      	str	r2, [r3, #100]	; 0x64
          touchSampleRate(1),
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
          mcuLoadPct(0),
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
          vSyncCnt(0),
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
          vSyncForFrame(1),
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2201      	movs	r2, #1
 800cff0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
          vSyncCompensationEnabled(false),
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
          clientDirty(false),
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
          swapRequested(false),
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
          lastTouched(false),
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
          updateMCULoad(0),
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          cc_begin(0),
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2200      	movs	r2, #0
 800d020:	675a      	str	r2, [r3, #116]	; 0x74
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
          displayOrientationChangeRequested(false),
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2200      	movs	r2, #0
 800d02e:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
          useDMAAcceleration(true),
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
          lastRenderMethod(HARDWARE)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
        instance = this;
 800d042:	4a13      	ldr	r2, [pc, #76]	; (800d090 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800d048:	4a12      	ldr	r2, [pc, #72]	; (800d094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800d04a:	8b3b      	ldrh	r3, [r7, #24]
 800d04c:	8013      	strh	r3, [r2, #0]
 800d04e:	4b11      	ldr	r3, [pc, #68]	; (800d094 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 800d050:	881a      	ldrh	r2, [r3, #0]
 800d052:	4b11      	ldr	r3, [pc, #68]	; (800d098 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 800d054:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800d056:	4a11      	ldr	r2, [pc, #68]	; (800d09c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800d058:	8bbb      	ldrh	r3, [r7, #28]
 800d05a:	8013      	strh	r3, [r2, #0]
 800d05c:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 800d05e:	881a      	ldrh	r2, [r3, #0]
 800d060:	4b0f      	ldr	r3, [pc, #60]	; (800d0a0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 800d062:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 800d064:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 800d066:	2200      	movs	r2, #0
 800d068:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800d06a:	8b3a      	ldrh	r2, [r7, #24]
 800d06c:	8bbb      	ldrh	r3, [r7, #28]
 800d06e:	429a      	cmp	r2, r3
 800d070:	bf34      	ite	cc
 800d072:	2301      	movcc	r3, #1
 800d074:	2300      	movcs	r3, #0
 800d076:	b2db      	uxtb	r3, r3
 800d078:	461a      	mov	r2, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	0801f990 	.word	0x0801f990
 800d090:	2401aa3c 	.word	0x2401aa3c
 800d094:	2401aa30 	.word	0x2401aa30
 800d098:	2401aa36 	.word	0x2401aa36
 800d09c:	2401aa32 	.word	0x2401aa32
 800d0a0:	2401aa38 	.word	0x2401aa38
 800d0a4:	2401aa34 	.word	0x2401aa34

0800d0a8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	6039      	str	r1, [r7, #0]
    {
        app.gotoscreenScreenNoTransition();
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fc ff5d 	bl	8009f74 <_ZN23FrontendApplicationBase28gotoscreenScreenNoTransitionEv>
    }
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b086      	sub	sp, #24
 800d0c8:	af02      	add	r7, sp, #8
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
 800d0d0:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	9300      	str	r3, [sp, #0]
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	68b9      	ldr	r1, [r7, #8]
 800d0de:	f7ff fe8d 	bl	800cdfc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 800d0e2:	4a04      	ldr	r2, [pc, #16]	; (800d0f4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	601a      	str	r2, [r3, #0]
    {

    }
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	0801f7c4 	.word	0x0801f7c4

0800d0f8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	4801      	ldr	r0, [pc, #4]	; (800d104 <__tcf_0+0xc>)
 800d0fe:	f000 f965 	bl	800d3cc <_ZN12FrontendHeapD1Ev>
 800d102:	bd80      	pop	{r7, pc}
 800d104:	24019874 	.word	0x24019874

0800d108 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 800d10c:	4b11      	ldr	r3, [pc, #68]	; (800d154 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f3bf 8f5b 	dmb	ish
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	2b00      	cmp	r3, #0
 800d11a:	bf0c      	ite	eq
 800d11c:	2301      	moveq	r3, #1
 800d11e:	2300      	movne	r3, #0
 800d120:	b2db      	uxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	d013      	beq.n	800d14e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800d126:	480b      	ldr	r0, [pc, #44]	; (800d154 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800d128:	f010 f975 	bl	801d416 <__cxa_guard_acquire>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	bf14      	ite	ne
 800d132:	2301      	movne	r3, #1
 800d134:	2300      	moveq	r3, #0
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d008      	beq.n	800d14e <_ZN12FrontendHeap11getInstanceEv+0x46>
 800d13c:	4806      	ldr	r0, [pc, #24]	; (800d158 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 800d13e:	f000 f867 	bl	800d210 <_ZN12FrontendHeapC1Ev>
 800d142:	4806      	ldr	r0, [pc, #24]	; (800d15c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 800d144:	f010 f9b2 	bl	801d4ac <atexit>
 800d148:	4802      	ldr	r0, [pc, #8]	; (800d154 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 800d14a:	f010 f970 	bl	801d42e <__cxa_guard_release>
        return instance;
 800d14e:	4b02      	ldr	r3, [pc, #8]	; (800d158 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 800d150:	4618      	mov	r0, r3
 800d152:	bd80      	pop	{r7, pc}
 800d154:	24019ba0 	.word	0x24019ba0
 800d158:	24019874 	.word	0x24019874
 800d15c:	0800d0f9 	.word	0x0800d0f9

0800d160 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	4a05      	ldr	r2, [pc, #20]	; (800d180 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	601a      	str	r2, [r3, #0]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	4618      	mov	r0, r3
 800d172:	f7ff fe63 	bl	800ce3c <_ZN8touchgfx7MVPHeapD1Ev>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	4618      	mov	r0, r3
 800d17a:	3708      	adds	r7, #8
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	0801f7c4 	.word	0x0801f7c4

0800d184 <_ZN16FrontendHeapBaseD0Ev>:
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff ffe7 	bl	800d160 <_ZN16FrontendHeapBaseD1Ev>
 800d192:	2114      	movs	r1, #20
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f010 f93c 	bl	801d412 <_ZdlPvj>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 fdd4 	bl	800dd5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d1b4:	4a03      	ldr	r2, [pc, #12]	; (800d1c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3708      	adds	r7, #8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	0801f790 	.word	0x0801f790

0800d1c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f000 fdc2 	bl	800dd5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d1d8:	4a03      	ldr	r2, [pc, #12]	; (800d1e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}
 800d1e8:	0801f75c 	.word	0x0801f75c

0800d1ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 fdb0 	bl	800dd5c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800d1fc:	4a03      	ldr	r2, [pc, #12]	; (800d20c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	601a      	str	r2, [r3, #0]
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	4618      	mov	r0, r3
 800d206:	3708      	adds	r7, #8
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}
 800d20c:	0801f728 	.word	0x0801f728

0800d210 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800d210:	b590      	push	{r4, r7, lr}
 800d212:	b085      	sub	sp, #20
 800d214:	af02      	add	r7, sp, #8
 800d216:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f103 0114 	add.w	r1, r3, #20
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f503 74dc 	add.w	r4, r3, #440	; 0x1b8
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
                     app(model, *this)
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	4623      	mov	r3, r4
 800d236:	f7ff ff45 	bl	800d0c4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 800d23a:	4a18      	ldr	r2, [pc, #96]	; (800d29c <_ZN12FrontendHeapC1Ev+0x8c>)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3314      	adds	r3, #20
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff ffad 	bl	800d1a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	332c      	adds	r3, #44	; 0x2c
 800d24e:	4618      	mov	r0, r3
 800d250:	f7ff ffba 	bl	800d1c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7ff ffc6 	bl	800d1ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800d266:	4618      	mov	r0, r3
 800d268:	f7fe fc88 	bl	800bb7c <_ZN5ModelC1Ev>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	4619      	mov	r1, r3
 800d27c:	f7fe fc68 	bl	800bb50 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800d288:	4619      	mov	r1, r3
 800d28a:	4610      	mov	r0, r2
 800d28c:	f7ff ff0c 	bl	800d0a8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4618      	mov	r0, r3
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	bd90      	pop	{r4, r7, pc}
 800d29a:	bf00      	nop
 800d29c:	0801f714 	.word	0x0801f714

0800d2a0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af02      	add	r7, sp, #8
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	8bbb      	ldrh	r3, [r7, #28]
 800d2b2:	9301      	str	r3, [sp, #4]
 800d2b4:	8b3b      	ldrh	r3, [r7, #24]
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	68b9      	ldr	r1, [r7, #8]
 800d2be:	f7ff fe33 	bl	800cf28 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 800d2c2:	4a04      	ldr	r2, [pc, #16]	; (800d2d4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	601a      	str	r2, [r3, #0]
    }
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop
 800d2d4:	0801f7e8 	.word	0x0801f7e8

0800d2d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af02      	add	r7, sp, #8
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	60b9      	str	r1, [r7, #8]
 800d2e2:	607a      	str	r2, [r7, #4]
 800d2e4:	603b      	str	r3, [r7, #0]
 800d2e6:	68f8      	ldr	r0, [r7, #12]
 800d2e8:	8bbb      	ldrh	r3, [r7, #28]
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	8b3b      	ldrh	r3, [r7, #24]
 800d2ee:	9300      	str	r3, [sp, #0]
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	68b9      	ldr	r1, [r7, #8]
 800d2f6:	f7ff ffd3 	bl	800d2a0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d2fa:	4a04      	ldr	r2, [pc, #16]	; (800d30c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	601a      	str	r2, [r3, #0]
    }
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4618      	mov	r0, r3
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	0801f5c8 	.word	0x0801f5c8

0800d310 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	4a04      	ldr	r2, [pc, #16]	; (800d32c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	601a      	str	r2, [r3, #0]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	370c      	adds	r7, #12
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	0801f5b0 	.word	0x0801f5b0

0800d330 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7ff ffe8 	bl	800d310 <_ZN8touchgfx15TouchControllerC1Ev>
 800d340:	4a03      	ldr	r2, [pc, #12]	; (800d350 <_ZN20STM32TouchControllerC1Ev+0x20>)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	0801f598 	.word	0x0801f598

0800d354 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 800d354:	b590      	push	{r4, r7, lr}
 800d356:	b085      	sub	sp, #20
 800d358:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800d35a:	f7fe f9c9 	bl	800b6f0 <_ZN14BitmapDatabase11getInstanceEv>
 800d35e:	4604      	mov	r4, r0
 800d360:	f7fe f9d0 	bl	800b704 <_ZN14BitmapDatabase15getInstanceSizeEv>
 800d364:	4603      	mov	r3, r0
 800d366:	4619      	mov	r1, r3
 800d368:	2300      	movs	r3, #0
 800d36a:	9300      	str	r3, [sp, #0]
 800d36c:	2300      	movs	r3, #0
 800d36e:	2200      	movs	r2, #0
 800d370:	4620      	mov	r0, r4
 800d372:	f006 fde3 	bl	8013f3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 800d376:	4809      	ldr	r0, [pc, #36]	; (800d39c <touchgfx_init+0x48>)
 800d378:	f7ff fd30 	bl	800cddc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800d37c:	2000      	movs	r0, #0
 800d37e:	f7fe fb05 	bl	800b98c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 800d382:	4807      	ldr	r0, [pc, #28]	; (800d3a0 <touchgfx_init+0x4c>)
 800d384:	f006 fc92 	bl	8013cac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 800d388:	f7ff febe 	bl	800d108 <_ZN12FrontendHeap11getInstanceEv>
 800d38c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800d38e:	4805      	ldr	r0, [pc, #20]	; (800d3a4 <touchgfx_init+0x50>)
 800d390:	f7fe ffca 	bl	800c328 <_ZN11TouchGFXHAL10initializeEv>
}
 800d394:	bf00      	nop
 800d396:	370c      	adds	r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd90      	pop	{r4, r7, pc}
 800d39c:	2401a9ac 	.word	0x2401a9ac
 800d3a0:	2400001c 	.word	0x2400001c
 800d3a4:	2401a9b0 	.word	0x2401a9b0

0800d3a8 <touchgfx_components_init>:

void touchgfx_components_init()
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	af00      	add	r7, sp, #0
}
 800d3ac:	bf00      	nop
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b4:	4770      	bx	lr
	...

0800d3b8 <touchgfx_taskEntry>:

void touchgfx_taskEntry()
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800d3bc:	4802      	ldr	r0, [pc, #8]	; (800d3c8 <touchgfx_taskEntry+0x10>)
 800d3be:	f000 ffda 	bl	800e376 <_ZN8touchgfx3HAL9taskEntryEv>
}
 800d3c2:	bf00      	nop
 800d3c4:	bd80      	pop	{r7, pc}
 800d3c6:	bf00      	nop
 800d3c8:	2401a9b0 	.word	0x2401a9b0

0800d3cc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	4a10      	ldr	r2, [pc, #64]	; (800d418 <_ZN12FrontendHeapD1Ev+0x4c>)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	601a      	str	r2, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fb7f 	bl	800bae4 <_ZN19FrontendApplicationD1Ev>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f000 f827 	bl	800d440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	332c      	adds	r3, #44	; 0x2c
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 f844 	bl	800d484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	3314      	adds	r3, #20
 800d400:	4618      	mov	r0, r3
 800d402:	f000 f863 	bl	800d4cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff fea9 	bl	800d160 <_ZN16FrontendHeapBaseD1Ev>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	0801f714 	.word	0x0801f714

0800d41c <_ZN12FrontendHeapD0Ev>:
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b082      	sub	sp, #8
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f7ff ffd1 	bl	800d3cc <_ZN12FrontendHeapD1Ev>
 800d42a:	f44f 714b 	mov.w	r1, #812	; 0x32c
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f00f ffef 	bl	801d412 <_ZdlPvj>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
	...

0800d440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800d440:	b580      	push	{r7, lr}
 800d442:	b082      	sub	sp, #8
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
 800d448:	4a05      	ldr	r2, [pc, #20]	; (800d460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	601a      	str	r2, [r3, #0]
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4618      	mov	r0, r3
 800d452:	f000 fc82 	bl	800dd5a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4618      	mov	r0, r3
 800d45a:	3708      	adds	r7, #8
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	0801f728 	.word	0x0801f728

0800d464 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f7ff ffe7 	bl	800d440 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d472:	2114      	movs	r1, #20
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f00f ffcc 	bl	801d412 <_ZdlPvj>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	4618      	mov	r0, r3
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	4a05      	ldr	r2, [pc, #20]	; (800d4a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	4618      	mov	r0, r3
 800d496:	f000 fc60 	bl	800dd5a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	4618      	mov	r0, r3
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	0801f75c 	.word	0x0801f75c

0800d4a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f7ff ffe7 	bl	800d484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d4b6:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f00f ffa9 	bl	801d412 <_ZdlPvj>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
	...

0800d4cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	4a05      	ldr	r2, [pc, #20]	; (800d4ec <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f000 fc3c 	bl	800dd5a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	0801f790 	.word	0x0801f790

0800d4f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7ff ffe7 	bl	800d4cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800d4fe:	2118      	movs	r1, #24
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f00f ff86 	bl	801d412 <_ZdlPvj>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	4618      	mov	r0, r3
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <_ZN8touchgfx8LCD24bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD24bpp : public LCD
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	4a05      	ldr	r2, [pc, #20]	; (800d530 <_ZN8touchgfx8LCD24bppD1Ev+0x20>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	601a      	str	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4618      	mov	r0, r3
 800d522:	f7ff fcab 	bl	800ce7c <_ZN8touchgfx3LCDD1Ev>
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4618      	mov	r0, r3
 800d52a:	3708      	adds	r7, #8
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}
 800d530:	08020064 	.word	0x08020064

0800d534 <_ZN8touchgfx8LCD24bppD0Ev>:
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ffe7 	bl	800d510 <_ZN8touchgfx8LCD24bppD1Ev>
 800d542:	2164      	movs	r1, #100	; 0x64
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f00f ff64 	bl	801d412 <_ZdlPvj>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	4618      	mov	r0, r3
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <_Z41__static_initialization_and_destruction_0ii>:
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af02      	add	r7, sp, #8
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d119      	bne.n	800d598 <_Z41__static_initialization_and_destruction_0ii+0x44>
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d114      	bne.n	800d598 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800d56e:	4818      	ldr	r0, [pc, #96]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d570:	f7ff fede 	bl	800d330 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 800d574:	4817      	ldr	r0, [pc, #92]	; (800d5d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d576:	f7ff f923 	bl	800c7c0 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800d57a:	4817      	ldr	r0, [pc, #92]	; (800d5d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d57c:	f009 fd84 	bl	8017088 <_ZN8touchgfx8LCD24bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 800d580:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d584:	9301      	str	r3, [sp, #4]
 800d586:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	4b10      	ldr	r3, [pc, #64]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d58e:	4a12      	ldr	r2, [pc, #72]	; (800d5d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d590:	4910      	ldr	r1, [pc, #64]	; (800d5d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d592:	4812      	ldr	r0, [pc, #72]	; (800d5dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d594:	f7ff fea0 	bl	800d2d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d113      	bne.n	800d5c6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d10e      	bne.n	800d5c6 <_Z41__static_initialization_and_destruction_0ii+0x72>
 800d5a8:	480c      	ldr	r0, [pc, #48]	; (800d5dc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800d5aa:	f7fe ff4d 	bl	800c448 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 800d5ae:	480c      	ldr	r0, [pc, #48]	; (800d5e0 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800d5b0:	f7fb ff44 	bl	800943c <_ZN23ApplicationFontProviderD1Ev>
static LCD24bpp display;
 800d5b4:	4808      	ldr	r0, [pc, #32]	; (800d5d8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800d5b6:	f7ff ffab 	bl	800d510 <_ZN8touchgfx8LCD24bppD1Ev>
static STM32DMA dma;
 800d5ba:	4806      	ldr	r0, [pc, #24]	; (800d5d4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800d5bc:	f7ff f92a 	bl	800c814 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 800d5c0:	4803      	ldr	r0, [pc, #12]	; (800d5d0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800d5c2:	f7fe fc59 	bl	800be78 <_ZN20STM32TouchControllerD1Ev>
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	24019ba4 	.word	0x24019ba4
 800d5d4:	24019ba8 	.word	0x24019ba8
 800d5d8:	2401a948 	.word	0x2401a948
 800d5dc:	2401a9b0 	.word	0x2401a9b0
 800d5e0:	2400001c 	.word	0x2400001c

0800d5e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800d5ec:	2301      	movs	r3, #1
    }
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 800d602:	230c      	movs	r3, #12
    }
 800d604:	4618      	mov	r0, r3
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d61c:	887a      	ldrh	r2, [r7, #2]
 800d61e:	4613      	mov	r3, r2
 800d620:	005b      	lsls	r3, r3, #1
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	3308      	adds	r3, #8
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	4413      	add	r3, r2
    }
 800d62c:	4618      	mov	r0, r3
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800d644:	887a      	ldrh	r2, [r7, #2]
 800d646:	4613      	mov	r3, r2
 800d648:	005b      	lsls	r3, r3, #1
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	3308      	adds	r3, #8
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	4413      	add	r3, r2
    }
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d668:	2301      	movs	r3, #1
    }
 800d66a:	4618      	mov	r0, r3
 800d66c:	370c      	adds	r7, #12
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr

0800d676 <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d676:	b480      	push	{r7}
 800d678:	b083      	sub	sp, #12
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d67e:	f44f 73c2 	mov.w	r3, #388	; 0x184
    }
 800d682:	4618      	mov	r0, r3
 800d684:	370c      	adds	r7, #12
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr

0800d68e <_ZN8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d68e:	b480      	push	{r7}
 800d690:	b083      	sub	sp, #12
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
 800d696:	460b      	mov	r3, r1
 800d698:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d69a:	887b      	ldrh	r3, [r7, #2]
 800d69c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d6a0:	fb02 f303 	mul.w	r3, r2, r3
 800d6a4:	3308      	adds	r3, #8
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	4413      	add	r3, r2
    }
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	370c      	adds	r7, #12
 800d6ae:	46bd      	mov	sp, r7
 800d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b4:	4770      	bx	lr

0800d6b6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI10screenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d6b6:	b480      	push	{r7}
 800d6b8:	b083      	sub	sp, #12
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
 800d6be:	460b      	mov	r3, r1
 800d6c0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d6c2:	887b      	ldrh	r3, [r7, #2]
 800d6c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d6c8:	fb02 f303 	mul.w	r3, r2, r3
 800d6cc:	3308      	adds	r3, #8
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	4413      	add	r3, r2
    }
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr

0800d6de <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 800d6e6:	2301      	movs	r3, #1
    }
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	370c      	adds	r7, #12
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f2:	4770      	bx	lr

0800d6f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800d6f4:	b480      	push	{r7}
 800d6f6:	b083      	sub	sp, #12
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 800d6fc:	2310      	movs	r3, #16
    }
 800d6fe:	4618      	mov	r0, r3
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <_ZN8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 800d70a:	b480      	push	{r7}
 800d70c:	b083      	sub	sp, #12
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	460b      	mov	r3, r1
 800d714:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d716:	887b      	ldrh	r3, [r7, #2]
 800d718:	011b      	lsls	r3, r3, #4
 800d71a:	3308      	adds	r3, #8
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	4413      	add	r3, r2
    }
 800d720:	4618      	mov	r0, r3
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI15screenPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800d738:	887b      	ldrh	r3, [r7, #2]
 800d73a:	011b      	lsls	r3, r3, #4
 800d73c:	3308      	adds	r3, #8
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	4413      	add	r3, r2
    }
 800d742:	4618      	mov	r0, r3
 800d744:	370c      	adds	r7, #12
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr

0800d74e <_GLOBAL__sub_I_touchgfx_init>:
 800d74e:	b580      	push	{r7, lr}
 800d750:	af00      	add	r7, sp, #0
 800d752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d756:	2001      	movs	r0, #1
 800d758:	f7ff fefc 	bl	800d554 <_Z41__static_initialization_and_destruction_0ii>
 800d75c:	bd80      	pop	{r7, pc}

0800d75e <_GLOBAL__sub_D_touchgfx_init>:
 800d75e:	b580      	push	{r7, lr}
 800d760:	af00      	add	r7, sp, #0
 800d762:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d766:	2000      	movs	r0, #0
 800d768:	f7ff fef4 	bl	800d554 <_Z41__static_initialization_and_destruction_0ii>
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 800d76e:	b580      	push	{r7, lr}
 800d770:	b082      	sub	sp, #8
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	3320      	adds	r3, #32
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	4798      	blx	r3
    }
 800d782:	bf00      	nop
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800d78a:	b480      	push	{r7}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800d798:	3301      	adds	r3, #1
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
    }
 800d7a2:	bf00      	nop
 800d7a4:	370c      	adds	r7, #12
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ac:	4770      	bx	lr
	...

0800d7b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 800d7bc:	78fb      	ldrb	r3, [r7, #3]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d002      	beq.n	800d7c8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 800d7c2:	78fb      	ldrb	r3, [r7, #3]
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	d105      	bne.n	800d7d4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	78fa      	ldrb	r2, [r7, #3]
 800d7cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e027      	b.n	800d824 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d123      	bne.n	800d822 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d014      	beq.n	800d80c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	339c      	adds	r3, #156	; 0x9c
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	4798      	blx	r3
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d008      	beq.n	800d80c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d7fa:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	f083 0301 	eor.w	r3, r3, #1
 800d802:	b2db      	uxtb	r3, r3
 800d804:	2b00      	cmp	r3, #0
 800d806:	d001      	beq.n	800d80c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 800d808:	2301      	movs	r3, #1
 800d80a:	e000      	b.n	800d80e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 800d80c:	2300      	movs	r3, #0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d005      	beq.n	800d81e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	78fa      	ldrb	r2, [r7, #3]
 800d816:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 800d81a:	2301      	movs	r3, #1
 800d81c:	e002      	b.n	800d824 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 800d81e:	2300      	movs	r3, #0
 800d820:	e000      	b.n	800d824 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 800d822:	2300      	movs	r3, #0
    }
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	2401aa3a 	.word	0x2401aa3a

0800d830 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	683a      	ldr	r2, [r7, #0]
 800d83e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <__NVIC_EnableIRQ>:
{
 800d84c:	b480      	push	{r7}
 800d84e:	b083      	sub	sp, #12
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	db0b      	blt.n	800d876 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d85e:	88fb      	ldrh	r3, [r7, #6]
 800d860:	f003 021f 	and.w	r2, r3, #31
 800d864:	4907      	ldr	r1, [pc, #28]	; (800d884 <__NVIC_EnableIRQ+0x38>)
 800d866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d86a:	095b      	lsrs	r3, r3, #5
 800d86c:	2001      	movs	r0, #1
 800d86e:	fa00 f202 	lsl.w	r2, r0, r2
 800d872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	e000e100 	.word	0xe000e100

0800d888 <__NVIC_DisableIRQ>:
{
 800d888:	b480      	push	{r7}
 800d88a:	b083      	sub	sp, #12
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	4603      	mov	r3, r0
 800d890:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d896:	2b00      	cmp	r3, #0
 800d898:	db12      	blt.n	800d8c0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d89a:	88fb      	ldrh	r3, [r7, #6]
 800d89c:	f003 021f 	and.w	r2, r3, #31
 800d8a0:	490a      	ldr	r1, [pc, #40]	; (800d8cc <__NVIC_DisableIRQ+0x44>)
 800d8a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8a6:	095b      	lsrs	r3, r3, #5
 800d8a8:	2001      	movs	r0, #1
 800d8aa:	fa00 f202 	lsl.w	r2, r0, r2
 800d8ae:	3320      	adds	r3, #32
 800d8b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d8b4:	f3bf 8f4f 	dsb	sy
}
 800d8b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d8ba:	f3bf 8f6f 	isb	sy
}
 800d8be:	bf00      	nop
}
 800d8c0:	bf00      	nop
 800d8c2:	370c      	adds	r7, #12
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	e000e100 	.word	0xe000e100

0800d8d0 <__NVIC_SetPriority>:
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	6039      	str	r1, [r7, #0]
 800d8da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d8dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	db0a      	blt.n	800d8fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	490c      	ldr	r1, [pc, #48]	; (800d91c <__NVIC_SetPriority+0x4c>)
 800d8ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d8ee:	0112      	lsls	r2, r2, #4
 800d8f0:	b2d2      	uxtb	r2, r2
 800d8f2:	440b      	add	r3, r1
 800d8f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800d8f8:	e00a      	b.n	800d910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	4908      	ldr	r1, [pc, #32]	; (800d920 <__NVIC_SetPriority+0x50>)
 800d900:	88fb      	ldrh	r3, [r7, #6]
 800d902:	f003 030f 	and.w	r3, r3, #15
 800d906:	3b04      	subs	r3, #4
 800d908:	0112      	lsls	r2, r2, #4
 800d90a:	b2d2      	uxtb	r2, r2
 800d90c:	440b      	add	r3, r1
 800d90e:	761a      	strb	r2, [r3, #24]
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	e000e100 	.word	0xe000e100
 800d920:	e000ed00 	.word	0xe000ed00

0800d924 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 800d924:	b5b0      	push	{r4, r5, r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 fd0d 	bl	800e34e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 800d934:	687d      	ldr	r5, [r7, #4]
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3364      	adds	r3, #100	; 0x64
 800d93c:	681c      	ldr	r4, [r3, #0]
 800d93e:	f003 fd85 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 800d942:	4603      	mov	r3, r0
 800d944:	4619      	mov	r1, r3
 800d946:	4628      	mov	r0, r5
 800d948:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	490b      	ldr	r1, [pc, #44]	; (800d97c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x58>)
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff ff6e 	bl	800d830 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2101      	movs	r1, #1
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff ff29 	bl	800d7b0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0, (void*)0);
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	3388      	adds	r3, #136	; 0x88
 800d966:	681c      	ldr	r4, [r3, #0]
 800d968:	2300      	movs	r3, #0
 800d96a:	2200      	movs	r2, #0
 800d96c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800d970:	47a0      	blx	r4
}
 800d972:	bf00      	nop
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bdb0      	pop	{r4, r5, r7, pc}
 800d97a:	bf00      	nop
 800d97c:	0800c5a9 	.word	0x0800c5a9

0800d980 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b082      	sub	sp, #8
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 800d988:	2109      	movs	r1, #9
 800d98a:	205a      	movs	r0, #90	; 0x5a
 800d98c:	f7ff ffa0 	bl	800d8d0 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 800d990:	2109      	movs	r1, #9
 800d992:	2058      	movs	r0, #88	; 0x58
 800d994:	f7ff ff9c 	bl	800d8d0 <__NVIC_SetPriority>
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 800d9a8:	205a      	movs	r0, #90	; 0x5a
 800d9aa:	f7ff ff4f 	bl	800d84c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 800d9ae:	2058      	movs	r0, #88	; 0x58
 800d9b0:	f7ff ff4c 	bl	800d84c <__NVIC_EnableIRQ>
}
 800d9b4:	bf00      	nop
 800d9b6:	3708      	adds	r7, #8
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	bd80      	pop	{r7, pc}

0800d9bc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b082      	sub	sp, #8
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 800d9c4:	205a      	movs	r0, #90	; 0x5a
 800d9c6:	f7ff ff5f 	bl	800d888 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800d9ca:	2058      	movs	r0, #88	; 0x58
 800d9cc:	f7ff ff5c 	bl	800d888 <__NVIC_DisableIRQ>
}
 800d9d0:	bf00      	nop
 800d9d2:	3708      	adds	r7, #8
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 800d9e0:	4b11      	ldr	r3, [pc, #68]	; (800da28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	b29a      	uxth	r2, r3
 800d9f0:	4b0e      	ldr	r3, [pc, #56]	; (800da2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800d9f2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800d9f4:	4b0c      	ldr	r3, [pc, #48]	; (800da28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	b29b      	uxth	r3, r3
 800d9fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	3b01      	subs	r3, #1
 800da02:	b29a      	uxth	r2, r3
 800da04:	4b0a      	ldr	r3, [pc, #40]	; (800da30 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 800da06:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 800da08:	4b08      	ldr	r3, [pc, #32]	; (800da2c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800da0a:	881a      	ldrh	r2, [r3, #0]
 800da0c:	4b06      	ldr	r3, [pc, #24]	; (800da28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800da0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 800da10:	4b05      	ldr	r3, [pc, #20]	; (800da28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800da12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da14:	4a04      	ldr	r2, [pc, #16]	; (800da28 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800da16:	f043 0301 	orr.w	r3, r3, #1
 800da1a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr
 800da28:	50001000 	.word	0x50001000
 800da2c:	2401aa2c 	.word	0x2401aa2c
 800da30:	2401aa2e 	.word	0x2401aa2e

0800da34 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 fc6c 	bl	800e31c <_ZN8touchgfx3HAL10beginFrameEv>
 800da44:	4603      	mov	r3, r0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b082      	sub	sp, #8
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 fc6b 	bl	800e334 <_ZN8touchgfx3HAL8endFrameEv>
}
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
	...

0800da68 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800da70:	4b03      	ldr	r3, [pc, #12]	; (800da80 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 800da72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr
 800da80:	50001084 	.word	0x50001084

0800da84 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 800da84:	b480      	push	{r7}
 800da86:	b083      	sub	sp, #12
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800da8e:	4a06      	ldr	r2, [pc, #24]	; (800daa8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800da94:	4b05      	ldr	r3, [pc, #20]	; (800daac <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 800da96:	2201      	movs	r2, #1
 800da98:	625a      	str	r2, [r3, #36]	; 0x24
}
 800da9a:	bf00      	nop
 800da9c:	370c      	adds	r7, #12
 800da9e:	46bd      	mov	sp, r7
 800daa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	50001084 	.word	0x50001084
 800daac:	50001000 	.word	0x50001000

0800dab0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 fbf5 	bl	800e2ae <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}

0800dacc <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
 800dad8:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 800dada:	68f8      	ldr	r0, [r7, #12]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	68b9      	ldr	r1, [r7, #8]
 800dae2:	f000 fd56 	bl	800e592 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 800dae6:	4603      	mov	r3, r0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 800daf8:	4b0d      	ldr	r3, [pc, #52]	; (800db30 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800dafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dafc:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 800dafe:	4b0c      	ldr	r3, [pc, #48]	; (800db30 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	b29b      	uxth	r3, r3
 800db04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800db08:	b29b      	uxth	r3, r3
 800db0a:	3301      	adds	r3, #1
 800db0c:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 800db0e:	89fa      	ldrh	r2, [r7, #14]
 800db10:	89bb      	ldrh	r3, [r7, #12]
 800db12:	429a      	cmp	r2, r3
 800db14:	d304      	bcc.n	800db20 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 800db16:	89fa      	ldrh	r2, [r7, #14]
 800db18:	89bb      	ldrh	r3, [r7, #12]
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	b29b      	uxth	r3, r3
 800db1e:	e000      	b.n	800db22 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	3714      	adds	r7, #20
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr
 800db2e:	bf00      	nop
 800db30:	50001000 	.word	0x50001000

0800db34 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 800db34:	b480      	push	{r7}
 800db36:	b087      	sub	sp, #28
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800db3c:	4b25      	ldr	r3, [pc, #148]	; (800dbd4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800db3e:	695b      	ldr	r3, [r3, #20]
 800db40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db44:	2b00      	cmp	r3, #0
 800db46:	bf14      	ite	ne
 800db48:	2301      	movne	r3, #1
 800db4a:	2300      	moveq	r3, #0
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d03a      	beq.n	800dbc8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x94>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800db52:	4b20      	ldr	r3, [pc, #128]	; (800dbd4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800db54:	2200      	movs	r2, #0
 800db56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800db5a:	f3bf 8f4f 	dsb	sy
}
 800db5e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800db60:	4b1c      	ldr	r3, [pc, #112]	; (800dbd4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800db62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db66:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	0b5b      	lsrs	r3, r3, #13
 800db6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800db70:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	08db      	lsrs	r3, r3, #3
 800db76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db7a:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	015a      	lsls	r2, r3, #5
 800db80:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800db84:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800db8a:	4912      	ldr	r1, [pc, #72]	; (800dbd4 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa0>)
 800db8c:	4313      	orrs	r3, r2
 800db8e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	1e5a      	subs	r2, r3, #1
 800db96:	60fa      	str	r2, [r7, #12]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	bf14      	ite	ne
 800db9c:	2301      	movne	r3, #1
 800db9e:	2300      	moveq	r3, #0
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d1ea      	bne.n	800db7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	1e5a      	subs	r2, r3, #1
 800dbaa:	613a      	str	r2, [r7, #16]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	bf14      	ite	ne
 800dbb0:	2301      	movne	r3, #1
 800dbb2:	2300      	moveq	r3, #0
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d1db      	bne.n	800db72 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800dbba:	f3bf 8f4f 	dsb	sy
}
 800dbbe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dbc0:	f3bf 8f6f 	isb	sy
}
 800dbc4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800dbc6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800dbc8:	bf00      	nop
 800dbca:	371c      	adds	r7, #28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr
 800dbd4:	e000ed00 	.word	0xe000ed00

0800dbd8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b087      	sub	sp, #28
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800dbe0:	4b25      	ldr	r3, [pc, #148]	; (800dc78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dbe2:	695b      	ldr	r3, [r3, #20]
 800dbe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	bf14      	ite	ne
 800dbec:	2301      	movne	r3, #1
 800dbee:	2300      	moveq	r3, #0
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d03a      	beq.n	800dc6c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x94>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800dbf6:	4b20      	ldr	r3, [pc, #128]	; (800dc78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800dbfe:	f3bf 8f4f 	dsb	sy
}
 800dc02:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800dc04:	4b1c      	ldr	r3, [pc, #112]	; (800dc78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dc06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc0a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	0b5b      	lsrs	r3, r3, #13
 800dc10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800dc14:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	08db      	lsrs	r3, r3, #3
 800dc1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc1e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	015a      	lsls	r2, r3, #5
 800dc24:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800dc28:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 800dc2a:	68fa      	ldr	r2, [r7, #12]
 800dc2c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800dc2e:	4912      	ldr	r1, [pc, #72]	; (800dc78 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa0>)
 800dc30:	4313      	orrs	r3, r2
 800dc32:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	1e5a      	subs	r2, r3, #1
 800dc3a:	60fa      	str	r2, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bf14      	ite	ne
 800dc40:	2301      	movne	r3, #1
 800dc42:	2300      	moveq	r3, #0
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d1ea      	bne.n	800dc20 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	1e5a      	subs	r2, r3, #1
 800dc4e:	613a      	str	r2, [r7, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	bf14      	ite	ne
 800dc54:	2301      	movne	r3, #1
 800dc56:	2300      	moveq	r3, #0
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d1db      	bne.n	800dc16 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 800dc5e:	f3bf 8f4f 	dsb	sy
}
 800dc62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dc64:	f3bf 8f6f 	isb	sy
}
 800dc68:	bf00      	nop
}
 800dc6a:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 800dc6c:	bf00      	nop
 800dc6e:	371c      	adds	r7, #28
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	e000ed00 	.word	0xe000ed00

0800dc7c <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 800dc84:	f7fb ff7a 	bl	8009b7c <_ZN8touchgfx3HAL11getInstanceEv>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	bf0c      	ite	eq
 800dc8e:	2301      	moveq	r3, #1
 800dc90:	2300      	movne	r3, #0
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d132      	bne.n	800dcfe <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 800dc98:	4b1b      	ldr	r3, [pc, #108]	; (800dd08 <HAL_LTDC_LineEventCallback+0x8c>)
 800dc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9c:	4a1b      	ldr	r2, [pc, #108]	; (800dd0c <HAL_LTDC_LineEventCallback+0x90>)
 800dc9e:	8812      	ldrh	r2, [r2, #0]
 800dca0:	4293      	cmp	r3, r2
 800dca2:	bf0c      	ite	eq
 800dca4:	2301      	moveq	r3, #1
 800dca6:	2300      	movne	r3, #0
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d017      	beq.n	800dcde <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 800dcae:	4b18      	ldr	r3, [pc, #96]	; (800dd10 <HAL_LTDC_LineEventCallback+0x94>)
 800dcb0:	881b      	ldrh	r3, [r3, #0]
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f7f4 fc7d 	bl	80025b4 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 800dcba:	f7fb ff5f 	bl	8009b7c <_ZN8touchgfx3HAL11getInstanceEv>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fd62 	bl	800d78a <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 800dcc6:	f7fe fc47 	bl	800c558 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 800dcca:	f7fb ff57 	bl	8009b7c <_ZN8touchgfx3HAL11getInstanceEv>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f001 f889 	bl	800ede8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	f7fe f8f8 	bl	800becc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800dcdc:	e010      	b.n	800dd00 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 800dcde:	4b0b      	ldr	r3, [pc, #44]	; (800dd0c <HAL_LTDC_LineEventCallback+0x90>)
 800dce0:	881b      	ldrh	r3, [r3, #0]
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f7f4 fc65 	bl	80025b4 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 800dcea:	f7fb ff47 	bl	8009b7c <_ZN8touchgfx3HAL11getInstanceEv>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7ff fd3c 	bl	800d76e <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	f7fe f920 	bl	800bf3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800dcfc:	e000      	b.n	800dd00 <HAL_LTDC_LineEventCallback+0x84>
            return;
 800dcfe:	bf00      	nop
        }
    }
 800dd00:	3708      	adds	r7, #8
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	50001000 	.word	0x50001000
 800dd0c:	2401aa2c 	.word	0x2401aa2c
 800dd10:	2401aa2e 	.word	0x2401aa2e

0800dd14 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800dd14:	8880      	ldrh	r0, [r0, #4]
 800dd16:	4770      	bx	lr

0800dd18 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	6803      	ldr	r3, [r0, #0]
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	2100      	movs	r1, #0
 800dd20:	4605      	mov	r5, r0
 800dd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd24:	4798      	blx	r3
 800dd26:	4606      	mov	r6, r0
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	1ba4      	subs	r4, r4, r6
 800dd2e:	6a1b      	ldr	r3, [r3, #32]
 800dd30:	b2a4      	uxth	r4, r4
 800dd32:	4798      	blx	r3
 800dd34:	fbb4 f0f0 	udiv	r0, r4, r0
 800dd38:	bd70      	pop	{r4, r5, r6, pc}

0800dd3a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	8083      	strh	r3, [r0, #4]
 800dd3e:	4770      	bx	lr

0800dd40 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800dd40:	b510      	push	{r4, lr}
 800dd42:	6803      	ldr	r3, [r0, #0]
 800dd44:	4604      	mov	r4, r0
 800dd46:	8881      	ldrh	r1, [r0, #4]
 800dd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd4a:	4798      	blx	r3
 800dd4c:	88a3      	ldrh	r3, [r4, #4]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	80a3      	strh	r3, [r4, #4]
 800dd52:	bd10      	pop	{r4, pc}

0800dd54 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800dd54:	6803      	ldr	r3, [r0, #0]
 800dd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd58:	4718      	bx	r3

0800dd5a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800dd5a:	4770      	bx	lr

0800dd5c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800dd5c:	4a02      	ldr	r2, [pc, #8]	; (800dd68 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800dd5e:	6002      	str	r2, [r0, #0]
 800dd60:	2200      	movs	r2, #0
 800dd62:	8082      	strh	r2, [r0, #4]
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	0801f8c0 	.word	0x0801f8c0

0800dd6c <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800dd6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dd6e:	2000      	movs	r0, #0
 800dd70:	b12b      	cbz	r3, 800dd7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dd72:	b920      	cbnz	r0, 800dd7e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dd74:	1a5a      	subs	r2, r3, r1
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	4250      	negs	r0, r2
 800dd7a:	4150      	adcs	r0, r2
 800dd7c:	e7f8      	b.n	800dd70 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800dd7e:	4770      	bx	lr

0800dd80 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800dd80:	2300      	movs	r3, #0
 800dd82:	6148      	str	r0, [r1, #20]
 800dd84:	618b      	str	r3, [r1, #24]
 800dd86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dd88:	b913      	cbnz	r3, 800dd90 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800dd8a:	6281      	str	r1, [r0, #40]	; 0x28
 800dd8c:	4770      	bx	lr
 800dd8e:	4613      	mov	r3, r2
 800dd90:	699a      	ldr	r2, [r3, #24]
 800dd92:	2a00      	cmp	r2, #0
 800dd94:	d1fb      	bne.n	800dd8e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800dd96:	6199      	str	r1, [r3, #24]
 800dd98:	4770      	bx	lr

0800dd9a <_ZN8touchgfx9Container9removeAllEv>:
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dd9e:	b123      	cbz	r3, 800ddaa <_ZN8touchgfx9Container9removeAllEv+0x10>
 800dda0:	6999      	ldr	r1, [r3, #24]
 800dda2:	6281      	str	r1, [r0, #40]	; 0x28
 800dda4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800dda8:	e7f8      	b.n	800dd9c <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ddaa:	4770      	bx	lr

0800ddac <_ZN8touchgfx9Container6unlinkEv>:
 800ddac:	2300      	movs	r3, #0
 800ddae:	6283      	str	r3, [r0, #40]	; 0x28
 800ddb0:	4770      	bx	lr

0800ddb2 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	8002      	strh	r2, [r0, #0]
 800ddb6:	8042      	strh	r2, [r0, #2]
 800ddb8:	8082      	strh	r2, [r0, #4]
 800ddba:	80c2      	strh	r2, [r0, #6]
 800ddbc:	4770      	bx	lr

0800ddbe <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ddbe:	b570      	push	{r4, r5, r6, lr}
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	4616      	mov	r6, r2
 800ddc4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800ddc6:	b13c      	cbz	r4, 800ddd8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ddc8:	6823      	ldr	r3, [r4, #0]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	4632      	mov	r2, r6
 800ddce:	4629      	mov	r1, r5
 800ddd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddd2:	4798      	blx	r3
 800ddd4:	69a4      	ldr	r4, [r4, #24]
 800ddd6:	e7f6      	b.n	800ddc6 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ddd8:	bd70      	pop	{r4, r5, r6, pc}

0800ddda <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ddda:	b538      	push	{r3, r4, r5, lr}
 800dddc:	460d      	mov	r5, r1
 800ddde:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dde0:	b134      	cbz	r4, 800ddf0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800dde2:	682b      	ldr	r3, [r5, #0]
 800dde4:	4621      	mov	r1, r4
 800dde6:	4628      	mov	r0, r5
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	4798      	blx	r3
 800ddec:	69a4      	ldr	r4, [r4, #24]
 800ddee:	e7f7      	b.n	800dde0 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ddf0:	bd38      	pop	{r3, r4, r5, pc}

0800ddf2 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ddf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800ddf4:	b19b      	cbz	r3, 800de1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ddf6:	428b      	cmp	r3, r1
 800ddf8:	d109      	bne.n	800de0e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ddfa:	699a      	ldr	r2, [r3, #24]
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	6159      	str	r1, [r3, #20]
 800de00:	6282      	str	r2, [r0, #40]	; 0x28
 800de02:	b902      	cbnz	r2, 800de06 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800de04:	4770      	bx	lr
 800de06:	6199      	str	r1, [r3, #24]
 800de08:	4770      	bx	lr
 800de0a:	4613      	mov	r3, r2
 800de0c:	b13a      	cbz	r2, 800de1e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800de0e:	699a      	ldr	r2, [r3, #24]
 800de10:	428a      	cmp	r2, r1
 800de12:	d1fa      	bne.n	800de0a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800de14:	698a      	ldr	r2, [r1, #24]
 800de16:	619a      	str	r2, [r3, #24]
 800de18:	2300      	movs	r3, #0
 800de1a:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800de1e:	4770      	bx	lr

0800de20 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800de20:	b410      	push	{r4}
 800de22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800de24:	4604      	mov	r4, r0
 800de26:	b92b      	cbnz	r3, 800de34 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800de28:	6803      	ldr	r3, [r0, #0]
 800de2a:	4611      	mov	r1, r2
 800de2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de32:	4718      	bx	r3
 800de34:	b941      	cbnz	r1, 800de48 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800de36:	6193      	str	r3, [r2, #24]
 800de38:	6282      	str	r2, [r0, #40]	; 0x28
 800de3a:	6154      	str	r4, [r2, #20]
 800de3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de40:	4770      	bx	lr
 800de42:	4603      	mov	r3, r0
 800de44:	2800      	cmp	r0, #0
 800de46:	d0f9      	beq.n	800de3c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800de48:	4299      	cmp	r1, r3
 800de4a:	6998      	ldr	r0, [r3, #24]
 800de4c:	d1f9      	bne.n	800de42 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800de4e:	6190      	str	r0, [r2, #24]
 800de50:	618a      	str	r2, [r1, #24]
 800de52:	e7f2      	b.n	800de3a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800de54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	461f      	mov	r7, r3
 800de5a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800de5e:	460d      	mov	r5, r1
 800de60:	4616      	mov	r6, r2
 800de62:	b103      	cbz	r3, 800de66 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800de64:	6038      	str	r0, [r7, #0]
 800de66:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800de68:	b314      	cbz	r4, 800deb0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800de6a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800de6e:	b1eb      	cbz	r3, 800deac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800de70:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800de74:	428d      	cmp	r5, r1
 800de76:	db19      	blt.n	800deac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800de78:	b289      	uxth	r1, r1
 800de7a:	8923      	ldrh	r3, [r4, #8]
 800de7c:	440b      	add	r3, r1
 800de7e:	b21b      	sxth	r3, r3
 800de80:	429d      	cmp	r5, r3
 800de82:	da13      	bge.n	800deac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800de84:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800de88:	4296      	cmp	r6, r2
 800de8a:	db0f      	blt.n	800deac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800de8c:	b292      	uxth	r2, r2
 800de8e:	8963      	ldrh	r3, [r4, #10]
 800de90:	4413      	add	r3, r2
 800de92:	b21b      	sxth	r3, r3
 800de94:	429e      	cmp	r6, r3
 800de96:	da09      	bge.n	800deac <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800de98:	6823      	ldr	r3, [r4, #0]
 800de9a:	1ab2      	subs	r2, r6, r2
 800de9c:	1a69      	subs	r1, r5, r1
 800de9e:	4620      	mov	r0, r4
 800dea0:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800dea4:	b212      	sxth	r2, r2
 800dea6:	463b      	mov	r3, r7
 800dea8:	b209      	sxth	r1, r1
 800deaa:	47c0      	blx	r8
 800deac:	69a4      	ldr	r4, [r4, #24]
 800deae:	e7db      	b.n	800de68 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800deb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deb8:	4c6d      	ldr	r4, [pc, #436]	; (800e070 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800deba:	b0a1      	sub	sp, #132	; 0x84
 800debc:	4606      	mov	r6, r0
 800debe:	6824      	ldr	r4, [r4, #0]
 800dec0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800dec2:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800dec6:	2400      	movs	r4, #0
 800dec8:	9303      	str	r3, [sp, #12]
 800deca:	802c      	strh	r4, [r5, #0]
 800decc:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800dece:	802c      	strh	r4, [r5, #0]
 800ded0:	601c      	str	r4, [r3, #0]
 800ded2:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ded6:	f7ff ffbd 	bl	800de54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800deda:	f1b9 0f03 	cmp.w	r9, #3
 800dede:	f340 80c1 	ble.w	800e064 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800dee2:	4631      	mov	r1, r6
 800dee4:	a80c      	add	r0, sp, #48	; 0x30
 800dee6:	f004 fbc5 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800deea:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800deee:	9306      	str	r3, [sp, #24]
 800def0:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800def4:	9307      	str	r3, [sp, #28]
 800def6:	9b03      	ldr	r3, [sp, #12]
 800def8:	f8d3 a000 	ldr.w	sl, [r3]
 800defc:	f1ba 0f00 	cmp.w	sl, #0
 800df00:	f000 80b3 	beq.w	800e06a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800df04:	4651      	mov	r1, sl
 800df06:	a810      	add	r0, sp, #64	; 0x40
 800df08:	f004 fbb4 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800df0c:	2002      	movs	r0, #2
 800df0e:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800df12:	9b01      	ldr	r3, [sp, #4]
 800df14:	9a06      	ldr	r2, [sp, #24]
 800df16:	fb91 f1f0 	sdiv	r1, r1, r0
 800df1a:	189d      	adds	r5, r3, r2
 800df1c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800df20:	9a07      	ldr	r2, [sp, #28]
 800df22:	4419      	add	r1, r3
 800df24:	9b02      	ldr	r3, [sp, #8]
 800df26:	4413      	add	r3, r2
 800df28:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800df2c:	1a6d      	subs	r5, r5, r1
 800df2e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800df32:	fb92 f2f0 	sdiv	r2, r2, r0
 800df36:	440a      	add	r2, r1
 800df38:	1a9b      	subs	r3, r3, r2
 800df3a:	435b      	muls	r3, r3
 800df3c:	fb05 3505 	mla	r5, r5, r5, r3
 800df40:	4f4c      	ldr	r7, [pc, #304]	; (800e074 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800df42:	ac10      	add	r4, sp, #64	; 0x40
 800df44:	f1b9 0f0c 	cmp.w	r9, #12
 800df48:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df4c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df50:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800df52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df54:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800df58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800df5c:	f04f 0303 	mov.w	r3, #3
 800df60:	bfd8      	it	le
 800df62:	f109 32ff 	addle.w	r2, r9, #4294967295
 800df66:	f04f 0400 	mov.w	r4, #0
 800df6a:	f8cd 9000 	str.w	r9, [sp]
 800df6e:	bfcc      	ite	gt
 800df70:	4698      	movgt	r8, r3
 800df72:	fb92 f8f3 	sdivle	r8, r2, r3
 800df76:	1c63      	adds	r3, r4, #1
 800df78:	aa10      	add	r2, sp, #64	; 0x40
 800df7a:	f004 0401 	and.w	r4, r4, #1
 800df7e:	f04f 0b00 	mov.w	fp, #0
 800df82:	9308      	str	r3, [sp, #32]
 800df84:	9b00      	ldr	r3, [sp, #0]
 800df86:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800df8a:	fb93 f3f8 	sdiv	r3, r3, r8
 800df8e:	3404      	adds	r4, #4
 800df90:	b29b      	uxth	r3, r3
 800df92:	9304      	str	r3, [sp, #16]
 800df94:	9a04      	ldr	r2, [sp, #16]
 800df96:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800df9a:	fb13 f302 	smulbb	r3, r3, r2
 800df9e:	9a01      	ldr	r2, [sp, #4]
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	1899      	adds	r1, r3, r2
 800dfa4:	9305      	str	r3, [sp, #20]
 800dfa6:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800dfaa:	b209      	sxth	r1, r1
 800dfac:	4299      	cmp	r1, r3
 800dfae:	db4d      	blt.n	800e04c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dfb0:	8932      	ldrh	r2, [r6, #8]
 800dfb2:	4413      	add	r3, r2
 800dfb4:	b21b      	sxth	r3, r3
 800dfb6:	4299      	cmp	r1, r3
 800dfb8:	da48      	bge.n	800e04c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dfba:	9b04      	ldr	r3, [sp, #16]
 800dfbc:	6827      	ldr	r7, [r4, #0]
 800dfbe:	fb17 f703 	smulbb	r7, r7, r3
 800dfc2:	9b02      	ldr	r3, [sp, #8]
 800dfc4:	b2bf      	uxth	r7, r7
 800dfc6:	18fa      	adds	r2, r7, r3
 800dfc8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800dfcc:	b212      	sxth	r2, r2
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	db3c      	blt.n	800e04c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dfd2:	8970      	ldrh	r0, [r6, #10]
 800dfd4:	4403      	add	r3, r0
 800dfd6:	b21b      	sxth	r3, r3
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	da37      	bge.n	800e04c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4630      	mov	r0, r6
 800dfe0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfe2:	ab0b      	add	r3, sp, #44	; 0x2c
 800dfe4:	f7ff ff36 	bl	800de54 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800dfe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfea:	b37a      	cbz	r2, 800e04c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dfec:	4552      	cmp	r2, sl
 800dfee:	d02d      	beq.n	800e04c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800dff0:	4611      	mov	r1, r2
 800dff2:	a80e      	add	r0, sp, #56	; 0x38
 800dff4:	9209      	str	r2, [sp, #36]	; 0x24
 800dff6:	f004 fb3d 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800dffa:	f04f 0e02 	mov.w	lr, #2
 800dffe:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800e002:	9a06      	ldr	r2, [sp, #24]
 800e004:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800e008:	9b01      	ldr	r3, [sp, #4]
 800e00a:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800e00e:	4413      	add	r3, r2
 800e010:	9a07      	ldr	r2, [sp, #28]
 800e012:	fb91 f1fe 	sdiv	r1, r1, lr
 800e016:	fb9c fcfe 	sdiv	ip, ip, lr
 800e01a:	4401      	add	r1, r0
 800e01c:	1a58      	subs	r0, r3, r1
 800e01e:	9b02      	ldr	r3, [sp, #8]
 800e020:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800e024:	4413      	add	r3, r2
 800e026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e028:	448c      	add	ip, r1
 800e02a:	eba3 030c 	sub.w	r3, r3, ip
 800e02e:	435b      	muls	r3, r3
 800e030:	fb00 3300 	mla	r3, r0, r0, r3
 800e034:	42ab      	cmp	r3, r5
 800e036:	d208      	bcs.n	800e04a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800e038:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e03a:	461d      	mov	r5, r3
 800e03c:	9803      	ldr	r0, [sp, #12]
 800e03e:	6001      	str	r1, [r0, #0]
 800e040:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800e042:	9805      	ldr	r0, [sp, #20]
 800e044:	8008      	strh	r0, [r1, #0]
 800e046:	992b      	ldr	r1, [sp, #172]	; 0xac
 800e048:	800f      	strh	r7, [r1, #0]
 800e04a:	4692      	mov	sl, r2
 800e04c:	f10b 0b01 	add.w	fp, fp, #1
 800e050:	3408      	adds	r4, #8
 800e052:	f1bb 0f04 	cmp.w	fp, #4
 800e056:	d19d      	bne.n	800df94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800e058:	9b00      	ldr	r3, [sp, #0]
 800e05a:	9c08      	ldr	r4, [sp, #32]
 800e05c:	444b      	add	r3, r9
 800e05e:	4544      	cmp	r4, r8
 800e060:	9300      	str	r3, [sp, #0]
 800e062:	d188      	bne.n	800df76 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800e064:	b021      	add	sp, #132	; 0x84
 800e066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06a:	f04f 35ff 	mov.w	r5, #4294967295
 800e06e:	e767      	b.n	800df40 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800e070:	2401aa3c 	.word	0x2401aa3c
 800e074:	0801ef18 	.word	0x0801ef18

0800e078 <_ZN8touchgfx4RectaNERKS0_>:
 800e078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e07c:	f9b1 7000 	ldrsh.w	r7, [r1]
 800e080:	888c      	ldrh	r4, [r1, #4]
 800e082:	f9b0 9000 	ldrsh.w	r9, [r0]
 800e086:	443c      	add	r4, r7
 800e088:	b2a4      	uxth	r4, r4
 800e08a:	fa0f f884 	sxth.w	r8, r4
 800e08e:	45c1      	cmp	r9, r8
 800e090:	da2f      	bge.n	800e0f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e092:	8882      	ldrh	r2, [r0, #4]
 800e094:	444a      	add	r2, r9
 800e096:	b292      	uxth	r2, r2
 800e098:	fa0f fe82 	sxth.w	lr, r2
 800e09c:	4577      	cmp	r7, lr
 800e09e:	da28      	bge.n	800e0f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e0a0:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800e0a4:	88cb      	ldrh	r3, [r1, #6]
 800e0a6:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800e0aa:	442b      	add	r3, r5
 800e0ac:	b21b      	sxth	r3, r3
 800e0ae:	429e      	cmp	r6, r3
 800e0b0:	da1f      	bge.n	800e0f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e0b2:	88c3      	ldrh	r3, [r0, #6]
 800e0b4:	4433      	add	r3, r6
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	fa0f fc83 	sxth.w	ip, r3
 800e0bc:	4565      	cmp	r5, ip
 800e0be:	da18      	bge.n	800e0f2 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e0c0:	454f      	cmp	r7, r9
 800e0c2:	bfb8      	it	lt
 800e0c4:	464f      	movlt	r7, r9
 800e0c6:	42b5      	cmp	r5, r6
 800e0c8:	bfb8      	it	lt
 800e0ca:	4635      	movlt	r5, r6
 800e0cc:	45f0      	cmp	r8, lr
 800e0ce:	bfd8      	it	le
 800e0d0:	4622      	movle	r2, r4
 800e0d2:	1bd2      	subs	r2, r2, r7
 800e0d4:	8082      	strh	r2, [r0, #4]
 800e0d6:	884a      	ldrh	r2, [r1, #2]
 800e0d8:	88c9      	ldrh	r1, [r1, #6]
 800e0da:	8007      	strh	r7, [r0, #0]
 800e0dc:	440a      	add	r2, r1
 800e0de:	8045      	strh	r5, [r0, #2]
 800e0e0:	b292      	uxth	r2, r2
 800e0e2:	b211      	sxth	r1, r2
 800e0e4:	458c      	cmp	ip, r1
 800e0e6:	bfa8      	it	ge
 800e0e8:	4613      	movge	r3, r2
 800e0ea:	1b5b      	subs	r3, r3, r5
 800e0ec:	80c3      	strh	r3, [r0, #6]
 800e0ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	8003      	strh	r3, [r0, #0]
 800e0f6:	8043      	strh	r3, [r0, #2]
 800e0f8:	8083      	strh	r3, [r0, #4]
 800e0fa:	80c3      	strh	r3, [r0, #6]
 800e0fc:	e7f7      	b.n	800e0ee <_ZN8touchgfx4RectaNERKS0_+0x76>

0800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e0fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	dd06      	ble.n	800e114 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800e106:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e10a:	2800      	cmp	r0, #0
 800e10c:	bfcc      	ite	gt
 800e10e:	2000      	movgt	r0, #0
 800e110:	2001      	movle	r0, #1
 800e112:	4770      	bx	lr
 800e114:	2001      	movs	r0, #1
 800e116:	4770      	bx	lr

0800e118 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e11c:	2300      	movs	r3, #0
 800e11e:	4604      	mov	r4, r0
 800e120:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800e122:	8003      	strh	r3, [r0, #0]
 800e124:	8043      	strh	r3, [r0, #2]
 800e126:	8083      	strh	r3, [r0, #4]
 800e128:	80c3      	strh	r3, [r0, #6]
 800e12a:	2d00      	cmp	r5, #0
 800e12c:	d040      	beq.n	800e1b0 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e12e:	1d28      	adds	r0, r5, #4
 800e130:	f7ff ffe5 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 800e134:	b988      	cbnz	r0, 800e15a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e136:	4620      	mov	r0, r4
 800e138:	f7ff ffe1 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 800e13c:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e140:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e144:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e148:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e14c:	b138      	cbz	r0, 800e15e <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e14e:	8022      	strh	r2, [r4, #0]
 800e150:	8063      	strh	r3, [r4, #2]
 800e152:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e156:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e15a:	69ad      	ldr	r5, [r5, #24]
 800e15c:	e7e5      	b.n	800e12a <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e15e:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e162:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e166:	4290      	cmp	r0, r2
 800e168:	4607      	mov	r7, r0
 800e16a:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e16e:	460e      	mov	r6, r1
 800e170:	bfa8      	it	ge
 800e172:	4617      	movge	r7, r2
 800e174:	4299      	cmp	r1, r3
 800e176:	4472      	add	r2, lr
 800e178:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e17c:	bfa8      	it	ge
 800e17e:	461e      	movge	r6, r3
 800e180:	4440      	add	r0, r8
 800e182:	4471      	add	r1, lr
 800e184:	4463      	add	r3, ip
 800e186:	b200      	sxth	r0, r0
 800e188:	8027      	strh	r7, [r4, #0]
 800e18a:	b212      	sxth	r2, r2
 800e18c:	8066      	strh	r6, [r4, #2]
 800e18e:	b209      	sxth	r1, r1
 800e190:	b21b      	sxth	r3, r3
 800e192:	4290      	cmp	r0, r2
 800e194:	bfac      	ite	ge
 800e196:	ebc7 0200 	rsbge	r2, r7, r0
 800e19a:	ebc7 0202 	rsblt	r2, r7, r2
 800e19e:	4299      	cmp	r1, r3
 800e1a0:	bfac      	ite	ge
 800e1a2:	ebc6 0301 	rsbge	r3, r6, r1
 800e1a6:	ebc6 0303 	rsblt	r3, r6, r3
 800e1aa:	80a2      	strh	r2, [r4, #4]
 800e1ac:	80e3      	strh	r3, [r4, #6]
 800e1ae:	e7d4      	b.n	800e15a <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e1b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e1b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e1ba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e1be:	b383      	cbz	r3, 800e222 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e1c0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e1c2:	b374      	cbz	r4, 800e222 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e1c4:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e1c8:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e1cc:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e1d0:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e1d4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e1d8:	b303      	cbz	r3, 800e21c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e1da:	4668      	mov	r0, sp
 800e1dc:	1d21      	adds	r1, r4, #4
 800e1de:	f8ad 5000 	strh.w	r5, [sp]
 800e1e2:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e1e6:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e1ea:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e1ee:	f7ff ff43 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800e1f2:	4668      	mov	r0, sp
 800e1f4:	f7ff ff83 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 800e1f8:	b980      	cbnz	r0, 800e21c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e1fa:	f8bd 3000 	ldrh.w	r3, [sp]
 800e1fe:	4669      	mov	r1, sp
 800e200:	88a2      	ldrh	r2, [r4, #4]
 800e202:	4620      	mov	r0, r4
 800e204:	1a9b      	subs	r3, r3, r2
 800e206:	88e2      	ldrh	r2, [r4, #6]
 800e208:	f8ad 3000 	strh.w	r3, [sp]
 800e20c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e210:	1a9b      	subs	r3, r3, r2
 800e212:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e216:	6823      	ldr	r3, [r4, #0]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	4798      	blx	r3
 800e21c:	69a4      	ldr	r4, [r4, #24]
 800e21e:	2c00      	cmp	r4, #0
 800e220:	d1d8      	bne.n	800e1d4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e222:	b002      	add	sp, #8
 800e224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e228 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e228:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e22a:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800e22e:	460d      	mov	r5, r1
 800e230:	4616      	mov	r6, r2
 800e232:	b323      	cbz	r3, 800e27e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e234:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800e236:	b314      	cbz	r4, 800e27e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e238:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800e23c:	b1eb      	cbz	r3, 800e27a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e23e:	6828      	ldr	r0, [r5, #0]
 800e240:	466b      	mov	r3, sp
 800e242:	6869      	ldr	r1, [r5, #4]
 800e244:	c303      	stmia	r3!, {r0, r1}
 800e246:	4668      	mov	r0, sp
 800e248:	1d21      	adds	r1, r4, #4
 800e24a:	f7ff ff15 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800e24e:	4668      	mov	r0, sp
 800e250:	f7ff ff55 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 800e254:	b988      	cbnz	r0, 800e27a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e256:	f8bd 3000 	ldrh.w	r3, [sp]
 800e25a:	4669      	mov	r1, sp
 800e25c:	88a2      	ldrh	r2, [r4, #4]
 800e25e:	4620      	mov	r0, r4
 800e260:	1a9b      	subs	r3, r3, r2
 800e262:	88e2      	ldrh	r2, [r4, #6]
 800e264:	f8ad 3000 	strh.w	r3, [sp]
 800e268:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e26c:	1a9b      	subs	r3, r3, r2
 800e26e:	4632      	mov	r2, r6
 800e270:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e274:	6823      	ldr	r3, [r4, #0]
 800e276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e278:	4798      	blx	r3
 800e27a:	69a4      	ldr	r4, [r4, #24]
 800e27c:	e7db      	b.n	800e236 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e27e:	b002      	add	sp, #8
 800e280:	bd70      	pop	{r4, r5, r6, pc}

0800e282 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 800e282:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e286:	4770      	bx	lr

0800e288 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 800e288:	4770      	bx	lr

0800e28a <_ZN8touchgfx3HAL10FlushCacheEv>:
 800e28a:	4770      	bx	lr

0800e28c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e28c:	6803      	ldr	r3, [r0, #0]
 800e28e:	b513      	push	{r0, r1, r4, lr}
 800e290:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800e294:	2300      	movs	r3, #0
 800e296:	e9cd 3300 	strd	r3, r3, [sp]
 800e29a:	466b      	mov	r3, sp
 800e29c:	47a0      	blx	r4
 800e29e:	b002      	add	sp, #8
 800e2a0:	bd10      	pop	{r4, pc}

0800e2a2 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e2a8:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 800e2ac:	4770      	bx	lr

0800e2ae <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800e2b4:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
 800e2b8:	4770      	bx	lr

0800e2ba <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e2ba:	6843      	ldr	r3, [r0, #4]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	725a      	strb	r2, [r3, #9]
 800e2c0:	6840      	ldr	r0, [r0, #4]
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	4718      	bx	r3

0800e2c8 <_ZN8touchgfx3HAL8flushDMAEv>:
 800e2c8:	6840      	ldr	r0, [r0, #4]
 800e2ca:	6803      	ldr	r3, [r0, #0]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	4718      	bx	r3

0800e2d0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800e2d0:	b530      	push	{r4, r5, lr}
 800e2d2:	b08b      	sub	sp, #44	; 0x2c
 800e2d4:	6804      	ldr	r4, [r0, #0]
 800e2d6:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800e2da:	9509      	str	r5, [sp, #36]	; 0x24
 800e2dc:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800e2e0:	9508      	str	r5, [sp, #32]
 800e2e2:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800e2e6:	9507      	str	r5, [sp, #28]
 800e2e8:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800e2ec:	9506      	str	r5, [sp, #24]
 800e2ee:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800e2f2:	9505      	str	r5, [sp, #20]
 800e2f4:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800e2f8:	9504      	str	r5, [sp, #16]
 800e2fa:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800e2fe:	9503      	str	r5, [sp, #12]
 800e300:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800e304:	9502      	str	r5, [sp, #8]
 800e306:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800e30a:	e9cd 3500 	strd	r3, r5, [sp]
 800e30e:	4613      	mov	r3, r2
 800e310:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800e312:	2200      	movs	r2, #0
 800e314:	47a0      	blx	r4
 800e316:	b00b      	add	sp, #44	; 0x2c
 800e318:	bd30      	pop	{r4, r5, pc}
	...

0800e31c <_ZN8touchgfx3HAL10beginFrameEv>:
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	b123      	cbz	r3, 800e32c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e322:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
 800e326:	f080 0001 	eor.w	r0, r0, #1
 800e32a:	4770      	bx	lr
 800e32c:	2001      	movs	r0, #1
 800e32e:	4770      	bx	lr
 800e330:	2401aa3a 	.word	0x2401aa3a

0800e334 <_ZN8touchgfx3HAL8endFrameEv>:
 800e334:	b510      	push	{r4, lr}
 800e336:	4604      	mov	r4, r0
 800e338:	6840      	ldr	r0, [r0, #4]
 800e33a:	6803      	ldr	r3, [r0, #0]
 800e33c:	689b      	ldr	r3, [r3, #8]
 800e33e:	4798      	blx	r3
 800e340:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 800e344:	b113      	cbz	r3, 800e34c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e346:	2301      	movs	r3, #1
 800e348:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800e34c:	bd10      	pop	{r4, pc}

0800e34e <_ZN8touchgfx3HAL10initializeEv>:
 800e34e:	b510      	push	{r4, lr}
 800e350:	4604      	mov	r4, r0
 800e352:	f7fe f89b 	bl	800c48c <_ZN8touchgfx10OSWrappers10initializeEv>
 800e356:	f7fd fdb1 	bl	800bebc <_ZN8touchgfx4GPIO4initEv>
 800e35a:	6860      	ldr	r0, [r4, #4]
 800e35c:	6803      	ldr	r3, [r0, #0]
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	4798      	blx	r3
 800e362:	68e0      	ldr	r0, [r4, #12]
 800e364:	6803      	ldr	r3, [r0, #0]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	4798      	blx	r3
 800e36a:	6823      	ldr	r3, [r4, #0]
 800e36c:	4620      	mov	r0, r4
 800e36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e374:	4718      	bx	r3

0800e376 <_ZN8touchgfx3HAL9taskEntryEv>:
 800e376:	b508      	push	{r3, lr}
 800e378:	6803      	ldr	r3, [r0, #0]
 800e37a:	4604      	mov	r4, r0
 800e37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e380:	4798      	blx	r3
 800e382:	6823      	ldr	r3, [r4, #0]
 800e384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e386:	4620      	mov	r0, r4
 800e388:	4798      	blx	r3
 800e38a:	f7fe f8f5 	bl	800c578 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e392:	e7f8      	b.n	800e386 <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0800e394 <_ZN8touchgfx3HAL4tickEv>:
 800e394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e396:	6803      	ldr	r3, [r0, #0]
 800e398:	4604      	mov	r4, r0
 800e39a:	4d5b      	ldr	r5, [pc, #364]	; (800e508 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800e39c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e3a0:	4798      	blx	r3
 800e3a2:	2800      	cmp	r0, #0
 800e3a4:	f000 8095 	beq.w	800e4d2 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	2600      	movs	r6, #0
 800e3ac:	f7fd fd8e 	bl	800becc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e3b0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 800e3b4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 800e3b8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e3bc:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 800e3c0:	f884 606a 	strb.w	r6, [r4, #106]	; 0x6a
 800e3c4:	b133      	cbz	r3, 800e3d4 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800e3ce:	4798      	blx	r3
 800e3d0:	f884 6079 	strb.w	r6, [r4, #121]	; 0x79
 800e3d4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 800e3d8:	2601      	movs	r6, #1
 800e3da:	6862      	ldr	r2, [r4, #4]
 800e3dc:	f083 0301 	eor.w	r3, r3, #1
 800e3e0:	702e      	strb	r6, [r5, #0]
 800e3e2:	7253      	strb	r3, [r2, #9]
 800e3e4:	f003 f832 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 800e3e8:	6803      	ldr	r3, [r0, #0]
 800e3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ec:	4798      	blx	r3
 800e3ee:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800e3f2:	b90b      	cbnz	r3, 800e3f8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e3f4:	f884 606b 	strb.w	r6, [r4, #107]	; 0x6b
 800e3f8:	f003 f828 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 800e3fc:	6803      	ldr	r3, [r0, #0]
 800e3fe:	695b      	ldr	r3, [r3, #20]
 800e400:	4798      	blx	r3
 800e402:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e404:	6803      	ldr	r3, [r0, #0]
 800e406:	691b      	ldr	r3, [r3, #16]
 800e408:	4798      	blx	r3
 800e40a:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 800e40e:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 800e412:	3b01      	subs	r3, #1
 800e414:	b2db      	uxtb	r3, r3
 800e416:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 800e41a:	b10a      	cbz	r2, 800e420 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1eb      	bne.n	800e3f8 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e420:	4a3a      	ldr	r2, [pc, #232]	; (800e50c <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e422:	f994 1068 	ldrsb.w	r1, [r4, #104]	; 0x68
 800e426:	7813      	ldrb	r3, [r2, #0]
 800e428:	3301      	adds	r3, #1
 800e42a:	b25b      	sxtb	r3, r3
 800e42c:	4299      	cmp	r1, r3
 800e42e:	7013      	strb	r3, [r2, #0]
 800e430:	dc10      	bgt.n	800e454 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e432:	2300      	movs	r3, #0
 800e434:	68e0      	ldr	r0, [r4, #12]
 800e436:	a902      	add	r1, sp, #8
 800e438:	7013      	strb	r3, [r2, #0]
 800e43a:	aa03      	add	r2, sp, #12
 800e43c:	6803      	ldr	r3, [r0, #0]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	4798      	blx	r3
 800e442:	6823      	ldr	r3, [r4, #0]
 800e444:	2800      	cmp	r0, #0
 800e446:	d050      	beq.n	800e4ea <_ZN8touchgfx3HAL4tickEv+0x156>
 800e448:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e44c:	4620      	mov	r0, r4
 800e44e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e452:	4798      	blx	r3
 800e454:	2300      	movs	r3, #0
 800e456:	6960      	ldr	r0, [r4, #20]
 800e458:	f88d 3007 	strb.w	r3, [sp, #7]
 800e45c:	b158      	cbz	r0, 800e476 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e45e:	6803      	ldr	r3, [r0, #0]
 800e460:	f10d 0107 	add.w	r1, sp, #7
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	4798      	blx	r3
 800e468:	b128      	cbz	r0, 800e476 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e46a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800e46c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e470:	6803      	ldr	r3, [r0, #0]
 800e472:	68db      	ldr	r3, [r3, #12]
 800e474:	4798      	blx	r3
 800e476:	f104 001c 	add.w	r0, r4, #28
 800e47a:	f00e ff15 	bl	801d2a8 <_ZN8touchgfx8Gestures4tickEv>
 800e47e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 800e482:	b30b      	cbz	r3, 800e4c8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e484:	6920      	ldr	r0, [r4, #16]
 800e486:	6803      	ldr	r3, [r0, #0]
 800e488:	691b      	ldr	r3, [r3, #16]
 800e48a:	4798      	blx	r3
 800e48c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e48e:	4606      	mov	r6, r0
 800e490:	b903      	cbnz	r3, 800e494 <_ZN8touchgfx3HAL4tickEv+0x100>
 800e492:	6760      	str	r0, [r4, #116]	; 0x74
 800e494:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e496:	4a1e      	ldr	r2, [pc, #120]	; (800e510 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e498:	1af3      	subs	r3, r6, r3
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d914      	bls.n	800e4c8 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e49e:	6920      	ldr	r0, [r4, #16]
 800e4a0:	6803      	ldr	r3, [r0, #0]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	4798      	blx	r3
 800e4a6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e4a8:	2264      	movs	r2, #100	; 0x64
 800e4aa:	1af3      	subs	r3, r6, r3
 800e4ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800e4b0:	fbb0 f0f3 	udiv	r0, r0, r3
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	dc1d      	bgt.n	800e4f4 <_ZN8touchgfx3HAL4tickEv+0x160>
 800e4b8:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
 800e4bc:	6920      	ldr	r0, [r4, #16]
 800e4be:	2100      	movs	r1, #0
 800e4c0:	6803      	ldr	r3, [r0, #0]
 800e4c2:	69db      	ldr	r3, [r3, #28]
 800e4c4:	4798      	blx	r3
 800e4c6:	6766      	str	r6, [r4, #116]	; 0x74
 800e4c8:	f002 ffc0 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 800e4cc:	6803      	ldr	r3, [r0, #0]
 800e4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d0:	4798      	blx	r3
 800e4d2:	6823      	ldr	r3, [r4, #0]
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e4da:	4798      	blx	r3
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f7fd fd2d 	bl	800bf3c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	702b      	strb	r3, [r5, #0]
 800e4e6:	b004      	add	sp, #16
 800e4e8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e4ee:	4620      	mov	r0, r4
 800e4f0:	4798      	blx	r3
 800e4f2:	e7af      	b.n	800e454 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e4f4:	2863      	cmp	r0, #99	; 0x63
 800e4f6:	bfcb      	itete	gt
 800e4f8:	2300      	movgt	r3, #0
 800e4fa:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 800e4fe:	f884 3069 	strbgt.w	r3, [r4, #105]	; 0x69
 800e502:	f884 0069 	strble.w	r0, [r4, #105]	; 0x69
 800e506:	e7d9      	b.n	800e4bc <_ZN8touchgfx3HAL4tickEv+0x128>
 800e508:	2401aa40 	.word	0x2401aa40
 800e50c:	2401aa41 	.word	0x2401aa41
 800e510:	05f5e100 	.word	0x05f5e100

0800e514 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e514:	b510      	push	{r4, lr}
 800e516:	4604      	mov	r4, r0
 800e518:	f7fd fffa 	bl	800c510 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800e51c:	2200      	movs	r2, #0
 800e51e:	6863      	ldr	r3, [r4, #4]
 800e520:	729a      	strb	r2, [r3, #10]
 800e522:	bd10      	pop	{r4, pc}

0800e524 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e524:	65c1      	str	r1, [r0, #92]	; 0x5c
 800e526:	301c      	adds	r0, #28
 800e528:	f00e bebc 	b.w	801d2a4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e52c <_ZN8touchgfx3HAL5touchEll>:
 800e52c:	b530      	push	{r4, r5, lr}
 800e52e:	b087      	sub	sp, #28
 800e530:	4604      	mov	r4, r0
 800e532:	a804      	add	r0, sp, #16
 800e534:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e538:	f002 fd7a 	bl	8011030 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e53c:	9b04      	ldr	r3, [sp, #16]
 800e53e:	a906      	add	r1, sp, #24
 800e540:	a803      	add	r0, sp, #12
 800e542:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e546:	9b05      	ldr	r3, [sp, #20]
 800e548:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e54c:	f002 fdc2 	bl	80110d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e550:	f894 106f 	ldrb.w	r1, [r4, #111]	; 0x6f
 800e554:	f104 001c 	add.w	r0, r4, #28
 800e558:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e55c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e560:	b189      	cbz	r1, 800e586 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e562:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
 800e566:	9300      	str	r3, [sp, #0]
 800e568:	4613      	mov	r3, r2
 800e56a:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800e56e:	462a      	mov	r2, r5
 800e570:	f00e fea8 	bl	801d2c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e574:	b128      	cbz	r0, 800e582 <_ZN8touchgfx3HAL5touchEll+0x56>
 800e576:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e57a:	6623      	str	r3, [r4, #96]	; 0x60
 800e57c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e580:	6663      	str	r3, [r4, #100]	; 0x64
 800e582:	b007      	add	sp, #28
 800e584:	bd30      	pop	{r4, r5, pc}
 800e586:	f00e fedd 	bl	801d344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e58a:	2301      	movs	r3, #1
 800e58c:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800e590:	e7f1      	b.n	800e576 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e592 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e592:	b510      	push	{r4, lr}
 800e594:	2b00      	cmp	r3, #0
 800e596:	d046      	beq.n	800e626 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e598:	ea81 0002 	eor.w	r0, r1, r2
 800e59c:	07c4      	lsls	r4, r0, #31
 800e59e:	d508      	bpl.n	800e5b2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e5a0:	440b      	add	r3, r1
 800e5a2:	3a01      	subs	r2, #1
 800e5a4:	428b      	cmp	r3, r1
 800e5a6:	d93e      	bls.n	800e626 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e5a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e5ac:	f801 0b01 	strb.w	r0, [r1], #1
 800e5b0:	e7f8      	b.n	800e5a4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e5b2:	07d0      	lsls	r0, r2, #31
 800e5b4:	bf42      	ittt	mi
 800e5b6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e5ba:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e5be:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d911      	bls.n	800e5ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e5c6:	ea81 0402 	eor.w	r4, r1, r2
 800e5ca:	4610      	mov	r0, r2
 800e5cc:	07a4      	lsls	r4, r4, #30
 800e5ce:	d022      	beq.n	800e616 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e5d0:	f023 0401 	bic.w	r4, r3, #1
 800e5d4:	440c      	add	r4, r1
 800e5d6:	428c      	cmp	r4, r1
 800e5d8:	4602      	mov	r2, r0
 800e5da:	d904      	bls.n	800e5e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e5dc:	8812      	ldrh	r2, [r2, #0]
 800e5de:	3002      	adds	r0, #2
 800e5e0:	f821 2b02 	strh.w	r2, [r1], #2
 800e5e4:	e7f7      	b.n	800e5d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	f023 0003 	bic.w	r0, r3, #3
 800e5ee:	4408      	add	r0, r1
 800e5f0:	4288      	cmp	r0, r1
 800e5f2:	4614      	mov	r4, r2
 800e5f4:	d904      	bls.n	800e600 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e5f6:	6824      	ldr	r4, [r4, #0]
 800e5f8:	3204      	adds	r2, #4
 800e5fa:	f841 4b04 	str.w	r4, [r1], #4
 800e5fe:	e7f7      	b.n	800e5f0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e600:	f003 0303 	and.w	r3, r3, #3
 800e604:	3a01      	subs	r2, #1
 800e606:	440b      	add	r3, r1
 800e608:	428b      	cmp	r3, r1
 800e60a:	d90c      	bls.n	800e626 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e60c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e610:	f801 0b01 	strb.w	r0, [r1], #1
 800e614:	e7f8      	b.n	800e608 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e616:	0790      	lsls	r0, r2, #30
 800e618:	d0e7      	beq.n	800e5ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e61a:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e61e:	3b02      	subs	r3, #2
 800e620:	f821 0b02 	strh.w	r0, [r1], #2
 800e624:	e7e1      	b.n	800e5ea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e626:	2001      	movs	r0, #1
 800e628:	bd10      	pop	{r4, pc}

0800e62a <_ZN8touchgfx3HAL7noTouchEv>:
 800e62a:	b510      	push	{r4, lr}
 800e62c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 800e630:	4604      	mov	r4, r0
 800e632:	b153      	cbz	r3, 800e64a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e634:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
 800e638:	2101      	movs	r1, #1
 800e63a:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
 800e63e:	301c      	adds	r0, #28
 800e640:	f00e fe80 	bl	801d344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e644:	2300      	movs	r3, #0
 800e646:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
 800e64a:	bd10      	pop	{r4, pc}

0800e64c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e650:	b085      	sub	sp, #20
 800e652:	4604      	mov	r4, r0
 800e654:	2000      	movs	r0, #0
 800e656:	4699      	mov	r9, r3
 800e658:	ad04      	add	r5, sp, #16
 800e65a:	460f      	mov	r7, r1
 800e65c:	4690      	mov	r8, r2
 800e65e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e662:	69a0      	ldr	r0, [r4, #24]
 800e664:	6806      	ldr	r6, [r0, #0]
 800e666:	9501      	str	r5, [sp, #4]
 800e668:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 800e66c:	9500      	str	r5, [sp, #0]
 800e66e:	6835      	ldr	r5, [r6, #0]
 800e670:	47a8      	blx	r5
 800e672:	4d10      	ldr	r5, [pc, #64]	; (800e6b4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e674:	4606      	mov	r6, r0
 800e676:	f8a5 9000 	strh.w	r9, [r5]
 800e67a:	f7fb fa8b 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800e67e:	6803      	ldr	r3, [r0, #0]
 800e680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e682:	4798      	blx	r3
 800e684:	b128      	cbz	r0, 800e692 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e686:	2801      	cmp	r0, #1
 800e688:	d00b      	beq.n	800e6a2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e68a:	4630      	mov	r0, r6
 800e68c:	b005      	add	sp, #20
 800e68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e692:	882b      	ldrh	r3, [r5, #0]
 800e694:	fb08 7203 	mla	r2, r8, r3, r7
 800e698:	9b03      	ldr	r3, [sp, #12]
 800e69a:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e69e:	63e3      	str	r3, [r4, #60]	; 0x3c
 800e6a0:	e7f3      	b.n	800e68a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e6a2:	882a      	ldrh	r2, [r5, #0]
 800e6a4:	9b03      	ldr	r3, [sp, #12]
 800e6a6:	fb08 7202 	mla	r2, r8, r2, r7
 800e6aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e6ae:	1a9a      	subs	r2, r3, r2
 800e6b0:	63e2      	str	r2, [r4, #60]	; 0x3c
 800e6b2:	e7ea      	b.n	800e68a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e6b4:	2401aa36 	.word	0x2401aa36

0800e6b8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ba:	b08b      	sub	sp, #44	; 0x2c
 800e6bc:	4617      	mov	r7, r2
 800e6be:	4604      	mov	r4, r0
 800e6c0:	460e      	mov	r6, r1
 800e6c2:	461d      	mov	r5, r3
 800e6c4:	f7fb fa66 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800e6c8:	6803      	ldr	r3, [r0, #0]
 800e6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6cc:	4798      	blx	r3
 800e6ce:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e6d2:	9007      	str	r0, [sp, #28]
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	6822      	ldr	r2, [r4, #0]
 800e6d8:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e6dc:	4b0c      	ldr	r3, [pc, #48]	; (800e710 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e6de:	4620      	mov	r0, r4
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	9306      	str	r3, [sp, #24]
 800e6e4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800e6e8:	9305      	str	r3, [sp, #20]
 800e6ea:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 800e6ee:	9304      	str	r3, [sp, #16]
 800e6f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e6f4:	9303      	str	r3, [sp, #12]
 800e6f6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e6fa:	9302      	str	r3, [sp, #8]
 800e6fc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e700:	e9cd 5300 	strd	r5, r3, [sp]
 800e704:	463b      	mov	r3, r7
 800e706:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 800e708:	2200      	movs	r2, #0
 800e70a:	47a8      	blx	r5
 800e70c:	b00b      	add	sp, #44	; 0x2c
 800e70e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e710:	2401aa36 	.word	0x2401aa36

0800e714 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e718:	4698      	mov	r8, r3
 800e71a:	6803      	ldr	r3, [r0, #0]
 800e71c:	b08b      	sub	sp, #44	; 0x2c
 800e71e:	4617      	mov	r7, r2
 800e720:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 800e722:	460e      	mov	r6, r1
 800e724:	4b13      	ldr	r3, [pc, #76]	; (800e774 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e726:	4604      	mov	r4, r0
 800e728:	f8b3 9000 	ldrh.w	r9, [r3]
 800e72c:	f7fb fa32 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800e730:	6803      	ldr	r3, [r0, #0]
 800e732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e734:	4798      	blx	r3
 800e736:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800e73a:	2200      	movs	r2, #0
 800e73c:	4631      	mov	r1, r6
 800e73e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e742:	2302      	movs	r3, #2
 800e744:	4620      	mov	r0, r4
 800e746:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e74a:	2301      	movs	r3, #1
 800e74c:	9305      	str	r3, [sp, #20]
 800e74e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e752:	9304      	str	r3, [sp, #16]
 800e754:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800e758:	9303      	str	r3, [sp, #12]
 800e75a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800e75e:	9302      	str	r3, [sp, #8]
 800e760:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e764:	e9cd 8300 	strd	r8, r3, [sp]
 800e768:	463b      	mov	r3, r7
 800e76a:	47a8      	blx	r5
 800e76c:	b00b      	add	sp, #44	; 0x2c
 800e76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e772:	bf00      	nop
 800e774:	2401aa36 	.word	0x2401aa36

0800e778 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e77c:	4698      	mov	r8, r3
 800e77e:	6803      	ldr	r3, [r0, #0]
 800e780:	b087      	sub	sp, #28
 800e782:	460e      	mov	r6, r1
 800e784:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 800e786:	4617      	mov	r7, r2
 800e788:	4b0f      	ldr	r3, [pc, #60]	; (800e7c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e78a:	4604      	mov	r4, r0
 800e78c:	f8b3 9000 	ldrh.w	r9, [r3]
 800e790:	f7fb fa00 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800e794:	6803      	ldr	r3, [r0, #0]
 800e796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e798:	4798      	blx	r3
 800e79a:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 800e79e:	463a      	mov	r2, r7
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	f8cd 900c 	str.w	r9, [sp, #12]
 800e7a6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e7aa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	9302      	str	r3, [sp, #8]
 800e7b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800e7b6:	9301      	str	r3, [sp, #4]
 800e7b8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	4643      	mov	r3, r8
 800e7c0:	47a8      	blx	r5
 800e7c2:	b007      	add	sp, #28
 800e7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e7c8:	2401aa36 	.word	0x2401aa36

0800e7cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d0:	4604      	mov	r4, r0
 800e7d2:	b08f      	sub	sp, #60	; 0x3c
 800e7d4:	4610      	mov	r0, r2
 800e7d6:	460d      	mov	r5, r1
 800e7d8:	4691      	mov	r9, r2
 800e7da:	461e      	mov	r6, r3
 800e7dc:	f005 fa7e 	bl	8013cdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e7e0:	2800      	cmp	r0, #0
 800e7e2:	f000 809d 	beq.w	800e920 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	4620      	mov	r0, r4
 800e7ea:	f8df b198 	ldr.w	fp, [pc, #408]	; 800e984 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e7ee:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f4:	4798      	blx	r3
 800e7f6:	6823      	ldr	r3, [r4, #0]
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f8df a18c 	ldr.w	sl, [pc, #396]	; 800e988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e800:	4798      	blx	r3
 800e802:	f8bb 3000 	ldrh.w	r3, [fp]
 800e806:	4f5c      	ldr	r7, [pc, #368]	; (800e978 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e808:	9301      	str	r3, [sp, #4]
 800e80a:	f8ba 3000 	ldrh.w	r3, [sl]
 800e80e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e812:	4640      	mov	r0, r8
 800e814:	9302      	str	r3, [sp, #8]
 800e816:	883b      	ldrh	r3, [r7, #0]
 800e818:	9303      	str	r3, [sp, #12]
 800e81a:	4b58      	ldr	r3, [pc, #352]	; (800e97c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e81c:	881a      	ldrh	r2, [r3, #0]
 800e81e:	9305      	str	r3, [sp, #20]
 800e820:	9204      	str	r2, [sp, #16]
 800e822:	f005 fb9f 	bl	8013f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e826:	8038      	strh	r0, [r7, #0]
 800e828:	4640      	mov	r0, r8
 800e82a:	f005 fbcf 	bl	8013fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e82e:	9b05      	ldr	r3, [sp, #20]
 800e830:	b280      	uxth	r0, r0
 800e832:	8018      	strh	r0, [r3, #0]
 800e834:	4b52      	ldr	r3, [pc, #328]	; (800e980 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d174      	bne.n	800e926 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e83c:	883b      	ldrh	r3, [r7, #0]
 800e83e:	f8aa 0000 	strh.w	r0, [sl]
 800e842:	f8ab 3000 	strh.w	r3, [fp]
 800e846:	4648      	mov	r0, r9
 800e848:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 800e84c:	f005 fa46 	bl	8013cdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e850:	2200      	movs	r2, #0
 800e852:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800e856:	4611      	mov	r1, r2
 800e858:	4628      	mov	r0, r5
 800e85a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e85e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e862:	f7fb ff32 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
 800e866:	2301      	movs	r3, #1
 800e868:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 800e86c:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e870:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	dd5c      	ble.n	800e932 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e878:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	dd58      	ble.n	800e932 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e880:	462a      	mov	r2, r5
 800e882:	ab0a      	add	r3, sp, #40	; 0x28
 800e884:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e888:	6851      	ldr	r1, [r2, #4]
 800e88a:	c303      	stmia	r3!, {r0, r1}
 800e88c:	4631      	mov	r1, r6
 800e88e:	a80a      	add	r0, sp, #40	; 0x28
 800e890:	f7ff fbf2 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800e894:	4b38      	ldr	r3, [pc, #224]	; (800e978 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e896:	2100      	movs	r1, #0
 800e898:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e89c:	4b37      	ldr	r3, [pc, #220]	; (800e97c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e89e:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800e8a2:	aa0a      	add	r2, sp, #40	; 0x28
 800e8a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e8a8:	910c      	str	r1, [sp, #48]	; 0x30
 800e8aa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800e8ae:	ab08      	add	r3, sp, #32
 800e8b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	a90c      	add	r1, sp, #48	; 0x30
 800e8bc:	f7ff fbdc 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800e8c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d13c      	bne.n	800e940 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
 800e8cc:	2600      	movs	r6, #0
 800e8ce:	696b      	ldr	r3, [r5, #20]
 800e8d0:	a908      	add	r1, sp, #32
 800e8d2:	682a      	ldr	r2, [r5, #0]
 800e8d4:	4628      	mov	r0, r5
 800e8d6:	9305      	str	r3, [sp, #20]
 800e8d8:	616e      	str	r6, [r5, #20]
 800e8da:	6892      	ldr	r2, [r2, #8]
 800e8dc:	4790      	blx	r2
 800e8de:	9b05      	ldr	r3, [sp, #20]
 800e8e0:	4652      	mov	r2, sl
 800e8e2:	4649      	mov	r1, r9
 800e8e4:	616b      	str	r3, [r5, #20]
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
 800e8ec:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 800e8f0:	f7fb feeb 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
 800e8f4:	9a01      	ldr	r2, [sp, #4]
 800e8f6:	4b23      	ldr	r3, [pc, #140]	; (800e984 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e8f8:	4620      	mov	r0, r4
 800e8fa:	801a      	strh	r2, [r3, #0]
 800e8fc:	9a02      	ldr	r2, [sp, #8]
 800e8fe:	4b22      	ldr	r3, [pc, #136]	; (800e988 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e900:	801a      	strh	r2, [r3, #0]
 800e902:	9a03      	ldr	r2, [sp, #12]
 800e904:	4b1c      	ldr	r3, [pc, #112]	; (800e978 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e906:	801a      	strh	r2, [r3, #0]
 800e908:	4b1c      	ldr	r3, [pc, #112]	; (800e97c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e90a:	9a04      	ldr	r2, [sp, #16]
 800e90c:	801a      	strh	r2, [r3, #0]
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 800e914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e916:	4798      	blx	r3
 800e918:	6823      	ldr	r3, [r4, #0]
 800e91a:	4620      	mov	r0, r4
 800e91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e91e:	4798      	blx	r3
 800e920:	b00f      	add	sp, #60	; 0x3c
 800e922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e926:	883b      	ldrh	r3, [r7, #0]
 800e928:	f8ab 0000 	strh.w	r0, [fp]
 800e92c:	f8aa 3000 	strh.w	r3, [sl]
 800e930:	e789      	b.n	800e846 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e932:	462a      	mov	r2, r5
 800e934:	ab0a      	add	r3, sp, #40	; 0x28
 800e936:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e93a:	6851      	ldr	r1, [r2, #4]
 800e93c:	c303      	stmia	r3!, {r0, r1}
 800e93e:	e7a9      	b.n	800e894 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e940:	a807      	add	r0, sp, #28
 800e942:	f005 fc47 	bl	80141d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e946:	4606      	mov	r6, r0
 800e948:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800e94a:	6803      	ldr	r3, [r0, #0]
 800e94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e94e:	4798      	blx	r3
 800e950:	4286      	cmp	r6, r0
 800e952:	d1b8      	bne.n	800e8c6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e954:	f7fb f91e 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800e958:	6803      	ldr	r3, [r0, #0]
 800e95a:	4606      	mov	r6, r0
 800e95c:	a807      	add	r0, sp, #28
 800e95e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e960:	9305      	str	r3, [sp, #20]
 800e962:	f005 fc37 	bl	80141d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e966:	9b05      	ldr	r3, [sp, #20]
 800e968:	4601      	mov	r1, r0
 800e96a:	4630      	mov	r0, r6
 800e96c:	4798      	blx	r3
 800e96e:	f080 0001 	eor.w	r0, r0, #1
 800e972:	b2c0      	uxtb	r0, r0
 800e974:	e7a8      	b.n	800e8c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e976:	bf00      	nop
 800e978:	2401aa30 	.word	0x2401aa30
 800e97c:	2401aa32 	.word	0x2401aa32
 800e980:	2401aa34 	.word	0x2401aa34
 800e984:	2401aa36 	.word	0x2401aa36
 800e988:	2401aa38 	.word	0x2401aa38

0800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e98c:	4b07      	ldr	r3, [pc, #28]	; (800e9ac <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e98e:	b510      	push	{r4, lr}
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	4604      	mov	r4, r0
 800e994:	b13b      	cbz	r3, 800e9a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e996:	6803      	ldr	r3, [r0, #0]
 800e998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e99a:	4798      	blx	r3
 800e99c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e99e:	4283      	cmp	r3, r0
 800e9a0:	d101      	bne.n	800e9a6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e9a2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800e9a8:	e7fc      	b.n	800e9a4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e9aa:	bf00      	nop
 800e9ac:	2401aa3a 	.word	0x2401aa3a

0800e9b0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b4:	461d      	mov	r5, r3
 800e9b6:	b08a      	sub	sp, #40	; 0x28
 800e9b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9bc:	4690      	mov	r8, r2
 800e9be:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800e9c2:	2400      	movs	r4, #0
 800e9c4:	4607      	mov	r7, r0
 800e9c6:	fb06 8505 	mla	r5, r6, r5, r8
 800e9ca:	9404      	str	r4, [sp, #16]
 800e9cc:	f88d 4020 	strb.w	r4, [sp, #32]
 800e9d0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e9d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800e9d8:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e9dc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800e9e0:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e9e4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800e9e8:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e9ec:	f7ff ffce 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e9f0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e9fa:	a901      	add	r1, sp, #4
 800e9fc:	9505      	str	r5, [sp, #20]
 800e9fe:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ea02:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 800ea06:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800ea0a:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800ea0e:	6803      	ldr	r3, [r0, #0]
 800ea10:	685b      	ldr	r3, [r3, #4]
 800ea12:	4798      	blx	r3
 800ea14:	b00a      	add	sp, #40	; 0x28
 800ea16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea1a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800ea1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ea1e:	b08b      	sub	sp, #44	; 0x2c
 800ea20:	2400      	movs	r4, #0
 800ea22:	4691      	mov	r9, r2
 800ea24:	461d      	mov	r5, r3
 800ea26:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 800ea2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea2e:	4688      	mov	r8, r1
 800ea30:	4607      	mov	r7, r0
 800ea32:	9404      	str	r4, [sp, #16]
 800ea34:	fb06 9505 	mla	r5, r6, r5, r9
 800ea38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea3c:	f7ff ffa6 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea40:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ea44:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ea4e:	a901      	add	r1, sp, #4
 800ea50:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800ea54:	9505      	str	r5, [sp, #20]
 800ea56:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ea5a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800ea5e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800ea62:	f8cd 8010 	str.w	r8, [sp, #16]
 800ea66:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ea6a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800ea6e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 800ea72:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 800ea76:	6803      	ldr	r3, [r0, #0]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	4798      	blx	r3
 800ea7c:	b00b      	add	sp, #44	; 0x2c
 800ea7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800ea84 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800ea84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea88:	b08a      	sub	sp, #40	; 0x28
 800ea8a:	4698      	mov	r8, r3
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4606      	mov	r6, r0
 800ea90:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800ea94:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 800ea98:	2d0b      	cmp	r5, #11
 800ea9a:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 800ea9e:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 800eaa2:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 800eaa6:	9304      	str	r3, [sp, #16]
 800eaa8:	d137      	bne.n	800eb1a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800eaaa:	2380      	movs	r3, #128	; 0x80
 800eaac:	f88d 0020 	strb.w	r0, [sp, #32]
 800eab0:	4630      	mov	r0, r6
 800eab2:	9203      	str	r2, [sp, #12]
 800eab4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eab8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800eabc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eac0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800eac4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eac8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 800eacc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ead0:	f7ff ff5c 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ead4:	2c0b      	cmp	r4, #11
 800ead6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800eada:	f8ad 701e 	strh.w	r7, [sp, #30]
 800eade:	bf94      	ite	ls
 800eae0:	4b19      	ldrls	r3, [pc, #100]	; (800eb48 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800eae2:	2100      	movhi	r1, #0
 800eae4:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 800eae8:	bf98      	it	ls
 800eaea:	5d19      	ldrbls	r1, [r3, r4]
 800eaec:	fb02 8307 	mla	r3, r2, r7, r8
 800eaf0:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 800eaf4:	10c9      	asrs	r1, r1, #3
 800eaf6:	fb01 0003 	mla	r0, r1, r3, r0
 800eafa:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 800eafe:	a901      	add	r1, sp, #4
 800eb00:	9005      	str	r0, [sp, #20]
 800eb02:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800eb06:	2300      	movs	r3, #0
 800eb08:	6870      	ldr	r0, [r6, #4]
 800eb0a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800eb0e:	6803      	ldr	r3, [r0, #0]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	4798      	blx	r3
 800eb14:	b00a      	add	sp, #40	; 0x28
 800eb16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb1a:	2d02      	cmp	r5, #2
 800eb1c:	d109      	bne.n	800eb32 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800eb1e:	28ff      	cmp	r0, #255	; 0xff
 800eb20:	d105      	bne.n	800eb2e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800eb22:	f1bc 0f00 	cmp.w	ip, #0
 800eb26:	bf14      	ite	ne
 800eb28:	2340      	movne	r3, #64	; 0x40
 800eb2a:	2320      	moveq	r3, #32
 800eb2c:	e7be      	b.n	800eaac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800eb2e:	2340      	movs	r3, #64	; 0x40
 800eb30:	e7bc      	b.n	800eaac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800eb32:	28ff      	cmp	r0, #255	; 0xff
 800eb34:	d105      	bne.n	800eb42 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800eb36:	f1bc 0f00 	cmp.w	ip, #0
 800eb3a:	bf14      	ite	ne
 800eb3c:	2304      	movne	r3, #4
 800eb3e:	2301      	moveq	r3, #1
 800eb40:	e7b4      	b.n	800eaac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800eb42:	2304      	movs	r3, #4
 800eb44:	e7b2      	b.n	800eaac <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800eb46:	bf00      	nop
 800eb48:	0801f97c 	.word	0x0801f97c

0800eb4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800eb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb50:	b08b      	sub	sp, #44	; 0x2c
 800eb52:	461d      	mov	r5, r3
 800eb54:	2400      	movs	r4, #0
 800eb56:	4688      	mov	r8, r1
 800eb58:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 800eb5c:	4693      	mov	fp, r2
 800eb5e:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 800eb62:	4607      	mov	r7, r0
 800eb64:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 800eb68:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 800eb6c:	9404      	str	r4, [sp, #16]
 800eb6e:	bf14      	ite	ne
 800eb70:	2308      	movne	r3, #8
 800eb72:	2302      	moveq	r3, #2
 800eb74:	fb05 b50a 	mla	r5, r5, sl, fp
 800eb78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb7c:	f7ff ff06 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eb80:	2e0b      	cmp	r6, #11
 800eb82:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 800eb86:	a901      	add	r1, sp, #4
 800eb88:	bf98      	it	ls
 800eb8a:	4b13      	ldrls	r3, [pc, #76]	; (800ebd8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800eb8c:	f8ad a01e 	strh.w	sl, [sp, #30]
 800eb90:	bf98      	it	ls
 800eb92:	5d9c      	ldrbls	r4, [r3, r6]
 800eb94:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800eb98:	10e4      	asrs	r4, r4, #3
 800eb9a:	f8cd 8010 	str.w	r8, [sp, #16]
 800eb9e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eba2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800eba6:	fb04 0405 	mla	r4, r4, r5, r0
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	9405      	str	r4, [sp, #20]
 800ebb4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ebb8:	f88d 9020 	strb.w	r9, [sp, #32]
 800ebbc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 800ebc0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800ebc4:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 800ebc8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 800ebcc:	6803      	ldr	r3, [r0, #0]
 800ebce:	685b      	ldr	r3, [r3, #4]
 800ebd0:	4798      	blx	r3
 800ebd2:	b00b      	add	sp, #44	; 0x2c
 800ebd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebd8:	0801f97c 	.word	0x0801f97c

0800ebdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800ebdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe0:	461e      	mov	r6, r3
 800ebe2:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800ebe4:	460f      	mov	r7, r1
 800ebe6:	4690      	mov	r8, r2
 800ebe8:	881d      	ldrh	r5, [r3, #0]
 800ebea:	f7fa ffd3 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800ebee:	6803      	ldr	r3, [r0, #0]
 800ebf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf2:	4798      	blx	r3
 800ebf4:	280b      	cmp	r0, #11
 800ebf6:	bf96      	itet	ls
 800ebf8:	4b05      	ldrls	r3, [pc, #20]	; (800ec10 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800ebfa:	2400      	movhi	r4, #0
 800ebfc:	5c1c      	ldrbls	r4, [r3, r0]
 800ebfe:	fb08 7005 	mla	r0, r8, r5, r7
 800ec02:	10e4      	asrs	r4, r4, #3
 800ec04:	fb04 6000 	mla	r0, r4, r0, r6
 800ec08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0c:	2401aa36 	.word	0x2401aa36
 800ec10:	0801f97c 	.word	0x0801f97c

0800ec14 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800ec14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec16:	b08b      	sub	sp, #44	; 0x2c
 800ec18:	461f      	mov	r7, r3
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	4616      	mov	r6, r2
 800ec1e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 800ec22:	2500      	movs	r5, #0
 800ec24:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ec28:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800ec2c:	9504      	str	r5, [sp, #16]
 800ec2e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ec32:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800ec36:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ec3a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800ec3e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec42:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800ec46:	f88d 3020 	strb.w	r3, [sp, #32]
 800ec4a:	f7ff fe9f 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ec4e:	463a      	mov	r2, r7
 800ec50:	4631      	mov	r1, r6
 800ec52:	4603      	mov	r3, r0
 800ec54:	4620      	mov	r0, r4
 800ec56:	f7ff ffc1 	bl	800ebdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ec5a:	4b0e      	ldr	r3, [pc, #56]	; (800ec94 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800ec5c:	9005      	str	r0, [sp, #20]
 800ec5e:	881b      	ldrh	r3, [r3, #0]
 800ec60:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ec64:	f7fa ff96 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800ec68:	6803      	ldr	r3, [r0, #0]
 800ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec6c:	4798      	blx	r3
 800ec6e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ec70:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 800ec74:	a901      	add	r1, sp, #4
 800ec76:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800ec7a:	9304      	str	r3, [sp, #16]
 800ec7c:	6860      	ldr	r0, [r4, #4]
 800ec7e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800ec82:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 800ec86:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800ec8a:	6803      	ldr	r3, [r0, #0]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	4798      	blx	r3
 800ec90:	b00b      	add	sp, #44	; 0x2c
 800ec92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec94:	2401aa36 	.word	0x2401aa36

0800ec98 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ec98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec9a:	b08d      	sub	sp, #52	; 0x34
 800ec9c:	2501      	movs	r5, #1
 800ec9e:	4604      	mov	r4, r0
 800eca0:	466b      	mov	r3, sp
 800eca2:	9503      	str	r5, [sp, #12]
 800eca4:	e883 0006 	stmia.w	r3, {r1, r2}
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f8bd 6000 	ldrh.w	r6, [sp]
 800ecae:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ecb2:	9306      	str	r3, [sp, #24]
 800ecb4:	6803      	ldr	r3, [r0, #0]
 800ecb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb8:	4798      	blx	r3
 800ecba:	463a      	mov	r2, r7
 800ecbc:	4631      	mov	r1, r6
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f7ff ff8b 	bl	800ebdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ecc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ecc8:	9004      	str	r0, [sp, #16]
 800ecca:	9307      	str	r3, [sp, #28]
 800eccc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ecd0:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ecd4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ecd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ecdc:	4b0e      	ldr	r3, [pc, #56]	; (800ed18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ece4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ece8:	f7fa ff54 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800ecec:	6803      	ldr	r3, [r0, #0]
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	4798      	blx	r3
 800ecf2:	23ff      	movs	r3, #255	; 0xff
 800ecf4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800ecf8:	a903      	add	r1, sp, #12
 800ecfa:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ecfe:	6860      	ldr	r0, [r4, #4]
 800ed00:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800ed04:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ed08:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800ed0c:	6803      	ldr	r3, [r0, #0]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	4798      	blx	r3
 800ed12:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800ed14:	b00d      	add	sp, #52	; 0x34
 800ed16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed18:	2401aa36 	.word	0x2401aa36

0800ed1c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800ed1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed20:	b08c      	sub	sp, #48	; 0x30
 800ed22:	461e      	mov	r6, r3
 800ed24:	2300      	movs	r3, #0
 800ed26:	4604      	mov	r4, r0
 800ed28:	466d      	mov	r5, sp
 800ed2a:	9306      	str	r3, [sp, #24]
 800ed2c:	6803      	ldr	r3, [r0, #0]
 800ed2e:	e885 0006 	stmia.w	r5, {r1, r2}
 800ed32:	2501      	movs	r5, #1
 800ed34:	f8bd 7000 	ldrh.w	r7, [sp]
 800ed38:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800ed3c:	9503      	str	r5, [sp, #12]
 800ed3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed40:	4798      	blx	r3
 800ed42:	4642      	mov	r2, r8
 800ed44:	4639      	mov	r1, r7
 800ed46:	4603      	mov	r3, r0
 800ed48:	4620      	mov	r0, r4
 800ed4a:	f7ff ff47 	bl	800ebdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ed4e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ed52:	9004      	str	r0, [sp, #16]
 800ed54:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ed58:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ed5c:	9607      	str	r6, [sp, #28]
 800ed5e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800ed62:	4b10      	ldr	r3, [pc, #64]	; (800eda4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800ed64:	881b      	ldrh	r3, [r3, #0]
 800ed66:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 800ed6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ed6c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 800ed70:	f7fa ff10 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800ed74:	6803      	ldr	r3, [r0, #0]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	4798      	blx	r3
 800ed7a:	23ff      	movs	r3, #255	; 0xff
 800ed7c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 800ed80:	a903      	add	r1, sp, #12
 800ed82:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 800ed86:	6860      	ldr	r0, [r4, #4]
 800ed88:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800ed8c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800ed90:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 800ed94:	6803      	ldr	r3, [r0, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	4798      	blx	r3
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	b00c      	add	sp, #48	; 0x30
 800ed9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eda2:	bf00      	nop
 800eda4:	2401aa36 	.word	0x2401aa36

0800eda8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800eda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edaa:	b085      	sub	sp, #20
 800edac:	4605      	mov	r5, r0
 800edae:	ac02      	add	r4, sp, #8
 800edb0:	e884 0006 	stmia.w	r4, {r1, r2}
 800edb4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800edb8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800edbc:	f7ff fde6 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800edc0:	4631      	mov	r1, r6
 800edc2:	4603      	mov	r3, r0
 800edc4:	463a      	mov	r2, r7
 800edc6:	4628      	mov	r0, r5
 800edc8:	f7ff ff08 	bl	800ebdc <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800edcc:	4a05      	ldr	r2, [pc, #20]	; (800ede4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800edce:	682b      	ldr	r3, [r5, #0]
 800edd0:	8812      	ldrh	r2, [r2, #0]
 800edd2:	9200      	str	r2, [sp, #0]
 800edd4:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800edd6:	4603      	mov	r3, r0
 800edd8:	4628      	mov	r0, r5
 800edda:	e894 0006 	ldmia.w	r4, {r1, r2}
 800edde:	47b0      	blx	r6
 800ede0:	b005      	add	sp, #20
 800ede2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ede4:	2401aa36 	.word	0x2401aa36

0800ede8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800ede8:	b570      	push	{r4, r5, r6, lr}
 800edea:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 800edee:	4604      	mov	r4, r0
 800edf0:	b19b      	cbz	r3, 800ee1a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800edf2:	2002      	movs	r0, #2
 800edf4:	f7fd f8da 	bl	800bfac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800edf8:	2300      	movs	r3, #0
 800edfa:	4620      	mov	r0, r4
 800edfc:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 800ee00:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
 800ee04:	6823      	ldr	r3, [r4, #0]
 800ee06:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800ee0a:	f7ff fdbf 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ee0e:	4601      	mov	r1, r0
 800ee10:	4620      	mov	r0, r4
 800ee12:	462b      	mov	r3, r5
 800ee14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ee18:	4718      	bx	r3
 800ee1a:	bd70      	pop	{r4, r5, r6, pc}

0800ee1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 800ee22:	4604      	mov	r4, r0
 800ee24:	460d      	mov	r5, r1
 800ee26:	428b      	cmp	r3, r1
 800ee28:	d006      	beq.n	800ee38 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800ee2a:	6803      	ldr	r3, [r0, #0]
 800ee2c:	b929      	cbnz	r1, 800ee3a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800ee2e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ee32:	4798      	blx	r3
 800ee34:	f884 507b 	strb.w	r5, [r4, #123]	; 0x7b
 800ee38:	bd38      	pop	{r3, r4, r5, pc}
 800ee3a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ee3e:	e7f8      	b.n	800ee32 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800ee40 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ee40:	4b0d      	ldr	r3, [pc, #52]	; (800ee78 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ee42:	b510      	push	{r4, lr}
 800ee44:	781b      	ldrb	r3, [r3, #0]
 800ee46:	4604      	mov	r4, r0
 800ee48:	b95b      	cbnz	r3, 800ee62 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ee4a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d007      	beq.n	800ee62 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ee52:	6840      	ldr	r0, [r0, #4]
 800ee54:	f000 f90e 	bl	800f074 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800ee58:	b118      	cbz	r0, 800ee62 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ee5a:	6862      	ldr	r2, [r4, #4]
 800ee5c:	7a53      	ldrb	r3, [r2, #9]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d0fc      	beq.n	800ee5c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800ee62:	f7fd fb47 	bl	800c4f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ee66:	4620      	mov	r0, r4
 800ee68:	2100      	movs	r1, #0
 800ee6a:	f7ff ffd7 	bl	800ee1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ee6e:	4620      	mov	r0, r4
 800ee70:	f7ff fd8c 	bl	800e98c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ee74:	bd10      	pop	{r4, pc}
 800ee76:	bf00      	nop
 800ee78:	2401aa3a 	.word	0x2401aa3a

0800ee7c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 800ee7c:	4770      	bx	lr

0800ee7e <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 800ee7e:	2000      	movs	r0, #0
 800ee80:	4770      	bx	lr

0800ee82 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800ee82:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800ee86:	1a13      	subs	r3, r2, r0
 800ee88:	4258      	negs	r0, r3
 800ee8a:	4158      	adcs	r0, r3
 800ee8c:	4770      	bx	lr

0800ee8e <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ee8e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ee92:	1a9b      	subs	r3, r3, r2
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	bfdc      	itt	le
 800ee98:	6882      	ldrle	r2, [r0, #8]
 800ee9a:	189b      	addle	r3, r3, r2
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	bfcc      	ite	gt
 800eea0:	2000      	movgt	r0, #0
 800eea2:	2001      	movle	r0, #1
 800eea4:	4770      	bx	lr

0800eea6 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800eea6:	6902      	ldr	r2, [r0, #16]
 800eea8:	6843      	ldr	r3, [r0, #4]
 800eeaa:	2024      	movs	r0, #36	; 0x24
 800eeac:	fb00 3002 	mla	r0, r0, r2, r3
 800eeb0:	4770      	bx	lr

0800eeb2 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800eeb2:	6803      	ldr	r3, [r0, #0]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	4718      	bx	r3

0800eeb8 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800eeb8:	2301      	movs	r3, #1
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	7203      	strb	r3, [r0, #8]
 800eebe:	4604      	mov	r4, r0
 800eec0:	6840      	ldr	r0, [r0, #4]
 800eec2:	6803      	ldr	r3, [r0, #0]
 800eec4:	699b      	ldr	r3, [r3, #24]
 800eec6:	4798      	blx	r3
 800eec8:	6803      	ldr	r3, [r0, #0]
 800eeca:	4605      	mov	r5, r0
 800eecc:	2b40      	cmp	r3, #64	; 0x40
 800eece:	d00c      	beq.n	800eeea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eed0:	d810      	bhi.n	800eef4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800eed2:	2b04      	cmp	r3, #4
 800eed4:	d01d      	beq.n	800ef12 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800eed6:	d804      	bhi.n	800eee2 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800eed8:	2b01      	cmp	r3, #1
 800eeda:	d006      	beq.n	800eeea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eedc:	2b02      	cmp	r3, #2
 800eede:	d02c      	beq.n	800ef3a <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800eee0:	bd70      	pop	{r4, r5, r6, pc}
 800eee2:	2b08      	cmp	r3, #8
 800eee4:	d01d      	beq.n	800ef22 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800eee6:	2b20      	cmp	r3, #32
 800eee8:	d1fa      	bne.n	800eee0 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	4620      	mov	r0, r4
 800eeee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eef0:	4798      	blx	r3
 800eef2:	e013      	b.n	800ef1c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800eef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eef8:	d0f7      	beq.n	800eeea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800eefa:	d804      	bhi.n	800ef06 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800eefc:	2b80      	cmp	r3, #128	; 0x80
 800eefe:	d0f4      	beq.n	800eeea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ef00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef04:	e7f0      	b.n	800eee8 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800ef06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef0a:	d0ee      	beq.n	800eeea <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ef0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef10:	e7e5      	b.n	800eede <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800ef12:	6823      	ldr	r3, [r4, #0]
 800ef14:	7f01      	ldrb	r1, [r0, #28]
 800ef16:	4620      	mov	r0, r4
 800ef18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef1a:	4798      	blx	r3
 800ef1c:	6823      	ldr	r3, [r4, #0]
 800ef1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef20:	e006      	b.n	800ef30 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ef22:	6823      	ldr	r3, [r4, #0]
 800ef24:	7f01      	ldrb	r1, [r0, #28]
 800ef26:	4620      	mov	r0, r4
 800ef28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef2a:	4798      	blx	r3
 800ef2c:	6823      	ldr	r3, [r4, #0]
 800ef2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef30:	4629      	mov	r1, r5
 800ef32:	4620      	mov	r0, r4
 800ef34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef38:	4718      	bx	r3
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef40:	4798      	blx	r3
 800ef42:	e7f3      	b.n	800ef2c <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800ef44 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800ef44:	4770      	bx	lr

0800ef46 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800ef46:	4770      	bx	lr

0800ef48 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800ef48:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800ef4c:	b510      	push	{r4, lr}
 800ef4e:	1ad2      	subs	r2, r2, r3
 800ef50:	2a00      	cmp	r2, #0
 800ef52:	bfdc      	itt	le
 800ef54:	6884      	ldrle	r4, [r0, #8]
 800ef56:	1912      	addle	r2, r2, r4
 800ef58:	2a01      	cmp	r2, #1
 800ef5a:	dd16      	ble.n	800ef8a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800ef5c:	6842      	ldr	r2, [r0, #4]
 800ef5e:	2424      	movs	r4, #36	; 0x24
 800ef60:	fb04 2303 	mla	r3, r4, r3, r2
 800ef64:	f101 0220 	add.w	r2, r1, #32
 800ef68:	f851 4b04 	ldr.w	r4, [r1], #4
 800ef6c:	4291      	cmp	r1, r2
 800ef6e:	f843 4b04 	str.w	r4, [r3], #4
 800ef72:	d1f9      	bne.n	800ef68 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800ef74:	780a      	ldrb	r2, [r1, #0]
 800ef76:	701a      	strb	r2, [r3, #0]
 800ef78:	68c3      	ldr	r3, [r0, #12]
 800ef7a:	6882      	ldr	r2, [r0, #8]
 800ef7c:	f3bf 8f5b 	dmb	ish
 800ef80:	3301      	adds	r3, #1
 800ef82:	429a      	cmp	r2, r3
 800ef84:	bfd8      	it	le
 800ef86:	1a9b      	suble	r3, r3, r2
 800ef88:	60c3      	str	r3, [r0, #12]
 800ef8a:	bd10      	pop	{r4, pc}

0800ef8c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ef8c:	6903      	ldr	r3, [r0, #16]
 800ef8e:	6882      	ldr	r2, [r0, #8]
 800ef90:	f3bf 8f5b 	dmb	ish
 800ef94:	3301      	adds	r3, #1
 800ef96:	429a      	cmp	r2, r3
 800ef98:	bfd8      	it	le
 800ef9a:	1a9b      	suble	r3, r3, r2
 800ef9c:	6103      	str	r3, [r0, #16]
 800ef9e:	4770      	bx	lr

0800efa0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800efa0:	b570      	push	{r4, r5, r6, lr}
 800efa2:	4604      	mov	r4, r0
 800efa4:	460e      	mov	r6, r1
 800efa6:	6860      	ldr	r0, [r4, #4]
 800efa8:	6803      	ldr	r3, [r0, #0]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	4798      	blx	r3
 800efae:	2800      	cmp	r0, #0
 800efb0:	d1f9      	bne.n	800efa6 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800efb2:	4d0d      	ldr	r5, [pc, #52]	; (800efe8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800efb4:	6828      	ldr	r0, [r5, #0]
 800efb6:	6803      	ldr	r3, [r0, #0]
 800efb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efba:	4798      	blx	r3
 800efbc:	f7fd fab4 	bl	800c528 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800efc0:	6828      	ldr	r0, [r5, #0]
 800efc2:	2101      	movs	r1, #1
 800efc4:	f7ff ff2a 	bl	800ee1c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800efc8:	6860      	ldr	r0, [r4, #4]
 800efca:	4631      	mov	r1, r6
 800efcc:	6803      	ldr	r3, [r0, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	4798      	blx	r3
 800efd2:	6823      	ldr	r3, [r4, #0]
 800efd4:	4620      	mov	r0, r4
 800efd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efd8:	4798      	blx	r3
 800efda:	6828      	ldr	r0, [r5, #0]
 800efdc:	6803      	ldr	r3, [r0, #0]
 800efde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efe4:	4718      	bx	r3
 800efe6:	bf00      	nop
 800efe8:	2401aa3c 	.word	0x2401aa3c

0800efec <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800efec:	b508      	push	{r3, lr}
 800efee:	f7fd fa81 	bl	800c4f4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800eff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800eff6:	f7fd ba8b 	b.w	800c510 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800effa <_ZN8touchgfx13DMA_Interface5startEv>:
 800effa:	b510      	push	{r4, lr}
 800effc:	4604      	mov	r4, r0
 800effe:	6840      	ldr	r0, [r0, #4]
 800f000:	6803      	ldr	r3, [r0, #0]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4798      	blx	r3
 800f006:	b948      	cbnz	r0, 800f01c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f008:	7a63      	ldrb	r3, [r4, #9]
 800f00a:	b13b      	cbz	r3, 800f01c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f00c:	7a23      	ldrb	r3, [r4, #8]
 800f00e:	b92b      	cbnz	r3, 800f01c <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	4620      	mov	r0, r4
 800f014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f01a:	4718      	bx	r3
 800f01c:	bd10      	pop	{r4, pc}

0800f01e <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800f01e:	b570      	push	{r4, r5, r6, lr}
 800f020:	4604      	mov	r4, r0
 800f022:	6840      	ldr	r0, [r0, #4]
 800f024:	6803      	ldr	r3, [r0, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4798      	blx	r3
 800f02a:	4605      	mov	r5, r0
 800f02c:	b930      	cbnz	r0, 800f03c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f02e:	7a23      	ldrb	r3, [r4, #8]
 800f030:	b123      	cbz	r3, 800f03c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800f032:	6860      	ldr	r0, [r4, #4]
 800f034:	6803      	ldr	r3, [r0, #0]
 800f036:	695b      	ldr	r3, [r3, #20]
 800f038:	4798      	blx	r3
 800f03a:	7225      	strb	r5, [r4, #8]
 800f03c:	6860      	ldr	r0, [r4, #4]
 800f03e:	6803      	ldr	r3, [r0, #0]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	4798      	blx	r3
 800f044:	b928      	cbnz	r0, 800f052 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800f046:	6823      	ldr	r3, [r4, #0]
 800f048:	4620      	mov	r0, r4
 800f04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f050:	4718      	bx	r3
 800f052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f056:	f7fd ba73 	b.w	800c540 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

0800f05c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800f05c:	b510      	push	{r4, lr}
 800f05e:	6082      	str	r2, [r0, #8]
 800f060:	2200      	movs	r2, #0
 800f062:	4c03      	ldr	r4, [pc, #12]	; (800f070 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800f064:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800f068:	e9c0 4100 	strd	r4, r1, [r0]
 800f06c:	bd10      	pop	{r4, pc}
 800f06e:	bf00      	nop
 800f070:	0801fab8 	.word	0x0801fab8

0800f074 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800f074:	6840      	ldr	r0, [r0, #4]
 800f076:	6803      	ldr	r3, [r0, #0]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	4718      	bx	r3

0800f07c <_ZN8touchgfx8TextArea8setWidthEs>:
 800f07c:	b530      	push	{r4, r5, lr}
 800f07e:	b085      	sub	sp, #20
 800f080:	6803      	ldr	r3, [r0, #0]
 800f082:	4604      	mov	r4, r0
 800f084:	8101      	strh	r1, [r0, #8]
 800f086:	466d      	mov	r5, sp
 800f088:	4601      	mov	r1, r0
 800f08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f08e:	343c      	adds	r4, #60	; 0x3c
 800f090:	4628      	mov	r0, r5
 800f092:	4798      	blx	r3
 800f094:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f098:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f09c:	b005      	add	sp, #20
 800f09e:	bd30      	pop	{r4, r5, pc}

0800f0a0 <_ZN8touchgfx8TextArea9setHeightEs>:
 800f0a0:	b530      	push	{r4, r5, lr}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	6803      	ldr	r3, [r0, #0]
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	8141      	strh	r1, [r0, #10]
 800f0aa:	466d      	mov	r5, sp
 800f0ac:	4601      	mov	r1, r0
 800f0ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0b2:	343c      	adds	r4, #60	; 0x3c
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	4798      	blx	r3
 800f0b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f0bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0c0:	b005      	add	sp, #20
 800f0c2:	bd30      	pop	{r4, r5, pc}

0800f0c4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	8002      	strh	r2, [r0, #0]
 800f0c8:	8042      	strh	r2, [r0, #2]
 800f0ca:	8082      	strh	r2, [r0, #4]
 800f0cc:	80c2      	strh	r2, [r0, #6]
 800f0ce:	4770      	bx	lr

0800f0d0 <_ZN8touchgfx8TextArea8setAlphaEh>:
 800f0d0:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 800f0d4:	4770      	bx	lr
	...

0800f0d8 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	6803      	ldr	r3, [r0, #0]
 800f0dc:	4604      	mov	r4, r0
 800f0de:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f0e0:	460d      	mov	r5, r1
 800f0e2:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800f0e4:	4b08      	ldr	r3, [pc, #32]	; (800f108 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800f0ec:	4b07      	ldr	r3, [pc, #28]	; (800f10c <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f0f4:	6803      	ldr	r3, [r0, #0]
 800f0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f8:	4798      	blx	r3
 800f0fa:	1a29      	subs	r1, r5, r0
 800f0fc:	4633      	mov	r3, r6
 800f0fe:	4620      	mov	r0, r4
 800f100:	b209      	sxth	r1, r1
 800f102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f106:	4718      	bx	r3
 800f108:	2401aa8c 	.word	0x2401aa8c
 800f10c:	2401aa94 	.word	0x2401aa94

0800f110 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 800f110:	b570      	push	{r4, r5, r6, lr}
 800f112:	6803      	ldr	r3, [r0, #0]
 800f114:	4604      	mov	r4, r0
 800f116:	4615      	mov	r5, r2
 800f118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11a:	4798      	blx	r3
 800f11c:	6823      	ldr	r3, [r4, #0]
 800f11e:	4629      	mov	r1, r5
 800f120:	4620      	mov	r0, r4
 800f122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f128:	4718      	bx	r3

0800f12a <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 800f12a:	2000      	movs	r0, #0
 800f12c:	4770      	bx	lr

0800f12e <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 800f12e:	2000      	movs	r0, #0
 800f130:	4770      	bx	lr
	...

0800f134 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 800f134:	4b07      	ldr	r3, [pc, #28]	; (800f154 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 800f136:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f138:	881b      	ldrh	r3, [r3, #0]
 800f13a:	4293      	cmp	r3, r2
 800f13c:	bf81      	itttt	hi
 800f13e:	4b06      	ldrhi	r3, [pc, #24]	; (800f158 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 800f140:	681b      	ldrhi	r3, [r3, #0]
 800f142:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 800f146:	7858      	ldrbhi	r0, [r3, #1]
 800f148:	bf8c      	ite	hi
 800f14a:	f000 0003 	andhi.w	r0, r0, #3
 800f14e:	2000      	movls	r0, #0
 800f150:	4770      	bx	lr
 800f152:	bf00      	nop
 800f154:	2401aa90 	.word	0x2401aa90
 800f158:	2401aa8c 	.word	0x2401aa8c

0800f15c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 800f15c:	4b11      	ldr	r3, [pc, #68]	; (800f1a4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 800f15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f162:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f164:	4604      	mov	r4, r0
 800f166:	881b      	ldrh	r3, [r3, #0]
 800f168:	428b      	cmp	r3, r1
 800f16a:	d918      	bls.n	800f19e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 800f16c:	6803      	ldr	r3, [r0, #0]
 800f16e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800f170:	4b0d      	ldr	r3, [pc, #52]	; (800f1a8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 800f172:	6818      	ldr	r0, [r3, #0]
 800f174:	f7fc fc60 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f178:	6823      	ldr	r3, [r4, #0]
 800f17a:	4606      	mov	r6, r0
 800f17c:	4620      	mov	r0, r4
 800f17e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f180:	4798      	blx	r3
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	4607      	mov	r7, r0
 800f186:	4620      	mov	r0, r4
 800f188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f18c:	4798      	blx	r3
 800f18e:	463a      	mov	r2, r7
 800f190:	4603      	mov	r3, r0
 800f192:	4631      	mov	r1, r6
 800f194:	4620      	mov	r0, r4
 800f196:	46ac      	mov	ip, r5
 800f198:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f19c:	4760      	bx	ip
 800f19e:	2000      	movs	r0, #0
 800f1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a4:	2401aa90 	.word	0x2401aa90
 800f1a8:	2401aa98 	.word	0x2401aa98

0800f1ac <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 800f1ac:	4b18      	ldr	r3, [pc, #96]	; (800f210 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 800f1ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1b2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f1b4:	4604      	mov	r4, r0
 800f1b6:	881b      	ldrh	r3, [r3, #0]
 800f1b8:	428b      	cmp	r3, r1
 800f1ba:	d926      	bls.n	800f20a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 800f1bc:	4b15      	ldr	r3, [pc, #84]	; (800f214 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800f1c4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 800f1c8:	4b13      	ldr	r3, [pc, #76]	; (800f218 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 800f1ca:	7855      	ldrb	r5, [r2, #1]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	f3c5 0581 	ubfx	r5, r5, #2, #2
 800f1d2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800f1d6:	6833      	ldr	r3, [r6, #0]
 800f1d8:	69df      	ldr	r7, [r3, #28]
 800f1da:	4b10      	ldr	r3, [pc, #64]	; (800f21c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 800f1dc:	6818      	ldr	r0, [r3, #0]
 800f1de:	f7fc fc2b 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	4680      	mov	r8, r0
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ea:	4798      	blx	r3
 800f1ec:	6823      	ldr	r3, [r4, #0]
 800f1ee:	4681      	mov	r9, r0
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1f6:	4798      	blx	r3
 800f1f8:	464b      	mov	r3, r9
 800f1fa:	9000      	str	r0, [sp, #0]
 800f1fc:	4642      	mov	r2, r8
 800f1fe:	4629      	mov	r1, r5
 800f200:	4630      	mov	r0, r6
 800f202:	47b8      	blx	r7
 800f204:	b003      	add	sp, #12
 800f206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f20a:	2000      	movs	r0, #0
 800f20c:	e7fa      	b.n	800f204 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 800f20e:	bf00      	nop
 800f210:	2401aa90 	.word	0x2401aa90
 800f214:	2401aa8c 	.word	0x2401aa8c
 800f218:	2401aa94 	.word	0x2401aa94
 800f21c:	2401aa98 	.word	0x2401aa98

0800f220 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 800f220:	b40e      	push	{r1, r2, r3}
 800f222:	4b30      	ldr	r3, [pc, #192]	; (800f2e4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 800f224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f228:	881a      	ldrh	r2, [r3, #0]
 800f22a:	b09d      	sub	sp, #116	; 0x74
 800f22c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 800f22e:	4604      	mov	r4, r0
 800f230:	429a      	cmp	r2, r3
 800f232:	d954      	bls.n	800f2de <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 800f234:	aa26      	add	r2, sp, #152	; 0x98
 800f236:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800f2e8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 800f23a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f2ec <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 800f23e:	9202      	str	r2, [sp, #8]
 800f240:	f8d9 2000 	ldr.w	r2, [r9]
 800f244:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800f248:	f8d8 3000 	ldr.w	r3, [r8]
 800f24c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f250:	682b      	ldr	r3, [r5, #0]
 800f252:	4628      	mov	r0, r5
 800f254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f256:	4798      	blx	r3
 800f258:	4606      	mov	r6, r0
 800f25a:	b207      	sxth	r7, r0
 800f25c:	a803      	add	r0, sp, #12
 800f25e:	f003 fdbf 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 800f262:	682b      	ldr	r3, [r5, #0]
 800f264:	4628      	mov	r0, r5
 800f266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f268:	4798      	blx	r3
 800f26a:	682b      	ldr	r3, [r5, #0]
 800f26c:	4682      	mov	sl, r0
 800f26e:	4628      	mov	r0, r5
 800f270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f272:	4798      	blx	r3
 800f274:	4653      	mov	r3, sl
 800f276:	9000      	str	r0, [sp, #0]
 800f278:	a803      	add	r0, sp, #12
 800f27a:	9a02      	ldr	r2, [sp, #8]
 800f27c:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f27e:	f003 fe0a 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 800f282:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f284:	f8d9 3000 	ldr.w	r3, [r9]
 800f288:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 800f28c:	8925      	ldrh	r5, [r4, #8]
 800f28e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 800f292:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 800f296:	eba5 050c 	sub.w	r5, r5, ip
 800f29a:	784a      	ldrb	r2, [r1, #1]
 800f29c:	f8d8 3000 	ldr.w	r3, [r8]
 800f2a0:	b22d      	sxth	r5, r5
 800f2a2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 800f2a6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800f2aa:	9500      	str	r5, [sp, #0]
 800f2ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800f2b0:	a803      	add	r0, sp, #12
 800f2b2:	f001 fc43 	bl	8010b3c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 800f2b6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 800f2ba:	b203      	sxth	r3, r0
 800f2bc:	18b9      	adds	r1, r7, r2
 800f2be:	2900      	cmp	r1, #0
 800f2c0:	dd0b      	ble.n	800f2da <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	fb13 f302 	smulbb	r3, r3, r2
 800f2c8:	fb16 3300 	smlabb	r3, r6, r0, r3
 800f2cc:	b21f      	sxth	r7, r3
 800f2ce:	4638      	mov	r0, r7
 800f2d0:	b01d      	add	sp, #116	; 0x74
 800f2d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d6:	b003      	add	sp, #12
 800f2d8:	4770      	bx	lr
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	dcf7      	bgt.n	800f2ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f2de:	2700      	movs	r7, #0
 800f2e0:	e7f5      	b.n	800f2ce <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 800f2e2:	bf00      	nop
 800f2e4:	2401aa90 	.word	0x2401aa90
 800f2e8:	2401aa8c 	.word	0x2401aa8c
 800f2ec:	2401aa94 	.word	0x2401aa94

0800f2f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 800f2f0:	4bbd      	ldr	r3, [pc, #756]	; (800f5e8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 800f2f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	881b      	ldrh	r3, [r3, #0]
 800f2fa:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 800f2fc:	b0a9      	sub	sp, #164	; 0xa4
 800f2fe:	4680      	mov	r8, r0
 800f300:	428b      	cmp	r3, r1
 800f302:	d809      	bhi.n	800f318 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 800f304:	2300      	movs	r3, #0
 800f306:	f04f 32ff 	mov.w	r2, #4294967295
 800f30a:	6083      	str	r3, [r0, #8]
 800f30c:	e9c0 3200 	strd	r3, r2, [r0]
 800f310:	4640      	mov	r0, r8
 800f312:	b029      	add	sp, #164	; 0xa4
 800f314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f318:	4eb4      	ldr	r6, [pc, #720]	; (800f5ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 800f31a:	6833      	ldr	r3, [r6, #0]
 800f31c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 800f320:	4bb3      	ldr	r3, [pc, #716]	; (800f5f0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f328:	4bb2      	ldr	r3, [pc, #712]	; (800f5f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800f32a:	6818      	ldr	r0, [r3, #0]
 800f32c:	f7fc fb84 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f330:	682b      	ldr	r3, [r5, #0]
 800f332:	4681      	mov	r9, r0
 800f334:	4628      	mov	r0, r5
 800f336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f338:	4798      	blx	r3
 800f33a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
 800f33c:	b203      	sxth	r3, r0
 800f33e:	4682      	mov	sl, r0
 800f340:	4407      	add	r7, r0
 800f342:	a80f      	add	r0, sp, #60	; 0x3c
 800f344:	9304      	str	r3, [sp, #16]
 800f346:	b2bb      	uxth	r3, r7
 800f348:	9303      	str	r3, [sp, #12]
 800f34a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 80a5 	bne.w	800f49e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 800f354:	f003 fd44 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 800f358:	682b      	ldr	r3, [r5, #0]
 800f35a:	4628      	mov	r0, r5
 800f35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f35e:	4798      	blx	r3
 800f360:	682b      	ldr	r3, [r5, #0]
 800f362:	4606      	mov	r6, r0
 800f364:	4628      	mov	r0, r5
 800f366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f368:	4798      	blx	r3
 800f36a:	6823      	ldr	r3, [r4, #0]
 800f36c:	4607      	mov	r7, r0
 800f36e:	4620      	mov	r0, r4
 800f370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f372:	4798      	blx	r3
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	4683      	mov	fp, r0
 800f378:	4620      	mov	r0, r4
 800f37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f37e:	4798      	blx	r3
 800f380:	463b      	mov	r3, r7
 800f382:	4649      	mov	r1, r9
 800f384:	4632      	mov	r2, r6
 800f386:	2600      	movs	r6, #0
 800f388:	e9cd b000 	strd	fp, r0, [sp]
 800f38c:	a80f      	add	r0, sp, #60	; 0x3c
 800f38e:	4637      	mov	r7, r6
 800f390:	f003 fd96 	bl	8012ec0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800f394:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f398:	f8df b250 	ldr.w	fp, [pc, #592]	; 800f5ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 800f39c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f3a0:	bf0c      	ite	eq
 800f3a2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 800f3a6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 800f3aa:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	f8db 3000 	ldr.w	r3, [fp]
 800f3b2:	a80f      	add	r0, sp, #60	; 0x3c
 800f3b4:	3701      	adds	r7, #1
 800f3b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f3ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f3be:	b2bf      	uxth	r7, r7
 800f3c0:	785b      	ldrb	r3, [r3, #1]
 800f3c2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f3c6:	f001 f8d4 	bl	8010572 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 800f3ca:	9b03      	ldr	r3, [sp, #12]
 800f3cc:	4286      	cmp	r6, r0
 800f3ce:	eba9 0903 	sub.w	r9, r9, r3
 800f3d2:	bfb8      	it	lt
 800f3d4:	4606      	movlt	r6, r0
 800f3d6:	a80f      	add	r0, sp, #60	; 0x3c
 800f3d8:	fa0f f989 	sxth.w	r9, r9
 800f3dc:	b236      	sxth	r6, r6
 800f3de:	f003 fd26 	bl	8012e2e <_ZN8touchgfx12TextProvider11endOfStringEv>
 800f3e2:	b918      	cbnz	r0, 800f3ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f3e4:	7a2b      	ldrb	r3, [r5, #8]
 800f3e6:	444b      	add	r3, r9
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	dcde      	bgt.n	800f3aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 800f3ec:	9b03      	ldr	r3, [sp, #12]
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	9a04      	ldr	r2, [sp, #16]
 800f3f2:	fb13 f707 	smulbb	r7, r3, r7
 800f3f6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 800f3f8:	f895 9009 	ldrb.w	r9, [r5, #9]
 800f3fc:	1aff      	subs	r7, r7, r3
 800f3fe:	b2bf      	uxth	r7, r7
 800f400:	b23b      	sxth	r3, r7
 800f402:	429a      	cmp	r2, r3
 800f404:	bfa8      	it	ge
 800f406:	4657      	movge	r7, sl
 800f408:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f40c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	444f      	add	r7, r9
 800f414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f416:	bf08      	it	eq
 800f418:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 800f41c:	fa1f f987 	uxth.w	r9, r7
 800f420:	bf18      	it	ne
 800f422:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 800f426:	4798      	blx	r3
 800f428:	2801      	cmp	r0, #1
 800f42a:	fa0f f789 	sxth.w	r7, r9
 800f42e:	b2b3      	uxth	r3, r6
 800f430:	f000 80e2 	beq.w	800f5f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 800f434:	2802      	cmp	r0, #2
 800f436:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 800f43a:	f000 80e3 	beq.w	800f604 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 800f43e:	7aea      	ldrb	r2, [r5, #11]
 800f440:	b236      	sxth	r6, r6
 800f442:	7b2d      	ldrb	r5, [r5, #12]
 800f444:	1ab6      	subs	r6, r6, r2
 800f446:	442a      	add	r2, r5
 800f448:	fa1f fa86 	uxth.w	sl, r6
 800f44c:	4413      	add	r3, r2
 800f44e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800f452:	fa0f fb8a 	sxth.w	fp, sl
 800f456:	b29b      	uxth	r3, r3
 800f458:	2a02      	cmp	r2, #2
 800f45a:	b21e      	sxth	r6, r3
 800f45c:	f000 80d6 	beq.w	800f60c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 800f460:	2a03      	cmp	r2, #3
 800f462:	f000 80de 	beq.w	800f622 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 800f466:	2a01      	cmp	r2, #1
 800f468:	f040 80e6 	bne.w	800f638 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 800f46c:	8925      	ldrh	r5, [r4, #8]
 800f46e:	4633      	mov	r3, r6
 800f470:	463e      	mov	r6, r7
 800f472:	eba5 0909 	sub.w	r9, r5, r9
 800f476:	461f      	mov	r7, r3
 800f478:	465d      	mov	r5, fp
 800f47a:	fa0f fb89 	sxth.w	fp, r9
 800f47e:	4b5d      	ldr	r3, [pc, #372]	; (800f5f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 800f480:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800f482:	6818      	ldr	r0, [r3, #0]
 800f484:	f7fc fad8 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f488:	f8a8 b000 	strh.w	fp, [r8]
 800f48c:	f8a8 5002 	strh.w	r5, [r8, #2]
 800f490:	f8a8 6004 	strh.w	r6, [r8, #4]
 800f494:	f8a8 7006 	strh.w	r7, [r8, #6]
 800f498:	f8c8 0008 	str.w	r0, [r8, #8]
 800f49c:	e738      	b.n	800f310 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 800f49e:	f003 fc9f 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 800f4a2:	682b      	ldr	r3, [r5, #0]
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4a8:	4798      	blx	r3
 800f4aa:	682b      	ldr	r3, [r5, #0]
 800f4ac:	4607      	mov	r7, r0
 800f4ae:	4628      	mov	r0, r5
 800f4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4b2:	4798      	blx	r3
 800f4b4:	6823      	ldr	r3, [r4, #0]
 800f4b6:	4683      	mov	fp, r0
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4bc:	4798      	blx	r3
 800f4be:	6822      	ldr	r2, [r4, #0]
 800f4c0:	9005      	str	r0, [sp, #20]
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800f4c8:	4790      	blx	r2
 800f4ca:	9b05      	ldr	r3, [sp, #20]
 800f4cc:	463a      	mov	r2, r7
 800f4ce:	4649      	mov	r1, r9
 800f4d0:	9001      	str	r0, [sp, #4]
 800f4d2:	a80f      	add	r0, sp, #60	; 0x3c
 800f4d4:	9300      	str	r3, [sp, #0]
 800f4d6:	465b      	mov	r3, fp
 800f4d8:	f003 fcf2 	bl	8012ec0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 800f4dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f4e0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 800f4e4:	af0f      	add	r7, sp, #60	; 0x3c
 800f4e6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f4ea:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800f4ee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800f4f0:	bf0a      	itet	eq
 800f4f2:	464a      	moveq	r2, r9
 800f4f4:	461a      	movne	r2, r3
 800f4f6:	4699      	moveq	r9, r3
 800f4f8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800f4fc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 800f500:	1ad2      	subs	r2, r2, r3
 800f502:	6833      	ldr	r3, [r6, #0]
 800f504:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
 800f508:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 800f50c:	7859      	ldrb	r1, [r3, #1]
 800f50e:	2300      	movs	r3, #0
 800f510:	9707      	str	r7, [sp, #28]
 800f512:	f3c1 0181 	ubfx	r1, r1, #2, #2
 800f516:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f51a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 800f51e:	f88d 1020 	strb.w	r1, [sp, #32]
 800f522:	9509      	str	r5, [sp, #36]	; 0x24
 800f524:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800f528:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
 800f52c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
 800f530:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f534:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 800f538:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 800f53c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800f540:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800f544:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800f548:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800f54c:	b350      	cbz	r0, 800f5a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	4628      	mov	r0, r5
 800f552:	695b      	ldr	r3, [r3, #20]
 800f554:	4798      	blx	r3
 800f556:	4607      	mov	r7, r0
 800f558:	b320      	cbz	r0, 800f5a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f55a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f55c:	4639      	mov	r1, r7
 800f55e:	6803      	ldr	r3, [r0, #0]
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	4798      	blx	r3
 800f564:	4606      	mov	r6, r0
 800f566:	b1e8      	cbz	r0, 800f5a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f568:	7b43      	ldrb	r3, [r0, #13]
 800f56a:	7a82      	ldrb	r2, [r0, #10]
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f572:	4313      	orrs	r3, r2
 800f574:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 800f578:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 800f57c:	2b06      	cmp	r3, #6
 800f57e:	d111      	bne.n	800f5a4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 800f580:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f582:	4632      	mov	r2, r6
 800f584:	4639      	mov	r1, r7
 800f586:	6803      	ldr	r3, [r0, #0]
 800f588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f58a:	4798      	blx	r3
 800f58c:	7b73      	ldrb	r3, [r6, #13]
 800f58e:	005b      	lsls	r3, r3, #1
 800f590:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800f594:	7ab3      	ldrb	r3, [r6, #10]
 800f596:	4313      	orrs	r3, r2
 800f598:	4418      	add	r0, r3
 800f59a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800f59e:	4418      	add	r0, r3
 800f5a0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 800f5a4:	2600      	movs	r6, #0
 800f5a6:	4637      	mov	r7, r6
 800f5a8:	a806      	add	r0, sp, #24
 800f5aa:	3701      	adds	r7, #1
 800f5ac:	f001 f9c3 	bl	8010936 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 800f5b0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
 800f5b4:	9b03      	ldr	r3, [sp, #12]
 800f5b6:	b2bf      	uxth	r7, r7
 800f5b8:	4286      	cmp	r6, r0
 800f5ba:	eba9 0903 	sub.w	r9, r9, r3
 800f5be:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800f5c2:	bfb8      	it	lt
 800f5c4:	4606      	movlt	r6, r0
 800f5c6:	fa0f f989 	sxth.w	r9, r9
 800f5ca:	b236      	sxth	r6, r6
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	f43f af0d 	beq.w	800f3ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f5d2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	f47f af08 	bne.w	800f3ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f5dc:	7a2b      	ldrb	r3, [r5, #8]
 800f5de:	444b      	add	r3, r9
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	dce1      	bgt.n	800f5a8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 800f5e4:	e702      	b.n	800f3ec <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 800f5e6:	bf00      	nop
 800f5e8:	2401aa90 	.word	0x2401aa90
 800f5ec:	2401aa8c 	.word	0x2401aa8c
 800f5f0:	2401aa94 	.word	0x2401aa94
 800f5f4:	2401aa98 	.word	0x2401aa98
 800f5f8:	ebaa 0606 	sub.w	r6, sl, r6
 800f5fc:	2002      	movs	r0, #2
 800f5fe:	fb96 f6f0 	sdiv	r6, r6, r0
 800f602:	e71c      	b.n	800f43e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 800f604:	441e      	add	r6, r3
 800f606:	ebaa 0606 	sub.w	r6, sl, r6
 800f60a:	e718      	b.n	800f43e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 800f60c:	8925      	ldrh	r5, [r4, #8]
 800f60e:	1aed      	subs	r5, r5, r3
 800f610:	eba5 050a 	sub.w	r5, r5, sl
 800f614:	fa0f fb85 	sxth.w	fp, r5
 800f618:	8965      	ldrh	r5, [r4, #10]
 800f61a:	eba5 0509 	sub.w	r5, r5, r9
 800f61e:	b22d      	sxth	r5, r5
 800f620:	e72d      	b.n	800f47e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800f622:	8965      	ldrh	r5, [r4, #10]
 800f624:	f04f 0b00 	mov.w	fp, #0
 800f628:	1aed      	subs	r5, r5, r3
 800f62a:	4633      	mov	r3, r6
 800f62c:	463e      	mov	r6, r7
 800f62e:	eba5 050a 	sub.w	r5, r5, sl
 800f632:	461f      	mov	r7, r3
 800f634:	b22d      	sxth	r5, r5
 800f636:	e722      	b.n	800f47e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 800f638:	2500      	movs	r5, #0
 800f63a:	e720      	b.n	800f47e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

0800f63c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 800f63c:	b513      	push	{r0, r1, r4, lr}
 800f63e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 800f642:	4604      	mov	r4, r0
 800f644:	b1fb      	cbz	r3, 800f686 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f646:	4b16      	ldr	r3, [pc, #88]	; (800f6a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 800f648:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	428b      	cmp	r3, r1
 800f64e:	d91a      	bls.n	800f686 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f650:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800f654:	2b00      	cmp	r3, #0
 800f656:	dd16      	ble.n	800f686 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f658:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	dd12      	ble.n	800f686 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f660:	4b10      	ldr	r3, [pc, #64]	; (800f6a4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 800f662:	6818      	ldr	r0, [r3, #0]
 800f664:	f7fc f9e8 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f668:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800f66c:	6822      	ldr	r2, [r4, #0]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	db06      	blt.n	800f680 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800f672:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800f676:	2b00      	cmp	r3, #0
 800f678:	db02      	blt.n	800f680 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 800f67a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f67c:	4298      	cmp	r0, r3
 800f67e:	d004      	beq.n	800f68a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 800f680:	6953      	ldr	r3, [r2, #20]
 800f682:	4620      	mov	r0, r4
 800f684:	4798      	blx	r3
 800f686:	b002      	add	sp, #8
 800f688:	bd10      	pop	{r4, pc}
 800f68a:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 800f68e:	466b      	mov	r3, sp
 800f690:	6912      	ldr	r2, [r2, #16]
 800f692:	c903      	ldmia	r1, {r0, r1}
 800f694:	e883 0003 	stmia.w	r3, {r0, r1}
 800f698:	4619      	mov	r1, r3
 800f69a:	4620      	mov	r0, r4
 800f69c:	4790      	blx	r2
 800f69e:	e7f2      	b.n	800f686 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 800f6a0:	2401aa90 	.word	0x2401aa90
 800f6a4:	2401aa98 	.word	0x2401aa98

0800f6a8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 800f6a8:	4b45      	ldr	r3, [pc, #276]	; (800f7c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 800f6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ae:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f6b0:	b08e      	sub	sp, #56	; 0x38
 800f6b2:	881b      	ldrh	r3, [r3, #0]
 800f6b4:	4604      	mov	r4, r0
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	d97e      	bls.n	800f7b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f6ba:	6808      	ldr	r0, [r1, #0]
 800f6bc:	ab05      	add	r3, sp, #20
 800f6be:	6849      	ldr	r1, [r1, #4]
 800f6c0:	4d40      	ldr	r5, [pc, #256]	; (800f7c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 800f6c2:	c303      	stmia	r3!, {r0, r1}
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	6828      	ldr	r0, [r5, #0]
 800f6c8:	f7fc f9b6 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f6cc:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	db11      	blt.n	800f6f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800f6d4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	db0d      	blt.n	800f6f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800f6dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f6de:	4298      	cmp	r0, r3
 800f6e0:	d10a      	bne.n	800f6f8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 800f6e2:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800f6e6:	ab09      	add	r3, sp, #36	; 0x24
 800f6e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6ec:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6f0:	4619      	mov	r1, r3
 800f6f2:	a805      	add	r0, sp, #20
 800f6f4:	f7fe fcc0 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800f6f8:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	dd5b      	ble.n	800f7b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f700:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd57      	ble.n	800f7b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f708:	4f2f      	ldr	r7, [pc, #188]	; (800f7c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 800f70a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 800f712:	4b2e      	ldr	r3, [pc, #184]	; (800f7cc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800f71a:	2e00      	cmp	r6, #0
 800f71c:	d04c      	beq.n	800f7b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 800f71e:	6823      	ldr	r3, [r4, #0]
 800f720:	4620      	mov	r0, r4
 800f722:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 800f726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f728:	4798      	blx	r3
 800f72a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 800f732:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800f736:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 800f73a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800f73e:	785b      	ldrb	r3, [r3, #1]
 800f740:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 800f744:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f748:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f74a:	9609      	str	r6, [sp, #36]	; 0x24
 800f74c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f750:	4b1f      	ldr	r3, [pc, #124]	; (800f7d0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 800f752:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 800f75c:	910b      	str	r1, [sp, #44]	; 0x2c
 800f75e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 800f762:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 800f766:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 800f76a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 800f76e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800f772:	b10a      	cbz	r2, 800f778 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 800f774:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 800f776:	b906      	cbnz	r6, 800f77a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 800f778:	689e      	ldr	r6, [r3, #8]
 800f77a:	af07      	add	r7, sp, #28
 800f77c:	4621      	mov	r1, r4
 800f77e:	4638      	mov	r0, r7
 800f780:	f002 ff78 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800f784:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800f786:	6828      	ldr	r0, [r5, #0]
 800f788:	f7fc f956 	bl	800ba38 <_ZNK8touchgfx5Texts7getTextEt>
 800f78c:	6823      	ldr	r3, [r4, #0]
 800f78e:	4605      	mov	r5, r0
 800f790:	4620      	mov	r0, r4
 800f792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f794:	4798      	blx	r3
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	4680      	mov	r8, r0
 800f79a:	4620      	mov	r0, r4
 800f79c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f7a0:	4798      	blx	r3
 800f7a2:	ab09      	add	r3, sp, #36	; 0x24
 800f7a4:	9501      	str	r5, [sp, #4]
 800f7a6:	9300      	str	r3, [sp, #0]
 800f7a8:	ab05      	add	r3, sp, #20
 800f7aa:	e9cd 8002 	strd	r8, r0, [sp, #8]
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	e897 0006 	ldmia.w	r7, {r1, r2}
 800f7b4:	f7fc f8d1 	bl	800b95a <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 800f7b8:	b00e      	add	sp, #56	; 0x38
 800f7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7be:	bf00      	nop
 800f7c0:	2401aa90 	.word	0x2401aa90
 800f7c4:	2401aa98 	.word	0x2401aa98
 800f7c8:	2401aa8c 	.word	0x2401aa8c
 800f7cc:	2401aa94 	.word	0x2401aa94
 800f7d0:	2401aa3c 	.word	0x2401aa3c

0800f7d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 800f7d4:	b538      	push	{r3, r4, r5, lr}
 800f7d6:	4b0e      	ldr	r3, [pc, #56]	; (800f810 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 800f7d8:	4604      	mov	r4, r0
 800f7da:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d214      	bcs.n	800f80c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 800f7e2:	6803      	ldr	r3, [r0, #0]
 800f7e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7e6:	4798      	blx	r3
 800f7e8:	6823      	ldr	r3, [r4, #0]
 800f7ea:	4605      	mov	r5, r0
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7f0:	4798      	blx	r3
 800f7f2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800f7f6:	b22d      	sxth	r5, r5
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 800f7fe:	bf06      	itte	eq
 800f800:	4602      	moveq	r2, r0
 800f802:	4629      	moveq	r1, r5
 800f804:	462a      	movne	r2, r5
 800f806:	4620      	mov	r0, r4
 800f808:	f7fa ffbb 	bl	800a782 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800f80c:	bd38      	pop	{r3, r4, r5, pc}
 800f80e:	bf00      	nop
 800f810:	2401aa90 	.word	0x2401aa90

0800f814 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 800f814:	b530      	push	{r4, r5, lr}
 800f816:	888b      	ldrh	r3, [r1, #4]
 800f818:	b085      	sub	sp, #20
 800f81a:	4604      	mov	r4, r0
 800f81c:	8583      	strh	r3, [r0, #44]	; 0x2c
 800f81e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800f822:	b923      	cbnz	r3, 800f82e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800f824:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800f828:	b90b      	cbnz	r3, 800f82e <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 800f82a:	f7ff ffd3 	bl	800f7d4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 800f82e:	6823      	ldr	r3, [r4, #0]
 800f830:	466d      	mov	r5, sp
 800f832:	4621      	mov	r1, r4
 800f834:	343c      	adds	r4, #60	; 0x3c
 800f836:	4628      	mov	r0, r5
 800f838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f83c:	4798      	blx	r3
 800f83e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f842:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f846:	b005      	add	sp, #20
 800f848:	bd30      	pop	{r4, r5, pc}

0800f84a <_ZNK8touchgfx3Box12getSolidRectEv>:
 800f84a:	2300      	movs	r3, #0
 800f84c:	8083      	strh	r3, [r0, #4]
 800f84e:	80c3      	strh	r3, [r0, #6]
 800f850:	8003      	strh	r3, [r0, #0]
 800f852:	8043      	strh	r3, [r0, #2]
 800f854:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 800f858:	2bff      	cmp	r3, #255	; 0xff
 800f85a:	bf01      	itttt	eq
 800f85c:	890b      	ldrheq	r3, [r1, #8]
 800f85e:	8083      	strheq	r3, [r0, #4]
 800f860:	894b      	ldrheq	r3, [r1, #10]
 800f862:	80c3      	strheq	r3, [r0, #6]
 800f864:	4770      	bx	lr
	...

0800f868 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 800f868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f86a:	4604      	mov	r4, r0
 800f86c:	466b      	mov	r3, sp
 800f86e:	6808      	ldr	r0, [r1, #0]
 800f870:	6849      	ldr	r1, [r1, #4]
 800f872:	c303      	stmia	r3!, {r0, r1}
 800f874:	6823      	ldr	r3, [r4, #0]
 800f876:	4669      	mov	r1, sp
 800f878:	4620      	mov	r0, r4
 800f87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f87c:	4798      	blx	r3
 800f87e:	4b08      	ldr	r3, [pc, #32]	; (800f8a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800f886:	b10a      	cbz	r2, 800f88c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 800f888:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800f88a:	b900      	cbnz	r0, 800f88e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 800f88c:	6898      	ldr	r0, [r3, #8]
 800f88e:	6803      	ldr	r3, [r0, #0]
 800f890:	4669      	mov	r1, sp
 800f892:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800f894:	6a1d      	ldr	r5, [r3, #32]
 800f896:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f89a:	47a8      	blx	r5
 800f89c:	b003      	add	sp, #12
 800f89e:	bd30      	pop	{r4, r5, pc}
 800f8a0:	2401aa3c 	.word	0x2401aa3c

0800f8a4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 800f8a4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 800f8a8:	b12a      	cbz	r2, 800f8b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800f8aa:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800f8ae:	b112      	cbz	r2, 800f8b6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 800f8b0:	6803      	ldr	r3, [r0, #0]
 800f8b2:	695b      	ldr	r3, [r3, #20]
 800f8b4:	4718      	bx	r3
 800f8b6:	4770      	bx	lr

0800f8b8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 800f8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8bc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800f8be:	4604      	mov	r4, r0
 800f8c0:	460e      	mov	r6, r1
 800f8c2:	b08e      	sub	sp, #56	; 0x38
 800f8c4:	b218      	sxth	r0, r3
 800f8c6:	8921      	ldrh	r1, [r4, #8]
 800f8c8:	005b      	lsls	r3, r3, #1
 800f8ca:	8962      	ldrh	r2, [r4, #10]
 800f8cc:	f8ad 0000 	strh.w	r0, [sp]
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	f8ad 0002 	strh.w	r0, [sp, #2]
 800f8d6:	1ac9      	subs	r1, r1, r3
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	b209      	sxth	r1, r1
 800f8dc:	b21b      	sxth	r3, r3
 800f8de:	2900      	cmp	r1, #0
 800f8e0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800f8e4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f8e8:	dd5e      	ble.n	800f9a8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	dd5c      	ble.n	800f9a8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 800f8ee:	6830      	ldr	r0, [r6, #0]
 800f8f0:	ab02      	add	r3, sp, #8
 800f8f2:	6871      	ldr	r1, [r6, #4]
 800f8f4:	c303      	stmia	r3!, {r0, r1}
 800f8f6:	4669      	mov	r1, sp
 800f8f8:	a802      	add	r0, sp, #8
 800f8fa:	f7fe fbbd 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800f8fe:	4620      	mov	r0, r4
 800f900:	a902      	add	r1, sp, #8
 800f902:	f7ff ffb1 	bl	800f868 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 800f906:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 800f908:	2800      	cmp	r0, #0
 800f90a:	d05f      	beq.n	800f9cc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800f90c:	8963      	ldrh	r3, [r4, #10]
 800f90e:	b202      	sxth	r2, r0
 800f910:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 800f914:	2500      	movs	r5, #0
 800f916:	1a1f      	subs	r7, r3, r0
 800f918:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800f91c:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f920:	b21b      	sxth	r3, r3
 800f922:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 800f926:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 800f92a:	af04      	add	r7, sp, #16
 800f92c:	1a09      	subs	r1, r1, r0
 800f92e:	9506      	str	r5, [sp, #24]
 800f930:	f8ad 201e 	strh.w	r2, [sp, #30]
 800f934:	f8ad 5020 	strh.w	r5, [sp, #32]
 800f938:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 800f93c:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 800f940:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 800f944:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 800f948:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 800f94c:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 800f950:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 800f954:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 800f958:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 800f95c:	ab06      	add	r3, sp, #24
 800f95e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f962:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f966:	e887 0003 	stmia.w	r7, {r0, r1}
 800f96a:	4631      	mov	r1, r6
 800f96c:	4638      	mov	r0, r7
 800f96e:	f7fe fb83 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800f972:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800f976:	2b00      	cmp	r3, #0
 800f978:	dd12      	ble.n	800f9a0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800f97a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	dd0e      	ble.n	800f9a0 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 800f982:	6823      	ldr	r3, [r4, #0]
 800f984:	4639      	mov	r1, r7
 800f986:	4620      	mov	r0, r4
 800f988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98a:	4798      	blx	r3
 800f98c:	f7fa f902 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800f990:	6803      	ldr	r3, [r0, #0]
 800f992:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f994:	4639      	mov	r1, r7
 800f996:	f8d3 8020 	ldr.w	r8, [r3, #32]
 800f99a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f99e:	47c0      	blx	r8
 800f9a0:	3501      	adds	r5, #1
 800f9a2:	2d04      	cmp	r5, #4
 800f9a4:	d1da      	bne.n	800f95c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 800f9a6:	e011      	b.n	800f9cc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 800f9a8:	6830      	ldr	r0, [r6, #0]
 800f9aa:	ab06      	add	r3, sp, #24
 800f9ac:	6871      	ldr	r1, [r6, #4]
 800f9ae:	c303      	stmia	r3!, {r0, r1}
 800f9b0:	6823      	ldr	r3, [r4, #0]
 800f9b2:	a906      	add	r1, sp, #24
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9b8:	4798      	blx	r3
 800f9ba:	f7fa f8eb 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 800f9be:	6803      	ldr	r3, [r0, #0]
 800f9c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f9c2:	a906      	add	r1, sp, #24
 800f9c4:	6a1d      	ldr	r5, [r3, #32]
 800f9c6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 800f9ca:	47a8      	blx	r5
 800f9cc:	b00e      	add	sp, #56	; 0x38
 800f9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f9d2 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 800f9d2:	b570      	push	{r4, r5, r6, lr}
 800f9d4:	880b      	ldrh	r3, [r1, #0]
 800f9d6:	460d      	mov	r5, r1
 800f9d8:	4604      	mov	r4, r0
 800f9da:	84c3      	strh	r3, [r0, #38]	; 0x26
 800f9dc:	4608      	mov	r0, r1
 800f9de:	f004 fac1 	bl	8013f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f9e2:	4606      	mov	r6, r0
 800f9e4:	4628      	mov	r0, r5
 800f9e6:	f004 faf1 	bl	8013fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f9ea:	6823      	ldr	r3, [r4, #0]
 800f9ec:	4605      	mov	r5, r0
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9f4:	4798      	blx	r3
 800f9f6:	6823      	ldr	r3, [r4, #0]
 800f9f8:	4629      	mov	r1, r5
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa02:	4718      	bx	r3

0800fa04 <_ZNK8touchgfx5Image12getSolidRectEv>:
 800fa04:	b510      	push	{r4, lr}
 800fa06:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 800fa0a:	4604      	mov	r4, r0
 800fa0c:	2bff      	cmp	r3, #255	; 0xff
 800fa0e:	d006      	beq.n	800fa1e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 800fa10:	2300      	movs	r3, #0
 800fa12:	8003      	strh	r3, [r0, #0]
 800fa14:	8043      	strh	r3, [r0, #2]
 800fa16:	8083      	strh	r3, [r0, #4]
 800fa18:	80c3      	strh	r3, [r0, #6]
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	bd10      	pop	{r4, pc}
 800fa1e:	3126      	adds	r1, #38	; 0x26
 800fa20:	f004 fb08 	bl	8014034 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 800fa24:	e7f9      	b.n	800fa1a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

0800fa26 <_ZNK8touchgfx5Image17invalidateContentEv>:
 800fa26:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 800fa2a:	b12a      	cbz	r2, 800fa38 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800fa2c:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800fa30:	b112      	cbz	r2, 800fa38 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 800fa32:	6803      	ldr	r3, [r0, #0]
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	4718      	bx	r3
 800fa38:	4770      	bx	lr
	...

0800fa3c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 800fa3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa40:	4604      	mov	r4, r0
 800fa42:	b088      	sub	sp, #32
 800fa44:	2500      	movs	r5, #0
 800fa46:	460f      	mov	r7, r1
 800fa48:	f854 3b26 	ldr.w	r3, [r4], #38
 800fa4c:	a904      	add	r1, sp, #16
 800fa4e:	4606      	mov	r6, r0
 800fa50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fa56:	4798      	blx	r3
 800fa58:	4620      	mov	r0, r4
 800fa5a:	f004 fa83 	bl	8013f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800fa5e:	4680      	mov	r8, r0
 800fa60:	4620      	mov	r0, r4
 800fa62:	f004 fab3 	bl	8013fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 800fa66:	9506      	str	r5, [sp, #24]
 800fa68:	ad06      	add	r5, sp, #24
 800fa6a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800fa6e:	4639      	mov	r1, r7
 800fa70:	f8ad 801c 	strh.w	r8, [sp, #28]
 800fa74:	4628      	mov	r0, r5
 800fa76:	f7fe faff 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 800fa7a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	dd19      	ble.n	800fab6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800fa82:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	dd15      	ble.n	800fab6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 800fa8a:	4b0c      	ldr	r3, [pc, #48]	; (800fabc <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800fa92:	b10a      	cbz	r2, 800fa98 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 800fa94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800fa96:	b900      	cbnz	r0, 800fa9a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 800fa98:	6898      	ldr	r0, [r3, #8]
 800fa9a:	2701      	movs	r7, #1
 800fa9c:	6801      	ldr	r1, [r0, #0]
 800fa9e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 800faa2:	9702      	str	r7, [sp, #8]
 800faa4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 800faa8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 800faac:	e9cd 5600 	strd	r5, r6, [sp]
 800fab0:	688d      	ldr	r5, [r1, #8]
 800fab2:	4621      	mov	r1, r4
 800fab4:	47a8      	blx	r5
 800fab6:	b008      	add	sp, #32
 800fab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fabc:	2401aa3c 	.word	0x2401aa3c

0800fac0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 800fac0:	b510      	push	{r4, lr}
 800fac2:	6803      	ldr	r3, [r0, #0]
 800fac4:	460c      	mov	r4, r1
 800fac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fac8:	4798      	blx	r3
 800faca:	1b03      	subs	r3, r0, r4
 800facc:	4258      	negs	r0, r3
 800face:	4158      	adcs	r0, r3
 800fad0:	bd10      	pop	{r4, pc}
	...

0800fad4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 800fad4:	4b01      	ldr	r3, [pc, #4]	; (800fadc <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 800fad6:	6019      	str	r1, [r3, #0]
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop
 800fadc:	2401aa44 	.word	0x2401aa44

0800fae0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae4:	4696      	mov	lr, r2
 800fae6:	b097      	sub	sp, #92	; 0x5c
 800fae8:	4605      	mov	r5, r0
 800faea:	4614      	mov	r4, r2
 800faec:	460e      	mov	r6, r1
 800faee:	461f      	mov	r7, r3
 800faf0:	f10d 0c1c 	add.w	ip, sp, #28
 800faf4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800faf8:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 800fafc:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 800fb00:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb08:	f8de 3000 	ldr.w	r3, [lr]
 800fb0c:	f104 0e14 	add.w	lr, r4, #20
 800fb10:	f8cc 3000 	str.w	r3, [ip]
 800fb14:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800fb18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb20:	f8de 3000 	ldr.w	r3, [lr]
 800fb24:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800fb28:	f8cc 3000 	str.w	r3, [ip]
 800fb2c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800fb30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb38:	f8de 3000 	ldr.w	r3, [lr]
 800fb3c:	4631      	mov	r1, r6
 800fb3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb40:	4628      	mov	r0, r5
 800fb42:	f8cc 3000 	str.w	r3, [ip]
 800fb46:	682b      	ldr	r3, [r5, #0]
 800fb48:	9201      	str	r2, [sp, #4]
 800fb4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fb4c:	f8cd 8008 	str.w	r8, [sp, #8]
 800fb50:	9200      	str	r2, [sp, #0]
 800fb52:	aa07      	add	r2, sp, #28
 800fb54:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800fb58:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 800fb5c:	463b      	mov	r3, r7
 800fb5e:	47d8      	blx	fp
 800fb60:	46a6      	mov	lr, r4
 800fb62:	f10d 0c1c 	add.w	ip, sp, #28
 800fb66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb6a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb6e:	f8de 3000 	ldr.w	r3, [lr]
 800fb72:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 800fb76:	343c      	adds	r4, #60	; 0x3c
 800fb78:	f8cc 3000 	str.w	r3, [ip]
 800fb7c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800fb80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fb84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb88:	f8de 3000 	ldr.w	r3, [lr]
 800fb8c:	f8cc 3000 	str.w	r3, [ip]
 800fb90:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800fb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800fb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f8cc 3000 	str.w	r3, [ip]
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 800fbaa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbac:	f8cd 8008 	str.w	r8, [sp, #8]
 800fbb0:	9201      	str	r2, [sp, #4]
 800fbb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fbb4:	9200      	str	r2, [sp, #0]
 800fbb6:	aa07      	add	r2, sp, #28
 800fbb8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 800fbba:	463b      	mov	r3, r7
 800fbbc:	47a0      	blx	r4
 800fbbe:	b017      	add	sp, #92	; 0x5c
 800fbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbc4 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 800fbc4:	2000      	movs	r0, #0
 800fbc6:	4770      	bx	lr

0800fbc8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 800fbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbcc:	b08d      	sub	sp, #52	; 0x34
 800fbce:	4688      	mov	r8, r1
 800fbd0:	f8d3 c000 	ldr.w	ip, [r3]
 800fbd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800fbd6:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 800fbda:	680f      	ldr	r7, [r1, #0]
 800fbdc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 800fbe0:	eba7 070c 	sub.w	r7, r7, ip
 800fbe4:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 800fbe8:	edd3 6a07 	vldr	s13, [r3, #28]
 800fbec:	42bc      	cmp	r4, r7
 800fbee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800fbf0:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800fbf4:	bfa8      	it	ge
 800fbf6:	463c      	movge	r4, r7
 800fbf8:	f9b1 9000 	ldrsh.w	r9, [r1]
 800fbfc:	f9ba 1000 	ldrsh.w	r1, [sl]
 800fc00:	ee07 4a90 	vmov	s15, r4
 800fc04:	eb09 0e0c 	add.w	lr, r9, ip
 800fc08:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 800fc0c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 800fc10:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800fc14:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 800fc18:	4571      	cmp	r1, lr
 800fc1a:	ee25 4a04 	vmul.f32	s8, s10, s8
 800fc1e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800fc22:	ee25 5a27 	vmul.f32	s10, s10, s15
 800fc26:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fc2a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 800fc2e:	ee32 1a05 	vadd.f32	s2, s4, s10
 800fc32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fc36:	ee36 0a84 	vadd.f32	s0, s13, s8
 800fc3a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800fc3e:	ee22 2a07 	vmul.f32	s4, s4, s14
 800fc42:	f340 808c 	ble.w	800fd5e <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 800fc46:	eba1 060e 	sub.w	r6, r1, lr
 800fc4a:	fb96 f5f4 	sdiv	r5, r6, r4
 800fc4e:	ee07 5a10 	vmov	s14, r5
 800fc52:	2d00      	cmp	r5, #0
 800fc54:	fb04 6615 	mls	r6, r4, r5, r6
 800fc58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc5c:	eea7 0a04 	vfma.f32	s0, s14, s8
 800fc60:	eee7 0a24 	vfma.f32	s1, s14, s9
 800fc64:	eea7 1a05 	vfma.f32	s2, s14, s10
 800fc68:	dd12      	ble.n	800fc90 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 800fc6a:	ee70 6a44 	vsub.f32	s13, s0, s8
 800fc6e:	ee70 1ae4 	vsub.f32	s3, s1, s9
 800fc72:	ee31 2a45 	vsub.f32	s4, s2, s10
 800fc76:	eef5 6a40 	vcmp.f32	s13, #0.0
 800fc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7e:	bf14      	ite	ne
 800fc80:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 800fc84:	eeb0 7a67 	vmoveq.f32	s14, s15
 800fc88:	ee61 1a87 	vmul.f32	s3, s3, s14
 800fc8c:	ee22 2a07 	vmul.f32	s4, s4, s14
 800fc90:	fb05 f204 	mul.w	r2, r5, r4
 800fc94:	1abf      	subs	r7, r7, r2
 800fc96:	4494      	add	ip, r2
 800fc98:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 800fc9c:	4411      	add	r1, r2
 800fc9e:	eb09 020c 	add.w	r2, r9, ip
 800fca2:	b209      	sxth	r1, r1
 800fca4:	443a      	add	r2, r7
 800fca6:	428a      	cmp	r2, r1
 800fca8:	bfc4      	itt	gt
 800fcaa:	eba1 0209 	subgt.w	r2, r1, r9
 800fcae:	eba2 070c 	subgt.w	r7, r2, ip
 800fcb2:	2f00      	cmp	r7, #0
 800fcb4:	dd50      	ble.n	800fd58 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 800fcb6:	fb97 f1f4 	sdiv	r1, r7, r4
 800fcba:	fb04 7211 	mls	r2, r4, r1, r7
 800fcbe:	b90a      	cbnz	r2, 800fcc4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 800fcc0:	3901      	subs	r1, #1
 800fcc2:	4622      	mov	r2, r4
 800fcc4:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800fcc8:	6840      	ldr	r0, [r0, #4]
 800fcca:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 800fcce:	44b6      	add	lr, r6
 800fcd0:	f8d0 a000 	ldr.w	sl, [r0]
 800fcd4:	2900      	cmp	r1, #0
 800fcd6:	bfcc      	ite	gt
 800fcd8:	46a1      	movgt	r9, r4
 800fcda:	4691      	movle	r9, r2
 800fcdc:	900b      	str	r0, [sp, #44]	; 0x2c
 800fcde:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800fce0:	fb04 e505 	mla	r5, r4, r5, lr
 800fce4:	eef0 6a42 	vmov.f32	s13, s4
 800fce8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800fcec:	9008      	str	r0, [sp, #32]
 800fcee:	eeb0 7a61 	vmov.f32	s14, s3
 800fcf2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fcf4:	695b      	ldr	r3, [r3, #20]
 800fcf6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 800fcfa:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 800fcfe:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 800fd02:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fd04:	445b      	add	r3, fp
 800fd06:	9307      	str	r3, [sp, #28]
 800fd08:	ee16 3a90 	vmov	r3, s13
 800fd0c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 800fd10:	ee60 2aa3 	vmul.f32	s5, s1, s7
 800fd14:	ee21 3a23 	vmul.f32	s6, s2, s7
 800fd18:	ee72 7ae1 	vsub.f32	s15, s5, s3
 800fd1c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800fd20:	ee17 7a90 	vmov	r7, s15
 800fd24:	ee73 7a42 	vsub.f32	s15, s6, s4
 800fd28:	fb97 f7f4 	sdiv	r7, r7, r4
 800fd2c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 800fd30:	ee17 ca90 	vmov	ip, s15
 800fd34:	fb9c fcf4 	sdiv	ip, ip, r4
 800fd38:	fb0c 3306 	mla	r3, ip, r6, r3
 800fd3c:	9302      	str	r3, [sp, #8]
 800fd3e:	ee17 3a10 	vmov	r3, s14
 800fd42:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 800fd46:	fb07 3706 	mla	r7, r7, r6, r3
 800fd4a:	eba9 0306 	sub.w	r3, r9, r6
 800fd4e:	e9cd 4700 	strd	r4, r7, [sp]
 800fd52:	f8da 4008 	ldr.w	r4, [sl, #8]
 800fd56:	47a0      	blx	r4
 800fd58:	b00d      	add	sp, #52	; 0x34
 800fd5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd5e:	2500      	movs	r5, #0
 800fd60:	462e      	mov	r6, r5
 800fd62:	e799      	b.n	800fc98 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0800fd64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 800fd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd68:	b0db      	sub	sp, #364	; 0x16c
 800fd6a:	461d      	mov	r5, r3
 800fd6c:	4614      	mov	r4, r2
 800fd6e:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 800fd72:	910f      	str	r1, [sp, #60]	; 0x3c
 800fd74:	4629      	mov	r1, r5
 800fd76:	930a      	str	r3, [sp, #40]	; 0x28
 800fd78:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 800fd7c:	9009      	str	r0, [sp, #36]	; 0x24
 800fd7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd80:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 800fd84:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 800fd88:	9310      	str	r3, [sp, #64]	; 0x40
 800fd8a:	6803      	ldr	r3, [r0, #0]
 800fd8c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 800fd8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fd92:	47b8      	blx	r7
 800fd94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd96:	6058      	str	r0, [r3, #4]
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	f000 83a1 	beq.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fd9e:	682b      	ldr	r3, [r5, #0]
 800fda0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800fda4:	ed94 7a02 	vldr	s14, [r4, #8]
 800fda8:	9314      	str	r3, [sp, #80]	; 0x50
 800fdaa:	686b      	ldr	r3, [r5, #4]
 800fdac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdb0:	9315      	str	r3, [sp, #84]	; 0x54
 800fdb2:	4bc1      	ldr	r3, [pc, #772]	; (80100b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 800fdb4:	7819      	ldrb	r1, [r3, #0]
 800fdb6:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800fdba:	2900      	cmp	r1, #0
 800fdbc:	bf16      	itet	ne
 800fdbe:	4619      	movne	r1, r3
 800fdc0:	4611      	moveq	r1, r2
 800fdc2:	4613      	movne	r3, r2
 800fdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc8:	9116      	str	r1, [sp, #88]	; 0x58
 800fdca:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 800fdce:	f240 8387 	bls.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fdd2:	ed94 7a07 	vldr	s14, [r4, #28]
 800fdd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdde:	f240 837f 	bls.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fde2:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800fde6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fdea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdee:	f240 8377 	bls.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fdf2:	6822      	ldr	r2, [r4, #0]
 800fdf4:	4bb1      	ldr	r3, [pc, #708]	; (80100bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	f2c0 8372 	blt.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fdfc:	49b0      	ldr	r1, [pc, #704]	; (80100c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 800fdfe:	6963      	ldr	r3, [r4, #20]
 800fe00:	428a      	cmp	r2, r1
 800fe02:	f300 836d 	bgt.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fe06:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800fe0a:	48ae      	ldr	r0, [pc, #696]	; (80100c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 800fe0c:	33ff      	adds	r3, #255	; 0xff
 800fe0e:	4283      	cmp	r3, r0
 800fe10:	f200 8366 	bhi.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fe14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fe16:	4dac      	ldr	r5, [pc, #688]	; (80100c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 800fe18:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 800fe1c:	33ff      	adds	r3, #255	; 0xff
 800fe1e:	42ab      	cmp	r3, r5
 800fe20:	f200 835e 	bhi.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fe24:	6862      	ldr	r2, [r4, #4]
 800fe26:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 800fe2a:	33ff      	adds	r3, #255	; 0xff
 800fe2c:	4283      	cmp	r3, r0
 800fe2e:	f200 8357 	bhi.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fe32:	69a1      	ldr	r1, [r4, #24]
 800fe34:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 800fe38:	33ff      	adds	r3, #255	; 0xff
 800fe3a:	4283      	cmp	r3, r0
 800fe3c:	f200 8350 	bhi.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fe40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fe42:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 800fe46:	30ff      	adds	r0, #255	; 0xff
 800fe48:	42a8      	cmp	r0, r5
 800fe4a:	f200 8349 	bhi.w	80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 800fe4e:	428a      	cmp	r2, r1
 800fe50:	f280 8110 	bge.w	8010074 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 800fe54:	429a      	cmp	r2, r3
 800fe56:	f300 8119 	bgt.w	801008c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 800fe5a:	4299      	cmp	r1, r3
 800fe5c:	f280 811d 	bge.w	801009a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 800fe60:	2502      	movs	r5, #2
 800fe62:	2701      	movs	r7, #1
 800fe64:	46a9      	mov	r9, r5
 800fe66:	46b8      	mov	r8, r7
 800fe68:	f04f 0a00 	mov.w	sl, #0
 800fe6c:	4621      	mov	r1, r4
 800fe6e:	a849      	add	r0, sp, #292	; 0x124
 800fe70:	f003 fd00 	bl	8013874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 800fe74:	4622      	mov	r2, r4
 800fe76:	4653      	mov	r3, sl
 800fe78:	a949      	add	r1, sp, #292	; 0x124
 800fe7a:	f8cd 9000 	str.w	r9, [sp]
 800fe7e:	a819      	add	r0, sp, #100	; 0x64
 800fe80:	f003 fe28 	bl	8013ad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800fe84:	4622      	mov	r2, r4
 800fe86:	4653      	mov	r3, sl
 800fe88:	a949      	add	r1, sp, #292	; 0x124
 800fe8a:	f8cd 8000 	str.w	r8, [sp]
 800fe8e:	a829      	add	r0, sp, #164	; 0xa4
 800fe90:	f003 fe20 	bl	8013ad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800fe94:	4643      	mov	r3, r8
 800fe96:	4622      	mov	r2, r4
 800fe98:	a949      	add	r1, sp, #292	; 0x124
 800fe9a:	f8cd 9000 	str.w	r9, [sp]
 800fe9e:	a839      	add	r0, sp, #228	; 0xe4
 800fea0:	f003 fe18 	bl	8013ad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 800fea4:	42af      	cmp	r7, r5
 800fea6:	af12      	add	r7, sp, #72	; 0x48
 800fea8:	bfb7      	itett	lt
 800feaa:	2300      	movlt	r3, #0
 800feac:	2301      	movge	r3, #1
 800feae:	ad29      	addlt	r5, sp, #164	; 0xa4
 800feb0:	ac19      	addlt	r4, sp, #100	; 0x64
 800feb2:	bfb1      	iteee	lt
 800feb4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800feb6:	ad19      	addge	r5, sp, #100	; 0x64
 800feb8:	930e      	strge	r3, [sp, #56]	; 0x38
 800feba:	ac29      	addge	r4, sp, #164	; 0xa4
 800febc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800febe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800fec2:	e887 0003 	stmia.w	r7, {r0, r1}
 800fec6:	b928      	cbnz	r0, 800fed4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 800fec8:	4b80      	ldr	r3, [pc, #512]	; (80100cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 800feca:	6818      	ldr	r0, [r3, #0]
 800fecc:	6803      	ldr	r3, [r0, #0]
 800fece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed0:	4798      	blx	r3
 800fed2:	6038      	str	r0, [r7, #0]
 800fed4:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800fed6:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 800feda:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800fede:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800fee0:	930c      	str	r3, [sp, #48]	; 0x30
 800fee2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fee4:	6963      	ldr	r3, [r4, #20]
 800fee6:	440b      	add	r3, r1
 800fee8:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800feec:	4408      	add	r0, r1
 800feee:	b200      	sxth	r0, r0
 800fef0:	4283      	cmp	r3, r0
 800fef2:	900d      	str	r0, [sp, #52]	; 0x34
 800fef4:	f280 80dd 	bge.w	80100b2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 800fef8:	428b      	cmp	r3, r1
 800fefa:	da08      	bge.n	800ff0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800fefc:	2a00      	cmp	r2, #0
 800fefe:	dd06      	ble.n	800ff0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 800ff00:	1acb      	subs	r3, r1, r3
 800ff02:	429a      	cmp	r2, r3
 800ff04:	f2c0 80e4 	blt.w	80100d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	f300 80e2 	bgt.w	80100d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 800ff0e:	6967      	ldr	r7, [r4, #20]
 800ff10:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 800ff14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff16:	443b      	add	r3, r7
 800ff18:	461f      	mov	r7, r3
 800ff1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ff1c:	1bdf      	subs	r7, r3, r7
 800ff1e:	4297      	cmp	r7, r2
 800ff20:	bfa8      	it	ge
 800ff22:	4617      	movge	r7, r2
 800ff24:	2f00      	cmp	r7, #0
 800ff26:	f340 8166 	ble.w	80101f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 800ff2a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 800ff2c:	6829      	ldr	r1, [r5, #0]
 800ff2e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ff32:	f9bb 3000 	ldrsh.w	r3, [fp]
 800ff36:	4411      	add	r1, r2
 800ff38:	6820      	ldr	r0, [r4, #0]
 800ff3a:	4299      	cmp	r1, r3
 800ff3c:	dd1a      	ble.n	800ff74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ff3e:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 800ff42:	4402      	add	r2, r0
 800ff44:	440b      	add	r3, r1
 800ff46:	b21b      	sxth	r3, r3
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	dc13      	bgt.n	800ff74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 800ff4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ff4e:	a912      	add	r1, sp, #72	; 0x48
 800ff50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	9206      	str	r2, [sp, #24]
 800ff58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ff5a:	9500      	str	r5, [sp, #0]
 800ff5c:	9205      	str	r2, [sp, #20]
 800ff5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ff60:	e9cd b203 	strd	fp, r2, [sp, #12]
 800ff64:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ff66:	e9cd 8201 	strd	r8, r2, [sp, #4]
 800ff6a:	aa49      	add	r2, sp, #292	; 0x124
 800ff6c:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 800ff70:	4623      	mov	r3, r4
 800ff72:	47c8      	blx	r9
 800ff74:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800ff78:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800ff7c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 800ff80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ff84:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800ff88:	68a1      	ldr	r1, [r4, #8]
 800ff8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff8e:	ed94 6a08 	vldr	s12, [r4, #32]
 800ff92:	edd4 6a07 	vldr	s13, [r4, #28]
 800ff96:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ff9a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ff9e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800ffa2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ffa6:	edc4 6a07 	vstr	s13, [r4, #28]
 800ffaa:	441a      	add	r2, r3
 800ffac:	6963      	ldr	r3, [r4, #20]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	6022      	str	r2, [r4, #0]
 800ffb2:	6163      	str	r3, [r4, #20]
 800ffb4:	69a3      	ldr	r3, [r4, #24]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	61a3      	str	r3, [r4, #24]
 800ffba:	6923      	ldr	r3, [r4, #16]
 800ffbc:	440b      	add	r3, r1
 800ffbe:	68e1      	ldr	r1, [r4, #12]
 800ffc0:	428b      	cmp	r3, r1
 800ffc2:	6123      	str	r3, [r4, #16]
 800ffc4:	db15      	blt.n	800fff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 800ffc6:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 800ffca:	3201      	adds	r2, #1
 800ffcc:	1a5b      	subs	r3, r3, r1
 800ffce:	ee76 6a26 	vadd.f32	s13, s12, s13
 800ffd2:	6022      	str	r2, [r4, #0]
 800ffd4:	6123      	str	r3, [r4, #16]
 800ffd6:	edc4 6a07 	vstr	s13, [r4, #28]
 800ffda:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800ffde:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ffe2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 800ffe6:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800ffea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffee:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 800fff2:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 800fff6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 800fffa:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 800fffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010002:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010006:	68a9      	ldr	r1, [r5, #8]
 8010008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801000c:	ed95 6a08 	vldr	s12, [r5, #32]
 8010010:	edd5 6a07 	vldr	s13, [r5, #28]
 8010014:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010018:	ee76 6a86 	vadd.f32	s13, s13, s12
 801001c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010020:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010024:	edc5 6a07 	vstr	s13, [r5, #28]
 8010028:	441a      	add	r2, r3
 801002a:	696b      	ldr	r3, [r5, #20]
 801002c:	3301      	adds	r3, #1
 801002e:	602a      	str	r2, [r5, #0]
 8010030:	616b      	str	r3, [r5, #20]
 8010032:	69ab      	ldr	r3, [r5, #24]
 8010034:	3b01      	subs	r3, #1
 8010036:	61ab      	str	r3, [r5, #24]
 8010038:	692b      	ldr	r3, [r5, #16]
 801003a:	440b      	add	r3, r1
 801003c:	68e9      	ldr	r1, [r5, #12]
 801003e:	428b      	cmp	r3, r1
 8010040:	612b      	str	r3, [r5, #16]
 8010042:	db15      	blt.n	8010070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8010044:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010048:	3201      	adds	r2, #1
 801004a:	1a5b      	subs	r3, r3, r1
 801004c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010050:	602a      	str	r2, [r5, #0]
 8010052:	612b      	str	r3, [r5, #16]
 8010054:	edc5 6a07 	vstr	s13, [r5, #28]
 8010058:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801005c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010060:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010064:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010068:	ee77 7a27 	vadd.f32	s15, s14, s15
 801006c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8010070:	3f01      	subs	r7, #1
 8010072:	e757      	b.n	800ff24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8010074:	4299      	cmp	r1, r3
 8010076:	dc13      	bgt.n	80100a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8010078:	429a      	cmp	r2, r3
 801007a:	da14      	bge.n	80100a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801007c:	2502      	movs	r5, #2
 801007e:	2703      	movs	r7, #3
 8010080:	f04f 0800 	mov.w	r8, #0
 8010084:	46a9      	mov	r9, r5
 8010086:	f04f 0a01 	mov.w	sl, #1
 801008a:	e6ef      	b.n	800fe6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801008c:	2501      	movs	r5, #1
 801008e:	2700      	movs	r7, #0
 8010090:	46a9      	mov	r9, r5
 8010092:	46b8      	mov	r8, r7
 8010094:	f04f 0a02 	mov.w	sl, #2
 8010098:	e6e8      	b.n	800fe6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801009a:	2501      	movs	r5, #1
 801009c:	2702      	movs	r7, #2
 801009e:	e6e1      	b.n	800fe64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80100a0:	2500      	movs	r5, #0
 80100a2:	2701      	movs	r7, #1
 80100a4:	e7f4      	b.n	8010090 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80100a6:	2702      	movs	r7, #2
 80100a8:	2503      	movs	r5, #3
 80100aa:	f04f 0900 	mov.w	r9, #0
 80100ae:	46b8      	mov	r8, r7
 80100b0:	e7e9      	b.n	8010086 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80100b2:	4613      	mov	r3, r2
 80100b4:	e728      	b.n	800ff08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80100b6:	bf00      	nop
 80100b8:	2401aa34 	.word	0x2401aa34
 80100bc:	fffd8f01 	.word	0xfffd8f01
 80100c0:	00027100 	.word	0x00027100
 80100c4:	0004e1ff 	.word	0x0004e1ff
 80100c8:	0004e1fe 	.word	0x0004e1fe
 80100cc:	2401aa3c 	.word	0x2401aa3c
 80100d0:	4613      	mov	r3, r2
 80100d2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80100d4:	469e      	mov	lr, r3
 80100d6:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 80100d8:	469c      	mov	ip, r3
 80100da:	9111      	str	r1, [sp, #68]	; 0x44
 80100dc:	f04f 0900 	mov.w	r9, #0
 80100e0:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 80100e4:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 80100e8:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 80100ec:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 80100f0:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 80100f4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80100f8:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 80100fc:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8010100:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8010104:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8010108:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801010c:	f1bc 0f00 	cmp.w	ip, #0
 8010110:	d147      	bne.n	80101a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8010112:	eb03 0c07 	add.w	ip, r3, r7
 8010116:	1ad7      	subs	r7, r2, r3
 8010118:	f1b9 0f00 	cmp.w	r9, #0
 801011c:	d009      	beq.n	8010132 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801011e:	9029      	str	r0, [sp, #164]	; 0xa4
 8010120:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8010124:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8010128:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801012c:	912d      	str	r1, [sp, #180]	; 0xb4
 801012e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8010132:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010134:	f04f 0800 	mov.w	r8, #0
 8010138:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801013c:	9111      	str	r1, [sp, #68]	; 0x44
 801013e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8010142:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010146:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801014a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801014e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8010152:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010156:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801015a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801015e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8010162:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010166:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801016a:	f1be 0f00 	cmp.w	lr, #0
 801016e:	d031      	beq.n	80101d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8010170:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8010172:	4450      	add	r0, sl
 8010174:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010178:	4431      	add	r1, r6
 801017a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801017e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8010182:	4549      	cmp	r1, r9
 8010184:	db08      	blt.n	8010198 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8010186:	ee77 7a85 	vadd.f32	s15, s15, s10
 801018a:	3001      	adds	r0, #1
 801018c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010190:	eba1 0109 	sub.w	r1, r1, r9
 8010194:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010198:	f10e 3eff 	add.w	lr, lr, #4294967295
 801019c:	f04f 0801 	mov.w	r8, #1
 80101a0:	e7e3      	b.n	801016a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80101a2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80101a4:	4450      	add	r0, sl
 80101a6:	ee37 7a24 	vadd.f32	s14, s14, s9
 80101aa:	4431      	add	r1, r6
 80101ac:	ee77 7a84 	vadd.f32	s15, s15, s8
 80101b0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80101b4:	4541      	cmp	r1, r8
 80101b6:	db08      	blt.n	80101ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80101b8:	ee76 6a85 	vadd.f32	s13, s13, s10
 80101bc:	3001      	adds	r0, #1
 80101be:	ee37 7a25 	vadd.f32	s14, s14, s11
 80101c2:	eba1 0108 	sub.w	r1, r1, r8
 80101c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80101ca:	f10c 3cff 	add.w	ip, ip, #4294967295
 80101ce:	f04f 0901 	mov.w	r9, #1
 80101d2:	e79b      	b.n	801010c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 80101d4:	449c      	add	ip, r3
 80101d6:	1aff      	subs	r7, r7, r3
 80101d8:	f1b8 0f00 	cmp.w	r8, #0
 80101dc:	d009      	beq.n	80101f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 80101de:	9019      	str	r0, [sp, #100]	; 0x64
 80101e0:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80101e4:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80101e8:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80101ec:	911d      	str	r1, [sp, #116]	; 0x74
 80101ee:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80101f2:	1ad2      	subs	r2, r2, r3
 80101f4:	e68b      	b.n	800ff0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80101f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101f8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 80d1 	beq.w	80103a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8010200:	ad19      	add	r5, sp, #100	; 0x64
 8010202:	ac39      	add	r4, sp, #228	; 0xe4
 8010204:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010206:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801020a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801020e:	930c      	str	r3, [sp, #48]	; 0x30
 8010210:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010212:	6963      	ldr	r3, [r4, #20]
 8010214:	440b      	add	r3, r1
 8010216:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801021a:	4408      	add	r0, r1
 801021c:	b200      	sxth	r0, r0
 801021e:	4283      	cmp	r3, r0
 8010220:	900d      	str	r0, [sp, #52]	; 0x34
 8010222:	f280 80c1 	bge.w	80103a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8010226:	428b      	cmp	r3, r1
 8010228:	da08      	bge.n	801023c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801022a:	2a00      	cmp	r2, #0
 801022c:	dd06      	ble.n	801023c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801022e:	1acb      	subs	r3, r1, r3
 8010230:	429a      	cmp	r2, r3
 8010232:	f2c0 80bb 	blt.w	80103ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8010236:	2b00      	cmp	r3, #0
 8010238:	f300 80b9 	bgt.w	80103ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 801023c:	6967      	ldr	r7, [r4, #20]
 801023e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8010242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010244:	443b      	add	r3, r7
 8010246:	461f      	mov	r7, r3
 8010248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801024a:	1bdf      	subs	r7, r3, r7
 801024c:	4297      	cmp	r7, r2
 801024e:	bfa8      	it	ge
 8010250:	4617      	movge	r7, r2
 8010252:	2f00      	cmp	r7, #0
 8010254:	f340 813c 	ble.w	80104d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8010258:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801025a:	6829      	ldr	r1, [r5, #0]
 801025c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010260:	f9bb 3000 	ldrsh.w	r3, [fp]
 8010264:	4411      	add	r1, r2
 8010266:	6820      	ldr	r0, [r4, #0]
 8010268:	4299      	cmp	r1, r3
 801026a:	dd1a      	ble.n	80102a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801026c:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8010270:	4402      	add	r2, r0
 8010272:	440b      	add	r3, r1
 8010274:	b21b      	sxth	r3, r3
 8010276:	429a      	cmp	r2, r3
 8010278:	dc13      	bgt.n	80102a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 801027a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801027c:	a912      	add	r1, sp, #72	; 0x48
 801027e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	9206      	str	r2, [sp, #24]
 8010286:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010288:	9500      	str	r5, [sp, #0]
 801028a:	9205      	str	r2, [sp, #20]
 801028c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801028e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8010292:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8010294:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8010298:	aa49      	add	r2, sp, #292	; 0x124
 801029a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801029e:	4623      	mov	r3, r4
 80102a0:	47c8      	blx	r9
 80102a2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80102a6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80102aa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80102ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80102b2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80102b6:	68a1      	ldr	r1, [r4, #8]
 80102b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80102bc:	ed94 6a08 	vldr	s12, [r4, #32]
 80102c0:	edd4 6a07 	vldr	s13, [r4, #28]
 80102c4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 80102c8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80102cc:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 80102d0:	e9d4 2300 	ldrd	r2, r3, [r4]
 80102d4:	edc4 6a07 	vstr	s13, [r4, #28]
 80102d8:	441a      	add	r2, r3
 80102da:	6963      	ldr	r3, [r4, #20]
 80102dc:	3301      	adds	r3, #1
 80102de:	6022      	str	r2, [r4, #0]
 80102e0:	6163      	str	r3, [r4, #20]
 80102e2:	69a3      	ldr	r3, [r4, #24]
 80102e4:	3b01      	subs	r3, #1
 80102e6:	61a3      	str	r3, [r4, #24]
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	440b      	add	r3, r1
 80102ec:	68e1      	ldr	r1, [r4, #12]
 80102ee:	428b      	cmp	r3, r1
 80102f0:	6123      	str	r3, [r4, #16]
 80102f2:	db15      	blt.n	8010320 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 80102f4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 80102f8:	3201      	adds	r2, #1
 80102fa:	1a5b      	subs	r3, r3, r1
 80102fc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8010300:	6022      	str	r2, [r4, #0]
 8010302:	6123      	str	r3, [r4, #16]
 8010304:	edc4 6a07 	vstr	s13, [r4, #28]
 8010308:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801030c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8010310:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8010314:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8010318:	ee77 7a27 	vadd.f32	s15, s14, s15
 801031c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8010320:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8010324:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8010328:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801032c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010330:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8010334:	68a9      	ldr	r1, [r5, #8]
 8010336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801033a:	ed95 6a08 	vldr	s12, [r5, #32]
 801033e:	edd5 6a07 	vldr	s13, [r5, #28]
 8010342:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010346:	ee76 6a86 	vadd.f32	s13, s13, s12
 801034a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801034e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010352:	edc5 6a07 	vstr	s13, [r5, #28]
 8010356:	441a      	add	r2, r3
 8010358:	696b      	ldr	r3, [r5, #20]
 801035a:	3301      	adds	r3, #1
 801035c:	602a      	str	r2, [r5, #0]
 801035e:	616b      	str	r3, [r5, #20]
 8010360:	69ab      	ldr	r3, [r5, #24]
 8010362:	3b01      	subs	r3, #1
 8010364:	61ab      	str	r3, [r5, #24]
 8010366:	692b      	ldr	r3, [r5, #16]
 8010368:	440b      	add	r3, r1
 801036a:	68e9      	ldr	r1, [r5, #12]
 801036c:	428b      	cmp	r3, r1
 801036e:	612b      	str	r3, [r5, #16]
 8010370:	db15      	blt.n	801039e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8010372:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8010376:	3201      	adds	r2, #1
 8010378:	1a5b      	subs	r3, r3, r1
 801037a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801037e:	602a      	str	r2, [r5, #0]
 8010380:	612b      	str	r3, [r5, #16]
 8010382:	edc5 6a07 	vstr	s13, [r5, #28]
 8010386:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 801038a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801038e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8010392:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8010396:	ee77 7a27 	vadd.f32	s15, s14, s15
 801039a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801039e:	3f01      	subs	r7, #1
 80103a0:	e757      	b.n	8010252 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 80103a2:	ad39      	add	r5, sp, #228	; 0xe4
 80103a4:	ac19      	add	r4, sp, #100	; 0x64
 80103a6:	e72d      	b.n	8010204 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 80103a8:	4613      	mov	r3, r2
 80103aa:	e744      	b.n	8010236 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 80103ac:	4613      	mov	r3, r2
 80103ae:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 80103b0:	469e      	mov	lr, r3
 80103b2:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 80103b6:	461f      	mov	r7, r3
 80103b8:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 80103bc:	f04f 0900 	mov.w	r9, #0
 80103c0:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 80103c4:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 80103c8:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 80103cc:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 80103d0:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 80103d4:	993d      	ldr	r1, [sp, #244]	; 0xf4
 80103d6:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 80103da:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 80103de:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 80103e2:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 80103e6:	960e      	str	r6, [sp, #56]	; 0x38
 80103e8:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 80103ec:	2f00      	cmp	r7, #0
 80103ee:	d146      	bne.n	801047e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 80103f0:	449c      	add	ip, r3
 80103f2:	1ad7      	subs	r7, r2, r3
 80103f4:	f1b9 0f00 	cmp.w	r9, #0
 80103f8:	d009      	beq.n	801040e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 80103fa:	9039      	str	r0, [sp, #228]	; 0xe4
 80103fc:	913d      	str	r1, [sp, #244]	; 0xf4
 80103fe:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8010402:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8010406:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801040a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801040e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8010410:	f04f 0800 	mov.w	r8, #0
 8010414:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8010418:	910e      	str	r1, [sp, #56]	; 0x38
 801041a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801041e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8010422:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8010426:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801042a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801042e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8010432:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8010436:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801043a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 801043e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8010442:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8010446:	f1be 0f00 	cmp.w	lr, #0
 801044a:	d030      	beq.n	80104ae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 801044c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801044e:	4450      	add	r0, sl
 8010450:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8010454:	4431      	add	r1, r6
 8010456:	ee37 7a04 	vadd.f32	s14, s14, s8
 801045a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801045e:	4549      	cmp	r1, r9
 8010460:	db08      	blt.n	8010474 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8010462:	ee77 7a85 	vadd.f32	s15, s15, s10
 8010466:	3001      	adds	r0, #1
 8010468:	ee76 6aa5 	vadd.f32	s13, s13, s11
 801046c:	eba1 0109 	sub.w	r1, r1, r9
 8010470:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010474:	f10e 3eff 	add.w	lr, lr, #4294967295
 8010478:	f04f 0801 	mov.w	r8, #1
 801047c:	e7e3      	b.n	8010446 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801047e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8010480:	4450      	add	r0, sl
 8010482:	ee37 7a24 	vadd.f32	s14, s14, s9
 8010486:	4431      	add	r1, r6
 8010488:	ee77 7a84 	vadd.f32	s15, s15, s8
 801048c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8010490:	4541      	cmp	r1, r8
 8010492:	db08      	blt.n	80104a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8010494:	ee76 6a85 	vadd.f32	s13, s13, s10
 8010498:	3001      	adds	r0, #1
 801049a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801049e:	eba1 0108 	sub.w	r1, r1, r8
 80104a2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80104a6:	3f01      	subs	r7, #1
 80104a8:	f04f 0901 	mov.w	r9, #1
 80104ac:	e79e      	b.n	80103ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80104ae:	449c      	add	ip, r3
 80104b0:	1aff      	subs	r7, r7, r3
 80104b2:	f1b8 0f00 	cmp.w	r8, #0
 80104b6:	d009      	beq.n	80104cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80104b8:	9019      	str	r0, [sp, #100]	; 0x64
 80104ba:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80104be:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80104c2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80104c6:	911d      	str	r1, [sp, #116]	; 0x74
 80104c8:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80104cc:	1ad2      	subs	r2, r2, r3
 80104ce:	e6b5      	b.n	801023c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80104d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	b923      	cbnz	r3, 80104e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80104d6:	4b04      	ldr	r3, [pc, #16]	; (80104e8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80104d8:	6818      	ldr	r0, [r3, #0]
 80104da:	6803      	ldr	r3, [r0, #0]
 80104dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104de:	4798      	blx	r3
 80104e0:	b05b      	add	sp, #364	; 0x16c
 80104e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104e6:	bf00      	nop
 80104e8:	2401aa3c 	.word	0x2401aa3c

080104ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 80104ec:	b570      	push	{r4, r5, r6, lr}
 80104ee:	4604      	mov	r4, r0
 80104f0:	2500      	movs	r5, #0
 80104f2:	9805      	ldr	r0, [sp, #20]
 80104f4:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80104f8:	6061      	str	r1, [r4, #4]
 80104fa:	8263      	strh	r3, [r4, #18]
 80104fc:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8010500:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8010504:	8025      	strh	r5, [r4, #0]
 8010506:	7221      	strb	r1, [r4, #8]
 8010508:	7266      	strb	r6, [r4, #9]
 801050a:	60e0      	str	r0, [r4, #12]
 801050c:	8222      	strh	r2, [r4, #16]
 801050e:	82a3      	strh	r3, [r4, #20]
 8010510:	82e5      	strh	r5, [r4, #22]
 8010512:	8325      	strh	r5, [r4, #24]
 8010514:	8365      	strh	r5, [r4, #26]
 8010516:	83a5      	strh	r5, [r4, #28]
 8010518:	83e5      	strh	r5, [r4, #30]
 801051a:	8425      	strh	r5, [r4, #32]
 801051c:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 8010520:	b32e      	cbz	r6, 801056e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8010522:	6803      	ldr	r3, [r0, #0]
 8010524:	695b      	ldr	r3, [r3, #20]
 8010526:	4798      	blx	r3
 8010528:	4606      	mov	r6, r0
 801052a:	b300      	cbz	r0, 801056e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801052c:	68e0      	ldr	r0, [r4, #12]
 801052e:	4631      	mov	r1, r6
 8010530:	6803      	ldr	r3, [r0, #0]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	4798      	blx	r3
 8010536:	4605      	mov	r5, r0
 8010538:	b1c8      	cbz	r0, 801056e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801053a:	7b43      	ldrb	r3, [r0, #13]
 801053c:	7a82      	ldrb	r2, [r0, #10]
 801053e:	005b      	lsls	r3, r3, #1
 8010540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010544:	4313      	orrs	r3, r2
 8010546:	8423      	strh	r3, [r4, #32]
 8010548:	7a63      	ldrb	r3, [r4, #9]
 801054a:	2b06      	cmp	r3, #6
 801054c:	d10f      	bne.n	801056e <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 801054e:	68e0      	ldr	r0, [r4, #12]
 8010550:	462a      	mov	r2, r5
 8010552:	4631      	mov	r1, r6
 8010554:	6803      	ldr	r3, [r0, #0]
 8010556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010558:	4798      	blx	r3
 801055a:	7b6b      	ldrb	r3, [r5, #13]
 801055c:	005b      	lsls	r3, r3, #1
 801055e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010562:	7aab      	ldrb	r3, [r5, #10]
 8010564:	4313      	orrs	r3, r2
 8010566:	4418      	add	r0, r3
 8010568:	8c23      	ldrh	r3, [r4, #32]
 801056a:	4418      	add	r0, r3
 801056c:	8420      	strh	r0, [r4, #32]
 801056e:	4620      	mov	r0, r4
 8010570:	bd70      	pop	{r4, r5, r6, pc}

08010572 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8010572:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010576:	2400      	movs	r4, #0
 8010578:	b085      	sub	sp, #20
 801057a:	4681      	mov	r9, r0
 801057c:	4688      	mov	r8, r1
 801057e:	4692      	mov	sl, r2
 8010580:	469b      	mov	fp, r3
 8010582:	4627      	mov	r7, r4
 8010584:	4625      	mov	r5, r4
 8010586:	4626      	mov	r6, r4
 8010588:	4554      	cmp	r4, sl
 801058a:	da2a      	bge.n	80105e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801058c:	2300      	movs	r3, #0
 801058e:	9303      	str	r3, [sp, #12]
 8010590:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010594:	429d      	cmp	r5, r3
 8010596:	d004      	beq.n	80105a2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8010598:	f242 030b 	movw	r3, #8203	; 0x200b
 801059c:	429d      	cmp	r5, r3
 801059e:	bf18      	it	ne
 80105a0:	462f      	movne	r7, r5
 80105a2:	ab03      	add	r3, sp, #12
 80105a4:	4642      	mov	r2, r8
 80105a6:	4659      	mov	r1, fp
 80105a8:	4648      	mov	r0, r9
 80105aa:	f002 ff79 	bl	80134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80105ae:	4605      	mov	r5, r0
 80105b0:	b1b8      	cbz	r0, 80105e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80105b2:	280a      	cmp	r0, #10
 80105b4:	d015      	beq.n	80105e2 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 80105b6:	9a03      	ldr	r2, [sp, #12]
 80105b8:	b18a      	cbz	r2, 80105de <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 80105ba:	7b50      	ldrb	r0, [r2, #13]
 80105bc:	4639      	mov	r1, r7
 80105be:	7a93      	ldrb	r3, [r2, #10]
 80105c0:	0040      	lsls	r0, r0, #1
 80105c2:	8895      	ldrh	r5, [r2, #4]
 80105c4:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80105c8:	4303      	orrs	r3, r0
 80105ca:	4640      	mov	r0, r8
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	f8d8 3000 	ldr.w	r3, [r8]
 80105d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105d4:	4798      	blx	r3
 80105d6:	9b01      	ldr	r3, [sp, #4]
 80105d8:	4418      	add	r0, r3
 80105da:	4406      	add	r6, r0
 80105dc:	b2b6      	uxth	r6, r6
 80105de:	3401      	adds	r4, #1
 80105e0:	e7d2      	b.n	8010588 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80105e2:	4630      	mov	r0, r6
 80105e4:	b005      	add	sp, #20
 80105e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80105ea:	2a02      	cmp	r2, #2
 80105ec:	b530      	push	{r4, r5, lr}
 80105ee:	d011      	beq.n	8010614 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80105f0:	2a03      	cmp	r2, #3
 80105f2:	d01c      	beq.n	801062e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80105f4:	2a01      	cmp	r2, #1
 80105f6:	d10c      	bne.n	8010612 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80105f8:	888b      	ldrh	r3, [r1, #4]
 80105fa:	8801      	ldrh	r1, [r0, #0]
 80105fc:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8010600:	1a5b      	subs	r3, r3, r1
 8010602:	8844      	ldrh	r4, [r0, #2]
 8010604:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8010608:	1a9b      	subs	r3, r3, r2
 801060a:	8004      	strh	r4, [r0, #0]
 801060c:	8081      	strh	r1, [r0, #4]
 801060e:	8043      	strh	r3, [r0, #2]
 8010610:	80c2      	strh	r2, [r0, #6]
 8010612:	bd30      	pop	{r4, r5, pc}
 8010614:	88cb      	ldrh	r3, [r1, #6]
 8010616:	8842      	ldrh	r2, [r0, #2]
 8010618:	1a9b      	subs	r3, r3, r2
 801061a:	88c2      	ldrh	r2, [r0, #6]
 801061c:	1a9b      	subs	r3, r3, r2
 801061e:	888a      	ldrh	r2, [r1, #4]
 8010620:	8801      	ldrh	r1, [r0, #0]
 8010622:	8043      	strh	r3, [r0, #2]
 8010624:	1a52      	subs	r2, r2, r1
 8010626:	8881      	ldrh	r1, [r0, #4]
 8010628:	1a52      	subs	r2, r2, r1
 801062a:	8002      	strh	r2, [r0, #0]
 801062c:	e7f1      	b.n	8010612 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801062e:	88cb      	ldrh	r3, [r1, #6]
 8010630:	8841      	ldrh	r1, [r0, #2]
 8010632:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010636:	1a5b      	subs	r3, r3, r1
 8010638:	f9b0 5000 	ldrsh.w	r5, [r0]
 801063c:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	8045      	strh	r5, [r0, #2]
 8010644:	8082      	strh	r2, [r0, #4]
 8010646:	8003      	strh	r3, [r0, #0]
 8010648:	80c4      	strh	r4, [r0, #6]
 801064a:	e7e2      	b.n	8010612 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801064c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801064c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010650:	b09f      	sub	sp, #124	; 0x7c
 8010652:	9116      	str	r1, [sp, #88]	; 0x58
 8010654:	9317      	str	r3, [sp, #92]	; 0x5c
 8010656:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8010658:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801065a:	8809      	ldrh	r1, [r1, #0]
 801065c:	889b      	ldrh	r3, [r3, #4]
 801065e:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8010662:	440b      	add	r3, r1
 8010664:	9212      	str	r2, [sp, #72]	; 0x48
 8010666:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801066a:	b21b      	sxth	r3, r3
 801066c:	9011      	str	r0, [sp, #68]	; 0x44
 801066e:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8010672:	9310      	str	r3, [sp, #64]	; 0x40
 8010674:	f8d8 3000 	ldr.w	r3, [r8]
 8010678:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
 801067c:	7b19      	ldrb	r1, [r3, #12]
 801067e:	7adb      	ldrb	r3, [r3, #11]
 8010680:	9114      	str	r1, [sp, #80]	; 0x50
 8010682:	9315      	str	r3, [sp, #84]	; 0x54
 8010684:	2a00      	cmp	r2, #0
 8010686:	d06a      	beq.n	801075e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8010688:	f898 3010 	ldrb.w	r3, [r8, #16]
 801068c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801068e:	2b06      	cmp	r3, #6
 8010690:	bf14      	ite	ne
 8010692:	2301      	movne	r3, #1
 8010694:	2302      	moveq	r3, #2
 8010696:	4413      	add	r3, r2
 8010698:	f04f 0900 	mov.w	r9, #0
 801069c:	930f      	str	r3, [sp, #60]	; 0x3c
 801069e:	464c      	mov	r4, r9
 80106a0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80106a4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80106a8:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80106ac:	4293      	cmp	r3, r2
 80106ae:	f280 808f 	bge.w	80107d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80106b2:	2300      	movs	r3, #0
 80106b4:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80106b8:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80106bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80106c0:	429c      	cmp	r4, r3
 80106c2:	d006      	beq.n	80106d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 80106c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80106c6:	f242 020b 	movw	r2, #8203	; 0x200b
 80106ca:	4294      	cmp	r4, r2
 80106cc:	bf18      	it	ne
 80106ce:	4623      	movne	r3, r4
 80106d0:	930d      	str	r3, [sp, #52]	; 0x34
 80106d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80106d4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80106d6:	f8d8 2000 	ldr.w	r2, [r8]
 80106da:	428b      	cmp	r3, r1
 80106dc:	db41      	blt.n	8010762 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80106de:	6813      	ldr	r3, [r2, #0]
 80106e0:	4610      	mov	r0, r2
 80106e2:	695b      	ldr	r3, [r3, #20]
 80106e4:	4798      	blx	r3
 80106e6:	4604      	mov	r4, r0
 80106e8:	f8d8 0000 	ldr.w	r0, [r8]
 80106ec:	aa1d      	add	r2, sp, #116	; 0x74
 80106ee:	4621      	mov	r1, r4
 80106f0:	6803      	ldr	r3, [r0, #0]
 80106f2:	689d      	ldr	r5, [r3, #8]
 80106f4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80106f8:	47a8      	blx	r5
 80106fa:	901c      	str	r0, [sp, #112]	; 0x70
 80106fc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010700:	429c      	cmp	r4, r3
 8010702:	f000 80ec 	beq.w	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010706:	f242 030b 	movw	r3, #8203	; 0x200b
 801070a:	429c      	cmp	r4, r3
 801070c:	f000 80e7 	beq.w	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010710:	2c00      	cmp	r4, #0
 8010712:	f000 80f9 	beq.w	8010908 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8010716:	2c0a      	cmp	r4, #10
 8010718:	d060      	beq.n	80107dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801071a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801071c:	b36a      	cbz	r2, 801077a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801071e:	8894      	ldrh	r4, [r2, #4]
 8010720:	f1bb 0f00 	cmp.w	fp, #0
 8010724:	d03b      	beq.n	801079e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8010726:	f892 900d 	ldrb.w	r9, [r2, #13]
 801072a:	f1bb 0f01 	cmp.w	fp, #1
 801072e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8010732:	f409 7380 	and.w	r3, r9, #256	; 0x100
 8010736:	f892 900a 	ldrb.w	r9, [r2, #10]
 801073a:	ea49 0903 	orr.w	r9, r9, r3
 801073e:	d134      	bne.n	80107aa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8010740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010742:	eba6 0609 	sub.w	r6, r6, r9
 8010746:	2b00      	cmp	r3, #0
 8010748:	d14f      	bne.n	80107ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801074a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801074c:	eb09 0306 	add.w	r3, r9, r6
 8010750:	4413      	add	r3, r2
 8010752:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8010754:	f9b2 2000 	ldrsh.w	r2, [r2]
 8010758:	4293      	cmp	r3, r2
 801075a:	da51      	bge.n	8010800 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801075c:	e038      	b.n	80107d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801075e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8010760:	e79a      	b.n	8010698 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8010762:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 8010766:	4659      	mov	r1, fp
 8010768:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801076a:	9301      	str	r3, [sp, #4]
 801076c:	ab1d      	add	r3, sp, #116	; 0x74
 801076e:	9300      	str	r3, [sp, #0]
 8010770:	ab1c      	add	r3, sp, #112	; 0x70
 8010772:	f002 fede 	bl	8013532 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8010776:	4604      	mov	r4, r0
 8010778:	e7c0      	b.n	80106fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801077a:	f8d8 0000 	ldr.w	r0, [r8]
 801077e:	6803      	ldr	r3, [r0, #0]
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	4798      	blx	r3
 8010784:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010788:	4298      	cmp	r0, r3
 801078a:	f000 80a8 	beq.w	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801078e:	f242 030b 	movw	r3, #8203	; 0x200b
 8010792:	4298      	cmp	r0, r3
 8010794:	f000 80a3 	beq.w	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010798:	f1bb 0f00 	cmp.w	fp, #0
 801079c:	d100      	bne.n	80107a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801079e:	444e      	add	r6, r9
 80107a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80107a2:	2a00      	cmp	r2, #0
 80107a4:	d1bf      	bne.n	8010726 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 80107a6:	4691      	mov	r9, r2
 80107a8:	e099      	b.n	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 80107aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	f000 80ad 	beq.w	801090c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
 80107b2:	f1bb 0f00 	cmp.w	fp, #0
 80107b6:	d118      	bne.n	80107ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80107b8:	f8d8 0000 	ldr.w	r0, [r8]
 80107bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107be:	6803      	ldr	r3, [r0, #0]
 80107c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c2:	4798      	blx	r3
 80107c4:	4406      	add	r6, r0
 80107c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80107c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107ca:	1af3      	subs	r3, r6, r3
 80107cc:	4293      	cmp	r3, r2
 80107ce:	dd17      	ble.n	8010800 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80107d0:	2c00      	cmp	r4, #0
 80107d2:	f000 8099 	beq.w	8010908 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 80107d6:	2c0a      	cmp	r4, #10
 80107d8:	f040 8087 	bne.w	80108ea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
 80107dc:	240a      	movs	r4, #10
 80107de:	fab4 f084 	clz	r0, r4
 80107e2:	0940      	lsrs	r0, r0, #5
 80107e4:	b01f      	add	sp, #124	; 0x7c
 80107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ea:	f8d8 0000 	ldr.w	r0, [r8]
 80107ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80107f0:	6803      	ldr	r3, [r0, #0]
 80107f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107f4:	4798      	blx	r3
 80107f6:	f1bb 0f01 	cmp.w	fp, #1
 80107fa:	eba6 0600 	sub.w	r6, r6, r0
 80107fe:	d0a4      	beq.n	801074a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8010800:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010802:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8010804:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8010808:	f9b3 7000 	ldrsh.w	r7, [r3]
 801080c:	7b43      	ldrb	r3, [r0, #13]
 801080e:	4431      	add	r1, r6
 8010810:	015b      	lsls	r3, r3, #5
 8010812:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8010816:	7983      	ldrb	r3, [r0, #6]
 8010818:	4313      	orrs	r3, r2
 801081a:	440b      	add	r3, r1
 801081c:	42bb      	cmp	r3, r7
 801081e:	db5e      	blt.n	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010820:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010822:	4299      	cmp	r1, r3
 8010824:	da5b      	bge.n	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 8010826:	f8d8 0000 	ldr.w	r0, [r8]
 801082a:	42b7      	cmp	r7, r6
 801082c:	6803      	ldr	r3, [r0, #0]
 801082e:	bfcc      	ite	gt
 8010830:	1bbf      	subgt	r7, r7, r6
 8010832:	2700      	movle	r7, #0
 8010834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010836:	bfc8      	it	gt
 8010838:	b2bf      	uxthgt	r7, r7
 801083a:	4798      	blx	r3
 801083c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801083e:	7b5a      	ldrb	r2, [r3, #13]
 8010840:	00d1      	lsls	r1, r2, #3
 8010842:	f401 7580 	and.w	r5, r1, #256	; 0x100
 8010846:	7a19      	ldrb	r1, [r3, #8]
 8010848:	4329      	orrs	r1, r5
 801084a:	0655      	lsls	r5, r2, #25
 801084c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 801084e:	bf48      	it	mi
 8010850:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 8010854:	4405      	add	r5, r0
 8010856:	bf48      	it	mi
 8010858:	b209      	sxthmi	r1, r1
 801085a:	1a6d      	subs	r5, r5, r1
 801085c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801085e:	b2ad      	uxth	r5, r5
 8010860:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8010864:	fa0f fa85 	sxth.w	sl, r5
 8010868:	4551      	cmp	r1, sl
 801086a:	dd3c      	ble.n	80108e6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801086c:	0112      	lsls	r2, r2, #4
 801086e:	79d8      	ldrb	r0, [r3, #7]
 8010870:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8010874:	4302      	orrs	r2, r0
 8010876:	4492      	add	sl, r2
 8010878:	4551      	cmp	r1, sl
 801087a:	dc30      	bgt.n	80108de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
 801087c:	1b4d      	subs	r5, r1, r5
 801087e:	468a      	mov	sl, r1
 8010880:	b22d      	sxth	r5, r5
 8010882:	9319      	str	r3, [sp, #100]	; 0x64
 8010884:	b2ad      	uxth	r5, r5
 8010886:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010888:	f8d8 0000 	ldr.w	r0, [r8]
 801088c:	681a      	ldr	r2, [r3, #0]
 801088e:	6801      	ldr	r1, [r0, #0]
 8010890:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8010892:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010894:	9313      	str	r3, [sp, #76]	; 0x4c
 8010896:	9218      	str	r2, [sp, #96]	; 0x60
 8010898:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801089a:	4788      	blx	r1
 801089c:	f898 1006 	ldrb.w	r1, [r8, #6]
 80108a0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80108a2:	910b      	str	r1, [sp, #44]	; 0x2c
 80108a4:	f898 100e 	ldrb.w	r1, [r8, #14]
 80108a8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80108aa:	910a      	str	r1, [sp, #40]	; 0x28
 80108ac:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 80108b0:	9109      	str	r1, [sp, #36]	; 0x24
 80108b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80108b6:	9305      	str	r3, [sp, #20]
 80108b8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80108ba:	9206      	str	r2, [sp, #24]
 80108bc:	9304      	str	r3, [sp, #16]
 80108be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80108c0:	f8cd a004 	str.w	sl, [sp, #4]
 80108c4:	e9cd 7502 	strd	r7, r5, [sp, #8]
 80108c8:	4437      	add	r7, r6
 80108ca:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80108cc:	b23f      	sxth	r7, r7
 80108ce:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80108d2:	9700      	str	r7, [sp, #0]
 80108d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	47a8      	blx	r5
 80108de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80108e0:	3301      	adds	r3, #1
 80108e2:	930e      	str	r3, [sp, #56]	; 0x38
 80108e4:	e6e0      	b.n	80106a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80108e6:	2500      	movs	r5, #0
 80108e8:	e7cb      	b.n	8010882 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80108ea:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80108ec:	3501      	adds	r5, #1
 80108ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80108f0:	429d      	cmp	r5, r3
 80108f2:	f6bf af74 	bge.w	80107de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80108f6:	4659      	mov	r1, fp
 80108f8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80108fa:	f7fa ff7d 	bl	800b7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80108fe:	4604      	mov	r4, r0
 8010900:	b110      	cbz	r0, 8010908 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8010902:	280a      	cmp	r0, #10
 8010904:	d1f2      	bne.n	80108ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
 8010906:	e769      	b.n	80107dc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8010908:	2400      	movs	r4, #0
 801090a:	e768      	b.n	80107de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801090c:	f1bb 0f00 	cmp.w	fp, #0
 8010910:	f43f af59 	beq.w	80107c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8010914:	e774      	b.n	8010800 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08010916 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8010916:	b530      	push	{r4, r5, lr}
 8010918:	8ac4      	ldrh	r4, [r0, #22]
 801091a:	8b45      	ldrh	r5, [r0, #26]
 801091c:	8343      	strh	r3, [r0, #26]
 801091e:	442c      	add	r4, r5
 8010920:	1ae4      	subs	r4, r4, r3
 8010922:	8b83      	ldrh	r3, [r0, #28]
 8010924:	82c4      	strh	r4, [r0, #22]
 8010926:	8b04      	ldrh	r4, [r0, #24]
 8010928:	4422      	add	r2, r4
 801092a:	440c      	add	r4, r1
 801092c:	1a59      	subs	r1, r3, r1
 801092e:	83c2      	strh	r2, [r0, #30]
 8010930:	8304      	strh	r4, [r0, #24]
 8010932:	8381      	strh	r1, [r0, #28]
 8010934:	bd30      	pop	{r4, r5, pc}

08010936 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 8010936:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	8a47      	ldrh	r7, [r0, #18]
 801093e:	68c0      	ldr	r0, [r0, #12]
 8010940:	b085      	sub	sp, #20
 8010942:	6803      	ldr	r3, [r0, #0]
 8010944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010946:	4798      	blx	r3
 8010948:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 801094c:	7a63      	ldrb	r3, [r4, #9]
 801094e:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8010952:	3b01      	subs	r3, #1
 8010954:	42b7      	cmp	r7, r6
 8010956:	bfac      	ite	ge
 8010958:	f04f 0900 	movge.w	r9, #0
 801095c:	f04f 0901 	movlt.w	r9, #1
 8010960:	2b05      	cmp	r3, #5
 8010962:	d804      	bhi.n	801096e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 8010964:	e8df f003 	tbb	[pc, r3]
 8010968:	470f0854 	.word	0x470f0854
 801096c:	4c4c      	.short	0x4c4c
 801096e:	2500      	movs	r5, #0
 8010970:	46a9      	mov	r9, r5
 8010972:	462e      	mov	r6, r5
 8010974:	462f      	mov	r7, r5
 8010976:	e00e      	b.n	8010996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8010978:	42b7      	cmp	r7, r6
 801097a:	f04f 0500 	mov.w	r5, #0
 801097e:	bfb4      	ite	lt
 8010980:	2600      	movlt	r6, #0
 8010982:	2601      	movge	r6, #1
 8010984:	e7f6      	b.n	8010974 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8010986:	42b7      	cmp	r7, r6
 8010988:	464d      	mov	r5, r9
 801098a:	f04f 0900 	mov.w	r9, #0
 801098e:	bfb4      	ite	lt
 8010990:	2600      	movlt	r6, #0
 8010992:	2601      	movge	r6, #1
 8010994:	464f      	mov	r7, r9
 8010996:	f04f 0800 	mov.w	r8, #0
 801099a:	f8a4 8016 	strh.w	r8, [r4, #22]
 801099e:	f8a4 8018 	strh.w	r8, [r4, #24]
 80109a2:	f8cd 8004 	str.w	r8, [sp, #4]
 80109a6:	2300      	movs	r3, #0
 80109a8:	9303      	str	r3, [sp, #12]
 80109aa:	8823      	ldrh	r3, [r4, #0]
 80109ac:	2b20      	cmp	r3, #32
 80109ae:	d033      	beq.n	8010a18 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 80109b0:	f242 010b 	movw	r1, #8203	; 0x200b
 80109b4:	1a5a      	subs	r2, r3, r1
 80109b6:	f1d2 0a00 	rsbs	sl, r2, #0
 80109ba:	eb4a 0a02 	adc.w	sl, sl, r2
 80109be:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d008      	beq.n	80109d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80109c6:	428b      	cmp	r3, r1
 80109c8:	9a01      	ldr	r2, [sp, #4]
 80109ca:	bf0e      	itee	eq
 80109cc:	f04f 0a01 	moveq.w	sl, #1
 80109d0:	461a      	movne	r2, r3
 80109d2:	f04f 0a00 	movne.w	sl, #0
 80109d6:	9201      	str	r2, [sp, #4]
 80109d8:	ab03      	add	r3, sp, #12
 80109da:	68e2      	ldr	r2, [r4, #12]
 80109dc:	7a21      	ldrb	r1, [r4, #8]
 80109de:	6860      	ldr	r0, [r4, #4]
 80109e0:	f002 fd5e 	bl	80134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80109e4:	8020      	strh	r0, [r4, #0]
 80109e6:	b9d8      	cbnz	r0, 8010a20 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80109e8:	8ba2      	ldrh	r2, [r4, #28]
 80109ea:	2300      	movs	r3, #0
 80109ec:	4611      	mov	r1, r2
 80109ee:	4620      	mov	r0, r4
 80109f0:	f7ff ff91 	bl	8010916 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80109f4:	e06e      	b.n	8010ad4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80109f6:	2500      	movs	r5, #0
 80109f8:	2701      	movs	r7, #1
 80109fa:	46a9      	mov	r9, r5
 80109fc:	462e      	mov	r6, r5
 80109fe:	e7ca      	b.n	8010996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8010a00:	42b7      	cmp	r7, r6
 8010a02:	f04f 0500 	mov.w	r5, #0
 8010a06:	bfb4      	ite	lt
 8010a08:	2700      	movlt	r7, #0
 8010a0a:	2701      	movge	r7, #1
 8010a0c:	462e      	mov	r6, r5
 8010a0e:	e7c2      	b.n	8010996 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8010a10:	2500      	movs	r5, #0
 8010a12:	2601      	movs	r6, #1
 8010a14:	46a9      	mov	r9, r5
 8010a16:	e7ad      	b.n	8010974 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 8010a18:	9301      	str	r3, [sp, #4]
 8010a1a:	f04f 0a01 	mov.w	sl, #1
 8010a1e:	e7db      	b.n	80109d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 8010a20:	8b63      	ldrh	r3, [r4, #26]
 8010a22:	280a      	cmp	r0, #10
 8010a24:	f103 0301 	add.w	r3, r3, #1
 8010a28:	8363      	strh	r3, [r4, #26]
 8010a2a:	d0dd      	beq.n	80109e8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 8010a2c:	9a03      	ldr	r2, [sp, #12]
 8010a2e:	bb62      	cbnz	r2, 8010a8a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 8010a30:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8010a34:	4298      	cmp	r0, r3
 8010a36:	d003      	beq.n	8010a40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8010a38:	f242 030b 	movw	r3, #8203	; 0x200b
 8010a3c:	4298      	cmp	r0, r3
 8010a3e:	d1b2      	bne.n	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010a40:	8823      	ldrh	r3, [r4, #0]
 8010a42:	8ba1      	ldrh	r1, [r4, #28]
 8010a44:	2b20      	cmp	r3, #32
 8010a46:	d003      	beq.n	8010a50 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8010a48:	f242 000b 	movw	r0, #8203	; 0x200b
 8010a4c:	4283      	cmp	r3, r0
 8010a4e:	d131      	bne.n	8010ab4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8010a50:	f1ba 0f00 	cmp.w	sl, #0
 8010a54:	bf0a      	itet	eq
 8010a56:	4688      	moveq	r8, r1
 8010a58:	4650      	movne	r0, sl
 8010a5a:	2001      	moveq	r0, #1
 8010a5c:	440a      	add	r2, r1
 8010a5e:	8b23      	ldrh	r3, [r4, #24]
 8010a60:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8010a64:	b292      	uxth	r2, r2
 8010a66:	83a2      	strh	r2, [r4, #28]
 8010a68:	4413      	add	r3, r2
 8010a6a:	f1b9 0f00 	cmp.w	r9, #0
 8010a6e:	d102      	bne.n	8010a76 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8010a70:	2d00      	cmp	r5, #0
 8010a72:	d042      	beq.n	8010afa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 8010a74:	b300      	cbz	r0, 8010ab8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 8010a76:	8c21      	ldrh	r1, [r4, #32]
 8010a78:	4419      	add	r1, r3
 8010a7a:	458c      	cmp	ip, r1
 8010a7c:	da37      	bge.n	8010aee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8010a7e:	8ae1      	ldrh	r1, [r4, #22]
 8010a80:	2900      	cmp	r1, #0
 8010a82:	d034      	beq.n	8010aee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8010a84:	4563      	cmp	r3, ip
 8010a86:	dd8e      	ble.n	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010a88:	e01d      	b.n	8010ac6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8010a8a:	8893      	ldrh	r3, [r2, #4]
 8010a8c:	9901      	ldr	r1, [sp, #4]
 8010a8e:	8023      	strh	r3, [r4, #0]
 8010a90:	f892 b00d 	ldrb.w	fp, [r2, #13]
 8010a94:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8010a98:	f40b 7080 	and.w	r0, fp, #256	; 0x100
 8010a9c:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8010aa0:	ea4b 0b00 	orr.w	fp, fp, r0
 8010aa4:	68e0      	ldr	r0, [r4, #12]
 8010aa6:	6803      	ldr	r3, [r0, #0]
 8010aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010aaa:	4798      	blx	r3
 8010aac:	eb0b 0200 	add.w	r2, fp, r0
 8010ab0:	b292      	uxth	r2, r2
 8010ab2:	e7c5      	b.n	8010a40 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 8010ab4:	2000      	movs	r0, #0
 8010ab6:	e7d1      	b.n	8010a5c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8010ab8:	4563      	cmp	r3, ip
 8010aba:	f77f af74 	ble.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010abe:	8ae3      	ldrh	r3, [r4, #22]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f43f af70 	beq.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	8c22      	ldrh	r2, [r4, #32]
 8010aca:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8010ace:	8be3      	ldrh	r3, [r4, #30]
 8010ad0:	4413      	add	r3, r2
 8010ad2:	83e3      	strh	r3, [r4, #30]
 8010ad4:	68e0      	ldr	r0, [r4, #12]
 8010ad6:	6803      	ldr	r3, [r0, #0]
 8010ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ada:	4798      	blx	r3
 8010adc:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8010ae0:	4418      	add	r0, r3
 8010ae2:	8a63      	ldrh	r3, [r4, #18]
 8010ae4:	1a18      	subs	r0, r3, r0
 8010ae6:	8260      	strh	r0, [r4, #18]
 8010ae8:	b005      	add	sp, #20
 8010aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aee:	2300      	movs	r3, #0
 8010af0:	4611      	mov	r1, r2
 8010af2:	4620      	mov	r0, r4
 8010af4:	f7ff ff0f 	bl	8010916 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8010af8:	e755      	b.n	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010afa:	4563      	cmp	r3, ip
 8010afc:	dd14      	ble.n	8010b28 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 8010afe:	b117      	cbz	r7, 8010b06 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 8010b00:	2301      	movs	r3, #1
 8010b02:	460a      	mov	r2, r1
 8010b04:	e772      	b.n	80109ec <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 8010b06:	2e00      	cmp	r6, #0
 8010b08:	f43f af4d 	beq.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010b0c:	2800      	cmp	r0, #0
 8010b0e:	f47f af4a 	bne.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010b12:	f1ba 0f00 	cmp.w	sl, #0
 8010b16:	d002      	beq.n	8010b1e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 8010b18:	2301      	movs	r3, #1
 8010b1a:	4642      	mov	r2, r8
 8010b1c:	e767      	b.n	80109ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 8010b1e:	8ae3      	ldrh	r3, [r4, #22]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	f43f af40 	beq.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010b26:	e7d5      	b.n	8010ad4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 8010b28:	2800      	cmp	r0, #0
 8010b2a:	f47f af3c 	bne.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010b2e:	f1ba 0f00 	cmp.w	sl, #0
 8010b32:	f43f af38 	beq.w	80109a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8010b36:	2301      	movs	r3, #1
 8010b38:	4642      	mov	r2, r8
 8010b3a:	e7da      	b.n	8010af2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

08010b3c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8010b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b3e:	4605      	mov	r5, r0
 8010b40:	b08f      	sub	sp, #60	; 0x3c
 8010b42:	4617      	mov	r7, r2
 8010b44:	461c      	mov	r4, r3
 8010b46:	460e      	mov	r6, r1
 8010b48:	b1d1      	cbz	r1, 8010b80 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b50:	4798      	blx	r3
 8010b52:	4240      	negs	r0, r0
 8010b54:	9603      	str	r6, [sp, #12]
 8010b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b5a:	b200      	sxth	r0, r0
 8010b5c:	9700      	str	r7, [sp, #0]
 8010b5e:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 8010b62:	4629      	mov	r1, r5
 8010b64:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8010b68:	2401      	movs	r4, #1
 8010b6a:	a805      	add	r0, sp, #20
 8010b6c:	f7ff fcbe 	bl	80104ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8010b70:	a805      	add	r0, sp, #20
 8010b72:	f7ff fee0 	bl	8010936 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8010b76:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8010b7a:	b163      	cbz	r3, 8010b96 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8010b7c:	3401      	adds	r4, #1
 8010b7e:	e7f7      	b.n	8010b70 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8010b80:	2401      	movs	r4, #1
 8010b82:	f002 fd59 	bl	8013638 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010b86:	280a      	cmp	r0, #10
 8010b88:	4628      	mov	r0, r5
 8010b8a:	bf08      	it	eq
 8010b8c:	3401      	addeq	r4, #1
 8010b8e:	f002 fd53 	bl	8013638 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010b92:	2800      	cmp	r0, #0
 8010b94:	d1f7      	bne.n	8010b86 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 8010b96:	b2a0      	uxth	r0, r4
 8010b98:	b00f      	add	sp, #60	; 0x3c
 8010b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b9c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8010b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba0:	b0e3      	sub	sp, #396	; 0x18c
 8010ba2:	461c      	mov	r4, r3
 8010ba4:	4683      	mov	fp, r0
 8010ba6:	4688      	mov	r8, r1
 8010ba8:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f000 8112 	beq.w	8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010bb0:	6823      	ldr	r3, [r4, #0]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	f000 810e 	beq.w	8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010bb8:	7ba3      	ldrb	r3, [r4, #14]
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f000 810a 	beq.w	8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010bc0:	ad0a      	add	r5, sp, #40	; 0x28
 8010bc2:	6810      	ldr	r0, [r2, #0]
 8010bc4:	6851      	ldr	r1, [r2, #4]
 8010bc6:	462b      	mov	r3, r5
 8010bc8:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8010bcc:	c303      	stmia	r3!, {r0, r1}
 8010bce:	2100      	movs	r1, #0
 8010bd0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8010bd4:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8010bd8:	4628      	mov	r0, r5
 8010bda:	910c      	str	r1, [sp, #48]	; 0x30
 8010bdc:	a90c      	add	r1, sp, #48	; 0x30
 8010bde:	79a2      	ldrb	r2, [r4, #6]
 8010be0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010be4:	f7ff fd01 	bl	80105ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010be8:	a90c      	add	r1, sp, #48	; 0x30
 8010bea:	79a2      	ldrb	r2, [r4, #6]
 8010bec:	4608      	mov	r0, r1
 8010bee:	f7ff fcfc 	bl	80105ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8010bf2:	a817      	add	r0, sp, #92	; 0x5c
 8010bf4:	f002 f8f4 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 8010bf8:	6820      	ldr	r0, [r4, #0]
 8010bfa:	6803      	ldr	r3, [r0, #0]
 8010bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bfe:	4798      	blx	r3
 8010c00:	4606      	mov	r6, r0
 8010c02:	6820      	ldr	r0, [r4, #0]
 8010c04:	6803      	ldr	r3, [r0, #0]
 8010c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c08:	4798      	blx	r3
 8010c0a:	4633      	mov	r3, r6
 8010c0c:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8010c0e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8010c10:	9000      	str	r0, [sp, #0]
 8010c12:	a817      	add	r0, sp, #92	; 0x5c
 8010c14:	f002 f93f 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010c18:	6820      	ldr	r0, [r4, #0]
 8010c1a:	f894 a004 	ldrb.w	sl, [r4, #4]
 8010c1e:	6803      	ldr	r3, [r0, #0]
 8010c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c22:	4798      	blx	r3
 8010c24:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 8010c28:	6823      	ldr	r3, [r4, #0]
 8010c2a:	4607      	mov	r7, r0
 8010c2c:	4406      	add	r6, r0
 8010c2e:	a830      	add	r0, sp, #192	; 0xc0
 8010c30:	f893 9009 	ldrb.w	r9, [r3, #9]
 8010c34:	f002 f8d4 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 8010c38:	7c23      	ldrb	r3, [r4, #16]
 8010c3a:	b17b      	cbz	r3, 8010c5c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 8010c3c:	6820      	ldr	r0, [r4, #0]
 8010c3e:	6803      	ldr	r3, [r0, #0]
 8010c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c42:	4798      	blx	r3
 8010c44:	9009      	str	r0, [sp, #36]	; 0x24
 8010c46:	6820      	ldr	r0, [r4, #0]
 8010c48:	6802      	ldr	r2, [r0, #0]
 8010c4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8010c4c:	4790      	blx	r2
 8010c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c50:	9000      	str	r0, [sp, #0]
 8010c52:	a830      	add	r0, sp, #192	; 0xc0
 8010c54:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
 8010c56:	996c      	ldr	r1, [sp, #432]	; 0x1b0
 8010c58:	f002 f91d 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010c5c:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8010c60:	a80e      	add	r0, sp, #56	; 0x38
 8010c62:	7be2      	ldrb	r2, [r4, #15]
 8010c64:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8010c68:	1a8a      	subs	r2, r1, r2
 8010c6a:	7c21      	ldrb	r1, [r4, #16]
 8010c6c:	9103      	str	r1, [sp, #12]
 8010c6e:	b292      	uxth	r2, r2
 8010c70:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8010c74:	9102      	str	r1, [sp, #8]
 8010c76:	6821      	ldr	r1, [r4, #0]
 8010c78:	9101      	str	r1, [sp, #4]
 8010c7a:	7961      	ldrb	r1, [r4, #5]
 8010c7c:	9100      	str	r1, [sp, #0]
 8010c7e:	a930      	add	r1, sp, #192	; 0xc0
 8010c80:	f7ff fc34 	bl	80104ec <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8010c84:	2e00      	cmp	r6, #0
 8010c86:	dc5b      	bgt.n	8010d40 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8010c88:	af17      	add	r7, sp, #92	; 0x5c
 8010c8a:	f04f 0900 	mov.w	r9, #0
 8010c8e:	7c23      	ldrb	r3, [r4, #16]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 80b1 	beq.w	8010df8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 8010c96:	a80e      	add	r0, sp, #56	; 0x38
 8010c98:	f7ff fe4d 	bl	8010936 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8010c9c:	f1ba 0f00 	cmp.w	sl, #0
 8010ca0:	f000 80a5 	beq.w	8010dee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8010ca4:	7c23      	ldrb	r3, [r4, #16]
 8010ca6:	2264      	movs	r2, #100	; 0x64
 8010ca8:	4639      	mov	r1, r7
 8010caa:	a849      	add	r0, sp, #292	; 0x124
 8010cac:	9309      	str	r3, [sp, #36]	; 0x24
 8010cae:	f00c ff0a 	bl	801dac6 <memcpy>
 8010cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	f000 80a7 	beq.w	8010e08 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8010cba:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8010cbe:	7922      	ldrb	r2, [r4, #4]
 8010cc0:	2a01      	cmp	r2, #1
 8010cc2:	f040 808a 	bne.w	8010dda <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 8010cc6:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
 8010cca:	1ac0      	subs	r0, r0, r3
 8010ccc:	2302      	movs	r3, #2
 8010cce:	fb90 f0f3 	sdiv	r0, r0, r3
 8010cd2:	b200      	sxth	r0, r0
 8010cd4:	7c23      	ldrb	r3, [r4, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 808b 	beq.w	8010df2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8010cdc:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
 8010ce0:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
 8010ce4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010ce8:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8010cec:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	4410      	add	r0, r2
 8010cf4:	4642      	mov	r2, r8
 8010cf6:	b200      	sxth	r0, r0
 8010cf8:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8010cfc:	9000      	str	r0, [sp, #0]
 8010cfe:	4658      	mov	r0, fp
 8010d00:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8010d04:	f7ff fca2 	bl	801064c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 8010d08:	2800      	cmp	r0, #0
 8010d0a:	d163      	bne.n	8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010d0c:	b2b2      	uxth	r2, r6
 8010d0e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8010d12:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8010d16:	4413      	add	r3, r2
 8010d18:	1a8a      	subs	r2, r1, r2
 8010d1a:	b21b      	sxth	r3, r3
 8010d1c:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8010d20:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
 8010d24:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010d28:	2a00      	cmp	r2, #0
 8010d2a:	d153      	bne.n	8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010d2c:	6822      	ldr	r2, [r4, #0]
 8010d2e:	8869      	ldrh	r1, [r5, #2]
 8010d30:	7a12      	ldrb	r2, [r2, #8]
 8010d32:	1a9b      	subs	r3, r3, r2
 8010d34:	88ea      	ldrh	r2, [r5, #6]
 8010d36:	440a      	add	r2, r1
 8010d38:	b212      	sxth	r2, r2
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	dda7      	ble.n	8010c8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 8010d3e:	e049      	b.n	8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010d40:	7c23      	ldrb	r3, [r4, #16]
 8010d42:	444f      	add	r7, r9
 8010d44:	b1c3      	cbz	r3, 8010d78 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 8010d46:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8010d4a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010d4e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010d52:	443b      	add	r3, r7
 8010d54:	4293      	cmp	r3, r2
 8010d56:	da97      	bge.n	8010c88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8010d58:	a80e      	add	r0, sp, #56	; 0x38
 8010d5a:	f7ff fdec 	bl	8010936 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8010d5e:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 8010d62:	3b01      	subs	r3, #1
 8010d64:	b29b      	uxth	r3, r3
 8010d66:	454b      	cmp	r3, r9
 8010d68:	9309      	str	r3, [sp, #36]	; 0x24
 8010d6a:	d021      	beq.n	8010db0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8010d6c:	7961      	ldrb	r1, [r4, #5]
 8010d6e:	a817      	add	r0, sp, #92	; 0x5c
 8010d70:	f7fa fd42 	bl	800b7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8010d74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d76:	e7f4      	b.n	8010d62 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8010d78:	fa1f f986 	uxth.w	r9, r6
 8010d7c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8010d80:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010d84:	443b      	add	r3, r7
 8010d86:	4293      	cmp	r3, r2
 8010d88:	f6bf af7e 	bge.w	8010c88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8010d8c:	a817      	add	r0, sp, #92	; 0x5c
 8010d8e:	f002 fc53 	bl	8013638 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010d92:	b1f8      	cbz	r0, 8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010d94:	280a      	cmp	r0, #10
 8010d96:	d1f1      	bne.n	8010d7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8010d98:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8010d9c:	444b      	add	r3, r9
 8010d9e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8010da2:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8010da6:	eba3 0309 	sub.w	r3, r3, r9
 8010daa:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010dae:	e7e5      	b.n	8010d7c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8010db0:	b2b3      	uxth	r3, r6
 8010db2:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8010db6:	441a      	add	r2, r3
 8010db8:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8010dbc:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
 8010dc0:	1ad3      	subs	r3, r2, r3
 8010dc2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010dc6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010dca:	b11b      	cbz	r3, 8010dd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8010dcc:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d0ba      	beq.n	8010d4a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 8010dd4:	b063      	add	sp, #396	; 0x18c
 8010dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dda:	2a02      	cmp	r2, #2
 8010ddc:	d105      	bne.n	8010dea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8010dde:	7be2      	ldrb	r2, [r4, #15]
 8010de0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8010de4:	1a80      	subs	r0, r0, r2
 8010de6:	1ac0      	subs	r0, r0, r3
 8010de8:	e773      	b.n	8010cd2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 8010dea:	2000      	movs	r0, #0
 8010dec:	e772      	b.n	8010cd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8010dee:	7be0      	ldrb	r0, [r4, #15]
 8010df0:	e770      	b.n	8010cd4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 8010df2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010df6:	e773      	b.n	8010ce0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 8010df8:	f1ba 0f00 	cmp.w	sl, #0
 8010dfc:	d0f7      	beq.n	8010dee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8010dfe:	2264      	movs	r2, #100	; 0x64
 8010e00:	4639      	mov	r1, r7
 8010e02:	a849      	add	r0, sp, #292	; 0x124
 8010e04:	f00c fe5f 	bl	801dac6 <memcpy>
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010e0e:	6821      	ldr	r1, [r4, #0]
 8010e10:	a849      	add	r0, sp, #292	; 0x124
 8010e12:	f7ff fbae 	bl	8010572 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8010e16:	b203      	sxth	r3, r0
 8010e18:	e751      	b.n	8010cbe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

08010e1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8010e1a:	2b03      	cmp	r3, #3
 8010e1c:	d818      	bhi.n	8010e50 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8010e1e:	e8df f003 	tbb	[pc, r3]
 8010e22:	0602      	.short	0x0602
 8010e24:	130d      	.short	0x130d
 8010e26:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010e2a:	1850      	adds	r0, r2, r1
 8010e2c:	4770      	bx	lr
 8010e2e:	8803      	ldrh	r3, [r0, #0]
 8010e30:	8880      	ldrh	r0, [r0, #4]
 8010e32:	4418      	add	r0, r3
 8010e34:	b200      	sxth	r0, r0
 8010e36:	1a80      	subs	r0, r0, r2
 8010e38:	3801      	subs	r0, #1
 8010e3a:	4770      	bx	lr
 8010e3c:	8803      	ldrh	r3, [r0, #0]
 8010e3e:	8880      	ldrh	r0, [r0, #4]
 8010e40:	4418      	add	r0, r3
 8010e42:	b200      	sxth	r0, r0
 8010e44:	1a40      	subs	r0, r0, r1
 8010e46:	e7f7      	b.n	8010e38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8010e48:	f9b0 0000 	ldrsh.w	r0, [r0]
 8010e4c:	4410      	add	r0, r2
 8010e4e:	4770      	bx	lr
 8010e50:	2000      	movs	r0, #0
 8010e52:	4770      	bx	lr

08010e54 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8010e54:	2b03      	cmp	r3, #3
 8010e56:	d817      	bhi.n	8010e88 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8010e58:	e8df f003 	tbb	[pc, r3]
 8010e5c:	10090602 	.word	0x10090602
 8010e60:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8010e64:	1850      	adds	r0, r2, r1
 8010e66:	4770      	bx	lr
 8010e68:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010e6c:	e7fa      	b.n	8010e64 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8010e6e:	8843      	ldrh	r3, [r0, #2]
 8010e70:	88c0      	ldrh	r0, [r0, #6]
 8010e72:	4418      	add	r0, r3
 8010e74:	b200      	sxth	r0, r0
 8010e76:	1a80      	subs	r0, r0, r2
 8010e78:	3801      	subs	r0, #1
 8010e7a:	4770      	bx	lr
 8010e7c:	8843      	ldrh	r3, [r0, #2]
 8010e7e:	88c0      	ldrh	r0, [r0, #6]
 8010e80:	4418      	add	r0, r3
 8010e82:	b200      	sxth	r0, r0
 8010e84:	1a40      	subs	r0, r0, r1
 8010e86:	e7f7      	b.n	8010e78 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	4770      	bx	lr

08010e8c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8010e8c:	4b01      	ldr	r3, [pc, #4]	; (8010e94 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8010e8e:	2200      	movs	r2, #0
 8010e90:	601a      	str	r2, [r3, #0]
 8010e92:	4770      	bx	lr
 8010e94:	2401aa44 	.word	0x2401aa44

08010e98 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8010e98:	4603      	mov	r3, r0
 8010e9a:	b1c8      	cbz	r0, 8010ed0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8010e9c:	0c02      	lsrs	r2, r0, #16
 8010e9e:	0412      	lsls	r2, r2, #16
 8010ea0:	b9a2      	cbnz	r2, 8010ecc <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8010ea2:	0403      	lsls	r3, r0, #16
 8010ea4:	2010      	movs	r0, #16
 8010ea6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010eaa:	bf04      	itt	eq
 8010eac:	021b      	lsleq	r3, r3, #8
 8010eae:	3008      	addeq	r0, #8
 8010eb0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010eb4:	bf04      	itt	eq
 8010eb6:	011b      	lsleq	r3, r3, #4
 8010eb8:	3004      	addeq	r0, #4
 8010eba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010ebe:	bf04      	itt	eq
 8010ec0:	009b      	lsleq	r3, r3, #2
 8010ec2:	3002      	addeq	r0, #2
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	db04      	blt.n	8010ed2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8010ec8:	3001      	adds	r0, #1
 8010eca:	4770      	bx	lr
 8010ecc:	2000      	movs	r0, #0
 8010ece:	e7ea      	b.n	8010ea6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8010ed0:	2020      	movs	r0, #32
 8010ed2:	4770      	bx	lr

08010ed4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8010ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ed8:	b087      	sub	sp, #28
 8010eda:	460d      	mov	r5, r1
 8010edc:	4616      	mov	r6, r2
 8010ede:	4698      	mov	r8, r3
 8010ee0:	4601      	mov	r1, r0
 8010ee2:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8010ee6:	b120      	cbz	r0, 8010ef2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8010ee8:	b11a      	cbz	r2, 8010ef2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8010eea:	2d1f      	cmp	r5, #31
 8010eec:	d801      	bhi.n	8010ef2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8010eee:	2b1f      	cmp	r3, #31
 8010ef0:	d904      	bls.n	8010efc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	6038      	str	r0, [r7, #0]
 8010ef6:	b007      	add	sp, #28
 8010ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010efc:	b97d      	cbnz	r5, 8010f1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8010efe:	b143      	cbz	r3, 8010f12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8010f00:	4602      	mov	r2, r0
 8010f02:	462b      	mov	r3, r5
 8010f04:	4641      	mov	r1, r8
 8010f06:	4630      	mov	r0, r6
 8010f08:	e9cd 4700 	strd	r4, r7, [sp]
 8010f0c:	f7ff ffe2 	bl	8010ed4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010f10:	e7f1      	b.n	8010ef6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8010f12:	f04f 33ff 	mov.w	r3, #4294967295
 8010f16:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8010f1a:	603b      	str	r3, [r7, #0]
 8010f1c:	e7eb      	b.n	8010ef6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8010f1e:	fa32 fa05 	lsrs.w	sl, r2, r5
 8010f22:	d106      	bne.n	8010f32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8010f24:	4346      	muls	r6, r0
 8010f26:	fbb6 f0f4 	udiv	r0, r6, r4
 8010f2a:	fb04 6610 	mls	r6, r4, r0, r6
 8010f2e:	603e      	str	r6, [r7, #0]
 8010f30:	e7e1      	b.n	8010ef6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8010f32:	2201      	movs	r2, #1
 8010f34:	fa00 fb05 	lsl.w	fp, r0, r5
 8010f38:	40aa      	lsls	r2, r5
 8010f3a:	fbbb f9f4 	udiv	r9, fp, r4
 8010f3e:	3a01      	subs	r2, #1
 8010f40:	fb0a f309 	mul.w	r3, sl, r9
 8010f44:	fb04 b919 	mls	r9, r4, r9, fp
 8010f48:	4016      	ands	r6, r2
 8010f4a:	9303      	str	r3, [sp, #12]
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	f7ff ffa3 	bl	8010e98 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010f52:	462b      	mov	r3, r5
 8010f54:	460a      	mov	r2, r1
 8010f56:	4601      	mov	r1, r0
 8010f58:	4630      	mov	r0, r6
 8010f5a:	e9cd 4700 	strd	r4, r7, [sp]
 8010f5e:	f7ff ffb9 	bl	8010ed4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010f62:	4606      	mov	r6, r0
 8010f64:	4648      	mov	r0, r9
 8010f66:	eb05 0108 	add.w	r1, r5, r8
 8010f6a:	f7ff ff95 	bl	8010e98 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010f6e:	ab05      	add	r3, sp, #20
 8010f70:	464a      	mov	r2, r9
 8010f72:	e9cd 4300 	strd	r4, r3, [sp]
 8010f76:	4603      	mov	r3, r0
 8010f78:	4650      	mov	r0, sl
 8010f7a:	f7ff ffab 	bl	8010ed4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010f7e:	6839      	ldr	r1, [r7, #0]
 8010f80:	9a05      	ldr	r2, [sp, #20]
 8010f82:	9b03      	ldr	r3, [sp, #12]
 8010f84:	4411      	add	r1, r2
 8010f86:	fbb1 f2f4 	udiv	r2, r1, r4
 8010f8a:	18d3      	adds	r3, r2, r3
 8010f8c:	fb04 1412 	mls	r4, r4, r2, r1
 8010f90:	441e      	add	r6, r3
 8010f92:	603c      	str	r4, [r7, #0]
 8010f94:	4430      	add	r0, r6
 8010f96:	e7ae      	b.n	8010ef6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08010f98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8010f98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010f9c:	b085      	sub	sp, #20
 8010f9e:	f1b0 0900 	subs.w	r9, r0, #0
 8010fa2:	461d      	mov	r5, r3
 8010fa4:	4617      	mov	r7, r2
 8010fa6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8010fa8:	bfbb      	ittet	lt
 8010faa:	f1c9 0900 	rsblt	r9, r9, #0
 8010fae:	f04f 36ff 	movlt.w	r6, #4294967295
 8010fb2:	2601      	movge	r6, #1
 8010fb4:	6823      	ldrlt	r3, [r4, #0]
 8010fb6:	bfbc      	itt	lt
 8010fb8:	425b      	neglt	r3, r3
 8010fba:	6023      	strlt	r3, [r4, #0]
 8010fbc:	2a00      	cmp	r2, #0
 8010fbe:	da04      	bge.n	8010fca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8010fc0:	6823      	ldr	r3, [r4, #0]
 8010fc2:	4257      	negs	r7, r2
 8010fc4:	4276      	negs	r6, r6
 8010fc6:	425b      	negs	r3, r3
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	2d00      	cmp	r5, #0
 8010fcc:	4638      	mov	r0, r7
 8010fce:	bfba      	itte	lt
 8010fd0:	426d      	neglt	r5, r5
 8010fd2:	f04f 38ff 	movlt.w	r8, #4294967295
 8010fd6:	f04f 0801 	movge.w	r8, #1
 8010fda:	f7ff ff5d 	bl	8010e98 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8010fde:	ab03      	add	r3, sp, #12
 8010fe0:	463a      	mov	r2, r7
 8010fe2:	e9cd 5300 	strd	r5, r3, [sp]
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	4648      	mov	r0, r9
 8010fea:	f7ff ff73 	bl	8010ed4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	9a03      	ldr	r2, [sp, #12]
 8010ff2:	4546      	cmp	r6, r8
 8010ff4:	441a      	add	r2, r3
 8010ff6:	fb92 f3f5 	sdiv	r3, r2, r5
 8010ffa:	4418      	add	r0, r3
 8010ffc:	fb05 2313 	mls	r3, r5, r3, r2
 8011000:	bf18      	it	ne
 8011002:	4240      	negne	r0, r0
 8011004:	1c72      	adds	r2, r6, #1
 8011006:	6023      	str	r3, [r4, #0]
 8011008:	d105      	bne.n	8011016 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801100a:	2b00      	cmp	r3, #0
 801100c:	f1c3 0200 	rsb	r2, r3, #0
 8011010:	db0b      	blt.n	801102a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8011012:	6022      	str	r2, [r4, #0]
 8011014:	e006      	b.n	8011024 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011016:	2e01      	cmp	r6, #1
 8011018:	d104      	bne.n	8011024 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801101a:	2b00      	cmp	r3, #0
 801101c:	da02      	bge.n	8011024 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801101e:	442b      	add	r3, r5
 8011020:	3801      	subs	r0, #1
 8011022:	6023      	str	r3, [r4, #0]
 8011024:	b005      	add	sp, #20
 8011026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801102a:	3801      	subs	r0, #1
 801102c:	1b52      	subs	r2, r2, r5
 801102e:	e7f0      	b.n	8011012 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08011030 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8011030:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011034:	4c1c      	ldr	r4, [pc, #112]	; (80110a8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8011036:	4605      	mov	r5, r0
 8011038:	6807      	ldr	r7, [r0, #0]
 801103a:	69a3      	ldr	r3, [r4, #24]
 801103c:	b92b      	cbnz	r3, 801104a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801103e:	6840      	ldr	r0, [r0, #4]
 8011040:	e9c5 7000 	strd	r7, r0, [r5]
 8011044:	b004      	add	sp, #16
 8011046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801104a:	f04f 0802 	mov.w	r8, #2
 801104e:	68a2      	ldr	r2, [r4, #8]
 8011050:	ae04      	add	r6, sp, #16
 8011052:	6820      	ldr	r0, [r4, #0]
 8011054:	fb93 f1f8 	sdiv	r1, r3, r8
 8011058:	440a      	add	r2, r1
 801105a:	69e1      	ldr	r1, [r4, #28]
 801105c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011060:	463a      	mov	r2, r7
 8011062:	9600      	str	r6, [sp, #0]
 8011064:	f7ff ff98 	bl	8010f98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011068:	69a3      	ldr	r3, [r4, #24]
 801106a:	4607      	mov	r7, r0
 801106c:	686a      	ldr	r2, [r5, #4]
 801106e:	6a21      	ldr	r1, [r4, #32]
 8011070:	9600      	str	r6, [sp, #0]
 8011072:	6860      	ldr	r0, [r4, #4]
 8011074:	f7ff ff90 	bl	8010f98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011078:	69a3      	ldr	r3, [r4, #24]
 801107a:	6962      	ldr	r2, [r4, #20]
 801107c:	4407      	add	r7, r0
 801107e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011080:	9600      	str	r6, [sp, #0]
 8011082:	68e0      	ldr	r0, [r4, #12]
 8011084:	fb93 f8f8 	sdiv	r8, r3, r8
 8011088:	4442      	add	r2, r8
 801108a:	9203      	str	r2, [sp, #12]
 801108c:	682a      	ldr	r2, [r5, #0]
 801108e:	f7ff ff83 	bl	8010f98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011092:	4680      	mov	r8, r0
 8011094:	9600      	str	r6, [sp, #0]
 8011096:	69a3      	ldr	r3, [r4, #24]
 8011098:	686a      	ldr	r2, [r5, #4]
 801109a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801109c:	6920      	ldr	r0, [r4, #16]
 801109e:	f7ff ff7b 	bl	8010f98 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80110a2:	4440      	add	r0, r8
 80110a4:	e7cc      	b.n	8011040 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80110a6:	bf00      	nop
 80110a8:	2401aa48 	.word	0x2401aa48

080110ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80110ac:	4b07      	ldr	r3, [pc, #28]	; (80110cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d109      	bne.n	80110c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80110b4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80110b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80110bc:	8003      	strh	r3, [r0, #0]
 80110be:	4b04      	ldr	r3, [pc, #16]	; (80110d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	3b01      	subs	r3, #1
 80110c4:	1a9b      	subs	r3, r3, r2
 80110c6:	800b      	strh	r3, [r1, #0]
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	2401aa34 	.word	0x2401aa34
 80110d0:	2401aa30 	.word	0x2401aa30

080110d4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80110d4:	4b07      	ldr	r3, [pc, #28]	; (80110f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80110d6:	b510      	push	{r4, lr}
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d108      	bne.n	80110f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80110de:	4b06      	ldr	r3, [pc, #24]	; (80110f8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80110e0:	880c      	ldrh	r4, [r1, #0]
 80110e2:	881b      	ldrh	r3, [r3, #0]
 80110e4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80110e8:	3b01      	subs	r3, #1
 80110ea:	1b1b      	subs	r3, r3, r4
 80110ec:	8003      	strh	r3, [r0, #0]
 80110ee:	800a      	strh	r2, [r1, #0]
 80110f0:	bd10      	pop	{r4, pc}
 80110f2:	bf00      	nop
 80110f4:	2401aa34 	.word	0x2401aa34
 80110f8:	2401aa30 	.word	0x2401aa30

080110fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80110fc:	4b0a      	ldr	r3, [pc, #40]	; (8011128 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80110fe:	b510      	push	{r4, lr}
 8011100:	781b      	ldrb	r3, [r3, #0]
 8011102:	2b01      	cmp	r3, #1
 8011104:	d10e      	bne.n	8011124 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011106:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801110a:	8843      	ldrh	r3, [r0, #2]
 801110c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011110:	18ca      	adds	r2, r1, r3
 8011112:	4b06      	ldr	r3, [pc, #24]	; (801112c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011114:	8044      	strh	r4, [r0, #2]
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	1a9b      	subs	r3, r3, r2
 801111a:	8003      	strh	r3, [r0, #0]
 801111c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011120:	8081      	strh	r1, [r0, #4]
 8011122:	80c3      	strh	r3, [r0, #6]
 8011124:	bd10      	pop	{r4, pc}
 8011126:	bf00      	nop
 8011128:	2401aa34 	.word	0x2401aa34
 801112c:	2401aa30 	.word	0x2401aa30

08011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8011130:	4b08      	ldr	r3, [pc, #32]	; (8011154 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d10c      	bne.n	8011152 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011138:	8803      	ldrh	r3, [r0, #0]
 801113a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801113e:	8842      	ldrh	r2, [r0, #2]
 8011140:	8002      	strh	r2, [r0, #0]
 8011142:	185a      	adds	r2, r3, r1
 8011144:	4b04      	ldr	r3, [pc, #16]	; (8011158 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011146:	881b      	ldrh	r3, [r3, #0]
 8011148:	1a9b      	subs	r3, r3, r2
 801114a:	8043      	strh	r3, [r0, #2]
 801114c:	88c3      	ldrh	r3, [r0, #6]
 801114e:	80c1      	strh	r1, [r0, #6]
 8011150:	8083      	strh	r3, [r0, #4]
 8011152:	4770      	bx	lr
 8011154:	2401aa34 	.word	0x2401aa34
 8011158:	2401aa30 	.word	0x2401aa30

0801115c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801115c:	4b07      	ldr	r3, [pc, #28]	; (801117c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801115e:	b510      	push	{r4, lr}
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	2b01      	cmp	r3, #1
 8011164:	d108      	bne.n	8011178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011166:	f9b1 3000 	ldrsh.w	r3, [r1]
 801116a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801116e:	8003      	strh	r3, [r0, #0]
 8011170:	8893      	ldrh	r3, [r2, #4]
 8011172:	3b01      	subs	r3, #1
 8011174:	1b1b      	subs	r3, r3, r4
 8011176:	800b      	strh	r3, [r1, #0]
 8011178:	bd10      	pop	{r4, pc}
 801117a:	bf00      	nop
 801117c:	2401aa34 	.word	0x2401aa34

08011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8011180:	4b0a      	ldr	r3, [pc, #40]	; (80111ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8011182:	460a      	mov	r2, r1
 8011184:	b510      	push	{r4, lr}
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d10d      	bne.n	80111a8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801118c:	8881      	ldrh	r1, [r0, #4]
 801118e:	8803      	ldrh	r3, [r0, #0]
 8011190:	440b      	add	r3, r1
 8011192:	4601      	mov	r1, r0
 8011194:	3b01      	subs	r3, #1
 8011196:	f821 3b02 	strh.w	r3, [r1], #2
 801119a:	f7ff ffdf 	bl	801115c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801119e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80111a2:	88c2      	ldrh	r2, [r0, #6]
 80111a4:	80c3      	strh	r3, [r0, #6]
 80111a6:	8082      	strh	r2, [r0, #4]
 80111a8:	bd10      	pop	{r4, pc}
 80111aa:	bf00      	nop
 80111ac:	2401aa34 	.word	0x2401aa34

080111b0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80111b0:	4b06      	ldr	r3, [pc, #24]	; (80111cc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80111b2:	2100      	movs	r1, #0
 80111b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80111b8:	4b05      	ldr	r3, [pc, #20]	; (80111d0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80111ba:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 80111be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80111c2:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 80111c6:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 80111ca:	4770      	bx	lr
 80111cc:	2401aa30 	.word	0x2401aa30
 80111d0:	2401aa32 	.word	0x2401aa32

080111d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80111d4:	4b03      	ldr	r3, [pc, #12]	; (80111e4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80111d6:	6818      	ldr	r0, [r3, #0]
 80111d8:	b110      	cbz	r0, 80111e0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80111da:	6803      	ldr	r3, [r0, #0]
 80111dc:	699b      	ldr	r3, [r3, #24]
 80111de:	4718      	bx	r3
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop
 80111e4:	2401aa78 	.word	0x2401aa78

080111e8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80111e8:	4770      	bx	lr
	...

080111ec <_ZN8touchgfx11Application4drawEv>:
 80111ec:	4b09      	ldr	r3, [pc, #36]	; (8011214 <_ZN8touchgfx11Application4drawEv+0x28>)
 80111ee:	b507      	push	{r0, r1, r2, lr}
 80111f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80111f4:	2100      	movs	r1, #0
 80111f6:	4b08      	ldr	r3, [pc, #32]	; (8011218 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80111f8:	9100      	str	r1, [sp, #0]
 80111fa:	4669      	mov	r1, sp
 80111fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011200:	f8ad 2004 	strh.w	r2, [sp, #4]
 8011204:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011208:	6803      	ldr	r3, [r0, #0]
 801120a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801120c:	4798      	blx	r3
 801120e:	b003      	add	sp, #12
 8011210:	f85d fb04 	ldr.w	pc, [sp], #4
 8011214:	2401aa30 	.word	0x2401aa30
 8011218:	2401aa32 	.word	0x2401aa32

0801121c <_ZN8touchgfx11Application10invalidateEv>:
 801121c:	4b09      	ldr	r3, [pc, #36]	; (8011244 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801121e:	b082      	sub	sp, #8
 8011220:	2100      	movs	r1, #0
 8011222:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011226:	4b08      	ldr	r3, [pc, #32]	; (8011248 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8011228:	f8ad 2004 	strh.w	r2, [sp, #4]
 801122c:	aa02      	add	r2, sp, #8
 801122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011232:	9100      	str	r1, [sp, #0]
 8011234:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011238:	6803      	ldr	r3, [r0, #0]
 801123a:	e912 0006 	ldmdb	r2, {r1, r2}
 801123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011240:	b002      	add	sp, #8
 8011242:	4718      	bx	r3
 8011244:	2401aa30 	.word	0x2401aa30
 8011248:	2401aa32 	.word	0x2401aa32

0801124c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801124c:	4b03      	ldr	r3, [pc, #12]	; (801125c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801124e:	6818      	ldr	r0, [r3, #0]
 8011250:	b110      	cbz	r0, 8011258 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8011252:	6803      	ldr	r3, [r0, #0]
 8011254:	69db      	ldr	r3, [r3, #28]
 8011256:	4718      	bx	r3
 8011258:	4770      	bx	lr
 801125a:	bf00      	nop
 801125c:	2401aa78 	.word	0x2401aa78

08011260 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8011260:	4b03      	ldr	r3, [pc, #12]	; (8011270 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8011262:	6818      	ldr	r0, [r3, #0]
 8011264:	b110      	cbz	r0, 801126c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8011266:	6803      	ldr	r3, [r0, #0]
 8011268:	6a1b      	ldr	r3, [r3, #32]
 801126a:	4718      	bx	r3
 801126c:	4770      	bx	lr
 801126e:	bf00      	nop
 8011270:	2401aa78 	.word	0x2401aa78

08011274 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8011274:	2300      	movs	r3, #0
 8011276:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801127a:	4770      	bx	lr

0801127c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801127c:	4b03      	ldr	r3, [pc, #12]	; (801128c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801127e:	6818      	ldr	r0, [r3, #0]
 8011280:	b110      	cbz	r0, 8011288 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8011282:	6803      	ldr	r3, [r0, #0]
 8011284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011286:	4718      	bx	r3
 8011288:	4770      	bx	lr
 801128a:	bf00      	nop
 801128c:	2401aa78 	.word	0x2401aa78

08011290 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8011290:	b510      	push	{r4, lr}
 8011292:	f9b1 4000 	ldrsh.w	r4, [r1]
 8011296:	888a      	ldrh	r2, [r1, #4]
 8011298:	f9b0 3000 	ldrsh.w	r3, [r0]
 801129c:	4422      	add	r2, r4
 801129e:	b212      	sxth	r2, r2
 80112a0:	4293      	cmp	r3, r2
 80112a2:	da15      	bge.n	80112d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80112a4:	8882      	ldrh	r2, [r0, #4]
 80112a6:	4413      	add	r3, r2
 80112a8:	b21b      	sxth	r3, r3
 80112aa:	429c      	cmp	r4, r3
 80112ac:	da10      	bge.n	80112d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80112ae:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80112b2:	88c9      	ldrh	r1, [r1, #6]
 80112b4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80112b8:	4419      	add	r1, r3
 80112ba:	b209      	sxth	r1, r1
 80112bc:	428a      	cmp	r2, r1
 80112be:	da07      	bge.n	80112d0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80112c0:	88c0      	ldrh	r0, [r0, #6]
 80112c2:	4410      	add	r0, r2
 80112c4:	b200      	sxth	r0, r0
 80112c6:	4283      	cmp	r3, r0
 80112c8:	bfac      	ite	ge
 80112ca:	2000      	movge	r0, #0
 80112cc:	2001      	movlt	r0, #1
 80112ce:	bd10      	pop	{r4, pc}
 80112d0:	2000      	movs	r0, #0
 80112d2:	e7fc      	b.n	80112ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080112d4 <_ZN8touchgfx4Rect10restrictToEss>:
 80112d4:	f9b0 3000 	ldrsh.w	r3, [r0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	b510      	push	{r4, lr}
 80112dc:	da04      	bge.n	80112e8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80112de:	8884      	ldrh	r4, [r0, #4]
 80112e0:	4423      	add	r3, r4
 80112e2:	8083      	strh	r3, [r0, #4]
 80112e4:	2300      	movs	r3, #0
 80112e6:	8003      	strh	r3, [r0, #0]
 80112e8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80112ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80112f0:	1b09      	subs	r1, r1, r4
 80112f2:	428b      	cmp	r3, r1
 80112f4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80112f8:	bfc8      	it	gt
 80112fa:	8081      	strhgt	r1, [r0, #4]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	da04      	bge.n	801130a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8011300:	88c1      	ldrh	r1, [r0, #6]
 8011302:	440b      	add	r3, r1
 8011304:	80c3      	strh	r3, [r0, #6]
 8011306:	2300      	movs	r3, #0
 8011308:	8043      	strh	r3, [r0, #2]
 801130a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801130e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8011312:	1a52      	subs	r2, r2, r1
 8011314:	4293      	cmp	r3, r2
 8011316:	bfc8      	it	gt
 8011318:	80c2      	strhgt	r2, [r0, #6]
 801131a:	bd10      	pop	{r4, pc}

0801131c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801131c:	4b10      	ldr	r3, [pc, #64]	; (8011360 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801131e:	b510      	push	{r4, lr}
 8011320:	460c      	mov	r4, r1
 8011322:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011326:	4b0f      	ldr	r3, [pc, #60]	; (8011364 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8011328:	4620      	mov	r0, r4
 801132a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801132e:	f7ff ffd1 	bl	80112d4 <_ZN8touchgfx4Rect10restrictToEss>
 8011332:	4b0d      	ldr	r3, [pc, #52]	; (8011368 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8011334:	6818      	ldr	r0, [r3, #0]
 8011336:	b190      	cbz	r0, 801135e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8011338:	6803      	ldr	r3, [r0, #0]
 801133a:	4621      	mov	r1, r4
 801133c:	689b      	ldr	r3, [r3, #8]
 801133e:	4798      	blx	r3
 8011340:	4b0a      	ldr	r3, [pc, #40]	; (801136c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8011342:	6818      	ldr	r0, [r3, #0]
 8011344:	b118      	cbz	r0, 801134e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8011346:	6803      	ldr	r3, [r0, #0]
 8011348:	4621      	mov	r1, r4
 801134a:	689b      	ldr	r3, [r3, #8]
 801134c:	4798      	blx	r3
 801134e:	4b08      	ldr	r3, [pc, #32]	; (8011370 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8011350:	4621      	mov	r1, r4
 8011352:	6818      	ldr	r0, [r3, #0]
 8011354:	6803      	ldr	r3, [r0, #0]
 8011356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801135a:	69db      	ldr	r3, [r3, #28]
 801135c:	4718      	bx	r3
 801135e:	bd10      	pop	{r4, pc}
 8011360:	2401aa32 	.word	0x2401aa32
 8011364:	2401aa30 	.word	0x2401aa30
 8011368:	2401aa78 	.word	0x2401aa78
 801136c:	2401aa74 	.word	0x2401aa74
 8011370:	2401aa3c 	.word	0x2401aa3c

08011374 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	4606      	mov	r6, r0
 8011378:	4608      	mov	r0, r1
 801137a:	460f      	mov	r7, r1
 801137c:	f7fc febf 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011380:	b9e8      	cbnz	r0, 80113be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8011382:	f9b7 5000 	ldrsh.w	r5, [r7]
 8011386:	f9b6 4000 	ldrsh.w	r4, [r6]
 801138a:	42a5      	cmp	r5, r4
 801138c:	db17      	blt.n	80113be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801138e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8011392:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8011396:	429a      	cmp	r2, r3
 8011398:	db11      	blt.n	80113be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801139a:	88b9      	ldrh	r1, [r7, #4]
 801139c:	440d      	add	r5, r1
 801139e:	88b1      	ldrh	r1, [r6, #4]
 80113a0:	440c      	add	r4, r1
 80113a2:	b22d      	sxth	r5, r5
 80113a4:	b224      	sxth	r4, r4
 80113a6:	42a5      	cmp	r5, r4
 80113a8:	dc09      	bgt.n	80113be <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80113aa:	88f8      	ldrh	r0, [r7, #6]
 80113ac:	4410      	add	r0, r2
 80113ae:	88f2      	ldrh	r2, [r6, #6]
 80113b0:	4413      	add	r3, r2
 80113b2:	b200      	sxth	r0, r0
 80113b4:	b21b      	sxth	r3, r3
 80113b6:	4298      	cmp	r0, r3
 80113b8:	bfcc      	ite	gt
 80113ba:	2000      	movgt	r0, #0
 80113bc:	2001      	movle	r0, #1
 80113be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080113c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80113c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113c2:	4604      	mov	r4, r0
 80113c4:	4608      	mov	r0, r1
 80113c6:	460d      	mov	r5, r1
 80113c8:	f7fc fe99 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80113cc:	b978      	cbnz	r0, 80113ee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80113ce:	4620      	mov	r0, r4
 80113d0:	f7fc fe95 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80113d4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80113d8:	b150      	cbz	r0, 80113f0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80113da:	8026      	strh	r6, [r4, #0]
 80113dc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80113e0:	8063      	strh	r3, [r4, #2]
 80113e2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80113e6:	80a3      	strh	r3, [r4, #4]
 80113e8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80113ec:	80e3      	strh	r3, [r4, #6]
 80113ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113f0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80113f4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80113f8:	42b1      	cmp	r1, r6
 80113fa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80113fe:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8011402:	460f      	mov	r7, r1
 8011404:	88ed      	ldrh	r5, [r5, #6]
 8011406:	bfa8      	it	ge
 8011408:	4637      	movge	r7, r6
 801140a:	4293      	cmp	r3, r2
 801140c:	4618      	mov	r0, r3
 801140e:	4466      	add	r6, ip
 8011410:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8011414:	bfa8      	it	ge
 8011416:	4610      	movge	r0, r2
 8011418:	442a      	add	r2, r5
 801141a:	88e5      	ldrh	r5, [r4, #6]
 801141c:	4461      	add	r1, ip
 801141e:	b236      	sxth	r6, r6
 8011420:	8027      	strh	r7, [r4, #0]
 8011422:	442b      	add	r3, r5
 8011424:	b209      	sxth	r1, r1
 8011426:	b212      	sxth	r2, r2
 8011428:	8060      	strh	r0, [r4, #2]
 801142a:	b21b      	sxth	r3, r3
 801142c:	428e      	cmp	r6, r1
 801142e:	bfac      	ite	ge
 8011430:	ebc7 0106 	rsbge	r1, r7, r6
 8011434:	ebc7 0101 	rsblt	r1, r7, r1
 8011438:	429a      	cmp	r2, r3
 801143a:	bfac      	ite	ge
 801143c:	ebc0 0202 	rsbge	r2, r0, r2
 8011440:	ebc0 0203 	rsblt	r2, r0, r3
 8011444:	80a1      	strh	r1, [r4, #4]
 8011446:	80e2      	strh	r2, [r4, #6]
 8011448:	e7d1      	b.n	80113ee <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801144c <_ZN8touchgfx11Application11getInstanceEv>:
 801144c:	4b01      	ldr	r3, [pc, #4]	; (8011454 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801144e:	6818      	ldr	r0, [r3, #0]
 8011450:	4770      	bx	lr
 8011452:	bf00      	nop
 8011454:	2401aa88 	.word	0x2401aa88

08011458 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8011458:	2300      	movs	r3, #0
 801145a:	b510      	push	{r4, lr}
 801145c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 8011460:	4604      	mov	r4, r0
 8011462:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8011466:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801146a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801146e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8011472:	429a      	cmp	r2, r3
 8011474:	d90e      	bls.n	8011494 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8011476:	18e2      	adds	r2, r4, r3
 8011478:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 801147c:	b122      	cbz	r2, 8011488 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801147e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8011482:	6803      	ldr	r3, [r0, #0]
 8011484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011486:	4798      	blx	r3
 8011488:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 801148c:	3301      	adds	r3, #1
 801148e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8011492:	e7ea      	b.n	801146a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8011494:	bd10      	pop	{r4, pc}

08011496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8011496:	2300      	movs	r3, #0
 8011498:	f100 0284 	add.w	r2, r0, #132	; 0x84
 801149c:	30a4      	adds	r0, #164	; 0xa4
 801149e:	f820 3c24 	strh.w	r3, [r0, #-36]
 80114a2:	f802 3b01 	strb.w	r3, [r2], #1
 80114a6:	4282      	cmp	r2, r0
 80114a8:	d1fb      	bne.n	80114a2 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 80114aa:	4770      	bx	lr

080114ac <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 80114ac:	b570      	push	{r4, r5, r6, lr}
 80114ae:	4c0b      	ldr	r4, [pc, #44]	; (80114dc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80114b0:	4605      	mov	r5, r0
 80114b2:	460e      	mov	r6, r1
 80114b4:	6820      	ldr	r0, [r4, #0]
 80114b6:	b110      	cbz	r0, 80114be <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80114b8:	6803      	ldr	r3, [r0, #0]
 80114ba:	695b      	ldr	r3, [r3, #20]
 80114bc:	4798      	blx	r3
 80114be:	1d28      	adds	r0, r5, #4
 80114c0:	f7ff ffe9 	bl	8011496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80114c4:	6026      	str	r6, [r4, #0]
 80114c6:	6833      	ldr	r3, [r6, #0]
 80114c8:	4630      	mov	r0, r6
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	4798      	blx	r3
 80114ce:	682b      	ldr	r3, [r5, #0]
 80114d0:	4628      	mov	r0, r5
 80114d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80114d8:	4718      	bx	r3
 80114da:	bf00      	nop
 80114dc:	2401aa78 	.word	0x2401aa78

080114e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80114e0:	2300      	movs	r3, #0
 80114e2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 80114e6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 80114ea:	461a      	mov	r2, r3
 80114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ee:	461c      	mov	r4, r3
 80114f0:	461d      	mov	r5, r3
 80114f2:	459c      	cmp	ip, r3
 80114f4:	dd1a      	ble.n	801152c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80114f6:	18c6      	adds	r6, r0, r3
 80114f8:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 80114fc:	b16e      	cbz	r6, 801151a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80114fe:	429a      	cmp	r2, r3
 8011500:	d008      	beq.n	8011514 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8011502:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8011506:	fa1f fe82 	uxth.w	lr, r2
 801150a:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801150e:	1887      	adds	r7, r0, r2
 8011510:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 8011514:	3201      	adds	r2, #1
 8011516:	3301      	adds	r3, #1
 8011518:	e7eb      	b.n	80114f2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801151a:	4299      	cmp	r1, r3
 801151c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 8011520:	bfa8      	it	ge
 8011522:	3501      	addge	r5, #1
 8011524:	429e      	cmp	r6, r3
 8011526:	bfc8      	it	gt
 8011528:	3401      	addgt	r4, #1
 801152a:	e7f4      	b.n	8011516 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801152c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 8011530:	1b49      	subs	r1, r1, r5
 8011532:	1b1b      	subs	r3, r3, r4
 8011534:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 8011538:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 801153c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 8011540:	4293      	cmp	r3, r2
 8011542:	dd03      	ble.n	801154c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8011544:	3b01      	subs	r3, #1
 8011546:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 801154a:	e7f7      	b.n	801153c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801154c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08011550 <_ZN8touchgfx11Application15handleTickEventEv>:
 8011550:	b570      	push	{r4, r5, r6, lr}
 8011552:	4d16      	ldr	r5, [pc, #88]	; (80115ac <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8011554:	4604      	mov	r4, r0
 8011556:	6828      	ldr	r0, [r5, #0]
 8011558:	b140      	cbz	r0, 801156c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801155a:	7a03      	ldrb	r3, [r0, #8]
 801155c:	b933      	cbnz	r3, 801156c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801155e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8011562:	6803      	ldr	r3, [r0, #0]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801156a:	4718      	bx	r3
 801156c:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8011570:	4e0f      	ldr	r6, [pc, #60]	; (80115b0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8011572:	b973      	cbnz	r3, 8011592 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011574:	b168      	cbz	r0, 8011592 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8011576:	7a03      	ldrb	r3, [r0, #8]
 8011578:	b15b      	cbz	r3, 8011592 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801157a:	6830      	ldr	r0, [r6, #0]
 801157c:	b110      	cbz	r0, 8011584 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801157e:	6803      	ldr	r3, [r0, #0]
 8011580:	691b      	ldr	r3, [r3, #16]
 8011582:	4798      	blx	r3
 8011584:	6828      	ldr	r0, [r5, #0]
 8011586:	6803      	ldr	r3, [r0, #0]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	4798      	blx	r3
 801158c:	2301      	movs	r3, #1
 801158e:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8011592:	3404      	adds	r4, #4
 8011594:	4620      	mov	r0, r4
 8011596:	f7ff ff5f 	bl	8011458 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801159a:	4620      	mov	r0, r4
 801159c:	f7ff ffa0 	bl	80114e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 80115a0:	6830      	ldr	r0, [r6, #0]
 80115a2:	b110      	cbz	r0, 80115aa <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 80115a4:	6803      	ldr	r3, [r0, #0]
 80115a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a8:	e7dd      	b.n	8011566 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 80115aa:	bd70      	pop	{r4, r5, r6, pc}
 80115ac:	2401aa7c 	.word	0x2401aa7c
 80115b0:	2401aa78 	.word	0x2401aa78

080115b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80115b4:	4603      	mov	r3, r0
 80115b6:	f100 0140 	add.w	r1, r0, #64	; 0x40
 80115ba:	2200      	movs	r2, #0
 80115bc:	801a      	strh	r2, [r3, #0]
 80115be:	3308      	adds	r3, #8
 80115c0:	f823 2c06 	strh.w	r2, [r3, #-6]
 80115c4:	f823 2c04 	strh.w	r2, [r3, #-4]
 80115c8:	f823 2c02 	strh.w	r2, [r3, #-2]
 80115cc:	428b      	cmp	r3, r1
 80115ce:	d1f5      	bne.n	80115bc <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80115d0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 80115d4:	4770      	bx	lr
	...

080115d8 <_ZN8touchgfx11ApplicationC1Ev>:
 80115d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115da:	4b1d      	ldr	r3, [pc, #116]	; (8011650 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80115dc:	4606      	mov	r6, r0
 80115de:	4604      	mov	r4, r0
 80115e0:	2500      	movs	r5, #0
 80115e2:	f846 3b04 	str.w	r3, [r6], #4
 80115e6:	22a8      	movs	r2, #168	; 0xa8
 80115e8:	2100      	movs	r1, #0
 80115ea:	4630      	mov	r0, r6
 80115ec:	f00c f945 	bl	801d87a <memset>
 80115f0:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 80115f4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80115f8:	4f16      	ldr	r7, [pc, #88]	; (8011654 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80115fa:	f7ff ffdb 	bl	80115b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80115fe:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8011602:	f7ff ffd7 	bl	80115b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011606:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801160a:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801160e:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 8011612:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 8011616:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 801161a:	490f      	ldr	r1, [pc, #60]	; (8011658 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801161c:	480f      	ldr	r0, [pc, #60]	; (801165c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801161e:	f00b fdef 	bl	801d200 <CRC_Lock>
 8011622:	4b0f      	ldr	r3, [pc, #60]	; (8011660 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8011624:	b158      	cbz	r0, 801163e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8011626:	801d      	strh	r5, [r3, #0]
 8011628:	2300      	movs	r3, #0
 801162a:	4a0e      	ldr	r2, [pc, #56]	; (8011664 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801162c:	4630      	mov	r0, r6
 801162e:	6013      	str	r3, [r2, #0]
 8011630:	4a0d      	ldr	r2, [pc, #52]	; (8011668 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8011632:	603b      	str	r3, [r7, #0]
 8011634:	6013      	str	r3, [r2, #0]
 8011636:	f7ff ff2e 	bl	8011496 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801163a:	4620      	mov	r0, r4
 801163c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801163e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011642:	2002      	movs	r0, #2
 8011644:	801a      	strh	r2, [r3, #0]
 8011646:	6038      	str	r0, [r7, #0]
 8011648:	f001 fa50 	bl	8012aec <_ZN8touchgfx6Screen4drawEv>
 801164c:	e7ec      	b.n	8011628 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801164e:	bf00      	nop
 8011650:	0801fd00 	.word	0x0801fd00
 8011654:	2401aa78 	.word	0x2401aa78
 8011658:	b5e8b5cd 	.word	0xb5e8b5cd
 801165c:	f407a5c2 	.word	0xf407a5c2
 8011660:	24000020 	.word	0x24000020
 8011664:	2401aa88 	.word	0x2401aa88
 8011668:	2401aa7c 	.word	0x2401aa7c

0801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801166c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8011670:	3b01      	subs	r3, #1
 8011672:	b29b      	uxth	r3, r3
 8011674:	428b      	cmp	r3, r1
 8011676:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801167a:	b510      	push	{r4, lr}
 801167c:	d908      	bls.n	8011690 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801167e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8011682:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801168c:	685a      	ldr	r2, [r3, #4]
 801168e:	6062      	str	r2, [r4, #4]
 8011690:	bd10      	pop	{r4, pc}
	...

08011694 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8011694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011698:	b08f      	sub	sp, #60	; 0x3c
 801169a:	4b8f      	ldr	r3, [pc, #572]	; (80118d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801169c:	4683      	mov	fp, r0
 801169e:	ac0a      	add	r4, sp, #40	; 0x28
 80116a0:	e884 0006 	stmia.w	r4, {r1, r2}
 80116a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80116a8:	4620      	mov	r0, r4
 80116aa:	4b8c      	ldr	r3, [pc, #560]	; (80118dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 80116ac:	f9b3 1000 	ldrsh.w	r1, [r3]
 80116b0:	f7ff fe10 	bl	80112d4 <_ZN8touchgfx4Rect10restrictToEss>
 80116b4:	4620      	mov	r0, r4
 80116b6:	f7fc fd22 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d16a      	bne.n	8011794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80116be:	9403      	str	r4, [sp, #12]
 80116c0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 80116c4:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 80116c8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80116cc:	9301      	str	r3, [sp, #4]
 80116ce:	35a4      	adds	r5, #164	; 0xa4
 80116d0:	b15c      	cbz	r4, 80116ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80116d2:	4629      	mov	r1, r5
 80116d4:	9803      	ldr	r0, [sp, #12]
 80116d6:	f7ff fe4d 	bl	8011374 <_ZNK8touchgfx4Rect8includesERKS0_>
 80116da:	3c01      	subs	r4, #1
 80116dc:	b118      	cbz	r0, 80116e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80116de:	b2a1      	uxth	r1, r4
 80116e0:	9801      	ldr	r0, [sp, #4]
 80116e2:	f7ff ffc3 	bl	801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80116e6:	3d08      	subs	r5, #8
 80116e8:	e7f2      	b.n	80116d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80116ea:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	; 0xec
 80116ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80116f2:	f8cd a010 	str.w	sl, [sp, #16]
 80116f6:	9302      	str	r3, [sp, #8]
 80116f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80116fc:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8011700:	9306      	str	r3, [sp, #24]
 8011702:	445c      	add	r4, fp
 8011704:	2500      	movs	r5, #0
 8011706:	4626      	mov	r6, r4
 8011708:	f8cd a014 	str.w	sl, [sp, #20]
 801170c:	462f      	mov	r7, r5
 801170e:	9b05      	ldr	r3, [sp, #20]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d073      	beq.n	80117fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8011714:	9903      	ldr	r1, [sp, #12]
 8011716:	4630      	mov	r0, r6
 8011718:	f7ff fdba 	bl	8011290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801171c:	b350      	cbz	r0, 8011774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801171e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8011722:	f9b6 c000 	ldrsh.w	ip, [r6]
 8011726:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
 801172a:	45e6      	cmp	lr, ip
 801172c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8011730:	db33      	blt.n	801179a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8011732:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011736:	88b3      	ldrh	r3, [r6, #4]
 8011738:	4472      	add	r2, lr
 801173a:	4463      	add	r3, ip
 801173c:	b212      	sxth	r2, r2
 801173e:	b21b      	sxth	r3, r3
 8011740:	429a      	cmp	r2, r3
 8011742:	dc2a      	bgt.n	801179a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8011744:	fa1f f289 	uxth.w	r2, r9
 8011748:	88f3      	ldrh	r3, [r6, #6]
 801174a:	45c8      	cmp	r8, r9
 801174c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011750:	4413      	add	r3, r2
 8011752:	fa1f fc88 	uxth.w	ip, r8
 8011756:	b29b      	uxth	r3, r3
 8011758:	fa0f fe83 	sxth.w	lr, r3
 801175c:	db0f      	blt.n	801177e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801175e:	eba3 030c 	sub.w	r3, r3, ip
 8011762:	1ac9      	subs	r1, r1, r3
 8011764:	b209      	sxth	r1, r1
 8011766:	2900      	cmp	r1, #0
 8011768:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801176c:	dd12      	ble.n	8011794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801176e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 8011772:	4605      	mov	r5, r0
 8011774:	9b05      	ldr	r3, [sp, #20]
 8011776:	3e08      	subs	r6, #8
 8011778:	3b01      	subs	r3, #1
 801177a:	9305      	str	r3, [sp, #20]
 801177c:	e7c7      	b.n	801170e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801177e:	4461      	add	r1, ip
 8011780:	b209      	sxth	r1, r1
 8011782:	4571      	cmp	r1, lr
 8011784:	dc38      	bgt.n	80117f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8011786:	eba2 020c 	sub.w	r2, r2, ip
 801178a:	b212      	sxth	r2, r2
 801178c:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8011790:	2a00      	cmp	r2, #0
 8011792:	dcee      	bgt.n	8011772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8011794:	b00f      	add	sp, #60	; 0x3c
 8011796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801179a:	45c8      	cmp	r8, r9
 801179c:	db2c      	blt.n	80117f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801179e:	88f3      	ldrh	r3, [r6, #6]
 80117a0:	4499      	add	r9, r3
 80117a2:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80117a6:	4498      	add	r8, r3
 80117a8:	fa0f f989 	sxth.w	r9, r9
 80117ac:	fa0f f888 	sxth.w	r8, r8
 80117b0:	45c1      	cmp	r9, r8
 80117b2:	db21      	blt.n	80117f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80117b4:	fa1f f28c 	uxth.w	r2, ip
 80117b8:	88b3      	ldrh	r3, [r6, #4]
 80117ba:	45e6      	cmp	lr, ip
 80117bc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80117c0:	4413      	add	r3, r2
 80117c2:	fa1f f88e 	uxth.w	r8, lr
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	fa0f f983 	sxth.w	r9, r3
 80117cc:	db0a      	blt.n	80117e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80117ce:	eba3 0308 	sub.w	r3, r3, r8
 80117d2:	1ac9      	subs	r1, r1, r3
 80117d4:	b209      	sxth	r1, r1
 80117d6:	2900      	cmp	r1, #0
 80117d8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 80117dc:	ddda      	ble.n	8011794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80117de:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 80117e2:	e7c6      	b.n	8011772 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80117e4:	4441      	add	r1, r8
 80117e6:	b209      	sxth	r1, r1
 80117e8:	4549      	cmp	r1, r9
 80117ea:	dc05      	bgt.n	80117f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80117ec:	eba2 0208 	sub.w	r2, r2, r8
 80117f0:	b212      	sxth	r2, r2
 80117f2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80117f6:	e7cb      	b.n	8011790 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80117f8:	4607      	mov	r7, r0
 80117fa:	e7bb      	b.n	8011774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80117fc:	2d00      	cmp	r5, #0
 80117fe:	d181      	bne.n	8011704 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8011800:	2f00      	cmp	r7, #0
 8011802:	f000 81dd 	beq.w	8011bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8011806:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801180a:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801180e:	b2b3      	uxth	r3, r6
 8011810:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8011814:	9305      	str	r3, [sp, #20]
 8011816:	9a05      	ldr	r2, [sp, #20]
 8011818:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 801181c:	4413      	add	r3, r2
 801181e:	b2ba      	uxth	r2, r7
 8011820:	4492      	add	sl, r2
 8011822:	b29b      	uxth	r3, r3
 8011824:	fa1f fa8a 	uxth.w	sl, sl
 8011828:	fa0f f883 	sxth.w	r8, r3
 801182c:	fa0f f98a 	sxth.w	r9, sl
 8011830:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8011834:	9b04      	ldr	r3, [sp, #16]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d052      	beq.n	80118e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801183a:	9903      	ldr	r1, [sp, #12]
 801183c:	4620      	mov	r0, r4
 801183e:	f7ff fd27 	bl	8011290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011842:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8011846:	b1c0      	cbz	r0, 801187a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8011848:	f9b4 e000 	ldrsh.w	lr, [r4]
 801184c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8011850:	4576      	cmp	r6, lr
 8011852:	dc22      	bgt.n	801189a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8011854:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8011858:	44f4      	add	ip, lr
 801185a:	fa0f fc8c 	sxth.w	ip, ip
 801185e:	45e0      	cmp	r8, ip
 8011860:	db1b      	blt.n	801189a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8011862:	428f      	cmp	r7, r1
 8011864:	fa1f fc81 	uxth.w	ip, r1
 8011868:	88e1      	ldrh	r1, [r4, #6]
 801186a:	dc0d      	bgt.n	8011888 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801186c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8011870:	f8a4 9002 	strh.w	r9, [r4, #2]
 8011874:	eba1 010c 	sub.w	r1, r1, ip
 8011878:	80e1      	strh	r1, [r4, #6]
 801187a:	4628      	mov	r0, r5
 801187c:	9904      	ldr	r1, [sp, #16]
 801187e:	3c08      	subs	r4, #8
 8011880:	4605      	mov	r5, r0
 8011882:	3901      	subs	r1, #1
 8011884:	9104      	str	r1, [sp, #16]
 8011886:	e7d3      	b.n	8011830 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8011888:	4461      	add	r1, ip
 801188a:	b209      	sxth	r1, r1
 801188c:	4549      	cmp	r1, r9
 801188e:	dcf5      	bgt.n	801187c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8011890:	eba2 0c0c 	sub.w	ip, r2, ip
 8011894:	f8a4 c006 	strh.w	ip, [r4, #6]
 8011898:	e7ef      	b.n	801187a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801189a:	428f      	cmp	r7, r1
 801189c:	dcee      	bgt.n	801187c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801189e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80118a2:	4461      	add	r1, ip
 80118a4:	b209      	sxth	r1, r1
 80118a6:	4589      	cmp	r9, r1
 80118a8:	dbe8      	blt.n	801187c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80118aa:	4576      	cmp	r6, lr
 80118ac:	fa1f fc8e 	uxth.w	ip, lr
 80118b0:	88a1      	ldrh	r1, [r4, #4]
 80118b2:	dc07      	bgt.n	80118c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80118b4:	eba3 0c0c 	sub.w	ip, r3, ip
 80118b8:	f8a4 8000 	strh.w	r8, [r4]
 80118bc:	eba1 010c 	sub.w	r1, r1, ip
 80118c0:	80a1      	strh	r1, [r4, #4]
 80118c2:	e7da      	b.n	801187a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80118c4:	4461      	add	r1, ip
 80118c6:	b209      	sxth	r1, r1
 80118c8:	4588      	cmp	r8, r1
 80118ca:	dbd7      	blt.n	801187c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80118cc:	9905      	ldr	r1, [sp, #20]
 80118ce:	eba1 0c0c 	sub.w	ip, r1, ip
 80118d2:	f8a4 c004 	strh.w	ip, [r4, #4]
 80118d6:	e7d0      	b.n	801187a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80118d8:	2401aa32 	.word	0x2401aa32
 80118dc:	2401aa30 	.word	0x2401aa30
 80118e0:	2d00      	cmp	r5, #0
 80118e2:	f000 816d 	beq.w	8011bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80118e6:	9b06      	ldr	r3, [sp, #24]
 80118e8:	445b      	add	r3, fp
 80118ea:	461c      	mov	r4, r3
 80118ec:	9b02      	ldr	r3, [sp, #8]
 80118ee:	3301      	adds	r3, #1
 80118f0:	f000 8166 	beq.w	8011bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80118f4:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 80118f8:	9803      	ldr	r0, [sp, #12]
 80118fa:	4629      	mov	r1, r5
 80118fc:	f7ff fd3a 	bl	8011374 <_ZNK8touchgfx4Rect8includesERKS0_>
 8011900:	b120      	cbz	r0, 801190c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8011902:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8011906:	9801      	ldr	r0, [sp, #4]
 8011908:	f7ff feb0 	bl	801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801190c:	9903      	ldr	r1, [sp, #12]
 801190e:	4628      	mov	r0, r5
 8011910:	f7ff fcbe 	bl	8011290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011914:	2800      	cmp	r0, #0
 8011916:	f000 809c 	beq.w	8011a52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801191a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 801191e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8011922:	fa1f f189 	uxth.w	r1, r9
 8011926:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801192a:	9309      	str	r3, [sp, #36]	; 0x24
 801192c:	eb01 0c03 	add.w	ip, r1, r3
 8011930:	b283      	uxth	r3, r0
 8011932:	4548      	cmp	r0, r9
 8011934:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8011938:	fa1f fa8c 	uxth.w	sl, ip
 801193c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8011940:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8011944:	eb03 050c 	add.w	r5, r3, ip
 8011948:	b2ad      	uxth	r5, r5
 801194a:	9505      	str	r5, [sp, #20]
 801194c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8011950:	9504      	str	r5, [sp, #16]
 8011952:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8011956:	f340 8099 	ble.w	8011a8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801195a:	1a5b      	subs	r3, r3, r1
 801195c:	4596      	cmp	lr, r2
 801195e:	fa0f f08a 	sxth.w	r0, sl
 8011962:	b29b      	uxth	r3, r3
 8011964:	b21e      	sxth	r6, r3
 8011966:	dd2e      	ble.n	80119c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8011968:	9f02      	ldr	r7, [sp, #8]
 801196a:	fa1f fe8e 	uxth.w	lr, lr
 801196e:	b292      	uxth	r2, r2
 8011970:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8011974:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8011978:	9f04      	ldr	r7, [sp, #16]
 801197a:	ebae 0102 	sub.w	r1, lr, r2
 801197e:	44a6      	add	lr, r4
 8011980:	1a3f      	subs	r7, r7, r0
 8011982:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8011986:	b289      	uxth	r1, r1
 8011988:	4402      	add	r2, r0
 801198a:	fa0f fe8e 	sxth.w	lr, lr
 801198e:	b20d      	sxth	r5, r1
 8011990:	b212      	sxth	r2, r2
 8011992:	436f      	muls	r7, r5
 8011994:	ebae 0202 	sub.w	r2, lr, r2
 8011998:	4372      	muls	r2, r6
 801199a:	4297      	cmp	r7, r2
 801199c:	db09      	blt.n	80119b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801199e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 80119a2:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 80119a6:	449c      	add	ip, r3
 80119a8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80119ac:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 80119b0:	e686      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80119b2:	4421      	add	r1, r4
 80119b4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 80119b8:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 80119bc:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80119c0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80119c4:	e67c      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80119c6:	9f04      	ldr	r7, [sp, #16]
 80119c8:	42b8      	cmp	r0, r7
 80119ca:	da27      	bge.n	8011a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80119cc:	9902      	ldr	r1, [sp, #8]
 80119ce:	1a3f      	subs	r7, r7, r0
 80119d0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 80119d4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80119d8:	eb05 010e 	add.w	r1, r5, lr
 80119dc:	fa1f f881 	uxth.w	r8, r1
 80119e0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 80119e4:	4411      	add	r1, r2
 80119e6:	fa0f f988 	sxth.w	r9, r8
 80119ea:	eba2 020e 	sub.w	r2, r2, lr
 80119ee:	eba1 0108 	sub.w	r1, r1, r8
 80119f2:	4372      	muls	r2, r6
 80119f4:	b289      	uxth	r1, r1
 80119f6:	fa0f f881 	sxth.w	r8, r1
 80119fa:	fb08 f707 	mul.w	r7, r8, r7
 80119fe:	42ba      	cmp	r2, r7
 8011a00:	dc06      	bgt.n	8011a10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8011a02:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8011a06:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8011a0a:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8011a0e:	e7ca      	b.n	80119a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8011a10:	4429      	add	r1, r5
 8011a12:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8011a16:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011a1a:	e651      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011a1c:	9805      	ldr	r0, [sp, #20]
 8011a1e:	2d06      	cmp	r5, #6
 8011a20:	ebaa 0000 	sub.w	r0, sl, r0
 8011a24:	b280      	uxth	r0, r0
 8011a26:	fa0f fe80 	sxth.w	lr, r0
 8011a2a:	d817      	bhi.n	8011a5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8011a2c:	9b04      	ldr	r3, [sp, #16]
 8011a2e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8011a32:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8011a36:	1c6b      	adds	r3, r5, #1
 8011a38:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8011a3c:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8011a40:	9b01      	ldr	r3, [sp, #4]
 8011a42:	9801      	ldr	r0, [sp, #4]
 8011a44:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a48:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8011a4c:	805a      	strh	r2, [r3, #2]
 8011a4e:	809e      	strh	r6, [r3, #4]
 8011a50:	80d9      	strh	r1, [r3, #6]
 8011a52:	9b02      	ldr	r3, [sp, #8]
 8011a54:	3c08      	subs	r4, #8
 8011a56:	3b01      	subs	r3, #1
 8011a58:	9302      	str	r3, [sp, #8]
 8011a5a:	e747      	b.n	80118ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8011a5c:	9a02      	ldr	r2, [sp, #8]
 8011a5e:	45b6      	cmp	lr, r6
 8011a60:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011a64:	db0d      	blt.n	8011a82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8011a66:	449c      	add	ip, r3
 8011a68:	445a      	add	r2, fp
 8011a6a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8011a6e:	fa1f fc8c 	uxth.w	ip, ip
 8011a72:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8011a76:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8011a7a:	448c      	add	ip, r1
 8011a7c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8011a80:	e61e      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011a82:	445a      	add	r2, fp
 8011a84:	4484      	add	ip, r0
 8011a86:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8011a8a:	e78f      	b.n	80119ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8011a8c:	fa1f f18e 	uxth.w	r1, lr
 8011a90:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8011a94:	b293      	uxth	r3, r2
 8011a96:	4596      	cmp	lr, r2
 8011a98:	eb01 0806 	add.w	r8, r1, r6
 8011a9c:	9306      	str	r3, [sp, #24]
 8011a9e:	fa1f f888 	uxth.w	r8, r8
 8011aa2:	9f06      	ldr	r7, [sp, #24]
 8011aa4:	fa0f f388 	sxth.w	r3, r8
 8011aa8:	9307      	str	r3, [sp, #28]
 8011aaa:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8011aae:	443b      	add	r3, r7
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	9308      	str	r3, [sp, #32]
 8011ab4:	da24      	bge.n	8011b00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8011ab6:	9905      	ldr	r1, [sp, #20]
 8011ab8:	eba3 0308 	sub.w	r3, r3, r8
 8011abc:	eba2 020e 	sub.w	r2, r2, lr
 8011ac0:	eba9 0000 	sub.w	r0, r9, r0
 8011ac4:	ebaa 0401 	sub.w	r4, sl, r1
 8011ac8:	b29b      	uxth	r3, r3
 8011aca:	b2a4      	uxth	r4, r4
 8011acc:	b219      	sxth	r1, r3
 8011ace:	b225      	sxth	r5, r4
 8011ad0:	4348      	muls	r0, r1
 8011ad2:	436a      	muls	r2, r5
 8011ad4:	4282      	cmp	r2, r0
 8011ad6:	9a02      	ldr	r2, [sp, #8]
 8011ad8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011adc:	445a      	add	r2, fp
 8011ade:	dc06      	bgt.n	8011aee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8011ae0:	9b07      	ldr	r3, [sp, #28]
 8011ae2:	44a4      	add	ip, r4
 8011ae4:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8011ae8:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8011aec:	e75e      	b.n	80119ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8011aee:	9904      	ldr	r1, [sp, #16]
 8011af0:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8011af4:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8011af8:	4433      	add	r3, r6
 8011afa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011afe:	e5df      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011b00:	9f06      	ldr	r7, [sp, #24]
 8011b02:	9b04      	ldr	r3, [sp, #16]
 8011b04:	1bc9      	subs	r1, r1, r7
 8011b06:	fa0f f78a 	sxth.w	r7, sl
 8011b0a:	b289      	uxth	r1, r1
 8011b0c:	429f      	cmp	r7, r3
 8011b0e:	fa0f fe81 	sxth.w	lr, r1
 8011b12:	dd23      	ble.n	8011b5c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8011b14:	9a05      	ldr	r2, [sp, #20]
 8011b16:	eba9 0000 	sub.w	r0, r9, r0
 8011b1a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8011b1e:	ebaa 0202 	sub.w	r2, sl, r2
 8011b22:	9d07      	ldr	r5, [sp, #28]
 8011b24:	fb0e f000 	mul.w	r0, lr, r0
 8011b28:	b292      	uxth	r2, r2
 8011b2a:	eba5 0a03 	sub.w	sl, r5, r3
 8011b2e:	9b02      	ldr	r3, [sp, #8]
 8011b30:	b214      	sxth	r4, r2
 8011b32:	00db      	lsls	r3, r3, #3
 8011b34:	fb04 fa0a 	mul.w	sl, r4, sl
 8011b38:	445b      	add	r3, fp
 8011b3a:	4550      	cmp	r0, sl
 8011b3c:	db03      	blt.n	8011b46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8011b3e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8011b42:	4494      	add	ip, r2
 8011b44:	e732      	b.n	80119ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8011b46:	9a04      	ldr	r2, [sp, #16]
 8011b48:	4431      	add	r1, r6
 8011b4a:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8011b4e:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8011b52:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8011b56:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011b5a:	e75c      	b.n	8011a16 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8011b5c:	9b08      	ldr	r3, [sp, #32]
 8011b5e:	2d06      	cmp	r5, #6
 8011b60:	eba3 0308 	sub.w	r3, r3, r8
 8011b64:	b29b      	uxth	r3, r3
 8011b66:	b218      	sxth	r0, r3
 8011b68:	d813      	bhi.n	8011b92 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8011b6a:	9b07      	ldr	r3, [sp, #28]
 8011b6c:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8011b70:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8011b74:	1c6b      	adds	r3, r5, #1
 8011b76:	9901      	ldr	r1, [sp, #4]
 8011b78:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8011b7c:	9b01      	ldr	r3, [sp, #4]
 8011b7e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8011b82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011b86:	805a      	strh	r2, [r3, #2]
 8011b88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b8a:	f8a3 e006 	strh.w	lr, [r3, #6]
 8011b8e:	809a      	strh	r2, [r3, #4]
 8011b90:	e75f      	b.n	8011a52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8011b92:	9c02      	ldr	r4, [sp, #8]
 8011b94:	4570      	cmp	r0, lr
 8011b96:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8011b9a:	db0d      	blt.n	8011bb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8011b9c:	4431      	add	r1, r6
 8011b9e:	9b06      	ldr	r3, [sp, #24]
 8011ba0:	445c      	add	r4, fp
 8011ba2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8011ba6:	b289      	uxth	r1, r1
 8011ba8:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8011bac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8011bb0:	4419      	add	r1, r3
 8011bb2:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8011bb6:	e583      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011bb8:	445c      	add	r4, fp
 8011bba:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8011bbe:	e79b      	b.n	8011af8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8011bc0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8011bc4:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8011bc8:	1e65      	subs	r5, r4, #1
 8011bca:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8011bce:	b2ad      	uxth	r5, r5
 8011bd0:	42b5      	cmp	r5, r6
 8011bd2:	d044      	beq.n	8011c5e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8011bd4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8011bd8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	; 0xa6
 8011bdc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8011be0:	4282      	cmp	r2, r0
 8011be2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	; 0xa4
 8011be6:	d11f      	bne.n	8011c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8011be8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	; 0x2e
 8011bec:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8011bf0:	459c      	cmp	ip, r3
 8011bf2:	d119      	bne.n	8011c28 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8011bf4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
 8011bf8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8011bfc:	19d8      	adds	r0, r3, r7
 8011bfe:	b200      	sxth	r0, r0
 8011c00:	4288      	cmp	r0, r1
 8011c02:	d109      	bne.n	8011c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8011c04:	f8ad 7028 	strh.w	r7, [sp, #40]	; 0x28
 8011c08:	4413      	add	r3, r2
 8011c0a:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8011c0e:	4629      	mov	r1, r5
 8011c10:	9801      	ldr	r0, [sp, #4]
 8011c12:	f7ff fd2b 	bl	801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011c16:	e003      	b.n	8011c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011c18:	4411      	add	r1, r2
 8011c1a:	b209      	sxth	r1, r1
 8011c1c:	42b9      	cmp	r1, r7
 8011c1e:	d0f3      	beq.n	8011c08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8011c20:	3d01      	subs	r5, #1
 8011c22:	3c08      	subs	r4, #8
 8011c24:	b2ad      	uxth	r5, r5
 8011c26:	e7d3      	b.n	8011bd0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8011c28:	42b9      	cmp	r1, r7
 8011c2a:	d1f9      	bne.n	8011c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011c2c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
 8011c30:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8011c34:	4299      	cmp	r1, r3
 8011c36:	d1f3      	bne.n	8011c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011c38:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8011c3c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8011c40:	181f      	adds	r7, r3, r0
 8011c42:	b23f      	sxth	r7, r7
 8011c44:	42ba      	cmp	r2, r7
 8011c46:	d105      	bne.n	8011c54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8011c48:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8011c4c:	440b      	add	r3, r1
 8011c4e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8011c52:	e7dc      	b.n	8011c0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8011c54:	440a      	add	r2, r1
 8011c56:	b212      	sxth	r2, r2
 8011c58:	4290      	cmp	r0, r2
 8011c5a:	d1e1      	bne.n	8011c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8011c5c:	e7f6      	b.n	8011c4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8011c5e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8011c62:	2e07      	cmp	r6, #7
 8011c64:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8011c68:	d812      	bhi.n	8011c90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8011c6a:	1c75      	adds	r5, r6, #1
 8011c6c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8011c70:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8011c74:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8011c78:	9d01      	ldr	r5, [sp, #4]
 8011c7a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8011c7e:	442c      	add	r4, r5
 8011c80:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8011c84:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8011c88:	8061      	strh	r1, [r4, #2]
 8011c8a:	80a2      	strh	r2, [r4, #4]
 8011c8c:	80e3      	strh	r3, [r4, #6]
 8011c8e:	e581      	b.n	8011794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8011c90:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8011c94:	3e01      	subs	r6, #1
 8011c96:	445c      	add	r4, fp
 8011c98:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8011c9c:	f04f 37ff 	mov.w	r7, #4294967295
 8011ca0:	2500      	movs	r5, #0
 8011ca2:	9305      	str	r3, [sp, #20]
 8011ca4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8011ca8:	1e72      	subs	r2, r6, #1
 8011caa:	9302      	str	r3, [sp, #8]
 8011cac:	4691      	mov	r9, r2
 8011cae:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8011cb2:	9304      	str	r3, [sp, #16]
 8011cb4:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8011cb8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8011cbc:	6818      	ldr	r0, [r3, #0]
 8011cbe:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011cc2:	9207      	str	r2, [sp, #28]
 8011cc4:	bf16      	itet	ne
 8011cc6:	9905      	ldrne	r1, [sp, #20]
 8011cc8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8011ccc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8011cd0:	9306      	str	r3, [sp, #24]
 8011cd2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8011cd6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8011cda:	fb18 f801 	smulbb	r8, r8, r1
 8011cde:	6859      	ldr	r1, [r3, #4]
 8011ce0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8011ce4:	4671      	mov	r1, lr
 8011ce6:	a80c      	add	r0, sp, #48	; 0x30
 8011ce8:	f7ff fb6a 	bl	80113c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011cec:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8011cf0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8011cf4:	f04f 0c08 	mov.w	ip, #8
 8011cf8:	9b04      	ldr	r3, [sp, #16]
 8011cfa:	9a02      	ldr	r2, [sp, #8]
 8011cfc:	fb10 f001 	smulbb	r0, r0, r1
 8011d00:	fb02 8803 	mla	r8, r2, r3, r8
 8011d04:	eba0 0108 	sub.w	r1, r0, r8
 8011d08:	fb90 f0fc 	sdiv	r0, r0, ip
 8011d0c:	4288      	cmp	r0, r1
 8011d0e:	dc20      	bgt.n	8011d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8011d10:	4551      	cmp	r1, sl
 8011d12:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011d16:	da03      	bge.n	8011d20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8011d18:	b1d9      	cbz	r1, 8011d52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8011d1a:	468a      	mov	sl, r1
 8011d1c:	464f      	mov	r7, r9
 8011d1e:	4635      	mov	r5, r6
 8011d20:	f109 39ff 	add.w	r9, r9, #4294967295
 8011d24:	f119 0f02 	cmn.w	r9, #2
 8011d28:	d1c6      	bne.n	8011cb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8011d2a:	4616      	mov	r6, r2
 8011d2c:	3201      	adds	r2, #1
 8011d2e:	f1a4 0408 	sub.w	r4, r4, #8
 8011d32:	d1b7      	bne.n	8011ca4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8011d34:	9b01      	ldr	r3, [sp, #4]
 8011d36:	b2ac      	uxth	r4, r5
 8011d38:	00ed      	lsls	r5, r5, #3
 8011d3a:	1958      	adds	r0, r3, r5
 8011d3c:	1c7b      	adds	r3, r7, #1
 8011d3e:	d10b      	bne.n	8011d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8011d40:	4601      	mov	r1, r0
 8011d42:	9803      	ldr	r0, [sp, #12]
 8011d44:	f7ff fb3c 	bl	80113c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011d48:	4621      	mov	r1, r4
 8011d4a:	9801      	ldr	r0, [sp, #4]
 8011d4c:	f7ff fc8e 	bl	801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8011d50:	e4b6      	b.n	80116c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8011d52:	464f      	mov	r7, r9
 8011d54:	4635      	mov	r5, r6
 8011d56:	e7ed      	b.n	8011d34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8011d58:	9b01      	ldr	r3, [sp, #4]
 8011d5a:	00ff      	lsls	r7, r7, #3
 8011d5c:	445d      	add	r5, fp
 8011d5e:	19d9      	adds	r1, r3, r7
 8011d60:	445f      	add	r7, fp
 8011d62:	f7ff fb2d 	bl	80113c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8011d66:	9b03      	ldr	r3, [sp, #12]
 8011d68:	cb03      	ldmia	r3!, {r0, r1}
 8011d6a:	9b03      	ldr	r3, [sp, #12]
 8011d6c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8011d70:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8011d74:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8011d78:	6869      	ldr	r1, [r5, #4]
 8011d7a:	c303      	stmia	r3!, {r0, r1}
 8011d7c:	e7e4      	b.n	8011d48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8011d7e:	bf00      	nop

08011d80 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8011d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d84:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8011d88:	b09b      	sub	sp, #108	; 0x6c
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	f7fc f9b6 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011d92:	4605      	mov	r5, r0
 8011d94:	b948      	cbnz	r0, 8011daa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8011d96:	6823      	ldr	r3, [r4, #0]
 8011d98:	4620      	mov	r0, r4
 8011d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d9c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8011da0:	4798      	blx	r3
 8011da2:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8011da6:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8011daa:	4bc5      	ldr	r3, [pc, #788]	; (80120c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d03f      	beq.n	8011e32 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8011db2:	4dc4      	ldr	r5, [pc, #784]	; (80120c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8011db4:	4628      	mov	r0, r5
 8011db6:	f7fc f9a2 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011dba:	4606      	mov	r6, r0
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	d138      	bne.n	8011e32 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8011dc0:	4628      	mov	r0, r5
 8011dc2:	f7ff f99b 	bl	80110fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	6829      	ldr	r1, [r5, #0]
 8011dca:	4620      	mov	r0, r4
 8011dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dce:	686a      	ldr	r2, [r5, #4]
 8011dd0:	4798      	blx	r3
 8011dd2:	802e      	strh	r6, [r5, #0]
 8011dd4:	806e      	strh	r6, [r5, #2]
 8011dd6:	80ae      	strh	r6, [r5, #4]
 8011dd8:	80ee      	strh	r6, [r5, #6]
 8011dda:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 8011dde:	4dba      	ldr	r5, [pc, #744]	; (80120c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8011de0:	4640      	mov	r0, r8
 8011de2:	f7ff fbe7 	bl	80115b4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8011de6:	882e      	ldrh	r6, [r5, #0]
 8011de8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8011dec:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8011df0:	4633      	mov	r3, r6
 8011df2:	42bb      	cmp	r3, r7
 8011df4:	d224      	bcs.n	8011e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8011df6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8011dfa:	2907      	cmp	r1, #7
 8011dfc:	d816      	bhi.n	8011e2c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8011dfe:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8011e02:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8011e06:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8011e0a:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8011e0e:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8011e12:	1c4a      	adds	r2, r1, #1
 8011e14:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8011e18:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8011e1c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8011e20:	f8a2 a002 	strh.w	sl, [r2, #2]
 8011e24:	f8a2 e004 	strh.w	lr, [r2, #4]
 8011e28:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	e7df      	b.n	8011df2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8011e32:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d1cf      	bne.n	8011dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8011e3a:	b01b      	add	sp, #108	; 0x6c
 8011e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e40:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8011e44:	42b3      	cmp	r3, r6
 8011e46:	d90c      	bls.n	8011e62 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8011e48:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8011e4c:	6822      	ldr	r2, [r4, #0]
 8011e4e:	3601      	adds	r6, #1
 8011e50:	4620      	mov	r0, r4
 8011e52:	6c17      	ldr	r7, [r2, #64]	; 0x40
 8011e54:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 8011e58:	b2b6      	uxth	r6, r6
 8011e5a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8011e5e:	47b8      	blx	r7
 8011e60:	e7ee      	b.n	8011e40 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8011e62:	4a9a      	ldr	r2, [pc, #616]	; (80120cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8011e64:	6813      	ldr	r3, [r2, #0]
 8011e66:	4691      	mov	r9, r2
 8011e68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	f040 80e0 	bne.w	8012032 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8011e72:	8829      	ldrh	r1, [r5, #0]
 8011e74:	2600      	movs	r6, #0
 8011e76:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8011e7a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8011e7e:	33ae      	adds	r3, #174	; 0xae
 8011e80:	428f      	cmp	r7, r1
 8011e82:	f103 0308 	add.w	r3, r3, #8
 8011e86:	dd0a      	ble.n	8011e9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8011e88:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8011e8c:	3101      	adds	r1, #1
 8011e8e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8011e92:	4402      	add	r2, r0
 8011e94:	b212      	sxth	r2, r2
 8011e96:	4296      	cmp	r6, r2
 8011e98:	bfb8      	it	lt
 8011e9a:	4616      	movlt	r6, r2
 8011e9c:	e7f0      	b.n	8011e80 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8011e9e:	4b8c      	ldr	r3, [pc, #560]	; (80120d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8011ea0:	f8df 9228 	ldr.w	r9, [pc, #552]	; 80120cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8011ea4:	881b      	ldrh	r3, [r3, #0]
 8011ea6:	2b0f      	cmp	r3, #15
 8011ea8:	bf8c      	ite	hi
 8011eaa:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8011eae:	f04f 0b01 	movls.w	fp, #1
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8011eb8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8011ebc:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8011ec0:	4b82      	ldr	r3, [pc, #520]	; (80120cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8011ec2:	4438      	add	r0, r7
 8011ec4:	b207      	sxth	r7, r0
 8011ec6:	6818      	ldr	r0, [r3, #0]
 8011ec8:	42b7      	cmp	r7, r6
 8011eca:	6803      	ldr	r3, [r0, #0]
 8011ecc:	f280 8083 	bge.w	8011fd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8011ed0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011ed4:	4798      	blx	r3
 8011ed6:	eb07 030b 	add.w	r3, r7, fp
 8011eda:	4298      	cmp	r0, r3
 8011edc:	da07      	bge.n	8011eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8011ede:	42b0      	cmp	r0, r6
 8011ee0:	da05      	bge.n	8011eee <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8011ee2:	4287      	cmp	r7, r0
 8011ee4:	dd6c      	ble.n	8011fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8011ee6:	2f00      	cmp	r7, #0
 8011ee8:	dd6a      	ble.n	8011fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8011eea:	4630      	mov	r0, r6
 8011eec:	e004      	b.n	8011ef8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8011eee:	4287      	cmp	r7, r0
 8011ef0:	dcfb      	bgt.n	8011eea <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8011ef2:	42b0      	cmp	r0, r6
 8011ef4:	bfa8      	it	ge
 8011ef6:	4630      	movge	r0, r6
 8011ef8:	4b76      	ldr	r3, [pc, #472]	; (80120d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8011efa:	1bc0      	subs	r0, r0, r7
 8011efc:	2200      	movs	r2, #0
 8011efe:	f8ad 7016 	strh.w	r7, [sp, #22]
 8011f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f06:	882f      	ldrh	r7, [r5, #0]
 8011f08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011f0c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011f10:	f8ad 001a 	strh.w	r0, [sp, #26]
 8011f14:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8011f18:	42bb      	cmp	r3, r7
 8011f1a:	d9cd      	bls.n	8011eb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8011f1c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8011f20:	ab07      	add	r3, sp, #28
 8011f22:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8011f26:	6851      	ldr	r1, [r2, #4]
 8011f28:	c303      	stmia	r3!, {r0, r1}
 8011f2a:	a905      	add	r1, sp, #20
 8011f2c:	a807      	add	r0, sp, #28
 8011f2e:	f7ff f9af 	bl	8011290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8011f32:	2800      	cmp	r0, #0
 8011f34:	d04c      	beq.n	8011fd0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8011f36:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8011f3a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8011f3e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8011f42:	4686      	mov	lr, r0
 8011f44:	4290      	cmp	r0, r2
 8011f46:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8011f4a:	4450      	add	r0, sl
 8011f4c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8011f50:	bfb8      	it	lt
 8011f52:	4696      	movlt	lr, r2
 8011f54:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8011f58:	4452      	add	r2, sl
 8011f5a:	b280      	uxth	r0, r0
 8011f5c:	4299      	cmp	r1, r3
 8011f5e:	468c      	mov	ip, r1
 8011f60:	b292      	uxth	r2, r2
 8011f62:	9302      	str	r3, [sp, #8]
 8011f64:	bfb8      	it	lt
 8011f66:	469c      	movlt	ip, r3
 8011f68:	b203      	sxth	r3, r0
 8011f6a:	fa0f fa82 	sxth.w	sl, r2
 8011f6e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8011f72:	f8ad c01e 	strh.w	ip, [sp, #30]
 8011f76:	4553      	cmp	r3, sl
 8011f78:	bfb8      	it	lt
 8011f7a:	4602      	movlt	r2, r0
 8011f7c:	9b02      	ldr	r3, [sp, #8]
 8011f7e:	eba2 020e 	sub.w	r2, r2, lr
 8011f82:	f8ad 2020 	strh.w	r2, [sp, #32]
 8011f86:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 8011f8a:	4411      	add	r1, r2
 8011f8c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8011f90:	4413      	add	r3, r2
 8011f92:	b289      	uxth	r1, r1
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	b208      	sxth	r0, r1
 8011f98:	b21a      	sxth	r2, r3
 8011f9a:	4290      	cmp	r0, r2
 8011f9c:	bfb8      	it	lt
 8011f9e:	460b      	movlt	r3, r1
 8011fa0:	eba3 030c 	sub.w	r3, r3, ip
 8011fa4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011fa8:	a807      	add	r0, sp, #28
 8011faa:	f7fc f8a8 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8011fae:	b920      	cbnz	r0, 8011fba <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8011fb0:	6823      	ldr	r3, [r4, #0]
 8011fb2:	a907      	add	r1, sp, #28
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011fb8:	4798      	blx	r3
 8011fba:	3701      	adds	r7, #1
 8011fbc:	b2bf      	uxth	r7, r7
 8011fbe:	e7a9      	b.n	8011f14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8011fc0:	f8d9 0000 	ldr.w	r0, [r9]
 8011fc4:	2101      	movs	r1, #1
 8011fc6:	6803      	ldr	r3, [r0, #0]
 8011fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011fcc:	4798      	blx	r3
 8011fce:	e773      	b.n	8011eb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8011fd0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8011fd4:	e7e8      	b.n	8011fa8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8011fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fd8:	4798      	blx	r3
 8011fda:	4b3f      	ldr	r3, [pc, #252]	; (80120d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	f43f af2b 	beq.w	8011e3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 8011fea:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 8011fee:	882b      	ldrh	r3, [r5, #0]
 8011ff0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8011ff4:	42ab      	cmp	r3, r5
 8011ff6:	f4bf af20 	bcs.w	8011e3a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8011ffa:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8011ffe:	2907      	cmp	r1, #7
 8012000:	d814      	bhi.n	801202c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8012002:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8012006:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 801200a:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 801200e:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8012012:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8012016:	1c4a      	adds	r2, r1, #1
 8012018:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 801201c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8012020:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8012024:	f8a2 c002 	strh.w	ip, [r2, #2]
 8012028:	8097      	strh	r7, [r2, #4]
 801202a:	80d6      	strh	r6, [r2, #6]
 801202c:	3301      	adds	r3, #1
 801202e:	b29b      	uxth	r3, r3
 8012030:	e7e0      	b.n	8011ff4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8012032:	2b02      	cmp	r3, #2
 8012034:	f040 8133 	bne.w	801229e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8012038:	4b28      	ldr	r3, [pc, #160]	; (80120dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801203a:	f104 0aac 	add.w	sl, r4, #172	; 0xac
 801203e:	781b      	ldrb	r3, [r3, #0]
 8012040:	2b01      	cmp	r3, #1
 8012042:	f000 8098 	beq.w	8012176 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8012046:	882a      	ldrh	r2, [r5, #0]
 8012048:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	; 0xec
 801204c:	3201      	adds	r2, #1
 801204e:	b292      	uxth	r2, r2
 8012050:	2900      	cmp	r1, #0
 8012052:	d0c2      	beq.n	8011fda <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012054:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	; 0xae
 8012058:	4694      	mov	ip, r2
 801205a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 801205e:	f04f 0900 	mov.w	r9, #0
 8012062:	441e      	add	r6, r3
 8012064:	b236      	sxth	r6, r6
 8012066:	fa1f f38c 	uxth.w	r3, ip
 801206a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801206e:	4299      	cmp	r1, r3
 8012070:	f240 80be 	bls.w	80121f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8012074:	4427      	add	r7, r4
 8012076:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801207a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 801207e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	; 0xae
 8012082:	4283      	cmp	r3, r0
 8012084:	f340 80a0 	ble.w	80121c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8012088:	f8be 60b2 	ldrh.w	r6, [lr, #178]	; 0xb2
 801208c:	46e1      	mov	r9, ip
 801208e:	4406      	add	r6, r0
 8012090:	b236      	sxth	r6, r6
 8012092:	429e      	cmp	r6, r3
 8012094:	bfa8      	it	ge
 8012096:	461e      	movge	r6, r3
 8012098:	f10c 0c01 	add.w	ip, ip, #1
 801209c:	e7e3      	b.n	8012066 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801209e:	d10a      	bne.n	80120b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 80120a0:	4562      	cmp	r2, ip
 80120a2:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	; 0xb2
 80120a6:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	; 0xb2
 80120aa:	bfb8      	it	lt
 80120ac:	4662      	movlt	r2, ip
 80120ae:	4288      	cmp	r0, r1
 80120b0:	bfb8      	it	lt
 80120b2:	461f      	movlt	r7, r3
 80120b4:	e086      	b.n	80121c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80120b6:	428a      	cmp	r2, r1
 80120b8:	bfb8      	it	lt
 80120ba:	460a      	movlt	r2, r1
 80120bc:	e082      	b.n	80121c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80120be:	bf00      	nop
 80120c0:	2401aa74 	.word	0x2401aa74
 80120c4:	2401aa80 	.word	0x2401aa80
 80120c8:	24000020 	.word	0x24000020
 80120cc:	2401aa3c 	.word	0x2401aa3c
 80120d0:	2401aa32 	.word	0x2401aa32
 80120d4:	2401aa30 	.word	0x2401aa30
 80120d8:	2401aa3a 	.word	0x2401aa3a
 80120dc:	2401aa34 	.word	0x2401aa34
 80120e0:	19a1      	adds	r1, r4, r6
 80120e2:	ab07      	add	r3, sp, #28
 80120e4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80120e8:	6849      	ldr	r1, [r1, #4]
 80120ea:	c303      	stmia	r3!, {r0, r1}
 80120ec:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80120f0:	a807      	add	r0, sp, #28
 80120f2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80120f6:	2b13      	cmp	r3, #19
 80120f8:	440b      	add	r3, r1
 80120fa:	bfd8      	it	le
 80120fc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8012100:	1a9b      	subs	r3, r3, r2
 8012102:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012106:	f8ad 3020 	strh.w	r3, [sp, #32]
 801210a:	f7ff f811 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801210e:	a807      	add	r0, sp, #28
 8012110:	f7fb fff5 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8012114:	bb78      	cbnz	r0, 8012176 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8012116:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801211a:	4426      	add	r6, r4
 801211c:	f8d9 0000 	ldr.w	r0, [r9]
 8012120:	f1bc 0f14 	cmp.w	ip, #20
 8012124:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8012128:	f8d0 e000 	ldr.w	lr, [r0]
 801212c:	bfa8      	it	ge
 801212e:	f04f 0c14 	movge.w	ip, #20
 8012132:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8012136:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801213a:	fa1f fc8c 	uxth.w	ip, ip
 801213e:	f8cd c000 	str.w	ip, [sp]
 8012142:	f8de b090 	ldr.w	fp, [lr, #144]	; 0x90
 8012146:	47d8      	blx	fp
 8012148:	4683      	mov	fp, r0
 801214a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801214e:	a807      	add	r0, sp, #28
 8012150:	f7fe ffd4 	bl	80110fc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	4620      	mov	r0, r4
 8012158:	a907      	add	r1, sp, #28
 801215a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801215c:	4798      	blx	r3
 801215e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 8012162:	eba0 000b 	sub.w	r0, r0, fp
 8012166:	b200      	sxth	r0, r0
 8012168:	f8a6 00b0 	strh.w	r0, [r6, #176]	; 0xb0
 801216c:	b918      	cbnz	r0, 8012176 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801216e:	b2b9      	uxth	r1, r7
 8012170:	4650      	mov	r0, sl
 8012172:	f7ff fa7b 	bl	801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012176:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 801217a:	f1bb 0f00 	cmp.w	fp, #0
 801217e:	f43f af2c 	beq.w	8011fda <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012182:	882b      	ldrh	r3, [r5, #0]
 8012184:	2700      	movs	r7, #0
 8012186:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 801218a:	3301      	adds	r3, #1
 801218c:	b29b      	uxth	r3, r3
 801218e:	b299      	uxth	r1, r3
 8012190:	00fe      	lsls	r6, r7, #3
 8012192:	458b      	cmp	fp, r1
 8012194:	d9a4      	bls.n	80120e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8012196:	4426      	add	r6, r4
 8012198:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801219c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	; 0xac
 80121a0:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	; 0xb0
 80121a4:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	; 0xac
 80121a8:	4408      	add	r0, r1
 80121aa:	f8be 10b0 	ldrh.w	r1, [lr, #176]	; 0xb0
 80121ae:	4461      	add	r1, ip
 80121b0:	b200      	sxth	r0, r0
 80121b2:	b209      	sxth	r1, r1
 80121b4:	4288      	cmp	r0, r1
 80121b6:	f6bf af72 	bge.w	801209e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80121ba:	4584      	cmp	ip, r0
 80121bc:	4662      	mov	r2, ip
 80121be:	461f      	mov	r7, r3
 80121c0:	bfb8      	it	lt
 80121c2:	4602      	movlt	r2, r0
 80121c4:	3301      	adds	r3, #1
 80121c6:	e7e2      	b.n	801218e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80121c8:	d10e      	bne.n	80121e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80121ca:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 80121ce:	f8be e0b2 	ldrh.w	lr, [lr, #178]	; 0xb2
 80121d2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 80121d6:	4473      	add	r3, lr
 80121d8:	b21b      	sxth	r3, r3
 80121da:	429e      	cmp	r6, r3
 80121dc:	bfa8      	it	ge
 80121de:	461e      	movge	r6, r3
 80121e0:	4287      	cmp	r7, r0
 80121e2:	bfb8      	it	lt
 80121e4:	46e1      	movlt	r9, ip
 80121e6:	e757      	b.n	8012098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80121e8:	4286      	cmp	r6, r0
 80121ea:	bfa8      	it	ge
 80121ec:	4606      	movge	r6, r0
 80121ee:	e753      	b.n	8012098 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80121f0:	eb0a 0007 	add.w	r0, sl, r7
 80121f4:	4427      	add	r7, r4
 80121f6:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	; 0xb2
 80121fa:	f1bb 0f13 	cmp.w	fp, #19
 80121fe:	bfdc      	itt	le
 8012200:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	; 0xae
 8012204:	445e      	addle	r6, fp
 8012206:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801220a:	bfd8      	it	le
 801220c:	b236      	sxthle	r6, r6
 801220e:	f7fb ff76 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8012212:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012216:	2800      	cmp	r0, #0
 8012218:	f47f af1a 	bne.w	8012050 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801221c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8012220:	fa1f fb8b 	uxth.w	fp, fp
 8012224:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8012228:	1ab6      	subs	r6, r6, r2
 801222a:	4829      	ldr	r0, [pc, #164]	; (80122d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801222c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8012230:	2e14      	cmp	r6, #20
 8012232:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8012236:	6800      	ldr	r0, [r0, #0]
 8012238:	bfa8      	it	ge
 801223a:	2614      	movge	r6, #20
 801223c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8012240:	f8ad 201e 	strh.w	r2, [sp, #30]
 8012244:	b289      	uxth	r1, r1
 8012246:	f8ad 3020 	strh.w	r3, [sp, #32]
 801224a:	b2b6      	uxth	r6, r6
 801224c:	f8d0 c000 	ldr.w	ip, [r0]
 8012250:	b292      	uxth	r2, r2
 8012252:	455e      	cmp	r6, fp
 8012254:	bf94      	ite	ls
 8012256:	9600      	strls	r6, [sp, #0]
 8012258:	f8cd b000 	strhi.w	fp, [sp]
 801225c:	b29b      	uxth	r3, r3
 801225e:	f8dc 6090 	ldr.w	r6, [ip, #144]	; 0x90
 8012262:	47b0      	blx	r6
 8012264:	6823      	ldr	r3, [r4, #0]
 8012266:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801226a:	a907      	add	r1, sp, #28
 801226c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801226e:	4620      	mov	r0, r4
 8012270:	4798      	blx	r3
 8012272:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012276:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801227a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 801227e:	1a5b      	subs	r3, r3, r1
 8012280:	440a      	add	r2, r1
 8012282:	b21b      	sxth	r3, r3
 8012284:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 8012288:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 801228c:	2b00      	cmp	r3, #0
 801228e:	f47f aeda 	bne.w	8012046 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8012292:	fa1f f189 	uxth.w	r1, r9
 8012296:	4650      	mov	r0, sl
 8012298:	f7ff f9e8 	bl	801166c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801229c:	e6d3      	b.n	8012046 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801229e:	882e      	ldrh	r6, [r5, #0]
 80122a0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80122a4:	42b3      	cmp	r3, r6
 80122a6:	f67f ae98 	bls.w	8011fda <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80122aa:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 80122ae:	ab07      	add	r3, sp, #28
 80122b0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80122b4:	6851      	ldr	r1, [r2, #4]
 80122b6:	c303      	stmia	r3!, {r0, r1}
 80122b8:	a807      	add	r0, sp, #28
 80122ba:	f7fb ff20 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 80122be:	b920      	cbnz	r0, 80122ca <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80122c0:	6823      	ldr	r3, [r4, #0]
 80122c2:	a907      	add	r1, sp, #28
 80122c4:	4620      	mov	r0, r4
 80122c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80122c8:	4798      	blx	r3
 80122ca:	3601      	adds	r6, #1
 80122cc:	b2b6      	uxth	r6, r6
 80122ce:	e7e7      	b.n	80122a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80122d0:	2401aa3c 	.word	0x2401aa3c

080122d4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80122d4:	4b03      	ldr	r3, [pc, #12]	; (80122e4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80122d6:	2200      	movs	r2, #0
 80122d8:	801a      	strh	r2, [r3, #0]
 80122da:	805a      	strh	r2, [r3, #2]
 80122dc:	809a      	strh	r2, [r3, #4]
 80122de:	80da      	strh	r2, [r3, #6]
 80122e0:	4770      	bx	lr
 80122e2:	bf00      	nop
 80122e4:	2401aa80 	.word	0x2401aa80

080122e8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80122e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122ec:	b09d      	sub	sp, #116	; 0x74
 80122ee:	4606      	mov	r6, r0
 80122f0:	4614      	mov	r4, r2
 80122f2:	468a      	mov	sl, r1
 80122f4:	a803      	add	r0, sp, #12
 80122f6:	461d      	mov	r5, r3
 80122f8:	f000 fd72 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 80122fc:	6833      	ldr	r3, [r6, #0]
 80122fe:	4630      	mov	r0, r6
 8012300:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8012304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012306:	4798      	blx	r3
 8012308:	6833      	ldr	r3, [r6, #0]
 801230a:	4607      	mov	r7, r0
 801230c:	4630      	mov	r0, r6
 801230e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012310:	4798      	blx	r3
 8012312:	462a      	mov	r2, r5
 8012314:	2500      	movs	r5, #0
 8012316:	4621      	mov	r1, r4
 8012318:	9000      	str	r0, [sp, #0]
 801231a:	463b      	mov	r3, r7
 801231c:	462c      	mov	r4, r5
 801231e:	46a9      	mov	r9, r5
 8012320:	46a8      	mov	r8, r5
 8012322:	a803      	add	r0, sp, #12
 8012324:	f000 fdb7 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012328:	2300      	movs	r3, #0
 801232a:	9302      	str	r3, [sp, #8]
 801232c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012330:	429c      	cmp	r4, r3
 8012332:	d002      	beq.n	801233a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8012334:	455c      	cmp	r4, fp
 8012336:	bf18      	it	ne
 8012338:	4625      	movne	r5, r4
 801233a:	ab02      	add	r3, sp, #8
 801233c:	4632      	mov	r2, r6
 801233e:	4651      	mov	r1, sl
 8012340:	a803      	add	r0, sp, #12
 8012342:	f001 f8ad 	bl	80134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012346:	4604      	mov	r4, r0
 8012348:	b108      	cbz	r0, 801234e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801234a:	280a      	cmp	r0, #10
 801234c:	d10a      	bne.n	8012364 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801234e:	45c1      	cmp	r9, r8
 8012350:	bf38      	it	cc
 8012352:	46c1      	movcc	r9, r8
 8012354:	f04f 0800 	mov.w	r8, #0
 8012358:	2c00      	cmp	r4, #0
 801235a:	d1e5      	bne.n	8012328 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801235c:	4648      	mov	r0, r9
 801235e:	b01d      	add	sp, #116	; 0x74
 8012360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012364:	9a02      	ldr	r2, [sp, #8]
 8012366:	2a00      	cmp	r2, #0
 8012368:	d0de      	beq.n	8012328 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801236a:	7b57      	ldrb	r7, [r2, #13]
 801236c:	4629      	mov	r1, r5
 801236e:	6833      	ldr	r3, [r6, #0]
 8012370:	007f      	lsls	r7, r7, #1
 8012372:	8894      	ldrh	r4, [r2, #4]
 8012374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012376:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801237a:	7a97      	ldrb	r7, [r2, #10]
 801237c:	4307      	orrs	r7, r0
 801237e:	4630      	mov	r0, r6
 8012380:	4798      	blx	r3
 8012382:	4438      	add	r0, r7
 8012384:	4480      	add	r8, r0
 8012386:	fa1f f888 	uxth.w	r8, r8
 801238a:	e7e5      	b.n	8012358 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801238c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801238c:	b508      	push	{r3, lr}
 801238e:	6803      	ldr	r3, [r0, #0]
 8012390:	68db      	ldr	r3, [r3, #12]
 8012392:	4798      	blx	r3
 8012394:	b128      	cbz	r0, 80123a2 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8012396:	7b43      	ldrb	r3, [r0, #13]
 8012398:	7a80      	ldrb	r0, [r0, #10]
 801239a:	005b      	lsls	r3, r3, #1
 801239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123a0:	4318      	orrs	r0, r3
 80123a2:	bd08      	pop	{r3, pc}

080123a4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80123a4:	b40e      	push	{r1, r2, r3}
 80123a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123a8:	b09e      	sub	sp, #120	; 0x78
 80123aa:	4605      	mov	r5, r0
 80123ac:	ab23      	add	r3, sp, #140	; 0x8c
 80123ae:	a805      	add	r0, sp, #20
 80123b0:	f853 4b04 	ldr.w	r4, [r3], #4
 80123b4:	9303      	str	r3, [sp, #12]
 80123b6:	f000 fd13 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 80123ba:	682b      	ldr	r3, [r5, #0]
 80123bc:	4628      	mov	r0, r5
 80123be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123c0:	4798      	blx	r3
 80123c2:	682b      	ldr	r3, [r5, #0]
 80123c4:	4606      	mov	r6, r0
 80123c6:	4628      	mov	r0, r5
 80123c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ca:	4798      	blx	r3
 80123cc:	4633      	mov	r3, r6
 80123ce:	4621      	mov	r1, r4
 80123d0:	ae1e      	add	r6, sp, #120	; 0x78
 80123d2:	2400      	movs	r4, #0
 80123d4:	9000      	str	r0, [sp, #0]
 80123d6:	9a03      	ldr	r2, [sp, #12]
 80123d8:	a805      	add	r0, sp, #20
 80123da:	f000 fd5c 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80123de:	f846 4d68 	str.w	r4, [r6, #-104]!
 80123e2:	462a      	mov	r2, r5
 80123e4:	4633      	mov	r3, r6
 80123e6:	4621      	mov	r1, r4
 80123e8:	a805      	add	r0, sp, #20
 80123ea:	f001 f859 	bl	80134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80123ee:	b300      	cbz	r0, 8012432 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80123f0:	280a      	cmp	r0, #10
 80123f2:	d01a      	beq.n	801242a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80123f4:	9f04      	ldr	r7, [sp, #16]
 80123f6:	b1c7      	cbz	r7, 801242a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80123f8:	7b78      	ldrb	r0, [r7, #13]
 80123fa:	7a3b      	ldrb	r3, [r7, #8]
 80123fc:	00c1      	lsls	r1, r0, #3
 80123fe:	88ea      	ldrh	r2, [r5, #6]
 8012400:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8012404:	4319      	orrs	r1, r3
 8012406:	0643      	lsls	r3, r0, #25
 8012408:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801240c:	bf48      	it	mi
 801240e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8012412:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8012416:	bf48      	it	mi
 8012418:	b219      	sxthmi	r1, r3
 801241a:	79fb      	ldrb	r3, [r7, #7]
 801241c:	4303      	orrs	r3, r0
 801241e:	4413      	add	r3, r2
 8012420:	1a5b      	subs	r3, r3, r1
 8012422:	b21b      	sxth	r3, r3
 8012424:	429c      	cmp	r4, r3
 8012426:	bfb8      	it	lt
 8012428:	461c      	movlt	r4, r3
 801242a:	4633      	mov	r3, r6
 801242c:	462a      	mov	r2, r5
 801242e:	2100      	movs	r1, #0
 8012430:	e7da      	b.n	80123e8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8012432:	b2a0      	uxth	r0, r4
 8012434:	b01e      	add	sp, #120	; 0x78
 8012436:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801243a:	b003      	add	sp, #12
 801243c:	4770      	bx	lr

0801243e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801243e:	7a43      	ldrb	r3, [r0, #9]
 8012440:	8880      	ldrh	r0, [r0, #4]
 8012442:	4418      	add	r0, r3
 8012444:	b280      	uxth	r0, r0
 8012446:	4770      	bx	lr

08012448 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8012448:	6803      	ldr	r3, [r0, #0]
 801244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801244c:	4718      	bx	r3

0801244e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801244e:	b40e      	push	{r1, r2, r3}
 8012450:	b570      	push	{r4, r5, r6, lr}
 8012452:	b09d      	sub	sp, #116	; 0x74
 8012454:	4604      	mov	r4, r0
 8012456:	ab21      	add	r3, sp, #132	; 0x84
 8012458:	a803      	add	r0, sp, #12
 801245a:	f853 5b04 	ldr.w	r5, [r3], #4
 801245e:	9302      	str	r3, [sp, #8]
 8012460:	f000 fcbe 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	4620      	mov	r0, r4
 8012468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801246a:	4798      	blx	r3
 801246c:	6823      	ldr	r3, [r4, #0]
 801246e:	4606      	mov	r6, r0
 8012470:	4620      	mov	r0, r4
 8012472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012474:	2401      	movs	r4, #1
 8012476:	4798      	blx	r3
 8012478:	4633      	mov	r3, r6
 801247a:	9000      	str	r0, [sp, #0]
 801247c:	4629      	mov	r1, r5
 801247e:	9a02      	ldr	r2, [sp, #8]
 8012480:	a803      	add	r0, sp, #12
 8012482:	f000 fd08 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012486:	a803      	add	r0, sp, #12
 8012488:	f001 f8d6 	bl	8013638 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801248c:	b2a3      	uxth	r3, r4
 801248e:	b138      	cbz	r0, 80124a0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8012490:	280a      	cmp	r0, #10
 8012492:	a803      	add	r0, sp, #12
 8012494:	bf04      	itt	eq
 8012496:	3301      	addeq	r3, #1
 8012498:	b21c      	sxtheq	r4, r3
 801249a:	f001 f8cd 	bl	8013638 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801249e:	e7f5      	b.n	801248c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80124a0:	4618      	mov	r0, r3
 80124a2:	b01d      	add	sp, #116	; 0x74
 80124a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80124a8:	b003      	add	sp, #12
 80124aa:	4770      	bx	lr

080124ac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80124ac:	b40e      	push	{r1, r2, r3}
 80124ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124b0:	b09e      	sub	sp, #120	; 0x78
 80124b2:	4604      	mov	r4, r0
 80124b4:	ab23      	add	r3, sp, #140	; 0x8c
 80124b6:	a805      	add	r0, sp, #20
 80124b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80124bc:	9303      	str	r3, [sp, #12]
 80124be:	f000 fc8f 	bl	8012de0 <_ZN8touchgfx12TextProviderC1Ev>
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	4620      	mov	r0, r4
 80124c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80124c8:	4798      	blx	r3
 80124ca:	6823      	ldr	r3, [r4, #0]
 80124cc:	4606      	mov	r6, r0
 80124ce:	4620      	mov	r0, r4
 80124d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124d2:	4798      	blx	r3
 80124d4:	4633      	mov	r3, r6
 80124d6:	4629      	mov	r1, r5
 80124d8:	9000      	str	r0, [sp, #0]
 80124da:	9a03      	ldr	r2, [sp, #12]
 80124dc:	a805      	add	r0, sp, #20
 80124de:	f000 fcda 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80124e2:	ad1e      	add	r5, sp, #120	; 0x78
 80124e4:	2100      	movs	r1, #0
 80124e6:	f647 76ff 	movw	r6, #32767	; 0x7fff
 80124ea:	4622      	mov	r2, r4
 80124ec:	a805      	add	r0, sp, #20
 80124ee:	f845 1d68 	str.w	r1, [r5, #-104]!
 80124f2:	462b      	mov	r3, r5
 80124f4:	f000 ffd4 	bl	80134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80124f8:	b1d8      	cbz	r0, 8012532 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80124fa:	280a      	cmp	r0, #10
 80124fc:	d012      	beq.n	8012524 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80124fe:	9804      	ldr	r0, [sp, #16]
 8012500:	b180      	cbz	r0, 8012524 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8012502:	7b47      	ldrb	r7, [r0, #13]
 8012504:	88e2      	ldrh	r2, [r4, #6]
 8012506:	00fb      	lsls	r3, r7, #3
 8012508:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801250c:	7a03      	ldrb	r3, [r0, #8]
 801250e:	430b      	orrs	r3, r1
 8012510:	0679      	lsls	r1, r7, #25
 8012512:	bf44      	itt	mi
 8012514:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8012518:	b21b      	sxthmi	r3, r3
 801251a:	1ad3      	subs	r3, r2, r3
 801251c:	b21b      	sxth	r3, r3
 801251e:	429e      	cmp	r6, r3
 8012520:	bfa8      	it	ge
 8012522:	461e      	movge	r6, r3
 8012524:	462b      	mov	r3, r5
 8012526:	4622      	mov	r2, r4
 8012528:	2100      	movs	r1, #0
 801252a:	a805      	add	r0, sp, #20
 801252c:	f000 ffb8 	bl	80134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012530:	e7e2      	b.n	80124f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8012532:	4630      	mov	r0, r6
 8012534:	b01e      	add	sp, #120	; 0x78
 8012536:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801253a:	b003      	add	sp, #12
 801253c:	4770      	bx	lr

0801253e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801253e:	b513      	push	{r0, r1, r4, lr}
 8012540:	6803      	ldr	r3, [r0, #0]
 8012542:	2400      	movs	r4, #0
 8012544:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012548:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801254c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012550:	4669      	mov	r1, sp
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	9400      	str	r4, [sp, #0]
 8012556:	f8ad 2006 	strh.w	r2, [sp, #6]
 801255a:	4798      	blx	r3
 801255c:	b002      	add	sp, #8
 801255e:	bd10      	pop	{r4, pc}

08012560 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8012560:	b538      	push	{r3, r4, r5, lr}
 8012562:	680b      	ldr	r3, [r1, #0]
 8012564:	460c      	mov	r4, r1
 8012566:	4605      	mov	r5, r0
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	4798      	blx	r3
 801256c:	6823      	ldr	r3, [r4, #0]
 801256e:	4620      	mov	r0, r4
 8012570:	4629      	mov	r1, r5
 8012572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012574:	4798      	blx	r3
 8012576:	4628      	mov	r0, r5
 8012578:	bd38      	pop	{r3, r4, r5, pc}

0801257a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801257a:	b410      	push	{r4}
 801257c:	880a      	ldrh	r2, [r1, #0]
 801257e:	8884      	ldrh	r4, [r0, #4]
 8012580:	4422      	add	r2, r4
 8012582:	800a      	strh	r2, [r1, #0]
 8012584:	884a      	ldrh	r2, [r1, #2]
 8012586:	88c4      	ldrh	r4, [r0, #6]
 8012588:	4422      	add	r2, r4
 801258a:	804a      	strh	r2, [r1, #2]
 801258c:	6940      	ldr	r0, [r0, #20]
 801258e:	b120      	cbz	r0, 801259a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8012590:	6803      	ldr	r3, [r0, #0]
 8012592:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012598:	4718      	bx	r3
 801259a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801259e:	4770      	bx	lr

080125a0 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80125a0:	b570      	push	{r4, r5, r6, lr}
 80125a2:	8882      	ldrh	r2, [r0, #4]
 80125a4:	460c      	mov	r4, r1
 80125a6:	880b      	ldrh	r3, [r1, #0]
 80125a8:	4605      	mov	r5, r0
 80125aa:	4413      	add	r3, r2
 80125ac:	800b      	strh	r3, [r1, #0]
 80125ae:	884b      	ldrh	r3, [r1, #2]
 80125b0:	88c2      	ldrh	r2, [r0, #6]
 80125b2:	4413      	add	r3, r2
 80125b4:	804b      	strh	r3, [r1, #2]
 80125b6:	1d01      	adds	r1, r0, #4
 80125b8:	4620      	mov	r0, r4
 80125ba:	f7fb fd5d 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 80125be:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	dd0b      	ble.n	80125de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80125c6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	dd07      	ble.n	80125de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80125ce:	6968      	ldr	r0, [r5, #20]
 80125d0:	b128      	cbz	r0, 80125de <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80125d2:	6803      	ldr	r3, [r0, #0]
 80125d4:	4621      	mov	r1, r4
 80125d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125dc:	4718      	bx	r3
 80125de:	bd70      	pop	{r4, r5, r6, pc}

080125e0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80125e0:	b570      	push	{r4, r5, r6, lr}
 80125e2:	8882      	ldrh	r2, [r0, #4]
 80125e4:	460c      	mov	r4, r1
 80125e6:	880b      	ldrh	r3, [r1, #0]
 80125e8:	4605      	mov	r5, r0
 80125ea:	4413      	add	r3, r2
 80125ec:	800b      	strh	r3, [r1, #0]
 80125ee:	884b      	ldrh	r3, [r1, #2]
 80125f0:	88c2      	ldrh	r2, [r0, #6]
 80125f2:	4413      	add	r3, r2
 80125f4:	804b      	strh	r3, [r1, #2]
 80125f6:	1d01      	adds	r1, r0, #4
 80125f8:	4620      	mov	r0, r4
 80125fa:	f7fb fd3d 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 80125fe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	dd19      	ble.n	801263a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012606:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801260a:	2b00      	cmp	r3, #0
 801260c:	dd15      	ble.n	801263a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 801260e:	6968      	ldr	r0, [r5, #20]
 8012610:	b128      	cbz	r0, 801261e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8012612:	6803      	ldr	r3, [r0, #0]
 8012614:	4621      	mov	r1, r4
 8012616:	691b      	ldr	r3, [r3, #16]
 8012618:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801261c:	4718      	bx	r3
 801261e:	4b07      	ldr	r3, [pc, #28]	; (801263c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	3304      	adds	r3, #4
 8012624:	429d      	cmp	r5, r3
 8012626:	d108      	bne.n	801263a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8012628:	f7fe ff10 	bl	801144c <_ZN8touchgfx11Application11getInstanceEv>
 801262c:	6803      	ldr	r3, [r0, #0]
 801262e:	6821      	ldr	r1, [r4, #0]
 8012630:	6862      	ldr	r2, [r4, #4]
 8012632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012638:	4718      	bx	r3
 801263a:	bd70      	pop	{r4, r5, r6, pc}
 801263c:	2401aa78 	.word	0x2401aa78

08012640 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8012640:	b570      	push	{r4, r5, r6, lr}
 8012642:	4604      	mov	r4, r0
 8012644:	4616      	mov	r6, r2
 8012646:	460d      	mov	r5, r1
 8012648:	b901      	cbnz	r1, 801264c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801264a:	b192      	cbz	r2, 8012672 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801264c:	6823      	ldr	r3, [r4, #0]
 801264e:	4620      	mov	r0, r4
 8012650:	699b      	ldr	r3, [r3, #24]
 8012652:	4798      	blx	r3
 8012654:	88e2      	ldrh	r2, [r4, #6]
 8012656:	88a1      	ldrh	r1, [r4, #4]
 8012658:	4620      	mov	r0, r4
 801265a:	4432      	add	r2, r6
 801265c:	4429      	add	r1, r5
 801265e:	b212      	sxth	r2, r2
 8012660:	b209      	sxth	r1, r1
 8012662:	f7f8 f832 	bl	800a6ca <_ZN8touchgfx8Drawable5setXYEss>
 8012666:	6823      	ldr	r3, [r4, #0]
 8012668:	4620      	mov	r0, r4
 801266a:	699b      	ldr	r3, [r3, #24]
 801266c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012670:	4718      	bx	r3
 8012672:	bd70      	pop	{r4, r5, r6, pc}

08012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8012674:	b510      	push	{r4, lr}
 8012676:	2300      	movs	r3, #0
 8012678:	4604      	mov	r4, r0
 801267a:	4608      	mov	r0, r1
 801267c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8012680:	8023      	strh	r3, [r4, #0]
 8012682:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012686:	8063      	strh	r3, [r4, #2]
 8012688:	6803      	ldr	r3, [r0, #0]
 801268a:	80a1      	strh	r1, [r4, #4]
 801268c:	4621      	mov	r1, r4
 801268e:	80e2      	strh	r2, [r4, #6]
 8012690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012692:	4798      	blx	r3
 8012694:	4620      	mov	r0, r4
 8012696:	bd10      	pop	{r4, pc}

08012698 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8012698:	b530      	push	{r4, r5, lr}
 801269a:	8083      	strh	r3, [r0, #4]
 801269c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80126a0:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80126a4:	80c3      	strh	r3, [r0, #6]
 80126a6:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80126aa:	6141      	str	r1, [r0, #20]
 80126ac:	7203      	strb	r3, [r0, #8]
 80126ae:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80126b2:	8302      	strh	r2, [r0, #24]
 80126b4:	7243      	strb	r3, [r0, #9]
 80126b6:	7a83      	ldrb	r3, [r0, #10]
 80126b8:	f365 0306 	bfi	r3, r5, #0, #7
 80126bc:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80126c0:	f365 13c7 	bfi	r3, r5, #7, #1
 80126c4:	7283      	strb	r3, [r0, #10]
 80126c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80126ca:	72c3      	strb	r3, [r0, #11]
 80126cc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80126d0:	7303      	strb	r3, [r0, #12]
 80126d2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 80126d6:	81c3      	strh	r3, [r0, #14]
 80126d8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80126dc:	8203      	strh	r3, [r0, #16]
 80126de:	4b01      	ldr	r3, [pc, #4]	; (80126e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80126e0:	6003      	str	r3, [r0, #0]
 80126e2:	bd30      	pop	{r4, r5, pc}
 80126e4:	0801fdbc 	.word	0x0801fdbc

080126e8 <_ZNK8touchgfx9ConstFont4findEt>:
 80126e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ea:	6944      	ldr	r4, [r0, #20]
 80126ec:	b3bc      	cbz	r4, 801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80126ee:	88a3      	ldrh	r3, [r4, #4]
 80126f0:	8b02      	ldrh	r2, [r0, #24]
 80126f2:	1acb      	subs	r3, r1, r3
 80126f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80126f8:	d431      	bmi.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80126fa:	4293      	cmp	r3, r2
 80126fc:	dd0c      	ble.n	8012718 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 80126fe:	230e      	movs	r3, #14
 8012700:	fb03 4302 	mla	r3, r3, r2, r4
 8012704:	889b      	ldrh	r3, [r3, #4]
 8012706:	1a5b      	subs	r3, r3, r1
 8012708:	1ad3      	subs	r3, r2, r3
 801270a:	429a      	cmp	r2, r3
 801270c:	db27      	blt.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801270e:	2b00      	cmp	r3, #0
 8012710:	bfbc      	itt	lt
 8012712:	2302      	movlt	r3, #2
 8012714:	fb92 f3f3 	sdivlt	r3, r2, r3
 8012718:	2500      	movs	r5, #0
 801271a:	260e      	movs	r6, #14
 801271c:	4295      	cmp	r5, r2
 801271e:	dc1e      	bgt.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012720:	fb06 4003 	mla	r0, r6, r3, r4
 8012724:	8887      	ldrh	r7, [r0, #4]
 8012726:	42b9      	cmp	r1, r7
 8012728:	d01a      	beq.n	8012760 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801272a:	d20d      	bcs.n	8012748 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801272c:	1e5a      	subs	r2, r3, #1
 801272e:	4295      	cmp	r5, r2
 8012730:	dc15      	bgt.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012732:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8012736:	1a5b      	subs	r3, r3, r1
 8012738:	1ad3      	subs	r3, r2, r3
 801273a:	429a      	cmp	r2, r3
 801273c:	db0f      	blt.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801273e:	429d      	cmp	r5, r3
 8012740:	ddec      	ble.n	801271c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012742:	1953      	adds	r3, r2, r5
 8012744:	105b      	asrs	r3, r3, #1
 8012746:	e7e9      	b.n	801271c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8012748:	1c5d      	adds	r5, r3, #1
 801274a:	42aa      	cmp	r2, r5
 801274c:	db07      	blt.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801274e:	8a43      	ldrh	r3, [r0, #18]
 8012750:	1acb      	subs	r3, r1, r3
 8012752:	442b      	add	r3, r5
 8012754:	429d      	cmp	r5, r3
 8012756:	dc02      	bgt.n	801275e <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8012758:	429a      	cmp	r2, r3
 801275a:	dadf      	bge.n	801271c <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801275c:	e7f1      	b.n	8012742 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801275e:	2000      	movs	r0, #0
 8012760:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012762 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8012762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012764:	4604      	mov	r4, r0
 8012766:	4617      	mov	r7, r2
 8012768:	461e      	mov	r6, r3
 801276a:	b911      	cbnz	r1, 8012772 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801276c:	2500      	movs	r5, #0
 801276e:	4628      	mov	r0, r5
 8012770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012772:	290a      	cmp	r1, #10
 8012774:	d0fa      	beq.n	801276c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012776:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801277a:	4291      	cmp	r1, r2
 801277c:	d0f6      	beq.n	801276c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801277e:	f242 020b 	movw	r2, #8203	; 0x200b
 8012782:	4291      	cmp	r1, r2
 8012784:	d0f2      	beq.n	801276c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8012786:	f7ff ffaf 	bl	80126e8 <_ZNK8touchgfx9ConstFont4findEt>
 801278a:	4605      	mov	r5, r0
 801278c:	b950      	cbnz	r0, 80127a4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	4620      	mov	r0, r4
 8012792:	691b      	ldr	r3, [r3, #16]
 8012794:	4798      	blx	r3
 8012796:	4601      	mov	r1, r0
 8012798:	4620      	mov	r0, r4
 801279a:	f7ff ffa5 	bl	80126e8 <_ZNK8touchgfx9ConstFont4findEt>
 801279e:	4605      	mov	r5, r0
 80127a0:	2800      	cmp	r0, #0
 80127a2:	d0e3      	beq.n	801276c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80127a4:	6823      	ldr	r3, [r4, #0]
 80127a6:	4629      	mov	r1, r5
 80127a8:	4620      	mov	r0, r4
 80127aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127ac:	4798      	blx	r3
 80127ae:	6038      	str	r0, [r7, #0]
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	4620      	mov	r0, r4
 80127b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127b6:	4798      	blx	r3
 80127b8:	7030      	strb	r0, [r6, #0]
 80127ba:	e7d8      	b.n	801276e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080127bc <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80127bc:	2000      	movs	r0, #0
 80127be:	4770      	bx	lr

080127c0 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80127c0:	2001      	movs	r0, #1
 80127c2:	4770      	bx	lr

080127c4 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80127c4:	2002      	movs	r0, #2
 80127c6:	4770      	bx	lr

080127c8 <_ZN8touchgfx12GestureEventD1Ev>:
 80127c8:	4770      	bx	lr

080127ca <_ZN8touchgfx9DragEventD1Ev>:
 80127ca:	4770      	bx	lr

080127cc <_ZN8touchgfx10ClickEventD1Ev>:
 80127cc:	4770      	bx	lr

080127ce <_ZN8touchgfx10ClickEventD0Ev>:
 80127ce:	b510      	push	{r4, lr}
 80127d0:	4604      	mov	r4, r0
 80127d2:	210c      	movs	r1, #12
 80127d4:	f00a fe1d 	bl	801d412 <_ZdlPvj>
 80127d8:	4620      	mov	r0, r4
 80127da:	bd10      	pop	{r4, pc}

080127dc <_ZN8touchgfx9DragEventD0Ev>:
 80127dc:	b510      	push	{r4, lr}
 80127de:	4604      	mov	r4, r0
 80127e0:	2110      	movs	r1, #16
 80127e2:	f00a fe16 	bl	801d412 <_ZdlPvj>
 80127e6:	4620      	mov	r0, r4
 80127e8:	bd10      	pop	{r4, pc}

080127ea <_ZN8touchgfx12GestureEventD0Ev>:
 80127ea:	b510      	push	{r4, lr}
 80127ec:	4604      	mov	r4, r0
 80127ee:	210c      	movs	r1, #12
 80127f0:	f00a fe0f 	bl	801d412 <_ZdlPvj>
 80127f4:	4620      	mov	r0, r4
 80127f6:	bd10      	pop	{r4, pc}

080127f8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 80127f8:	b530      	push	{r4, r5, lr}
 80127fa:	460d      	mov	r5, r1
 80127fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80127fe:	b087      	sub	sp, #28
 8012800:	4604      	mov	r4, r0
 8012802:	b301      	cbz	r1, 8012846 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8012804:	a801      	add	r0, sp, #4
 8012806:	f7ff ff35 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801280a:	892a      	ldrh	r2, [r5, #8]
 801280c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8012810:	7928      	ldrb	r0, [r5, #4]
 8012812:	1ad2      	subs	r2, r2, r3
 8012814:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8012816:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801281a:	441a      	add	r2, r3
 801281c:	896b      	ldrh	r3, [r5, #10]
 801281e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8012822:	f88d 0010 	strb.w	r0, [sp, #16]
 8012826:	1b5b      	subs	r3, r3, r5
 8012828:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801282a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801282c:	442b      	add	r3, r5
 801282e:	4d07      	ldr	r5, [pc, #28]	; (801284c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8012830:	f8ad 1012 	strh.w	r1, [sp, #18]
 8012834:	a903      	add	r1, sp, #12
 8012836:	9503      	str	r5, [sp, #12]
 8012838:	f8ad 2014 	strh.w	r2, [sp, #20]
 801283c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012840:	6803      	ldr	r3, [r0, #0]
 8012842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012844:	4798      	blx	r3
 8012846:	b007      	add	sp, #28
 8012848:	bd30      	pop	{r4, r5, pc}
 801284a:	bf00      	nop
 801284c:	0801fe44 	.word	0x0801fe44

08012850 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8012850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012854:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8012856:	b08a      	sub	sp, #40	; 0x28
 8012858:	4604      	mov	r4, r0
 801285a:	460d      	mov	r5, r1
 801285c:	b113      	cbz	r3, 8012864 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801285e:	790b      	ldrb	r3, [r1, #4]
 8012860:	2b00      	cmp	r3, #0
 8012862:	d044      	beq.n	80128ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8012864:	f104 0804 	add.w	r8, r4, #4
 8012868:	a803      	add	r0, sp, #12
 801286a:	4641      	mov	r1, r8
 801286c:	f7ff ff02 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012870:	792b      	ldrb	r3, [r5, #4]
 8012872:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8012876:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801287a:	b983      	cbnz	r3, 801289e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801287c:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8012880:	892a      	ldrh	r2, [r5, #8]
 8012882:	88e9      	ldrh	r1, [r5, #6]
 8012884:	4640      	mov	r0, r8
 8012886:	1b92      	subs	r2, r2, r6
 8012888:	9301      	str	r3, [sp, #4]
 801288a:	1bc9      	subs	r1, r1, r7
 801288c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8012890:	b212      	sxth	r2, r2
 8012892:	9300      	str	r3, [sp, #0]
 8012894:	b209      	sxth	r1, r1
 8012896:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801289a:	f7fb fb0b 	bl	800deb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801289e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80128a0:	b329      	cbz	r1, 80128ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80128a2:	a805      	add	r0, sp, #20
 80128a4:	f7ff fee6 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80128a8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80128ac:	792b      	ldrb	r3, [r5, #4]
 80128ae:	a907      	add	r1, sp, #28
 80128b0:	1abf      	subs	r7, r7, r2
 80128b2:	88ea      	ldrh	r2, [r5, #6]
 80128b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80128b6:	4417      	add	r7, r2
 80128b8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80128ba:	f88d 3020 	strb.w	r3, [sp, #32]
 80128be:	4417      	add	r7, r2
 80128c0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80128c4:	1ab6      	subs	r6, r6, r2
 80128c6:	892a      	ldrh	r2, [r5, #8]
 80128c8:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80128cc:	4416      	add	r6, r2
 80128ce:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80128d0:	4416      	add	r6, r2
 80128d2:	4a08      	ldr	r2, [pc, #32]	; (80128f4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80128d4:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 80128d8:	2600      	movs	r6, #0
 80128da:	9207      	str	r2, [sp, #28]
 80128dc:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 80128e0:	6803      	ldr	r3, [r0, #0]
 80128e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128e4:	4798      	blx	r3
 80128e6:	792b      	ldrb	r3, [r5, #4]
 80128e8:	b10b      	cbz	r3, 80128ee <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80128ea:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 80128ee:	b00a      	add	sp, #40	; 0x28
 80128f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128f4:	0801fe1c 	.word	0x0801fe1c

080128f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 80128f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128fc:	460c      	mov	r4, r1
 80128fe:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8012900:	b088      	sub	sp, #32
 8012902:	4605      	mov	r5, r0
 8012904:	2900      	cmp	r1, #0
 8012906:	d06d      	beq.n	80129e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8012908:	4668      	mov	r0, sp
 801290a:	f7ff feb3 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801290e:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8012910:	88e3      	ldrh	r3, [r4, #6]
 8012912:	f9bd 8000 	ldrsh.w	r8, [sp]
 8012916:	440b      	add	r3, r1
 8012918:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801291c:	b21b      	sxth	r3, r3
 801291e:	4543      	cmp	r3, r8
 8012920:	db31      	blt.n	8012986 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012922:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8012926:	44c4      	add	ip, r8
 8012928:	fa0f fc8c 	sxth.w	ip, ip
 801292c:	4563      	cmp	r3, ip
 801292e:	da2a      	bge.n	8012986 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012930:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8012932:	8926      	ldrh	r6, [r4, #8]
 8012934:	4416      	add	r6, r2
 8012936:	b236      	sxth	r6, r6
 8012938:	42be      	cmp	r6, r7
 801293a:	db24      	blt.n	8012986 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801293c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8012940:	4438      	add	r0, r7
 8012942:	b200      	sxth	r0, r0
 8012944:	4286      	cmp	r6, r0
 8012946:	da1e      	bge.n	8012986 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012948:	8963      	ldrh	r3, [r4, #10]
 801294a:	4419      	add	r1, r3
 801294c:	b209      	sxth	r1, r1
 801294e:	4541      	cmp	r1, r8
 8012950:	db08      	blt.n	8012964 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012952:	4561      	cmp	r1, ip
 8012954:	da06      	bge.n	8012964 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012956:	89a3      	ldrh	r3, [r4, #12]
 8012958:	441a      	add	r2, r3
 801295a:	b212      	sxth	r2, r2
 801295c:	42ba      	cmp	r2, r7
 801295e:	db01      	blt.n	8012964 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8012960:	4282      	cmp	r2, r0
 8012962:	db10      	blt.n	8012986 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8012964:	4b21      	ldr	r3, [pc, #132]	; (80129ec <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8012966:	a904      	add	r1, sp, #16
 8012968:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801296a:	9304      	str	r3, [sp, #16]
 801296c:	2302      	movs	r3, #2
 801296e:	f88d 3014 	strb.w	r3, [sp, #20]
 8012972:	2300      	movs	r3, #0
 8012974:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012978:	f8ad 3018 	strh.w	r3, [sp, #24]
 801297c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8012980:	6803      	ldr	r3, [r0, #0]
 8012982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012984:	4798      	blx	r3
 8012986:	1d29      	adds	r1, r5, #4
 8012988:	a802      	add	r0, sp, #8
 801298a:	f7ff fe73 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801298e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012992:	88e0      	ldrh	r0, [r4, #6]
 8012994:	eba3 0808 	sub.w	r8, r3, r8
 8012998:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801299c:	7921      	ldrb	r1, [r4, #4]
 801299e:	fa1f f888 	uxth.w	r8, r8
 80129a2:	1bdf      	subs	r7, r3, r7
 80129a4:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80129a8:	b2bb      	uxth	r3, r7
 80129aa:	4440      	add	r0, r8
 80129ac:	8922      	ldrh	r2, [r4, #8]
 80129ae:	8967      	ldrh	r7, [r4, #10]
 80129b0:	4460      	add	r0, ip
 80129b2:	89a4      	ldrh	r4, [r4, #12]
 80129b4:	441a      	add	r2, r3
 80129b6:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80129b8:	44b8      	add	r8, r7
 80129ba:	4423      	add	r3, r4
 80129bc:	f8ad 0016 	strh.w	r0, [sp, #22]
 80129c0:	4432      	add	r2, r6
 80129c2:	44e0      	add	r8, ip
 80129c4:	4433      	add	r3, r6
 80129c6:	4c0a      	ldr	r4, [pc, #40]	; (80129f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80129c8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80129ca:	f88d 1014 	strb.w	r1, [sp, #20]
 80129ce:	a904      	add	r1, sp, #16
 80129d0:	9404      	str	r4, [sp, #16]
 80129d2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80129d6:	f8ad 801a 	strh.w	r8, [sp, #26]
 80129da:	f8ad 301c 	strh.w	r3, [sp, #28]
 80129de:	6803      	ldr	r3, [r0, #0]
 80129e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80129e2:	4798      	blx	r3
 80129e4:	b008      	add	sp, #32
 80129e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ea:	bf00      	nop
 80129ec:	0801fe1c 	.word	0x0801fe1c
 80129f0:	0801fe30 	.word	0x0801fe30

080129f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 80129f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80129f6:	4604      	mov	r4, r0
 80129f8:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 80129fc:	3201      	adds	r2, #1
 80129fe:	d112      	bne.n	8012a26 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8012a00:	2500      	movs	r5, #0
 8012a02:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012a06:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012a0a:	6803      	ldr	r3, [r0, #0]
 8012a0c:	9500      	str	r5, [sp, #0]
 8012a0e:	466d      	mov	r5, sp
 8012a10:	f8ad 1004 	strh.w	r1, [sp, #4]
 8012a14:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012a18:	4629      	mov	r1, r5
 8012a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a1c:	4798      	blx	r3
 8012a1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012a22:	e884 0003 	stmia.w	r4, {r0, r1}
 8012a26:	4620      	mov	r0, r4
 8012a28:	b003      	add	sp, #12
 8012a2a:	bd30      	pop	{r4, r5, pc}

08012a2c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8012a2c:	b513      	push	{r0, r1, r4, lr}
 8012a2e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8012a32:	4604      	mov	r4, r0
 8012a34:	3301      	adds	r3, #1
 8012a36:	d109      	bne.n	8012a4c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8012a38:	4601      	mov	r1, r0
 8012a3a:	4668      	mov	r0, sp
 8012a3c:	f7ff fe1a 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012a40:	f8bd 3000 	ldrh.w	r3, [sp]
 8012a44:	8423      	strh	r3, [r4, #32]
 8012a46:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012a4a:	8463      	strh	r3, [r4, #34]	; 0x22
 8012a4c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8012a50:	b002      	add	sp, #8
 8012a52:	bd10      	pop	{r4, pc}

08012a54 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8012a54:	b513      	push	{r0, r1, r4, lr}
 8012a56:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8012a5a:	4604      	mov	r4, r0
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	d109      	bne.n	8012a74 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8012a60:	4601      	mov	r1, r0
 8012a62:	4668      	mov	r0, sp
 8012a64:	f7ff fe06 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012a68:	f8bd 3000 	ldrh.w	r3, [sp]
 8012a6c:	8423      	strh	r3, [r4, #32]
 8012a6e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012a72:	8463      	strh	r3, [r4, #34]	; 0x22
 8012a74:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8012a78:	b002      	add	sp, #8
 8012a7a:	bd10      	pop	{r4, pc}

08012a7c <_ZN8touchgfx6ScreenC1Ev>:
 8012a7c:	b570      	push	{r4, r5, r6, lr}
 8012a7e:	4b17      	ldr	r3, [pc, #92]	; (8012adc <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8012a80:	4605      	mov	r5, r0
 8012a82:	4a17      	ldr	r2, [pc, #92]	; (8012ae0 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8012a84:	2101      	movs	r1, #1
 8012a86:	f845 3b04 	str.w	r3, [r5], #4
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	6042      	str	r2, [r0, #4]
 8012a8e:	4604      	mov	r4, r0
 8012a90:	8103      	strh	r3, [r0, #8]
 8012a92:	8143      	strh	r3, [r0, #10]
 8012a94:	8183      	strh	r3, [r0, #12]
 8012a96:	81c3      	strh	r3, [r0, #14]
 8012a98:	8203      	strh	r3, [r0, #16]
 8012a9a:	8243      	strh	r3, [r0, #18]
 8012a9c:	8283      	strh	r3, [r0, #20]
 8012a9e:	82c3      	strh	r3, [r0, #22]
 8012aa0:	6203      	str	r3, [r0, #32]
 8012aa2:	8483      	strh	r3, [r0, #36]	; 0x24
 8012aa4:	84c3      	strh	r3, [r0, #38]	; 0x26
 8012aa6:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8012aaa:	6343      	str	r3, [r0, #52]	; 0x34
 8012aac:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8012ab0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8012ab4:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8012ab8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8012abc:	4b09      	ldr	r3, [pc, #36]	; (8012ae4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012ac4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8012ac6:	4a08      	ldr	r2, [pc, #32]	; (8012ae8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8012ac8:	f9b2 1000 	ldrsh.w	r1, [r2]
 8012acc:	4798      	blx	r3
 8012ace:	6863      	ldr	r3, [r4, #4]
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	4631      	mov	r1, r6
 8012ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012ad6:	4798      	blx	r3
 8012ad8:	4620      	mov	r0, r4
 8012ada:	bd70      	pop	{r4, r5, r6, pc}
 8012adc:	0801fe58 	.word	0x0801fe58
 8012ae0:	0801f8f4 	.word	0x0801f8f4
 8012ae4:	2401aa32 	.word	0x2401aa32
 8012ae8:	2401aa30 	.word	0x2401aa30

08012aec <_ZN8touchgfx6Screen4drawEv>:
 8012aec:	4b09      	ldr	r3, [pc, #36]	; (8012b14 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8012aee:	b507      	push	{r0, r1, r2, lr}
 8012af0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012af4:	2100      	movs	r1, #0
 8012af6:	4b08      	ldr	r3, [pc, #32]	; (8012b18 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8012af8:	9100      	str	r1, [sp, #0]
 8012afa:	4669      	mov	r1, sp
 8012afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b00:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012b04:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012b08:	6803      	ldr	r3, [r0, #0]
 8012b0a:	689b      	ldr	r3, [r3, #8]
 8012b0c:	4798      	blx	r3
 8012b0e:	b003      	add	sp, #12
 8012b10:	f85d fb04 	ldr.w	pc, [sp], #4
 8012b14:	2401aa30 	.word	0x2401aa30
 8012b18:	2401aa32 	.word	0x2401aa32

08012b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8012b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b20:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012b24:	b089      	sub	sp, #36	; 0x24
 8012b26:	4680      	mov	r8, r0
 8012b28:	460c      	mov	r4, r1
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	4615      	mov	r5, r2
 8012b2e:	dd0e      	ble.n	8012b4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012b30:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	dd0a      	ble.n	8012b4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f7ff ff5b 	bl	80129f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012b3e:	4621      	mov	r1, r4
 8012b40:	f7fe fba6 	bl	8011290 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012b44:	69eb      	ldr	r3, [r5, #28]
 8012b46:	b928      	cbnz	r0, 8012b54 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8012b48:	461d      	mov	r5, r3
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1f4      	bne.n	8012b38 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8012b4e:	b009      	add	sp, #36	; 0x24
 8012b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b54:	ae04      	add	r6, sp, #16
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	f000 80b5 	beq.w	8012cc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012b5c:	682b      	ldr	r3, [r5, #0]
 8012b5e:	4629      	mov	r1, r5
 8012b60:	a802      	add	r0, sp, #8
 8012b62:	68db      	ldr	r3, [r3, #12]
 8012b64:	4798      	blx	r3
 8012b66:	4628      	mov	r0, r5
 8012b68:	f7ff ff60 	bl	8012a2c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012b6c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8012b70:	4407      	add	r7, r0
 8012b72:	4628      	mov	r0, r5
 8012b74:	f7ff ff6e 	bl	8012a54 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012b78:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8012b7c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8012b80:	b23f      	sxth	r7, r7
 8012b82:	4418      	add	r0, r3
 8012b84:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8012b88:	4621      	mov	r1, r4
 8012b8a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012b8e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012b92:	4630      	mov	r0, r6
 8012b94:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012b98:	f8ad 7010 	strh.w	r7, [sp, #16]
 8012b9c:	f7fb fa6c 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f7ff ff27 	bl	80129f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012ba6:	ab06      	add	r3, sp, #24
 8012ba8:	4602      	mov	r2, r0
 8012baa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012bae:	e883 0003 	stmia.w	r3, {r0, r1}
 8012bb2:	4611      	mov	r1, r2
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fb fa5f 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 8012bba:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8012bbe:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012bc2:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8012bc6:	4299      	cmp	r1, r3
 8012bc8:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8012bcc:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8012bd0:	d10b      	bne.n	8012bea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012bd2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012bd6:	4552      	cmp	r2, sl
 8012bd8:	d107      	bne.n	8012bea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012bda:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8012bde:	455a      	cmp	r2, fp
 8012be0:	d103      	bne.n	8012bea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8012be2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012be6:	454a      	cmp	r2, r9
 8012be8:	d06d      	beq.n	8012cc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012bea:	f1bb 0f00 	cmp.w	fp, #0
 8012bee:	dd65      	ble.n	8012cbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012bf0:	f1b9 0f00 	cmp.w	r9, #0
 8012bf4:	dd62      	ble.n	8012cbc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8012bf6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8012bfa:	fa1f f08a 	uxth.w	r0, sl
 8012bfe:	4552      	cmp	r2, sl
 8012c00:	9000      	str	r0, [sp, #0]
 8012c02:	da12      	bge.n	8012c2a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8012c04:	9301      	str	r3, [sp, #4]
 8012c06:	9b00      	ldr	r3, [sp, #0]
 8012c08:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012c0c:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012c10:	1a9a      	subs	r2, r3, r2
 8012c12:	f8ad 1010 	strh.w	r1, [sp, #16]
 8012c16:	4631      	mov	r1, r6
 8012c18:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012c1c:	4640      	mov	r0, r8
 8012c1e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8012c22:	69ea      	ldr	r2, [r5, #28]
 8012c24:	f7ff ff7a 	bl	8012b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012c28:	9b01      	ldr	r3, [sp, #4]
 8012c2a:	f9b4 2000 	ldrsh.w	r2, [r4]
 8012c2e:	b29f      	uxth	r7, r3
 8012c30:	429a      	cmp	r2, r3
 8012c32:	da0d      	bge.n	8012c50 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8012c34:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012c38:	1aba      	subs	r2, r7, r2
 8012c3a:	f8ad a012 	strh.w	sl, [sp, #18]
 8012c3e:	4631      	mov	r1, r6
 8012c40:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012c44:	4640      	mov	r0, r8
 8012c46:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012c4a:	69ea      	ldr	r2, [r5, #28]
 8012c4c:	f7ff ff66 	bl	8012b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012c50:	8822      	ldrh	r2, [r4, #0]
 8012c52:	445f      	add	r7, fp
 8012c54:	88a3      	ldrh	r3, [r4, #4]
 8012c56:	b2bf      	uxth	r7, r7
 8012c58:	4413      	add	r3, r2
 8012c5a:	b23a      	sxth	r2, r7
 8012c5c:	b29b      	uxth	r3, r3
 8012c5e:	b219      	sxth	r1, r3
 8012c60:	4291      	cmp	r1, r2
 8012c62:	dd0d      	ble.n	8012c80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8012c64:	1bdb      	subs	r3, r3, r7
 8012c66:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012c6a:	f8ad a012 	strh.w	sl, [sp, #18]
 8012c6e:	4631      	mov	r1, r6
 8012c70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012c74:	4640      	mov	r0, r8
 8012c76:	f8ad 9016 	strh.w	r9, [sp, #22]
 8012c7a:	69ea      	ldr	r2, [r5, #28]
 8012c7c:	f7ff ff4e 	bl	8012b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012c80:	88e2      	ldrh	r2, [r4, #6]
 8012c82:	8863      	ldrh	r3, [r4, #2]
 8012c84:	4413      	add	r3, r2
 8012c86:	9a00      	ldr	r2, [sp, #0]
 8012c88:	444a      	add	r2, r9
 8012c8a:	b29b      	uxth	r3, r3
 8012c8c:	fa1f f982 	uxth.w	r9, r2
 8012c90:	b219      	sxth	r1, r3
 8012c92:	fa0f f289 	sxth.w	r2, r9
 8012c96:	428a      	cmp	r2, r1
 8012c98:	da15      	bge.n	8012cc6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8012c9a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012c9e:	eba3 0309 	sub.w	r3, r3, r9
 8012ca2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012ca6:	f8ad 1014 	strh.w	r1, [sp, #20]
 8012caa:	4631      	mov	r1, r6
 8012cac:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012cb0:	f8ad 2012 	strh.w	r2, [sp, #18]
 8012cb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012cb8:	69ea      	ldr	r2, [r5, #28]
 8012cba:	e001      	b.n	8012cc0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8012cbc:	69ea      	ldr	r2, [r5, #28]
 8012cbe:	4621      	mov	r1, r4
 8012cc0:	4640      	mov	r0, r8
 8012cc2:	f7ff ff2b 	bl	8012b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012cc6:	4628      	mov	r0, r5
 8012cc8:	f7ff fe94 	bl	80129f4 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8012ccc:	6861      	ldr	r1, [r4, #4]
 8012cce:	4602      	mov	r2, r0
 8012cd0:	4633      	mov	r3, r6
 8012cd2:	6820      	ldr	r0, [r4, #0]
 8012cd4:	c303      	stmia	r3!, {r0, r1}
 8012cd6:	4611      	mov	r1, r2
 8012cd8:	4630      	mov	r0, r6
 8012cda:	f7fb f9cd 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 8012cde:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f77f af33 	ble.w	8012b4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012ce8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	f77f af2e 	ble.w	8012b4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8012cf2:	4628      	mov	r0, r5
 8012cf4:	f7ff fe9a 	bl	8012a2c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8012cf8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8012cfc:	1a18      	subs	r0, r3, r0
 8012cfe:	f8ad 0010 	strh.w	r0, [sp, #16]
 8012d02:	4628      	mov	r0, r5
 8012d04:	f7ff fea6 	bl	8012a54 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8012d08:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8012d0c:	4631      	mov	r1, r6
 8012d0e:	1a18      	subs	r0, r3, r0
 8012d10:	f8ad 0012 	strh.w	r0, [sp, #18]
 8012d14:	4628      	mov	r0, r5
 8012d16:	682b      	ldr	r3, [r5, #0]
 8012d18:	689b      	ldr	r3, [r3, #8]
 8012d1a:	4798      	blx	r3
 8012d1c:	e717      	b.n	8012b4e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08012d1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8012d1e:	b570      	push	{r4, r5, r6, lr}
 8012d20:	1d06      	adds	r6, r0, #4
 8012d22:	b086      	sub	sp, #24
 8012d24:	460c      	mov	r4, r1
 8012d26:	2300      	movs	r3, #0
 8012d28:	4631      	mov	r1, r6
 8012d2a:	4605      	mov	r5, r0
 8012d2c:	a802      	add	r0, sp, #8
 8012d2e:	9301      	str	r3, [sp, #4]
 8012d30:	f7ff fca0 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012d34:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8012d38:	8822      	ldrh	r2, [r4, #0]
 8012d3a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8012d3e:	1ad2      	subs	r2, r2, r3
 8012d40:	8863      	ldrh	r3, [r4, #2]
 8012d42:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8012d46:	1a5b      	subs	r3, r3, r1
 8012d48:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8012d4c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8012d50:	aa01      	add	r2, sp, #4
 8012d52:	f8ad 0014 	strh.w	r0, [sp, #20]
 8012d56:	4630      	mov	r0, r6
 8012d58:	f8ad 1016 	strh.w	r1, [sp, #22]
 8012d5c:	a904      	add	r1, sp, #16
 8012d5e:	f8ad 3012 	strh.w	r3, [sp, #18]
 8012d62:	f7fb fa61 	bl	800e228 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8012d66:	9a01      	ldr	r2, [sp, #4]
 8012d68:	b11a      	cbz	r2, 8012d72 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8012d6a:	4621      	mov	r1, r4
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	f7ff fed5 	bl	8012b1c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8012d72:	b006      	add	sp, #24
 8012d74:	bd70      	pop	{r4, r5, r6, pc}

08012d76 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8012d76:	4602      	mov	r2, r0
 8012d78:	b530      	push	{r4, r5, lr}
 8012d7a:	4604      	mov	r4, r0
 8012d7c:	b085      	sub	sp, #20
 8012d7e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8012d82:	460d      	mov	r5, r1
 8012d84:	466b      	mov	r3, sp
 8012d86:	6851      	ldr	r1, [r2, #4]
 8012d88:	c303      	stmia	r3!, {r0, r1}
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	4668      	mov	r0, sp
 8012d8e:	f7fb f973 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 8012d92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012d96:	b12b      	cbz	r3, 8012da4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8012d98:	4669      	mov	r1, sp
 8012d9a:	4620      	mov	r0, r4
 8012d9c:	f7ff ffbf 	bl	8012d1e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8012da0:	b005      	add	sp, #20
 8012da2:	bd30      	pop	{r4, r5, pc}
 8012da4:	3404      	adds	r4, #4
 8012da6:	a802      	add	r0, sp, #8
 8012da8:	4621      	mov	r1, r4
 8012daa:	f7ff fc63 	bl	8012674 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012dae:	f8bd 3000 	ldrh.w	r3, [sp]
 8012db2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8012db6:	4669      	mov	r1, sp
 8012db8:	4620      	mov	r0, r4
 8012dba:	1a9b      	subs	r3, r3, r2
 8012dbc:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8012dc0:	f8ad 3000 	strh.w	r3, [sp]
 8012dc4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012dc8:	1a9b      	subs	r3, r3, r2
 8012dca:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012dce:	f7fb f9f2 	bl	800e1b6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8012dd2:	e7e5      	b.n	8012da0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08012dd4 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	680a      	ldr	r2, [r1, #0]
 8012dd8:	1d01      	adds	r1, r0, #4
 8012dda:	6992      	ldr	r2, [r2, #24]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	4710      	bx	r2

08012de0 <_ZN8touchgfx12TextProviderC1Ev>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	2500      	movs	r5, #0
 8012de4:	2302      	movs	r3, #2
 8012de6:	4604      	mov	r4, r0
 8012de8:	220e      	movs	r2, #14
 8012dea:	7403      	strb	r3, [r0, #16]
 8012dec:	4629      	mov	r1, r5
 8012dee:	6145      	str	r5, [r0, #20]
 8012df0:	7605      	strb	r5, [r0, #24]
 8012df2:	83c5      	strh	r5, [r0, #30]
 8012df4:	8405      	strh	r5, [r0, #32]
 8012df6:	86c5      	strh	r5, [r0, #54]	; 0x36
 8012df8:	8705      	strh	r5, [r0, #56]	; 0x38
 8012dfa:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8012dfc:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8012e00:	e9c0 5500 	strd	r5, r5, [r0]
 8012e04:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8012e08:	304c      	adds	r0, #76	; 0x4c
 8012e0a:	f00a fd36 	bl	801d87a <memset>
 8012e0e:	2301      	movs	r3, #1
 8012e10:	4620      	mov	r0, r4
 8012e12:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8012e16:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8012e1a:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8012e1e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8012e22:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8012e26:	f7f8 fd8d 	bl	800b944 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8012e2a:	4620      	mov	r0, r4
 8012e2c:	bd38      	pop	{r3, r4, r5, pc}

08012e2e <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8012e2e:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8012e30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8012e34:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8012e36:	fab0 f080 	clz	r0, r0
 8012e3a:	0940      	lsrs	r0, r0, #5
 8012e3c:	4770      	bx	lr

08012e3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8012e3e:	b530      	push	{r4, r5, lr}
 8012e40:	2500      	movs	r5, #0
 8012e42:	2401      	movs	r4, #1
 8012e44:	6843      	ldr	r3, [r0, #4]
 8012e46:	b913      	cbnz	r3, 8012e4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8012e48:	6803      	ldr	r3, [r0, #0]
 8012e4a:	b313      	cbz	r3, 8012e92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8012e4c:	6043      	str	r3, [r0, #4]
 8012e4e:	7e03      	ldrb	r3, [r0, #24]
 8012e50:	b143      	cbz	r3, 8012e64 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8012e52:	6943      	ldr	r3, [r0, #20]
 8012e54:	b12b      	cbz	r3, 8012e62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8012e56:	881a      	ldrh	r2, [r3, #0]
 8012e58:	b11a      	cbz	r2, 8012e62 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8012e5a:	1c9a      	adds	r2, r3, #2
 8012e5c:	6142      	str	r2, [r0, #20]
 8012e5e:	8818      	ldrh	r0, [r3, #0]
 8012e60:	bd30      	pop	{r4, r5, pc}
 8012e62:	7605      	strb	r5, [r0, #24]
 8012e64:	6843      	ldr	r3, [r0, #4]
 8012e66:	8819      	ldrh	r1, [r3, #0]
 8012e68:	b199      	cbz	r1, 8012e92 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8012e6a:	1c9a      	adds	r2, r3, #2
 8012e6c:	2902      	cmp	r1, #2
 8012e6e:	6042      	str	r2, [r0, #4]
 8012e70:	d1f5      	bne.n	8012e5e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8012e72:	7c03      	ldrb	r3, [r0, #16]
 8012e74:	2b01      	cmp	r3, #1
 8012e76:	d8e5      	bhi.n	8012e44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012e78:	1c5a      	adds	r2, r3, #1
 8012e7a:	3302      	adds	r3, #2
 8012e7c:	7402      	strb	r2, [r0, #16]
 8012e7e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8012e82:	6143      	str	r3, [r0, #20]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d0dd      	beq.n	8012e44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012e88:	881b      	ldrh	r3, [r3, #0]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d0da      	beq.n	8012e44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012e8e:	7604      	strb	r4, [r0, #24]
 8012e90:	e7d8      	b.n	8012e44 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8012e92:	2000      	movs	r0, #0
 8012e94:	e7e4      	b.n	8012e60 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8012e96:	6001      	str	r1, [r0, #0]
 8012e98:	2100      	movs	r1, #0
 8012e9a:	b430      	push	{r4, r5}
 8012e9c:	6041      	str	r1, [r0, #4]
 8012e9e:	6815      	ldr	r5, [r2, #0]
 8012ea0:	6085      	str	r5, [r0, #8]
 8012ea2:	6852      	ldr	r2, [r2, #4]
 8012ea4:	6443      	str	r3, [r0, #68]	; 0x44
 8012ea6:	9b02      	ldr	r3, [sp, #8]
 8012ea8:	60c2      	str	r2, [r0, #12]
 8012eaa:	7401      	strb	r1, [r0, #16]
 8012eac:	6141      	str	r1, [r0, #20]
 8012eae:	7601      	strb	r1, [r0, #24]
 8012eb0:	8701      	strh	r1, [r0, #56]	; 0x38
 8012eb2:	8401      	strh	r1, [r0, #32]
 8012eb4:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8012eb8:	6483      	str	r3, [r0, #72]	; 0x48
 8012eba:	bc30      	pop	{r4, r5}
 8012ebc:	f7f8 bd42 	b.w	800b944 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08012ec0 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8012ec0:	b408      	push	{r3}
 8012ec2:	b510      	push	{r4, lr}
 8012ec4:	b085      	sub	sp, #20
 8012ec6:	ac07      	add	r4, sp, #28
 8012ec8:	f854 3b04 	ldr.w	r3, [r4], #4
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	4613      	mov	r3, r2
 8012ed0:	4622      	mov	r2, r4
 8012ed2:	9403      	str	r4, [sp, #12]
 8012ed4:	f7ff ffdf 	bl	8012e96 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012ed8:	b005      	add	sp, #20
 8012eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ede:	b001      	add	sp, #4
 8012ee0:	4770      	bx	lr

08012ee2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8012ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	4608      	mov	r0, r1
 8012ee8:	b1f1      	cbz	r1, 8012f28 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8012eea:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8012eee:	460b      	mov	r3, r1
 8012ef0:	f101 0708 	add.w	r7, r1, #8
 8012ef4:	4622      	mov	r2, r4
 8012ef6:	6818      	ldr	r0, [r3, #0]
 8012ef8:	3308      	adds	r3, #8
 8012efa:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012efe:	4626      	mov	r6, r4
 8012f00:	42bb      	cmp	r3, r7
 8012f02:	c603      	stmia	r6!, {r0, r1}
 8012f04:	4634      	mov	r4, r6
 8012f06:	d1f6      	bne.n	8012ef6 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	6030      	str	r0, [r6, #0]
 8012f0c:	4610      	mov	r0, r2
 8012f0e:	889b      	ldrh	r3, [r3, #4]
 8012f10:	80b3      	strh	r3, [r6, #4]
 8012f12:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8012f16:	015b      	lsls	r3, r3, #5
 8012f18:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8012f1c:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8012f20:	430b      	orrs	r3, r1
 8012f22:	425b      	negs	r3, r3
 8012f24:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8012f28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012f2a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8012f2a:	b538      	push	{r3, r4, r5, lr}
 8012f2c:	460c      	mov	r4, r1
 8012f2e:	6811      	ldr	r1, [r2, #0]
 8012f30:	4610      	mov	r0, r2
 8012f32:	68cd      	ldr	r5, [r1, #12]
 8012f34:	4619      	mov	r1, r3
 8012f36:	47a8      	blx	r5
 8012f38:	2800      	cmp	r0, #0
 8012f3a:	bf08      	it	eq
 8012f3c:	4620      	moveq	r0, r4
 8012f3e:	bd38      	pop	{r3, r4, r5, pc}

08012f40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8012f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f42:	4604      	mov	r4, r0
 8012f44:	4615      	mov	r5, r2
 8012f46:	4608      	mov	r0, r1
 8012f48:	b93a      	cbnz	r2, 8012f5a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8012f4a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8012f4e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8012f52:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 8012f56:	4628      	mov	r0, r5
 8012f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f5a:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8012f5e:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8012f62:	8893      	ldrh	r3, [r2, #4]
 8012f64:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8012f68:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8012f6c:	79ee      	ldrb	r6, [r5, #7]
 8012f6e:	4316      	orrs	r6, r2
 8012f70:	19da      	adds	r2, r3, r7
 8012f72:	b291      	uxth	r1, r2
 8012f74:	b2b7      	uxth	r7, r6
 8012f76:	291d      	cmp	r1, #29
 8012f78:	d87b      	bhi.n	8013072 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	10f6      	asrs	r6, r6, #3
 8012f7e:	408a      	lsls	r2, r1
 8012f80:	4974      	ldr	r1, [pc, #464]	; (8013154 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8012f82:	420a      	tst	r2, r1
 8012f84:	d12e      	bne.n	8012fe4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8012f86:	f412 7f60 	tst.w	r2, #896	; 0x380
 8012f8a:	d072      	beq.n	8013072 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 8012f8c:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8012f90:	462b      	mov	r3, r5
 8012f92:	f105 0e08 	add.w	lr, r5, #8
 8012f96:	4615      	mov	r5, r2
 8012f98:	6818      	ldr	r0, [r3, #0]
 8012f9a:	3308      	adds	r3, #8
 8012f9c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8012fa0:	4694      	mov	ip, r2
 8012fa2:	4573      	cmp	r3, lr
 8012fa4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012fa8:	4662      	mov	r2, ip
 8012faa:	d1f5      	bne.n	8012f98 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8012fac:	6818      	ldr	r0, [r3, #0]
 8012fae:	f8cc 0000 	str.w	r0, [ip]
 8012fb2:	889b      	ldrh	r3, [r3, #4]
 8012fb4:	f8ac 3004 	strh.w	r3, [ip, #4]
 8012fb8:	b2b3      	uxth	r3, r6
 8012fba:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8012fbe:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 8012fc2:	1aca      	subs	r2, r1, r3
 8012fc4:	1bcf      	subs	r7, r1, r7
 8012fc6:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8012fca:	b292      	uxth	r2, r2
 8012fcc:	1afb      	subs	r3, r7, r3
 8012fce:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8012fd2:	10d2      	asrs	r2, r2, #3
 8012fd4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8012fd8:	4302      	orrs	r2, r0
 8012fda:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8012fde:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8012fe2:	e7b8      	b.n	8012f56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8012fe4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8012fe6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8012fea:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8012fec:	f640 6333 	movw	r3, #3635	; 0xe33
 8012ff0:	4299      	cmp	r1, r3
 8012ff2:	d110      	bne.n	8013016 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8012ff4:	6803      	ldr	r3, [r0, #0]
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	4798      	blx	r3
 8012ffa:	7b41      	ldrb	r1, [r0, #13]
 8012ffc:	00cb      	lsls	r3, r1, #3
 8012ffe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013002:	7a03      	ldrb	r3, [r0, #8]
 8013004:	0648      	lsls	r0, r1, #25
 8013006:	ea43 0302 	orr.w	r3, r3, r2
 801300a:	bf44      	itt	mi
 801300c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013010:	b21b      	sxthmi	r3, r3
 8013012:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013016:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801301a:	462a      	mov	r2, r5
 801301c:	f105 0c08 	add.w	ip, r5, #8
 8013020:	443b      	add	r3, r7
 8013022:	4433      	add	r3, r6
 8013024:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8013028:	b29b      	uxth	r3, r3
 801302a:	4635      	mov	r5, r6
 801302c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013030:	6810      	ldr	r0, [r2, #0]
 8013032:	3208      	adds	r2, #8
 8013034:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8013038:	4637      	mov	r7, r6
 801303a:	4562      	cmp	r2, ip
 801303c:	c703      	stmia	r7!, {r0, r1}
 801303e:	463e      	mov	r6, r7
 8013040:	d1f6      	bne.n	8013030 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8013042:	6810      	ldr	r0, [r2, #0]
 8013044:	6038      	str	r0, [r7, #0]
 8013046:	8892      	ldrh	r2, [r2, #4]
 8013048:	80ba      	strh	r2, [r7, #4]
 801304a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801304e:	10db      	asrs	r3, r3, #3
 8013050:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013058:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801305c:	4313      	orrs	r3, r2
 801305e:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8013062:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8013066:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801306a:	1a9b      	subs	r3, r3, r2
 801306c:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8013070:	e771      	b.n	8012f56 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8013072:	f023 0204 	bic.w	r2, r3, #4
 8013076:	f640 611b 	movw	r1, #3611	; 0xe1b
 801307a:	428a      	cmp	r2, r1
 801307c:	d003      	beq.n	8013086 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801307e:	f640 621d 	movw	r2, #3613	; 0xe1d
 8013082:	4293      	cmp	r3, r2
 8013084:	d120      	bne.n	80130c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8013086:	3b01      	subs	r3, #1
 8013088:	4602      	mov	r2, r0
 801308a:	4629      	mov	r1, r5
 801308c:	4620      	mov	r0, r4
 801308e:	b29b      	uxth	r3, r3
 8013090:	f7ff ff4b 	bl	8012f2a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013094:	7b41      	ldrb	r1, [r0, #13]
 8013096:	00cb      	lsls	r3, r1, #3
 8013098:	0649      	lsls	r1, r1, #25
 801309a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801309e:	7a03      	ldrb	r3, [r0, #8]
 80130a0:	ea43 0302 	orr.w	r3, r3, r2
 80130a4:	bf44      	itt	mi
 80130a6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80130aa:	b21b      	sxthmi	r3, r3
 80130ac:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80130b0:	7b6b      	ldrb	r3, [r5, #13]
 80130b2:	7aaa      	ldrb	r2, [r5, #10]
 80130b4:	005b      	lsls	r3, r3, #1
 80130b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80130ba:	4313      	orrs	r3, r2
 80130bc:	115a      	asrs	r2, r3, #5
 80130be:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80130c2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80130c6:	e035      	b.n	8013134 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80130c8:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80130cc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80130d0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80130d4:	7a2a      	ldrb	r2, [r5, #8]
 80130d6:	ea42 0201 	orr.w	r2, r2, r1
 80130da:	f640 6109 	movw	r1, #3593	; 0xe09
 80130de:	bf1c      	itt	ne
 80130e0:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80130e4:	b212      	sxthne	r2, r2
 80130e6:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80130ea:	f023 0210 	bic.w	r2, r3, #16
 80130ee:	428a      	cmp	r2, r1
 80130f0:	d003      	beq.n	80130fa <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80130f2:	f640 6213 	movw	r2, #3603	; 0xe13
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d129      	bne.n	801314e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 80130fa:	7b6e      	ldrb	r6, [r5, #13]
 80130fc:	4629      	mov	r1, r5
 80130fe:	0076      	lsls	r6, r6, #1
 8013100:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8013104:	7aae      	ldrb	r6, [r5, #10]
 8013106:	4316      	orrs	r6, r2
 8013108:	f640 6213 	movw	r2, #3603	; 0xe13
 801310c:	4293      	cmp	r3, r2
 801310e:	4602      	mov	r2, r0
 8013110:	4620      	mov	r0, r4
 8013112:	bf16      	itet	ne
 8013114:	f103 33ff 	addne.w	r3, r3, #4294967295
 8013118:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801311c:	b29b      	uxthne	r3, r3
 801311e:	f7ff ff04 	bl	8012f2a <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8013122:	7b43      	ldrb	r3, [r0, #13]
 8013124:	7a82      	ldrb	r2, [r0, #10]
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801312c:	4313      	orrs	r3, r2
 801312e:	1af6      	subs	r6, r6, r3
 8013130:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8013134:	7b69      	ldrb	r1, [r5, #13]
 8013136:	00cb      	lsls	r3, r1, #3
 8013138:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801313c:	7a2b      	ldrb	r3, [r5, #8]
 801313e:	4313      	orrs	r3, r2
 8013140:	064a      	lsls	r2, r1, #25
 8013142:	bf44      	itt	mi
 8013144:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013148:	b21b      	sxthmi	r3, r3
 801314a:	1bdb      	subs	r3, r3, r7
 801314c:	e747      	b.n	8012fde <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801314e:	2300      	movs	r3, #0
 8013150:	e7b7      	b.n	80130c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8013152:	bf00      	nop
 8013154:	3fc00079 	.word	0x3fc00079

08013158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8013158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801315c:	4604      	mov	r4, r0
 801315e:	b942      	cbnz	r2, 8013172 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8013160:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013164:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8013168:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801316c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8013170:	e047      	b.n	8013202 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8013172:	7b51      	ldrb	r1, [r2, #13]
 8013174:	8893      	ldrh	r3, [r2, #4]
 8013176:	010d      	lsls	r5, r1, #4
 8013178:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801317c:	79d5      	ldrb	r5, [r2, #7]
 801317e:	4305      	orrs	r5, r0
 8013180:	2d04      	cmp	r5, #4
 8013182:	bfcc      	ite	gt
 8013184:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8013188:	f04f 0e01 	movle.w	lr, #1
 801318c:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8013190:	f200 80ab 	bhi.w	80132ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8013194:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8013198:	4283      	cmp	r3, r0
 801319a:	d216      	bcs.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801319c:	f240 605b 	movw	r0, #1627	; 0x65b
 80131a0:	4283      	cmp	r3, r0
 80131a2:	d859      	bhi.n	8013258 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80131a4:	f240 6057 	movw	r0, #1623	; 0x657
 80131a8:	4283      	cmp	r3, r0
 80131aa:	d20e      	bcs.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80131ac:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80131b0:	d24a      	bcs.n	8013248 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80131b2:	f240 604e 	movw	r0, #1614	; 0x64e
 80131b6:	4283      	cmp	r3, r0
 80131b8:	d207      	bcs.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80131ba:	f240 601a 	movw	r0, #1562	; 0x61a
 80131be:	4283      	cmp	r3, r0
 80131c0:	d02a      	beq.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80131c2:	d821      	bhi.n	8013208 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80131c4:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80131c8:	d35b      	bcc.n	8013282 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80131ca:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80131ce:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80131d2:	f040 80d0 	bne.w	8013376 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80131d6:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80131da:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80131de:	f040 80ca 	bne.w	8013376 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80131e2:	00cb      	lsls	r3, r1, #3
 80131e4:	0649      	lsls	r1, r1, #25
 80131e6:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80131ea:	7a13      	ldrb	r3, [r2, #8]
 80131ec:	ea43 0300 	orr.w	r3, r3, r0
 80131f0:	bf44      	itt	mi
 80131f2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80131f6:	b21b      	sxthmi	r3, r3
 80131f8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80131fc:	1b5d      	subs	r5, r3, r5
 80131fe:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8013202:	4610      	mov	r0, r2
 8013204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013208:	f240 604b 	movw	r0, #1611	; 0x64b
 801320c:	4283      	cmp	r3, r0
 801320e:	d338      	bcc.n	8013282 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013210:	f240 604c 	movw	r0, #1612	; 0x64c
 8013214:	4283      	cmp	r3, r0
 8013216:	d9d8      	bls.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013218:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801321c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8013220:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013224:	f040 80f3 	bne.w	801340e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013228:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801322c:	f040 80ef 	bne.w	801340e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8013230:	00cb      	lsls	r3, r1, #3
 8013232:	064e      	lsls	r6, r1, #25
 8013234:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8013238:	7a13      	ldrb	r3, [r2, #8]
 801323a:	ea43 0300 	orr.w	r3, r3, r0
 801323e:	bf44      	itt	mi
 8013240:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013244:	b21b      	sxthmi	r3, r3
 8013246:	e7d9      	b.n	80131fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8013248:	f240 6054 	movw	r0, #1620	; 0x654
 801324c:	4283      	cmp	r3, r0
 801324e:	d8e3      	bhi.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013250:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8013254:	d9e0      	bls.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013256:	e7b8      	b.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013258:	f240 6074 	movw	r0, #1652	; 0x674
 801325c:	4283      	cmp	r3, r0
 801325e:	d0b4      	beq.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013260:	d82d      	bhi.n	80132be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8013262:	f240 605e 	movw	r0, #1630	; 0x65e
 8013266:	4283      	cmp	r3, r0
 8013268:	d804      	bhi.n	8013274 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801326a:	f240 605d 	movw	r0, #1629	; 0x65d
 801326e:	4283      	cmp	r3, r0
 8013270:	d3d2      	bcc.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013272:	e7aa      	b.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013274:	f240 605f 	movw	r0, #1631	; 0x65f
 8013278:	4283      	cmp	r3, r0
 801327a:	d0cd      	beq.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801327c:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8013280:	d0a3      	beq.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013282:	00cb      	lsls	r3, r1, #3
 8013284:	0649      	lsls	r1, r1, #25
 8013286:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801328a:	7a13      	ldrb	r3, [r2, #8]
 801328c:	ea43 0300 	orr.w	r3, r3, r0
 8013290:	bf44      	itt	mi
 8013292:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013296:	b21b      	sxthmi	r3, r3
 8013298:	1b5d      	subs	r5, r3, r5
 801329a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801329e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80132a2:	7b53      	ldrb	r3, [r2, #13]
 80132a4:	015b      	lsls	r3, r3, #5
 80132a6:	f403 7180 	and.w	r1, r3, #256	; 0x100
 80132aa:	7993      	ldrb	r3, [r2, #6]
 80132ac:	430b      	orrs	r3, r1
 80132ae:	2105      	movs	r1, #5
 80132b0:	005b      	lsls	r3, r3, #1
 80132b2:	fb93 f3f1 	sdiv	r3, r3, r1
 80132b6:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80132ba:	440b      	add	r3, r1
 80132bc:	e756      	b.n	801316c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80132be:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80132c2:	4283      	cmp	r3, r0
 80132c4:	d809      	bhi.n	80132da <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80132c6:	f240 60df 	movw	r0, #1759	; 0x6df
 80132ca:	4283      	cmp	r3, r0
 80132cc:	f4bf af7d 	bcs.w	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80132d0:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80132d4:	2b05      	cmp	r3, #5
 80132d6:	d8d4      	bhi.n	8013282 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80132d8:	e777      	b.n	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80132da:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80132de:	4283      	cmp	r3, r0
 80132e0:	d09a      	beq.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80132e2:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80132e6:	4283      	cmp	r3, r0
 80132e8:	e7ca      	b.n	8013280 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80132ea:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80132ee:	d22b      	bcs.n	8013348 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80132f0:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80132f4:	4283      	cmp	r3, r0
 80132f6:	d28f      	bcs.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80132f8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80132fc:	4283      	cmp	r3, r0
 80132fe:	d816      	bhi.n	801332e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8013300:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8013304:	4283      	cmp	r3, r0
 8013306:	f4bf af60 	bcs.w	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801330a:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801330e:	4283      	cmp	r3, r0
 8013310:	d80a      	bhi.n	8013328 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8013312:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8013316:	4283      	cmp	r3, r0
 8013318:	f4bf af57 	bcs.w	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801331c:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8013320:	4283      	cmp	r3, r0
 8013322:	f43f af79 	beq.w	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013326:	e7ac      	b.n	8013282 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8013328:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801332c:	e7f8      	b.n	8013320 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801332e:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8013332:	4283      	cmp	r3, r0
 8013334:	d802      	bhi.n	801333c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8013336:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801333a:	e798      	b.n	801326e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801333c:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8013340:	4283      	cmp	r3, r0
 8013342:	f47f af42 	bne.w	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8013346:	e767      	b.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013348:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801334c:	4283      	cmp	r3, r0
 801334e:	f43f af63 	beq.w	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8013352:	d802      	bhi.n	801335a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8013354:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8013358:	e7f2      	b.n	8013340 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801335a:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801335e:	4283      	cmp	r3, r0
 8013360:	d805      	bhi.n	801336e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8013362:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8013366:	4283      	cmp	r3, r0
 8013368:	f4ff af2f 	bcc.w	80131ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801336c:	e754      	b.n	8013218 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801336e:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8013372:	4283      	cmp	r3, r0
 8013374:	e7af      	b.n	80132d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8013376:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801337a:	4617      	mov	r7, r2
 801337c:	f102 0808 	add.w	r8, r2, #8
 8013380:	4666      	mov	r6, ip
 8013382:	6838      	ldr	r0, [r7, #0]
 8013384:	3708      	adds	r7, #8
 8013386:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801338a:	46e6      	mov	lr, ip
 801338c:	4547      	cmp	r7, r8
 801338e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8013392:	46f4      	mov	ip, lr
 8013394:	d1f5      	bne.n	8013382 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8013396:	6838      	ldr	r0, [r7, #0]
 8013398:	f8ce 0000 	str.w	r0, [lr]
 801339c:	88b9      	ldrh	r1, [r7, #4]
 801339e:	f8ae 1004 	strh.w	r1, [lr, #4]
 80133a2:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 80133a6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80133aa:	d009      	beq.n	80133c0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 80133ac:	7b51      	ldrb	r1, [r2, #13]
 80133ae:	7992      	ldrb	r2, [r2, #6]
 80133b0:	0149      	lsls	r1, r1, #5
 80133b2:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80133b6:	4311      	orrs	r1, r2
 80133b8:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80133bc:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80133c0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80133c4:	b2ad      	uxth	r5, r5
 80133c6:	d00d      	beq.n	80133e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 80133c8:	442b      	add	r3, r5
 80133ca:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80133ce:	b29b      	uxth	r3, r3
 80133d0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80133d4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80133d8:	10db      	asrs	r3, r3, #3
 80133da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80133de:	4313      	orrs	r3, r2
 80133e0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80133e4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80133e8:	00cb      	lsls	r3, r1, #3
 80133ea:	064f      	lsls	r7, r1, #25
 80133ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80133f0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80133f4:	ea43 0302 	orr.w	r3, r3, r2
 80133f8:	bf44      	itt	mi
 80133fa:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80133fe:	b21b      	sxthmi	r3, r3
 8013400:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8013404:	1b5b      	subs	r3, r3, r5
 8013406:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801340a:	4632      	mov	r2, r6
 801340c:	e6f9      	b.n	8013202 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801340e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8013412:	4617      	mov	r7, r2
 8013414:	f102 0908 	add.w	r9, r2, #8
 8013418:	4666      	mov	r6, ip
 801341a:	6838      	ldr	r0, [r7, #0]
 801341c:	3708      	adds	r7, #8
 801341e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8013422:	46e0      	mov	r8, ip
 8013424:	454f      	cmp	r7, r9
 8013426:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801342a:	46c4      	mov	ip, r8
 801342c:	d1f5      	bne.n	801341a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801342e:	6838      	ldr	r0, [r7, #0]
 8013430:	f8c8 0000 	str.w	r0, [r8]
 8013434:	88b9      	ldrh	r1, [r7, #4]
 8013436:	f8a8 1004 	strh.w	r1, [r8, #4]
 801343a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801343e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8013442:	d009      	beq.n	8013458 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8013444:	7b51      	ldrb	r1, [r2, #13]
 8013446:	7992      	ldrb	r2, [r2, #6]
 8013448:	0149      	lsls	r1, r1, #5
 801344a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801344e:	4311      	orrs	r1, r2
 8013450:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8013454:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8013458:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801345c:	d00e      	beq.n	801347c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801345e:	eba3 030e 	sub.w	r3, r3, lr
 8013462:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8013466:	b29b      	uxth	r3, r3
 8013468:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801346c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8013470:	10db      	asrs	r3, r3, #3
 8013472:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013476:	4313      	orrs	r3, r2
 8013478:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801347c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8013480:	00cb      	lsls	r3, r1, #3
 8013482:	0648      	lsls	r0, r1, #25
 8013484:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8013488:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801348c:	ea43 0302 	orr.w	r3, r3, r2
 8013490:	bf44      	itt	mi
 8013492:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013496:	b21b      	sxthmi	r3, r3
 8013498:	1b5d      	subs	r5, r3, r5
 801349a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801349e:	e7b4      	b.n	801340a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

080134a0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 80134a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a4:	461e      	mov	r6, r3
 80134a6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 80134a8:	4604      	mov	r4, r0
 80134aa:	4617      	mov	r7, r2
 80134ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80134b0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80134b4:	f7f8 f9a0 	bl	800b7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80134b8:	4605      	mov	r5, r0
 80134ba:	b918      	cbnz	r0, 80134c4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80134bc:	6030      	str	r0, [r6, #0]
 80134be:	4628      	mov	r0, r5
 80134c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	4601      	mov	r1, r0
 80134c8:	4638      	mov	r0, r7
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	4798      	blx	r3
 80134ce:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80134d2:	4602      	mov	r2, r0
 80134d4:	6030      	str	r0, [r6, #0]
 80134d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80134da:	d213      	bcs.n	8013504 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80134dc:	4643      	mov	r3, r8
 80134de:	4639      	mov	r1, r7
 80134e0:	4620      	mov	r0, r4
 80134e2:	f7ff fe39 	bl	8013158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80134e6:	6030      	str	r0, [r6, #0]
 80134e8:	6833      	ldr	r3, [r6, #0]
 80134ea:	b143      	cbz	r3, 80134fe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80134ec:	7b5a      	ldrb	r2, [r3, #13]
 80134ee:	7a9b      	ldrb	r3, [r3, #10]
 80134f0:	0052      	lsls	r2, r2, #1
 80134f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80134f6:	4313      	orrs	r3, r2
 80134f8:	bf0c      	ite	eq
 80134fa:	2301      	moveq	r3, #1
 80134fc:	2300      	movne	r3, #0
 80134fe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8013502:	e7dc      	b.n	80134be <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8013504:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8013508:	b29b      	uxth	r3, r3
 801350a:	2b7f      	cmp	r3, #127	; 0x7f
 801350c:	d804      	bhi.n	8013518 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801350e:	4639      	mov	r1, r7
 8013510:	4620      	mov	r0, r4
 8013512:	f7ff fd15 	bl	8012f40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8013516:	e7e6      	b.n	80134e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8013518:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801351c:	2b00      	cmp	r3, #0
 801351e:	d0e3      	beq.n	80134e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013520:	f640 1302 	movw	r3, #2306	; 0x902
 8013524:	429d      	cmp	r5, r3
 8013526:	d1df      	bne.n	80134e8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8013528:	4601      	mov	r1, r0
 801352a:	4620      	mov	r0, r4
 801352c:	f7ff fcd9 	bl	8012ee2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8013530:	e7d9      	b.n	80134e6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08013532 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8013532:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013536:	461e      	mov	r6, r3
 8013538:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801353a:	4604      	mov	r4, r0
 801353c:	4617      	mov	r7, r2
 801353e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8013542:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013546:	f7f8 f957 	bl	800b7f8 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801354a:	4605      	mov	r5, r0
 801354c:	b918      	cbnz	r0, 8013556 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801354e:	6030      	str	r0, [r6, #0]
 8013550:	4628      	mov	r0, r5
 8013552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	4601      	mov	r1, r0
 801355a:	4638      	mov	r0, r7
 801355c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8013560:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013564:	47c8      	blx	r9
 8013566:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801356a:	4602      	mov	r2, r0
 801356c:	6030      	str	r0, [r6, #0]
 801356e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013572:	d213      	bcs.n	801359c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8013574:	4643      	mov	r3, r8
 8013576:	4639      	mov	r1, r7
 8013578:	4620      	mov	r0, r4
 801357a:	f7ff fded 	bl	8013158 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801357e:	6030      	str	r0, [r6, #0]
 8013580:	6833      	ldr	r3, [r6, #0]
 8013582:	b143      	cbz	r3, 8013596 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8013584:	7b5a      	ldrb	r2, [r3, #13]
 8013586:	7a9b      	ldrb	r3, [r3, #10]
 8013588:	0052      	lsls	r2, r2, #1
 801358a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801358e:	4313      	orrs	r3, r2
 8013590:	bf0c      	ite	eq
 8013592:	2301      	moveq	r3, #1
 8013594:	2300      	movne	r3, #0
 8013596:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801359a:	e7d9      	b.n	8013550 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801359c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80135a0:	b29b      	uxth	r3, r3
 80135a2:	2b7f      	cmp	r3, #127	; 0x7f
 80135a4:	d804      	bhi.n	80135b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 80135a6:	4639      	mov	r1, r7
 80135a8:	4620      	mov	r0, r4
 80135aa:	f7ff fcc9 	bl	8012f40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80135ae:	e7e6      	b.n	801357e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 80135b0:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d0e3      	beq.n	8013580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80135b8:	f640 1302 	movw	r3, #2306	; 0x902
 80135bc:	429d      	cmp	r5, r3
 80135be:	d1df      	bne.n	8013580 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 80135c0:	4601      	mov	r1, r0
 80135c2:	4620      	mov	r0, r4
 80135c4:	f7ff fc8d 	bl	8012ee2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80135c8:	e7d9      	b.n	801357e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

080135ca <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 80135ca:	b510      	push	{r4, lr}
 80135cc:	4604      	mov	r4, r0
 80135ce:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 80135d2:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80135d4:	b1e1      	cbz	r1, 8013610 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80135d6:	2b0a      	cmp	r3, #10
 80135d8:	d02d      	beq.n	8013636 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80135da:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80135dc:	3901      	subs	r1, #1
 80135de:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80135e2:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 80135e4:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 80135e8:	1c51      	adds	r1, r2, #1
 80135ea:	b289      	uxth	r1, r1
 80135ec:	2901      	cmp	r1, #1
 80135ee:	bf8a      	itet	hi
 80135f0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80135f4:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 80135f6:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 80135f8:	1c5a      	adds	r2, r3, #1
 80135fa:	8722      	strh	r2, [r4, #56]	; 0x38
 80135fc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80135fe:	4413      	add	r3, r2
 8013600:	b29b      	uxth	r3, r3
 8013602:	2b09      	cmp	r3, #9
 8013604:	bf88      	it	hi
 8013606:	3b0a      	subhi	r3, #10
 8013608:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801360c:	8458      	strh	r0, [r3, #34]	; 0x22
 801360e:	e7de      	b.n	80135ce <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8013610:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8013612:	2b0a      	cmp	r3, #10
 8013614:	d00f      	beq.n	8013636 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8013616:	4620      	mov	r0, r4
 8013618:	f7ff fc11 	bl	8012e3e <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801361c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801361e:	1c5a      	adds	r2, r3, #1
 8013620:	8722      	strh	r2, [r4, #56]	; 0x38
 8013622:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8013624:	4413      	add	r3, r2
 8013626:	b29b      	uxth	r3, r3
 8013628:	2b09      	cmp	r3, #9
 801362a:	bf88      	it	hi
 801362c:	3b0a      	subhi	r3, #10
 801362e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013632:	8458      	strh	r0, [r3, #34]	; 0x22
 8013634:	e7ec      	b.n	8013610 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8013636:	bd10      	pop	{r4, pc}

08013638 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8013638:	b538      	push	{r3, r4, r5, lr}
 801363a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801363c:	4604      	mov	r4, r0
 801363e:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8013642:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8013644:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8013646:	3a01      	subs	r2, #1
 8013648:	8702      	strh	r2, [r0, #56]	; 0x38
 801364a:	1c5a      	adds	r2, r3, #1
 801364c:	b292      	uxth	r2, r2
 801364e:	2a09      	cmp	r2, #9
 8013650:	bf8a      	itet	hi
 8013652:	3b09      	subhi	r3, #9
 8013654:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8013656:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8013658:	f7ff ffb7 	bl	80135ca <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801365c:	8c23      	ldrh	r3, [r4, #32]
 801365e:	2b01      	cmp	r3, #1
 8013660:	bf9c      	itt	ls
 8013662:	3301      	addls	r3, #1
 8013664:	8423      	strhls	r3, [r4, #32]
 8013666:	8be3      	ldrh	r3, [r4, #30]
 8013668:	b90b      	cbnz	r3, 801366e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801366a:	2302      	movs	r3, #2
 801366c:	83e3      	strh	r3, [r4, #30]
 801366e:	8be3      	ldrh	r3, [r4, #30]
 8013670:	4628      	mov	r0, r5
 8013672:	3b01      	subs	r3, #1
 8013674:	b29b      	uxth	r3, r3
 8013676:	83e3      	strh	r3, [r4, #30]
 8013678:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801367c:	8365      	strh	r5, [r4, #26]
 801367e:	bd38      	pop	{r3, r4, r5, pc}

08013680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8013680:	428a      	cmp	r2, r1
 8013682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013686:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8013688:	d932      	bls.n	80136f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801368a:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801368c:	1a54      	subs	r4, r2, r1
 801368e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8013692:	19ee      	adds	r6, r5, r7
 8013694:	fa1f fe84 	uxth.w	lr, r4
 8013698:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801369c:	3e01      	subs	r6, #1
 801369e:	b2b4      	uxth	r4, r6
 80136a0:	eba4 090e 	sub.w	r9, r4, lr
 80136a4:	fa1f f989 	uxth.w	r9, r9
 80136a8:	2c09      	cmp	r4, #9
 80136aa:	4626      	mov	r6, r4
 80136ac:	bf88      	it	hi
 80136ae:	f1a4 060a 	subhi.w	r6, r4, #10
 80136b2:	f1bc 0f00 	cmp.w	ip, #0
 80136b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80136ba:	bf08      	it	eq
 80136bc:	f04f 0c02 	moveq.w	ip, #2
 80136c0:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 80136c4:	b2a4      	uxth	r4, r4
 80136c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80136ca:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 80136ce:	454c      	cmp	r4, r9
 80136d0:	fa1f fc8c 	uxth.w	ip, ip
 80136d4:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 80136d8:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 80136dc:	d1e4      	bne.n	80136a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 80136de:	eba5 050e 	sub.w	r5, r5, lr
 80136e2:	eb0e 0408 	add.w	r4, lr, r8
 80136e6:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 80136ea:	8705      	strh	r5, [r0, #56]	; 0x38
 80136ec:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 80136f0:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80136f2:	250a      	movs	r5, #10
 80136f4:	1a64      	subs	r4, r4, r1
 80136f6:	4439      	add	r1, r7
 80136f8:	b289      	uxth	r1, r1
 80136fa:	8704      	strh	r4, [r0, #56]	; 0x38
 80136fc:	2909      	cmp	r1, #9
 80136fe:	bf88      	it	hi
 8013700:	390a      	subhi	r1, #10
 8013702:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013704:	b18a      	cbz	r2, 801372a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8013706:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8013708:	3a01      	subs	r2, #1
 801370a:	3101      	adds	r1, #1
 801370c:	b292      	uxth	r2, r2
 801370e:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8013712:	8701      	strh	r1, [r0, #56]	; 0x38
 8013714:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8013716:	b901      	cbnz	r1, 801371a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8013718:	86c5      	strh	r5, [r0, #54]	; 0x36
 801371a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801371c:	3901      	subs	r1, #1
 801371e:	b289      	uxth	r1, r1
 8013720:	86c1      	strh	r1, [r0, #54]	; 0x36
 8013722:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8013726:	844c      	strh	r4, [r1, #34]	; 0x22
 8013728:	e7ec      	b.n	8013704 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801372a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801372e:	f7ff bf4c 	b.w	80135ca <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08013732 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8013732:	b570      	push	{r4, r5, r6, lr}
 8013734:	2500      	movs	r5, #0
 8013736:	4295      	cmp	r5, r2
 8013738:	d011      	beq.n	801375e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801373a:	8bc4      	ldrh	r4, [r0, #30]
 801373c:	f831 6b02 	ldrh.w	r6, [r1], #2
 8013740:	4414      	add	r4, r2
 8013742:	3c01      	subs	r4, #1
 8013744:	1b64      	subs	r4, r4, r5
 8013746:	b2a4      	uxth	r4, r4
 8013748:	2c01      	cmp	r4, #1
 801374a:	bf88      	it	hi
 801374c:	3c02      	subhi	r4, #2
 801374e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8013752:	8b64      	ldrh	r4, [r4, #26]
 8013754:	42b4      	cmp	r4, r6
 8013756:	d117      	bne.n	8013788 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8013758:	3501      	adds	r5, #1
 801375a:	b2ad      	uxth	r5, r5
 801375c:	e7eb      	b.n	8013736 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801375e:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8013762:	2400      	movs	r4, #0
 8013764:	4413      	add	r3, r2
 8013766:	b2a2      	uxth	r2, r4
 8013768:	429a      	cmp	r2, r3
 801376a:	da0f      	bge.n	801378c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801376c:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801376e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8013772:	3401      	adds	r4, #1
 8013774:	4432      	add	r2, r6
 8013776:	b292      	uxth	r2, r2
 8013778:	2a09      	cmp	r2, #9
 801377a:	bf88      	it	hi
 801377c:	3a0a      	subhi	r2, #10
 801377e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8013782:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8013784:	42aa      	cmp	r2, r5
 8013786:	d0ee      	beq.n	8013766 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8013788:	2000      	movs	r0, #0
 801378a:	bd70      	pop	{r4, r5, r6, pc}
 801378c:	2001      	movs	r0, #1
 801378e:	e7fc      	b.n	801378a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08013790 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8013790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	4605      	mov	r5, r0
 8013796:	4616      	mov	r6, r2
 8013798:	1c8c      	adds	r4, r1, #2
 801379a:	8809      	ldrh	r1, [r1, #0]
 801379c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80137a0:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80137a4:	42b3      	cmp	r3, r6
 80137a6:	d124      	bne.n	80137f2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80137a8:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80137ac:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80137b0:	f001 070f 	and.w	r7, r1, #15
 80137b4:	4652      	mov	r2, sl
 80137b6:	f8cd 8000 	str.w	r8, [sp]
 80137ba:	464b      	mov	r3, r9
 80137bc:	4621      	mov	r1, r4
 80137be:	4628      	mov	r0, r5
 80137c0:	f7ff ffb7 	bl	8013732 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80137c4:	4683      	mov	fp, r0
 80137c6:	b168      	cbz	r0, 80137e4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80137c8:	eb0a 0109 	add.w	r1, sl, r9
 80137cc:	463a      	mov	r2, r7
 80137ce:	4628      	mov	r0, r5
 80137d0:	4441      	add	r1, r8
 80137d2:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80137d6:	4649      	mov	r1, r9
 80137d8:	f7ff ff52 	bl	8013680 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 80137dc:	4658      	mov	r0, fp
 80137de:	b003      	add	sp, #12
 80137e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e4:	eb07 010a 	add.w	r1, r7, sl
 80137e8:	4449      	add	r1, r9
 80137ea:	4441      	add	r1, r8
 80137ec:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80137f0:	e7d2      	b.n	8013798 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 80137f2:	f04f 0b00 	mov.w	fp, #0
 80137f6:	e7f1      	b.n	80137dc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

080137f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 80137f8:	b570      	push	{r4, r5, r6, lr}
 80137fa:	8810      	ldrh	r0, [r2, #0]
 80137fc:	4298      	cmp	r0, r3
 80137fe:	d817      	bhi.n	8013830 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013800:	1e48      	subs	r0, r1, #1
 8013802:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8013806:	4298      	cmp	r0, r3
 8013808:	d312      	bcc.n	8013830 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801380a:	2400      	movs	r4, #0
 801380c:	428c      	cmp	r4, r1
 801380e:	d20f      	bcs.n	8013830 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8013810:	1860      	adds	r0, r4, r1
 8013812:	1040      	asrs	r0, r0, #1
 8013814:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8013818:	0085      	lsls	r5, r0, #2
 801381a:	42b3      	cmp	r3, r6
 801381c:	d902      	bls.n	8013824 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801381e:	3001      	adds	r0, #1
 8013820:	b284      	uxth	r4, r0
 8013822:	e7f3      	b.n	801380c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8013824:	d201      	bcs.n	801382a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8013826:	b281      	uxth	r1, r0
 8013828:	e7f0      	b.n	801380c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801382a:	442a      	add	r2, r5
 801382c:	8850      	ldrh	r0, [r2, #2]
 801382e:	bd70      	pop	{r4, r5, r6, pc}
 8013830:	2000      	movs	r0, #0
 8013832:	e7fc      	b.n	801382e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08013834 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8013834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013838:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801383a:	4604      	mov	r4, r0
 801383c:	260b      	movs	r6, #11
 801383e:	886f      	ldrh	r7, [r5, #2]
 8013840:	087f      	lsrs	r7, r7, #1
 8013842:	3e01      	subs	r6, #1
 8013844:	d013      	beq.n	801386e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8013846:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8013848:	462a      	mov	r2, r5
 801384a:	4639      	mov	r1, r7
 801384c:	4620      	mov	r0, r4
 801384e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8013852:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8013856:	4643      	mov	r3, r8
 8013858:	f7ff ffce 	bl	80137f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801385c:	b138      	cbz	r0, 801386e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801385e:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8013862:	4642      	mov	r2, r8
 8013864:	4620      	mov	r0, r4
 8013866:	f7ff ff93 	bl	8013790 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801386a:	2800      	cmp	r0, #0
 801386c:	d1e9      	bne.n	8013842 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801386e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08013874 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8013874:	b570      	push	{r4, r5, r6, lr}
 8013876:	694a      	ldr	r2, [r1, #20]
 8013878:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801387a:	684b      	ldr	r3, [r1, #4]
 801387c:	1b54      	subs	r4, r2, r5
 801387e:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 8013880:	f000 8106 	beq.w	8013a90 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8013884:	1b9b      	subs	r3, r3, r6
 8013886:	d003      	beq.n	8013890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013888:	4363      	muls	r3, r4
 801388a:	2210      	movs	r2, #16
 801388c:	fb93 f3f2 	sdiv	r3, r3, r2
 8013890:	680c      	ldr	r4, [r1, #0]
 8013892:	698a      	ldr	r2, [r1, #24]
 8013894:	1b65      	subs	r5, r4, r5
 8013896:	f000 80fd 	beq.w	8013a94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801389a:	1b92      	subs	r2, r2, r6
 801389c:	d003      	beq.n	80138a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801389e:	436a      	muls	r2, r5
 80138a0:	2410      	movs	r4, #16
 80138a2:	fb92 f2f4 	sdiv	r2, r2, r4
 80138a6:	1a9b      	subs	r3, r3, r2
 80138a8:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8013ad0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80138ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80138b0:	460a      	mov	r2, r1
 80138b2:	ee07 3a90 	vmov	s15, r3
 80138b6:	f100 040c 	add.w	r4, r0, #12
 80138ba:	4603      	mov	r3, r0
 80138bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138c0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80138c4:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80138c8:	eeb1 6a43 	vneg.f32	s12, s6
 80138cc:	edd2 7a02 	vldr	s15, [r2, #8]
 80138d0:	3214      	adds	r2, #20
 80138d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80138d6:	ece3 6a01 	vstmia	r3!, {s13}
 80138da:	429c      	cmp	r4, r3
 80138dc:	ed52 7a02 	vldr	s15, [r2, #-8]
 80138e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80138e4:	edc3 7a02 	vstr	s15, [r3, #8]
 80138e8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80138ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80138f0:	edc3 7a05 	vstr	s15, [r3, #20]
 80138f4:	d1ea      	bne.n	80138cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 80138f6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80138f8:	698b      	ldr	r3, [r1, #24]
 80138fa:	edd0 4a02 	vldr	s9, [r0, #8]
 80138fe:	1a9b      	subs	r3, r3, r2
 8013900:	edd0 3a00 	vldr	s7, [r0]
 8013904:	edd0 6a01 	vldr	s13, [r0, #4]
 8013908:	ee07 3a90 	vmov	s15, r3
 801390c:	684b      	ldr	r3, [r1, #4]
 801390e:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8013912:	ed90 5a05 	vldr	s10, [r0, #20]
 8013916:	1a9b      	subs	r3, r3, r2
 8013918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801391c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8013920:	ed90 2a03 	vldr	s4, [r0, #12]
 8013924:	ee07 3a10 	vmov	s14, r3
 8013928:	edd0 5a04 	vldr	s11, [r0, #16]
 801392c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8013930:	ed90 1a07 	vldr	s2, [r0, #28]
 8013934:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013938:	edd0 2a06 	vldr	s5, [r0, #24]
 801393c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8013940:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8013944:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013948:	ee32 5a45 	vsub.f32	s10, s4, s10
 801394c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013950:	ee67 7a83 	vmul.f32	s15, s15, s6
 8013954:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8013958:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801395a:	694a      	ldr	r2, [r1, #20]
 801395c:	1b13      	subs	r3, r2, r4
 801395e:	ee07 3a10 	vmov	s14, r3
 8013962:	680b      	ldr	r3, [r1, #0]
 8013964:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013968:	1b1b      	subs	r3, r3, r4
 801396a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801396e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8013972:	ee07 3a10 	vmov	s14, r3
 8013976:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801397a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801397e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8013982:	ee64 4a86 	vmul.f32	s9, s9, s12
 8013986:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801398a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801398c:	698b      	ldr	r3, [r1, #24]
 801398e:	1a9b      	subs	r3, r3, r2
 8013990:	ee06 3a90 	vmov	s13, r3
 8013994:	684b      	ldr	r3, [r1, #4]
 8013996:	1a9b      	subs	r3, r3, r2
 8013998:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801399c:	ee07 3a10 	vmov	s14, r3
 80139a0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80139a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139a8:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80139ac:	ee27 7a04 	vmul.f32	s14, s14, s8
 80139b0:	eee5 6a87 	vfma.f32	s13, s11, s14
 80139b4:	ee66 6a83 	vmul.f32	s13, s13, s6
 80139b8:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80139bc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80139be:	694a      	ldr	r2, [r1, #20]
 80139c0:	1b13      	subs	r3, r2, r4
 80139c2:	ee07 3a10 	vmov	s14, r3
 80139c6:	680b      	ldr	r3, [r1, #0]
 80139c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139cc:	1b1b      	subs	r3, r3, r4
 80139ce:	ee27 7a04 	vmul.f32	s14, s14, s8
 80139d2:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80139d6:	ee07 3a10 	vmov	s14, r3
 80139da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80139de:	ee27 7a04 	vmul.f32	s14, s14, s8
 80139e2:	eea5 5a87 	vfma.f32	s10, s11, s14
 80139e6:	edd0 5a08 	vldr	s11, [r0, #32]
 80139ea:	ee31 1a65 	vsub.f32	s2, s2, s11
 80139ee:	ee72 5ae5 	vsub.f32	s11, s5, s11
 80139f2:	ee25 5a06 	vmul.f32	s10, s10, s12
 80139f6:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 80139fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80139fc:	698b      	ldr	r3, [r1, #24]
 80139fe:	1a9b      	subs	r3, r3, r2
 8013a00:	ee07 3a10 	vmov	s14, r3
 8013a04:	684b      	ldr	r3, [r1, #4]
 8013a06:	1a9b      	subs	r3, r3, r2
 8013a08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013a0c:	ee01 3a90 	vmov	s3, r3
 8013a10:	ee27 7a04 	vmul.f32	s14, s14, s8
 8013a14:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8013a18:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8013a1c:	ee61 1a84 	vmul.f32	s3, s3, s8
 8013a20:	eea1 7a21 	vfma.f32	s14, s2, s3
 8013a24:	ee27 7a03 	vmul.f32	s14, s14, s6
 8013a28:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013a2c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8013a2e:	694a      	ldr	r2, [r1, #20]
 8013a30:	1b13      	subs	r3, r2, r4
 8013a32:	ee03 3a10 	vmov	s6, r3
 8013a36:	680b      	ldr	r3, [r1, #0]
 8013a38:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013a3c:	1b1b      	subs	r3, r3, r4
 8013a3e:	ee23 3a04 	vmul.f32	s6, s6, s8
 8013a42:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8013a46:	ee03 3a10 	vmov	s6, r3
 8013a4a:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8013a4e:	ee23 4a04 	vmul.f32	s8, s6, s8
 8013a52:	eee1 5a04 	vfma.f32	s11, s2, s8
 8013a56:	ee25 6a86 	vmul.f32	s12, s11, s12
 8013a5a:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8013a5e:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8013a62:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8013a66:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8013a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6e:	dd13      	ble.n	8013a98 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8013a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a74:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8013a78:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013a7a:	eee3 7a87 	vfma.f32	s15, s7, s14
 8013a7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a86:	dd15      	ble.n	8013ab4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8013a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a8c:	6403      	str	r3, [r0, #64]	; 0x40
 8013a8e:	bd70      	pop	{r4, r5, r6, pc}
 8013a90:	4623      	mov	r3, r4
 8013a92:	e6fd      	b.n	8013890 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8013a94:	462a      	mov	r2, r5
 8013a96:	e706      	b.n	80138a6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8013a98:	d502      	bpl.n	8013aa0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8013a9a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013a9e:	e7e9      	b.n	8013a74 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8013aa0:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8013aa4:	eea3 2a85 	vfma.f32	s4, s7, s10
 8013aa8:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8013aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ab0:	dade      	bge.n	8013a70 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8013ab2:	e7f2      	b.n	8013a9a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8013ab4:	d502      	bpl.n	8013abc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8013ab6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8013aba:	e7e7      	b.n	8013a8c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8013abc:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8013ac0:	eee3 4a86 	vfma.f32	s9, s7, s12
 8013ac4:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8013ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013acc:	dadc      	bge.n	8013a88 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8013ace:	e7f2      	b.n	8013ab6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8013ad0:	3d800000 	.word	0x3d800000

08013ad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8013ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ad8:	2714      	movs	r7, #20
 8013ada:	435f      	muls	r7, r3
 8013adc:	eb02 0c07 	add.w	ip, r2, r7
 8013ae0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8013ae4:	f115 0e0f 	adds.w	lr, r5, #15
 8013ae8:	f100 80a2 	bmi.w	8013c30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8013aec:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8013af0:	9c08      	ldr	r4, [sp, #32]
 8013af2:	2614      	movs	r6, #20
 8013af4:	f8c0 e014 	str.w	lr, [r0, #20]
 8013af8:	4366      	muls	r6, r4
 8013afa:	eb02 0806 	add.w	r8, r2, r6
 8013afe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013b02:	f115 040f 	adds.w	r4, r5, #15
 8013b06:	f100 809f 	bmi.w	8013c48 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8013b0a:	1124      	asrs	r4, r4, #4
 8013b0c:	eba4 040e 	sub.w	r4, r4, lr
 8013b10:	6184      	str	r4, [r0, #24]
 8013b12:	2c00      	cmp	r4, #0
 8013b14:	f000 808a 	beq.w	8013c2c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8013b18:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8013b1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013b20:	5995      	ldr	r5, [r2, r6]
 8013b22:	eba4 0809 	sub.w	r8, r4, r9
 8013b26:	59d4      	ldr	r4, [r2, r7]
 8013b28:	eba5 0a04 	sub.w	sl, r5, r4
 8013b2c:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8013b30:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8013b34:	fb0e fe05 	mul.w	lr, lr, r5
 8013b38:	fb0a ee19 	mls	lr, sl, r9, lr
 8013b3c:	fb08 e404 	mla	r4, r8, r4, lr
 8013b40:	3c01      	subs	r4, #1
 8013b42:	19a4      	adds	r4, r4, r6
 8013b44:	f100 808c 	bmi.w	8013c60 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8013b48:	fb94 fef6 	sdiv	lr, r4, r6
 8013b4c:	fb06 441e 	mls	r4, r6, lr, r4
 8013b50:	f8c0 e000 	str.w	lr, [r0]
 8013b54:	6104      	str	r4, [r0, #16]
 8013b56:	2d00      	cmp	r5, #0
 8013b58:	f2c0 8095 	blt.w	8013c86 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8013b5c:	fb95 f4f6 	sdiv	r4, r5, r6
 8013b60:	fb06 5514 	mls	r5, r6, r4, r5
 8013b64:	6044      	str	r4, [r0, #4]
 8013b66:	6085      	str	r5, [r0, #8]
 8013b68:	60c6      	str	r6, [r0, #12]
 8013b6a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013b6e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8013b72:	6945      	ldr	r5, [r0, #20]
 8013b74:	59d2      	ldr	r2, [r2, r7]
 8013b76:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8013b7a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8013ca8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8013b7e:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013b82:	ee07 4a10 	vmov	s14, r4
 8013b86:	6804      	ldr	r4, [r0, #0]
 8013b88:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8013b8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013b90:	ee07 2a90 	vmov	s15, r2
 8013b94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8013b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013b9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ba0:	edd3 6a00 	vldr	s13, [r3]
 8013ba4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8013ba8:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8013bac:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013bb0:	edc0 6a07 	vstr	s13, [r0, #28]
 8013bb4:	edd0 6a01 	vldr	s13, [r0, #4]
 8013bb8:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8013bbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8013bc0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8013bc4:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013bc8:	ed80 6a08 	vstr	s12, [r0, #32]
 8013bcc:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8013bce:	6242      	str	r2, [r0, #36]	; 0x24
 8013bd0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8013bd4:	ed93 6a03 	vldr	s12, [r3, #12]
 8013bd8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013bdc:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013be0:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8013be4:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8013be8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8013bec:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8013bf0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013bf4:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8013bf8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8013bfa:	6302      	str	r2, [r0, #48]	; 0x30
 8013bfc:	ed93 6a06 	vldr	s12, [r3, #24]
 8013c00:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8013c04:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013c08:	eeb0 7a46 	vmov.f32	s14, s12
 8013c0c:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8013c10:	eea6 7a27 	vfma.f32	s14, s12, s15
 8013c14:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8013c18:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8013c1c:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8013c20:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013c24:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8013c28:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8013c2a:	63c3      	str	r3, [r0, #60]	; 0x3c
 8013c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c30:	2410      	movs	r4, #16
 8013c32:	f1c5 0501 	rsb	r5, r5, #1
 8013c36:	fb9e fef4 	sdiv	lr, lr, r4
 8013c3a:	f015 050f 	ands.w	r5, r5, #15
 8013c3e:	bf18      	it	ne
 8013c40:	2501      	movne	r5, #1
 8013c42:	ebae 0e05 	sub.w	lr, lr, r5
 8013c46:	e753      	b.n	8013af0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8013c48:	f04f 0910 	mov.w	r9, #16
 8013c4c:	f1c5 0501 	rsb	r5, r5, #1
 8013c50:	fb94 f4f9 	sdiv	r4, r4, r9
 8013c54:	f015 050f 	ands.w	r5, r5, #15
 8013c58:	bf18      	it	ne
 8013c5a:	2501      	movne	r5, #1
 8013c5c:	1b64      	subs	r4, r4, r5
 8013c5e:	e755      	b.n	8013b0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8013c60:	4264      	negs	r4, r4
 8013c62:	fb94 fef6 	sdiv	lr, r4, r6
 8013c66:	f1ce 0800 	rsb	r8, lr, #0
 8013c6a:	fb06 441e 	mls	r4, r6, lr, r4
 8013c6e:	f8c0 8000 	str.w	r8, [r0]
 8013c72:	6104      	str	r4, [r0, #16]
 8013c74:	2c00      	cmp	r4, #0
 8013c76:	f43f af6e 	beq.w	8013b56 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8013c7a:	ea6f 0e0e 	mvn.w	lr, lr
 8013c7e:	1b34      	subs	r4, r6, r4
 8013c80:	f8c0 e000 	str.w	lr, [r0]
 8013c84:	e766      	b.n	8013b54 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8013c86:	426d      	negs	r5, r5
 8013c88:	fb95 f4f6 	sdiv	r4, r5, r6
 8013c8c:	f1c4 0e00 	rsb	lr, r4, #0
 8013c90:	fb06 5514 	mls	r5, r6, r4, r5
 8013c94:	f8c0 e004 	str.w	lr, [r0, #4]
 8013c98:	6085      	str	r5, [r0, #8]
 8013c9a:	2d00      	cmp	r5, #0
 8013c9c:	f43f af64 	beq.w	8013b68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8013ca0:	43e4      	mvns	r4, r4
 8013ca2:	1b75      	subs	r5, r6, r5
 8013ca4:	6044      	str	r4, [r0, #4]
 8013ca6:	e75e      	b.n	8013b66 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8013ca8:	3d800000 	.word	0x3d800000

08013cac <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8013cac:	4b01      	ldr	r3, [pc, #4]	; (8013cb4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8013cae:	6018      	str	r0, [r3, #0]
 8013cb0:	4770      	bx	lr
 8013cb2:	bf00      	nop
 8013cb4:	2401aa9c 	.word	0x2401aa9c

08013cb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8013cb8:	4b06      	ldr	r3, [pc, #24]	; (8013cd4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8013cba:	881a      	ldrh	r2, [r3, #0]
 8013cbc:	4282      	cmp	r2, r0
 8013cbe:	d807      	bhi.n	8013cd0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8013cc0:	4b05      	ldr	r3, [pc, #20]	; (8013cd8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	4413      	add	r3, r2
 8013cc6:	4298      	cmp	r0, r3
 8013cc8:	bfac      	ite	ge
 8013cca:	2000      	movge	r0, #0
 8013ccc:	2001      	movlt	r0, #1
 8013cce:	4770      	bx	lr
 8013cd0:	2000      	movs	r0, #0
 8013cd2:	4770      	bx	lr
 8013cd4:	2401aabc 	.word	0x2401aabc
 8013cd8:	2401aac0 	.word	0x2401aac0

08013cdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8013cdc:	b508      	push	{r3, lr}
 8013cde:	4601      	mov	r1, r0
 8013ce0:	f7ff ffea 	bl	8013cb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013ce4:	b118      	cbz	r0, 8013cee <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8013ce6:	4b02      	ldr	r3, [pc, #8]	; (8013cf0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013cee:	bd08      	pop	{r3, pc}
 8013cf0:	2401aaa0 	.word	0x2401aaa0

08013cf4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8013cf4:	b538      	push	{r3, r4, r5, lr}
 8013cf6:	4604      	mov	r4, r0
 8013cf8:	f7ff ffde 	bl	8013cb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013cfc:	b188      	cbz	r0, 8013d22 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8013cfe:	4b09      	ldr	r3, [pc, #36]	; (8013d24 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8013d00:	881a      	ldrh	r2, [r3, #0]
 8013d02:	4b09      	ldr	r3, [pc, #36]	; (8013d28 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 8013d04:	1aa4      	subs	r4, r4, r2
 8013d06:	220e      	movs	r2, #14
 8013d08:	681d      	ldr	r5, [r3, #0]
 8013d0a:	4362      	muls	r2, r4
 8013d0c:	18ac      	adds	r4, r5, r2
 8013d0e:	7b23      	ldrb	r3, [r4, #12]
 8013d10:	f013 0320 	ands.w	r3, r3, #32
 8013d14:	bf17      	itett	ne
 8013d16:	680b      	ldrne	r3, [r1, #0]
 8013d18:	4618      	moveq	r0, r3
 8013d1a:	50ab      	strne	r3, [r5, r2]
 8013d1c:	684b      	ldrne	r3, [r1, #4]
 8013d1e:	bf18      	it	ne
 8013d20:	6063      	strne	r3, [r4, #4]
 8013d22:	bd38      	pop	{r3, r4, r5, pc}
 8013d24:	2401aabc 	.word	0x2401aabc
 8013d28:	2401aaa4 	.word	0x2401aaa4

08013d2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8013d2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d30:	4606      	mov	r6, r0
 8013d32:	460c      	mov	r4, r1
 8013d34:	f7ff ffc0 	bl	8013cb8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8013d38:	b918      	cbnz	r0, 8013d42 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	b002      	add	sp, #8
 8013d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d42:	4608      	mov	r0, r1
 8013d44:	f7fa f9db 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d48:	2800      	cmp	r0, #0
 8013d4a:	d1f6      	bne.n	8013d3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013d4c:	4b3f      	ldr	r3, [pc, #252]	; (8013e4c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8013d4e:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8013e50 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8013d52:	881d      	ldrh	r5, [r3, #0]
 8013d54:	f8d9 a000 	ldr.w	sl, [r9]
 8013d58:	46c8      	mov	r8, r9
 8013d5a:	1b73      	subs	r3, r6, r5
 8013d5c:	250e      	movs	r5, #14
 8013d5e:	435d      	muls	r5, r3
 8013d60:	eb0a 0705 	add.w	r7, sl, r5
 8013d64:	7b3b      	ldrb	r3, [r7, #12]
 8013d66:	f013 0f20 	tst.w	r3, #32
 8013d6a:	d0e6      	beq.n	8013d3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013d6c:	4621      	mov	r1, r4
 8013d6e:	4638      	mov	r0, r7
 8013d70:	f7fd fb00 	bl	8011374 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d1e1      	bne.n	8013d3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8013d78:	4639      	mov	r1, r7
 8013d7a:	4620      	mov	r0, r4
 8013d7c:	f7fd fafa 	bl	8011374 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013d80:	b108      	cbz	r0, 8013d86 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8013d82:	4621      	mov	r1, r4
 8013d84:	e020      	b.n	8013dc8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8013d86:	f9b4 2000 	ldrsh.w	r2, [r4]
 8013d8a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8013d8e:	429a      	cmp	r2, r3
 8013d90:	d11e      	bne.n	8013dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013d92:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013d96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8013d9a:	429a      	cmp	r2, r3
 8013d9c:	d118      	bne.n	8013dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013d9e:	6820      	ldr	r0, [r4, #0]
 8013da0:	466b      	mov	r3, sp
 8013da2:	6861      	ldr	r1, [r4, #4]
 8013da4:	c303      	stmia	r3!, {r0, r1}
 8013da6:	4639      	mov	r1, r7
 8013da8:	4668      	mov	r0, sp
 8013daa:	f7fd fb09 	bl	80113c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013dae:	f8d9 3000 	ldr.w	r3, [r9]
 8013db2:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8013db6:	442b      	add	r3, r5
 8013db8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8013dc2:	4293      	cmp	r3, r2
 8013dc4:	dc04      	bgt.n	8013dd0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8013dc6:	4669      	mov	r1, sp
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f7ff ff93 	bl	8013cf4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8013dce:	e7b5      	b.n	8013d3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8013dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8013dd4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013dd8:	442b      	add	r3, r5
 8013dda:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8013dde:	4291      	cmp	r1, r2
 8013de0:	d119      	bne.n	8013e16 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8013de2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8013de6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8013dea:	4291      	cmp	r1, r2
 8013dec:	d113      	bne.n	8013e16 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8013dee:	6820      	ldr	r0, [r4, #0]
 8013df0:	466a      	mov	r2, sp
 8013df2:	6861      	ldr	r1, [r4, #4]
 8013df4:	c203      	stmia	r2!, {r0, r1}
 8013df6:	4619      	mov	r1, r3
 8013df8:	4668      	mov	r0, sp
 8013dfa:	f7fd fae1 	bl	80113c0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8013e02:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8013e06:	442b      	add	r3, r5
 8013e08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013e0c:	4413      	add	r3, r2
 8013e0e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8013e12:	4293      	cmp	r3, r2
 8013e14:	ddd7      	ble.n	8013dc6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 8013e16:	4620      	mov	r0, r4
 8013e18:	f7fa f971 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e1c:	b990      	cbnz	r0, 8013e44 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8013e1e:	88a7      	ldrh	r7, [r4, #4]
 8013e20:	88e3      	ldrh	r3, [r4, #6]
 8013e22:	fb17 f703 	smulbb	r7, r7, r3
 8013e26:	f8d8 3000 	ldr.w	r3, [r8]
 8013e2a:	441d      	add	r5, r3
 8013e2c:	4628      	mov	r0, r5
 8013e2e:	f7fa f966 	bl	800e0fe <_ZNK8touchgfx4Rect7isEmptyEv>
 8013e32:	b948      	cbnz	r0, 8013e48 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8013e34:	88ab      	ldrh	r3, [r5, #4]
 8013e36:	88ea      	ldrh	r2, [r5, #6]
 8013e38:	fb13 f302 	smulbb	r3, r3, r2
 8013e3c:	42bb      	cmp	r3, r7
 8013e3e:	f6bf af7c 	bge.w	8013d3a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8013e42:	e79e      	b.n	8013d82 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8013e44:	2700      	movs	r7, #0
 8013e46:	e7ee      	b.n	8013e26 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8013e48:	2300      	movs	r3, #0
 8013e4a:	e7f7      	b.n	8013e3c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8013e4c:	2401aabc 	.word	0x2401aabc
 8013e50:	2401aaa4 	.word	0x2401aaa4

08013e54 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8013e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e56:	4c24      	ldr	r4, [pc, #144]	; (8013ee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8013e58:	6823      	ldr	r3, [r4, #0]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d042      	beq.n	8013ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8013e5e:	4a23      	ldr	r2, [pc, #140]	; (8013eec <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8013e60:	4d23      	ldr	r5, [pc, #140]	; (8013ef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8013e62:	8811      	ldrh	r1, [r2, #0]
 8013e64:	f8b5 c000 	ldrh.w	ip, [r5]
 8013e68:	4822      	ldr	r0, [pc, #136]	; (8013ef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8013e6a:	4461      	add	r1, ip
 8013e6c:	1c4a      	adds	r2, r1, #1
 8013e6e:	008f      	lsls	r7, r1, #2
 8013e70:	f022 0201 	bic.w	r2, r2, #1
 8013e74:	19de      	adds	r6, r3, r7
 8013e76:	0412      	lsls	r2, r2, #16
 8013e78:	6006      	str	r6, [r0, #0]
 8013e7a:	4e1f      	ldr	r6, [pc, #124]	; (8013ef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8013e7c:	0c12      	lsrs	r2, r2, #16
 8013e7e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8013e82:	19da      	adds	r2, r3, r7
 8013e84:	6032      	str	r2, [r6, #0]
 8013e86:	220e      	movs	r2, #14
 8013e88:	fb02 f20c 	mul.w	r2, r2, ip
 8013e8c:	3203      	adds	r2, #3
 8013e8e:	f022 0203 	bic.w	r2, r2, #3
 8013e92:	443a      	add	r2, r7
 8013e94:	4f19      	ldr	r7, [pc, #100]	; (8013efc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8013e96:	4413      	add	r3, r2
 8013e98:	603b      	str	r3, [r7, #0]
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	4f18      	ldr	r7, [pc, #96]	; (8013f00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8013e9e:	469c      	mov	ip, r3
 8013ea0:	803b      	strh	r3, [r7, #0]
 8013ea2:	4f18      	ldr	r7, [pc, #96]	; (8013f04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8013ea4:	683f      	ldr	r7, [r7, #0]
 8013ea6:	1aba      	subs	r2, r7, r2
 8013ea8:	4f17      	ldr	r7, [pc, #92]	; (8013f08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8013eaa:	603a      	str	r2, [r7, #0]
 8013eac:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8013eb0:	4a16      	ldr	r2, [pc, #88]	; (8013f0c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8013eb2:	8013      	strh	r3, [r2, #0]
 8013eb4:	428b      	cmp	r3, r1
 8013eb6:	d10d      	bne.n	8013ed4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8013eb8:	882d      	ldrh	r5, [r5, #0]
 8013eba:	2300      	movs	r3, #0
 8013ebc:	6830      	ldr	r0, [r6, #0]
 8013ebe:	240e      	movs	r4, #14
 8013ec0:	429d      	cmp	r5, r3
 8013ec2:	d90f      	bls.n	8013ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8013ec4:	fb04 0203 	mla	r2, r4, r3, r0
 8013ec8:	3301      	adds	r3, #1
 8013eca:	7b11      	ldrb	r1, [r2, #12]
 8013ecc:	f36f 1145 	bfc	r1, #5, #1
 8013ed0:	7311      	strb	r1, [r2, #12]
 8013ed2:	e7f5      	b.n	8013ec0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8013ed4:	6822      	ldr	r2, [r4, #0]
 8013ed6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8013eda:	6802      	ldr	r2, [r0, #0]
 8013edc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	e7e7      	b.n	8013eb4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8013ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ee6:	bf00      	nop
 8013ee8:	2401aaa0 	.word	0x2401aaa0
 8013eec:	2401aabc 	.word	0x2401aabc
 8013ef0:	2401aac0 	.word	0x2401aac0
 8013ef4:	2401aab4 	.word	0x2401aab4
 8013ef8:	2401aaa4 	.word	0x2401aaa4
 8013efc:	2401aaac 	.word	0x2401aaac
 8013f00:	2401aabe 	.word	0x2401aabe
 8013f04:	2401aaa8 	.word	0x2401aaa8
 8013f08:	2401aab8 	.word	0x2401aab8
 8013f0c:	2401aab0 	.word	0x2401aab0

08013f10 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8013f10:	4b06      	ldr	r3, [pc, #24]	; (8013f2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	b943      	cbnz	r3, 8013f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8013f16:	b139      	cbz	r1, 8013f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8013f18:	4b05      	ldr	r3, [pc, #20]	; (8013f30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8013f1a:	801a      	strh	r2, [r3, #0]
 8013f1c:	4b05      	ldr	r3, [pc, #20]	; (8013f34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8013f1e:	6019      	str	r1, [r3, #0]
 8013f20:	4b05      	ldr	r3, [pc, #20]	; (8013f38 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8013f22:	6018      	str	r0, [r3, #0]
 8013f24:	f7ff bf96 	b.w	8013e54 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8013f28:	4770      	bx	lr
 8013f2a:	bf00      	nop
 8013f2c:	2401aaac 	.word	0x2401aaac
 8013f30:	2401aac0 	.word	0x2401aac0
 8013f34:	2401aaa8 	.word	0x2401aaa8
 8013f38:	2401aaa0 	.word	0x2401aaa0

08013f3c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8013f3c:	b470      	push	{r4, r5, r6}
 8013f3e:	4c07      	ldr	r4, [pc, #28]	; (8013f5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8013f40:	4605      	mov	r5, r0
 8013f42:	4610      	mov	r0, r2
 8013f44:	9a03      	ldr	r2, [sp, #12]
 8013f46:	6826      	ldr	r6, [r4, #0]
 8013f48:	b936      	cbnz	r6, 8013f58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8013f4a:	6025      	str	r5, [r4, #0]
 8013f4c:	4c04      	ldr	r4, [pc, #16]	; (8013f60 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8013f4e:	8021      	strh	r1, [r4, #0]
 8013f50:	4619      	mov	r1, r3
 8013f52:	bc70      	pop	{r4, r5, r6}
 8013f54:	f7ff bfdc 	b.w	8013f10 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8013f58:	bc70      	pop	{r4, r5, r6}
 8013f5a:	4770      	bx	lr
 8013f5c:	2401aac4 	.word	0x2401aac4
 8013f60:	2401aabc 	.word	0x2401aabc

08013f64 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8013f64:	4a12      	ldr	r2, [pc, #72]	; (8013fb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8013f66:	8803      	ldrh	r3, [r0, #0]
 8013f68:	8812      	ldrh	r2, [r2, #0]
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	d207      	bcs.n	8013f7e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8013f6e:	4a11      	ldr	r2, [pc, #68]	; (8013fb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8013f70:	2114      	movs	r1, #20
 8013f72:	6812      	ldr	r2, [r2, #0]
 8013f74:	fb01 2303 	mla	r3, r1, r3, r2
 8013f78:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8013f7c:	4770      	bx	lr
 8013f7e:	490e      	ldr	r1, [pc, #56]	; (8013fb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8013f80:	8809      	ldrh	r1, [r1, #0]
 8013f82:	4411      	add	r1, r2
 8013f84:	428b      	cmp	r3, r1
 8013f86:	da04      	bge.n	8013f92 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8013f88:	1a9b      	subs	r3, r3, r2
 8013f8a:	4a0c      	ldr	r2, [pc, #48]	; (8013fbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8013f8c:	210e      	movs	r1, #14
 8013f8e:	6812      	ldr	r2, [r2, #0]
 8013f90:	e7f0      	b.n	8013f74 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8013f92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d108      	bne.n	8013fac <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8013f9a:	4b09      	ldr	r3, [pc, #36]	; (8013fc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	b91b      	cbnz	r3, 8013fa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8013fa0:	4b08      	ldr	r3, [pc, #32]	; (8013fc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8013fa2:	f9b3 0000 	ldrsh.w	r0, [r3]
 8013fa6:	4770      	bx	lr
 8013fa8:	4b07      	ldr	r3, [pc, #28]	; (8013fc8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8013faa:	e7fa      	b.n	8013fa2 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8013fac:	2000      	movs	r0, #0
 8013fae:	4770      	bx	lr
 8013fb0:	2401aabc 	.word	0x2401aabc
 8013fb4:	2401aac4 	.word	0x2401aac4
 8013fb8:	2401aac0 	.word	0x2401aac0
 8013fbc:	2401aaa4 	.word	0x2401aaa4
 8013fc0:	2401aa34 	.word	0x2401aa34
 8013fc4:	2401aa36 	.word	0x2401aa36
 8013fc8:	2401aa38 	.word	0x2401aa38

08013fcc <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8013fcc:	4a12      	ldr	r2, [pc, #72]	; (8014018 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8013fce:	8803      	ldrh	r3, [r0, #0]
 8013fd0:	8812      	ldrh	r2, [r2, #0]
 8013fd2:	4293      	cmp	r3, r2
 8013fd4:	d207      	bcs.n	8013fe6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8013fd6:	4a11      	ldr	r2, [pc, #68]	; (801401c <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8013fd8:	2114      	movs	r1, #20
 8013fda:	6812      	ldr	r2, [r2, #0]
 8013fdc:	fb01 2303 	mla	r3, r1, r3, r2
 8013fe0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8013fe4:	4770      	bx	lr
 8013fe6:	490e      	ldr	r1, [pc, #56]	; (8014020 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8013fe8:	8809      	ldrh	r1, [r1, #0]
 8013fea:	4411      	add	r1, r2
 8013fec:	428b      	cmp	r3, r1
 8013fee:	da04      	bge.n	8013ffa <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8013ff0:	1a9b      	subs	r3, r3, r2
 8013ff2:	4a0c      	ldr	r2, [pc, #48]	; (8014024 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8013ff4:	210e      	movs	r1, #14
 8013ff6:	6812      	ldr	r2, [r2, #0]
 8013ff8:	e7f0      	b.n	8013fdc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8013ffa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013ffe:	4293      	cmp	r3, r2
 8014000:	d108      	bne.n	8014014 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8014002:	4b09      	ldr	r3, [pc, #36]	; (8014028 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	b91b      	cbnz	r3, 8014010 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8014008:	4b08      	ldr	r3, [pc, #32]	; (801402c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801400a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801400e:	4770      	bx	lr
 8014010:	4b07      	ldr	r3, [pc, #28]	; (8014030 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8014012:	e7fa      	b.n	801400a <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8014014:	2000      	movs	r0, #0
 8014016:	4770      	bx	lr
 8014018:	2401aabc 	.word	0x2401aabc
 801401c:	2401aac4 	.word	0x2401aac4
 8014020:	2401aac0 	.word	0x2401aac0
 8014024:	2401aaa4 	.word	0x2401aaa4
 8014028:	2401aa34 	.word	0x2401aa34
 801402c:	2401aa38 	.word	0x2401aa38
 8014030:	2401aa36 	.word	0x2401aa36

08014034 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8014034:	4a1f      	ldr	r2, [pc, #124]	; (80140b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8014036:	b510      	push	{r4, lr}
 8014038:	880b      	ldrh	r3, [r1, #0]
 801403a:	8812      	ldrh	r2, [r2, #0]
 801403c:	4293      	cmp	r3, r2
 801403e:	d213      	bcs.n	8014068 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 8014040:	4a1d      	ldr	r2, [pc, #116]	; (80140b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8014042:	2114      	movs	r1, #20
 8014044:	6812      	ldr	r2, [r2, #0]
 8014046:	fb01 2303 	mla	r3, r1, r3, r2
 801404a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801404e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8014052:	8a1a      	ldrh	r2, [r3, #16]
 8014054:	8a5b      	ldrh	r3, [r3, #18]
 8014056:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801405a:	8004      	strh	r4, [r0, #0]
 801405c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014060:	8041      	strh	r1, [r0, #2]
 8014062:	8082      	strh	r2, [r0, #4]
 8014064:	80c3      	strh	r3, [r0, #6]
 8014066:	e00e      	b.n	8014086 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8014068:	4914      	ldr	r1, [pc, #80]	; (80140bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 801406a:	8809      	ldrh	r1, [r1, #0]
 801406c:	4411      	add	r1, r2
 801406e:	428b      	cmp	r3, r1
 8014070:	da0a      	bge.n	8014088 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 8014072:	1a9b      	subs	r3, r3, r2
 8014074:	4a12      	ldr	r2, [pc, #72]	; (80140c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8014076:	210e      	movs	r1, #14
 8014078:	6812      	ldr	r2, [r2, #0]
 801407a:	fb01 2303 	mla	r3, r1, r3, r2
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	6002      	str	r2, [r0, #0]
 8014082:	685a      	ldr	r2, [r3, #4]
 8014084:	6042      	str	r2, [r0, #4]
 8014086:	bd10      	pop	{r4, pc}
 8014088:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801408c:	4293      	cmp	r3, r2
 801408e:	d10b      	bne.n	80140a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 8014090:	4b0c      	ldr	r3, [pc, #48]	; (80140c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 8014092:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014096:	4b0c      	ldr	r3, [pc, #48]	; (80140c8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8014098:	8081      	strh	r1, [r0, #4]
 801409a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801409e:	2300      	movs	r3, #0
 80140a0:	80c2      	strh	r2, [r0, #6]
 80140a2:	8003      	strh	r3, [r0, #0]
 80140a4:	8043      	strh	r3, [r0, #2]
 80140a6:	e7ee      	b.n	8014086 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80140a8:	2300      	movs	r3, #0
 80140aa:	8003      	strh	r3, [r0, #0]
 80140ac:	8043      	strh	r3, [r0, #2]
 80140ae:	8083      	strh	r3, [r0, #4]
 80140b0:	e7d8      	b.n	8014064 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80140b2:	bf00      	nop
 80140b4:	2401aabc 	.word	0x2401aabc
 80140b8:	2401aac4 	.word	0x2401aac4
 80140bc:	2401aac0 	.word	0x2401aac0
 80140c0:	2401aaa4 	.word	0x2401aaa4
 80140c4:	2401aa30 	.word	0x2401aa30
 80140c8:	2401aa32 	.word	0x2401aa32

080140cc <_ZNK8touchgfx6Bitmap7getDataEv>:
 80140cc:	4a12      	ldr	r2, [pc, #72]	; (8014118 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80140ce:	8803      	ldrh	r3, [r0, #0]
 80140d0:	8811      	ldrh	r1, [r2, #0]
 80140d2:	428b      	cmp	r3, r1
 80140d4:	d20b      	bcs.n	80140ee <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80140d6:	4a11      	ldr	r2, [pc, #68]	; (801411c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80140d8:	6812      	ldr	r2, [r2, #0]
 80140da:	b112      	cbz	r2, 80140e2 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80140dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80140e0:	b9c0      	cbnz	r0, 8014114 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 80140e2:	4a0f      	ldr	r2, [pc, #60]	; (8014120 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 80140e4:	6811      	ldr	r1, [r2, #0]
 80140e6:	2214      	movs	r2, #20
 80140e8:	4353      	muls	r3, r2
 80140ea:	58c8      	ldr	r0, [r1, r3]
 80140ec:	4770      	bx	lr
 80140ee:	4a0d      	ldr	r2, [pc, #52]	; (8014124 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80140f0:	8812      	ldrh	r2, [r2, #0]
 80140f2:	440a      	add	r2, r1
 80140f4:	4293      	cmp	r3, r2
 80140f6:	da04      	bge.n	8014102 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 80140f8:	4a08      	ldr	r2, [pc, #32]	; (801411c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80140fa:	6812      	ldr	r2, [r2, #0]
 80140fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014100:	4770      	bx	lr
 8014102:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014106:	4293      	cmp	r3, r2
 8014108:	d103      	bne.n	8014112 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801410a:	4b07      	ldr	r3, [pc, #28]	; (8014128 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8014110:	4770      	bx	lr
 8014112:	2000      	movs	r0, #0
 8014114:	4770      	bx	lr
 8014116:	bf00      	nop
 8014118:	2401aabc 	.word	0x2401aabc
 801411c:	2401aaa0 	.word	0x2401aaa0
 8014120:	2401aac4 	.word	0x2401aac4
 8014124:	2401aac0 	.word	0x2401aac0
 8014128:	2401aa3c 	.word	0x2401aa3c

0801412c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801412c:	4b24      	ldr	r3, [pc, #144]	; (80141c0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801412e:	8802      	ldrh	r2, [r0, #0]
 8014130:	8818      	ldrh	r0, [r3, #0]
 8014132:	4282      	cmp	r2, r0
 8014134:	d221      	bcs.n	801417a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8014136:	4b23      	ldr	r3, [pc, #140]	; (80141c4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8014138:	6819      	ldr	r1, [r3, #0]
 801413a:	2314      	movs	r3, #20
 801413c:	fb03 1302 	mla	r3, r3, r2, r1
 8014140:	6858      	ldr	r0, [r3, #4]
 8014142:	2800      	cmp	r0, #0
 8014144:	d03a      	beq.n	80141bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8014146:	4920      	ldr	r1, [pc, #128]	; (80141c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8014148:	6809      	ldr	r1, [r1, #0]
 801414a:	2900      	cmp	r1, #0
 801414c:	d036      	beq.n	80141bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801414e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8014152:	2900      	cmp	r1, #0
 8014154:	d032      	beq.n	80141bc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8014156:	891a      	ldrh	r2, [r3, #8]
 8014158:	8958      	ldrh	r0, [r3, #10]
 801415a:	4350      	muls	r0, r2
 801415c:	7c5a      	ldrb	r2, [r3, #17]
 801415e:	7cdb      	ldrb	r3, [r3, #19]
 8014160:	0952      	lsrs	r2, r2, #5
 8014162:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8014166:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801416a:	2b0b      	cmp	r3, #11
 801416c:	bf18      	it	ne
 801416e:	0040      	lslne	r0, r0, #1
 8014170:	3003      	adds	r0, #3
 8014172:	f020 0003 	bic.w	r0, r0, #3
 8014176:	4408      	add	r0, r1
 8014178:	4770      	bx	lr
 801417a:	4b14      	ldr	r3, [pc, #80]	; (80141cc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801417c:	881b      	ldrh	r3, [r3, #0]
 801417e:	4403      	add	r3, r0
 8014180:	429a      	cmp	r2, r3
 8014182:	da1a      	bge.n	80141ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8014184:	4b12      	ldr	r3, [pc, #72]	; (80141d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8014186:	1a10      	subs	r0, r2, r0
 8014188:	210e      	movs	r1, #14
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	fb01 3000 	mla	r0, r1, r0, r3
 8014190:	7b03      	ldrb	r3, [r0, #12]
 8014192:	f003 031f 	and.w	r3, r3, #31
 8014196:	2b0b      	cmp	r3, #11
 8014198:	d10b      	bne.n	80141b2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801419a:	8903      	ldrh	r3, [r0, #8]
 801419c:	8940      	ldrh	r0, [r0, #10]
 801419e:	4358      	muls	r0, r3
 80141a0:	4b09      	ldr	r3, [pc, #36]	; (80141c8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80141a2:	3003      	adds	r0, #3
 80141a4:	6819      	ldr	r1, [r3, #0]
 80141a6:	f020 0303 	bic.w	r3, r0, #3
 80141aa:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80141ae:	4418      	add	r0, r3
 80141b0:	4770      	bx	lr
 80141b2:	2b0d      	cmp	r3, #13
 80141b4:	d101      	bne.n	80141ba <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80141b6:	300d      	adds	r0, #13
 80141b8:	4770      	bx	lr
 80141ba:	2000      	movs	r0, #0
 80141bc:	4770      	bx	lr
 80141be:	bf00      	nop
 80141c0:	2401aabc 	.word	0x2401aabc
 80141c4:	2401aac4 	.word	0x2401aac4
 80141c8:	2401aaa0 	.word	0x2401aaa0
 80141cc:	2401aac0 	.word	0x2401aac0
 80141d0:	2401aaa4 	.word	0x2401aaa4

080141d4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80141d4:	4a17      	ldr	r2, [pc, #92]	; (8014234 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 80141d6:	b510      	push	{r4, lr}
 80141d8:	8803      	ldrh	r3, [r0, #0]
 80141da:	8812      	ldrh	r2, [r2, #0]
 80141dc:	4293      	cmp	r3, r2
 80141de:	d20c      	bcs.n	80141fa <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 80141e0:	4a15      	ldr	r2, [pc, #84]	; (8014238 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 80141e2:	2114      	movs	r1, #20
 80141e4:	6812      	ldr	r2, [r2, #0]
 80141e6:	fb01 2303 	mla	r3, r1, r3, r2
 80141ea:	7c58      	ldrb	r0, [r3, #17]
 80141ec:	0942      	lsrs	r2, r0, #5
 80141ee:	7cd8      	ldrb	r0, [r3, #19]
 80141f0:	f3c0 1042 	ubfx	r0, r0, #5, #3
 80141f4:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80141f8:	bd10      	pop	{r4, pc}
 80141fa:	4910      	ldr	r1, [pc, #64]	; (801423c <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 80141fc:	8809      	ldrh	r1, [r1, #0]
 80141fe:	4411      	add	r1, r2
 8014200:	428b      	cmp	r3, r1
 8014202:	da09      	bge.n	8014218 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8014204:	1a9b      	subs	r3, r3, r2
 8014206:	4a0e      	ldr	r2, [pc, #56]	; (8014240 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8014208:	210e      	movs	r1, #14
 801420a:	6812      	ldr	r2, [r2, #0]
 801420c:	fb01 2303 	mla	r3, r1, r3, r2
 8014210:	7b18      	ldrb	r0, [r3, #12]
 8014212:	f000 001f 	and.w	r0, r0, #31
 8014216:	e7ef      	b.n	80141f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8014218:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801421c:	4293      	cmp	r3, r2
 801421e:	d106      	bne.n	801422e <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8014220:	f7f5 fcb8 	bl	8009b94 <_ZN8touchgfx3HAL3lcdEv>
 8014224:	6803      	ldr	r3, [r0, #0]
 8014226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801422c:	4718      	bx	r3
 801422e:	2000      	movs	r0, #0
 8014230:	e7e2      	b.n	80141f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8014232:	bf00      	nop
 8014234:	2401aabc 	.word	0x2401aabc
 8014238:	2401aac4 	.word	0x2401aac4
 801423c:	2401aac0 	.word	0x2401aac0
 8014240:	2401aaa4 	.word	0x2401aaa4

08014244 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8014244:	2018      	movs	r0, #24
 8014246:	4770      	bx	lr

08014248 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8014248:	2001      	movs	r0, #1
 801424a:	4770      	bx	lr

0801424c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801424c:	4b02      	ldr	r3, [pc, #8]	; (8014258 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801424e:	8818      	ldrh	r0, [r3, #0]
 8014250:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8014254:	b280      	uxth	r0, r0
 8014256:	4770      	bx	lr
 8014258:	2401aa36 	.word	0x2401aa36

0801425c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801425c:	2bff      	cmp	r3, #255	; 0xff
 801425e:	d040      	beq.n	80142e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8014260:	2a2c      	cmp	r2, #44	; 0x2c
 8014262:	d02a      	beq.n	80142ba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8014264:	d80f      	bhi.n	8014286 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8014266:	2a08      	cmp	r2, #8
 8014268:	d037      	beq.n	80142da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801426a:	d805      	bhi.n	8014278 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801426c:	2a04      	cmp	r2, #4
 801426e:	d032      	beq.n	80142d6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8014270:	2a05      	cmp	r2, #5
 8014272:	d02e      	beq.n	80142d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8014274:	2000      	movs	r0, #0
 8014276:	4770      	bx	lr
 8014278:	2a0a      	cmp	r2, #10
 801427a:	d02e      	beq.n	80142da <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801427c:	d301      	bcc.n	8014282 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801427e:	2a0b      	cmp	r2, #11
 8014280:	d1f8      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014282:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8014284:	4770      	bx	lr
 8014286:	2a30      	cmp	r2, #48	; 0x30
 8014288:	d029      	beq.n	80142de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 801428a:	d808      	bhi.n	801429e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801428c:	2a2e      	cmp	r2, #46	; 0x2e
 801428e:	684b      	ldr	r3, [r1, #4]
 8014290:	d01a      	beq.n	80142c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8014292:	d90b      	bls.n	80142ac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d1ec      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801429a:	6a00      	ldr	r0, [r0, #32]
 801429c:	4770      	bx	lr
 801429e:	2a32      	cmp	r2, #50	; 0x32
 80142a0:	d01d      	beq.n	80142de <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80142a2:	d301      	bcc.n	80142a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 80142a4:	2a33      	cmp	r2, #51	; 0x33
 80142a6:	d1e5      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80142a8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80142aa:	4770      	bx	lr
 80142ac:	781b      	ldrb	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d0f3      	beq.n	801429a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 80142b2:	2b01      	cmp	r3, #1
 80142b4:	d1de      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80142b6:	6900      	ldr	r0, [r0, #16]
 80142b8:	4770      	bx	lr
 80142ba:	684b      	ldr	r3, [r1, #4]
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	b133      	cbz	r3, 80142ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d1d7      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80142c4:	6880      	ldr	r0, [r0, #8]
 80142c6:	4770      	bx	lr
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d1d2      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80142ce:	6980      	ldr	r0, [r0, #24]
 80142d0:	4770      	bx	lr
 80142d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80142d4:	4770      	bx	lr
 80142d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80142d8:	4770      	bx	lr
 80142da:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80142dc:	4770      	bx	lr
 80142de:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80142e0:	4770      	bx	lr
 80142e2:	2a2c      	cmp	r2, #44	; 0x2c
 80142e4:	d02a      	beq.n	801433c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 80142e6:	d80f      	bhi.n	8014308 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 80142e8:	2a08      	cmp	r2, #8
 80142ea:	d035      	beq.n	8014358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80142ec:	d805      	bhi.n	80142fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80142ee:	2a04      	cmp	r2, #4
 80142f0:	d030      	beq.n	8014354 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 80142f2:	2a05      	cmp	r2, #5
 80142f4:	d1be      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80142f6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80142f8:	4770      	bx	lr
 80142fa:	2a0a      	cmp	r2, #10
 80142fc:	d02c      	beq.n	8014358 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 80142fe:	d301      	bcc.n	8014304 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8014300:	2a0b      	cmp	r2, #11
 8014302:	d1b7      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014304:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014306:	4770      	bx	lr
 8014308:	2a30      	cmp	r2, #48	; 0x30
 801430a:	d027      	beq.n	801435c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 801430c:	d808      	bhi.n	8014320 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801430e:	2a2e      	cmp	r2, #46	; 0x2e
 8014310:	684b      	ldr	r3, [r1, #4]
 8014312:	d01a      	beq.n	801434a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8014314:	d90b      	bls.n	801432e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d1ab      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801431c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801431e:	4770      	bx	lr
 8014320:	2a32      	cmp	r2, #50	; 0x32
 8014322:	d01b      	beq.n	801435c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8014324:	d301      	bcc.n	801432a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8014326:	2a33      	cmp	r2, #51	; 0x33
 8014328:	d1a4      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801432a:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801432c:	4770      	bx	lr
 801432e:	781b      	ldrb	r3, [r3, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d0f3      	beq.n	801431c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8014334:	2b01      	cmp	r3, #1
 8014336:	d19d      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014338:	6940      	ldr	r0, [r0, #20]
 801433a:	4770      	bx	lr
 801433c:	684b      	ldr	r3, [r1, #4]
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	b133      	cbz	r3, 8014350 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8014342:	2b01      	cmp	r3, #1
 8014344:	d196      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014346:	68c0      	ldr	r0, [r0, #12]
 8014348:	4770      	bx	lr
 801434a:	781b      	ldrb	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d191      	bne.n	8014274 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8014350:	69c0      	ldr	r0, [r0, #28]
 8014352:	4770      	bx	lr
 8014354:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8014356:	4770      	bx	lr
 8014358:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801435a:	4770      	bx	lr
 801435c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801435e:	4770      	bx	lr

08014360 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014364:	b085      	sub	sp, #20
 8014366:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8014368:	9203      	str	r2, [sp, #12]
 801436a:	6870      	ldr	r0, [r6, #4]
 801436c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014370:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8014374:	9101      	str	r1, [sp, #4]
 8014376:	fa1f f885 	uxth.w	r8, r5
 801437a:	43ed      	mvns	r5, r5
 801437c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014380:	b2ed      	uxtb	r5, r5
 8014382:	fb00 2404 	mla	r4, r0, r4, r2
 8014386:	6832      	ldr	r2, [r6, #0]
 8014388:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801438c:	4414      	add	r4, r2
 801438e:	f8dc 2000 	ldr.w	r2, [ip]
 8014392:	9202      	str	r2, [sp, #8]
 8014394:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014398:	f102 0e04 	add.w	lr, r2, #4
 801439c:	9a01      	ldr	r2, [sp, #4]
 801439e:	2a00      	cmp	r2, #0
 80143a0:	dc03      	bgt.n	80143aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80143a2:	9a03      	ldr	r2, [sp, #12]
 80143a4:	2a00      	cmp	r2, #0
 80143a6:	f340 8116 	ble.w	80145d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80143aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80143ac:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80143b0:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80143b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143b6:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80143ba:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80143be:	2b00      	cmp	r3, #0
 80143c0:	dd0e      	ble.n	80143e0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 80143c2:	1406      	asrs	r6, r0, #16
 80143c4:	d405      	bmi.n	80143d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80143c6:	4556      	cmp	r6, sl
 80143c8:	da03      	bge.n	80143d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80143ca:	1416      	asrs	r6, r2, #16
 80143cc:	d401      	bmi.n	80143d2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80143ce:	454e      	cmp	r6, r9
 80143d0:	db07      	blt.n	80143e2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80143d2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80143d4:	3b01      	subs	r3, #1
 80143d6:	3403      	adds	r4, #3
 80143d8:	4430      	add	r0, r6
 80143da:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80143dc:	4432      	add	r2, r6
 80143de:	e7ee      	b.n	80143be <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80143e0:	d063      	beq.n	80144aa <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80143e2:	1e5e      	subs	r6, r3, #1
 80143e4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80143e6:	fb07 0706 	mla	r7, r7, r6, r0
 80143ea:	143f      	asrs	r7, r7, #16
 80143ec:	d454      	bmi.n	8014498 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80143ee:	4557      	cmp	r7, sl
 80143f0:	da52      	bge.n	8014498 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80143f2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80143f4:	fb07 2606 	mla	r6, r7, r6, r2
 80143f8:	1436      	asrs	r6, r6, #16
 80143fa:	d44d      	bmi.n	8014498 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80143fc:	454e      	cmp	r6, r9
 80143fe:	da4b      	bge.n	8014498 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8014400:	1ce6      	adds	r6, r4, #3
 8014402:	4699      	mov	r9, r3
 8014404:	f1b9 0f00 	cmp.w	r9, #0
 8014408:	f106 0603 	add.w	r6, r6, #3
 801440c:	dd48      	ble.n	80144a0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801440e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8014412:	1417      	asrs	r7, r2, #16
 8014414:	9902      	ldr	r1, [sp, #8]
 8014416:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801441a:	f109 39ff 	add.w	r9, r9, #4294967295
 801441e:	fb0b 1707 	mla	r7, fp, r7, r1
 8014422:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014426:	9911      	ldr	r1, [sp, #68]	; 0x44
 8014428:	f817 700a 	ldrb.w	r7, [r7, sl]
 801442c:	fb1b fb05 	smulbb	fp, fp, r5
 8014430:	4408      	add	r0, r1
 8014432:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014434:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014438:	440a      	add	r2, r1
 801443a:	eb0e 0a07 	add.w	sl, lr, r7
 801443e:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8014442:	fb07 b708 	mla	r7, r7, r8, fp
 8014446:	b2bf      	uxth	r7, r7
 8014448:	f107 0b01 	add.w	fp, r7, #1
 801444c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014450:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014454:	fb1b fb05 	smulbb	fp, fp, r5
 8014458:	123f      	asrs	r7, r7, #8
 801445a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801445e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014462:	fb07 b708 	mla	r7, r7, r8, fp
 8014466:	b2bf      	uxth	r7, r7
 8014468:	f107 0b01 	add.w	fp, r7, #1
 801446c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014470:	123f      	asrs	r7, r7, #8
 8014472:	f806 7c05 	strb.w	r7, [r6, #-5]
 8014476:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801447a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801447e:	fb1a fa05 	smulbb	sl, sl, r5
 8014482:	fb07 a708 	mla	r7, r7, r8, sl
 8014486:	b2bf      	uxth	r7, r7
 8014488:	f107 0a01 	add.w	sl, r7, #1
 801448c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014490:	123f      	asrs	r7, r7, #8
 8014492:	f806 7c04 	strb.w	r7, [r6, #-4]
 8014496:	e7b5      	b.n	8014404 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8014498:	2700      	movs	r7, #0
 801449a:	1bde      	subs	r6, r3, r7
 801449c:	2e00      	cmp	r6, #0
 801449e:	dc42      	bgt.n	8014526 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80144a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80144a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80144a8:	441c      	add	r4, r3
 80144aa:	9b01      	ldr	r3, [sp, #4]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	f340 8092 	ble.w	80145d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 80144b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80144b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80144b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80144bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80144c0:	eef0 6a62 	vmov.f32	s13, s5
 80144c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80144c8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80144cc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80144d0:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80144d4:	eef0 6a43 	vmov.f32	s13, s6
 80144d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80144dc:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80144e0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80144e4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80144e8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80144ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80144f0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80144f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80144f8:	ee12 2a90 	vmov	r2, s5
 80144fc:	eef0 2a47 	vmov.f32	s5, s14
 8014500:	fb92 f3f3 	sdiv	r3, r2, r3
 8014504:	ee13 2a10 	vmov	r2, s6
 8014508:	9311      	str	r3, [sp, #68]	; 0x44
 801450a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801450c:	eeb0 3a67 	vmov.f32	s6, s15
 8014510:	fb92 f3f3 	sdiv	r3, r2, r3
 8014514:	9312      	str	r3, [sp, #72]	; 0x48
 8014516:	9b01      	ldr	r3, [sp, #4]
 8014518:	9a03      	ldr	r2, [sp, #12]
 801451a:	3b01      	subs	r3, #1
 801451c:	9301      	str	r3, [sp, #4]
 801451e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014520:	bf08      	it	eq
 8014522:	4613      	moveq	r3, r2
 8014524:	e73a      	b.n	801439c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014526:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801452a:	d44e      	bmi.n	80145ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801452c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014530:	4556      	cmp	r6, sl
 8014532:	dd4a      	ble.n	80145ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014534:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8014538:	d447      	bmi.n	80145ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801453a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801453e:	4559      	cmp	r1, fp
 8014540:	dd43      	ble.n	80145ca <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8014542:	fa0f f986 	sxth.w	r9, r6
 8014546:	9902      	ldr	r1, [sp, #8]
 8014548:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801454c:	fb0b 1909 	mla	r9, fp, r9, r1
 8014550:	f814 b006 	ldrb.w	fp, [r4, r6]
 8014554:	f819 900a 	ldrb.w	r9, [r9, sl]
 8014558:	fb1b fb05 	smulbb	fp, fp, r5
 801455c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014560:	eb0e 0a09 	add.w	sl, lr, r9
 8014564:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8014568:	fb09 b908 	mla	r9, r9, r8, fp
 801456c:	fa1f f989 	uxth.w	r9, r9
 8014570:	f109 0b01 	add.w	fp, r9, #1
 8014574:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014578:	ea4f 2929 	mov.w	r9, r9, asr #8
 801457c:	f804 9006 	strb.w	r9, [r4, r6]
 8014580:	4426      	add	r6, r4
 8014582:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014586:	f896 b001 	ldrb.w	fp, [r6, #1]
 801458a:	fb1b fb05 	smulbb	fp, fp, r5
 801458e:	fb09 b908 	mla	r9, r9, r8, fp
 8014592:	fa1f f989 	uxth.w	r9, r9
 8014596:	f109 0b01 	add.w	fp, r9, #1
 801459a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801459e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145a2:	f886 9001 	strb.w	r9, [r6, #1]
 80145a6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80145aa:	f896 a002 	ldrb.w	sl, [r6, #2]
 80145ae:	fb1a fa05 	smulbb	sl, sl, r5
 80145b2:	fb09 a908 	mla	r9, r9, r8, sl
 80145b6:	fa1f f989 	uxth.w	r9, r9
 80145ba:	f109 0a01 	add.w	sl, r9, #1
 80145be:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80145c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80145c6:	f886 9002 	strb.w	r9, [r6, #2]
 80145ca:	9911      	ldr	r1, [sp, #68]	; 0x44
 80145cc:	3701      	adds	r7, #1
 80145ce:	4408      	add	r0, r1
 80145d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80145d2:	440a      	add	r2, r1
 80145d4:	e761      	b.n	801449a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80145d6:	b005      	add	sp, #20
 80145d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080145dc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80145dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80145e2:	4693      	mov	fp, r2
 80145e4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80145e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80145ea:	6868      	ldr	r0, [r5, #4]
 80145ec:	6877      	ldr	r7, [r6, #4]
 80145ee:	9100      	str	r1, [sp, #0]
 80145f0:	3704      	adds	r7, #4
 80145f2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80145f6:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 80145fa:	fb00 2404 	mla	r4, r0, r4, r2
 80145fe:	682a      	ldr	r2, [r5, #0]
 8014600:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014604:	4414      	add	r4, r2
 8014606:	6832      	ldr	r2, [r6, #0]
 8014608:	9201      	str	r2, [sp, #4]
 801460a:	9a00      	ldr	r2, [sp, #0]
 801460c:	2a00      	cmp	r2, #0
 801460e:	dc03      	bgt.n	8014618 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8014610:	f1bb 0f00 	cmp.w	fp, #0
 8014614:	f340 80bc 	ble.w	8014790 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8014618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801461a:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801461e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014624:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8014628:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801462c:	2b00      	cmp	r3, #0
 801462e:	dd0c      	ble.n	801464a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8014630:	1405      	asrs	r5, r0, #16
 8014632:	d405      	bmi.n	8014640 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014634:	4555      	cmp	r5, sl
 8014636:	da03      	bge.n	8014640 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8014638:	1415      	asrs	r5, r2, #16
 801463a:	d401      	bmi.n	8014640 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801463c:	454d      	cmp	r5, r9
 801463e:	db05      	blt.n	801464c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014640:	4440      	add	r0, r8
 8014642:	4472      	add	r2, lr
 8014644:	3b01      	subs	r3, #1
 8014646:	3403      	adds	r4, #3
 8014648:	e7f0      	b.n	801462c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801464a:	d03f      	beq.n	80146cc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801464c:	1e5d      	subs	r5, r3, #1
 801464e:	fb08 0c05 	mla	ip, r8, r5, r0
 8014652:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8014656:	d42e      	bmi.n	80146b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014658:	45d4      	cmp	ip, sl
 801465a:	da2c      	bge.n	80146b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801465c:	fb0e 2505 	mla	r5, lr, r5, r2
 8014660:	142d      	asrs	r5, r5, #16
 8014662:	d428      	bmi.n	80146b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014664:	454d      	cmp	r5, r9
 8014666:	da26      	bge.n	80146b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014668:	1ce5      	adds	r5, r4, #3
 801466a:	469c      	mov	ip, r3
 801466c:	f1bc 0f00 	cmp.w	ip, #0
 8014670:	f105 0503 	add.w	r5, r5, #3
 8014674:	dd25      	ble.n	80146c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8014676:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801467a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801467e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014682:	4472      	add	r2, lr
 8014684:	468a      	mov	sl, r1
 8014686:	9901      	ldr	r1, [sp, #4]
 8014688:	fb0a 1909 	mla	r9, sl, r9, r1
 801468c:	1401      	asrs	r1, r0, #16
 801468e:	4440      	add	r0, r8
 8014690:	f819 9001 	ldrb.w	r9, [r9, r1]
 8014694:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014698:	eb07 0a09 	add.w	sl, r7, r9
 801469c:	f817 9009 	ldrb.w	r9, [r7, r9]
 80146a0:	f805 9c06 	strb.w	r9, [r5, #-6]
 80146a4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80146a8:	f805 9c05 	strb.w	r9, [r5, #-5]
 80146ac:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80146b0:	f805 9c04 	strb.w	r9, [r5, #-4]
 80146b4:	e7da      	b.n	801466c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80146b6:	2500      	movs	r5, #0
 80146b8:	eba3 0c05 	sub.w	ip, r3, r5
 80146bc:	f1bc 0f00 	cmp.w	ip, #0
 80146c0:	dc3b      	bgt.n	801473a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80146c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80146c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80146ca:	441c      	add	r4, r3
 80146cc:	9b00      	ldr	r3, [sp, #0]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	dd5e      	ble.n	8014790 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 80146d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80146d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80146dc:	eeb0 6a62 	vmov.f32	s12, s5
 80146e0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80146e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80146e8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80146ec:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80146f0:	eeb0 6a43 	vmov.f32	s12, s6
 80146f4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80146f8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80146fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014700:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014704:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014708:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801470c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014710:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014714:	ee12 2a90 	vmov	r2, s5
 8014718:	eef0 2a47 	vmov.f32	s5, s14
 801471c:	fb92 f8f3 	sdiv	r8, r2, r3
 8014720:	ee13 2a10 	vmov	r2, s6
 8014724:	eeb0 3a67 	vmov.f32	s6, s15
 8014728:	fb92 fef3 	sdiv	lr, r2, r3
 801472c:	9b00      	ldr	r3, [sp, #0]
 801472e:	3b01      	subs	r3, #1
 8014730:	9300      	str	r3, [sp, #0]
 8014732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014734:	bf08      	it	eq
 8014736:	465b      	moveq	r3, fp
 8014738:	e767      	b.n	801460a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801473a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801473e:	d423      	bmi.n	8014788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014740:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8014744:	45cc      	cmp	ip, r9
 8014746:	dd1f      	ble.n	8014788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014748:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801474c:	d41c      	bmi.n	8014788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801474e:	68f1      	ldr	r1, [r6, #12]
 8014750:	4551      	cmp	r1, sl
 8014752:	dd19      	ble.n	8014788 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8014754:	fa0f fc8c 	sxth.w	ip, ip
 8014758:	9901      	ldr	r1, [sp, #4]
 801475a:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801475e:	f81c c009 	ldrb.w	ip, [ip, r9]
 8014762:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8014766:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801476a:	eb07 090c 	add.w	r9, r7, ip
 801476e:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8014772:	f804 a00c 	strb.w	sl, [r4, ip]
 8014776:	44a4      	add	ip, r4
 8014778:	f899 a001 	ldrb.w	sl, [r9, #1]
 801477c:	f88c a001 	strb.w	sl, [ip, #1]
 8014780:	f899 9002 	ldrb.w	r9, [r9, #2]
 8014784:	f88c 9002 	strb.w	r9, [ip, #2]
 8014788:	4440      	add	r0, r8
 801478a:	4472      	add	r2, lr
 801478c:	3501      	adds	r5, #1
 801478e:	e793      	b.n	80146b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8014790:	b003      	add	sp, #12
 8014792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014796 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014796:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801479a:	b085      	sub	sp, #20
 801479c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80147a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80147a2:	9202      	str	r2, [sp, #8]
 80147a4:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80147a8:	6860      	ldr	r0, [r4, #4]
 80147aa:	9203      	str	r2, [sp, #12]
 80147ac:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80147b0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80147b4:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80147b8:	fb00 2505 	mla	r5, r0, r5, r2
 80147bc:	6822      	ldr	r2, [r4, #0]
 80147be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80147c2:	4415      	add	r5, r2
 80147c4:	f8dc 2000 	ldr.w	r2, [ip]
 80147c8:	9200      	str	r2, [sp, #0]
 80147ca:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80147ce:	3204      	adds	r2, #4
 80147d0:	9201      	str	r2, [sp, #4]
 80147d2:	2900      	cmp	r1, #0
 80147d4:	dc03      	bgt.n	80147de <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80147d6:	9a02      	ldr	r2, [sp, #8]
 80147d8:	2a00      	cmp	r2, #0
 80147da:	f340 8127 	ble.w	8014a2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 80147de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147e0:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80147e4:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80147e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80147ea:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80147ee:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	dd0d      	ble.n	8014812 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80147f6:	1422      	asrs	r2, r4, #16
 80147f8:	d405      	bmi.n	8014806 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80147fa:	4542      	cmp	r2, r8
 80147fc:	da03      	bge.n	8014806 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80147fe:	1402      	asrs	r2, r0, #16
 8014800:	d401      	bmi.n	8014806 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014802:	42ba      	cmp	r2, r7
 8014804:	db06      	blt.n	8014814 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8014806:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014808:	4474      	add	r4, lr
 801480a:	3b01      	subs	r3, #1
 801480c:	3503      	adds	r5, #3
 801480e:	4410      	add	r0, r2
 8014810:	e7ef      	b.n	80147f2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014812:	d075      	beq.n	8014900 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8014814:	1e5a      	subs	r2, r3, #1
 8014816:	fb0e 4602 	mla	r6, lr, r2, r4
 801481a:	1436      	asrs	r6, r6, #16
 801481c:	d465      	bmi.n	80148ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801481e:	4546      	cmp	r6, r8
 8014820:	da63      	bge.n	80148ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014822:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014824:	fb06 0202 	mla	r2, r6, r2, r0
 8014828:	1412      	asrs	r2, r2, #16
 801482a:	d45e      	bmi.n	80148ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801482c:	42ba      	cmp	r2, r7
 801482e:	da5c      	bge.n	80148ea <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8014830:	1cef      	adds	r7, r5, #3
 8014832:	4699      	mov	r9, r3
 8014834:	f1b9 0f00 	cmp.w	r9, #0
 8014838:	dd5d      	ble.n	80148f6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801483a:	1402      	asrs	r2, r0, #16
 801483c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014840:	1426      	asrs	r6, r4, #16
 8014842:	4692      	mov	sl, r2
 8014844:	9a00      	ldr	r2, [sp, #0]
 8014846:	fb08 220a 	mla	r2, r8, sl, r2
 801484a:	5d92      	ldrb	r2, [r2, r6]
 801484c:	9e01      	ldr	r6, [sp, #4]
 801484e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8014852:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8014856:	d041      	beq.n	80148dc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8014858:	9a03      	ldr	r2, [sp, #12]
 801485a:	fa5f fb86 	uxtb.w	fp, r6
 801485e:	fb02 f808 	mul.w	r8, r2, r8
 8014862:	f108 0201 	add.w	r2, r8, #1
 8014866:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801486a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801486e:	1212      	asrs	r2, r2, #8
 8014870:	fa1f fa82 	uxth.w	sl, r2
 8014874:	43d2      	mvns	r2, r2
 8014876:	fb1b fb0a 	smulbb	fp, fp, sl
 801487a:	b2d2      	uxtb	r2, r2
 801487c:	fb08 b802 	mla	r8, r8, r2, fp
 8014880:	fa1f f888 	uxth.w	r8, r8
 8014884:	f108 0b01 	add.w	fp, r8, #1
 8014888:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801488c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8014890:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014894:	fb1b fb0a 	smulbb	fp, fp, sl
 8014898:	ea4f 2828 	mov.w	r8, r8, asr #8
 801489c:	fb16 fa0a 	smulbb	sl, r6, sl
 80148a0:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80148a4:	f807 8c03 	strb.w	r8, [r7, #-3]
 80148a8:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80148ac:	fb06 aa02 	mla	sl, r6, r2, sl
 80148b0:	fb08 b802 	mla	r8, r8, r2, fp
 80148b4:	fa1f fa8a 	uxth.w	sl, sl
 80148b8:	fa1f f888 	uxth.w	r8, r8
 80148bc:	f10a 0601 	add.w	r6, sl, #1
 80148c0:	f108 0b01 	add.w	fp, r8, #1
 80148c4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80148c8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80148cc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80148d0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80148d4:	f807 ac01 	strb.w	sl, [r7, #-1]
 80148d8:	f807 8c02 	strb.w	r8, [r7, #-2]
 80148dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80148de:	4474      	add	r4, lr
 80148e0:	3703      	adds	r7, #3
 80148e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80148e6:	4410      	add	r0, r2
 80148e8:	e7a4      	b.n	8014834 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 80148ea:	f04f 0800 	mov.w	r8, #0
 80148ee:	eba3 0208 	sub.w	r2, r3, r8
 80148f2:	2a00      	cmp	r2, #0
 80148f4:	dc3b      	bgt.n	801496e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80148f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80148fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80148fe:	441d      	add	r5, r3
 8014900:	2900      	cmp	r1, #0
 8014902:	f340 8093 	ble.w	8014a2c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8014906:	ee30 0a04 	vadd.f32	s0, s0, s8
 801490a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801490c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014910:	3901      	subs	r1, #1
 8014912:	eeb0 6a62 	vmov.f32	s12, s5
 8014916:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801491a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801491e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014922:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014926:	eeb0 6a43 	vmov.f32	s12, s6
 801492a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801492e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014932:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014936:	ee61 7a27 	vmul.f32	s15, s2, s15
 801493a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801493e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014942:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014946:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801494a:	ee12 2a90 	vmov	r2, s5
 801494e:	eef0 2a47 	vmov.f32	s5, s14
 8014952:	fb92 fef3 	sdiv	lr, r2, r3
 8014956:	ee13 2a10 	vmov	r2, s6
 801495a:	eeb0 3a67 	vmov.f32	s6, s15
 801495e:	fb92 f3f3 	sdiv	r3, r2, r3
 8014962:	9a02      	ldr	r2, [sp, #8]
 8014964:	9312      	str	r3, [sp, #72]	; 0x48
 8014966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014968:	bf08      	it	eq
 801496a:	4613      	moveq	r3, r2
 801496c:	e731      	b.n	80147d2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801496e:	1427      	asrs	r7, r4, #16
 8014970:	d456      	bmi.n	8014a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014972:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8014976:	42be      	cmp	r6, r7
 8014978:	dd52      	ble.n	8014a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801497a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801497e:	d44f      	bmi.n	8014a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014980:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014984:	454a      	cmp	r2, r9
 8014986:	dd4b      	ble.n	8014a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8014988:	9a00      	ldr	r2, [sp, #0]
 801498a:	b236      	sxth	r6, r6
 801498c:	fb09 2606 	mla	r6, r9, r6, r2
 8014990:	5df2      	ldrb	r2, [r6, r7]
 8014992:	9e01      	ldr	r6, [sp, #4]
 8014994:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8014998:	0e3a      	lsrs	r2, r7, #24
 801499a:	d041      	beq.n	8014a20 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801499c:	9e03      	ldr	r6, [sp, #12]
 801499e:	fa5f fb87 	uxtb.w	fp, r7
 80149a2:	4372      	muls	r2, r6
 80149a4:	1c56      	adds	r6, r2, #1
 80149a6:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80149aa:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80149ae:	1212      	asrs	r2, r2, #8
 80149b0:	f815 9006 	ldrb.w	r9, [r5, r6]
 80149b4:	fa1f fa82 	uxth.w	sl, r2
 80149b8:	43d2      	mvns	r2, r2
 80149ba:	fb1b fb0a 	smulbb	fp, fp, sl
 80149be:	b2d2      	uxtb	r2, r2
 80149c0:	fb09 b902 	mla	r9, r9, r2, fp
 80149c4:	fa1f f989 	uxth.w	r9, r9
 80149c8:	f109 0b01 	add.w	fp, r9, #1
 80149cc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80149d0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80149d4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80149d8:	fb1b fb0a 	smulbb	fp, fp, sl
 80149dc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80149e0:	fb17 fa0a 	smulbb	sl, r7, sl
 80149e4:	f805 9006 	strb.w	r9, [r5, r6]
 80149e8:	442e      	add	r6, r5
 80149ea:	78b7      	ldrb	r7, [r6, #2]
 80149ec:	f896 9001 	ldrb.w	r9, [r6, #1]
 80149f0:	fb07 aa02 	mla	sl, r7, r2, sl
 80149f4:	fb09 b902 	mla	r9, r9, r2, fp
 80149f8:	fa1f fa8a 	uxth.w	sl, sl
 80149fc:	fa1f f989 	uxth.w	r9, r9
 8014a00:	f10a 0701 	add.w	r7, sl, #1
 8014a04:	f109 0b01 	add.w	fp, r9, #1
 8014a08:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8014a0c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014a10:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014a14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014a18:	f886 a002 	strb.w	sl, [r6, #2]
 8014a1c:	f886 9001 	strb.w	r9, [r6, #1]
 8014a20:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014a22:	4474      	add	r4, lr
 8014a24:	f108 0801 	add.w	r8, r8, #1
 8014a28:	4410      	add	r0, r2
 8014a2a:	e760      	b.n	80148ee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8014a2c:	b005      	add	sp, #20
 8014a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a32 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014a32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a36:	b085      	sub	sp, #20
 8014a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014a3c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8014a3e:	9203      	str	r2, [sp, #12]
 8014a40:	6868      	ldr	r0, [r5, #4]
 8014a42:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8014a46:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8014a4a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8014a4e:	fb00 2404 	mla	r4, r0, r4, r2
 8014a52:	682a      	ldr	r2, [r5, #0]
 8014a54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014a58:	4414      	add	r4, r2
 8014a5a:	f8dc 2000 	ldr.w	r2, [ip]
 8014a5e:	9201      	str	r2, [sp, #4]
 8014a60:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8014a64:	3204      	adds	r2, #4
 8014a66:	9202      	str	r2, [sp, #8]
 8014a68:	2900      	cmp	r1, #0
 8014a6a:	dc03      	bgt.n	8014a74 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8014a6c:	9a03      	ldr	r2, [sp, #12]
 8014a6e:	2a00      	cmp	r2, #0
 8014a70:	f340 8137 	ble.w	8014ce2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014a74:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a76:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014a7a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014a7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014a80:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8014a84:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	dd0d      	ble.n	8014aa8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8014a8c:	1405      	asrs	r5, r0, #16
 8014a8e:	d405      	bmi.n	8014a9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014a90:	4545      	cmp	r5, r8
 8014a92:	da03      	bge.n	8014a9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014a94:	1415      	asrs	r5, r2, #16
 8014a96:	d401      	bmi.n	8014a9c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8014a98:	42bd      	cmp	r5, r7
 8014a9a:	db06      	blt.n	8014aaa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8014a9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014a9e:	4470      	add	r0, lr
 8014aa0:	3b01      	subs	r3, #1
 8014aa2:	3403      	adds	r4, #3
 8014aa4:	442a      	add	r2, r5
 8014aa6:	e7ef      	b.n	8014a88 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8014aa8:	d070      	beq.n	8014b8c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8014aaa:	1e5d      	subs	r5, r3, #1
 8014aac:	fb0e 0605 	mla	r6, lr, r5, r0
 8014ab0:	1436      	asrs	r6, r6, #16
 8014ab2:	d462      	bmi.n	8014b7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014ab4:	4546      	cmp	r6, r8
 8014ab6:	da60      	bge.n	8014b7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014ab8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014aba:	fb06 2505 	mla	r5, r6, r5, r2
 8014abe:	142d      	asrs	r5, r5, #16
 8014ac0:	d45b      	bmi.n	8014b7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014ac2:	42bd      	cmp	r5, r7
 8014ac4:	da59      	bge.n	8014b7a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8014ac6:	1ce5      	adds	r5, r4, #3
 8014ac8:	469a      	mov	sl, r3
 8014aca:	f1ba 0f00 	cmp.w	sl, #0
 8014ace:	dd58      	ble.n	8014b82 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8014ad0:	1416      	asrs	r6, r2, #16
 8014ad2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8014ad6:	1407      	asrs	r7, r0, #16
 8014ad8:	46b1      	mov	r9, r6
 8014ada:	9e01      	ldr	r6, [sp, #4]
 8014adc:	fb08 6609 	mla	r6, r8, r9, r6
 8014ae0:	5df6      	ldrb	r6, [r6, r7]
 8014ae2:	9f02      	ldr	r7, [sp, #8]
 8014ae4:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8014ae8:	0e37      	lsrs	r7, r6, #24
 8014aea:	2fff      	cmp	r7, #255	; 0xff
 8014aec:	f000 80f0 	beq.w	8014cd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8014af0:	fa5f f887 	uxtb.w	r8, r7
 8014af4:	b3d7      	cbz	r7, 8014b6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014af6:	fa1f f788 	uxth.w	r7, r8
 8014afa:	ea6f 0808 	mvn.w	r8, r8
 8014afe:	fa5f fb86 	uxtb.w	fp, r6
 8014b02:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8014b06:	fa5f f888 	uxtb.w	r8, r8
 8014b0a:	fb1b fb07 	smulbb	fp, fp, r7
 8014b0e:	fb09 b908 	mla	r9, r9, r8, fp
 8014b12:	fa1f f989 	uxth.w	r9, r9
 8014b16:	f109 0b01 	add.w	fp, r9, #1
 8014b1a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014b1e:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8014b22:	fb1b fb08 	smulbb	fp, fp, r8
 8014b26:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014b2a:	f805 9c03 	strb.w	r9, [r5, #-3]
 8014b2e:	f3c6 2907 	ubfx	r9, r6, #8, #8
 8014b32:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8014b36:	fb09 b907 	mla	r9, r9, r7, fp
 8014b3a:	fa1f f989 	uxth.w	r9, r9
 8014b3e:	f109 0b01 	add.w	fp, r9, #1
 8014b42:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014b46:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014b4a:	f805 9c02 	strb.w	r9, [r5, #-2]
 8014b4e:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8014b52:	fb19 f808 	smulbb	r8, r9, r8
 8014b56:	fb06 8607 	mla	r6, r6, r7, r8
 8014b5a:	b2b6      	uxth	r6, r6
 8014b5c:	f106 0801 	add.w	r8, r6, #1
 8014b60:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8014b64:	ea4f 2828 	mov.w	r8, r8, asr #8
 8014b68:	f805 8c01 	strb.w	r8, [r5, #-1]
 8014b6c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8014b6e:	4470      	add	r0, lr
 8014b70:	3503      	adds	r5, #3
 8014b72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014b76:	4432      	add	r2, r6
 8014b78:	e7a7      	b.n	8014aca <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8014b7a:	2600      	movs	r6, #0
 8014b7c:	1b9d      	subs	r5, r3, r6
 8014b7e:	2d00      	cmp	r5, #0
 8014b80:	dc3b      	bgt.n	8014bfa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8014b82:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014b86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014b8a:	441c      	add	r4, r3
 8014b8c:	2900      	cmp	r1, #0
 8014b8e:	f340 80a8 	ble.w	8014ce2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8014b92:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014b96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014b98:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014b9c:	3901      	subs	r1, #1
 8014b9e:	eeb0 6a62 	vmov.f32	s12, s5
 8014ba2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8014ba6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014baa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014bae:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8014bb2:	eeb0 6a43 	vmov.f32	s12, s6
 8014bb6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8014bba:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8014bbe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014bc2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014bc6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014bca:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014bce:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014bd2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014bd6:	ee12 2a90 	vmov	r2, s5
 8014bda:	eef0 2a47 	vmov.f32	s5, s14
 8014bde:	fb92 fef3 	sdiv	lr, r2, r3
 8014be2:	ee13 2a10 	vmov	r2, s6
 8014be6:	eeb0 3a67 	vmov.f32	s6, s15
 8014bea:	fb92 f3f3 	sdiv	r3, r2, r3
 8014bee:	9a03      	ldr	r2, [sp, #12]
 8014bf0:	9312      	str	r3, [sp, #72]	; 0x48
 8014bf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014bf4:	bf08      	it	eq
 8014bf6:	4613      	moveq	r3, r2
 8014bf8:	e736      	b.n	8014a68 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8014bfa:	ea5f 4820 	movs.w	r8, r0, asr #16
 8014bfe:	d457      	bmi.n	8014cb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014c00:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8014c04:	4547      	cmp	r7, r8
 8014c06:	dd53      	ble.n	8014cb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014c08:	ea5f 4922 	movs.w	r9, r2, asr #16
 8014c0c:	d450      	bmi.n	8014cb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014c0e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8014c12:	454d      	cmp	r5, r9
 8014c14:	dd4c      	ble.n	8014cb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014c16:	9d01      	ldr	r5, [sp, #4]
 8014c18:	b23f      	sxth	r7, r7
 8014c1a:	fb09 5707 	mla	r7, r9, r7, r5
 8014c1e:	f817 5008 	ldrb.w	r5, [r7, r8]
 8014c22:	9f02      	ldr	r7, [sp, #8]
 8014c24:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8014c28:	0e2f      	lsrs	r7, r5, #24
 8014c2a:	2fff      	cmp	r7, #255	; 0xff
 8014c2c:	d045      	beq.n	8014cba <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8014c2e:	fa5f f987 	uxtb.w	r9, r7
 8014c32:	b3ef      	cbz	r7, 8014cb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014c34:	fa1f f889 	uxth.w	r8, r9
 8014c38:	ea6f 0909 	mvn.w	r9, r9
 8014c3c:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014c40:	fa5f fb85 	uxtb.w	fp, r5
 8014c44:	f814 a007 	ldrb.w	sl, [r4, r7]
 8014c48:	fa5f f989 	uxtb.w	r9, r9
 8014c4c:	fb1b fb08 	smulbb	fp, fp, r8
 8014c50:	fb0a ba09 	mla	sl, sl, r9, fp
 8014c54:	fa1f fa8a 	uxth.w	sl, sl
 8014c58:	f10a 0b01 	add.w	fp, sl, #1
 8014c5c:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014c60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014c64:	f804 a007 	strb.w	sl, [r4, r7]
 8014c68:	4427      	add	r7, r4
 8014c6a:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8014c6e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8014c72:	f897 b001 	ldrb.w	fp, [r7, #1]
 8014c76:	fb1b fb09 	smulbb	fp, fp, r9
 8014c7a:	fb0a ba08 	mla	sl, sl, r8, fp
 8014c7e:	fa1f fa8a 	uxth.w	sl, sl
 8014c82:	f10a 0b01 	add.w	fp, sl, #1
 8014c86:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8014c8a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8014c8e:	f887 a001 	strb.w	sl, [r7, #1]
 8014c92:	f897 a002 	ldrb.w	sl, [r7, #2]
 8014c96:	fb1a f909 	smulbb	r9, sl, r9
 8014c9a:	fb05 9508 	mla	r5, r5, r8, r9
 8014c9e:	b2ad      	uxth	r5, r5
 8014ca0:	f105 0901 	add.w	r9, r5, #1
 8014ca4:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8014ca8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014cac:	f887 9002 	strb.w	r9, [r7, #2]
 8014cb0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014cb2:	4470      	add	r0, lr
 8014cb4:	3601      	adds	r6, #1
 8014cb6:	442a      	add	r2, r5
 8014cb8:	e760      	b.n	8014b7c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8014cba:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8014cbe:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8014cc2:	55e5      	strb	r5, [r4, r7]
 8014cc4:	4427      	add	r7, r4
 8014cc6:	0c2d      	lsrs	r5, r5, #16
 8014cc8:	f887 8001 	strb.w	r8, [r7, #1]
 8014ccc:	70bd      	strb	r5, [r7, #2]
 8014cce:	e7ef      	b.n	8014cb0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8014cd0:	0a37      	lsrs	r7, r6, #8
 8014cd2:	f805 6c03 	strb.w	r6, [r5, #-3]
 8014cd6:	0c36      	lsrs	r6, r6, #16
 8014cd8:	f805 7c02 	strb.w	r7, [r5, #-2]
 8014cdc:	f805 6c01 	strb.w	r6, [r5, #-1]
 8014ce0:	e744      	b.n	8014b6c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8014ce2:	b005      	add	sp, #20
 8014ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014ce8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cec:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014cee:	9201      	str	r2, [sp, #4]
 8014cf0:	6870      	ldr	r0, [r6, #4]
 8014cf2:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8014cf6:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8014cfa:	fa1f fe85 	uxth.w	lr, r5
 8014cfe:	43ed      	mvns	r5, r5
 8014d00:	f8dc 8000 	ldr.w	r8, [ip]
 8014d04:	b2ed      	uxtb	r5, r5
 8014d06:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014d0a:	fb00 2404 	mla	r4, r0, r4, r2
 8014d0e:	6832      	ldr	r2, [r6, #0]
 8014d10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014d14:	4414      	add	r4, r2
 8014d16:	2900      	cmp	r1, #0
 8014d18:	dc03      	bgt.n	8014d22 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8014d1a:	9a01      	ldr	r2, [sp, #4]
 8014d1c:	2a00      	cmp	r2, #0
 8014d1e:	f340 810d 	ble.w	8014f3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014d22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014d24:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8014d28:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014d2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d2e:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8014d32:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	dd0e      	ble.n	8014d58 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8014d3a:	1406      	asrs	r6, r0, #16
 8014d3c:	d405      	bmi.n	8014d4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014d3e:	4556      	cmp	r6, sl
 8014d40:	da03      	bge.n	8014d4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014d42:	1416      	asrs	r6, r2, #16
 8014d44:	d401      	bmi.n	8014d4a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 8014d46:	454e      	cmp	r6, r9
 8014d48:	db07      	blt.n	8014d5a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8014d4a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014d4c:	3b01      	subs	r3, #1
 8014d4e:	3403      	adds	r4, #3
 8014d50:	4430      	add	r0, r6
 8014d52:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014d54:	4432      	add	r2, r6
 8014d56:	e7ee      	b.n	8014d36 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 8014d58:	d060      	beq.n	8014e1c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 8014d5a:	1e5e      	subs	r6, r3, #1
 8014d5c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014d5e:	fb07 0706 	mla	r7, r7, r6, r0
 8014d62:	143f      	asrs	r7, r7, #16
 8014d64:	d451      	bmi.n	8014e0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014d66:	4557      	cmp	r7, sl
 8014d68:	da4f      	bge.n	8014e0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014d6a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014d6c:	fb07 2606 	mla	r6, r7, r6, r2
 8014d70:	1436      	asrs	r6, r6, #16
 8014d72:	d44a      	bmi.n	8014e0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014d74:	454e      	cmp	r6, r9
 8014d76:	da48      	bge.n	8014e0a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8014d78:	1ce6      	adds	r6, r4, #3
 8014d7a:	4699      	mov	r9, r3
 8014d7c:	f1b9 0f00 	cmp.w	r9, #0
 8014d80:	f106 0603 	add.w	r6, r6, #3
 8014d84:	dd45      	ble.n	8014e12 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8014d86:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8014d8a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014d8e:	1417      	asrs	r7, r2, #16
 8014d90:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d94:	fb0b a707 	mla	r7, fp, r7, sl
 8014d98:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8014d9c:	fb1b fb05 	smulbb	fp, fp, r5
 8014da0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8014da4:	eb08 0a07 	add.w	sl, r8, r7
 8014da8:	f818 7007 	ldrb.w	r7, [r8, r7]
 8014dac:	fb07 b70e 	mla	r7, r7, lr, fp
 8014db0:	b2bf      	uxth	r7, r7
 8014db2:	f107 0b01 	add.w	fp, r7, #1
 8014db6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014dba:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8014dbe:	fb1b fb05 	smulbb	fp, fp, r5
 8014dc2:	123f      	asrs	r7, r7, #8
 8014dc4:	f806 7c06 	strb.w	r7, [r6, #-6]
 8014dc8:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8014dcc:	fb07 b70e 	mla	r7, r7, lr, fp
 8014dd0:	b2bf      	uxth	r7, r7
 8014dd2:	f107 0b01 	add.w	fp, r7, #1
 8014dd6:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8014dda:	123f      	asrs	r7, r7, #8
 8014ddc:	f806 7c05 	strb.w	r7, [r6, #-5]
 8014de0:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8014de4:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8014de8:	fb1a fa05 	smulbb	sl, sl, r5
 8014dec:	fb07 a70e 	mla	r7, r7, lr, sl
 8014df0:	b2bf      	uxth	r7, r7
 8014df2:	f107 0a01 	add.w	sl, r7, #1
 8014df6:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8014dfa:	123f      	asrs	r7, r7, #8
 8014dfc:	f806 7c04 	strb.w	r7, [r6, #-4]
 8014e00:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8014e02:	4438      	add	r0, r7
 8014e04:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8014e06:	443a      	add	r2, r7
 8014e08:	e7b8      	b.n	8014d7c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8014e0a:	2700      	movs	r7, #0
 8014e0c:	1bde      	subs	r6, r3, r7
 8014e0e:	2e00      	cmp	r6, #0
 8014e10:	dc3f      	bgt.n	8014e92 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8014e12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014e16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014e1a:	441c      	add	r4, r3
 8014e1c:	2900      	cmp	r1, #0
 8014e1e:	f340 808d 	ble.w	8014f3c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8014e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8014e2c:	3901      	subs	r1, #1
 8014e2e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8014e32:	eef0 6a62 	vmov.f32	s13, s5
 8014e36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014e3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8014e3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014e42:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 8014e46:	eef0 6a43 	vmov.f32	s13, s6
 8014e4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8014e4e:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 8014e52:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8014e56:	ee61 7a27 	vmul.f32	s15, s2, s15
 8014e5a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8014e5e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8014e62:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8014e66:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8014e6a:	ee12 2a90 	vmov	r2, s5
 8014e6e:	eef0 2a47 	vmov.f32	s5, s14
 8014e72:	fb92 f3f3 	sdiv	r3, r2, r3
 8014e76:	ee13 2a10 	vmov	r2, s6
 8014e7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e7e:	eeb0 3a67 	vmov.f32	s6, s15
 8014e82:	fb92 f3f3 	sdiv	r3, r2, r3
 8014e86:	9a01      	ldr	r2, [sp, #4]
 8014e88:	9310      	str	r3, [sp, #64]	; 0x40
 8014e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e8c:	bf08      	it	eq
 8014e8e:	4613      	moveq	r3, r2
 8014e90:	e741      	b.n	8014d16 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8014e92:	ea5f 4920 	movs.w	r9, r0, asr #16
 8014e96:	d44b      	bmi.n	8014f30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014e98:	f8dc b008 	ldr.w	fp, [ip, #8]
 8014e9c:	45cb      	cmp	fp, r9
 8014e9e:	dd47      	ble.n	8014f30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014ea0:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8014ea4:	d444      	bmi.n	8014f30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014ea6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8014eaa:	4556      	cmp	r6, sl
 8014eac:	dd40      	ble.n	8014f30 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8014eae:	fa0f f68b 	sxth.w	r6, fp
 8014eb2:	fb0a 9906 	mla	r9, sl, r6, r9
 8014eb6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8014eba:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8014ebe:	f814 b006 	ldrb.w	fp, [r4, r6]
 8014ec2:	fb1b fb05 	smulbb	fp, fp, r5
 8014ec6:	eb08 0a09 	add.w	sl, r8, r9
 8014eca:	f818 9009 	ldrb.w	r9, [r8, r9]
 8014ece:	fb09 b90e 	mla	r9, r9, lr, fp
 8014ed2:	fa1f f989 	uxth.w	r9, r9
 8014ed6:	f109 0b01 	add.w	fp, r9, #1
 8014eda:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014ede:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014ee2:	f804 9006 	strb.w	r9, [r4, r6]
 8014ee6:	4426      	add	r6, r4
 8014ee8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8014eec:	f896 b001 	ldrb.w	fp, [r6, #1]
 8014ef0:	fb1b fb05 	smulbb	fp, fp, r5
 8014ef4:	fb09 b90e 	mla	r9, r9, lr, fp
 8014ef8:	fa1f f989 	uxth.w	r9, r9
 8014efc:	f109 0b01 	add.w	fp, r9, #1
 8014f00:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8014f04:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014f08:	f886 9001 	strb.w	r9, [r6, #1]
 8014f0c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8014f10:	f896 a002 	ldrb.w	sl, [r6, #2]
 8014f14:	fb1a fa05 	smulbb	sl, sl, r5
 8014f18:	fb09 a90e 	mla	r9, r9, lr, sl
 8014f1c:	fa1f f989 	uxth.w	r9, r9
 8014f20:	f109 0a01 	add.w	sl, r9, #1
 8014f24:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8014f28:	ea4f 2929 	mov.w	r9, r9, asr #8
 8014f2c:	f886 9002 	strb.w	r9, [r6, #2]
 8014f30:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014f32:	3701      	adds	r7, #1
 8014f34:	4430      	add	r0, r6
 8014f36:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014f38:	4432      	add	r2, r6
 8014f3a:	e767      	b.n	8014e0c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 8014f3c:	b003      	add	sp, #12
 8014f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f42 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8014f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f46:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8014f48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014f4c:	9201      	str	r2, [sp, #4]
 8014f4e:	6868      	ldr	r0, [r5, #4]
 8014f50:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014f52:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8014f56:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 8014f5a:	fb00 2404 	mla	r4, r0, r4, r2
 8014f5e:	682a      	ldr	r2, [r5, #0]
 8014f60:	f8d7 8000 	ldr.w	r8, [r7]
 8014f64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8014f68:	4414      	add	r4, r2
 8014f6a:	2900      	cmp	r1, #0
 8014f6c:	dc03      	bgt.n	8014f76 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8014f6e:	9a01      	ldr	r2, [sp, #4]
 8014f70:	2a00      	cmp	r2, #0
 8014f72:	f340 80af 	ble.w	80150d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8014f76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f78:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8014f7c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8014f80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f82:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8014f86:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	dd0c      	ble.n	8014fa8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8014f8e:	1405      	asrs	r5, r0, #16
 8014f90:	d405      	bmi.n	8014f9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014f92:	4555      	cmp	r5, sl
 8014f94:	da03      	bge.n	8014f9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014f96:	1415      	asrs	r5, r2, #16
 8014f98:	d401      	bmi.n	8014f9e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8014f9a:	454d      	cmp	r5, r9
 8014f9c:	db05      	blt.n	8014faa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8014f9e:	4470      	add	r0, lr
 8014fa0:	4462      	add	r2, ip
 8014fa2:	3b01      	subs	r3, #1
 8014fa4:	3403      	adds	r4, #3
 8014fa6:	e7f0      	b.n	8014f8a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8014fa8:	d038      	beq.n	801501c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8014faa:	1e5d      	subs	r5, r3, #1
 8014fac:	fb0e 0605 	mla	r6, lr, r5, r0
 8014fb0:	1436      	asrs	r6, r6, #16
 8014fb2:	d42a      	bmi.n	801500a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014fb4:	4556      	cmp	r6, sl
 8014fb6:	da28      	bge.n	801500a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014fb8:	fb0c 2505 	mla	r5, ip, r5, r2
 8014fbc:	142d      	asrs	r5, r5, #16
 8014fbe:	d424      	bmi.n	801500a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014fc0:	454d      	cmp	r5, r9
 8014fc2:	da22      	bge.n	801500a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8014fc4:	1ce6      	adds	r6, r4, #3
 8014fc6:	4699      	mov	r9, r3
 8014fc8:	f1b9 0f00 	cmp.w	r9, #0
 8014fcc:	f106 0603 	add.w	r6, r6, #3
 8014fd0:	dd1f      	ble.n	8015012 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8014fd2:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8014fd6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8014fda:	1415      	asrs	r5, r2, #16
 8014fdc:	4470      	add	r0, lr
 8014fde:	4462      	add	r2, ip
 8014fe0:	f109 39ff 	add.w	r9, r9, #4294967295
 8014fe4:	fb0b a505 	mla	r5, fp, r5, sl
 8014fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014fec:	eb08 0a05 	add.w	sl, r8, r5
 8014ff0:	f818 5005 	ldrb.w	r5, [r8, r5]
 8014ff4:	f806 5c06 	strb.w	r5, [r6, #-6]
 8014ff8:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8014ffc:	f806 5c05 	strb.w	r5, [r6, #-5]
 8015000:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8015004:	f806 5c04 	strb.w	r5, [r6, #-4]
 8015008:	e7de      	b.n	8014fc8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801500a:	2600      	movs	r6, #0
 801500c:	1b9d      	subs	r5, r3, r6
 801500e:	2d00      	cmp	r5, #0
 8015010:	dc38      	bgt.n	8015084 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015012:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015016:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801501a:	441c      	add	r4, r3
 801501c:	2900      	cmp	r1, #0
 801501e:	dd59      	ble.n	80150d4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8015020:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015024:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015026:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801502a:	3901      	subs	r1, #1
 801502c:	eeb0 6a62 	vmov.f32	s12, s5
 8015030:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015034:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015038:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801503c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015040:	eeb0 6a43 	vmov.f32	s12, s6
 8015044:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015048:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801504c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015050:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015054:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015058:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801505c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015060:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015064:	ee12 2a90 	vmov	r2, s5
 8015068:	eef0 2a47 	vmov.f32	s5, s14
 801506c:	fb92 fef3 	sdiv	lr, r2, r3
 8015070:	ee13 2a10 	vmov	r2, s6
 8015074:	eeb0 3a67 	vmov.f32	s6, s15
 8015078:	fb92 fcf3 	sdiv	ip, r2, r3
 801507c:	9a01      	ldr	r2, [sp, #4]
 801507e:	bf08      	it	eq
 8015080:	4613      	moveq	r3, r2
 8015082:	e772      	b.n	8014f6a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8015084:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015088:	d420      	bmi.n	80150cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801508a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801508e:	45cb      	cmp	fp, r9
 8015090:	dd1c      	ble.n	80150cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015092:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015096:	d419      	bmi.n	80150cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8015098:	68fd      	ldr	r5, [r7, #12]
 801509a:	4555      	cmp	r5, sl
 801509c:	dd16      	ble.n	80150cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801509e:	fa0f f58b 	sxth.w	r5, fp
 80150a2:	fb0a 9505 	mla	r5, sl, r5, r9
 80150a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80150aa:	f818 9005 	ldrb.w	r9, [r8, r5]
 80150ae:	eb08 0b05 	add.w	fp, r8, r5
 80150b2:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 80150b6:	f804 9005 	strb.w	r9, [r4, r5]
 80150ba:	4425      	add	r5, r4
 80150bc:	f89b 9001 	ldrb.w	r9, [fp, #1]
 80150c0:	f885 9001 	strb.w	r9, [r5, #1]
 80150c4:	f89b 9002 	ldrb.w	r9, [fp, #2]
 80150c8:	f885 9002 	strb.w	r9, [r5, #2]
 80150cc:	4470      	add	r0, lr
 80150ce:	4462      	add	r2, ip
 80150d0:	3601      	adds	r6, #1
 80150d2:	e79b      	b.n	801500c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 80150d4:	b003      	add	sp, #12
 80150d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080150da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80150da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150de:	b085      	sub	sp, #20
 80150e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80150e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80150e6:	9202      	str	r2, [sp, #8]
 80150e8:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80150ec:	6860      	ldr	r0, [r4, #4]
 80150ee:	9203      	str	r2, [sp, #12]
 80150f0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80150f4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80150f8:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 80150fc:	fb00 2505 	mla	r5, r0, r5, r2
 8015100:	6822      	ldr	r2, [r4, #0]
 8015102:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015106:	4415      	add	r5, r2
 8015108:	f8dc 2000 	ldr.w	r2, [ip]
 801510c:	9201      	str	r2, [sp, #4]
 801510e:	2900      	cmp	r1, #0
 8015110:	dc03      	bgt.n	801511a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8015112:	9a02      	ldr	r2, [sp, #8]
 8015114:	2a00      	cmp	r2, #0
 8015116:	f340 8122 	ble.w	801535e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801511a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801511c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015120:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015126:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801512a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801512e:	2b00      	cmp	r3, #0
 8015130:	dd0d      	ble.n	801514e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8015132:	1422      	asrs	r2, r4, #16
 8015134:	d405      	bmi.n	8015142 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8015136:	4542      	cmp	r2, r8
 8015138:	da03      	bge.n	8015142 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801513a:	1402      	asrs	r2, r0, #16
 801513c:	d401      	bmi.n	8015142 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801513e:	42ba      	cmp	r2, r7
 8015140:	db06      	blt.n	8015150 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8015142:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015144:	4474      	add	r4, lr
 8015146:	3b01      	subs	r3, #1
 8015148:	3503      	adds	r5, #3
 801514a:	4410      	add	r0, r2
 801514c:	e7ef      	b.n	801512e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801514e:	d072      	beq.n	8015236 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8015150:	1e5a      	subs	r2, r3, #1
 8015152:	fb0e 4602 	mla	r6, lr, r2, r4
 8015156:	1436      	asrs	r6, r6, #16
 8015158:	d462      	bmi.n	8015220 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801515a:	4546      	cmp	r6, r8
 801515c:	da60      	bge.n	8015220 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801515e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015160:	fb06 0202 	mla	r2, r6, r2, r0
 8015164:	1412      	asrs	r2, r2, #16
 8015166:	d45b      	bmi.n	8015220 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015168:	42ba      	cmp	r2, r7
 801516a:	da59      	bge.n	8015220 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801516c:	1cef      	adds	r7, r5, #3
 801516e:	4699      	mov	r9, r3
 8015170:	f1b9 0f00 	cmp.w	r9, #0
 8015174:	dd5a      	ble.n	801522c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015176:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801517a:	1426      	asrs	r6, r4, #16
 801517c:	1402      	asrs	r2, r0, #16
 801517e:	fb08 6202 	mla	r2, r8, r2, r6
 8015182:	9e01      	ldr	r6, [sp, #4]
 8015184:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015188:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801518c:	d041      	beq.n	8015212 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801518e:	9a03      	ldr	r2, [sp, #12]
 8015190:	fa5f fb86 	uxtb.w	fp, r6
 8015194:	fb02 f808 	mul.w	r8, r2, r8
 8015198:	f108 0201 	add.w	r2, r8, #1
 801519c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80151a0:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80151a4:	1212      	asrs	r2, r2, #8
 80151a6:	fa1f fa82 	uxth.w	sl, r2
 80151aa:	43d2      	mvns	r2, r2
 80151ac:	fb1b fb0a 	smulbb	fp, fp, sl
 80151b0:	b2d2      	uxtb	r2, r2
 80151b2:	fb08 b802 	mla	r8, r8, r2, fp
 80151b6:	fa1f f888 	uxth.w	r8, r8
 80151ba:	f108 0b01 	add.w	fp, r8, #1
 80151be:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80151c2:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 80151c6:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80151ca:	fb1b fb0a 	smulbb	fp, fp, sl
 80151ce:	ea4f 2828 	mov.w	r8, r8, asr #8
 80151d2:	fb16 fa0a 	smulbb	sl, r6, sl
 80151d6:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 80151da:	f807 8c03 	strb.w	r8, [r7, #-3]
 80151de:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 80151e2:	fb06 aa02 	mla	sl, r6, r2, sl
 80151e6:	fb08 b802 	mla	r8, r8, r2, fp
 80151ea:	fa1f fa8a 	uxth.w	sl, sl
 80151ee:	fa1f f888 	uxth.w	r8, r8
 80151f2:	f10a 0601 	add.w	r6, sl, #1
 80151f6:	f108 0b01 	add.w	fp, r8, #1
 80151fa:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 80151fe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015202:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015206:	ea4f 2828 	mov.w	r8, r8, asr #8
 801520a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801520e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8015212:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015214:	4474      	add	r4, lr
 8015216:	3703      	adds	r7, #3
 8015218:	f109 39ff 	add.w	r9, r9, #4294967295
 801521c:	4410      	add	r0, r2
 801521e:	e7a7      	b.n	8015170 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8015220:	f04f 0800 	mov.w	r8, #0
 8015224:	eba3 0208 	sub.w	r2, r3, r8
 8015228:	2a00      	cmp	r2, #0
 801522a:	dc3b      	bgt.n	80152a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801522c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015230:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015234:	441d      	add	r5, r3
 8015236:	2900      	cmp	r1, #0
 8015238:	f340 8091 	ble.w	801535e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801523c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015242:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015246:	3901      	subs	r1, #1
 8015248:	eeb0 6a62 	vmov.f32	s12, s5
 801524c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015250:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015254:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015258:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801525c:	eeb0 6a43 	vmov.f32	s12, s6
 8015260:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015264:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015268:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801526c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015270:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015274:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015278:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801527c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015280:	ee12 2a90 	vmov	r2, s5
 8015284:	eef0 2a47 	vmov.f32	s5, s14
 8015288:	fb92 fef3 	sdiv	lr, r2, r3
 801528c:	ee13 2a10 	vmov	r2, s6
 8015290:	eeb0 3a67 	vmov.f32	s6, s15
 8015294:	fb92 f3f3 	sdiv	r3, r2, r3
 8015298:	9a02      	ldr	r2, [sp, #8]
 801529a:	9312      	str	r3, [sp, #72]	; 0x48
 801529c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801529e:	bf08      	it	eq
 80152a0:	4613      	moveq	r3, r2
 80152a2:	e734      	b.n	801510e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80152a4:	1427      	asrs	r7, r4, #16
 80152a6:	d454      	bmi.n	8015352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80152a8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80152ac:	42be      	cmp	r6, r7
 80152ae:	dd50      	ble.n	8015352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80152b0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80152b4:	d44d      	bmi.n	8015352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80152b6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80152ba:	454a      	cmp	r2, r9
 80152bc:	dd49      	ble.n	8015352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80152be:	b236      	sxth	r6, r6
 80152c0:	9a01      	ldr	r2, [sp, #4]
 80152c2:	fb09 7606 	mla	r6, r9, r6, r7
 80152c6:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 80152ca:	0e3a      	lsrs	r2, r7, #24
 80152cc:	d041      	beq.n	8015352 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 80152ce:	9e03      	ldr	r6, [sp, #12]
 80152d0:	fa5f fb87 	uxtb.w	fp, r7
 80152d4:	4372      	muls	r2, r6
 80152d6:	1c56      	adds	r6, r2, #1
 80152d8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80152dc:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 80152e0:	1212      	asrs	r2, r2, #8
 80152e2:	f815 9006 	ldrb.w	r9, [r5, r6]
 80152e6:	fa1f fa82 	uxth.w	sl, r2
 80152ea:	43d2      	mvns	r2, r2
 80152ec:	fb1b fb0a 	smulbb	fp, fp, sl
 80152f0:	b2d2      	uxtb	r2, r2
 80152f2:	fb09 b902 	mla	r9, r9, r2, fp
 80152f6:	fa1f f989 	uxth.w	r9, r9
 80152fa:	f109 0b01 	add.w	fp, r9, #1
 80152fe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015302:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8015306:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801530a:	fb1b fb0a 	smulbb	fp, fp, sl
 801530e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015312:	fb17 fa0a 	smulbb	sl, r7, sl
 8015316:	f805 9006 	strb.w	r9, [r5, r6]
 801531a:	442e      	add	r6, r5
 801531c:	78b7      	ldrb	r7, [r6, #2]
 801531e:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015322:	fb07 aa02 	mla	sl, r7, r2, sl
 8015326:	fb09 b902 	mla	r9, r9, r2, fp
 801532a:	fa1f fa8a 	uxth.w	sl, sl
 801532e:	fa1f f989 	uxth.w	r9, r9
 8015332:	f10a 0701 	add.w	r7, sl, #1
 8015336:	f109 0b01 	add.w	fp, r9, #1
 801533a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801533e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015342:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015346:	ea4f 2929 	mov.w	r9, r9, asr #8
 801534a:	f886 a002 	strb.w	sl, [r6, #2]
 801534e:	f886 9001 	strb.w	r9, [r6, #1]
 8015352:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015354:	4474      	add	r4, lr
 8015356:	f108 0801 	add.w	r8, r8, #1
 801535a:	4410      	add	r0, r2
 801535c:	e762      	b.n	8015224 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801535e:	b005      	add	sp, #20
 8015360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015364 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015368:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801536a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801536e:	9201      	str	r2, [sp, #4]
 8015370:	6860      	ldr	r0, [r4, #4]
 8015372:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8015376:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801537a:	fb00 2505 	mla	r5, r0, r5, r2
 801537e:	6822      	ldr	r2, [r4, #0]
 8015380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015384:	4415      	add	r5, r2
 8015386:	f8dc 2000 	ldr.w	r2, [ip]
 801538a:	9200      	str	r2, [sp, #0]
 801538c:	2900      	cmp	r1, #0
 801538e:	dc03      	bgt.n	8015398 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8015390:	9a01      	ldr	r2, [sp, #4]
 8015392:	2a00      	cmp	r2, #0
 8015394:	f340 812b 	ble.w	80155ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015398:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801539a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801539e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80153a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153a4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80153a8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	dd0e      	ble.n	80153ce <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80153b0:	1422      	asrs	r2, r4, #16
 80153b2:	d405      	bmi.n	80153c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80153b4:	4572      	cmp	r2, lr
 80153b6:	da03      	bge.n	80153c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80153b8:	1402      	asrs	r2, r0, #16
 80153ba:	d401      	bmi.n	80153c0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80153bc:	42ba      	cmp	r2, r7
 80153be:	db07      	blt.n	80153d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80153c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80153c2:	3b01      	subs	r3, #1
 80153c4:	3503      	adds	r5, #3
 80153c6:	4414      	add	r4, r2
 80153c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153ca:	4410      	add	r0, r2
 80153cc:	e7ee      	b.n	80153ac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80153ce:	d06f      	beq.n	80154b0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80153d0:	1e5a      	subs	r2, r3, #1
 80153d2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80153d4:	fb06 4602 	mla	r6, r6, r2, r4
 80153d8:	1436      	asrs	r6, r6, #16
 80153da:	d45e      	bmi.n	801549a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80153dc:	4576      	cmp	r6, lr
 80153de:	da5c      	bge.n	801549a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80153e0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80153e2:	fb06 0202 	mla	r2, r6, r2, r0
 80153e6:	1412      	asrs	r2, r2, #16
 80153e8:	d457      	bmi.n	801549a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80153ea:	42ba      	cmp	r2, r7
 80153ec:	da55      	bge.n	801549a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 80153ee:	1cee      	adds	r6, r5, #3
 80153f0:	469a      	mov	sl, r3
 80153f2:	f1ba 0f00 	cmp.w	sl, #0
 80153f6:	dd56      	ble.n	80154a6 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80153f8:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80153fc:	1427      	asrs	r7, r4, #16
 80153fe:	1402      	asrs	r2, r0, #16
 8015400:	fb0e 7202 	mla	r2, lr, r2, r7
 8015404:	9f00      	ldr	r7, [sp, #0]
 8015406:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801540a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801540e:	d03c      	beq.n	801548a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8015410:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8015414:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015418:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801541c:	fa5f f28e 	uxtb.w	r2, lr
 8015420:	b2ff      	uxtb	r7, r7
 8015422:	f000 80dd 	beq.w	80155e0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8015426:	fa1f f882 	uxth.w	r8, r2
 801542a:	43d2      	mvns	r2, r2
 801542c:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8015430:	fb17 f708 	smulbb	r7, r7, r8
 8015434:	b2d2      	uxtb	r2, r2
 8015436:	fb19 f908 	smulbb	r9, r9, r8
 801543a:	fb0e 7702 	mla	r7, lr, r2, r7
 801543e:	fb1b f808 	smulbb	r8, fp, r8
 8015442:	b2bf      	uxth	r7, r7
 8015444:	f107 0e01 	add.w	lr, r7, #1
 8015448:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801544c:	123f      	asrs	r7, r7, #8
 801544e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8015452:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8015456:	fb07 9902 	mla	r9, r7, r2, r9
 801545a:	fa1f f989 	uxth.w	r9, r9
 801545e:	f109 0701 	add.w	r7, r9, #1
 8015462:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8015466:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801546a:	fb07 8802 	mla	r8, r7, r2, r8
 801546e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015472:	fa1f f888 	uxth.w	r8, r8
 8015476:	f806 9c02 	strb.w	r9, [r6, #-2]
 801547a:	f108 0201 	add.w	r2, r8, #1
 801547e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8015482:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015486:	f806 8c01 	strb.w	r8, [r6, #-1]
 801548a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801548c:	3603      	adds	r6, #3
 801548e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015492:	4414      	add	r4, r2
 8015494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015496:	4410      	add	r0, r2
 8015498:	e7ab      	b.n	80153f2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801549a:	f04f 0e00 	mov.w	lr, #0
 801549e:	eba3 020e 	sub.w	r2, r3, lr
 80154a2:	2a00      	cmp	r2, #0
 80154a4:	dc3d      	bgt.n	8015522 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80154a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80154aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80154ae:	441d      	add	r5, r3
 80154b0:	2900      	cmp	r1, #0
 80154b2:	f340 809c 	ble.w	80155ee <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80154b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80154ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154bc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80154c0:	3901      	subs	r1, #1
 80154c2:	eeb0 6a62 	vmov.f32	s12, s5
 80154c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80154ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80154ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80154d2:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80154d6:	eeb0 6a43 	vmov.f32	s12, s6
 80154da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80154de:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80154e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80154e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80154ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80154ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80154f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80154f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80154fa:	ee12 2a90 	vmov	r2, s5
 80154fe:	eef0 2a47 	vmov.f32	s5, s14
 8015502:	fb92 f3f3 	sdiv	r3, r2, r3
 8015506:	ee13 2a10 	vmov	r2, s6
 801550a:	930f      	str	r3, [sp, #60]	; 0x3c
 801550c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801550e:	eeb0 3a67 	vmov.f32	s6, s15
 8015512:	fb92 f3f3 	sdiv	r3, r2, r3
 8015516:	9a01      	ldr	r2, [sp, #4]
 8015518:	9310      	str	r3, [sp, #64]	; 0x40
 801551a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801551c:	bf08      	it	eq
 801551e:	4613      	moveq	r3, r2
 8015520:	e734      	b.n	801538c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8015522:	1427      	asrs	r7, r4, #16
 8015524:	d44d      	bmi.n	80155c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015526:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801552a:	42be      	cmp	r6, r7
 801552c:	dd49      	ble.n	80155c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801552e:	ea5f 4820 	movs.w	r8, r0, asr #16
 8015532:	d446      	bmi.n	80155c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8015534:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015538:	4542      	cmp	r2, r8
 801553a:	dd42      	ble.n	80155c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801553c:	b236      	sxth	r6, r6
 801553e:	9a00      	ldr	r2, [sp, #0]
 8015540:	fb08 7606 	mla	r6, r8, r6, r7
 8015544:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8015548:	0e3a      	lsrs	r2, r7, #24
 801554a:	d03a      	beq.n	80155c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801554c:	2aff      	cmp	r2, #255	; 0xff
 801554e:	b2d6      	uxtb	r6, r2
 8015550:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8015554:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8015558:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801555c:	b2ff      	uxtb	r7, r7
 801555e:	d037      	beq.n	80155d0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8015560:	fa1f f986 	uxth.w	r9, r6
 8015564:	4472      	add	r2, lr
 8015566:	43f6      	mvns	r6, r6
 8015568:	f815 8002 	ldrb.w	r8, [r5, r2]
 801556c:	fb17 f709 	smulbb	r7, r7, r9
 8015570:	fb1a fa09 	smulbb	sl, sl, r9
 8015574:	b2f6      	uxtb	r6, r6
 8015576:	fb1b f909 	smulbb	r9, fp, r9
 801557a:	fb08 7706 	mla	r7, r8, r6, r7
 801557e:	b2bf      	uxth	r7, r7
 8015580:	f107 0801 	add.w	r8, r7, #1
 8015584:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8015588:	123f      	asrs	r7, r7, #8
 801558a:	54af      	strb	r7, [r5, r2]
 801558c:	442a      	add	r2, r5
 801558e:	7857      	ldrb	r7, [r2, #1]
 8015590:	fb07 aa06 	mla	sl, r7, r6, sl
 8015594:	fa1f fa8a 	uxth.w	sl, sl
 8015598:	f10a 0701 	add.w	r7, sl, #1
 801559c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80155a0:	7897      	ldrb	r7, [r2, #2]
 80155a2:	fb07 9906 	mla	r9, r7, r6, r9
 80155a6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80155aa:	fa1f f989 	uxth.w	r9, r9
 80155ae:	f882 a001 	strb.w	sl, [r2, #1]
 80155b2:	f109 0601 	add.w	r6, r9, #1
 80155b6:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 80155ba:	ea4f 2929 	mov.w	r9, r9, asr #8
 80155be:	f882 9002 	strb.w	r9, [r2, #2]
 80155c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80155c4:	f10e 0e01 	add.w	lr, lr, #1
 80155c8:	4414      	add	r4, r2
 80155ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80155cc:	4410      	add	r0, r2
 80155ce:	e766      	b.n	801549e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 80155d0:	4472      	add	r2, lr
 80155d2:	54af      	strb	r7, [r5, r2]
 80155d4:	442a      	add	r2, r5
 80155d6:	f882 a001 	strb.w	sl, [r2, #1]
 80155da:	f882 b002 	strb.w	fp, [r2, #2]
 80155de:	e7f0      	b.n	80155c2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 80155e0:	f806 7c03 	strb.w	r7, [r6, #-3]
 80155e4:	f806 9c02 	strb.w	r9, [r6, #-2]
 80155e8:	f806 bc01 	strb.w	fp, [r6, #-1]
 80155ec:	e74d      	b.n	801548a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80155ee:	b003      	add	sp, #12
 80155f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080155f4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80155f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155f8:	b087      	sub	sp, #28
 80155fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80155fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8015600:	9204      	str	r2, [sp, #16]
 8015602:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015606:	6860      	ldr	r0, [r4, #4]
 8015608:	9205      	str	r2, [sp, #20]
 801560a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801560e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8015612:	9101      	str	r1, [sp, #4]
 8015614:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8015618:	fb00 2505 	mla	r5, r0, r5, r2
 801561c:	6822      	ldr	r2, [r4, #0]
 801561e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015622:	4415      	add	r5, r2
 8015624:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015628:	3201      	adds	r2, #1
 801562a:	f022 0201 	bic.w	r2, r2, #1
 801562e:	9202      	str	r2, [sp, #8]
 8015630:	f8dc 2000 	ldr.w	r2, [ip]
 8015634:	9203      	str	r2, [sp, #12]
 8015636:	9a01      	ldr	r2, [sp, #4]
 8015638:	2a00      	cmp	r2, #0
 801563a:	dc03      	bgt.n	8015644 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801563c:	9a04      	ldr	r2, [sp, #16]
 801563e:	2a00      	cmp	r2, #0
 8015640:	f340 8135 	ble.w	80158ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015644:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015646:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801564a:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 801564e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015650:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015654:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015658:	2b00      	cmp	r3, #0
 801565a:	dd0d      	ble.n	8015678 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801565c:	1422      	asrs	r2, r4, #16
 801565e:	d405      	bmi.n	801566c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015660:	4542      	cmp	r2, r8
 8015662:	da03      	bge.n	801566c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015664:	1402      	asrs	r2, r0, #16
 8015666:	d401      	bmi.n	801566c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8015668:	42ba      	cmp	r2, r7
 801566a:	db06      	blt.n	801567a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801566c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801566e:	4474      	add	r4, lr
 8015670:	3b01      	subs	r3, #1
 8015672:	3503      	adds	r5, #3
 8015674:	4410      	add	r0, r2
 8015676:	e7ef      	b.n	8015658 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015678:	d077      	beq.n	801576a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801567a:	1e5a      	subs	r2, r3, #1
 801567c:	fb0e 4602 	mla	r6, lr, r2, r4
 8015680:	1436      	asrs	r6, r6, #16
 8015682:	d469      	bmi.n	8015758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015684:	4546      	cmp	r6, r8
 8015686:	da67      	bge.n	8015758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015688:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801568a:	fb06 0202 	mla	r2, r6, r2, r0
 801568e:	1412      	asrs	r2, r2, #16
 8015690:	d462      	bmi.n	8015758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015692:	42ba      	cmp	r2, r7
 8015694:	da60      	bge.n	8015758 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015696:	1cee      	adds	r6, r5, #3
 8015698:	4699      	mov	r9, r3
 801569a:	f1b9 0f00 	cmp.w	r9, #0
 801569e:	dd5f      	ble.n	8015760 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80156a0:	1422      	asrs	r2, r4, #16
 80156a2:	9902      	ldr	r1, [sp, #8]
 80156a4:	1407      	asrs	r7, r0, #16
 80156a6:	fb01 2707 	mla	r7, r1, r7, r2
 80156aa:	9903      	ldr	r1, [sp, #12]
 80156ac:	087a      	lsrs	r2, r7, #1
 80156ae:	5c8a      	ldrb	r2, [r1, r2]
 80156b0:	07f9      	lsls	r1, r7, #31
 80156b2:	bf54      	ite	pl
 80156b4:	f002 020f 	andpl.w	r2, r2, #15
 80156b8:	1112      	asrmi	r2, r2, #4
 80156ba:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80156be:	b2d2      	uxtb	r2, r2
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	d042      	beq.n	801574a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80156c4:	497b      	ldr	r1, [pc, #492]	; (80158b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80156c6:	680f      	ldr	r7, [r1, #0]
 80156c8:	9905      	ldr	r1, [sp, #20]
 80156ca:	fa5f fb87 	uxtb.w	fp, r7
 80156ce:	434a      	muls	r2, r1
 80156d0:	f102 0801 	add.w	r8, r2, #1
 80156d4:	eb08 2222 	add.w	r2, r8, r2, asr #8
 80156d8:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 80156dc:	1212      	asrs	r2, r2, #8
 80156de:	fa1f fa82 	uxth.w	sl, r2
 80156e2:	43d2      	mvns	r2, r2
 80156e4:	fb1b fb0a 	smulbb	fp, fp, sl
 80156e8:	b2d2      	uxtb	r2, r2
 80156ea:	fb08 b802 	mla	r8, r8, r2, fp
 80156ee:	fa1f f888 	uxth.w	r8, r8
 80156f2:	f108 0b01 	add.w	fp, r8, #1
 80156f6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80156fa:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80156fe:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8015702:	fb1b fb0a 	smulbb	fp, fp, sl
 8015706:	ea4f 2828 	mov.w	r8, r8, asr #8
 801570a:	fb17 fa0a 	smulbb	sl, r7, sl
 801570e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8015712:	f806 8c03 	strb.w	r8, [r6, #-3]
 8015716:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801571a:	fb07 aa02 	mla	sl, r7, r2, sl
 801571e:	fb08 b802 	mla	r8, r8, r2, fp
 8015722:	fa1f fa8a 	uxth.w	sl, sl
 8015726:	fa1f f888 	uxth.w	r8, r8
 801572a:	f10a 0701 	add.w	r7, sl, #1
 801572e:	f108 0b01 	add.w	fp, r8, #1
 8015732:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8015736:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801573a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801573e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015742:	f806 ac01 	strb.w	sl, [r6, #-1]
 8015746:	f806 8c02 	strb.w	r8, [r6, #-2]
 801574a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801574c:	4474      	add	r4, lr
 801574e:	3603      	adds	r6, #3
 8015750:	f109 39ff 	add.w	r9, r9, #4294967295
 8015754:	4410      	add	r0, r2
 8015756:	e7a0      	b.n	801569a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8015758:	2700      	movs	r7, #0
 801575a:	1bda      	subs	r2, r3, r7
 801575c:	2a00      	cmp	r2, #0
 801575e:	dc3e      	bgt.n	80157de <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8015760:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015764:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015768:	441d      	add	r5, r3
 801576a:	9b01      	ldr	r3, [sp, #4]
 801576c:	2b00      	cmp	r3, #0
 801576e:	f340 809e 	ble.w	80158ae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8015772:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015776:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015778:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801577c:	eeb0 6a62 	vmov.f32	s12, s5
 8015780:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015784:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015788:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801578c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8015790:	eeb0 6a43 	vmov.f32	s12, s6
 8015794:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015798:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801579c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80157a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80157a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80157a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80157ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80157b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80157b4:	ee12 2a90 	vmov	r2, s5
 80157b8:	eef0 2a47 	vmov.f32	s5, s14
 80157bc:	fb92 fef3 	sdiv	lr, r2, r3
 80157c0:	ee13 2a10 	vmov	r2, s6
 80157c4:	eeb0 3a67 	vmov.f32	s6, s15
 80157c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80157cc:	9314      	str	r3, [sp, #80]	; 0x50
 80157ce:	9b01      	ldr	r3, [sp, #4]
 80157d0:	9a04      	ldr	r2, [sp, #16]
 80157d2:	3b01      	subs	r3, #1
 80157d4:	9301      	str	r3, [sp, #4]
 80157d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157d8:	bf08      	it	eq
 80157da:	4613      	moveq	r3, r2
 80157dc:	e72b      	b.n	8015636 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80157de:	1426      	asrs	r6, r4, #16
 80157e0:	d460      	bmi.n	80158a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80157e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80157e6:	42b2      	cmp	r2, r6
 80157e8:	dd5c      	ble.n	80158a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80157ea:	ea5f 4820 	movs.w	r8, r0, asr #16
 80157ee:	d459      	bmi.n	80158a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80157f0:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80157f4:	4542      	cmp	r2, r8
 80157f6:	dd55      	ble.n	80158a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80157f8:	9a02      	ldr	r2, [sp, #8]
 80157fa:	9903      	ldr	r1, [sp, #12]
 80157fc:	fb08 6602 	mla	r6, r8, r2, r6
 8015800:	0872      	lsrs	r2, r6, #1
 8015802:	07f6      	lsls	r6, r6, #31
 8015804:	5c8a      	ldrb	r2, [r1, r2]
 8015806:	bf54      	ite	pl
 8015808:	f002 020f 	andpl.w	r2, r2, #15
 801580c:	1112      	asrmi	r2, r2, #4
 801580e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015812:	b2d2      	uxtb	r2, r2
 8015814:	2a00      	cmp	r2, #0
 8015816:	d045      	beq.n	80158a4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8015818:	4926      	ldr	r1, [pc, #152]	; (80158b4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801581a:	f8d1 8000 	ldr.w	r8, [r1]
 801581e:	9905      	ldr	r1, [sp, #20]
 8015820:	fa5f fb88 	uxtb.w	fp, r8
 8015824:	434a      	muls	r2, r1
 8015826:	1c56      	adds	r6, r2, #1
 8015828:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801582c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015830:	1212      	asrs	r2, r2, #8
 8015832:	f815 9006 	ldrb.w	r9, [r5, r6]
 8015836:	fa1f fa82 	uxth.w	sl, r2
 801583a:	43d2      	mvns	r2, r2
 801583c:	fb1b fb0a 	smulbb	fp, fp, sl
 8015840:	b2d2      	uxtb	r2, r2
 8015842:	fb09 b902 	mla	r9, r9, r2, fp
 8015846:	fa1f f989 	uxth.w	r9, r9
 801584a:	f109 0b01 	add.w	fp, r9, #1
 801584e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015852:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8015856:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801585a:	fb1b fb0a 	smulbb	fp, fp, sl
 801585e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015862:	fb18 fa0a 	smulbb	sl, r8, sl
 8015866:	f805 9006 	strb.w	r9, [r5, r6]
 801586a:	442e      	add	r6, r5
 801586c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8015870:	f896 9001 	ldrb.w	r9, [r6, #1]
 8015874:	fb08 aa02 	mla	sl, r8, r2, sl
 8015878:	fb09 b902 	mla	r9, r9, r2, fp
 801587c:	fa1f fa8a 	uxth.w	sl, sl
 8015880:	fa1f f989 	uxth.w	r9, r9
 8015884:	f10a 0801 	add.w	r8, sl, #1
 8015888:	f109 0b01 	add.w	fp, r9, #1
 801588c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8015890:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015894:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015898:	ea4f 2929 	mov.w	r9, r9, asr #8
 801589c:	f886 a002 	strb.w	sl, [r6, #2]
 80158a0:	f886 9001 	strb.w	r9, [r6, #1]
 80158a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158a6:	4474      	add	r4, lr
 80158a8:	3701      	adds	r7, #1
 80158aa:	4410      	add	r0, r2
 80158ac:	e755      	b.n	801575a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 80158ae:	b007      	add	sp, #28
 80158b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b4:	2401aa44 	.word	0x2401aa44

080158b8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80158b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158bc:	b085      	sub	sp, #20
 80158be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80158c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80158c4:	9203      	str	r2, [sp, #12]
 80158c6:	6860      	ldr	r0, [r4, #4]
 80158c8:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80158cc:	9100      	str	r1, [sp, #0]
 80158ce:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 80158d2:	fb00 2606 	mla	r6, r0, r6, r2
 80158d6:	6822      	ldr	r2, [r4, #0]
 80158d8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80158dc:	4416      	add	r6, r2
 80158de:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80158e2:	3201      	adds	r2, #1
 80158e4:	f022 0201 	bic.w	r2, r2, #1
 80158e8:	9201      	str	r2, [sp, #4]
 80158ea:	f8dc 2000 	ldr.w	r2, [ip]
 80158ee:	9202      	str	r2, [sp, #8]
 80158f0:	9a00      	ldr	r2, [sp, #0]
 80158f2:	2a00      	cmp	r2, #0
 80158f4:	dc03      	bgt.n	80158fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80158f6:	9a03      	ldr	r2, [sp, #12]
 80158f8:	2a00      	cmp	r2, #0
 80158fa:	f340 8140 	ble.w	8015b7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80158fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015900:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8015904:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8015908:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801590a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801590e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8015912:	2b00      	cmp	r3, #0
 8015914:	dd0e      	ble.n	8015934 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015916:	142a      	asrs	r2, r5, #16
 8015918:	d405      	bmi.n	8015926 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801591a:	4572      	cmp	r2, lr
 801591c:	da03      	bge.n	8015926 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801591e:	1422      	asrs	r2, r4, #16
 8015920:	d401      	bmi.n	8015926 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015922:	42ba      	cmp	r2, r7
 8015924:	db07      	blt.n	8015936 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015926:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015928:	3b01      	subs	r3, #1
 801592a:	3603      	adds	r6, #3
 801592c:	4415      	add	r5, r2
 801592e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015930:	4414      	add	r4, r2
 8015932:	e7ee      	b.n	8015912 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8015934:	d072      	beq.n	8015a1c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8015936:	1e5a      	subs	r2, r3, #1
 8015938:	9811      	ldr	r0, [sp, #68]	; 0x44
 801593a:	fb00 5002 	mla	r0, r0, r2, r5
 801593e:	1400      	asrs	r0, r0, #16
 8015940:	d463      	bmi.n	8015a0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015942:	4570      	cmp	r0, lr
 8015944:	da61      	bge.n	8015a0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015946:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015948:	fb00 4202 	mla	r2, r0, r2, r4
 801594c:	1412      	asrs	r2, r2, #16
 801594e:	d45c      	bmi.n	8015a0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015950:	42ba      	cmp	r2, r7
 8015952:	da5a      	bge.n	8015a0a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8015954:	1cf0      	adds	r0, r6, #3
 8015956:	469a      	mov	sl, r3
 8015958:	f1ba 0f00 	cmp.w	sl, #0
 801595c:	dd59      	ble.n	8015a12 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801595e:	142a      	asrs	r2, r5, #16
 8015960:	9901      	ldr	r1, [sp, #4]
 8015962:	1427      	asrs	r7, r4, #16
 8015964:	fb01 2707 	mla	r7, r1, r7, r2
 8015968:	9902      	ldr	r1, [sp, #8]
 801596a:	087a      	lsrs	r2, r7, #1
 801596c:	5c8a      	ldrb	r2, [r1, r2]
 801596e:	07f9      	lsls	r1, r7, #31
 8015970:	bf54      	ite	pl
 8015972:	f002 020f 	andpl.w	r2, r2, #15
 8015976:	1112      	asrmi	r2, r2, #4
 8015978:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801597c:	b2d2      	uxtb	r2, r2
 801597e:	2a00      	cmp	r2, #0
 8015980:	d03b      	beq.n	80159fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015982:	4980      	ldr	r1, [pc, #512]	; (8015b84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015984:	2aff      	cmp	r2, #255	; 0xff
 8015986:	680f      	ldr	r7, [r1, #0]
 8015988:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801598c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8015990:	b2ff      	uxtb	r7, r7
 8015992:	f000 80ed 	beq.w	8015b70 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8015996:	fa1f f882 	uxth.w	r8, r2
 801599a:	43d2      	mvns	r2, r2
 801599c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 80159a0:	fb17 f708 	smulbb	r7, r7, r8
 80159a4:	b2d2      	uxtb	r2, r2
 80159a6:	fb19 f908 	smulbb	r9, r9, r8
 80159aa:	fb0e 7702 	mla	r7, lr, r2, r7
 80159ae:	fb1b f808 	smulbb	r8, fp, r8
 80159b2:	b2bf      	uxth	r7, r7
 80159b4:	f107 0e01 	add.w	lr, r7, #1
 80159b8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80159bc:	123f      	asrs	r7, r7, #8
 80159be:	f800 7c03 	strb.w	r7, [r0, #-3]
 80159c2:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 80159c6:	fb07 9902 	mla	r9, r7, r2, r9
 80159ca:	fa1f f989 	uxth.w	r9, r9
 80159ce:	f109 0701 	add.w	r7, r9, #1
 80159d2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 80159d6:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 80159da:	fb07 8802 	mla	r8, r7, r2, r8
 80159de:	ea4f 2929 	mov.w	r9, r9, asr #8
 80159e2:	fa1f f888 	uxth.w	r8, r8
 80159e6:	f800 9c02 	strb.w	r9, [r0, #-2]
 80159ea:	f108 0201 	add.w	r2, r8, #1
 80159ee:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 80159f2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80159f6:	f800 8c01 	strb.w	r8, [r0, #-1]
 80159fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80159fc:	3003      	adds	r0, #3
 80159fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015a02:	4415      	add	r5, r2
 8015a04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015a06:	4414      	add	r4, r2
 8015a08:	e7a6      	b.n	8015958 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8015a0a:	2700      	movs	r7, #0
 8015a0c:	1bda      	subs	r2, r3, r7
 8015a0e:	2a00      	cmp	r2, #0
 8015a10:	dc40      	bgt.n	8015a94 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8015a12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015a1a:	441e      	add	r6, r3
 8015a1c:	9b00      	ldr	r3, [sp, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	f340 80ad 	ble.w	8015b7e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8015a24:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015a2e:	eeb0 6a62 	vmov.f32	s12, s5
 8015a32:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015a36:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015a3a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a3e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8015a42:	eeb0 6a43 	vmov.f32	s12, s6
 8015a46:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015a4a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8015a4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015a52:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015a56:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015a5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015a5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015a62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015a66:	ee12 2a90 	vmov	r2, s5
 8015a6a:	eef0 2a47 	vmov.f32	s5, s14
 8015a6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a72:	ee13 2a10 	vmov	r2, s6
 8015a76:	9311      	str	r3, [sp, #68]	; 0x44
 8015a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a7a:	eeb0 3a67 	vmov.f32	s6, s15
 8015a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8015a82:	9312      	str	r3, [sp, #72]	; 0x48
 8015a84:	9b00      	ldr	r3, [sp, #0]
 8015a86:	9a03      	ldr	r2, [sp, #12]
 8015a88:	3b01      	subs	r3, #1
 8015a8a:	9300      	str	r3, [sp, #0]
 8015a8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a8e:	bf08      	it	eq
 8015a90:	4613      	moveq	r3, r2
 8015a92:	e72d      	b.n	80158f0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8015a94:	1428      	asrs	r0, r5, #16
 8015a96:	d45c      	bmi.n	8015b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015a98:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8015a9c:	4282      	cmp	r2, r0
 8015a9e:	dd58      	ble.n	8015b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015aa0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8015aa4:	d455      	bmi.n	8015b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015aa6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015aaa:	4572      	cmp	r2, lr
 8015aac:	dd51      	ble.n	8015b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015aae:	9a01      	ldr	r2, [sp, #4]
 8015ab0:	9902      	ldr	r1, [sp, #8]
 8015ab2:	fb0e 0002 	mla	r0, lr, r2, r0
 8015ab6:	0842      	lsrs	r2, r0, #1
 8015ab8:	07c0      	lsls	r0, r0, #31
 8015aba:	5c8a      	ldrb	r2, [r1, r2]
 8015abc:	bf54      	ite	pl
 8015abe:	f002 020f 	andpl.w	r2, r2, #15
 8015ac2:	1112      	asrmi	r2, r2, #4
 8015ac4:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8015ac8:	b2d2      	uxtb	r2, r2
 8015aca:	2a00      	cmp	r2, #0
 8015acc:	d041      	beq.n	8015b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015ace:	492d      	ldr	r1, [pc, #180]	; (8015b84 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8015ad0:	2aff      	cmp	r2, #255	; 0xff
 8015ad2:	6808      	ldr	r0, [r1, #0]
 8015ad4:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8015ad8:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8015adc:	fa5f fe80 	uxtb.w	lr, r0
 8015ae0:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8015ae4:	d03b      	beq.n	8015b5e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8015ae6:	fa1f f982 	uxth.w	r9, r2
 8015aea:	4438      	add	r0, r7
 8015aec:	43d2      	mvns	r2, r2
 8015aee:	f816 8000 	ldrb.w	r8, [r6, r0]
 8015af2:	fb1e fe09 	smulbb	lr, lr, r9
 8015af6:	fb1a fa09 	smulbb	sl, sl, r9
 8015afa:	b2d2      	uxtb	r2, r2
 8015afc:	fb1b f909 	smulbb	r9, fp, r9
 8015b00:	fb08 ee02 	mla	lr, r8, r2, lr
 8015b04:	fa1f fe8e 	uxth.w	lr, lr
 8015b08:	f10e 0801 	add.w	r8, lr, #1
 8015b0c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8015b10:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8015b14:	f806 e000 	strb.w	lr, [r6, r0]
 8015b18:	4430      	add	r0, r6
 8015b1a:	f890 e001 	ldrb.w	lr, [r0, #1]
 8015b1e:	fb0e aa02 	mla	sl, lr, r2, sl
 8015b22:	fa1f fa8a 	uxth.w	sl, sl
 8015b26:	f10a 0e01 	add.w	lr, sl, #1
 8015b2a:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 8015b2e:	f890 e002 	ldrb.w	lr, [r0, #2]
 8015b32:	fb0e 9902 	mla	r9, lr, r2, r9
 8015b36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015b3a:	fa1f f989 	uxth.w	r9, r9
 8015b3e:	f880 a001 	strb.w	sl, [r0, #1]
 8015b42:	f109 0201 	add.w	r2, r9, #1
 8015b46:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8015b4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015b4e:	f880 9002 	strb.w	r9, [r0, #2]
 8015b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b54:	3701      	adds	r7, #1
 8015b56:	4415      	add	r5, r2
 8015b58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b5a:	4414      	add	r4, r2
 8015b5c:	e756      	b.n	8015a0c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015b5e:	4438      	add	r0, r7
 8015b60:	f806 e000 	strb.w	lr, [r6, r0]
 8015b64:	4430      	add	r0, r6
 8015b66:	f880 a001 	strb.w	sl, [r0, #1]
 8015b6a:	f880 b002 	strb.w	fp, [r0, #2]
 8015b6e:	e7f0      	b.n	8015b52 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8015b70:	f800 7c03 	strb.w	r7, [r0, #-3]
 8015b74:	f800 9c02 	strb.w	r9, [r0, #-2]
 8015b78:	f800 bc01 	strb.w	fp, [r0, #-1]
 8015b7c:	e73d      	b.n	80159fa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8015b7e:	b005      	add	sp, #20
 8015b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b84:	2401aa44 	.word	0x2401aa44

08015b88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8015b88:	4770      	bx	lr

08015b8a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8015b8a:	4770      	bx	lr

08015b8c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8015b8c:	4770      	bx	lr

08015b8e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8015b8e:	4770      	bx	lr

08015b90 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8015b90:	4770      	bx	lr

08015b92 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8015b92:	4770      	bx	lr

08015b94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8015b94:	4770      	bx	lr

08015b96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015b96:	4770      	bx	lr

08015b98 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015b98:	4770      	bx	lr

08015b9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015b9a:	4770      	bx	lr

08015b9c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015b9c:	4770      	bx	lr

08015b9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015b9e:	4770      	bx	lr

08015ba0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015ba0:	4770      	bx	lr

08015ba2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015ba2:	4770      	bx	lr

08015ba4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015ba4:	4770      	bx	lr

08015ba6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8015ba6:	4770      	bx	lr

08015ba8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8015ba8:	4770      	bx	lr

08015baa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8015baa:	4770      	bx	lr

08015bac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8015bac:	4770      	bx	lr

08015bae <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8015bae:	4770      	bx	lr

08015bb0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8015bb0:	4770      	bx	lr

08015bb2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8015bb2:	4770      	bx	lr

08015bb4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8015bb4:	4770      	bx	lr
	...

08015bb8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8015bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bba:	4606      	mov	r6, r0
 8015bbc:	b087      	sub	sp, #28
 8015bbe:	4615      	mov	r5, r2
 8015bc0:	461f      	mov	r7, r3
 8015bc2:	b353      	cbz	r3, 8015c1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015bc4:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	dd26      	ble.n	8015c1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015bcc:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	dd22      	ble.n	8015c1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015bd4:	6808      	ldr	r0, [r1, #0]
 8015bd6:	aa04      	add	r2, sp, #16
 8015bd8:	6849      	ldr	r1, [r1, #4]
 8015bda:	4c1b      	ldr	r4, [pc, #108]	; (8015c48 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8015bdc:	c203      	stmia	r2!, {r0, r1}
 8015bde:	a804      	add	r0, sp, #16
 8015be0:	f7fb faa6 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015be4:	6820      	ldr	r0, [r4, #0]
 8015be6:	6803      	ldr	r3, [r0, #0]
 8015be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015bea:	4798      	blx	r3
 8015bec:	2fff      	cmp	r7, #255	; 0xff
 8015bee:	d016      	beq.n	8015c1e <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8015bf0:	f010 0f08 	tst.w	r0, #8
 8015bf4:	6820      	ldr	r0, [r4, #0]
 8015bf6:	d015      	beq.n	8015c24 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8015bf8:	2400      	movs	r4, #0
 8015bfa:	6801      	ldr	r1, [r0, #0]
 8015bfc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015c00:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015c04:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8015c08:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8015c0c:	9401      	str	r4, [sp, #4]
 8015c0e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8015c12:	9400      	str	r4, [sp, #0]
 8015c14:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8015c16:	4629      	mov	r1, r5
 8015c18:	47a0      	blx	r4
 8015c1a:	b007      	add	sp, #28
 8015c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c1e:	f010 0f02 	tst.w	r0, #2
 8015c22:	e7e7      	b.n	8015bf4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8015c24:	6803      	ldr	r3, [r0, #0]
 8015c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c28:	4798      	blx	r3
 8015c2a:	4b08      	ldr	r3, [pc, #32]	; (8015c4c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 8015c2c:	4601      	mov	r1, r0
 8015c2e:	4630      	mov	r0, r6
 8015c30:	881a      	ldrh	r2, [r3, #0]
 8015c32:	6833      	ldr	r3, [r6, #0]
 8015c34:	e9cd 5700 	strd	r5, r7, [sp]
 8015c38:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015c3a:	ab04      	add	r3, sp, #16
 8015c3c:	47a8      	blx	r5
 8015c3e:	6820      	ldr	r0, [r4, #0]
 8015c40:	6803      	ldr	r3, [r0, #0]
 8015c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c44:	4798      	blx	r3
 8015c46:	e7e8      	b.n	8015c1a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8015c48:	2401aa3c 	.word	0x2401aa3c
 8015c4c:	2401aa36 	.word	0x2401aa36

08015c50 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8015c50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c54:	b08b      	sub	sp, #44	; 0x2c
 8015c56:	460d      	mov	r5, r1
 8015c58:	4616      	mov	r6, r2
 8015c5a:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8015c5e:	f1b8 0f00 	cmp.w	r8, #0
 8015c62:	d047      	beq.n	8015cf4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015c64:	6810      	ldr	r0, [r2, #0]
 8015c66:	ac06      	add	r4, sp, #24
 8015c68:	6851      	ldr	r1, [r2, #4]
 8015c6a:	4f51      	ldr	r7, [pc, #324]	; (8015db0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8015c6c:	c403      	stmia	r4!, {r0, r1}
 8015c6e:	6818      	ldr	r0, [r3, #0]
 8015c70:	ac08      	add	r4, sp, #32
 8015c72:	6859      	ldr	r1, [r3, #4]
 8015c74:	c403      	stmia	r4!, {r0, r1}
 8015c76:	a806      	add	r0, sp, #24
 8015c78:	f7fb fa5a 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015c7c:	4631      	mov	r1, r6
 8015c7e:	a808      	add	r0, sp, #32
 8015c80:	f7fb fa7e 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015c84:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8015c88:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8015c8c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015c90:	6838      	ldr	r0, [r7, #0]
 8015c92:	fb11 2103 	smlabb	r1, r1, r3, r2
 8015c96:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8015c9a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 8015c9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015ca2:	440d      	add	r5, r1
 8015ca4:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8015ca8:	440a      	add	r2, r1
 8015caa:	f8ad 2020 	strh.w	r2, [sp, #32]
 8015cae:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015cb8:	6803      	ldr	r3, [r0, #0]
 8015cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cbc:	4798      	blx	r3
 8015cbe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015cc2:	d01a      	beq.n	8015cfa <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8015cc4:	f010 0f04 	tst.w	r0, #4
 8015cc8:	6838      	ldr	r0, [r7, #0]
 8015cca:	d019      	beq.n	8015d00 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8015ccc:	2100      	movs	r1, #0
 8015cce:	6807      	ldr	r7, [r0, #0]
 8015cd0:	b2a4      	uxth	r4, r4
 8015cd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8015cd6:	b2b6      	uxth	r6, r6
 8015cd8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8015cdc:	9401      	str	r4, [sp, #4]
 8015cde:	9600      	str	r6, [sp, #0]
 8015ce0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8015ce4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8015ce8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015cec:	9102      	str	r1, [sp, #8]
 8015cee:	4629      	mov	r1, r5
 8015cf0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8015cf2:	47a0      	blx	r4
 8015cf4:	b00b      	add	sp, #44	; 0x2c
 8015cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cfa:	f010 0f01 	tst.w	r0, #1
 8015cfe:	e7e3      	b.n	8015cc8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 8015d00:	6803      	ldr	r3, [r0, #0]
 8015d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d04:	4798      	blx	r3
 8015d06:	4a2b      	ldr	r2, [pc, #172]	; (8015db4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8015d08:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8015d0c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8015d10:	8813      	ldrh	r3, [r2, #0]
 8015d12:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8015d16:	fb03 f404 	mul.w	r4, r3, r4
 8015d1a:	fb03 c101 	mla	r1, r3, r1, ip
 8015d1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015d22:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015d26:	4408      	add	r0, r1
 8015d28:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8015d2c:	4404      	add	r4, r0
 8015d2e:	d02e      	beq.n	8015d8e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 8015d30:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8015d34:	1b9b      	subs	r3, r3, r6
 8015d36:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 8015d3a:	1b96      	subs	r6, r2, r6
 8015d3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d40:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8015d44:	42a0      	cmp	r0, r4
 8015d46:	d22d      	bcs.n	8015da4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015d48:	eb00 0e01 	add.w	lr, r0, r1
 8015d4c:	4570      	cmp	r0, lr
 8015d4e:	d210      	bcs.n	8015d72 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 8015d50:	f890 9000 	ldrb.w	r9, [r0]
 8015d54:	f815 2b01 	ldrb.w	r2, [r5], #1
 8015d58:	fb19 f90c 	smulbb	r9, r9, ip
 8015d5c:	fb02 9208 	mla	r2, r2, r8, r9
 8015d60:	b292      	uxth	r2, r2
 8015d62:	f102 0901 	add.w	r9, r2, #1
 8015d66:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 8015d6a:	1212      	asrs	r2, r2, #8
 8015d6c:	f800 2b01 	strb.w	r2, [r0], #1
 8015d70:	e7ec      	b.n	8015d4c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8015d72:	4418      	add	r0, r3
 8015d74:	4435      	add	r5, r6
 8015d76:	e7e5      	b.n	8015d44 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8015d78:	8813      	ldrh	r3, [r2, #0]
 8015d7a:	1b9b      	subs	r3, r3, r6
 8015d7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d80:	4418      	add	r0, r3
 8015d82:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8015d86:	1b9b      	subs	r3, r3, r6
 8015d88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d8c:	441d      	add	r5, r3
 8015d8e:	42a0      	cmp	r0, r4
 8015d90:	d208      	bcs.n	8015da4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8015d92:	eb00 0c01 	add.w	ip, r0, r1
 8015d96:	4560      	cmp	r0, ip
 8015d98:	d2ee      	bcs.n	8015d78 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8015d9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015d9e:	f800 3b01 	strb.w	r3, [r0], #1
 8015da2:	e7f8      	b.n	8015d96 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8015da4:	6838      	ldr	r0, [r7, #0]
 8015da6:	6803      	ldr	r3, [r0, #0]
 8015da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015daa:	4798      	blx	r3
 8015dac:	e7a2      	b.n	8015cf4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8015dae:	bf00      	nop
 8015db0:	2401aa3c 	.word	0x2401aa3c
 8015db4:	2401aa36 	.word	0x2401aa36

08015db8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8015db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dba:	2300      	movs	r3, #0
 8015dbc:	b085      	sub	sp, #20
 8015dbe:	9300      	str	r3, [sp, #0]
 8015dc0:	4b41      	ldr	r3, [pc, #260]	; (8015ec8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8015dc2:	781b      	ldrb	r3, [r3, #0]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d136      	bne.n	8015e36 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8015dc8:	4a40      	ldr	r2, [pc, #256]	; (8015ecc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015dca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015dce:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d131      	bne.n	8015e3a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8015dd6:	4b3e      	ldr	r3, [pc, #248]	; (8015ed0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8015dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015ddc:	ac02      	add	r4, sp, #8
 8015dde:	6808      	ldr	r0, [r1, #0]
 8015de0:	f8ad 3006 	strh.w	r3, [sp, #6]
 8015de4:	ab02      	add	r3, sp, #8
 8015de6:	6849      	ldr	r1, [r1, #4]
 8015de8:	4d3a      	ldr	r5, [pc, #232]	; (8015ed4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8015dea:	c303      	stmia	r3!, {r0, r1}
 8015dec:	4669      	mov	r1, sp
 8015dee:	4620      	mov	r0, r4
 8015df0:	f7fb f9c6 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015df4:	4668      	mov	r0, sp
 8015df6:	f7fb f99b 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015dfa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8015dfe:	f8bd 2000 	ldrh.w	r2, [sp]
 8015e02:	462e      	mov	r6, r5
 8015e04:	6828      	ldr	r0, [r5, #0]
 8015e06:	4413      	add	r3, r2
 8015e08:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8015e0c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8015e10:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8015e14:	4413      	add	r3, r2
 8015e16:	f8ad 300a 	strh.w	r3, [sp, #10]
 8015e1a:	6803      	ldr	r3, [r0, #0]
 8015e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e1e:	4798      	blx	r3
 8015e20:	f010 0f01 	tst.w	r0, #1
 8015e24:	d00b      	beq.n	8015e3e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 8015e26:	6828      	ldr	r0, [r5, #0]
 8015e28:	6803      	ldr	r3, [r0, #0]
 8015e2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8015e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015e30:	4798      	blx	r3
 8015e32:	b005      	add	sp, #20
 8015e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e36:	4a26      	ldr	r2, [pc, #152]	; (8015ed0 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8015e38:	e7c7      	b.n	8015dca <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8015e3a:	4b24      	ldr	r3, [pc, #144]	; (8015ecc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015e3c:	e7cc      	b.n	8015dd8 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8015e3e:	6830      	ldr	r0, [r6, #0]
 8015e40:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 8015e44:	6803      	ldr	r3, [r0, #0]
 8015e46:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8015e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e4c:	4798      	blx	r3
 8015e4e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8015e52:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8015e56:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 8015e5a:	fb14 3402 	smlabb	r4, r4, r2, r3
 8015e5e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e62:	4404      	add	r4, r0
 8015e64:	6830      	ldr	r0, [r6, #0]
 8015e66:	6803      	ldr	r3, [r0, #0]
 8015e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e6a:	4798      	blx	r3
 8015e6c:	4917      	ldr	r1, [pc, #92]	; (8015ecc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8015e6e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8015e72:	880b      	ldrh	r3, [r1, #0]
 8015e74:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8015e78:	fb03 c202 	mla	r2, r3, r2, ip
 8015e7c:	437b      	muls	r3, r7
 8015e7e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8015e82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015e86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e8a:	4410      	add	r0, r2
 8015e8c:	18c2      	adds	r2, r0, r3
 8015e8e:	4290      	cmp	r0, r2
 8015e90:	d214      	bcs.n	8015ebc <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8015e92:	eb00 0c07 	add.w	ip, r0, r7
 8015e96:	4560      	cmp	r0, ip
 8015e98:	d204      	bcs.n	8015ea4 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8015e9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015e9e:	f800 3b01 	strb.w	r3, [r0], #1
 8015ea2:	e7f8      	b.n	8015e96 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8015ea4:	880b      	ldrh	r3, [r1, #0]
 8015ea6:	1b5b      	subs	r3, r3, r5
 8015ea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015eac:	4418      	add	r0, r3
 8015eae:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8015eb2:	1b5b      	subs	r3, r3, r5
 8015eb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015eb8:	441c      	add	r4, r3
 8015eba:	e7e8      	b.n	8015e8e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8015ebc:	6830      	ldr	r0, [r6, #0]
 8015ebe:	6803      	ldr	r3, [r0, #0]
 8015ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ec2:	4798      	blx	r3
 8015ec4:	e7b5      	b.n	8015e32 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8015ec6:	bf00      	nop
 8015ec8:	2401aa34 	.word	0x2401aa34
 8015ecc:	2401aa36 	.word	0x2401aa36
 8015ed0:	2401aa38 	.word	0x2401aa38
 8015ed4:	2401aa3c 	.word	0x2401aa3c

08015ed8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8015ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015edc:	b08f      	sub	sp, #60	; 0x3c
 8015ede:	461c      	mov	r4, r3
 8015ee0:	9203      	str	r2, [sp, #12]
 8015ee2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8015ee6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015ee8:	6820      	ldr	r0, [r4, #0]
 8015eea:	9100      	str	r1, [sp, #0]
 8015eec:	9204      	str	r2, [sp, #16]
 8015eee:	aa0a      	add	r2, sp, #40	; 0x28
 8015ef0:	6861      	ldr	r1, [r4, #4]
 8015ef2:	c203      	stmia	r2!, {r0, r1}
 8015ef4:	6818      	ldr	r0, [r3, #0]
 8015ef6:	aa0c      	add	r2, sp, #48	; 0x30
 8015ef8:	6859      	ldr	r1, [r3, #4]
 8015efa:	c203      	stmia	r2!, {r0, r1}
 8015efc:	a80a      	add	r0, sp, #40	; 0x28
 8015efe:	f7fb f917 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015f02:	4621      	mov	r1, r4
 8015f04:	a80c      	add	r0, sp, #48	; 0x30
 8015f06:	f7fb f93b 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8015f0a:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8015f0e:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 8015f12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015f16:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8015f1a:	bfdb      	ittet	le
 8015f1c:	b2b3      	uxthle	r3, r6
 8015f1e:	f44f 6280 	movle.w	r2, #1024	; 0x400
 8015f22:	2301      	movgt	r3, #1
 8015f24:	fb92 f3f3 	sdivle	r3, r2, r3
 8015f28:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8015f2c:	441d      	add	r5, r3
 8015f2e:	fb92 f1f3 	sdiv	r1, r2, r3
 8015f32:	fa1f fc81 	uxth.w	ip, r1
 8015f36:	3d01      	subs	r5, #1
 8015f38:	fb0c 2413 	mls	r4, ip, r3, r2
 8015f3c:	4661      	mov	r1, ip
 8015f3e:	fb14 f406 	smulbb	r4, r4, r6
 8015f42:	4404      	add	r4, r0
 8015f44:	fb95 f5f3 	sdiv	r5, r5, r3
 8015f48:	b2a4      	uxth	r4, r4
 8015f4a:	b131      	cbz	r1, 8015f5a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 8015f4c:	9b03      	ldr	r3, [sp, #12]
 8015f4e:	9900      	ldr	r1, [sp, #0]
 8015f50:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8015f54:	ba1b      	rev	r3, r3
 8015f56:	4419      	add	r1, r3
 8015f58:	9100      	str	r1, [sp, #0]
 8015f5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8015f5e:	b2ad      	uxth	r5, r5
 8015f60:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8015f64:	4418      	add	r0, r3
 8015f66:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8015f6a:	00ad      	lsls	r5, r5, #2
 8015f6c:	441a      	add	r2, r3
 8015f6e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8015f72:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 8015f76:	9301      	str	r3, [sp, #4]
 8015f78:	4b79      	ldr	r3, [pc, #484]	; (8016160 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8015f7a:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8015f7e:	6818      	ldr	r0, [r3, #0]
 8015f80:	6803      	ldr	r3, [r0, #0]
 8015f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015f84:	4798      	blx	r3
 8015f86:	4a77      	ldr	r2, [pc, #476]	; (8016164 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8015f88:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 8015f8c:	2c00      	cmp	r4, #0
 8015f8e:	8813      	ldrh	r3, [r2, #0]
 8015f90:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8015f94:	9209      	str	r2, [sp, #36]	; 0x24
 8015f96:	fb03 c101 	mla	r1, r3, r1, ip
 8015f9a:	fb06 f303 	mul.w	r3, r6, r3
 8015f9e:	bf18      	it	ne
 8015fa0:	2600      	movne	r6, #0
 8015fa2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8015fa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015faa:	4408      	add	r0, r1
 8015fac:	4403      	add	r3, r0
 8015fae:	9306      	str	r3, [sp, #24]
 8015fb0:	f105 0304 	add.w	r3, r5, #4
 8015fb4:	9305      	str	r3, [sp, #20]
 8015fb6:	9b01      	ldr	r3, [sp, #4]
 8015fb8:	bf08      	it	eq
 8015fba:	461e      	moveq	r6, r3
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	b2b6      	uxth	r6, r6
 8015fc0:	9302      	str	r3, [sp, #8]
 8015fc2:	9a06      	ldr	r2, [sp, #24]
 8015fc4:	4290      	cmp	r0, r2
 8015fc6:	f080 80c2 	bcs.w	801614e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8015fca:	b963      	cbnz	r3, 8015fe6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8015fcc:	9b00      	ldr	r3, [sp, #0]
 8015fce:	781a      	ldrb	r2, [r3, #0]
 8015fd0:	0993      	lsrs	r3, r2, #6
 8015fd2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8015fd6:	9202      	str	r2, [sp, #8]
 8015fd8:	1e5a      	subs	r2, r3, #1
 8015fda:	2a02      	cmp	r2, #2
 8015fdc:	d815      	bhi.n	801600a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8015fde:	9a00      	ldr	r2, [sp, #0]
 8015fe0:	b29b      	uxth	r3, r3
 8015fe2:	3201      	adds	r2, #1
 8015fe4:	9200      	str	r2, [sp, #0]
 8015fe6:	b1b4      	cbz	r4, 8016016 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8015fe8:	429c      	cmp	r4, r3
 8015fea:	bf91      	iteee	ls
 8015fec:	1b1c      	subls	r4, r3, r4
 8015fee:	1ae4      	subhi	r4, r4, r3
 8015ff0:	4635      	movhi	r5, r6
 8015ff2:	f04f 0e00 	movhi.w	lr, #0
 8015ff6:	bf9b      	ittet	ls
 8015ff8:	fa1f fe84 	uxthls.w	lr, r4
 8015ffc:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 8016000:	b2a4      	uxthhi	r4, r4
 8016002:	2400      	movls	r4, #0
 8016004:	4673      	mov	r3, lr
 8016006:	462e      	mov	r6, r5
 8016008:	e7db      	b.n	8015fc2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801600a:	9a00      	ldr	r2, [sp, #0]
 801600c:	9b00      	ldr	r3, [sp, #0]
 801600e:	3202      	adds	r2, #2
 8016010:	785b      	ldrb	r3, [r3, #1]
 8016012:	9200      	str	r2, [sp, #0]
 8016014:	e7e7      	b.n	8015fe6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8016016:	2204      	movs	r2, #4
 8016018:	9905      	ldr	r1, [sp, #20]
 801601a:	429e      	cmp	r6, r3
 801601c:	4615      	mov	r5, r2
 801601e:	9a02      	ldr	r2, [sp, #8]
 8016020:	bf94      	ite	ls
 8016022:	eba3 0e06 	subls.w	lr, r3, r6
 8016026:	46a6      	movhi	lr, r4
 8016028:	fb15 1202 	smlabb	r2, r5, r2, r1
 801602c:	9903      	ldr	r1, [sp, #12]
 801602e:	bf8c      	ite	hi
 8016030:	1af5      	subhi	r5, r6, r3
 8016032:	fa1f fe8e 	uxthls.w	lr, lr
 8016036:	f851 c002 	ldr.w	ip, [r1, r2]
 801603a:	bf9a      	itte	ls
 801603c:	4625      	movls	r5, r4
 801603e:	4632      	movls	r2, r6
 8016040:	b2ad      	uxthhi	r5, r5
 8016042:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8016046:	bf88      	it	hi
 8016048:	461a      	movhi	r2, r3
 801604a:	b179      	cbz	r1, 801606c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801604c:	29ff      	cmp	r1, #255	; 0xff
 801604e:	fa5f f98c 	uxtb.w	r9, ip
 8016052:	f3cc 2807 	ubfx	r8, ip, #8, #8
 8016056:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801605a:	d126      	bne.n	80160aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801605c:	9f04      	ldr	r7, [sp, #16]
 801605e:	2fff      	cmp	r7, #255	; 0xff
 8016060:	d123      	bne.n	80160aa <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8016062:	4682      	mov	sl, r0
 8016064:	4611      	mov	r1, r2
 8016066:	f10a 0a03 	add.w	sl, sl, #3
 801606a:	b9a9      	cbnz	r1, 8016098 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801606c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016070:	429e      	cmp	r6, r3
 8016072:	4410      	add	r0, r2
 8016074:	d8c6      	bhi.n	8016004 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8016076:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801607a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801607e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016080:	1b64      	subs	r4, r4, r5
 8016082:	9a01      	ldr	r2, [sp, #4]
 8016084:	881b      	ldrh	r3, [r3, #0]
 8016086:	b2a4      	uxth	r4, r4
 8016088:	1a9b      	subs	r3, r3, r2
 801608a:	2c00      	cmp	r4, #0
 801608c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016090:	bf18      	it	ne
 8016092:	2500      	movne	r5, #0
 8016094:	4418      	add	r0, r3
 8016096:	e7b5      	b.n	8016004 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8016098:	3901      	subs	r1, #1
 801609a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801609e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 80160a2:	f80a cc01 	strb.w	ip, [sl, #-1]
 80160a6:	b289      	uxth	r1, r1
 80160a8:	e7dd      	b.n	8016066 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 80160aa:	9f04      	ldr	r7, [sp, #16]
 80160ac:	fb07 fa01 	mul.w	sl, r7, r1
 80160b0:	f10a 0101 	add.w	r1, sl, #1
 80160b4:	eb01 212a 	add.w	r1, r1, sl, asr #8
 80160b8:	1209      	asrs	r1, r1, #8
 80160ba:	ea6f 0a01 	mvn.w	sl, r1
 80160be:	b289      	uxth	r1, r1
 80160c0:	fb19 f901 	smulbb	r9, r9, r1
 80160c4:	fa5f fa8a 	uxtb.w	sl, sl
 80160c8:	fb18 f801 	smulbb	r8, r8, r1
 80160cc:	fb1c f101 	smulbb	r1, ip, r1
 80160d0:	fa1f f789 	uxth.w	r7, r9
 80160d4:	4684      	mov	ip, r0
 80160d6:	4691      	mov	r9, r2
 80160d8:	9707      	str	r7, [sp, #28]
 80160da:	b289      	uxth	r1, r1
 80160dc:	fa1f f788 	uxth.w	r7, r8
 80160e0:	9708      	str	r7, [sp, #32]
 80160e2:	f10c 0c03 	add.w	ip, ip, #3
 80160e6:	f1b9 0f00 	cmp.w	r9, #0
 80160ea:	d0bf      	beq.n	801606c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80160ec:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 80160f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80160f4:	9f07      	ldr	r7, [sp, #28]
 80160f6:	fa1f f989 	uxth.w	r9, r9
 80160fa:	fb08 780a 	mla	r8, r8, sl, r7
 80160fe:	9f08      	ldr	r7, [sp, #32]
 8016100:	fa1f f888 	uxth.w	r8, r8
 8016104:	f108 0b01 	add.w	fp, r8, #1
 8016108:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801610c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016110:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8016114:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8016118:	fb08 780a 	mla	r8, r8, sl, r7
 801611c:	fa1f f888 	uxth.w	r8, r8
 8016120:	f108 0b01 	add.w	fp, r8, #1
 8016124:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016128:	ea4f 2828 	mov.w	r8, r8, asr #8
 801612c:	f80c 8c02 	strb.w	r8, [ip, #-2]
 8016130:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 8016134:	fb08 180a 	mla	r8, r8, sl, r1
 8016138:	fa1f f888 	uxth.w	r8, r8
 801613c:	f108 0b01 	add.w	fp, r8, #1
 8016140:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016144:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016148:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801614c:	e7c9      	b.n	80160e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801614e:	4b04      	ldr	r3, [pc, #16]	; (8016160 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 8016150:	6818      	ldr	r0, [r3, #0]
 8016152:	6803      	ldr	r3, [r0, #0]
 8016154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016156:	4798      	blx	r3
 8016158:	b00f      	add	sp, #60	; 0x3c
 801615a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801615e:	bf00      	nop
 8016160:	2401aa3c 	.word	0x2401aa3c
 8016164:	2401aa36 	.word	0x2401aa36

08016168 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8016168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801616c:	b089      	sub	sp, #36	; 0x24
 801616e:	4607      	mov	r7, r0
 8016170:	4689      	mov	r9, r1
 8016172:	4692      	mov	sl, r2
 8016174:	ac08      	add	r4, sp, #32
 8016176:	461e      	mov	r6, r3
 8016178:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801617c:	4620      	mov	r0, r4
 801617e:	f7fd ffa5 	bl	80140cc <_ZNK8touchgfx6Bitmap7getDataEv>
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	4605      	mov	r5, r0
 8016186:	4620      	mov	r0, r4
 8016188:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801618c:	f7fd feea 	bl	8013f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016190:	4683      	mov	fp, r0
 8016192:	4620      	mov	r0, r4
 8016194:	f7fd ff1a 	bl	8013fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016198:	4653      	mov	r3, sl
 801619a:	464a      	mov	r2, r9
 801619c:	4639      	mov	r1, r7
 801619e:	9500      	str	r5, [sp, #0]
 80161a0:	e9cd b001 	strd	fp, r0, [sp, #4]
 80161a4:	a806      	add	r0, sp, #24
 80161a6:	47c0      	blx	r8
 80161a8:	a906      	add	r1, sp, #24
 80161aa:	4630      	mov	r0, r6
 80161ac:	f7fd fdbe 	bl	8013d2c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80161b0:	4628      	mov	r0, r5
 80161b2:	b009      	add	sp, #36	; 0x24
 80161b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161b8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 80161b8:	b510      	push	{r4, lr}
 80161ba:	4604      	mov	r4, r0
 80161bc:	2104      	movs	r1, #4
 80161be:	f007 f928 	bl	801d412 <_ZdlPvj>
 80161c2:	4620      	mov	r0, r4
 80161c4:	bd10      	pop	{r4, pc}

080161c6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 80161c6:	b510      	push	{r4, lr}
 80161c8:	4604      	mov	r4, r0
 80161ca:	2104      	movs	r1, #4
 80161cc:	f007 f921 	bl	801d412 <_ZdlPvj>
 80161d0:	4620      	mov	r0, r4
 80161d2:	bd10      	pop	{r4, pc}

080161d4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 80161d4:	b510      	push	{r4, lr}
 80161d6:	4604      	mov	r4, r0
 80161d8:	f640 0144 	movw	r1, #2116	; 0x844
 80161dc:	f007 f919 	bl	801d412 <_ZdlPvj>
 80161e0:	4620      	mov	r0, r4
 80161e2:	bd10      	pop	{r4, pc}

080161e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80161e4:	b510      	push	{r4, lr}
 80161e6:	4604      	mov	r4, r0
 80161e8:	2104      	movs	r1, #4
 80161ea:	f007 f912 	bl	801d412 <_ZdlPvj>
 80161ee:	4620      	mov	r0, r4
 80161f0:	bd10      	pop	{r4, pc}

080161f2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80161f2:	b510      	push	{r4, lr}
 80161f4:	4604      	mov	r4, r0
 80161f6:	2104      	movs	r1, #4
 80161f8:	f007 f90b 	bl	801d412 <_ZdlPvj>
 80161fc:	4620      	mov	r0, r4
 80161fe:	bd10      	pop	{r4, pc}

08016200 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016200:	b510      	push	{r4, lr}
 8016202:	4604      	mov	r4, r0
 8016204:	2104      	movs	r1, #4
 8016206:	f007 f904 	bl	801d412 <_ZdlPvj>
 801620a:	4620      	mov	r0, r4
 801620c:	bd10      	pop	{r4, pc}

0801620e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801620e:	b510      	push	{r4, lr}
 8016210:	4604      	mov	r4, r0
 8016212:	2104      	movs	r1, #4
 8016214:	f007 f8fd 	bl	801d412 <_ZdlPvj>
 8016218:	4620      	mov	r0, r4
 801621a:	bd10      	pop	{r4, pc}

0801621c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801621c:	b510      	push	{r4, lr}
 801621e:	4604      	mov	r4, r0
 8016220:	2104      	movs	r1, #4
 8016222:	f007 f8f6 	bl	801d412 <_ZdlPvj>
 8016226:	4620      	mov	r0, r4
 8016228:	bd10      	pop	{r4, pc}

0801622a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801622a:	b510      	push	{r4, lr}
 801622c:	4604      	mov	r4, r0
 801622e:	2104      	movs	r1, #4
 8016230:	f007 f8ef 	bl	801d412 <_ZdlPvj>
 8016234:	4620      	mov	r0, r4
 8016236:	bd10      	pop	{r4, pc}

08016238 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8016238:	b510      	push	{r4, lr}
 801623a:	4604      	mov	r4, r0
 801623c:	2104      	movs	r1, #4
 801623e:	f007 f8e8 	bl	801d412 <_ZdlPvj>
 8016242:	4620      	mov	r0, r4
 8016244:	bd10      	pop	{r4, pc}

08016246 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8016246:	b510      	push	{r4, lr}
 8016248:	4604      	mov	r4, r0
 801624a:	2104      	movs	r1, #4
 801624c:	f007 f8e1 	bl	801d412 <_ZdlPvj>
 8016250:	4620      	mov	r0, r4
 8016252:	bd10      	pop	{r4, pc}

08016254 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8016254:	b510      	push	{r4, lr}
 8016256:	4604      	mov	r4, r0
 8016258:	2104      	movs	r1, #4
 801625a:	f007 f8da 	bl	801d412 <_ZdlPvj>
 801625e:	4620      	mov	r0, r4
 8016260:	bd10      	pop	{r4, pc}

08016262 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8016262:	b510      	push	{r4, lr}
 8016264:	4604      	mov	r4, r0
 8016266:	2104      	movs	r1, #4
 8016268:	f007 f8d3 	bl	801d412 <_ZdlPvj>
 801626c:	4620      	mov	r0, r4
 801626e:	bd10      	pop	{r4, pc}

08016270 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8016270:	b510      	push	{r4, lr}
 8016272:	4604      	mov	r4, r0
 8016274:	2104      	movs	r1, #4
 8016276:	f007 f8cc 	bl	801d412 <_ZdlPvj>
 801627a:	4620      	mov	r0, r4
 801627c:	bd10      	pop	{r4, pc}

0801627e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801627e:	b510      	push	{r4, lr}
 8016280:	4604      	mov	r4, r0
 8016282:	2104      	movs	r1, #4
 8016284:	f007 f8c5 	bl	801d412 <_ZdlPvj>
 8016288:	4620      	mov	r0, r4
 801628a:	bd10      	pop	{r4, pc}

0801628c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801628c:	b510      	push	{r4, lr}
 801628e:	4604      	mov	r4, r0
 8016290:	2104      	movs	r1, #4
 8016292:	f007 f8be 	bl	801d412 <_ZdlPvj>
 8016296:	4620      	mov	r0, r4
 8016298:	bd10      	pop	{r4, pc}

0801629a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801629a:	b510      	push	{r4, lr}
 801629c:	4604      	mov	r4, r0
 801629e:	2104      	movs	r1, #4
 80162a0:	f007 f8b7 	bl	801d412 <_ZdlPvj>
 80162a4:	4620      	mov	r0, r4
 80162a6:	bd10      	pop	{r4, pc}

080162a8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80162a8:	b510      	push	{r4, lr}
 80162aa:	4604      	mov	r4, r0
 80162ac:	2104      	movs	r1, #4
 80162ae:	f007 f8b0 	bl	801d412 <_ZdlPvj>
 80162b2:	4620      	mov	r0, r4
 80162b4:	bd10      	pop	{r4, pc}

080162b6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80162b6:	b510      	push	{r4, lr}
 80162b8:	4604      	mov	r4, r0
 80162ba:	2104      	movs	r1, #4
 80162bc:	f007 f8a9 	bl	801d412 <_ZdlPvj>
 80162c0:	4620      	mov	r0, r4
 80162c2:	bd10      	pop	{r4, pc}

080162c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80162c4:	b510      	push	{r4, lr}
 80162c6:	4604      	mov	r4, r0
 80162c8:	2104      	movs	r1, #4
 80162ca:	f007 f8a2 	bl	801d412 <_ZdlPvj>
 80162ce:	4620      	mov	r0, r4
 80162d0:	bd10      	pop	{r4, pc}

080162d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80162d2:	b510      	push	{r4, lr}
 80162d4:	4604      	mov	r4, r0
 80162d6:	2104      	movs	r1, #4
 80162d8:	f007 f89b 	bl	801d412 <_ZdlPvj>
 80162dc:	4620      	mov	r0, r4
 80162de:	bd10      	pop	{r4, pc}

080162e0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80162e0:	b510      	push	{r4, lr}
 80162e2:	4604      	mov	r4, r0
 80162e4:	2104      	movs	r1, #4
 80162e6:	f007 f894 	bl	801d412 <_ZdlPvj>
 80162ea:	4620      	mov	r0, r4
 80162ec:	bd10      	pop	{r4, pc}

080162ee <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80162ee:	b510      	push	{r4, lr}
 80162f0:	4604      	mov	r4, r0
 80162f2:	2104      	movs	r1, #4
 80162f4:	f007 f88d 	bl	801d412 <_ZdlPvj>
 80162f8:	4620      	mov	r0, r4
 80162fa:	bd10      	pop	{r4, pc}

080162fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80162fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016300:	b08f      	sub	sp, #60	; 0x3c
 8016302:	461c      	mov	r4, r3
 8016304:	460e      	mov	r6, r1
 8016306:	9206      	str	r2, [sp, #24]
 8016308:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801630c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801630e:	9202      	str	r2, [sp, #8]
 8016310:	2a00      	cmp	r2, #0
 8016312:	f000 8128 	beq.w	8016566 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8016316:	6820      	ldr	r0, [r4, #0]
 8016318:	aa0a      	add	r2, sp, #40	; 0x28
 801631a:	6861      	ldr	r1, [r4, #4]
 801631c:	c203      	stmia	r2!, {r0, r1}
 801631e:	6818      	ldr	r0, [r3, #0]
 8016320:	aa0c      	add	r2, sp, #48	; 0x30
 8016322:	6859      	ldr	r1, [r3, #4]
 8016324:	c203      	stmia	r2!, {r0, r1}
 8016326:	a80a      	add	r0, sp, #40	; 0x28
 8016328:	f7fa ff02 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801632c:	4621      	mov	r1, r4
 801632e:	a80c      	add	r0, sp, #48	; 0x30
 8016330:	f7fa ff26 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016334:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 8016338:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	; 0x2e
 801633c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8016340:	f8bd 0030 	ldrh.w	r0, [sp, #48]	; 0x30
 8016344:	bfdb      	ittet	le
 8016346:	b2bb      	uxthle	r3, r7
 8016348:	f44f 6280 	movle.w	r2, #1024	; 0x400
 801634c:	2301      	movgt	r3, #1
 801634e:	fb92 f3f3 	sdivle	r3, r2, r3
 8016352:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8016356:	441d      	add	r5, r3
 8016358:	fb92 f1f3 	sdiv	r1, r2, r3
 801635c:	fa1f fc81 	uxth.w	ip, r1
 8016360:	3d01      	subs	r5, #1
 8016362:	fb0c 2413 	mls	r4, ip, r3, r2
 8016366:	4661      	mov	r1, ip
 8016368:	fb14 f407 	smulbb	r4, r4, r7
 801636c:	4404      	add	r4, r0
 801636e:	fb95 f5f3 	sdiv	r5, r5, r3
 8016372:	b2a4      	uxth	r4, r4
 8016374:	b121      	cbz	r1, 8016380 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8016376:	9b06      	ldr	r3, [sp, #24]
 8016378:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801637c:	ba1b      	rev	r3, r3
 801637e:	441e      	add	r6, r3
 8016380:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8016384:	b2ad      	uxth	r5, r5
 8016386:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 801638a:	4418      	add	r0, r3
 801638c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8016390:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	; 0x36
 8016394:	00ad      	lsls	r5, r5, #2
 8016396:	441a      	add	r2, r3
 8016398:	4b74      	ldr	r3, [pc, #464]	; (801656c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801639a:	f8ad 0030 	strh.w	r0, [sp, #48]	; 0x30
 801639e:	6818      	ldr	r0, [r3, #0]
 80163a0:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 80163a4:	6803      	ldr	r3, [r0, #0]
 80163a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163a8:	4798      	blx	r3
 80163aa:	4a71      	ldr	r2, [pc, #452]	; (8016570 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 80163ac:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 80163b0:	2c00      	cmp	r4, #0
 80163b2:	8813      	ldrh	r3, [r2, #0]
 80163b4:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 80163b8:	9209      	str	r2, [sp, #36]	; 0x24
 80163ba:	fb03 c101 	mla	r1, r3, r1, ip
 80163be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80163c2:	fb03 f307 	mul.w	r3, r3, r7
 80163c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80163ca:	9204      	str	r2, [sp, #16]
 80163cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80163d0:	9a02      	ldr	r2, [sp, #8]
 80163d2:	4408      	add	r0, r1
 80163d4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80163d8:	4403      	add	r3, r0
 80163da:	b292      	uxth	r2, r2
 80163dc:	9307      	str	r3, [sp, #28]
 80163de:	f105 0304 	add.w	r3, r5, #4
 80163e2:	bf0c      	ite	eq
 80163e4:	4645      	moveq	r5, r8
 80163e6:	2500      	movne	r5, #0
 80163e8:	9308      	str	r3, [sp, #32]
 80163ea:	2300      	movs	r3, #0
 80163ec:	b2ad      	uxth	r5, r5
 80163ee:	9205      	str	r2, [sp, #20]
 80163f0:	9303      	str	r3, [sp, #12]
 80163f2:	9a07      	ldr	r2, [sp, #28]
 80163f4:	4282      	cmp	r2, r0
 80163f6:	f240 80b1 	bls.w	801655c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80163fa:	b95b      	cbnz	r3, 8016414 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 80163fc:	7832      	ldrb	r2, [r6, #0]
 80163fe:	0993      	lsrs	r3, r2, #6
 8016400:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8016404:	9203      	str	r2, [sp, #12]
 8016406:	1e5a      	subs	r2, r3, #1
 8016408:	2a02      	cmp	r2, #2
 801640a:	bf8d      	iteet	hi
 801640c:	7873      	ldrbhi	r3, [r6, #1]
 801640e:	3601      	addls	r6, #1
 8016410:	b29b      	uxthls	r3, r3
 8016412:	3602      	addhi	r6, #2
 8016414:	b184      	cbz	r4, 8016438 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8016416:	429c      	cmp	r4, r3
 8016418:	bf91      	iteee	ls
 801641a:	1b1c      	subls	r4, r3, r4
 801641c:	1ae4      	subhi	r4, r4, r3
 801641e:	4629      	movhi	r1, r5
 8016420:	f04f 0e00 	movhi.w	lr, #0
 8016424:	bf9b      	ittet	ls
 8016426:	fa1f fe84 	uxthls.w	lr, r4
 801642a:	2400      	movls	r4, #0
 801642c:	b2a4      	uxthhi	r4, r4
 801642e:	fa1f f188 	uxthls.w	r1, r8
 8016432:	4673      	mov	r3, lr
 8016434:	460d      	mov	r5, r1
 8016436:	e7dc      	b.n	80163f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8016438:	2203      	movs	r2, #3
 801643a:	9908      	ldr	r1, [sp, #32]
 801643c:	42ab      	cmp	r3, r5
 801643e:	4617      	mov	r7, r2
 8016440:	9a03      	ldr	r2, [sp, #12]
 8016442:	bf24      	itt	cs
 8016444:	eba3 0e05 	subcs.w	lr, r3, r5
 8016448:	9501      	strcs	r5, [sp, #4]
 801644a:	fb17 1702 	smlabb	r7, r7, r2, r1
 801644e:	9a06      	ldr	r2, [sp, #24]
 8016450:	bf34      	ite	cc
 8016452:	1ae9      	subcc	r1, r5, r3
 8016454:	fa1f fe8e 	uxthcs.w	lr, lr
 8016458:	4417      	add	r7, r2
 801645a:	9a02      	ldr	r2, [sp, #8]
 801645c:	bf2f      	iteee	cs
 801645e:	4621      	movcs	r1, r4
 8016460:	b289      	uxthcc	r1, r1
 8016462:	9301      	strcc	r3, [sp, #4]
 8016464:	46a6      	movcc	lr, r4
 8016466:	2aff      	cmp	r2, #255	; 0xff
 8016468:	d11e      	bne.n	80164a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801646a:	4681      	mov	r9, r0
 801646c:	f8dd c004 	ldr.w	ip, [sp, #4]
 8016470:	f109 0903 	add.w	r9, r9, #3
 8016474:	f1bc 0f00 	cmp.w	ip, #0
 8016478:	d15f      	bne.n	801653a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801647a:	9a01      	ldr	r2, [sp, #4]
 801647c:	42ab      	cmp	r3, r5
 801647e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016482:	4410      	add	r0, r2
 8016484:	d3d5      	bcc.n	8016432 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8016486:	fa1f f188 	uxth.w	r1, r8
 801648a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 801648e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016490:	1a64      	subs	r4, r4, r1
 8016492:	881b      	ldrh	r3, [r3, #0]
 8016494:	b2a4      	uxth	r4, r4
 8016496:	eba3 0308 	sub.w	r3, r3, r8
 801649a:	2c00      	cmp	r4, #0
 801649c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80164a0:	bf18      	it	ne
 80164a2:	2100      	movne	r1, #0
 80164a4:	4418      	add	r0, r3
 80164a6:	e7c4      	b.n	8016432 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 80164a8:	4684      	mov	ip, r0
 80164aa:	f8dd a004 	ldr.w	sl, [sp, #4]
 80164ae:	f10c 0c03 	add.w	ip, ip, #3
 80164b2:	f1ba 0f00 	cmp.w	sl, #0
 80164b6:	d0e0      	beq.n	801647a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 80164b8:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 80164bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80164c0:	9a05      	ldr	r2, [sp, #20]
 80164c2:	f897 9000 	ldrb.w	r9, [r7]
 80164c6:	fa1f fa8a 	uxth.w	sl, sl
 80164ca:	fb1b fb02 	smulbb	fp, fp, r2
 80164ce:	9a04      	ldr	r2, [sp, #16]
 80164d0:	fb09 b902 	mla	r9, r9, r2, fp
 80164d4:	9a05      	ldr	r2, [sp, #20]
 80164d6:	fa1f f989 	uxth.w	r9, r9
 80164da:	f109 0b01 	add.w	fp, r9, #1
 80164de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80164e2:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 80164e6:	fb1b fb02 	smulbb	fp, fp, r2
 80164ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80164ee:	9a04      	ldr	r2, [sp, #16]
 80164f0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 80164f4:	f897 9001 	ldrb.w	r9, [r7, #1]
 80164f8:	fb09 b902 	mla	r9, r9, r2, fp
 80164fc:	9a05      	ldr	r2, [sp, #20]
 80164fe:	fa1f f989 	uxth.w	r9, r9
 8016502:	f109 0b01 	add.w	fp, r9, #1
 8016506:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801650a:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801650e:	fb1b fb02 	smulbb	fp, fp, r2
 8016512:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016516:	9a04      	ldr	r2, [sp, #16]
 8016518:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801651c:	f897 9002 	ldrb.w	r9, [r7, #2]
 8016520:	fb09 b902 	mla	r9, r9, r2, fp
 8016524:	fa1f f989 	uxth.w	r9, r9
 8016528:	f109 0b01 	add.w	fp, r9, #1
 801652c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016530:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016534:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8016538:	e7b9      	b.n	80164ae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801653a:	f897 a000 	ldrb.w	sl, [r7]
 801653e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016542:	f809 ac03 	strb.w	sl, [r9, #-3]
 8016546:	fa1f fc8c 	uxth.w	ip, ip
 801654a:	f897 a001 	ldrb.w	sl, [r7, #1]
 801654e:	f809 ac02 	strb.w	sl, [r9, #-2]
 8016552:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016556:	f809 ac01 	strb.w	sl, [r9, #-1]
 801655a:	e789      	b.n	8016470 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801655c:	4b03      	ldr	r3, [pc, #12]	; (801656c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801655e:	6818      	ldr	r0, [r3, #0]
 8016560:	6803      	ldr	r3, [r0, #0]
 8016562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016564:	4798      	blx	r3
 8016566:	b00f      	add	sp, #60	; 0x3c
 8016568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801656c:	2401aa3c 	.word	0x2401aa3c
 8016570:	2401aa36 	.word	0x2401aa36

08016574 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	b09b      	sub	sp, #108	; 0x6c
 801657a:	461d      	mov	r5, r3
 801657c:	4604      	mov	r4, r0
 801657e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016580:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8016584:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8016588:	9208      	str	r2, [sp, #32]
 801658a:	2a00      	cmp	r2, #0
 801658c:	f000 81f3 	beq.w	8016976 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8016590:	6828      	ldr	r0, [r5, #0]
 8016592:	aa16      	add	r2, sp, #88	; 0x58
 8016594:	6869      	ldr	r1, [r5, #4]
 8016596:	c203      	stmia	r2!, {r0, r1}
 8016598:	6818      	ldr	r0, [r3, #0]
 801659a:	aa18      	add	r2, sp, #96	; 0x60
 801659c:	6859      	ldr	r1, [r3, #4]
 801659e:	c203      	stmia	r2!, {r0, r1}
 80165a0:	a816      	add	r0, sp, #88	; 0x58
 80165a2:	f7fa fdc5 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80165a6:	4629      	mov	r1, r5
 80165a8:	a818      	add	r0, sp, #96	; 0x60
 80165aa:	f7fa fde9 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80165ae:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80165b2:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	; 0x5e
 80165b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80165ba:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	; 0x66
 80165be:	bfdb      	ittet	le
 80165c0:	b29a      	uxthle	r2, r3
 80165c2:	f44f 6180 	movle.w	r1, #1024	; 0x400
 80165c6:	f04f 0a01 	movgt.w	sl, #1
 80165ca:	fb91 faf2 	sdivle	sl, r1, r2
 80165ce:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
 80165d2:	4456      	add	r6, sl
 80165d4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80165d8:	3e01      	subs	r6, #1
 80165da:	fb92 f0fa 	sdiv	r0, r2, sl
 80165de:	b280      	uxth	r0, r0
 80165e0:	fb00 281a 	mls	r8, r0, sl, r2
 80165e4:	900e      	str	r0, [sp, #56]	; 0x38
 80165e6:	fb18 f803 	smulbb	r8, r8, r3
 80165ea:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 80165ee:	4488      	add	r8, r1
 80165f0:	4419      	add	r1, r3
 80165f2:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
 80165f6:	f8ad 1060 	strh.w	r1, [sp, #96]	; 0x60
 80165fa:	fa1f f888 	uxth.w	r8, r8
 80165fe:	441a      	add	r2, r3
 8016600:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 8016604:	9303      	str	r3, [sp, #12]
 8016606:	4b9c      	ldr	r3, [pc, #624]	; (8016878 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8016608:	f8ad 2062 	strh.w	r2, [sp, #98]	; 0x62
 801660c:	6818      	ldr	r0, [r3, #0]
 801660e:	6803      	ldr	r3, [r0, #0]
 8016610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016612:	4798      	blx	r3
 8016614:	4b99      	ldr	r3, [pc, #612]	; (801687c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8016616:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	; 0x62
 801661a:	f1b8 0f00 	cmp.w	r8, #0
 801661e:	881a      	ldrh	r2, [r3, #0]
 8016620:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	; 0x60
 8016624:	fb02 f505 	mul.w	r5, r2, r5
 8016628:	fb02 7101 	mla	r1, r2, r1, r7
 801662c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016630:	9314      	str	r3, [sp, #80]	; 0x50
 8016632:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016636:	9b08      	ldr	r3, [sp, #32]
 8016638:	fb96 f6fa 	sdiv	r6, r6, sl
 801663c:	4408      	add	r0, r1
 801663e:	f106 0601 	add.w	r6, r6, #1
 8016642:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8016646:	f04f 0100 	mov.w	r1, #0
 801664a:	eb00 0205 	add.w	r2, r0, r5
 801664e:	b2b6      	uxth	r6, r6
 8016650:	b29b      	uxth	r3, r3
 8016652:	910b      	str	r1, [sp, #44]	; 0x2c
 8016654:	9209      	str	r2, [sp, #36]	; 0x24
 8016656:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016658:	930d      	str	r3, [sp, #52]	; 0x34
 801665a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801665e:	4b88      	ldr	r3, [pc, #544]	; (8016880 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8016660:	f106 0204 	add.w	r2, r6, #4
 8016664:	eba3 0304 	sub.w	r3, r3, r4
 8016668:	9205      	str	r2, [sp, #20]
 801666a:	9a03      	ldr	r2, [sp, #12]
 801666c:	bf18      	it	ne
 801666e:	2200      	movne	r2, #0
 8016670:	9315      	str	r3, [sp, #84]	; 0x54
 8016672:	b292      	uxth	r2, r2
 8016674:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016678:	fa11 f383 	uxtah	r3, r1, r3
 801667c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801667e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016682:	3304      	adds	r3, #4
 8016684:	9306      	str	r3, [sp, #24]
 8016686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016688:	4283      	cmp	r3, r0
 801668a:	f240 816f 	bls.w	801696c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801668e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
 8016692:	f04f 0900 	mov.w	r9, #0
 8016696:	9d06      	ldr	r5, [sp, #24]
 8016698:	fbb8 f3f3 	udiv	r3, r8, r3
 801669c:	ebaa 0303 	sub.w	r3, sl, r3
 80166a0:	782d      	ldrb	r5, [r5, #0]
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	950f      	str	r5, [sp, #60]	; 0x3c
 80166a6:	3501      	adds	r5, #1
 80166a8:	9312      	str	r3, [sp, #72]	; 0x48
 80166aa:	9b06      	ldr	r3, [sp, #24]
 80166ac:	9504      	str	r5, [sp, #16]
 80166ae:	7859      	ldrb	r1, [r3, #1]
 80166b0:	789b      	ldrb	r3, [r3, #2]
 80166b2:	021b      	lsls	r3, r3, #8
 80166b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80166b8:	9906      	ldr	r1, [sp, #24]
 80166ba:	78c9      	ldrb	r1, [r1, #3]
 80166bc:	430b      	orrs	r3, r1
 80166be:	9910      	ldr	r1, [sp, #64]	; 0x40
 80166c0:	4419      	add	r1, r3
 80166c2:	1c4d      	adds	r5, r1, #1
 80166c4:	7849      	ldrb	r1, [r1, #1]
 80166c6:	9502      	str	r5, [sp, #8]
 80166c8:	0209      	lsls	r1, r1, #8
 80166ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80166cc:	f401 71ff 	and.w	r1, r1, #510	; 0x1fe
 80166d0:	5ceb      	ldrb	r3, [r5, r3]
 80166d2:	4319      	orrs	r1, r3
 80166d4:	b28b      	uxth	r3, r1
 80166d6:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 80166da:	930a      	str	r3, [sp, #40]	; 0x28
 80166dc:	2300      	movs	r3, #0
 80166de:	9307      	str	r3, [sp, #28]
 80166e0:	2301      	movs	r3, #1
 80166e2:	e9cd 3300 	strd	r3, r3, [sp]
 80166e6:	469c      	mov	ip, r3
 80166e8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80166ec:	930c      	str	r3, [sp, #48]	; 0x30
 80166ee:	f1b8 0f00 	cmp.w	r8, #0
 80166f2:	f000 8082 	beq.w	80167fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 80166f6:	45c4      	cmp	ip, r8
 80166f8:	d270      	bcs.n	80167dc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 80166fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166fc:	eba8 080c 	sub.w	r8, r8, ip
 8016700:	4611      	mov	r1, r2
 8016702:	4283      	cmp	r3, r0
 8016704:	fa1f f888 	uxth.w	r8, r8
 8016708:	d802      	bhi.n	8016710 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801670a:	e074      	b.n	80167f6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801670c:	2b00      	cmp	r3, #0
 801670e:	d15f      	bne.n	80167d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8016710:	9b02      	ldr	r3, [sp, #8]
 8016712:	9a01      	ldr	r2, [sp, #4]
 8016714:	785b      	ldrb	r3, [r3, #1]
 8016716:	f1c2 0207 	rsb	r2, r2, #7
 801671a:	9d01      	ldr	r5, [sp, #4]
 801671c:	4093      	lsls	r3, r2
 801671e:	005b      	lsls	r3, r3, #1
 8016720:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8016724:	9b02      	ldr	r3, [sp, #8]
 8016726:	781b      	ldrb	r3, [r3, #0]
 8016728:	412b      	asrs	r3, r5
 801672a:	b2db      	uxtb	r3, r3
 801672c:	4313      	orrs	r3, r2
 801672e:	462a      	mov	r2, r5
 8016730:	3201      	adds	r2, #1
 8016732:	b29e      	uxth	r6, r3
 8016734:	b2d2      	uxtb	r2, r2
 8016736:	2a08      	cmp	r2, #8
 8016738:	9201      	str	r2, [sp, #4]
 801673a:	9a02      	ldr	r2, [sp, #8]
 801673c:	bf09      	itett	eq
 801673e:	3202      	addeq	r2, #2
 8016740:	3201      	addne	r2, #1
 8016742:	9202      	streq	r2, [sp, #8]
 8016744:	2200      	moveq	r2, #0
 8016746:	bf14      	ite	ne
 8016748:	9202      	strne	r2, [sp, #8]
 801674a:	9201      	streq	r2, [sp, #4]
 801674c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801674e:	42b2      	cmp	r2, r6
 8016750:	d309      	bcc.n	8016766 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8016752:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8016756:	2301      	movs	r3, #1
 8016758:	9a04      	ldr	r2, [sp, #16]
 801675a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 801675e:	d30e      	bcc.n	801677e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8016760:	9300      	str	r3, [sp, #0]
 8016762:	2500      	movs	r5, #0
 8016764:	e035      	b.n	80167d2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8016766:	9b04      	ldr	r3, [sp, #16]
 8016768:	429e      	cmp	r6, r3
 801676a:	d318      	bcc.n	801679e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801676c:	9b00      	ldr	r3, [sp, #0]
 801676e:	f894 2804 	ldrb.w	r2, [r4, #2052]	; 0x804
 8016772:	18e3      	adds	r3, r4, r3
 8016774:	f883 2804 	strb.w	r2, [r3, #2052]	; 0x804
 8016778:	9b00      	ldr	r3, [sp, #0]
 801677a:	3301      	adds	r3, #1
 801677c:	b29b      	uxth	r3, r3
 801677e:	9a04      	ldr	r2, [sp, #16]
 8016780:	f894 5804 	ldrb.w	r5, [r4, #2052]	; 0x804
 8016784:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016788:	9f00      	ldr	r7, [sp, #0]
 801678a:	7115      	strb	r5, [r2, #4]
 801678c:	3701      	adds	r7, #1
 801678e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016790:	7157      	strb	r7, [r2, #5]
 8016792:	80d5      	strh	r5, [r2, #6]
 8016794:	9a04      	ldr	r2, [sp, #16]
 8016796:	3201      	adds	r2, #1
 8016798:	b292      	uxth	r2, r2
 801679a:	9204      	str	r2, [sp, #16]
 801679c:	e7e0      	b.n	8016760 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801679e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80167a2:	4632      	mov	r2, r6
 80167a4:	795b      	ldrb	r3, [r3, #5]
 80167a6:	f603 0504 	addw	r5, r3, #2052	; 0x804
 80167aa:	4425      	add	r5, r4
 80167ac:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80167ae:	eb07 0c05 	add.w	ip, r7, r5
 80167b2:	f1bc 0f00 	cmp.w	ip, #0
 80167b6:	dd07      	ble.n	80167c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 80167b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80167bc:	f892 c004 	ldrb.w	ip, [r2, #4]
 80167c0:	f805 cd01 	strb.w	ip, [r5, #-1]!
 80167c4:	88d2      	ldrh	r2, [r2, #6]
 80167c6:	e7f1      	b.n	80167ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 80167c8:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 80167cc:	b29b      	uxth	r3, r3
 80167ce:	e7c3      	b.n	8016758 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 80167d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80167d2:	460a      	mov	r2, r1
 80167d4:	960a      	str	r6, [sp, #40]	; 0x28
 80167d6:	46a9      	mov	r9, r5
 80167d8:	469c      	mov	ip, r3
 80167da:	e788      	b.n	80166ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 80167dc:	ebac 0308 	sub.w	r3, ip, r8
 80167e0:	eb09 0508 	add.w	r5, r9, r8
 80167e4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	b2ad      	uxth	r5, r5
 80167ec:	f04f 0800 	mov.w	r8, #0
 80167f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167f2:	4282      	cmp	r2, r0
 80167f4:	d88a      	bhi.n	801670c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 80167f6:	460a      	mov	r2, r1
 80167f8:	e745      	b.n	8016686 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 80167fa:	4594      	cmp	ip, r2
 80167fc:	9d08      	ldr	r5, [sp, #32]
 80167fe:	4686      	mov	lr, r0
 8016800:	bf27      	ittee	cs
 8016802:	ebac 0302 	subcs.w	r3, ip, r2
 8016806:	4616      	movcs	r6, r2
 8016808:	eba2 010c 	subcc.w	r1, r2, ip
 801680c:	4666      	movcc	r6, ip
 801680e:	bf27      	ittee	cs
 8016810:	b29b      	uxthcs	r3, r3
 8016812:	4641      	movcs	r1, r8
 8016814:	b289      	uxthcc	r1, r1
 8016816:	4643      	movcc	r3, r8
 8016818:	2dff      	cmp	r5, #255	; 0xff
 801681a:	eb09 0506 	add.w	r5, r9, r6
 801681e:	b2ad      	uxth	r5, r5
 8016820:	d130      	bne.n	8016884 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8016822:	45a9      	cmp	r9, r5
 8016824:	f10e 0e03 	add.w	lr, lr, #3
 8016828:	d17a      	bne.n	8016920 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801682a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801682e:	4594      	cmp	ip, r2
 8016830:	4430      	add	r0, r6
 8016832:	d3db      	bcc.n	80167ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8016834:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016836:	9903      	ldr	r1, [sp, #12]
 8016838:	8812      	ldrh	r2, [r2, #0]
 801683a:	1a52      	subs	r2, r2, r1
 801683c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801683e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016842:	4410      	add	r0, r2
 8016844:	9a07      	ldr	r2, [sp, #28]
 8016846:	3201      	adds	r2, #1
 8016848:	428a      	cmp	r2, r1
 801684a:	9207      	str	r2, [sp, #28]
 801684c:	f040 8081 	bne.w	8016952 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8016850:	f8bd 8060 	ldrh.w	r8, [sp, #96]	; 0x60
 8016854:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 8016858:	9b03      	ldr	r3, [sp, #12]
 801685a:	eba8 080c 	sub.w	r8, r8, ip
 801685e:	fa1f f888 	uxth.w	r8, r8
 8016862:	f1b8 0f00 	cmp.w	r8, #0
 8016866:	bf08      	it	eq
 8016868:	461a      	moveq	r2, r3
 801686a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801686c:	bf18      	it	ne
 801686e:	2200      	movne	r2, #0
 8016870:	3301      	adds	r3, #1
 8016872:	b292      	uxth	r2, r2
 8016874:	930b      	str	r3, [sp, #44]	; 0x2c
 8016876:	e6fd      	b.n	8016674 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8016878:	2401aa3c 	.word	0x2401aa3c
 801687c:	2401aa36 	.word	0x2401aa36
 8016880:	fffff7fb 	.word	0xfffff7fb
 8016884:	45a9      	cmp	r9, r5
 8016886:	f10e 0e03 	add.w	lr, lr, #3
 801688a:	d0ce      	beq.n	801682a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801688c:	f109 0701 	add.w	r7, r9, #1
 8016890:	44a1      	add	r9, r4
 8016892:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8016896:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801689a:	9713      	str	r7, [sp, #76]	; 0x4c
 801689c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80168a0:	9f05      	ldr	r7, [sp, #20]
 80168a2:	eb07 0908 	add.w	r9, r7, r8
 80168a6:	f817 8008 	ldrb.w	r8, [r7, r8]
 80168aa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80168ac:	fb1b fb07 	smulbb	fp, fp, r7
 80168b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80168b2:	fb08 b807 	mla	r8, r8, r7, fp
 80168b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80168b8:	fa1f f888 	uxth.w	r8, r8
 80168bc:	f108 0b01 	add.w	fp, r8, #1
 80168c0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80168c4:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 80168c8:	fb1b fb07 	smulbb	fp, fp, r7
 80168cc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168d0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80168d2:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80168d6:	f899 8001 	ldrb.w	r8, [r9, #1]
 80168da:	fb08 b807 	mla	r8, r8, r7, fp
 80168de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80168e0:	fa1f f888 	uxth.w	r8, r8
 80168e4:	f108 0b01 	add.w	fp, r8, #1
 80168e8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80168ec:	ea4f 2828 	mov.w	r8, r8, asr #8
 80168f0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80168f4:	f899 8002 	ldrb.w	r8, [r9, #2]
 80168f8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 80168fc:	fb19 f907 	smulbb	r9, r9, r7
 8016900:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8016902:	fb08 9807 	mla	r8, r8, r7, r9
 8016906:	fa1f f888 	uxth.w	r8, r8
 801690a:	f108 0901 	add.w	r9, r8, #1
 801690e:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8016912:	f8bd 904c 	ldrh.w	r9, [sp, #76]	; 0x4c
 8016916:	ea4f 2828 	mov.w	r8, r8, asr #8
 801691a:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801691e:	e7b1      	b.n	8016884 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8016920:	f109 0b01 	add.w	fp, r9, #1
 8016924:	44a1      	add	r9, r4
 8016926:	9f05      	ldr	r7, [sp, #20]
 8016928:	f899 8804 	ldrb.w	r8, [r9, #2052]	; 0x804
 801692c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016930:	eb07 0908 	add.w	r9, r7, r8
 8016934:	f817 8008 	ldrb.w	r8, [r7, r8]
 8016938:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801693c:	f899 8001 	ldrb.w	r8, [r9, #1]
 8016940:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8016944:	f899 8002 	ldrb.w	r8, [r9, #2]
 8016948:	fa1f f98b 	uxth.w	r9, fp
 801694c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8016950:	e767      	b.n	8016822 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8016952:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8016956:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 801695a:	eba8 0801 	sub.w	r8, r8, r1
 801695e:	fa1f f888 	uxth.w	r8, r8
 8016962:	f1b8 0f00 	cmp.w	r8, #0
 8016966:	bf18      	it	ne
 8016968:	2100      	movne	r1, #0
 801696a:	e741      	b.n	80167f0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801696c:	4b03      	ldr	r3, [pc, #12]	; (801697c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801696e:	6818      	ldr	r0, [r3, #0]
 8016970:	6803      	ldr	r3, [r0, #0]
 8016972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016974:	4798      	blx	r3
 8016976:	b01b      	add	sp, #108	; 0x6c
 8016978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801697c:	2401aa3c 	.word	0x2401aa3c

08016980 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8016980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016984:	b09d      	sub	sp, #116	; 0x74
 8016986:	461d      	mov	r5, r3
 8016988:	4604      	mov	r4, r0
 801698a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801698c:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
 8016990:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 8016994:	920c      	str	r2, [sp, #48]	; 0x30
 8016996:	2a00      	cmp	r2, #0
 8016998:	f000 81de 	beq.w	8016d58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801699c:	6828      	ldr	r0, [r5, #0]
 801699e:	aa18      	add	r2, sp, #96	; 0x60
 80169a0:	6869      	ldr	r1, [r5, #4]
 80169a2:	c203      	stmia	r2!, {r0, r1}
 80169a4:	6818      	ldr	r0, [r3, #0]
 80169a6:	aa1a      	add	r2, sp, #104	; 0x68
 80169a8:	6859      	ldr	r1, [r3, #4]
 80169aa:	c203      	stmia	r2!, {r0, r1}
 80169ac:	a818      	add	r0, sp, #96	; 0x60
 80169ae:	f7fa fbbf 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80169b2:	4629      	mov	r1, r5
 80169b4:	a81a      	add	r0, sp, #104	; 0x68
 80169b6:	f7fa fbe3 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80169ba:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80169be:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	; 0x66
 80169c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80169c6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	; 0x6e
 80169ca:	bfdb      	ittet	le
 80169cc:	b29a      	uxthle	r2, r3
 80169ce:	f44f 6180 	movle.w	r1, #1024	; 0x400
 80169d2:	2201      	movgt	r2, #1
 80169d4:	fb91 f2f2 	sdivle	r2, r1, r2
 80169d8:	9201      	str	r2, [sp, #4]
 80169da:	9801      	ldr	r0, [sp, #4]
 80169dc:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
 80169e0:	9901      	ldr	r1, [sp, #4]
 80169e2:	fb92 f0f0 	sdiv	r0, r2, r0
 80169e6:	b280      	uxth	r0, r0
 80169e8:	440f      	add	r7, r1
 80169ea:	900d      	str	r0, [sp, #52]	; 0x34
 80169ec:	3f01      	subs	r7, #1
 80169ee:	9801      	ldr	r0, [sp, #4]
 80169f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80169f2:	fb05 2510 	mls	r5, r5, r0, r2
 80169f6:	fb97 f7f1 	sdiv	r7, r7, r1
 80169fa:	fb15 f503 	smulbb	r5, r5, r3
 80169fe:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8016a02:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8016a06:	3701      	adds	r7, #1
 8016a08:	440d      	add	r5, r1
 8016a0a:	4419      	add	r1, r3
 8016a0c:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
 8016a10:	b2bf      	uxth	r7, r7
 8016a12:	441a      	add	r2, r3
 8016a14:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8016a18:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
 8016a1c:	00bf      	lsls	r7, r7, #2
 8016a1e:	9304      	str	r3, [sp, #16]
 8016a20:	b2ad      	uxth	r5, r5
 8016a22:	4bb0      	ldr	r3, [pc, #704]	; (8016ce4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8016a24:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
 8016a28:	6818      	ldr	r0, [r3, #0]
 8016a2a:	6803      	ldr	r3, [r0, #0]
 8016a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a2e:	4798      	blx	r3
 8016a30:	4bad      	ldr	r3, [pc, #692]	; (8016ce8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8016a32:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	; 0x6a
 8016a36:	2d00      	cmp	r5, #0
 8016a38:	881a      	ldrh	r2, [r3, #0]
 8016a3a:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8016a3e:	fb02 f606 	mul.w	r6, r2, r6
 8016a42:	fb02 c101 	mla	r1, r2, r1, ip
 8016a46:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016a4a:	9316      	str	r3, [sp, #88]	; 0x58
 8016a4c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8016a50:	4ba6      	ldr	r3, [pc, #664]	; (8016cec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8016a52:	eb00 0801 	add.w	r8, r0, r1
 8016a56:	bf18      	it	ne
 8016a58:	2100      	movne	r1, #0
 8016a5a:	eba3 0304 	sub.w	r3, r3, r4
 8016a5e:	eb08 0206 	add.w	r2, r8, r6
 8016a62:	9317      	str	r3, [sp, #92]	; 0x5c
 8016a64:	9208      	str	r2, [sp, #32]
 8016a66:	f107 0204 	add.w	r2, r7, #4
 8016a6a:	9211      	str	r2, [sp, #68]	; 0x44
 8016a6c:	9a04      	ldr	r2, [sp, #16]
 8016a6e:	bf08      	it	eq
 8016a70:	4611      	moveq	r1, r2
 8016a72:	2200      	movs	r2, #0
 8016a74:	b289      	uxth	r1, r1
 8016a76:	920b      	str	r2, [sp, #44]	; 0x2c
 8016a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a7c:	fa12 f383 	uxtah	r3, r2, r3
 8016a80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016a86:	3304      	adds	r3, #4
 8016a88:	9306      	str	r3, [sp, #24]
 8016a8a:	9b08      	ldr	r3, [sp, #32]
 8016a8c:	4543      	cmp	r3, r8
 8016a8e:	f240 815e 	bls.w	8016d4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8016a92:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8016a96:	f04f 0b01 	mov.w	fp, #1
 8016a9a:	9a01      	ldr	r2, [sp, #4]
 8016a9c:	9806      	ldr	r0, [sp, #24]
 8016a9e:	465e      	mov	r6, fp
 8016aa0:	f8cd b008 	str.w	fp, [sp, #8]
 8016aa4:	7800      	ldrb	r0, [r0, #0]
 8016aa6:	fbb5 f3f3 	udiv	r3, r5, r3
 8016aaa:	1ad3      	subs	r3, r2, r3
 8016aac:	900e      	str	r0, [sp, #56]	; 0x38
 8016aae:	3001      	adds	r0, #1
 8016ab0:	b29b      	uxth	r3, r3
 8016ab2:	9005      	str	r0, [sp, #20]
 8016ab4:	9312      	str	r3, [sp, #72]	; 0x48
 8016ab6:	9b06      	ldr	r3, [sp, #24]
 8016ab8:	785a      	ldrb	r2, [r3, #1]
 8016aba:	789b      	ldrb	r3, [r3, #2]
 8016abc:	021b      	lsls	r3, r3, #8
 8016abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ac2:	9a06      	ldr	r2, [sp, #24]
 8016ac4:	78d2      	ldrb	r2, [r2, #3]
 8016ac6:	4313      	orrs	r3, r2
 8016ac8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016aca:	441a      	add	r2, r3
 8016acc:	1c50      	adds	r0, r2, #1
 8016ace:	7852      	ldrb	r2, [r2, #1]
 8016ad0:	9003      	str	r0, [sp, #12]
 8016ad2:	0212      	lsls	r2, r2, #8
 8016ad4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016ad6:	f402 72ff 	and.w	r2, r2, #510	; 0x1fe
 8016ada:	5cc3      	ldrb	r3, [r0, r3]
 8016adc:	431a      	orrs	r2, r3
 8016ade:	b293      	uxth	r3, r2
 8016ae0:	f884 2804 	strb.w	r2, [r4, #2052]	; 0x804
 8016ae4:	930a      	str	r3, [sp, #40]	; 0x28
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	461a      	mov	r2, r3
 8016aea:	9307      	str	r3, [sp, #28]
 8016aec:	2d00      	cmp	r5, #0
 8016aee:	d07c      	beq.n	8016bea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 8016af0:	42ae      	cmp	r6, r5
 8016af2:	d26c      	bcs.n	8016bce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8016af4:	9b08      	ldr	r3, [sp, #32]
 8016af6:	1bad      	subs	r5, r5, r6
 8016af8:	4608      	mov	r0, r1
 8016afa:	4543      	cmp	r3, r8
 8016afc:	b2ad      	uxth	r5, r5
 8016afe:	d802      	bhi.n	8016b06 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 8016b00:	e071      	b.n	8016be6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d15d      	bne.n	8016bc2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 8016b06:	9b03      	ldr	r3, [sp, #12]
 8016b08:	9a02      	ldr	r2, [sp, #8]
 8016b0a:	785b      	ldrb	r3, [r3, #1]
 8016b0c:	f1c2 0207 	rsb	r2, r2, #7
 8016b10:	9902      	ldr	r1, [sp, #8]
 8016b12:	4093      	lsls	r3, r2
 8016b14:	005b      	lsls	r3, r3, #1
 8016b16:	f403 72ff 	and.w	r2, r3, #510	; 0x1fe
 8016b1a:	9b03      	ldr	r3, [sp, #12]
 8016b1c:	781b      	ldrb	r3, [r3, #0]
 8016b1e:	410b      	asrs	r3, r1
 8016b20:	3101      	adds	r1, #1
 8016b22:	b2c9      	uxtb	r1, r1
 8016b24:	b2db      	uxtb	r3, r3
 8016b26:	2908      	cmp	r1, #8
 8016b28:	9102      	str	r1, [sp, #8]
 8016b2a:	9903      	ldr	r1, [sp, #12]
 8016b2c:	ea43 0302 	orr.w	r3, r3, r2
 8016b30:	bf0c      	ite	eq
 8016b32:	3102      	addeq	r1, #2
 8016b34:	3101      	addne	r1, #1
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	bf05      	ittet	eq
 8016b3a:	9103      	streq	r1, [sp, #12]
 8016b3c:	2100      	moveq	r1, #0
 8016b3e:	9103      	strne	r1, [sp, #12]
 8016b40:	9102      	streq	r1, [sp, #8]
 8016b42:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016b44:	4291      	cmp	r1, r2
 8016b46:	d30a      	bcc.n	8016b5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 8016b48:	f884 3804 	strb.w	r3, [r4, #2052]	; 0x804
 8016b4c:	2301      	movs	r3, #1
 8016b4e:	9905      	ldr	r1, [sp, #20]
 8016b50:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016b54:	d30f      	bcc.n	8016b76 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 8016b56:	469b      	mov	fp, r3
 8016b58:	f04f 0c00 	mov.w	ip, #0
 8016b5c:	e032      	b.n	8016bc4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8016b5e:	9b05      	ldr	r3, [sp, #20]
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d318      	bcc.n	8016b96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8016b64:	eb04 030b 	add.w	r3, r4, fp
 8016b68:	f894 1804 	ldrb.w	r1, [r4, #2052]	; 0x804
 8016b6c:	f883 1804 	strb.w	r1, [r3, #2052]	; 0x804
 8016b70:	f10b 0301 	add.w	r3, fp, #1
 8016b74:	b29b      	uxth	r3, r3
 8016b76:	9905      	ldr	r1, [sp, #20]
 8016b78:	f894 6804 	ldrb.w	r6, [r4, #2052]	; 0x804
 8016b7c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016b80:	710e      	strb	r6, [r1, #4]
 8016b82:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016b84:	80ce      	strh	r6, [r1, #6]
 8016b86:	f10b 0601 	add.w	r6, fp, #1
 8016b8a:	714e      	strb	r6, [r1, #5]
 8016b8c:	9905      	ldr	r1, [sp, #20]
 8016b8e:	3101      	adds	r1, #1
 8016b90:	b289      	uxth	r1, r1
 8016b92:	9105      	str	r1, [sp, #20]
 8016b94:	e7df      	b.n	8016b56 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8016b96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b9a:	4611      	mov	r1, r2
 8016b9c:	795b      	ldrb	r3, [r3, #5]
 8016b9e:	f603 0604 	addw	r6, r3, #2052	; 0x804
 8016ba2:	4426      	add	r6, r4
 8016ba4:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8016ba6:	4437      	add	r7, r6
 8016ba8:	2f00      	cmp	r7, #0
 8016baa:	dd06      	ble.n	8016bba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8016bac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8016bb0:	790f      	ldrb	r7, [r1, #4]
 8016bb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016bb6:	88c9      	ldrh	r1, [r1, #6]
 8016bb8:	e7f4      	b.n	8016ba4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8016bba:	f884 1804 	strb.w	r1, [r4, #2052]	; 0x804
 8016bbe:	b29b      	uxth	r3, r3
 8016bc0:	e7c5      	b.n	8016b4e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8016bc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8016bc6:	4601      	mov	r1, r0
 8016bc8:	4662      	mov	r2, ip
 8016bca:	461e      	mov	r6, r3
 8016bcc:	e78e      	b.n	8016aec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8016bce:	1b73      	subs	r3, r6, r5
 8016bd0:	eb02 0c05 	add.w	ip, r2, r5
 8016bd4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	fa1f fc8c 	uxth.w	ip, ip
 8016bde:	2500      	movs	r5, #0
 8016be0:	9a08      	ldr	r2, [sp, #32]
 8016be2:	4542      	cmp	r2, r8
 8016be4:	d88d      	bhi.n	8016b02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8016be6:	4601      	mov	r1, r0
 8016be8:	e74f      	b.n	8016a8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8016bea:	428e      	cmp	r6, r1
 8016bec:	bf2b      	itete	cs
 8016bee:	468e      	movcs	lr, r1
 8016bf0:	46b6      	movcc	lr, r6
 8016bf2:	1a73      	subcs	r3, r6, r1
 8016bf4:	1b88      	subcc	r0, r1, r6
 8016bf6:	eb02 0c0e 	add.w	ip, r2, lr
 8016bfa:	bf2b      	itete	cs
 8016bfc:	4628      	movcs	r0, r5
 8016bfe:	462b      	movcc	r3, r5
 8016c00:	b29b      	uxthcs	r3, r3
 8016c02:	b280      	uxthcc	r0, r0
 8016c04:	f108 0503 	add.w	r5, r8, #3
 8016c08:	fa1f fc8c 	uxth.w	ip, ip
 8016c0c:	4562      	cmp	r2, ip
 8016c0e:	d06f      	beq.n	8016cf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 8016c10:	1c57      	adds	r7, r2, #1
 8016c12:	4422      	add	r2, r4
 8016c14:	b2bf      	uxth	r7, r7
 8016c16:	f892 2804 	ldrb.w	r2, [r2, #2052]	; 0x804
 8016c1a:	9713      	str	r7, [sp, #76]	; 0x4c
 8016c1c:	2704      	movs	r7, #4
 8016c1e:	46b9      	mov	r9, r7
 8016c20:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8016c22:	fb19 7202 	smlabb	r2, r9, r2, r7
 8016c26:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016c28:	58bf      	ldr	r7, [r7, r2]
 8016c2a:	0e3a      	lsrs	r2, r7, #24
 8016c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8016c2e:	d016      	beq.n	8016c5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8016c30:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016c34:	fa5f fa87 	uxtb.w	sl, r7
 8016c38:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016c3c:	fa5f f289 	uxtb.w	r2, r9
 8016c40:	9214      	str	r2, [sp, #80]	; 0x50
 8016c42:	b2fa      	uxtb	r2, r7
 8016c44:	9215      	str	r2, [sp, #84]	; 0x54
 8016c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c48:	2aff      	cmp	r2, #255	; 0xff
 8016c4a:	d10b      	bne.n	8016c64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8016c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c4e:	2aff      	cmp	r2, #255	; 0xff
 8016c50:	d108      	bne.n	8016c64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8016c52:	f805 ac03 	strb.w	sl, [r5, #-3]
 8016c56:	f805 9c02 	strb.w	r9, [r5, #-2]
 8016c5a:	f805 7c01 	strb.w	r7, [r5, #-1]
 8016c5e:	3503      	adds	r5, #3
 8016c60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c62:	e7d3      	b.n	8016c0c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8016c64:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016c66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016c68:	437a      	muls	r2, r7
 8016c6a:	1c57      	adds	r7, r2, #1
 8016c6c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8016c70:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8016c74:	1212      	asrs	r2, r2, #8
 8016c76:	fa1f f982 	uxth.w	r9, r2
 8016c7a:	43d2      	mvns	r2, r2
 8016c7c:	fb1a fa09 	smulbb	sl, sl, r9
 8016c80:	b2d2      	uxtb	r2, r2
 8016c82:	fb07 a702 	mla	r7, r7, r2, sl
 8016c86:	9209      	str	r2, [sp, #36]	; 0x24
 8016c88:	b2bf      	uxth	r7, r7
 8016c8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c8c:	f107 0a01 	add.w	sl, r7, #1
 8016c90:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016c94:	fb12 fa09 	smulbb	sl, r2, r9
 8016c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c9a:	123f      	asrs	r7, r7, #8
 8016c9c:	f805 7c03 	strb.w	r7, [r5, #-3]
 8016ca0:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8016ca4:	fb07 aa02 	mla	sl, r7, r2, sl
 8016ca8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016caa:	fb12 f909 	smulbb	r9, r2, r9
 8016cae:	fa1f fa8a 	uxth.w	sl, sl
 8016cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cb4:	f10a 0701 	add.w	r7, sl, #1
 8016cb8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016cbc:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8016cc0:	fb07 9902 	mla	r9, r7, r2, r9
 8016cc4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016cc8:	fa1f f989 	uxth.w	r9, r9
 8016ccc:	f805 ac02 	strb.w	sl, [r5, #-2]
 8016cd0:	f109 0201 	add.w	r2, r9, #1
 8016cd4:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8016cd8:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016cdc:	f805 9c01 	strb.w	r9, [r5, #-1]
 8016ce0:	e7bd      	b.n	8016c5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 8016ce2:	bf00      	nop
 8016ce4:	2401aa3c 	.word	0x2401aa3c
 8016ce8:	2401aa36 	.word	0x2401aa36
 8016cec:	fffff7fb 	.word	0xfffff7fb
 8016cf0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016cf4:	428e      	cmp	r6, r1
 8016cf6:	44f0      	add	r8, lr
 8016cf8:	f4ff af71 	bcc.w	8016bde <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8016cfc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016cfe:	9904      	ldr	r1, [sp, #16]
 8016d00:	8812      	ldrh	r2, [r2, #0]
 8016d02:	1a52      	subs	r2, r2, r1
 8016d04:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016d0a:	4490      	add	r8, r2
 8016d0c:	9a07      	ldr	r2, [sp, #28]
 8016d0e:	3201      	adds	r2, #1
 8016d10:	428a      	cmp	r2, r1
 8016d12:	9207      	str	r2, [sp, #28]
 8016d14:	d111      	bne.n	8016d3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 8016d16:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 8016d1a:	f8bd c060 	ldrh.w	ip, [sp, #96]	; 0x60
 8016d1e:	9b04      	ldr	r3, [sp, #16]
 8016d20:	eba5 050c 	sub.w	r5, r5, ip
 8016d24:	b2ad      	uxth	r5, r5
 8016d26:	2d00      	cmp	r5, #0
 8016d28:	bf08      	it	eq
 8016d2a:	4619      	moveq	r1, r3
 8016d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d2e:	bf18      	it	ne
 8016d30:	2100      	movne	r1, #0
 8016d32:	3301      	adds	r3, #1
 8016d34:	b289      	uxth	r1, r1
 8016d36:	930b      	str	r3, [sp, #44]	; 0x2c
 8016d38:	e69e      	b.n	8016a78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 8016d3a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8016d3e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8016d42:	1a2d      	subs	r5, r5, r0
 8016d44:	b2ad      	uxth	r5, r5
 8016d46:	2d00      	cmp	r5, #0
 8016d48:	bf18      	it	ne
 8016d4a:	2000      	movne	r0, #0
 8016d4c:	e748      	b.n	8016be0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8016d4e:	4b04      	ldr	r3, [pc, #16]	; (8016d60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8016d50:	6818      	ldr	r0, [r3, #0]
 8016d52:	6803      	ldr	r3, [r0, #0]
 8016d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d56:	4798      	blx	r3
 8016d58:	b01d      	add	sp, #116	; 0x74
 8016d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d5e:	bf00      	nop
 8016d60:	2401aa3c 	.word	0x2401aa3c

08016d64 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8016d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d68:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8016d6c:	9c06      	ldr	r4, [sp, #24]
 8016d6e:	2800      	cmp	r0, #0
 8016d70:	d06e      	beq.n	8016e50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016d72:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8016d76:	2d00      	cmp	r5, #0
 8016d78:	dd6a      	ble.n	8016e50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016d7a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8016d7e:	f1bc 0f00 	cmp.w	ip, #0
 8016d82:	dd65      	ble.n	8016e50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016d84:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8016d88:	28ff      	cmp	r0, #255	; 0xff
 8016d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d8e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8016d92:	fb02 3306 	mla	r3, r2, r6, r3
 8016d96:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8016d9a:	b2e4      	uxtb	r4, r4
 8016d9c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016da0:	4419      	add	r1, r3
 8016da2:	fb02 f30c 	mul.w	r3, r2, ip
 8016da6:	eba2 0205 	sub.w	r2, r2, r5
 8016daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016dae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016db2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016db6:	440b      	add	r3, r1
 8016db8:	d03e      	beq.n	8016e38 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8016dba:	fa1f fc80 	uxth.w	ip, r0
 8016dbe:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8016dc2:	fb06 f60c 	mul.w	r6, r6, ip
 8016dc6:	b280      	uxth	r0, r0
 8016dc8:	fb07 f70c 	mul.w	r7, r7, ip
 8016dcc:	fb04 f40c 	mul.w	r4, r4, ip
 8016dd0:	4299      	cmp	r1, r3
 8016dd2:	d23d      	bcs.n	8016e50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016dd4:	eb01 0c05 	add.w	ip, r1, r5
 8016dd8:	458c      	cmp	ip, r1
 8016dda:	f101 0e03 	add.w	lr, r1, #3
 8016dde:	d928      	bls.n	8016e32 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8016de0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8016de4:	fb11 f100 	smulbb	r1, r1, r0
 8016de8:	4421      	add	r1, r4
 8016dea:	b289      	uxth	r1, r1
 8016dec:	f101 0801 	add.w	r8, r1, #1
 8016df0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8016df4:	1209      	asrs	r1, r1, #8
 8016df6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8016dfa:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8016dfe:	fb11 f100 	smulbb	r1, r1, r0
 8016e02:	4439      	add	r1, r7
 8016e04:	b289      	uxth	r1, r1
 8016e06:	f101 0801 	add.w	r8, r1, #1
 8016e0a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8016e0e:	1209      	asrs	r1, r1, #8
 8016e10:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8016e14:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8016e18:	fb11 f100 	smulbb	r1, r1, r0
 8016e1c:	4431      	add	r1, r6
 8016e1e:	b289      	uxth	r1, r1
 8016e20:	f101 0801 	add.w	r8, r1, #1
 8016e24:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8016e28:	1209      	asrs	r1, r1, #8
 8016e2a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8016e2e:	4671      	mov	r1, lr
 8016e30:	e7d2      	b.n	8016dd8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8016e32:	4411      	add	r1, r2
 8016e34:	e7cc      	b.n	8016dd0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8016e36:	4411      	add	r1, r2
 8016e38:	4299      	cmp	r1, r3
 8016e3a:	d209      	bcs.n	8016e50 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8016e3c:	1948      	adds	r0, r1, r5
 8016e3e:	4281      	cmp	r1, r0
 8016e40:	d2f9      	bcs.n	8016e36 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8016e42:	700c      	strb	r4, [r1, #0]
 8016e44:	3103      	adds	r1, #3
 8016e46:	f801 7c02 	strb.w	r7, [r1, #-2]
 8016e4a:	f801 6c01 	strb.w	r6, [r1, #-1]
 8016e4e:	e7f6      	b.n	8016e3e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8016e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e54 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8016e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e58:	b093      	sub	sp, #76	; 0x4c
 8016e5a:	4699      	mov	r9, r3
 8016e5c:	4617      	mov	r7, r2
 8016e5e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e62:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 8016e66:	4604      	mov	r4, r0
 8016e68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8016e6c:	a80c      	add	r0, sp, #48	; 0x30
 8016e6e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 8016e72:	460d      	mov	r5, r1
 8016e74:	4649      	mov	r1, r9
 8016e76:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8016e7a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8016e7e:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 8016e82:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 8016e86:	f7f7 f8f7 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 8016e8a:	4639      	mov	r1, r7
 8016e8c:	a80c      	add	r0, sp, #48	; 0x30
 8016e8e:	f7f7 f8f3 	bl	800e078 <_ZN8touchgfx4RectaNERKS0_>
 8016e92:	4b78      	ldr	r3, [pc, #480]	; (8017074 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8016e94:	8818      	ldrh	r0, [r3, #0]
 8016e96:	4b78      	ldr	r3, [pc, #480]	; (8017078 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8016e98:	b202      	sxth	r2, r0
 8016e9a:	8819      	ldrh	r1, [r3, #0]
 8016e9c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016ea0:	b20f      	sxth	r7, r1
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	da07      	bge.n	8016eb6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8016ea6:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8016eaa:	4463      	add	r3, ip
 8016eac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8016eb6:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8016eba:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8016ebe:	1ad2      	subs	r2, r2, r3
 8016ec0:	4594      	cmp	ip, r2
 8016ec2:	bfc4      	itt	gt
 8016ec4:	1ac2      	subgt	r2, r0, r3
 8016ec6:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8016eca:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8016ece:	2a00      	cmp	r2, #0
 8016ed0:	da07      	bge.n	8016ee2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8016ed2:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8016ed6:	4462      	add	r2, ip
 8016ed8:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8016edc:	2200      	movs	r2, #0
 8016ede:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8016ee2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8016ee6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8016eea:	1abf      	subs	r7, r7, r2
 8016eec:	45bc      	cmp	ip, r7
 8016eee:	f8df c190 	ldr.w	ip, [pc, #400]	; 8017080 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8016ef2:	bfc8      	it	gt
 8016ef4:	1a8f      	subgt	r7, r1, r2
 8016ef6:	f89c c000 	ldrb.w	ip, [ip]
 8016efa:	bfc8      	it	gt
 8016efc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8016f00:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8016f04:	f1bc 0f00 	cmp.w	ip, #0
 8016f08:	d176      	bne.n	8016ff8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8016f0a:	4287      	cmp	r7, r0
 8016f0c:	bf14      	ite	ne
 8016f0e:	2100      	movne	r1, #0
 8016f10:	2101      	moveq	r1, #1
 8016f12:	2f00      	cmp	r7, #0
 8016f14:	9107      	str	r1, [sp, #28]
 8016f16:	dd73      	ble.n	8017000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8016f18:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8016f1c:	2900      	cmp	r1, #0
 8016f1e:	9104      	str	r1, [sp, #16]
 8016f20:	dd6e      	ble.n	8017000 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8016f22:	f8b9 1000 	ldrh.w	r1, [r9]
 8016f26:	a80e      	add	r0, sp, #56	; 0x38
 8016f28:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8016f2c:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8016f30:	1a5b      	subs	r3, r3, r1
 8016f32:	a910      	add	r1, sp, #64	; 0x40
 8016f34:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8016f38:	b21b      	sxth	r3, r3
 8016f3a:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8016f3e:	f8df a144 	ldr.w	sl, [pc, #324]	; 8017084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8016f42:	9305      	str	r3, [sp, #20]
 8016f44:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8016f48:	1ad2      	subs	r2, r2, r3
 8016f4a:	b213      	sxth	r3, r2
 8016f4c:	9306      	str	r3, [sp, #24]
 8016f4e:	9b05      	ldr	r3, [sp, #20]
 8016f50:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8016f54:	9b06      	ldr	r3, [sp, #24]
 8016f56:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8016f5a:	9b04      	ldr	r3, [sp, #16]
 8016f5c:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8016f60:	2300      	movs	r3, #0
 8016f62:	9310      	str	r3, [sp, #64]	; 0x40
 8016f64:	f7fa f90c 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8016f68:	4640      	mov	r0, r8
 8016f6a:	f7fa f8e1 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016f6e:	a810      	add	r0, sp, #64	; 0x40
 8016f70:	f7fa f8de 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8016f74:	4b41      	ldr	r3, [pc, #260]	; (801707c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8016f76:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	881b      	ldrh	r3, [r3, #0]
 8016f7e:	9308      	str	r3, [sp, #32]
 8016f80:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8016f84:	b21b      	sxth	r3, r3
 8016f86:	9303      	str	r3, [sp, #12]
 8016f88:	682b      	ldr	r3, [r5, #0]
 8016f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f8c:	4798      	blx	r3
 8016f8e:	9a03      	ldr	r2, [sp, #12]
 8016f90:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8016f94:	4681      	mov	r9, r0
 8016f96:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016f9a:	fb13 f302 	smulbb	r3, r3, r2
 8016f9e:	2203      	movs	r2, #3
 8016fa0:	f8da 0000 	ldr.w	r0, [sl]
 8016fa4:	fb15 3302 	smlabb	r3, r5, r2, r3
 8016fa8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8016faa:	920b      	str	r2, [sp, #44]	; 0x2c
 8016fac:	441d      	add	r5, r3
 8016fae:	6803      	ldr	r3, [r0, #0]
 8016fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fb2:	4798      	blx	r3
 8016fb4:	9009      	str	r0, [sp, #36]	; 0x24
 8016fb6:	f8da 0000 	ldr.w	r0, [sl]
 8016fba:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8016fbe:	6803      	ldr	r3, [r0, #0]
 8016fc0:	910a      	str	r1, [sp, #40]	; 0x28
 8016fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fc4:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8016fc8:	4798      	blx	r3
 8016fca:	f010 0f01 	tst.w	r0, #1
 8016fce:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016fd2:	d01e      	beq.n	8017012 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8016fd4:	f8da 0000 	ldr.w	r0, [sl]
 8016fd8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8016fdc:	6803      	ldr	r3, [r0, #0]
 8016fde:	9200      	str	r2, [sp, #0]
 8016fe0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8016fe2:	462b      	mov	r3, r5
 8016fe4:	e898 0006 	ldmia.w	r8, {r1, r2}
 8016fe8:	47b0      	blx	r6
 8016fea:	9b05      	ldr	r3, [sp, #20]
 8016fec:	80a7      	strh	r7, [r4, #4]
 8016fee:	8023      	strh	r3, [r4, #0]
 8016ff0:	9b06      	ldr	r3, [sp, #24]
 8016ff2:	8063      	strh	r3, [r4, #2]
 8016ff4:	9b04      	ldr	r3, [sp, #16]
 8016ff6:	e007      	b.n	8017008 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8016ff8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8016ffc:	4288      	cmp	r0, r1
 8016ffe:	e785      	b.n	8016f0c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8017000:	2300      	movs	r3, #0
 8017002:	8023      	strh	r3, [r4, #0]
 8017004:	8063      	strh	r3, [r4, #2]
 8017006:	80a3      	strh	r3, [r4, #4]
 8017008:	4620      	mov	r0, r4
 801700a:	80e3      	strh	r3, [r4, #6]
 801700c:	b013      	add	sp, #76	; 0x4c
 801700e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017012:	fb09 f606 	mul.w	r6, r9, r6
 8017016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017018:	fb11 6602 	smlabb	r6, r1, r2, r6
 801701c:	9a07      	ldr	r2, [sp, #28]
 801701e:	4433      	add	r3, r6
 8017020:	461e      	mov	r6, r3
 8017022:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017026:	b16a      	cbz	r2, 8017044 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017028:	9a08      	ldr	r2, [sp, #32]
 801702a:	4593      	cmp	fp, r2
 801702c:	d10a      	bne.n	8017044 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801702e:	f8da 0000 	ldr.w	r0, [sl]
 8017032:	fb09 f303 	mul.w	r3, r9, r3
 8017036:	4629      	mov	r1, r5
 8017038:	6802      	ldr	r2, [r0, #0]
 801703a:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801703e:	4632      	mov	r2, r6
 8017040:	47d0      	blx	sl
 8017042:	e7d2      	b.n	8016fea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017044:	9a03      	ldr	r2, [sp, #12]
 8017046:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8017084 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801704a:	fb02 5803 	mla	r8, r2, r3, r5
 801704e:	4545      	cmp	r5, r8
 8017050:	d2cb      	bcs.n	8016fea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017052:	f8db 0000 	ldr.w	r0, [fp]
 8017056:	4629      	mov	r1, r5
 8017058:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 801705c:	6802      	ldr	r2, [r0, #0]
 801705e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017062:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017066:	4632      	mov	r2, r6
 8017068:	47d0      	blx	sl
 801706a:	9b03      	ldr	r3, [sp, #12]
 801706c:	444e      	add	r6, r9
 801706e:	441d      	add	r5, r3
 8017070:	e7ed      	b.n	801704e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8017072:	bf00      	nop
 8017074:	2401aa30 	.word	0x2401aa30
 8017078:	2401aa32 	.word	0x2401aa32
 801707c:	2401aa36 	.word	0x2401aa36
 8017080:	2401aa34 	.word	0x2401aa34
 8017084:	2401aa3c 	.word	0x2401aa3c

08017088 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017088:	2200      	movs	r2, #0
 801708a:	490d      	ldr	r1, [pc, #52]	; (80170c0 <_ZN8touchgfx8LCD24bppC1Ev+0x38>)
 801708c:	6042      	str	r2, [r0, #4]
 801708e:	6001      	str	r1, [r0, #0]
 8017090:	6602      	str	r2, [r0, #96]	; 0x60
 8017092:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017096:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801709a:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801709e:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80170a2:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80170a6:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80170aa:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80170ae:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80170b2:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80170b6:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80170ba:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80170be:	4770      	bx	lr
 80170c0:	08020064 	.word	0x08020064

080170c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 80170c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c8:	b091      	sub	sp, #68	; 0x44
 80170ca:	4607      	mov	r7, r0
 80170cc:	4688      	mov	r8, r1
 80170ce:	6810      	ldr	r0, [r2, #0]
 80170d0:	6851      	ldr	r1, [r2, #4]
 80170d2:	ac0c      	add	r4, sp, #48	; 0x30
 80170d4:	4616      	mov	r6, r2
 80170d6:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 80170da:	4d64      	ldr	r5, [pc, #400]	; (801726c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 80170dc:	f8df a190 	ldr.w	sl, [pc, #400]	; 8017270 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 80170e0:	c403      	stmia	r4!, {r0, r1}
 80170e2:	6818      	ldr	r0, [r3, #0]
 80170e4:	ac0e      	add	r4, sp, #56	; 0x38
 80170e6:	6859      	ldr	r1, [r3, #4]
 80170e8:	c403      	stmia	r4!, {r0, r1}
 80170ea:	a80c      	add	r0, sp, #48	; 0x30
 80170ec:	f7fa f820 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80170f0:	4631      	mov	r1, r6
 80170f2:	a80e      	add	r0, sp, #56	; 0x38
 80170f4:	f7fa f844 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80170f8:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80170fc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017100:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017104:	6828      	ldr	r0, [r5, #0]
 8017106:	fb11 2103 	smlabb	r1, r1, r3, r2
 801710a:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 801710e:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017112:	440f      	add	r7, r1
 8017114:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017118:	440a      	add	r2, r1
 801711a:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801711e:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017122:	4413      	add	r3, r2
 8017124:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017128:	6803      	ldr	r3, [r0, #0]
 801712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801712c:	4798      	blx	r3
 801712e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017132:	6828      	ldr	r0, [r5, #0]
 8017134:	d01f      	beq.n	8017176 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8017136:	2201      	movs	r2, #1
 8017138:	2500      	movs	r5, #0
 801713a:	6801      	ldr	r1, [r0, #0]
 801713c:	b2a4      	uxth	r4, r4
 801713e:	b2b6      	uxth	r6, r6
 8017140:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017144:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8017148:	250b      	movs	r5, #11
 801714a:	9507      	str	r5, [sp, #28]
 801714c:	f8ba 5000 	ldrh.w	r5, [sl]
 8017150:	f8cd 9010 	str.w	r9, [sp, #16]
 8017154:	9602      	str	r6, [sp, #8]
 8017156:	9401      	str	r4, [sp, #4]
 8017158:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801715c:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017160:	9203      	str	r2, [sp, #12]
 8017162:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017166:	9200      	str	r2, [sp, #0]
 8017168:	4642      	mov	r2, r8
 801716a:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801716c:	4639      	mov	r1, r7
 801716e:	47a0      	blx	r4
 8017170:	b011      	add	sp, #68	; 0x44
 8017172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017176:	6803      	ldr	r3, [r0, #0]
 8017178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801717a:	4798      	blx	r3
 801717c:	f8ba 5000 	ldrh.w	r5, [sl]
 8017180:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017184:	f04f 0e04 	mov.w	lr, #4
 8017188:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801718c:	436e      	muls	r6, r5
 801718e:	fb05 2303 	mla	r3, r5, r3, r2
 8017192:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017196:	1b2d      	subs	r5, r5, r4
 8017198:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801719c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171a0:	4418      	add	r0, r3
 80171a2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 80171a6:	1982      	adds	r2, r0, r6
 80171a8:	1b1b      	subs	r3, r3, r4
 80171aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80171ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80171b0:	4290      	cmp	r0, r2
 80171b2:	d254      	bcs.n	801725e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 80171b4:	eb00 0a04 	add.w	sl, r0, r4
 80171b8:	4550      	cmp	r0, sl
 80171ba:	d24c      	bcs.n	8017256 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 80171bc:	f817 1b01 	ldrb.w	r1, [r7], #1
 80171c0:	fb1e e101 	smlabb	r1, lr, r1, lr
 80171c4:	eb08 0c01 	add.w	ip, r8, r1
 80171c8:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80171cc:	b173      	cbz	r3, 80171ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80171ce:	2bff      	cmp	r3, #255	; 0xff
 80171d0:	f818 b001 	ldrb.w	fp, [r8, r1]
 80171d4:	d10c      	bne.n	80171f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80171d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80171da:	d109      	bne.n	80171f0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 80171dc:	f880 b000 	strb.w	fp, [r0]
 80171e0:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80171e4:	7043      	strb	r3, [r0, #1]
 80171e6:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80171ea:	7083      	strb	r3, [r0, #2]
 80171ec:	3003      	adds	r0, #3
 80171ee:	e7e3      	b.n	80171b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 80171f0:	fb09 f103 	mul.w	r1, r9, r3
 80171f4:	1c4b      	adds	r3, r1, #1
 80171f6:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80171fa:	7801      	ldrb	r1, [r0, #0]
 80171fc:	121b      	asrs	r3, r3, #8
 80171fe:	b29e      	uxth	r6, r3
 8017200:	43db      	mvns	r3, r3
 8017202:	fb1b fb06 	smulbb	fp, fp, r6
 8017206:	b2db      	uxtb	r3, r3
 8017208:	fb01 b103 	mla	r1, r1, r3, fp
 801720c:	b289      	uxth	r1, r1
 801720e:	f101 0b01 	add.w	fp, r1, #1
 8017212:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017216:	f890 b001 	ldrb.w	fp, [r0, #1]
 801721a:	fb1b fb03 	smulbb	fp, fp, r3
 801721e:	1209      	asrs	r1, r1, #8
 8017220:	7001      	strb	r1, [r0, #0]
 8017222:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017226:	fb01 b106 	mla	r1, r1, r6, fp
 801722a:	b289      	uxth	r1, r1
 801722c:	f101 0b01 	add.w	fp, r1, #1
 8017230:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017234:	1209      	asrs	r1, r1, #8
 8017236:	7041      	strb	r1, [r0, #1]
 8017238:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801723c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017240:	fb1c f303 	smulbb	r3, ip, r3
 8017244:	fb01 3606 	mla	r6, r1, r6, r3
 8017248:	b2b6      	uxth	r6, r6
 801724a:	1c73      	adds	r3, r6, #1
 801724c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017250:	1236      	asrs	r6, r6, #8
 8017252:	7086      	strb	r6, [r0, #2]
 8017254:	e7ca      	b.n	80171ec <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017258:	4428      	add	r0, r5
 801725a:	441f      	add	r7, r3
 801725c:	e7a8      	b.n	80171b0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801725e:	4b03      	ldr	r3, [pc, #12]	; (801726c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017260:	6818      	ldr	r0, [r3, #0]
 8017262:	6803      	ldr	r3, [r0, #0]
 8017264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017266:	4798      	blx	r3
 8017268:	e782      	b.n	8017170 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801726a:	bf00      	nop
 801726c:	2401aa3c 	.word	0x2401aa3c
 8017270:	2401aa36 	.word	0x2401aa36

08017274 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017278:	b091      	sub	sp, #68	; 0x44
 801727a:	4680      	mov	r8, r0
 801727c:	460e      	mov	r6, r1
 801727e:	6810      	ldr	r0, [r2, #0]
 8017280:	6851      	ldr	r1, [r2, #4]
 8017282:	ad0c      	add	r5, sp, #48	; 0x30
 8017284:	4614      	mov	r4, r2
 8017286:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 801728a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8017424 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801728e:	f8df a198 	ldr.w	sl, [pc, #408]	; 8017428 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8017292:	c503      	stmia	r5!, {r0, r1}
 8017294:	6818      	ldr	r0, [r3, #0]
 8017296:	ad0e      	add	r5, sp, #56	; 0x38
 8017298:	6859      	ldr	r1, [r3, #4]
 801729a:	c503      	stmia	r5!, {r0, r1}
 801729c:	a80c      	add	r0, sp, #48	; 0x30
 801729e:	f7f9 ff47 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80172a2:	4621      	mov	r1, r4
 80172a4:	a80e      	add	r0, sp, #56	; 0x38
 80172a6:	f7f9 ff6b 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80172aa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80172ae:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80172b2:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80172b6:	f8d9 0000 	ldr.w	r0, [r9]
 80172ba:	fb11 2103 	smlabb	r1, r1, r3, r2
 80172be:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 80172c2:	eb08 0401 	add.w	r4, r8, r1
 80172c6:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 80172ca:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80172ce:	440a      	add	r2, r1
 80172d0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 80172d4:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 80172d8:	4413      	add	r3, r2
 80172da:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80172de:	6803      	ldr	r3, [r0, #0]
 80172e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80172e2:	4798      	blx	r3
 80172e4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80172e8:	f8d9 0000 	ldr.w	r0, [r9]
 80172ec:	d022      	beq.n	8017334 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 80172ee:	2200      	movs	r2, #0
 80172f0:	f04f 0c01 	mov.w	ip, #1
 80172f4:	6801      	ldr	r1, [r0, #0]
 80172f6:	b2ad      	uxth	r5, r5
 80172f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80172fc:	e9cd c208 	strd	ip, r2, [sp, #32]
 8017300:	f04f 0c0b 	mov.w	ip, #11
 8017304:	f8cd c01c 	str.w	ip, [sp, #28]
 8017308:	f8ba c000 	ldrh.w	ip, [sl]
 801730c:	9704      	str	r7, [sp, #16]
 801730e:	9502      	str	r5, [sp, #8]
 8017310:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8017314:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017318:	9203      	str	r2, [sp, #12]
 801731a:	fa1f f288 	uxth.w	r2, r8
 801731e:	9201      	str	r2, [sp, #4]
 8017320:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017324:	9200      	str	r2, [sp, #0]
 8017326:	4632      	mov	r2, r6
 8017328:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801732a:	4621      	mov	r1, r4
 801732c:	47a8      	blx	r5
 801732e:	b011      	add	sp, #68	; 0x44
 8017330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017334:	6803      	ldr	r3, [r0, #0]
 8017336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017338:	4798      	blx	r3
 801733a:	f8ba 2000 	ldrh.w	r2, [sl]
 801733e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017342:	f04f 0e03 	mov.w	lr, #3
 8017346:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801734a:	4355      	muls	r5, r2
 801734c:	fa1f fc87 	uxth.w	ip, r7
 8017350:	fb02 1303 	mla	r3, r2, r3, r1
 8017354:	eba2 0208 	sub.w	r2, r2, r8
 8017358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801735c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017360:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017364:	4418      	add	r0, r3
 8017366:	920b      	str	r2, [sp, #44]	; 0x2c
 8017368:	1943      	adds	r3, r0, r5
 801736a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801736e:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8017372:	eba2 0208 	sub.w	r2, r2, r8
 8017376:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801737a:	b2ad      	uxth	r5, r5
 801737c:	4298      	cmp	r0, r3
 801737e:	d24a      	bcs.n	8017416 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8017380:	eb00 0908 	add.w	r9, r0, r8
 8017384:	4621      	mov	r1, r4
 8017386:	4548      	cmp	r0, r9
 8017388:	460c      	mov	r4, r1
 801738a:	d240      	bcs.n	801740e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801738c:	f04f 0a04 	mov.w	sl, #4
 8017390:	7824      	ldrb	r4, [r4, #0]
 8017392:	2fff      	cmp	r7, #255	; 0xff
 8017394:	f101 0101 	add.w	r1, r1, #1
 8017398:	fb1e a404 	smlabb	r4, lr, r4, sl
 801739c:	eb06 0a04 	add.w	sl, r6, r4
 80173a0:	f816 b004 	ldrb.w	fp, [r6, r4]
 80173a4:	d02b      	beq.n	80173fe <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 80173a6:	7804      	ldrb	r4, [r0, #0]
 80173a8:	fb14 f405 	smulbb	r4, r4, r5
 80173ac:	fb0b 440c 	mla	r4, fp, ip, r4
 80173b0:	b2a4      	uxth	r4, r4
 80173b2:	f104 0b01 	add.w	fp, r4, #1
 80173b6:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80173ba:	f890 b001 	ldrb.w	fp, [r0, #1]
 80173be:	fb1b fb05 	smulbb	fp, fp, r5
 80173c2:	1224      	asrs	r4, r4, #8
 80173c4:	7004      	strb	r4, [r0, #0]
 80173c6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80173ca:	fb04 b40c 	mla	r4, r4, ip, fp
 80173ce:	b2a4      	uxth	r4, r4
 80173d0:	f104 0b01 	add.w	fp, r4, #1
 80173d4:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 80173d8:	1224      	asrs	r4, r4, #8
 80173da:	7044      	strb	r4, [r0, #1]
 80173dc:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80173e0:	f890 a002 	ldrb.w	sl, [r0, #2]
 80173e4:	fb1a fa05 	smulbb	sl, sl, r5
 80173e8:	fb04 a40c 	mla	r4, r4, ip, sl
 80173ec:	b2a4      	uxth	r4, r4
 80173ee:	f104 0a01 	add.w	sl, r4, #1
 80173f2:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 80173f6:	1224      	asrs	r4, r4, #8
 80173f8:	7084      	strb	r4, [r0, #2]
 80173fa:	3003      	adds	r0, #3
 80173fc:	e7c3      	b.n	8017386 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 80173fe:	f880 b000 	strb.w	fp, [r0]
 8017402:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017406:	7044      	strb	r4, [r0, #1]
 8017408:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801740c:	e7f4      	b.n	80173f8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801740e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017410:	4420      	add	r0, r4
 8017412:	188c      	adds	r4, r1, r2
 8017414:	e7b2      	b.n	801737c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8017416:	4b03      	ldr	r3, [pc, #12]	; (8017424 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8017418:	6818      	ldr	r0, [r3, #0]
 801741a:	6803      	ldr	r3, [r0, #0]
 801741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801741e:	4798      	blx	r3
 8017420:	e785      	b.n	801732e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8017422:	bf00      	nop
 8017424:	2401aa3c 	.word	0x2401aa3c
 8017428:	2401aa36 	.word	0x2401aa36

0801742c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801742c:	b4f0      	push	{r4, r5, r6, r7}
 801742e:	460c      	mov	r4, r1
 8017430:	4611      	mov	r1, r2
 8017432:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8017436:	461a      	mov	r2, r3
 8017438:	780f      	ldrb	r7, [r1, #0]
 801743a:	9b04      	ldr	r3, [sp, #16]
 801743c:	784e      	ldrb	r6, [r1, #1]
 801743e:	b11f      	cbz	r7, 8017448 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 8017440:	2f01      	cmp	r7, #1
 8017442:	d01d      	beq.n	8017480 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 8017444:	bcf0      	pop	{r4, r5, r6, r7}
 8017446:	4770      	bx	lr
 8017448:	2e03      	cmp	r6, #3
 801744a:	d8fb      	bhi.n	8017444 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801744c:	e8df f006 	tbb	[pc, r6]
 8017450:	16140702 	.word	0x16140702
 8017454:	9504      	str	r5, [sp, #16]
 8017456:	4620      	mov	r0, r4
 8017458:	bcf0      	pop	{r4, r5, r6, r7}
 801745a:	f7ff be33 	b.w	80170c4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801745e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017460:	2800      	cmp	r0, #0
 8017462:	d0ef      	beq.n	8017444 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8017464:	6806      	ldr	r6, [r0, #0]
 8017466:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801746a:	68f5      	ldr	r5, [r6, #12]
 801746c:	4613      	mov	r3, r2
 801746e:	46ac      	mov	ip, r5
 8017470:	460a      	mov	r2, r1
 8017472:	4621      	mov	r1, r4
 8017474:	bcf0      	pop	{r4, r5, r6, r7}
 8017476:	4760      	bx	ip
 8017478:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801747a:	e7f1      	b.n	8017460 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801747c:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801747e:	e7ef      	b.n	8017460 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8017480:	2e03      	cmp	r6, #3
 8017482:	d8df      	bhi.n	8017444 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8017484:	e8df f006 	tbb	[pc, r6]
 8017488:	110f0702 	.word	0x110f0702
 801748c:	9504      	str	r5, [sp, #16]
 801748e:	4620      	mov	r0, r4
 8017490:	bcf0      	pop	{r4, r5, r6, r7}
 8017492:	f7ff beef 	b.w	8017274 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8017496:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017498:	2800      	cmp	r0, #0
 801749a:	d0d3      	beq.n	8017444 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801749c:	6806      	ldr	r6, [r0, #0]
 801749e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 80174a2:	68b5      	ldr	r5, [r6, #8]
 80174a4:	e7e2      	b.n	801746c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 80174a6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80174a8:	e7f6      	b.n	8017498 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 80174aa:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80174ac:	e7f4      	b.n	8017498 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

080174b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80174b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174b4:	4605      	mov	r5, r0
 80174b6:	b08f      	sub	sp, #60	; 0x3c
 80174b8:	460c      	mov	r4, r1
 80174ba:	461f      	mov	r7, r3
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d052      	beq.n	8017566 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80174c0:	6808      	ldr	r0, [r1, #0]
 80174c2:	ab0a      	add	r3, sp, #40	; 0x28
 80174c4:	6849      	ldr	r1, [r1, #4]
 80174c6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8017690 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 80174ca:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8017694 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 80174ce:	c303      	stmia	r3!, {r0, r1}
 80174d0:	6810      	ldr	r0, [r2, #0]
 80174d2:	ab0c      	add	r3, sp, #48	; 0x30
 80174d4:	6851      	ldr	r1, [r2, #4]
 80174d6:	c303      	stmia	r3!, {r0, r1}
 80174d8:	a80a      	add	r0, sp, #40	; 0x28
 80174da:	f7f9 fe29 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80174de:	4621      	mov	r1, r4
 80174e0:	a80c      	add	r0, sp, #48	; 0x30
 80174e2:	f7f9 fe4d 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80174e6:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80174ea:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80174ee:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80174f2:	f8d8 0000 	ldr.w	r0, [r8]
 80174f6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80174fa:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 80174fe:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8017502:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 8017506:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801750a:	440a      	add	r2, r1
 801750c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8017510:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8017514:	4413      	add	r3, r2
 8017516:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801751a:	6803      	ldr	r3, [r0, #0]
 801751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801751e:	4798      	blx	r3
 8017520:	2fff      	cmp	r7, #255	; 0xff
 8017522:	d023      	beq.n	801756c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8017524:	f010 0f04 	tst.w	r0, #4
 8017528:	f8d8 0000 	ldr.w	r0, [r8]
 801752c:	d021      	beq.n	8017572 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801752e:	2100      	movs	r1, #0
 8017530:	f04f 0e01 	mov.w	lr, #1
 8017534:	f8d0 c000 	ldr.w	ip, [r0]
 8017538:	b2a4      	uxth	r4, r4
 801753a:	9106      	str	r1, [sp, #24]
 801753c:	b2b6      	uxth	r6, r6
 801753e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8017542:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8017546:	e9cd e107 	strd	lr, r1, [sp, #28]
 801754a:	f8b9 e000 	ldrh.w	lr, [r9]
 801754e:	9703      	str	r7, [sp, #12]
 8017550:	9401      	str	r4, [sp, #4]
 8017552:	9600      	str	r6, [sp, #0]
 8017554:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 8017558:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801755c:	9102      	str	r1, [sp, #8]
 801755e:	4629      	mov	r1, r5
 8017560:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8017564:	47a0      	blx	r4
 8017566:	b00f      	add	sp, #60	; 0x3c
 8017568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801756c:	f010 0f01 	tst.w	r0, #1
 8017570:	e7da      	b.n	8017528 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8017572:	6803      	ldr	r3, [r0, #0]
 8017574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017576:	4798      	blx	r3
 8017578:	f8b9 1000 	ldrh.w	r1, [r9]
 801757c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8017580:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8017584:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017588:	434c      	muls	r4, r1
 801758a:	2fff      	cmp	r7, #255	; 0xff
 801758c:	fb01 2303 	mla	r3, r1, r3, r2
 8017590:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017594:	eba1 0106 	sub.w	r1, r1, r6
 8017598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801759c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80175a0:	4418      	add	r0, r3
 80175a2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80175a6:	eba3 0606 	sub.w	r6, r3, r6
 80175aa:	4404      	add	r4, r0
 80175ac:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80175b0:	d04a      	beq.n	8017648 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80175b2:	43fa      	mvns	r2, r7
 80175b4:	b2bb      	uxth	r3, r7
 80175b6:	b2d7      	uxtb	r7, r2
 80175b8:	42a0      	cmp	r0, r4
 80175ba:	d263      	bcs.n	8017684 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80175bc:	eb00 0e0c 	add.w	lr, r0, ip
 80175c0:	4586      	cmp	lr, r0
 80175c2:	f100 0803 	add.w	r8, r0, #3
 80175c6:	d93a      	bls.n	801763e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80175c8:	f835 2b02 	ldrh.w	r2, [r5], #2
 80175cc:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80175d0:	00d0      	lsls	r0, r2, #3
 80175d2:	fb19 f907 	smulbb	r9, r9, r7
 80175d6:	b2c0      	uxtb	r0, r0
 80175d8:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80175dc:	fb00 9003 	mla	r0, r0, r3, r9
 80175e0:	b280      	uxth	r0, r0
 80175e2:	f100 0901 	add.w	r9, r0, #1
 80175e6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80175ea:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 80175ee:	fb19 f907 	smulbb	r9, r9, r7
 80175f2:	1200      	asrs	r0, r0, #8
 80175f4:	f808 0c03 	strb.w	r0, [r8, #-3]
 80175f8:	10d0      	asrs	r0, r2, #3
 80175fa:	1212      	asrs	r2, r2, #8
 80175fc:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8017600:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8017604:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8017608:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801760c:	fb00 9003 	mla	r0, r0, r3, r9
 8017610:	b280      	uxth	r0, r0
 8017612:	f100 0901 	add.w	r9, r0, #1
 8017616:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801761a:	1200      	asrs	r0, r0, #8
 801761c:	f808 0c02 	strb.w	r0, [r8, #-2]
 8017620:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8017624:	fb10 f007 	smulbb	r0, r0, r7
 8017628:	fb02 0203 	mla	r2, r2, r3, r0
 801762c:	b292      	uxth	r2, r2
 801762e:	1c50      	adds	r0, r2, #1
 8017630:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8017634:	4640      	mov	r0, r8
 8017636:	1212      	asrs	r2, r2, #8
 8017638:	f808 2c01 	strb.w	r2, [r8, #-1]
 801763c:	e7c0      	b.n	80175c0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801763e:	4408      	add	r0, r1
 8017640:	4435      	add	r5, r6
 8017642:	e7b9      	b.n	80175b8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8017644:	4408      	add	r0, r1
 8017646:	4435      	add	r5, r6
 8017648:	42a0      	cmp	r0, r4
 801764a:	d21b      	bcs.n	8017684 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801764c:	eb00 070c 	add.w	r7, r0, ip
 8017650:	42b8      	cmp	r0, r7
 8017652:	d2f7      	bcs.n	8017644 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8017654:	f835 3b02 	ldrh.w	r3, [r5], #2
 8017658:	3003      	adds	r0, #3
 801765a:	00da      	lsls	r2, r3, #3
 801765c:	b2d2      	uxtb	r2, r2
 801765e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8017662:	f800 2c03 	strb.w	r2, [r0, #-3]
 8017666:	10da      	asrs	r2, r3, #3
 8017668:	121b      	asrs	r3, r3, #8
 801766a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801766e:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8017672:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8017676:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801767a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801767e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8017682:	e7e5      	b.n	8017650 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8017684:	4b02      	ldr	r3, [pc, #8]	; (8017690 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8017686:	6818      	ldr	r0, [r3, #0]
 8017688:	6803      	ldr	r3, [r0, #0]
 801768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801768c:	4798      	blx	r3
 801768e:	e76a      	b.n	8017566 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8017690:	2401aa3c 	.word	0x2401aa3c
 8017694:	2401aa36 	.word	0x2401aa36

08017698 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8017698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801769c:	b08a      	sub	sp, #40	; 0x28
 801769e:	460d      	mov	r5, r1
 80176a0:	4604      	mov	r4, r0
 80176a2:	461e      	mov	r6, r3
 80176a4:	6808      	ldr	r0, [r1, #0]
 80176a6:	ab06      	add	r3, sp, #24
 80176a8:	6849      	ldr	r1, [r1, #4]
 80176aa:	4f5d      	ldr	r7, [pc, #372]	; (8017820 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80176ac:	c303      	stmia	r3!, {r0, r1}
 80176ae:	6810      	ldr	r0, [r2, #0]
 80176b0:	ab08      	add	r3, sp, #32
 80176b2:	6851      	ldr	r1, [r2, #4]
 80176b4:	c303      	stmia	r3!, {r0, r1}
 80176b6:	a806      	add	r0, sp, #24
 80176b8:	f7f9 fd3a 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80176bc:	4629      	mov	r1, r5
 80176be:	a808      	add	r0, sp, #32
 80176c0:	f7f9 fd5e 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80176c4:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80176c8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80176cc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80176d0:	6838      	ldr	r0, [r7, #0]
 80176d2:	fb11 2103 	smlabb	r1, r1, r3, r2
 80176d6:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80176da:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80176de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80176e2:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80176e6:	440a      	add	r2, r1
 80176e8:	f8ad 2020 	strh.w	r2, [sp, #32]
 80176ec:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80176f0:	4413      	add	r3, r2
 80176f2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80176f6:	6803      	ldr	r3, [r0, #0]
 80176f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176fa:	4798      	blx	r3
 80176fc:	2eff      	cmp	r6, #255	; 0xff
 80176fe:	d119      	bne.n	8017734 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8017700:	f010 0f20 	tst.w	r0, #32
 8017704:	6838      	ldr	r0, [r7, #0]
 8017706:	d018      	beq.n	801773a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 8017708:	b2ad      	uxth	r5, r5
 801770a:	2700      	movs	r7, #0
 801770c:	6801      	ldr	r1, [r0, #0]
 801770e:	9501      	str	r5, [sp, #4]
 8017710:	fa1f f588 	uxth.w	r5, r8
 8017714:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017718:	9500      	str	r5, [sp, #0]
 801771a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801771e:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8017722:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 8017726:	9602      	str	r6, [sp, #8]
 8017728:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801772a:	4621      	mov	r1, r4
 801772c:	47a8      	blx	r5
 801772e:	b00a      	add	sp, #40	; 0x28
 8017730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017734:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017738:	e7e4      	b.n	8017704 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801773a:	6803      	ldr	r3, [r0, #0]
 801773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801773e:	4798      	blx	r3
 8017740:	4b38      	ldr	r3, [pc, #224]	; (8017824 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8017742:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017746:	f8b3 c000 	ldrh.w	ip, [r3]
 801774a:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801774e:	fb0c f505 	mul.w	r5, ip, r5
 8017752:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 8017756:	fb0c 2303 	mla	r3, ip, r3, r2
 801775a:	ebac 0c08 	sub.w	ip, ip, r8
 801775e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017762:	ebae 0e08 	sub.w	lr, lr, r8
 8017766:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801776a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801776e:	4418      	add	r0, r3
 8017770:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8017774:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8017778:	4405      	add	r5, r0
 801777a:	42a8      	cmp	r0, r5
 801777c:	d24a      	bcs.n	8017814 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801777e:	eb00 0803 	add.w	r8, r0, r3
 8017782:	4540      	cmp	r0, r8
 8017784:	d243      	bcs.n	801780e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8017786:	78e2      	ldrb	r2, [r4, #3]
 8017788:	b15a      	cbz	r2, 80177a2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801778a:	2aff      	cmp	r2, #255	; 0xff
 801778c:	f894 9000 	ldrb.w	r9, [r4]
 8017790:	d10a      	bne.n	80177a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8017792:	2eff      	cmp	r6, #255	; 0xff
 8017794:	d108      	bne.n	80177a8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8017796:	f880 9000 	strb.w	r9, [r0]
 801779a:	7862      	ldrb	r2, [r4, #1]
 801779c:	7042      	strb	r2, [r0, #1]
 801779e:	78a2      	ldrb	r2, [r4, #2]
 80177a0:	7082      	strb	r2, [r0, #2]
 80177a2:	3003      	adds	r0, #3
 80177a4:	3404      	adds	r4, #4
 80177a6:	e7ec      	b.n	8017782 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80177a8:	4372      	muls	r2, r6
 80177aa:	1c51      	adds	r1, r2, #1
 80177ac:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80177b0:	1209      	asrs	r1, r1, #8
 80177b2:	fa1f fa81 	uxth.w	sl, r1
 80177b6:	43c9      	mvns	r1, r1
 80177b8:	fb19 f90a 	smulbb	r9, r9, sl
 80177bc:	b2ca      	uxtb	r2, r1
 80177be:	7801      	ldrb	r1, [r0, #0]
 80177c0:	fb01 9902 	mla	r9, r1, r2, r9
 80177c4:	fa1f f989 	uxth.w	r9, r9
 80177c8:	f109 0101 	add.w	r1, r9, #1
 80177cc:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80177d0:	ea4f 2929 	mov.w	r9, r9, asr #8
 80177d4:	f880 9000 	strb.w	r9, [r0]
 80177d8:	f890 9001 	ldrb.w	r9, [r0, #1]
 80177dc:	7861      	ldrb	r1, [r4, #1]
 80177de:	fb19 f902 	smulbb	r9, r9, r2
 80177e2:	fb01 910a 	mla	r1, r1, sl, r9
 80177e6:	b289      	uxth	r1, r1
 80177e8:	f101 0901 	add.w	r9, r1, #1
 80177ec:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 80177f0:	1209      	asrs	r1, r1, #8
 80177f2:	7041      	strb	r1, [r0, #1]
 80177f4:	7881      	ldrb	r1, [r0, #2]
 80177f6:	f894 9002 	ldrb.w	r9, [r4, #2]
 80177fa:	fb11 f202 	smulbb	r2, r1, r2
 80177fe:	fb09 220a 	mla	r2, r9, sl, r2
 8017802:	b292      	uxth	r2, r2
 8017804:	1c51      	adds	r1, r2, #1
 8017806:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801780a:	1212      	asrs	r2, r2, #8
 801780c:	e7c8      	b.n	80177a0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801780e:	4460      	add	r0, ip
 8017810:	4474      	add	r4, lr
 8017812:	e7b2      	b.n	801777a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8017814:	6838      	ldr	r0, [r7, #0]
 8017816:	6803      	ldr	r3, [r0, #0]
 8017818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801781a:	4798      	blx	r3
 801781c:	e787      	b.n	801772e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801781e:	bf00      	nop
 8017820:	2401aa3c 	.word	0x2401aa3c
 8017824:	2401aa36 	.word	0x2401aa36

08017828 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8017828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801782c:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8017830:	4607      	mov	r7, r0
 8017832:	460c      	mov	r4, r1
 8017834:	4692      	mov	sl, r2
 8017836:	4699      	mov	r9, r3
 8017838:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801783a:	b31d      	cbz	r5, 8017884 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 801783c:	4608      	mov	r0, r1
 801783e:	f7fc fb91 	bl	8013f64 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8017842:	4680      	mov	r8, r0
 8017844:	4620      	mov	r0, r4
 8017846:	f7fc fbc1 	bl	8013fcc <_ZNK8touchgfx6Bitmap9getHeightEv>
 801784a:	f8ad 000e 	strh.w	r0, [sp, #14]
 801784e:	4620      	mov	r0, r4
 8017850:	f8ad a008 	strh.w	sl, [sp, #8]
 8017854:	f8ad 900a 	strh.w	r9, [sp, #10]
 8017858:	f8ad 800c 	strh.w	r8, [sp, #12]
 801785c:	f7fc fcba 	bl	80141d4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8017860:	280b      	cmp	r0, #11
 8017862:	d80f      	bhi.n	8017884 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8017864:	e8df f000 	tbb	[pc, r0]
 8017868:	0e062a21 	.word	0x0e062a21
 801786c:	0e0e0e0e 	.word	0x0e0e0e0e
 8017870:	110e0e0e 	.word	0x110e0e0e
 8017874:	4620      	mov	r0, r4
 8017876:	f7fc fc29 	bl	80140cc <_ZNK8touchgfx6Bitmap7getDataEv>
 801787a:	462b      	mov	r3, r5
 801787c:	4632      	mov	r2, r6
 801787e:	a902      	add	r1, sp, #8
 8017880:	f7ff ff0a 	bl	8017698 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8017884:	b004      	add	sp, #16
 8017886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801788a:	4620      	mov	r0, r4
 801788c:	f7fc fc1e 	bl	80140cc <_ZNK8touchgfx6Bitmap7getDataEv>
 8017890:	4680      	mov	r8, r0
 8017892:	4620      	mov	r0, r4
 8017894:	f7fc fc4a 	bl	801412c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8017898:	ab02      	add	r3, sp, #8
 801789a:	4602      	mov	r2, r0
 801789c:	4641      	mov	r1, r8
 801789e:	4638      	mov	r0, r7
 80178a0:	e9cd 6500 	strd	r6, r5, [sp]
 80178a4:	f7ff fdc2 	bl	801742c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80178a8:	e7ec      	b.n	8017884 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80178aa:	4620      	mov	r0, r4
 80178ac:	f7fc fc0e 	bl	80140cc <_ZNK8touchgfx6Bitmap7getDataEv>
 80178b0:	462b      	mov	r3, r5
 80178b2:	4632      	mov	r2, r6
 80178b4:	a902      	add	r1, sp, #8
 80178b6:	f7ff fdfb 	bl	80174b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80178ba:	e7e3      	b.n	8017884 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	4620      	mov	r0, r4
 80178c0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80178c4:	f7fc fc02 	bl	80140cc <_ZNK8touchgfx6Bitmap7getDataEv>
 80178c8:	2300      	movs	r3, #0
 80178ca:	4601      	mov	r1, r0
 80178cc:	aa02      	add	r2, sp, #8
 80178ce:	4638      	mov	r0, r7
 80178d0:	e9cd 5300 	strd	r5, r3, [sp]
 80178d4:	4633      	mov	r3, r6
 80178d6:	47c0      	blx	r8
 80178d8:	e7d4      	b.n	8017884 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080178da <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80178da:	b4f0      	push	{r4, r5, r6, r7}
 80178dc:	4616      	mov	r6, r2
 80178de:	461c      	mov	r4, r3
 80178e0:	460d      	mov	r5, r1
 80178e2:	9a04      	ldr	r2, [sp, #16]
 80178e4:	2e01      	cmp	r6, #1
 80178e6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80178ea:	d00e      	beq.n	801790a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80178ec:	d303      	bcc.n	80178f6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80178ee:	2e02      	cmp	r6, #2
 80178f0:	d006      	beq.n	8017900 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 80178f2:	bcf0      	pop	{r4, r5, r6, r7}
 80178f4:	4770      	bx	lr
 80178f6:	4621      	mov	r1, r4
 80178f8:	4628      	mov	r0, r5
 80178fa:	bcf0      	pop	{r4, r5, r6, r7}
 80178fc:	f7ff bdd8 	b.w	80174b0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8017900:	4621      	mov	r1, r4
 8017902:	4628      	mov	r0, r5
 8017904:	bcf0      	pop	{r4, r5, r6, r7}
 8017906:	f7ff bec7 	b.w	8017698 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801790a:	6805      	ldr	r5, [r0, #0]
 801790c:	2600      	movs	r6, #0
 801790e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8017912:	68ed      	ldr	r5, [r5, #12]
 8017914:	4613      	mov	r3, r2
 8017916:	4622      	mov	r2, r4
 8017918:	46ac      	mov	ip, r5
 801791a:	bcf0      	pop	{r4, r5, r6, r7}
 801791c:	4760      	bx	ip
	...

08017920 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8017920:	b160      	cbz	r0, 801793c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8017922:	2903      	cmp	r1, #3
 8017924:	d818      	bhi.n	8017958 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8017926:	e8df f001 	tbb	[pc, r1]
 801792a:	1902      	.short	0x1902
 801792c:	1b06      	.short	0x1b06
 801792e:	4b0e      	ldr	r3, [pc, #56]	; (8017968 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8017930:	8818      	ldrh	r0, [r3, #0]
 8017932:	4240      	negs	r0, r0
 8017934:	4770      	bx	lr
 8017936:	4b0c      	ldr	r3, [pc, #48]	; (8017968 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8017938:	8818      	ldrh	r0, [r3, #0]
 801793a:	4770      	bx	lr
 801793c:	2903      	cmp	r1, #3
 801793e:	d80b      	bhi.n	8017958 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8017940:	a301      	add	r3, pc, #4	; (adr r3, 8017948 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8017942:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017946:	bf00      	nop
 8017948:	0801795d 	.word	0x0801795d
 801794c:	08017937 	.word	0x08017937
 8017950:	08017961 	.word	0x08017961
 8017954:	0801792f 	.word	0x0801792f
 8017958:	2000      	movs	r0, #0
 801795a:	4770      	bx	lr
 801795c:	2001      	movs	r0, #1
 801795e:	4770      	bx	lr
 8017960:	f04f 30ff 	mov.w	r0, #4294967295
 8017964:	4770      	bx	lr
 8017966:	bf00      	nop
 8017968:	2401aa36 	.word	0x2401aa36

0801796c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801796c:	b160      	cbz	r0, 8017988 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801796e:	2903      	cmp	r1, #3
 8017970:	d818      	bhi.n	80179a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8017972:	e8df f001 	tbb	[pc, r1]
 8017976:	0219      	.short	0x0219
 8017978:	051b      	.short	0x051b
 801797a:	4b0e      	ldr	r3, [pc, #56]	; (80179b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801797c:	8818      	ldrh	r0, [r3, #0]
 801797e:	4770      	bx	lr
 8017980:	4b0c      	ldr	r3, [pc, #48]	; (80179b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8017982:	8818      	ldrh	r0, [r3, #0]
 8017984:	4240      	negs	r0, r0
 8017986:	4770      	bx	lr
 8017988:	2903      	cmp	r1, #3
 801798a:	d80b      	bhi.n	80179a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801798c:	a301      	add	r3, pc, #4	; (adr r3, 8017994 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801798e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8017992:	bf00      	nop
 8017994:	0801797b 	.word	0x0801797b
 8017998:	080179ad 	.word	0x080179ad
 801799c:	08017981 	.word	0x08017981
 80179a0:	080179a9 	.word	0x080179a9
 80179a4:	2000      	movs	r0, #0
 80179a6:	4770      	bx	lr
 80179a8:	2001      	movs	r0, #1
 80179aa:	4770      	bx	lr
 80179ac:	f04f 30ff 	mov.w	r0, #4294967295
 80179b0:	4770      	bx	lr
 80179b2:	bf00      	nop
 80179b4:	2401aa36 	.word	0x2401aa36

080179b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80179b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179bc:	b097      	sub	sp, #92	; 0x5c
 80179be:	910b      	str	r1, [sp, #44]	; 0x2c
 80179c0:	a912      	add	r1, sp, #72	; 0x48
 80179c2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80179c6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80179ca:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80179ce:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80179d2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80179d6:	e881 000c 	stmia.w	r1, {r2, r3}
 80179da:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80179de:	930a      	str	r3, [sp, #40]	; 0x28
 80179e0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80179e4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80179e8:	9311      	str	r3, [sp, #68]	; 0x44
 80179ea:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80179ee:	798d      	ldrb	r5, [r1, #6]
 80179f0:	930c      	str	r3, [sp, #48]	; 0x30
 80179f2:	7b4b      	ldrb	r3, [r1, #13]
 80179f4:	0158      	lsls	r0, r3, #5
 80179f6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 80179fa:	4328      	orrs	r0, r5
 80179fc:	9009      	str	r0, [sp, #36]	; 0x24
 80179fe:	f000 817c 	beq.w	8017cfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017a02:	011b      	lsls	r3, r3, #4
 8017a04:	79c8      	ldrb	r0, [r1, #7]
 8017a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017a0a:	4303      	orrs	r3, r0
 8017a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8017a0e:	f000 8174 	beq.w	8017cfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017a12:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8017a16:	b29b      	uxth	r3, r3
 8017a18:	2f00      	cmp	r7, #0
 8017a1a:	f000 8116 	beq.w	8017c4a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8017a1e:	1aff      	subs	r7, r7, r3
 8017a20:	b2bf      	uxth	r7, r7
 8017a22:	043b      	lsls	r3, r7, #16
 8017a24:	d502      	bpl.n	8017a2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017a26:	1bf6      	subs	r6, r6, r7
 8017a28:	2700      	movs	r7, #0
 8017a2a:	b236      	sxth	r6, r6
 8017a2c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8017a30:	a812      	add	r0, sp, #72	; 0x48
 8017a32:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8017a36:	428e      	cmp	r6, r1
 8017a38:	b28b      	uxth	r3, r1
 8017a3a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8017a3e:	bfbf      	itttt	lt
 8017a40:	18ff      	addlt	r7, r7, r3
 8017a42:	1bbe      	sublt	r6, r7, r6
 8017a44:	b2b7      	uxthlt	r7, r6
 8017a46:	460e      	movlt	r6, r1
 8017a48:	8891      	ldrh	r1, [r2, #4]
 8017a4a:	440b      	add	r3, r1
 8017a4c:	4631      	mov	r1, r6
 8017a4e:	b21b      	sxth	r3, r3
 8017a50:	9310      	str	r3, [sp, #64]	; 0x40
 8017a52:	88d3      	ldrh	r3, [r2, #6]
 8017a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a56:	449a      	add	sl, r3
 8017a58:	fa0f f38a 	sxth.w	r3, sl
 8017a5c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8017a60:	930f      	str	r3, [sp, #60]	; 0x3c
 8017a62:	4bb5      	ldr	r3, [pc, #724]	; (8017d38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8017a64:	f893 b000 	ldrb.w	fp, [r3]
 8017a68:	f10b 3cff 	add.w	ip, fp, #4294967295
 8017a6c:	f1dc 0300 	rsbs	r3, ip, #0
 8017a70:	eb43 030c 	adc.w	r3, r3, ip
 8017a74:	930d      	str	r3, [sp, #52]	; 0x34
 8017a76:	464b      	mov	r3, r9
 8017a78:	f7f9 f9cf 	bl	8010e1a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8017a7c:	4631      	mov	r1, r6
 8017a7e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8017a82:	464b      	mov	r3, r9
 8017a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a86:	a812      	add	r0, sp, #72	; 0x48
 8017a88:	f7f9 f9e4 	bl	8010e54 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8017a8c:	a916      	add	r1, sp, #88	; 0x58
 8017a8e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8017a92:	a815      	add	r0, sp, #84	; 0x54
 8017a94:	f7f9 fb0a 	bl	80110ac <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8017a98:	f1b9 0f00 	cmp.w	r9, #0
 8017a9c:	f040 80d8 	bne.w	8017c50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8017aa0:	f1bb 0f01 	cmp.w	fp, #1
 8017aa4:	f040 80dc 	bne.w	8017c60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8017aa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017aaa:	b153      	cbz	r3, 8017ac2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8017aac:	2508      	movs	r5, #8
 8017aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ab0:	fb95 f3f8 	sdiv	r3, r5, r8
 8017ab4:	1e5d      	subs	r5, r3, #1
 8017ab6:	4415      	add	r5, r2
 8017ab8:	fb95 f5f3 	sdiv	r5, r5, r3
 8017abc:	fb15 f503 	smulbb	r5, r5, r3
 8017ac0:	b2ad      	uxth	r5, r5
 8017ac2:	b907      	cbnz	r7, 8017ac6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8017ac4:	b16c      	cbz	r4, 8017ae2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8017ac6:	fb04 7305 	mla	r3, r4, r5, r7
 8017aca:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017acc:	ebaa 0a04 	sub.w	sl, sl, r4
 8017ad0:	fb08 f303 	mul.w	r3, r8, r3
 8017ad4:	fa1f fa8a 	uxth.w	sl, sl
 8017ad8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8017adc:	f003 0407 	and.w	r4, r3, #7
 8017ae0:	9226      	str	r2, [sp, #152]	; 0x98
 8017ae2:	4649      	mov	r1, r9
 8017ae4:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017ae6:	f7ff ff1b 	bl	8017920 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8017aea:	4683      	mov	fp, r0
 8017aec:	980d      	ldr	r0, [sp, #52]	; 0x34
 8017aee:	f7ff ff3d 	bl	801796c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8017af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017af6:	4681      	mov	r9, r0
 8017af8:	1a9b      	subs	r3, r3, r2
 8017afa:	459a      	cmp	sl, r3
 8017afc:	bfa8      	it	ge
 8017afe:	469a      	movge	sl, r3
 8017b00:	f1ba 0f00 	cmp.w	sl, #0
 8017b04:	f340 80f9 	ble.w	8017cfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017b08:	1bf6      	subs	r6, r6, r7
 8017b0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017b0c:	1b9e      	subs	r6, r3, r6
 8017b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b10:	429e      	cmp	r6, r3
 8017b12:	bfd4      	ite	le
 8017b14:	ebc7 0706 	rsble	r7, r7, r6
 8017b18:	ebc7 0703 	rsbgt	r7, r7, r3
 8017b1c:	2f00      	cmp	r7, #0
 8017b1e:	f340 80ec 	ble.w	8017cfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017b22:	1bed      	subs	r5, r5, r7
 8017b24:	fb08 f305 	mul.w	r3, r8, r5
 8017b28:	930d      	str	r3, [sp, #52]	; 0x34
 8017b2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017b2c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8017b30:	930e      	str	r3, [sp, #56]	; 0x38
 8017b32:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017b34:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017b38:	930f      	str	r3, [sp, #60]	; 0x3c
 8017b3a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8017b3c:	b2db      	uxtb	r3, r3
 8017b3e:	9310      	str	r3, [sp, #64]	; 0x40
 8017b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	f040 80de 	bne.w	8017d04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8017b48:	4b7c      	ldr	r3, [pc, #496]	; (8017d3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8017b4a:	6818      	ldr	r0, [r3, #0]
 8017b4c:	6803      	ldr	r3, [r0, #0]
 8017b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b50:	4798      	blx	r3
 8017b52:	2301      	movs	r3, #1
 8017b54:	4a7a      	ldr	r2, [pc, #488]	; (8017d40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8017b56:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8017b5a:	fb07 9b1b 	mls	fp, r7, fp, r9
 8017b5e:	fa03 f308 	lsl.w	r3, r3, r8
 8017b62:	8811      	ldrh	r1, [r2, #0]
 8017b64:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8017b68:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8017b6c:	3b01      	subs	r3, #1
 8017b6e:	fb06 bb07 	mla	fp, r6, r7, fp
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	930a      	str	r3, [sp, #40]	; 0x28
 8017b76:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8017b7a:	fb01 2303 	mla	r3, r1, r3, r2
 8017b7e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b82:	18c3      	adds	r3, r0, r3
 8017b84:	9309      	str	r3, [sp, #36]	; 0x24
 8017b86:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017b88:	781a      	ldrb	r2, [r3, #0]
 8017b8a:	4122      	asrs	r2, r4
 8017b8c:	b2d2      	uxtb	r2, r2
 8017b8e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8017b92:	f0c0 80d7 	bcc.w	8017d44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8017b96:	46be      	mov	lr, r7
 8017b98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017b9a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8017b9e:	f0c0 80ba 	bcc.w	8017d16 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8017ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ba4:	4013      	ands	r3, r2
 8017ba6:	d041      	beq.n	8017c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8017ba8:	20ff      	movs	r0, #255	; 0xff
 8017baa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017bac:	fb90 f5f5 	sdiv	r5, r0, r5
 8017bb0:	436b      	muls	r3, r5
 8017bb2:	2bfe      	cmp	r3, #254	; 0xfe
 8017bb4:	dd03      	ble.n	8017bbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8017bb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017bb8:	4285      	cmp	r5, r0
 8017bba:	f000 80a5 	beq.w	8017d08 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8017bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017bc0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017bc2:	fb15 f303 	smulbb	r3, r5, r3
 8017bc6:	b29b      	uxth	r3, r3
 8017bc8:	1c5d      	adds	r5, r3, #1
 8017bca:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8017bce:	780d      	ldrb	r5, [r1, #0]
 8017bd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8017bd4:	fa1f fc83 	uxth.w	ip, r3
 8017bd8:	43db      	mvns	r3, r3
 8017bda:	fb10 f90c 	smulbb	r9, r0, ip
 8017bde:	b2db      	uxtb	r3, r3
 8017be0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017be2:	fb05 9503 	mla	r5, r5, r3, r9
 8017be6:	b2ad      	uxth	r5, r5
 8017be8:	f105 0901 	add.w	r9, r5, #1
 8017bec:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017bf0:	fb10 f90c 	smulbb	r9, r0, ip
 8017bf4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017bf6:	122d      	asrs	r5, r5, #8
 8017bf8:	fb10 fc0c 	smulbb	ip, r0, ip
 8017bfc:	700d      	strb	r5, [r1, #0]
 8017bfe:	784d      	ldrb	r5, [r1, #1]
 8017c00:	fb05 9503 	mla	r5, r5, r3, r9
 8017c04:	b2ad      	uxth	r5, r5
 8017c06:	f105 0901 	add.w	r9, r5, #1
 8017c0a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8017c0e:	122d      	asrs	r5, r5, #8
 8017c10:	704d      	strb	r5, [r1, #1]
 8017c12:	788d      	ldrb	r5, [r1, #2]
 8017c14:	fb05 cc03 	mla	ip, r5, r3, ip
 8017c18:	fa1f fc8c 	uxth.w	ip, ip
 8017c1c:	f10c 0301 	add.w	r3, ip, #1
 8017c20:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8017c24:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8017c28:	f881 c002 	strb.w	ip, [r1, #2]
 8017c2c:	4444      	add	r4, r8
 8017c2e:	4431      	add	r1, r6
 8017c30:	b2a4      	uxth	r4, r4
 8017c32:	2c07      	cmp	r4, #7
 8017c34:	bf89      	itett	hi
 8017c36:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8017c38:	fa42 f208 	asrls.w	r2, r2, r8
 8017c3c:	2400      	movhi	r4, #0
 8017c3e:	785a      	ldrbhi	r2, [r3, #1]
 8017c40:	bf8a      	itet	hi
 8017c42:	3301      	addhi	r3, #1
 8017c44:	b2d2      	uxtbls	r2, r2
 8017c46:	9326      	strhi	r3, [sp, #152]	; 0x98
 8017c48:	e7a7      	b.n	8017b9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8017c4a:	441e      	add	r6, r3
 8017c4c:	b236      	sxth	r6, r6
 8017c4e:	e6ed      	b.n	8017a2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8017c50:	f1b9 0f01 	cmp.w	r9, #1
 8017c54:	f47f af28 	bne.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017c58:	f1bb 0f01 	cmp.w	fp, #1
 8017c5c:	f47f af24 	bne.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017c60:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 8017d3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8017c64:	f8db 0000 	ldr.w	r0, [fp]
 8017c68:	6803      	ldr	r3, [r0, #0]
 8017c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c6c:	4798      	blx	r3
 8017c6e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8017c72:	465a      	mov	r2, fp
 8017c74:	d006      	beq.n	8017c84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8017c76:	f1b8 0f04 	cmp.w	r8, #4
 8017c7a:	d141      	bne.n	8017d00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8017c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017c7e:	3300      	adds	r3, #0
 8017c80:	bf18      	it	ne
 8017c82:	2301      	movne	r3, #1
 8017c84:	0580      	lsls	r0, r0, #22
 8017c86:	d566      	bpl.n	8017d56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017c88:	f1b8 0f08 	cmp.w	r8, #8
 8017c8c:	d163      	bne.n	8017d56 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	bf0c      	ite	eq
 8017c92:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8017c96:	f44f 7180 	movne.w	r1, #256	; 0x100
 8017c9a:	2f00      	cmp	r7, #0
 8017c9c:	f47f af04 	bne.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017ca0:	2c00      	cmp	r4, #0
 8017ca2:	f47f af01 	bne.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ca8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017caa:	18f3      	adds	r3, r6, r3
 8017cac:	4283      	cmp	r3, r0
 8017cae:	f73f aefb 	bgt.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017cb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017cb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cb6:	4403      	add	r3, r0
 8017cb8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8017cba:	4283      	cmp	r3, r0
 8017cbc:	f73f aef4 	bgt.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017cc0:	f1b8 0f08 	cmp.w	r8, #8
 8017cc4:	6810      	ldr	r0, [r2, #0]
 8017cc6:	f04f 0600 	mov.w	r6, #0
 8017cca:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8017cce:	bf18      	it	ne
 8017cd0:	3501      	addne	r5, #1
 8017cd2:	6804      	ldr	r4, [r0, #0]
 8017cd4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8017cd8:	bf18      	it	ne
 8017cda:	f025 0501 	bicne.w	r5, r5, #1
 8017cde:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8017ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ce4:	bf18      	it	ne
 8017ce6:	b2ad      	uxthne	r5, r5
 8017ce8:	9104      	str	r1, [sp, #16]
 8017cea:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8017cec:	e9cd 5a00 	strd	r5, sl, [sp]
 8017cf0:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8017cf4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8017cf6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8017cf8:	47a0      	blx	r4
 8017cfa:	b017      	add	sp, #92	; 0x5c
 8017cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d00:	2300      	movs	r3, #0
 8017d02:	e7bf      	b.n	8017c84 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8017d04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8017d06:	e724      	b.n	8017b52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8017d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d0a:	700b      	strb	r3, [r1, #0]
 8017d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017d0e:	704b      	strb	r3, [r1, #1]
 8017d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d12:	708b      	strb	r3, [r1, #2]
 8017d14:	e78a      	b.n	8017c2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8017d16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017d18:	b153      	cbz	r3, 8017d30 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8017d1a:	441c      	add	r4, r3
 8017d1c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017d1e:	b2a4      	uxth	r4, r4
 8017d20:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8017d24:	f004 0407 	and.w	r4, r4, #7
 8017d28:	781a      	ldrb	r2, [r3, #0]
 8017d2a:	9326      	str	r3, [sp, #152]	; 0x98
 8017d2c:	4122      	asrs	r2, r4
 8017d2e:	b2d2      	uxtb	r2, r2
 8017d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d32:	445b      	add	r3, fp
 8017d34:	9309      	str	r3, [sp, #36]	; 0x24
 8017d36:	e72a      	b.n	8017b8e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8017d38:	2401aa34 	.word	0x2401aa34
 8017d3c:	2401aa3c 	.word	0x2401aa3c
 8017d40:	2401aa36 	.word	0x2401aa36
 8017d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d1d7      	bne.n	8017cfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017d4a:	4b06      	ldr	r3, [pc, #24]	; (8017d64 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8017d4c:	6818      	ldr	r0, [r3, #0]
 8017d4e:	6803      	ldr	r3, [r0, #0]
 8017d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d52:	4798      	blx	r3
 8017d54:	e7d1      	b.n	8017cfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	f43f aea6 	beq.w	8017aa8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8017d5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8017d60:	e79b      	b.n	8017c9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8017d62:	bf00      	nop
 8017d64:	2401aa3c 	.word	0x2401aa3c

08017d68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4c15      	ldr	r4, [pc, #84]	; (8017dc0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8017d6c:	4605      	mov	r5, r0
 8017d6e:	7823      	ldrb	r3, [r4, #0]
 8017d70:	f3bf 8f5b 	dmb	ish
 8017d74:	07da      	lsls	r2, r3, #31
 8017d76:	d40b      	bmi.n	8017d90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f005 fb4c 	bl	801d416 <__cxa_guard_acquire>
 8017d7e:	b138      	cbz	r0, 8017d90 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8017d80:	4620      	mov	r0, r4
 8017d82:	f005 fb54 	bl	801d42e <__cxa_guard_release>
 8017d86:	4a0f      	ldr	r2, [pc, #60]	; (8017dc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8017d88:	490f      	ldr	r1, [pc, #60]	; (8017dc8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8017d8a:	4810      	ldr	r0, [pc, #64]	; (8017dcc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8017d8c:	f005 fb3c 	bl	801d408 <__aeabi_atexit>
 8017d90:	4c0f      	ldr	r4, [pc, #60]	; (8017dd0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8017d92:	7823      	ldrb	r3, [r4, #0]
 8017d94:	f3bf 8f5b 	dmb	ish
 8017d98:	07db      	lsls	r3, r3, #31
 8017d9a:	d40b      	bmi.n	8017db4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8017d9c:	4620      	mov	r0, r4
 8017d9e:	f005 fb3a 	bl	801d416 <__cxa_guard_acquire>
 8017da2:	b138      	cbz	r0, 8017db4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8017da4:	4620      	mov	r0, r4
 8017da6:	f005 fb42 	bl	801d42e <__cxa_guard_release>
 8017daa:	4a06      	ldr	r2, [pc, #24]	; (8017dc4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8017dac:	4909      	ldr	r1, [pc, #36]	; (8017dd4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8017dae:	480a      	ldr	r0, [pc, #40]	; (8017dd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8017db0:	f005 fb2a 	bl	801d408 <__aeabi_atexit>
 8017db4:	4b05      	ldr	r3, [pc, #20]	; (8017dcc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8017db6:	612b      	str	r3, [r5, #16]
 8017db8:	4b07      	ldr	r3, [pc, #28]	; (8017dd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8017dba:	616b      	str	r3, [r5, #20]
 8017dbc:	bd38      	pop	{r3, r4, r5, pc}
 8017dbe:	bf00      	nop
 8017dc0:	2401ab14 	.word	0x2401ab14
 8017dc4:	24000000 	.word	0x24000000
 8017dc8:	08015bb1 	.word	0x08015bb1
 8017dcc:	2400006c 	.word	0x2400006c
 8017dd0:	2401ab18 	.word	0x2401ab18
 8017dd4:	08015baf 	.word	0x08015baf
 8017dd8:	24000070 	.word	0x24000070

08017ddc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8017ddc:	b538      	push	{r3, r4, r5, lr}
 8017dde:	4c15      	ldr	r4, [pc, #84]	; (8017e34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8017de0:	4605      	mov	r5, r0
 8017de2:	7823      	ldrb	r3, [r4, #0]
 8017de4:	f3bf 8f5b 	dmb	ish
 8017de8:	07da      	lsls	r2, r3, #31
 8017dea:	d40b      	bmi.n	8017e04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8017dec:	4620      	mov	r0, r4
 8017dee:	f005 fb12 	bl	801d416 <__cxa_guard_acquire>
 8017df2:	b138      	cbz	r0, 8017e04 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8017df4:	4620      	mov	r0, r4
 8017df6:	f005 fb1a 	bl	801d42e <__cxa_guard_release>
 8017dfa:	4a0f      	ldr	r2, [pc, #60]	; (8017e38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8017dfc:	490f      	ldr	r1, [pc, #60]	; (8017e3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8017dfe:	4810      	ldr	r0, [pc, #64]	; (8017e40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8017e00:	f005 fb02 	bl	801d408 <__aeabi_atexit>
 8017e04:	4c0f      	ldr	r4, [pc, #60]	; (8017e44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8017e06:	7823      	ldrb	r3, [r4, #0]
 8017e08:	f3bf 8f5b 	dmb	ish
 8017e0c:	07db      	lsls	r3, r3, #31
 8017e0e:	d40b      	bmi.n	8017e28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017e10:	4620      	mov	r0, r4
 8017e12:	f005 fb00 	bl	801d416 <__cxa_guard_acquire>
 8017e16:	b138      	cbz	r0, 8017e28 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8017e18:	4620      	mov	r0, r4
 8017e1a:	f005 fb08 	bl	801d42e <__cxa_guard_release>
 8017e1e:	4a06      	ldr	r2, [pc, #24]	; (8017e38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8017e20:	4909      	ldr	r1, [pc, #36]	; (8017e48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8017e22:	480a      	ldr	r0, [pc, #40]	; (8017e4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8017e24:	f005 faf0 	bl	801d408 <__aeabi_atexit>
 8017e28:	4b05      	ldr	r3, [pc, #20]	; (8017e40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8017e2a:	60ab      	str	r3, [r5, #8]
 8017e2c:	4b07      	ldr	r3, [pc, #28]	; (8017e4c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8017e2e:	60eb      	str	r3, [r5, #12]
 8017e30:	bd38      	pop	{r3, r4, r5, pc}
 8017e32:	bf00      	nop
 8017e34:	2401aaf4 	.word	0x2401aaf4
 8017e38:	24000000 	.word	0x24000000
 8017e3c:	08015bb5 	.word	0x08015bb5
 8017e40:	2400004c 	.word	0x2400004c
 8017e44:	2401aaf8 	.word	0x2401aaf8
 8017e48:	08015bb3 	.word	0x08015bb3
 8017e4c:	24000050 	.word	0x24000050

08017e50 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8017e50:	b510      	push	{r4, lr}
 8017e52:	4604      	mov	r4, r0
 8017e54:	f7ff ff88 	bl	8017d68 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8017e58:	4620      	mov	r0, r4
 8017e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e5e:	f7ff bfbd 	b.w	8017ddc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08017e64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8017e64:	b538      	push	{r3, r4, r5, lr}
 8017e66:	4c15      	ldr	r4, [pc, #84]	; (8017ebc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8017e68:	4605      	mov	r5, r0
 8017e6a:	7823      	ldrb	r3, [r4, #0]
 8017e6c:	f3bf 8f5b 	dmb	ish
 8017e70:	07da      	lsls	r2, r3, #31
 8017e72:	d40b      	bmi.n	8017e8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8017e74:	4620      	mov	r0, r4
 8017e76:	f005 face 	bl	801d416 <__cxa_guard_acquire>
 8017e7a:	b138      	cbz	r0, 8017e8c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f005 fad6 	bl	801d42e <__cxa_guard_release>
 8017e82:	4a0f      	ldr	r2, [pc, #60]	; (8017ec0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8017e84:	490f      	ldr	r1, [pc, #60]	; (8017ec4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8017e86:	4810      	ldr	r0, [pc, #64]	; (8017ec8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8017e88:	f005 fabe 	bl	801d408 <__aeabi_atexit>
 8017e8c:	4c0f      	ldr	r4, [pc, #60]	; (8017ecc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 8017e8e:	7823      	ldrb	r3, [r4, #0]
 8017e90:	f3bf 8f5b 	dmb	ish
 8017e94:	07db      	lsls	r3, r3, #31
 8017e96:	d40b      	bmi.n	8017eb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f005 fabc 	bl	801d416 <__cxa_guard_acquire>
 8017e9e:	b138      	cbz	r0, 8017eb0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f005 fac4 	bl	801d42e <__cxa_guard_release>
 8017ea6:	4a06      	ldr	r2, [pc, #24]	; (8017ec0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8017ea8:	4909      	ldr	r1, [pc, #36]	; (8017ed0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 8017eaa:	480a      	ldr	r0, [pc, #40]	; (8017ed4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8017eac:	f005 faac 	bl	801d408 <__aeabi_atexit>
 8017eb0:	4b05      	ldr	r3, [pc, #20]	; (8017ec8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8017eb2:	622b      	str	r3, [r5, #32]
 8017eb4:	4b07      	ldr	r3, [pc, #28]	; (8017ed4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 8017eb6:	626b      	str	r3, [r5, #36]	; 0x24
 8017eb8:	bd38      	pop	{r3, r4, r5, pc}
 8017eba:	bf00      	nop
 8017ebc:	2401ab1c 	.word	0x2401ab1c
 8017ec0:	24000000 	.word	0x24000000
 8017ec4:	08015ba9 	.word	0x08015ba9
 8017ec8:	24000074 	.word	0x24000074
 8017ecc:	2401ab20 	.word	0x2401ab20
 8017ed0:	08015ba7 	.word	0x08015ba7
 8017ed4:	24000078 	.word	0x24000078

08017ed8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	4c15      	ldr	r4, [pc, #84]	; (8017f30 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 8017edc:	4605      	mov	r5, r0
 8017ede:	7823      	ldrb	r3, [r4, #0]
 8017ee0:	f3bf 8f5b 	dmb	ish
 8017ee4:	07da      	lsls	r2, r3, #31
 8017ee6:	d40b      	bmi.n	8017f00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8017ee8:	4620      	mov	r0, r4
 8017eea:	f005 fa94 	bl	801d416 <__cxa_guard_acquire>
 8017eee:	b138      	cbz	r0, 8017f00 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	f005 fa9c 	bl	801d42e <__cxa_guard_release>
 8017ef6:	4a0f      	ldr	r2, [pc, #60]	; (8017f34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017ef8:	490f      	ldr	r1, [pc, #60]	; (8017f38 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8017efa:	4810      	ldr	r0, [pc, #64]	; (8017f3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8017efc:	f005 fa84 	bl	801d408 <__aeabi_atexit>
 8017f00:	4c0f      	ldr	r4, [pc, #60]	; (8017f40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8017f02:	7823      	ldrb	r3, [r4, #0]
 8017f04:	f3bf 8f5b 	dmb	ish
 8017f08:	07db      	lsls	r3, r3, #31
 8017f0a:	d40b      	bmi.n	8017f24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	f005 fa82 	bl	801d416 <__cxa_guard_acquire>
 8017f12:	b138      	cbz	r0, 8017f24 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8017f14:	4620      	mov	r0, r4
 8017f16:	f005 fa8a 	bl	801d42e <__cxa_guard_release>
 8017f1a:	4a06      	ldr	r2, [pc, #24]	; (8017f34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8017f1c:	4909      	ldr	r1, [pc, #36]	; (8017f44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8017f1e:	480a      	ldr	r0, [pc, #40]	; (8017f48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017f20:	f005 fa72 	bl	801d408 <__aeabi_atexit>
 8017f24:	4b05      	ldr	r3, [pc, #20]	; (8017f3c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8017f26:	61ab      	str	r3, [r5, #24]
 8017f28:	4b07      	ldr	r3, [pc, #28]	; (8017f48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8017f2a:	61eb      	str	r3, [r5, #28]
 8017f2c:	bd38      	pop	{r3, r4, r5, pc}
 8017f2e:	bf00      	nop
 8017f30:	2401aafc 	.word	0x2401aafc
 8017f34:	24000000 	.word	0x24000000
 8017f38:	08015bad 	.word	0x08015bad
 8017f3c:	24000054 	.word	0x24000054
 8017f40:	2401ab00 	.word	0x2401ab00
 8017f44:	08015bab 	.word	0x08015bab
 8017f48:	24000058 	.word	0x24000058

08017f4c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8017f4c:	b510      	push	{r4, lr}
 8017f4e:	4604      	mov	r4, r0
 8017f50:	f7ff ff88 	bl	8017e64 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8017f54:	4620      	mov	r0, r4
 8017f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f5a:	f7ff bfbd 	b.w	8017ed8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08017f60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8017f60:	b538      	push	{r3, r4, r5, lr}
 8017f62:	4c15      	ldr	r4, [pc, #84]	; (8017fb8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8017f64:	4605      	mov	r5, r0
 8017f66:	7823      	ldrb	r3, [r4, #0]
 8017f68:	f3bf 8f5b 	dmb	ish
 8017f6c:	07da      	lsls	r2, r3, #31
 8017f6e:	d40b      	bmi.n	8017f88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8017f70:	4620      	mov	r0, r4
 8017f72:	f005 fa50 	bl	801d416 <__cxa_guard_acquire>
 8017f76:	b138      	cbz	r0, 8017f88 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8017f78:	4620      	mov	r0, r4
 8017f7a:	f005 fa58 	bl	801d42e <__cxa_guard_release>
 8017f7e:	4a0f      	ldr	r2, [pc, #60]	; (8017fbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8017f80:	490f      	ldr	r1, [pc, #60]	; (8017fc0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8017f82:	4810      	ldr	r0, [pc, #64]	; (8017fc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8017f84:	f005 fa40 	bl	801d408 <__aeabi_atexit>
 8017f88:	4c0f      	ldr	r4, [pc, #60]	; (8017fc8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8017f8a:	7823      	ldrb	r3, [r4, #0]
 8017f8c:	f3bf 8f5b 	dmb	ish
 8017f90:	07db      	lsls	r3, r3, #31
 8017f92:	d40b      	bmi.n	8017fac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8017f94:	4620      	mov	r0, r4
 8017f96:	f005 fa3e 	bl	801d416 <__cxa_guard_acquire>
 8017f9a:	b138      	cbz	r0, 8017fac <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8017f9c:	4620      	mov	r0, r4
 8017f9e:	f005 fa46 	bl	801d42e <__cxa_guard_release>
 8017fa2:	4a06      	ldr	r2, [pc, #24]	; (8017fbc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8017fa4:	4909      	ldr	r1, [pc, #36]	; (8017fcc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8017fa6:	480a      	ldr	r0, [pc, #40]	; (8017fd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8017fa8:	f005 fa2e 	bl	801d408 <__aeabi_atexit>
 8017fac:	4b05      	ldr	r3, [pc, #20]	; (8017fc4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8017fae:	632b      	str	r3, [r5, #48]	; 0x30
 8017fb0:	4b07      	ldr	r3, [pc, #28]	; (8017fd0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8017fb2:	636b      	str	r3, [r5, #52]	; 0x34
 8017fb4:	bd38      	pop	{r3, r4, r5, pc}
 8017fb6:	bf00      	nop
 8017fb8:	2401ab04 	.word	0x2401ab04
 8017fbc:	24000000 	.word	0x24000000
 8017fc0:	08015ba1 	.word	0x08015ba1
 8017fc4:	2400005c 	.word	0x2400005c
 8017fc8:	2401ab08 	.word	0x2401ab08
 8017fcc:	08015b9f 	.word	0x08015b9f
 8017fd0:	24000060 	.word	0x24000060

08017fd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8017fd4:	b538      	push	{r3, r4, r5, lr}
 8017fd6:	4c15      	ldr	r4, [pc, #84]	; (801802c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8017fd8:	4605      	mov	r5, r0
 8017fda:	7823      	ldrb	r3, [r4, #0]
 8017fdc:	f3bf 8f5b 	dmb	ish
 8017fe0:	07da      	lsls	r2, r3, #31
 8017fe2:	d40b      	bmi.n	8017ffc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	f005 fa16 	bl	801d416 <__cxa_guard_acquire>
 8017fea:	b138      	cbz	r0, 8017ffc <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8017fec:	4620      	mov	r0, r4
 8017fee:	f005 fa1e 	bl	801d42e <__cxa_guard_release>
 8017ff2:	4a0f      	ldr	r2, [pc, #60]	; (8018030 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8017ff4:	490f      	ldr	r1, [pc, #60]	; (8018034 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8017ff6:	4810      	ldr	r0, [pc, #64]	; (8018038 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8017ff8:	f005 fa06 	bl	801d408 <__aeabi_atexit>
 8017ffc:	4c0f      	ldr	r4, [pc, #60]	; (801803c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8017ffe:	7823      	ldrb	r3, [r4, #0]
 8018000:	f3bf 8f5b 	dmb	ish
 8018004:	07db      	lsls	r3, r3, #31
 8018006:	d40b      	bmi.n	8018020 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018008:	4620      	mov	r0, r4
 801800a:	f005 fa04 	bl	801d416 <__cxa_guard_acquire>
 801800e:	b138      	cbz	r0, 8018020 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018010:	4620      	mov	r0, r4
 8018012:	f005 fa0c 	bl	801d42e <__cxa_guard_release>
 8018016:	4a06      	ldr	r2, [pc, #24]	; (8018030 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018018:	4909      	ldr	r1, [pc, #36]	; (8018040 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801801a:	480a      	ldr	r0, [pc, #40]	; (8018044 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801801c:	f005 f9f4 	bl	801d408 <__aeabi_atexit>
 8018020:	4b05      	ldr	r3, [pc, #20]	; (8018038 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018022:	62ab      	str	r3, [r5, #40]	; 0x28
 8018024:	4b07      	ldr	r3, [pc, #28]	; (8018044 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018026:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018028:	bd38      	pop	{r3, r4, r5, pc}
 801802a:	bf00      	nop
 801802c:	2401aadc 	.word	0x2401aadc
 8018030:	24000000 	.word	0x24000000
 8018034:	08015ba5 	.word	0x08015ba5
 8018038:	24000034 	.word	0x24000034
 801803c:	2401aae0 	.word	0x2401aae0
 8018040:	08015ba3 	.word	0x08015ba3
 8018044:	24000038 	.word	0x24000038

08018048 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018048:	b510      	push	{r4, lr}
 801804a:	4604      	mov	r4, r0
 801804c:	f7ff ff88 	bl	8017f60 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018050:	4620      	mov	r0, r4
 8018052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018056:	f7ff bfbd 	b.w	8017fd4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801805c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801805c:	b538      	push	{r3, r4, r5, lr}
 801805e:	4c15      	ldr	r4, [pc, #84]	; (80180b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018060:	4605      	mov	r5, r0
 8018062:	7823      	ldrb	r3, [r4, #0]
 8018064:	f3bf 8f5b 	dmb	ish
 8018068:	07da      	lsls	r2, r3, #31
 801806a:	d40b      	bmi.n	8018084 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801806c:	4620      	mov	r0, r4
 801806e:	f005 f9d2 	bl	801d416 <__cxa_guard_acquire>
 8018072:	b138      	cbz	r0, 8018084 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018074:	4620      	mov	r0, r4
 8018076:	f005 f9da 	bl	801d42e <__cxa_guard_release>
 801807a:	4a0f      	ldr	r2, [pc, #60]	; (80180b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801807c:	490f      	ldr	r1, [pc, #60]	; (80180bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801807e:	4810      	ldr	r0, [pc, #64]	; (80180c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018080:	f005 f9c2 	bl	801d408 <__aeabi_atexit>
 8018084:	4c0f      	ldr	r4, [pc, #60]	; (80180c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018086:	7823      	ldrb	r3, [r4, #0]
 8018088:	f3bf 8f5b 	dmb	ish
 801808c:	07db      	lsls	r3, r3, #31
 801808e:	d40b      	bmi.n	80180a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018090:	4620      	mov	r0, r4
 8018092:	f005 f9c0 	bl	801d416 <__cxa_guard_acquire>
 8018096:	b138      	cbz	r0, 80180a8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018098:	4620      	mov	r0, r4
 801809a:	f005 f9c8 	bl	801d42e <__cxa_guard_release>
 801809e:	4a06      	ldr	r2, [pc, #24]	; (80180b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 80180a0:	4909      	ldr	r1, [pc, #36]	; (80180c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 80180a2:	480a      	ldr	r0, [pc, #40]	; (80180cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80180a4:	f005 f9b0 	bl	801d408 <__aeabi_atexit>
 80180a8:	4b05      	ldr	r3, [pc, #20]	; (80180c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 80180aa:	642b      	str	r3, [r5, #64]	; 0x40
 80180ac:	4b07      	ldr	r3, [pc, #28]	; (80180cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 80180ae:	646b      	str	r3, [r5, #68]	; 0x44
 80180b0:	bd38      	pop	{r3, r4, r5, pc}
 80180b2:	bf00      	nop
 80180b4:	2401ab0c 	.word	0x2401ab0c
 80180b8:	24000000 	.word	0x24000000
 80180bc:	08015b99 	.word	0x08015b99
 80180c0:	24000064 	.word	0x24000064
 80180c4:	2401ab10 	.word	0x2401ab10
 80180c8:	08015b97 	.word	0x08015b97
 80180cc:	24000068 	.word	0x24000068

080180d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80180d0:	b538      	push	{r3, r4, r5, lr}
 80180d2:	4c15      	ldr	r4, [pc, #84]	; (8018128 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 80180d4:	4605      	mov	r5, r0
 80180d6:	7823      	ldrb	r3, [r4, #0]
 80180d8:	f3bf 8f5b 	dmb	ish
 80180dc:	07da      	lsls	r2, r3, #31
 80180de:	d40b      	bmi.n	80180f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80180e0:	4620      	mov	r0, r4
 80180e2:	f005 f998 	bl	801d416 <__cxa_guard_acquire>
 80180e6:	b138      	cbz	r0, 80180f8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80180e8:	4620      	mov	r0, r4
 80180ea:	f005 f9a0 	bl	801d42e <__cxa_guard_release>
 80180ee:	4a0f      	ldr	r2, [pc, #60]	; (801812c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 80180f0:	490f      	ldr	r1, [pc, #60]	; (8018130 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 80180f2:	4810      	ldr	r0, [pc, #64]	; (8018134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 80180f4:	f005 f988 	bl	801d408 <__aeabi_atexit>
 80180f8:	4c0f      	ldr	r4, [pc, #60]	; (8018138 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 80180fa:	7823      	ldrb	r3, [r4, #0]
 80180fc:	f3bf 8f5b 	dmb	ish
 8018100:	07db      	lsls	r3, r3, #31
 8018102:	d40b      	bmi.n	801811c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018104:	4620      	mov	r0, r4
 8018106:	f005 f986 	bl	801d416 <__cxa_guard_acquire>
 801810a:	b138      	cbz	r0, 801811c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801810c:	4620      	mov	r0, r4
 801810e:	f005 f98e 	bl	801d42e <__cxa_guard_release>
 8018112:	4a06      	ldr	r2, [pc, #24]	; (801812c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018114:	4909      	ldr	r1, [pc, #36]	; (801813c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018116:	480a      	ldr	r0, [pc, #40]	; (8018140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018118:	f005 f976 	bl	801d408 <__aeabi_atexit>
 801811c:	4b05      	ldr	r3, [pc, #20]	; (8018134 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801811e:	63ab      	str	r3, [r5, #56]	; 0x38
 8018120:	4b07      	ldr	r3, [pc, #28]	; (8018140 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018122:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018124:	bd38      	pop	{r3, r4, r5, pc}
 8018126:	bf00      	nop
 8018128:	2401aaec 	.word	0x2401aaec
 801812c:	24000000 	.word	0x24000000
 8018130:	08015b9d 	.word	0x08015b9d
 8018134:	24000044 	.word	0x24000044
 8018138:	2401aaf0 	.word	0x2401aaf0
 801813c:	08015b9b 	.word	0x08015b9b
 8018140:	24000048 	.word	0x24000048

08018144 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018144:	b510      	push	{r4, lr}
 8018146:	4604      	mov	r4, r0
 8018148:	f7ff ff88 	bl	801805c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801814c:	4620      	mov	r0, r4
 801814e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018152:	f7ff bfbd 	b.w	80180d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018158 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018158:	b538      	push	{r3, r4, r5, lr}
 801815a:	4c15      	ldr	r4, [pc, #84]	; (80181b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801815c:	4605      	mov	r5, r0
 801815e:	7823      	ldrb	r3, [r4, #0]
 8018160:	f3bf 8f5b 	dmb	ish
 8018164:	07da      	lsls	r2, r3, #31
 8018166:	d40b      	bmi.n	8018180 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018168:	4620      	mov	r0, r4
 801816a:	f005 f954 	bl	801d416 <__cxa_guard_acquire>
 801816e:	b138      	cbz	r0, 8018180 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018170:	4620      	mov	r0, r4
 8018172:	f005 f95c 	bl	801d42e <__cxa_guard_release>
 8018176:	4a0f      	ldr	r2, [pc, #60]	; (80181b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018178:	490f      	ldr	r1, [pc, #60]	; (80181b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801817a:	4810      	ldr	r0, [pc, #64]	; (80181bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801817c:	f005 f944 	bl	801d408 <__aeabi_atexit>
 8018180:	4c0f      	ldr	r4, [pc, #60]	; (80181c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018182:	7823      	ldrb	r3, [r4, #0]
 8018184:	f3bf 8f5b 	dmb	ish
 8018188:	07db      	lsls	r3, r3, #31
 801818a:	d40b      	bmi.n	80181a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801818c:	4620      	mov	r0, r4
 801818e:	f005 f942 	bl	801d416 <__cxa_guard_acquire>
 8018192:	b138      	cbz	r0, 80181a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018194:	4620      	mov	r0, r4
 8018196:	f005 f94a 	bl	801d42e <__cxa_guard_release>
 801819a:	4a06      	ldr	r2, [pc, #24]	; (80181b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801819c:	4909      	ldr	r1, [pc, #36]	; (80181c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801819e:	480a      	ldr	r0, [pc, #40]	; (80181c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80181a0:	f005 f932 	bl	801d408 <__aeabi_atexit>
 80181a4:	4b05      	ldr	r3, [pc, #20]	; (80181bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80181a6:	652b      	str	r3, [r5, #80]	; 0x50
 80181a8:	4b07      	ldr	r3, [pc, #28]	; (80181c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80181aa:	656b      	str	r3, [r5, #84]	; 0x54
 80181ac:	bd38      	pop	{r3, r4, r5, pc}
 80181ae:	bf00      	nop
 80181b0:	2401aae4 	.word	0x2401aae4
 80181b4:	24000000 	.word	0x24000000
 80181b8:	08015b91 	.word	0x08015b91
 80181bc:	2400003c 	.word	0x2400003c
 80181c0:	2401aae8 	.word	0x2401aae8
 80181c4:	08015b8f 	.word	0x08015b8f
 80181c8:	24000040 	.word	0x24000040

080181cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 80181cc:	b538      	push	{r3, r4, r5, lr}
 80181ce:	4c15      	ldr	r4, [pc, #84]	; (8018224 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80181d0:	4605      	mov	r5, r0
 80181d2:	7823      	ldrb	r3, [r4, #0]
 80181d4:	f3bf 8f5b 	dmb	ish
 80181d8:	07da      	lsls	r2, r3, #31
 80181da:	d40b      	bmi.n	80181f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80181dc:	4620      	mov	r0, r4
 80181de:	f005 f91a 	bl	801d416 <__cxa_guard_acquire>
 80181e2:	b138      	cbz	r0, 80181f4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80181e4:	4620      	mov	r0, r4
 80181e6:	f005 f922 	bl	801d42e <__cxa_guard_release>
 80181ea:	4a0f      	ldr	r2, [pc, #60]	; (8018228 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80181ec:	490f      	ldr	r1, [pc, #60]	; (801822c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80181ee:	4810      	ldr	r0, [pc, #64]	; (8018230 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80181f0:	f005 f90a 	bl	801d408 <__aeabi_atexit>
 80181f4:	4c0f      	ldr	r4, [pc, #60]	; (8018234 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80181f6:	7823      	ldrb	r3, [r4, #0]
 80181f8:	f3bf 8f5b 	dmb	ish
 80181fc:	07db      	lsls	r3, r3, #31
 80181fe:	d40b      	bmi.n	8018218 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018200:	4620      	mov	r0, r4
 8018202:	f005 f908 	bl	801d416 <__cxa_guard_acquire>
 8018206:	b138      	cbz	r0, 8018218 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018208:	4620      	mov	r0, r4
 801820a:	f005 f910 	bl	801d42e <__cxa_guard_release>
 801820e:	4a06      	ldr	r2, [pc, #24]	; (8018228 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018210:	4909      	ldr	r1, [pc, #36]	; (8018238 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018212:	480a      	ldr	r0, [pc, #40]	; (801823c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018214:	f005 f8f8 	bl	801d408 <__aeabi_atexit>
 8018218:	4b05      	ldr	r3, [pc, #20]	; (8018230 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801821a:	64ab      	str	r3, [r5, #72]	; 0x48
 801821c:	4b07      	ldr	r3, [pc, #28]	; (801823c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801821e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018220:	bd38      	pop	{r3, r4, r5, pc}
 8018222:	bf00      	nop
 8018224:	2401aad4 	.word	0x2401aad4
 8018228:	24000000 	.word	0x24000000
 801822c:	08015b95 	.word	0x08015b95
 8018230:	2400002c 	.word	0x2400002c
 8018234:	2401aad8 	.word	0x2401aad8
 8018238:	08015b93 	.word	0x08015b93
 801823c:	24000030 	.word	0x24000030

08018240 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018240:	b510      	push	{r4, lr}
 8018242:	4604      	mov	r4, r0
 8018244:	f7ff ff88 	bl	8018158 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018248:	4620      	mov	r0, r4
 801824a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801824e:	f7ff bfbd 	b.w	80181cc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018252 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018252:	b510      	push	{r4, lr}
 8018254:	4604      	mov	r4, r0
 8018256:	f7ff fff3 	bl	8018240 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801825a:	4620      	mov	r0, r4
 801825c:	f7ff ff72 	bl	8018144 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018260:	4620      	mov	r0, r4
 8018262:	f7ff fe73 	bl	8017f4c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018266:	4620      	mov	r0, r4
 8018268:	f7ff fdf2 	bl	8017e50 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801826c:	4620      	mov	r0, r4
 801826e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018272:	f7ff bee9 	b.w	8018048 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

08018278 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 8018278:	b538      	push	{r3, r4, r5, lr}
 801827a:	4c0b      	ldr	r4, [pc, #44]	; (80182a8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801827c:	4605      	mov	r5, r0
 801827e:	7823      	ldrb	r3, [r4, #0]
 8018280:	f3bf 8f5b 	dmb	ish
 8018284:	07db      	lsls	r3, r3, #31
 8018286:	d40b      	bmi.n	80182a0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8018288:	4620      	mov	r0, r4
 801828a:	f005 f8c4 	bl	801d416 <__cxa_guard_acquire>
 801828e:	b138      	cbz	r0, 80182a0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 8018290:	4620      	mov	r0, r4
 8018292:	f005 f8cc 	bl	801d42e <__cxa_guard_release>
 8018296:	4a05      	ldr	r2, [pc, #20]	; (80182ac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 8018298:	4905      	ldr	r1, [pc, #20]	; (80182b0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801829a:	4806      	ldr	r0, [pc, #24]	; (80182b4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801829c:	f005 f8b4 	bl	801d408 <__aeabi_atexit>
 80182a0:	4b04      	ldr	r3, [pc, #16]	; (80182b4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 80182a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80182a4:	bd38      	pop	{r3, r4, r5, pc}
 80182a6:	bf00      	nop
 80182a8:	2401aac8 	.word	0x2401aac8
 80182ac:	24000000 	.word	0x24000000
 80182b0:	08015b8d 	.word	0x08015b8d
 80182b4:	24000024 	.word	0x24000024

080182b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 80182b8:	b538      	push	{r3, r4, r5, lr}
 80182ba:	4c0b      	ldr	r4, [pc, #44]	; (80182e8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 80182bc:	4605      	mov	r5, r0
 80182be:	7823      	ldrb	r3, [r4, #0]
 80182c0:	f3bf 8f5b 	dmb	ish
 80182c4:	07db      	lsls	r3, r3, #31
 80182c6:	d40b      	bmi.n	80182e0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 80182c8:	4620      	mov	r0, r4
 80182ca:	f005 f8a4 	bl	801d416 <__cxa_guard_acquire>
 80182ce:	b138      	cbz	r0, 80182e0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 80182d0:	4620      	mov	r0, r4
 80182d2:	f005 f8ac 	bl	801d42e <__cxa_guard_release>
 80182d6:	4a05      	ldr	r2, [pc, #20]	; (80182ec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 80182d8:	4905      	ldr	r1, [pc, #20]	; (80182f0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 80182da:	4806      	ldr	r0, [pc, #24]	; (80182f4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 80182dc:	f005 f894 	bl	801d408 <__aeabi_atexit>
 80182e0:	4b04      	ldr	r3, [pc, #16]	; (80182f4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 80182e2:	65eb      	str	r3, [r5, #92]	; 0x5c
 80182e4:	bd38      	pop	{r3, r4, r5, pc}
 80182e6:	bf00      	nop
 80182e8:	2401aacc 	.word	0x2401aacc
 80182ec:	24000000 	.word	0x24000000
 80182f0:	08015b8b 	.word	0x08015b8b
 80182f4:	24000028 	.word	0x24000028

080182f8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 80182f8:	b570      	push	{r4, r5, r6, lr}
 80182fa:	4d0c      	ldr	r5, [pc, #48]	; (801832c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 80182fc:	4606      	mov	r6, r0
 80182fe:	4c0c      	ldr	r4, [pc, #48]	; (8018330 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 8018300:	782b      	ldrb	r3, [r5, #0]
 8018302:	f3bf 8f5b 	dmb	ish
 8018306:	f013 0f01 	tst.w	r3, #1
 801830a:	d10d      	bne.n	8018328 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801830c:	4628      	mov	r0, r5
 801830e:	f005 f882 	bl	801d416 <__cxa_guard_acquire>
 8018312:	b148      	cbz	r0, 8018328 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 8018314:	4b07      	ldr	r3, [pc, #28]	; (8018334 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 8018316:	4628      	mov	r0, r5
 8018318:	6023      	str	r3, [r4, #0]
 801831a:	f005 f888 	bl	801d42e <__cxa_guard_release>
 801831e:	4a06      	ldr	r2, [pc, #24]	; (8018338 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 8018320:	4620      	mov	r0, r4
 8018322:	4906      	ldr	r1, [pc, #24]	; (801833c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 8018324:	f005 f870 	bl	801d408 <__aeabi_atexit>
 8018328:	6634      	str	r4, [r6, #96]	; 0x60
 801832a:	bd70      	pop	{r4, r5, r6, pc}
 801832c:	2401aad0 	.word	0x2401aad0
 8018330:	2401ab24 	.word	0x2401ab24
 8018334:	0801febc 	.word	0x0801febc
 8018338:	24000000 	.word	0x24000000
 801833c:	08015b89 	.word	0x08015b89

08018340 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 8018340:	b510      	push	{r4, lr}
 8018342:	4604      	mov	r4, r0
 8018344:	f7ff ff98 	bl	8018278 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 8018348:	4620      	mov	r0, r4
 801834a:	f7ff ffb5 	bl	80182b8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801834e:	4620      	mov	r0, r4
 8018350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018354:	f7ff bfd0 	b.w	80182f8 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

08018358 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801835c:	b087      	sub	sp, #28
 801835e:	788d      	ldrb	r5, [r1, #2]
 8018360:	f891 9000 	ldrb.w	r9, [r1]
 8018364:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8018368:	9501      	str	r5, [sp, #4]
 801836a:	784d      	ldrb	r5, [r1, #1]
 801836c:	9203      	str	r2, [sp, #12]
 801836e:	9502      	str	r5, [sp, #8]
 8018370:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8018374:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8018378:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801837c:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8018380:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8018384:	fb06 0708 	mla	r7, r6, r8, r0
 8018388:	2e00      	cmp	r6, #0
 801838a:	eb02 0a07 	add.w	sl, r2, r7
 801838e:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8018392:	9d01      	ldr	r5, [sp, #4]
 8018394:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8018398:	ea45 0509 	orr.w	r5, r5, r9
 801839c:	9505      	str	r5, [sp, #20]
 801839e:	f2c0 80b2 	blt.w	8018506 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 80183a2:	45b3      	cmp	fp, r6
 80183a4:	f340 80af 	ble.w	8018506 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 80183a8:	2800      	cmp	r0, #0
 80183aa:	f2c0 80aa 	blt.w	8018502 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 80183ae:	4580      	cmp	r8, r0
 80183b0:	f340 80a7 	ble.w	8018502 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 80183b4:	9a03      	ldr	r2, [sp, #12]
 80183b6:	5dd7      	ldrb	r7, [r2, r7]
 80183b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80183bc:	441f      	add	r7, r3
 80183be:	1c42      	adds	r2, r0, #1
 80183c0:	f100 80a4 	bmi.w	801850c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80183c4:	4590      	cmp	r8, r2
 80183c6:	f340 80a1 	ble.w	801850c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80183ca:	2c00      	cmp	r4, #0
 80183cc:	f000 809e 	beq.w	801850c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 80183d0:	f89a 5001 	ldrb.w	r5, [sl, #1]
 80183d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80183d8:	441d      	add	r5, r3
 80183da:	3601      	adds	r6, #1
 80183dc:	f100 809a 	bmi.w	8018514 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80183e0:	45b3      	cmp	fp, r6
 80183e2:	f340 8097 	ble.w	8018514 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80183e6:	f1bc 0f00 	cmp.w	ip, #0
 80183ea:	f000 8093 	beq.w	8018514 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 80183ee:	2800      	cmp	r0, #0
 80183f0:	f2c0 808e 	blt.w	8018510 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80183f4:	4580      	cmp	r8, r0
 80183f6:	f340 808b 	ble.w	8018510 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 80183fa:	f81a 6008 	ldrb.w	r6, [sl, r8]
 80183fe:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018402:	441e      	add	r6, r3
 8018404:	3001      	adds	r0, #1
 8018406:	f100 8088 	bmi.w	801851a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801840a:	4580      	cmp	r8, r0
 801840c:	f340 8085 	ble.w	801851a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018410:	2c00      	cmp	r4, #0
 8018412:	f000 8082 	beq.w	801851a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018416:	44d0      	add	r8, sl
 8018418:	f898 2001 	ldrb.w	r2, [r8, #1]
 801841c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018420:	4413      	add	r3, r2
 8018422:	b2a4      	uxth	r4, r4
 8018424:	f895 a000 	ldrb.w	sl, [r5]
 8018428:	fa1f fc8c 	uxth.w	ip, ip
 801842c:	fb04 fb0c 	mul.w	fp, r4, ip
 8018430:	0124      	lsls	r4, r4, #4
 8018432:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8018436:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 801843a:	eba4 040b 	sub.w	r4, r4, fp
 801843e:	fa1f f08c 	uxth.w	r0, ip
 8018442:	b2a2      	uxth	r2, r4
 8018444:	783c      	ldrb	r4, [r7, #0]
 8018446:	eba8 0800 	sub.w	r8, r8, r0
 801844a:	fa1f fc8e 	uxth.w	ip, lr
 801844e:	fb02 fa0a 	mul.w	sl, r2, sl
 8018452:	ea6f 0e0e 	mvn.w	lr, lr
 8018456:	fa1f f888 	uxth.w	r8, r8
 801845a:	fa5f fe8e 	uxtb.w	lr, lr
 801845e:	fb08 aa04 	mla	sl, r8, r4, sl
 8018462:	7834      	ldrb	r4, [r6, #0]
 8018464:	fb19 f90e 	smulbb	r9, r9, lr
 8018468:	fb00 aa04 	mla	sl, r0, r4, sl
 801846c:	781c      	ldrb	r4, [r3, #0]
 801846e:	fb0b a404 	mla	r4, fp, r4, sl
 8018472:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018476:	fb04 990c 	mla	r9, r4, ip, r9
 801847a:	fa1f f989 	uxth.w	r9, r9
 801847e:	f109 0401 	add.w	r4, r9, #1
 8018482:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8018486:	ea4f 2929 	mov.w	r9, r9, asr #8
 801848a:	f881 9000 	strb.w	r9, [r1]
 801848e:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018492:	787c      	ldrb	r4, [r7, #1]
 8018494:	fb02 f909 	mul.w	r9, r2, r9
 8018498:	fb08 9904 	mla	r9, r8, r4, r9
 801849c:	7874      	ldrb	r4, [r6, #1]
 801849e:	fb00 9904 	mla	r9, r0, r4, r9
 80184a2:	785c      	ldrb	r4, [r3, #1]
 80184a4:	fb0b 9404 	mla	r4, fp, r4, r9
 80184a8:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 80184ac:	9c02      	ldr	r4, [sp, #8]
 80184ae:	fb14 f90e 	smulbb	r9, r4, lr
 80184b2:	fb0a 940c 	mla	r4, sl, ip, r9
 80184b6:	b2a4      	uxth	r4, r4
 80184b8:	f104 0901 	add.w	r9, r4, #1
 80184bc:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 80184c0:	1224      	asrs	r4, r4, #8
 80184c2:	704c      	strb	r4, [r1, #1]
 80184c4:	78ad      	ldrb	r5, [r5, #2]
 80184c6:	78bc      	ldrb	r4, [r7, #2]
 80184c8:	436a      	muls	r2, r5
 80184ca:	789b      	ldrb	r3, [r3, #2]
 80184cc:	fb08 2204 	mla	r2, r8, r4, r2
 80184d0:	78b4      	ldrb	r4, [r6, #2]
 80184d2:	fb00 2004 	mla	r0, r0, r4, r2
 80184d6:	fb0b 0b03 	mla	fp, fp, r3, r0
 80184da:	9b01      	ldr	r3, [sp, #4]
 80184dc:	fb13 fe0e 	smulbb	lr, r3, lr
 80184e0:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80184e4:	fb0b ec0c 	mla	ip, fp, ip, lr
 80184e8:	fa1f fc8c 	uxth.w	ip, ip
 80184ec:	f10c 0e01 	add.w	lr, ip, #1
 80184f0:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 80184f4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80184f8:	f881 c002 	strb.w	ip, [r1, #2]
 80184fc:	b007      	add	sp, #28
 80184fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018502:	af05      	add	r7, sp, #20
 8018504:	e75b      	b.n	80183be <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8018506:	ad05      	add	r5, sp, #20
 8018508:	462f      	mov	r7, r5
 801850a:	e766      	b.n	80183da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801850c:	ad05      	add	r5, sp, #20
 801850e:	e764      	b.n	80183da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8018510:	ae05      	add	r6, sp, #20
 8018512:	e777      	b.n	8018404 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8018514:	ab05      	add	r3, sp, #20
 8018516:	461e      	mov	r6, r3
 8018518:	e783      	b.n	8018422 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801851a:	ab05      	add	r3, sp, #20
 801851c:	e781      	b.n	8018422 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801851e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801851e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018522:	b093      	sub	sp, #76	; 0x4c
 8018524:	9210      	str	r2, [sp, #64]	; 0x40
 8018526:	9309      	str	r3, [sp, #36]	; 0x24
 8018528:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801852a:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801852e:	9011      	str	r0, [sp, #68]	; 0x44
 8018530:	930e      	str	r3, [sp, #56]	; 0x38
 8018532:	6850      	ldr	r0, [r2, #4]
 8018534:	910d      	str	r1, [sp, #52]	; 0x34
 8018536:	6812      	ldr	r2, [r2, #0]
 8018538:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801853c:	fb00 1303 	mla	r3, r0, r3, r1
 8018540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018544:	18d3      	adds	r3, r2, r3
 8018546:	930a      	str	r3, [sp, #40]	; 0x28
 8018548:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	930c      	str	r3, [sp, #48]	; 0x30
 801854e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018550:	685c      	ldr	r4, [r3, #4]
 8018552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018554:	3404      	adds	r4, #4
 8018556:	43db      	mvns	r3, r3
 8018558:	b2db      	uxtb	r3, r3
 801855a:	930b      	str	r3, [sp, #44]	; 0x2c
 801855c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801855e:	2b00      	cmp	r3, #0
 8018560:	dc03      	bgt.n	801856a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018562:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018564:	2b00      	cmp	r3, #0
 8018566:	f340 8250 	ble.w	8018a0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801856a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801856c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018570:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018574:	1e48      	subs	r0, r1, #1
 8018576:	1e55      	subs	r5, r2, #1
 8018578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801857a:	2b00      	cmp	r3, #0
 801857c:	f340 80ee 	ble.w	801875c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018580:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018582:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018584:	1436      	asrs	r6, r6, #16
 8018586:	ea4f 4323 	mov.w	r3, r3, asr #16
 801858a:	d406      	bmi.n	801859a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801858c:	4286      	cmp	r6, r0
 801858e:	da04      	bge.n	801859a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018590:	2b00      	cmp	r3, #0
 8018592:	db02      	blt.n	801859a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018594:	42ab      	cmp	r3, r5
 8018596:	f2c0 80e2 	blt.w	801875e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801859a:	3601      	adds	r6, #1
 801859c:	f100 80cf 	bmi.w	801873e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80185a0:	42b1      	cmp	r1, r6
 80185a2:	f2c0 80cc 	blt.w	801873e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80185a6:	3301      	adds	r3, #1
 80185a8:	f100 80c9 	bmi.w	801873e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80185ac:	429a      	cmp	r2, r3
 80185ae:	f2c0 80c6 	blt.w	801873e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 80185b2:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 80185b6:	f1bb 0f00 	cmp.w	fp, #0
 80185ba:	f340 80f1 	ble.w	80187a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 80185be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80185c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80185c2:	9824      	ldr	r0, [sp, #144]	; 0x90
 80185c4:	141d      	asrs	r5, r3, #16
 80185c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80185c8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80185cc:	68c7      	ldr	r7, [r0, #12]
 80185ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80185d0:	1418      	asrs	r0, r3, #16
 80185d2:	f3c3 3803 	ubfx	r8, r3, #12, #4
 80185d6:	6892      	ldr	r2, [r2, #8]
 80185d8:	f100 8137 	bmi.w	801884a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80185dc:	f102 3cff 	add.w	ip, r2, #4294967295
 80185e0:	4560      	cmp	r0, ip
 80185e2:	f280 8132 	bge.w	801884a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80185e6:	2d00      	cmp	r5, #0
 80185e8:	f2c0 812f 	blt.w	801884a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80185ec:	f107 3cff 	add.w	ip, r7, #4294967295
 80185f0:	4565      	cmp	r5, ip
 80185f2:	f280 812a 	bge.w	801884a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 80185f6:	b212      	sxth	r2, r2
 80185f8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80185fa:	fb05 0002 	mla	r0, r5, r2, r0
 80185fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018600:	f817 c000 	ldrb.w	ip, [r7, r0]
 8018604:	4405      	add	r5, r0
 8018606:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801860a:	eb04 0e0c 	add.w	lr, r4, ip
 801860e:	f1b8 0f00 	cmp.w	r8, #0
 8018612:	f000 810c 	beq.w	801882e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8018616:	786f      	ldrb	r7, [r5, #1]
 8018618:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801861c:	4427      	add	r7, r4
 801861e:	2900      	cmp	r1, #0
 8018620:	f000 810d 	beq.w	801883e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8018624:	18a8      	adds	r0, r5, r2
 8018626:	5caa      	ldrb	r2, [r5, r2]
 8018628:	7840      	ldrb	r0, [r0, #1]
 801862a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801862e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018632:	4422      	add	r2, r4
 8018634:	4420      	add	r0, r4
 8018636:	fa1f f388 	uxth.w	r3, r8
 801863a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801863e:	b289      	uxth	r1, r1
 8018640:	f897 c000 	ldrb.w	ip, [r7]
 8018644:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8018648:	fb03 f901 	mul.w	r9, r3, r1
 801864c:	011b      	lsls	r3, r3, #4
 801864e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018652:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8018656:	eba3 0309 	sub.w	r3, r3, r9
 801865a:	b289      	uxth	r1, r1
 801865c:	b29b      	uxth	r3, r3
 801865e:	eba8 0801 	sub.w	r8, r8, r1
 8018662:	fb03 fc0c 	mul.w	ip, r3, ip
 8018666:	fa1f f888 	uxth.w	r8, r8
 801866a:	930f      	str	r3, [sp, #60]	; 0x3c
 801866c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801866e:	fb08 cc0a 	mla	ip, r8, sl, ip
 8018672:	f892 a000 	ldrb.w	sl, [r2]
 8018676:	fb01 cc0a 	mla	ip, r1, sl, ip
 801867a:	f890 a000 	ldrb.w	sl, [r0]
 801867e:	fb09 cc0a 	mla	ip, r9, sl, ip
 8018682:	f896 a000 	ldrb.w	sl, [r6]
 8018686:	fb1a fa03 	smulbb	sl, sl, r3
 801868a:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801868e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018690:	fb0c ac05 	mla	ip, ip, r5, sl
 8018694:	fa1f fc8c 	uxth.w	ip, ip
 8018698:	f10c 0a01 	add.w	sl, ip, #1
 801869c:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80186a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80186a4:	f886 a000 	strb.w	sl, [r6]
 80186a8:	f897 c001 	ldrb.w	ip, [r7, #1]
 80186ac:	f89e a001 	ldrb.w	sl, [lr, #1]
 80186b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80186b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186b6:	fb08 cc0a 	mla	ip, r8, sl, ip
 80186ba:	f892 a001 	ldrb.w	sl, [r2, #1]
 80186be:	fb01 cc0a 	mla	ip, r1, sl, ip
 80186c2:	f890 a001 	ldrb.w	sl, [r0, #1]
 80186c6:	fb09 cc0a 	mla	ip, r9, sl, ip
 80186ca:	f896 a001 	ldrb.w	sl, [r6, #1]
 80186ce:	fb1a fa03 	smulbb	sl, sl, r3
 80186d2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80186d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80186d8:	fb0c ac05 	mla	ip, ip, r5, sl
 80186dc:	fa1f fc8c 	uxth.w	ip, ip
 80186e0:	f10c 0a01 	add.w	sl, ip, #1
 80186e4:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 80186e8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80186ec:	f886 c001 	strb.w	ip, [r6, #1]
 80186f0:	78bf      	ldrb	r7, [r7, #2]
 80186f2:	f89e c002 	ldrb.w	ip, [lr, #2]
 80186f6:	437b      	muls	r3, r7
 80186f8:	fb08 330c 	mla	r3, r8, ip, r3
 80186fc:	f892 c002 	ldrb.w	ip, [r2, #2]
 8018700:	7882      	ldrb	r2, [r0, #2]
 8018702:	fb01 310c 	mla	r1, r1, ip, r3
 8018706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018708:	fb09 1902 	mla	r9, r9, r2, r1
 801870c:	78b1      	ldrb	r1, [r6, #2]
 801870e:	fb11 f103 	smulbb	r1, r1, r3
 8018712:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8018716:	fb09 1505 	mla	r5, r9, r5, r1
 801871a:	b2ad      	uxth	r5, r5
 801871c:	1c6b      	adds	r3, r5, #1
 801871e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8018722:	122d      	asrs	r5, r5, #8
 8018724:	70b5      	strb	r5, [r6, #2]
 8018726:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018728:	3603      	adds	r6, #3
 801872a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801872c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018730:	4413      	add	r3, r2
 8018732:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018734:	931d      	str	r3, [sp, #116]	; 0x74
 8018736:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018738:	4413      	add	r3, r2
 801873a:	931e      	str	r3, [sp, #120]	; 0x78
 801873c:	e73b      	b.n	80185b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801873e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018740:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8018742:	4433      	add	r3, r6
 8018744:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8018746:	931d      	str	r3, [sp, #116]	; 0x74
 8018748:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801874a:	4433      	add	r3, r6
 801874c:	931e      	str	r3, [sp, #120]	; 0x78
 801874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018750:	3b01      	subs	r3, #1
 8018752:	9309      	str	r3, [sp, #36]	; 0x24
 8018754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018756:	3303      	adds	r3, #3
 8018758:	930a      	str	r3, [sp, #40]	; 0x28
 801875a:	e70d      	b.n	8018578 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801875c:	d028      	beq.n	80187b0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018760:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8018762:	3b01      	subs	r3, #1
 8018764:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018766:	fb00 5003 	mla	r0, r0, r3, r5
 801876a:	1400      	asrs	r0, r0, #16
 801876c:	f53f af21 	bmi.w	80185b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018770:	3901      	subs	r1, #1
 8018772:	4288      	cmp	r0, r1
 8018774:	f6bf af1d 	bge.w	80185b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018778:	9920      	ldr	r1, [sp, #128]	; 0x80
 801877a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801877c:	fb01 0303 	mla	r3, r1, r3, r0
 8018780:	141b      	asrs	r3, r3, #16
 8018782:	f53f af16 	bmi.w	80185b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8018786:	3a01      	subs	r2, #1
 8018788:	4293      	cmp	r3, r2
 801878a:	f6bf af12 	bge.w	80185b2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801878e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018790:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018794:	1cdf      	adds	r7, r3, #3
 8018796:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 801879a:	f1b9 0f00 	cmp.w	r9, #0
 801879e:	dc73      	bgt.n	8018888 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80187a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80187a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80187a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80187ac:	441a      	add	r2, r3
 80187ae:	920a      	str	r2, [sp, #40]	; 0x28
 80187b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	f340 8129 	ble.w	8018a0a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80187b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80187bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80187be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80187c2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80187c6:	eef0 6a62 	vmov.f32	s13, s5
 80187ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80187ce:	ee31 1a05 	vadd.f32	s2, s2, s10
 80187d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187d6:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80187da:	eef0 6a43 	vmov.f32	s13, s6
 80187de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80187e2:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80187e6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80187ea:	ee61 7a27 	vmul.f32	s15, s2, s15
 80187ee:	ee77 2a62 	vsub.f32	s5, s14, s5
 80187f2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80187f6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80187fa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80187fe:	ee12 2a90 	vmov	r2, s5
 8018802:	eef0 2a47 	vmov.f32	s5, s14
 8018806:	fb92 f3f3 	sdiv	r3, r2, r3
 801880a:	ee13 2a10 	vmov	r2, s6
 801880e:	931f      	str	r3, [sp, #124]	; 0x7c
 8018810:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018812:	eeb0 3a67 	vmov.f32	s6, s15
 8018816:	fb92 f3f3 	sdiv	r3, r2, r3
 801881a:	9320      	str	r3, [sp, #128]	; 0x80
 801881c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801881e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018820:	3b01      	subs	r3, #1
 8018822:	930d      	str	r3, [sp, #52]	; 0x34
 8018824:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8018826:	bf08      	it	eq
 8018828:	4613      	moveq	r3, r2
 801882a:	9309      	str	r3, [sp, #36]	; 0x24
 801882c:	e696      	b.n	801855c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801882e:	b149      	cbz	r1, 8018844 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8018830:	5caa      	ldrb	r2, [r5, r2]
 8018832:	4670      	mov	r0, lr
 8018834:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018838:	4422      	add	r2, r4
 801883a:	4677      	mov	r7, lr
 801883c:	e6fb      	b.n	8018636 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801883e:	4670      	mov	r0, lr
 8018840:	4672      	mov	r2, lr
 8018842:	e6f8      	b.n	8018636 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8018844:	4670      	mov	r0, lr
 8018846:	4672      	mov	r2, lr
 8018848:	e7f7      	b.n	801883a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801884a:	f110 0c01 	adds.w	ip, r0, #1
 801884e:	f53f af6a 	bmi.w	8018726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018852:	4562      	cmp	r2, ip
 8018854:	f6ff af67 	blt.w	8018726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018858:	f115 0c01 	adds.w	ip, r5, #1
 801885c:	f53f af63 	bmi.w	8018726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018860:	4567      	cmp	r7, ip
 8018862:	f6ff af60 	blt.w	8018726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018868:	b23f      	sxth	r7, r7
 801886a:	b212      	sxth	r2, r2
 801886c:	9002      	str	r0, [sp, #8]
 801886e:	9701      	str	r7, [sp, #4]
 8018870:	9200      	str	r2, [sp, #0]
 8018872:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018874:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018876:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801887a:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801887e:	4623      	mov	r3, r4
 8018880:	4631      	mov	r1, r6
 8018882:	f7ff fd69 	bl	8018358 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 8018886:	e74e      	b.n	8018726 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8018888:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801888a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801888c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018890:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8018892:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018894:	1400      	asrs	r0, r0, #16
 8018896:	142d      	asrs	r5, r5, #16
 8018898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801889a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801889e:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80188a2:	fb02 5000 	mla	r0, r2, r0, r5
 80188a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80188a8:	f815 e000 	ldrb.w	lr, [r5, r0]
 80188ac:	eb05 0c00 	add.w	ip, r5, r0
 80188b0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80188b4:	eb04 060e 	add.w	r6, r4, lr
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	f000 8097 	beq.w	80189ec <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80188be:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80188c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80188c6:	4425      	add	r5, r4
 80188c8:	2900      	cmp	r1, #0
 80188ca:	f000 8098 	beq.w	80189fe <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80188ce:	eb0c 0002 	add.w	r0, ip, r2
 80188d2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80188d6:	7840      	ldrb	r0, [r0, #1]
 80188d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80188dc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80188e0:	4422      	add	r2, r4
 80188e2:	4420      	add	r0, r4
 80188e4:	b29b      	uxth	r3, r3
 80188e6:	f814 b00e 	ldrb.w	fp, [r4, lr]
 80188ea:	b289      	uxth	r1, r1
 80188ec:	f895 e000 	ldrb.w	lr, [r5]
 80188f0:	3703      	adds	r7, #3
 80188f2:	f109 39ff 	add.w	r9, r9, #4294967295
 80188f6:	fb03 f801 	mul.w	r8, r3, r1
 80188fa:	011b      	lsls	r3, r3, #4
 80188fc:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 8018900:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8018904:	eba3 0308 	sub.w	r3, r3, r8
 8018908:	b289      	uxth	r1, r1
 801890a:	b29b      	uxth	r3, r3
 801890c:	ebac 0c01 	sub.w	ip, ip, r1
 8018910:	fb03 fe0e 	mul.w	lr, r3, lr
 8018914:	fa1f fc8c 	uxth.w	ip, ip
 8018918:	930f      	str	r3, [sp, #60]	; 0x3c
 801891a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801891c:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018920:	f892 b000 	ldrb.w	fp, [r2]
 8018924:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018928:	f890 b000 	ldrb.w	fp, [r0]
 801892c:	fb08 ee0b 	mla	lr, r8, fp, lr
 8018930:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8018934:	fb1b fb03 	smulbb	fp, fp, r3
 8018938:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801893c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801893e:	fb0e be0a 	mla	lr, lr, sl, fp
 8018942:	fa1f fe8e 	uxth.w	lr, lr
 8018946:	f10e 0b01 	add.w	fp, lr, #1
 801894a:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801894e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018952:	f807 ec06 	strb.w	lr, [r7, #-6]
 8018956:	f895 e001 	ldrb.w	lr, [r5, #1]
 801895a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801895e:	fb03 fe0e 	mul.w	lr, r3, lr
 8018962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018964:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018968:	f892 b001 	ldrb.w	fp, [r2, #1]
 801896c:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018970:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018974:	fb08 ee0b 	mla	lr, r8, fp, lr
 8018978:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801897c:	fb1b fb03 	smulbb	fp, fp, r3
 8018980:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8018984:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018986:	fb0e be0a 	mla	lr, lr, sl, fp
 801898a:	fa1f fe8e 	uxth.w	lr, lr
 801898e:	f10e 0b01 	add.w	fp, lr, #1
 8018992:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 8018996:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801899a:	f807 ec05 	strb.w	lr, [r7, #-5]
 801899e:	78ad      	ldrb	r5, [r5, #2]
 80189a0:	78b6      	ldrb	r6, [r6, #2]
 80189a2:	436b      	muls	r3, r5
 80189a4:	7895      	ldrb	r5, [r2, #2]
 80189a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80189a8:	fb0c 3306 	mla	r3, ip, r6, r3
 80189ac:	fb01 3305 	mla	r3, r1, r5, r3
 80189b0:	7885      	ldrb	r5, [r0, #2]
 80189b2:	fb08 3805 	mla	r8, r8, r5, r3
 80189b6:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80189ba:	fb13 f302 	smulbb	r3, r3, r2
 80189be:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80189c2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80189c4:	fb08 380a 	mla	r8, r8, sl, r3
 80189c8:	fa1f f888 	uxth.w	r8, r8
 80189cc:	f108 0301 	add.w	r3, r8, #1
 80189d0:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 80189d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80189d6:	4413      	add	r3, r2
 80189d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80189da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80189de:	931d      	str	r3, [sp, #116]	; 0x74
 80189e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80189e2:	f807 8c04 	strb.w	r8, [r7, #-4]
 80189e6:	4413      	add	r3, r2
 80189e8:	931e      	str	r3, [sp, #120]	; 0x78
 80189ea:	e6d6      	b.n	801879a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80189ec:	b151      	cbz	r1, 8018a04 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80189ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80189f2:	4630      	mov	r0, r6
 80189f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80189f8:	4422      	add	r2, r4
 80189fa:	4635      	mov	r5, r6
 80189fc:	e772      	b.n	80188e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 80189fe:	4630      	mov	r0, r6
 8018a00:	4632      	mov	r2, r6
 8018a02:	e76f      	b.n	80188e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8018a04:	4630      	mov	r0, r6
 8018a06:	4632      	mov	r2, r6
 8018a08:	e7f7      	b.n	80189fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8018a0a:	b013      	add	sp, #76	; 0x4c
 8018a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018a10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 8018a10:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8018a14:	784c      	ldrb	r4, [r1, #1]
 8018a16:	f891 a002 	ldrb.w	sl, [r1, #2]
 8018a1a:	0224      	lsls	r4, r4, #8
 8018a1c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 8018a20:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8018a24:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018a28:	f891 a000 	ldrb.w	sl, [r1]
 8018a2c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 8018a30:	ea44 040a 	orr.w	r4, r4, sl
 8018a34:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8018a38:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 8018a3c:	9401      	str	r4, [sp, #4]
 8018a3e:	fb05 c70e 	mla	r7, r5, lr, ip
 8018a42:	2d00      	cmp	r5, #0
 8018a44:	eb02 0807 	add.w	r8, r2, r7
 8018a48:	db72      	blt.n	8018b30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8018a4a:	45a9      	cmp	r9, r5
 8018a4c:	dd70      	ble.n	8018b30 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8018a4e:	f1bc 0f00 	cmp.w	ip, #0
 8018a52:	db6b      	blt.n	8018b2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8018a54:	45e6      	cmp	lr, ip
 8018a56:	dd69      	ble.n	8018b2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8018a58:	5dd7      	ldrb	r7, [r2, r7]
 8018a5a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018a5e:	441f      	add	r7, r3
 8018a60:	f11c 0201 	adds.w	r2, ip, #1
 8018a64:	d467      	bmi.n	8018b36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018a66:	4596      	cmp	lr, r2
 8018a68:	dd65      	ble.n	8018b36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	d063      	beq.n	8018b36 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8018a6e:	f898 4001 	ldrb.w	r4, [r8, #1]
 8018a72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018a76:	441c      	add	r4, r3
 8018a78:	3501      	adds	r5, #1
 8018a7a:	d460      	bmi.n	8018b3e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018a7c:	45a9      	cmp	r9, r5
 8018a7e:	dd5e      	ble.n	8018b3e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018a80:	2e00      	cmp	r6, #0
 8018a82:	d05c      	beq.n	8018b3e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 8018a84:	f1bc 0f00 	cmp.w	ip, #0
 8018a88:	db57      	blt.n	8018b3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8018a8a:	45e6      	cmp	lr, ip
 8018a8c:	dd55      	ble.n	8018b3a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 8018a8e:	f818 500e 	ldrb.w	r5, [r8, lr]
 8018a92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018a96:	441d      	add	r5, r3
 8018a98:	f11c 0201 	adds.w	r2, ip, #1
 8018a9c:	d452      	bmi.n	8018b44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018a9e:	4596      	cmp	lr, r2
 8018aa0:	dd50      	ble.n	8018b44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018aa2:	2800      	cmp	r0, #0
 8018aa4:	d04e      	beq.n	8018b44 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 8018aa6:	44c6      	add	lr, r8
 8018aa8:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8018aac:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018ab0:	4413      	add	r3, r2
 8018ab2:	b280      	uxth	r0, r0
 8018ab4:	f897 8000 	ldrb.w	r8, [r7]
 8018ab8:	b2b2      	uxth	r2, r6
 8018aba:	fb00 f602 	mul.w	r6, r0, r2
 8018abe:	0100      	lsls	r0, r0, #4
 8018ac0:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 8018ac4:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 8018ac8:	1b80      	subs	r0, r0, r6
 8018aca:	fa1f fc82 	uxth.w	ip, r2
 8018ace:	b282      	uxth	r2, r0
 8018ad0:	7820      	ldrb	r0, [r4, #0]
 8018ad2:	ebae 0e0c 	sub.w	lr, lr, ip
 8018ad6:	4350      	muls	r0, r2
 8018ad8:	fa1f fe8e 	uxth.w	lr, lr
 8018adc:	fb0e 0808 	mla	r8, lr, r8, r0
 8018ae0:	7828      	ldrb	r0, [r5, #0]
 8018ae2:	fb0c 8800 	mla	r8, ip, r0, r8
 8018ae6:	7818      	ldrb	r0, [r3, #0]
 8018ae8:	fb06 8000 	mla	r0, r6, r0, r8
 8018aec:	1200      	asrs	r0, r0, #8
 8018aee:	7008      	strb	r0, [r1, #0]
 8018af0:	7860      	ldrb	r0, [r4, #1]
 8018af2:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018af6:	4350      	muls	r0, r2
 8018af8:	fb0e 0808 	mla	r8, lr, r8, r0
 8018afc:	7868      	ldrb	r0, [r5, #1]
 8018afe:	fb0c 8800 	mla	r8, ip, r0, r8
 8018b02:	7858      	ldrb	r0, [r3, #1]
 8018b04:	fb06 8000 	mla	r0, r6, r0, r8
 8018b08:	1200      	asrs	r0, r0, #8
 8018b0a:	7048      	strb	r0, [r1, #1]
 8018b0c:	78a0      	ldrb	r0, [r4, #2]
 8018b0e:	78bf      	ldrb	r7, [r7, #2]
 8018b10:	4350      	muls	r0, r2
 8018b12:	78aa      	ldrb	r2, [r5, #2]
 8018b14:	fb0e 0007 	mla	r0, lr, r7, r0
 8018b18:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018b1c:	789a      	ldrb	r2, [r3, #2]
 8018b1e:	fb06 c202 	mla	r2, r6, r2, ip
 8018b22:	1212      	asrs	r2, r2, #8
 8018b24:	708a      	strb	r2, [r1, #2]
 8018b26:	b002      	add	sp, #8
 8018b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b2c:	af01      	add	r7, sp, #4
 8018b2e:	e797      	b.n	8018a60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 8018b30:	ac01      	add	r4, sp, #4
 8018b32:	4627      	mov	r7, r4
 8018b34:	e7a0      	b.n	8018a78 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8018b36:	ac01      	add	r4, sp, #4
 8018b38:	e79e      	b.n	8018a78 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8018b3a:	ad01      	add	r5, sp, #4
 8018b3c:	e7ac      	b.n	8018a98 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 8018b3e:	ab01      	add	r3, sp, #4
 8018b40:	461d      	mov	r5, r3
 8018b42:	e7b6      	b.n	8018ab2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8018b44:	ab01      	add	r3, sp, #4
 8018b46:	e7b4      	b.n	8018ab2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08018b48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b4c:	b08d      	sub	sp, #52	; 0x34
 8018b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018b52:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8018b56:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8018b58:	900b      	str	r0, [sp, #44]	; 0x2c
 8018b5a:	9306      	str	r3, [sp, #24]
 8018b5c:	6850      	ldr	r0, [r2, #4]
 8018b5e:	6812      	ldr	r2, [r2, #0]
 8018b60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8018b62:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8018b66:	fb00 1303 	mla	r3, r0, r3, r1
 8018b6a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b6e:	18d3      	adds	r3, r2, r3
 8018b70:	9307      	str	r3, [sp, #28]
 8018b72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	9308      	str	r3, [sp, #32]
 8018b78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018b7a:	685d      	ldr	r5, [r3, #4]
 8018b7c:	3504      	adds	r5, #4
 8018b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	dc03      	bgt.n	8018b8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	f340 81e6 	ble.w	8018f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8018b8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018b8e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018b92:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018b96:	1e48      	subs	r0, r1, #1
 8018b98:	1e56      	subs	r6, r2, #1
 8018b9a:	9b06      	ldr	r3, [sp, #24]
 8018b9c:	2b00      	cmp	r3, #0
 8018b9e:	f340 80bd 	ble.w	8018d1c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018ba2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018ba4:	1427      	asrs	r7, r4, #16
 8018ba6:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018baa:	d406      	bmi.n	8018bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018bac:	4287      	cmp	r7, r0
 8018bae:	da04      	bge.n	8018bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	db02      	blt.n	8018bba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018bb4:	42b3      	cmp	r3, r6
 8018bb6:	f2c0 80b2 	blt.w	8018d1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8018bba:	3701      	adds	r7, #1
 8018bbc:	f100 80a1 	bmi.w	8018d02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018bc0:	42b9      	cmp	r1, r7
 8018bc2:	f2c0 809e 	blt.w	8018d02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018bc6:	3301      	adds	r3, #1
 8018bc8:	f100 809b 	bmi.w	8018d02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	f2c0 8098 	blt.w	8018d02 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8018bd2:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8018bd6:	f1bb 0f00 	cmp.w	fp, #0
 8018bda:	f340 80bf 	ble.w	8018d5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8018bde:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018be0:	981e      	ldr	r0, [sp, #120]	; 0x78
 8018be2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018be4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018be8:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8018bec:	1420      	asrs	r0, r4, #16
 8018bee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018bf0:	ea4f 4723 	mov.w	r7, r3, asr #16
 8018bf4:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8018bf8:	6892      	ldr	r2, [r2, #8]
 8018bfa:	f100 8103 	bmi.w	8018e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018bfe:	f102 3eff 	add.w	lr, r2, #4294967295
 8018c02:	4570      	cmp	r0, lr
 8018c04:	f280 80fe 	bge.w	8018e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018c08:	2f00      	cmp	r7, #0
 8018c0a:	f2c0 80fb 	blt.w	8018e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018c0e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8018c12:	4577      	cmp	r7, lr
 8018c14:	f280 80f6 	bge.w	8018e04 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8018c18:	b212      	sxth	r2, r2
 8018c1a:	fb07 0002 	mla	r0, r7, r2, r0
 8018c1e:	9f08      	ldr	r7, [sp, #32]
 8018c20:	f817 8000 	ldrb.w	r8, [r7, r0]
 8018c24:	eb07 0e00 	add.w	lr, r7, r0
 8018c28:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018c2c:	eb05 0c08 	add.w	ip, r5, r8
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 80d8 	beq.w	8018de6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8018c36:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8018c3a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018c3e:	442f      	add	r7, r5
 8018c40:	2900      	cmp	r1, #0
 8018c42:	f000 80d9 	beq.w	8018df8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8018c46:	eb0e 0002 	add.w	r0, lr, r2
 8018c4a:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8018c4e:	7840      	ldrb	r0, [r0, #1]
 8018c50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018c54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018c58:	442a      	add	r2, r5
 8018c5a:	4428      	add	r0, r5
 8018c5c:	b29b      	uxth	r3, r3
 8018c5e:	f815 a008 	ldrb.w	sl, [r5, r8]
 8018c62:	b289      	uxth	r1, r1
 8018c64:	f897 8000 	ldrb.w	r8, [r7]
 8018c68:	fb03 f901 	mul.w	r9, r3, r1
 8018c6c:	011b      	lsls	r3, r3, #4
 8018c6e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018c72:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8018c76:	eba3 0309 	sub.w	r3, r3, r9
 8018c7a:	b289      	uxth	r1, r1
 8018c7c:	b29b      	uxth	r3, r3
 8018c7e:	ebae 0e01 	sub.w	lr, lr, r1
 8018c82:	fb03 f808 	mul.w	r8, r3, r8
 8018c86:	fa1f fe8e 	uxth.w	lr, lr
 8018c8a:	fb0e 880a 	mla	r8, lr, sl, r8
 8018c8e:	f892 a000 	ldrb.w	sl, [r2]
 8018c92:	fb01 880a 	mla	r8, r1, sl, r8
 8018c96:	f890 a000 	ldrb.w	sl, [r0]
 8018c9a:	fb09 880a 	mla	r8, r9, sl, r8
 8018c9e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018ca2:	f886 8000 	strb.w	r8, [r6]
 8018ca6:	f897 8001 	ldrb.w	r8, [r7, #1]
 8018caa:	f89c a001 	ldrb.w	sl, [ip, #1]
 8018cae:	fb03 f808 	mul.w	r8, r3, r8
 8018cb2:	fb0e 880a 	mla	r8, lr, sl, r8
 8018cb6:	f892 a001 	ldrb.w	sl, [r2, #1]
 8018cba:	fb01 880a 	mla	r8, r1, sl, r8
 8018cbe:	f890 a001 	ldrb.w	sl, [r0, #1]
 8018cc2:	fb09 880a 	mla	r8, r9, sl, r8
 8018cc6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018cca:	f886 8001 	strb.w	r8, [r6, #1]
 8018cce:	78bf      	ldrb	r7, [r7, #2]
 8018cd0:	f89c c002 	ldrb.w	ip, [ip, #2]
 8018cd4:	437b      	muls	r3, r7
 8018cd6:	7892      	ldrb	r2, [r2, #2]
 8018cd8:	fb0e 330c 	mla	r3, lr, ip, r3
 8018cdc:	fb01 3102 	mla	r1, r1, r2, r3
 8018ce0:	7882      	ldrb	r2, [r0, #2]
 8018ce2:	fb09 1902 	mla	r9, r9, r2, r1
 8018ce6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018cea:	f886 9002 	strb.w	r9, [r6, #2]
 8018cee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018cf0:	3603      	adds	r6, #3
 8018cf2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018cf8:	441c      	add	r4, r3
 8018cfa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018cfc:	4413      	add	r3, r2
 8018cfe:	9318      	str	r3, [sp, #96]	; 0x60
 8018d00:	e769      	b.n	8018bd6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8018d02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018d04:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8018d06:	441c      	add	r4, r3
 8018d08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018d0a:	443b      	add	r3, r7
 8018d0c:	9318      	str	r3, [sp, #96]	; 0x60
 8018d0e:	9b06      	ldr	r3, [sp, #24]
 8018d10:	3b01      	subs	r3, #1
 8018d12:	9306      	str	r3, [sp, #24]
 8018d14:	9b07      	ldr	r3, [sp, #28]
 8018d16:	3303      	adds	r3, #3
 8018d18:	9307      	str	r3, [sp, #28]
 8018d1a:	e73e      	b.n	8018b9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018d1c:	d026      	beq.n	8018d6c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8018d1e:	9b06      	ldr	r3, [sp, #24]
 8018d20:	9819      	ldr	r0, [sp, #100]	; 0x64
 8018d22:	3b01      	subs	r3, #1
 8018d24:	fb00 4003 	mla	r0, r0, r3, r4
 8018d28:	1400      	asrs	r0, r0, #16
 8018d2a:	f53f af52 	bmi.w	8018bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018d2e:	3901      	subs	r1, #1
 8018d30:	4288      	cmp	r0, r1
 8018d32:	f6bf af4e 	bge.w	8018bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018d36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018d38:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018d3a:	fb01 0303 	mla	r3, r1, r3, r0
 8018d3e:	141b      	asrs	r3, r3, #16
 8018d40:	f53f af47 	bmi.w	8018bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018d44:	3a01      	subs	r2, #1
 8018d46:	4293      	cmp	r3, r2
 8018d48:	f6bf af43 	bge.w	8018bd2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8018d4c:	9b07      	ldr	r3, [sp, #28]
 8018d4e:	f8dd a018 	ldr.w	sl, [sp, #24]
 8018d52:	f103 0803 	add.w	r8, r3, #3
 8018d56:	f1ba 0f00 	cmp.w	sl, #0
 8018d5a:	dc71      	bgt.n	8018e40 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8018d5c:	9b06      	ldr	r3, [sp, #24]
 8018d5e:	9a07      	ldr	r2, [sp, #28]
 8018d60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018d64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018d68:	441a      	add	r2, r3
 8018d6a:	9207      	str	r2, [sp, #28]
 8018d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	f340 80f2 	ble.w	8018f58 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 8018d74:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018d78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018d7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018d7e:	eeb0 6a62 	vmov.f32	s12, s5
 8018d82:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018d86:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018d8a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d8e:	ee16 4a10 	vmov	r4, s12
 8018d92:	eeb0 6a43 	vmov.f32	s12, s6
 8018d96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018d9a:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 8018d9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018da2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018da6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018daa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018dae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018db2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018db6:	ee12 2a90 	vmov	r2, s5
 8018dba:	eef0 2a47 	vmov.f32	s5, s14
 8018dbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dc2:	ee13 2a10 	vmov	r2, s6
 8018dc6:	9319      	str	r3, [sp, #100]	; 0x64
 8018dc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018dca:	eeb0 3a67 	vmov.f32	s6, s15
 8018dce:	fb92 f3f3 	sdiv	r3, r2, r3
 8018dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8018dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018dd8:	3b01      	subs	r3, #1
 8018dda:	9309      	str	r3, [sp, #36]	; 0x24
 8018ddc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018dde:	bf08      	it	eq
 8018de0:	4613      	moveq	r3, r2
 8018de2:	9306      	str	r3, [sp, #24]
 8018de4:	e6cb      	b.n	8018b7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018de6:	b151      	cbz	r1, 8018dfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018de8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8018dec:	4660      	mov	r0, ip
 8018dee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018df2:	442a      	add	r2, r5
 8018df4:	4667      	mov	r7, ip
 8018df6:	e731      	b.n	8018c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018df8:	4660      	mov	r0, ip
 8018dfa:	4662      	mov	r2, ip
 8018dfc:	e72e      	b.n	8018c5c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8018dfe:	4660      	mov	r0, ip
 8018e00:	4662      	mov	r2, ip
 8018e02:	e7f7      	b.n	8018df4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8018e04:	f110 0e01 	adds.w	lr, r0, #1
 8018e08:	f53f af71 	bmi.w	8018cee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018e0c:	4572      	cmp	r2, lr
 8018e0e:	f6ff af6e 	blt.w	8018cee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018e12:	f117 0e01 	adds.w	lr, r7, #1
 8018e16:	f53f af6a 	bmi.w	8018cee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018e1a:	45f4      	cmp	ip, lr
 8018e1c:	f6ff af67 	blt.w	8018cee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018e20:	b212      	sxth	r2, r2
 8018e22:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8018e26:	fa0f f38c 	sxth.w	r3, ip
 8018e2a:	9200      	str	r2, [sp, #0]
 8018e2c:	4631      	mov	r1, r6
 8018e2e:	9a08      	ldr	r2, [sp, #32]
 8018e30:	9301      	str	r3, [sp, #4]
 8018e32:	462b      	mov	r3, r5
 8018e34:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8018e38:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018e3a:	f7ff fde9 	bl	8018a10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 8018e3e:	e756      	b.n	8018cee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018e40:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8018e42:	1426      	asrs	r6, r4, #16
 8018e44:	9818      	ldr	r0, [sp, #96]	; 0x60
 8018e46:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8018e4a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018e4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018e50:	1400      	asrs	r0, r0, #16
 8018e52:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8018e56:	fb02 6000 	mla	r0, r2, r0, r6
 8018e5a:	9e08      	ldr	r6, [sp, #32]
 8018e5c:	f816 e000 	ldrb.w	lr, [r6, r0]
 8018e60:	eb06 0c00 	add.w	ip, r6, r0
 8018e64:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018e68:	eb05 070e 	add.w	r7, r5, lr
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d064      	beq.n	8018f3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 8018e70:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8018e74:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018e78:	442e      	add	r6, r5
 8018e7a:	2900      	cmp	r1, #0
 8018e7c:	d066      	beq.n	8018f4c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 8018e7e:	eb0c 0002 	add.w	r0, ip, r2
 8018e82:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018e86:	7840      	ldrb	r0, [r0, #1]
 8018e88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e8c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8018e90:	442a      	add	r2, r5
 8018e92:	4428      	add	r0, r5
 8018e94:	b29b      	uxth	r3, r3
 8018e96:	f815 b00e 	ldrb.w	fp, [r5, lr]
 8018e9a:	b289      	uxth	r1, r1
 8018e9c:	f896 e000 	ldrb.w	lr, [r6]
 8018ea0:	f108 0803 	add.w	r8, r8, #3
 8018ea4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018ea8:	fb03 f901 	mul.w	r9, r3, r1
 8018eac:	011b      	lsls	r3, r3, #4
 8018eae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8018eb2:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8018eb6:	eba3 0309 	sub.w	r3, r3, r9
 8018eba:	b289      	uxth	r1, r1
 8018ebc:	b29b      	uxth	r3, r3
 8018ebe:	ebac 0c01 	sub.w	ip, ip, r1
 8018ec2:	fb03 fe0e 	mul.w	lr, r3, lr
 8018ec6:	fa1f fc8c 	uxth.w	ip, ip
 8018eca:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018ece:	f892 b000 	ldrb.w	fp, [r2]
 8018ed2:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018ed6:	f890 b000 	ldrb.w	fp, [r0]
 8018eda:	fb09 ee0b 	mla	lr, r9, fp, lr
 8018ede:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018ee2:	f808 ec06 	strb.w	lr, [r8, #-6]
 8018ee6:	f896 e001 	ldrb.w	lr, [r6, #1]
 8018eea:	f897 b001 	ldrb.w	fp, [r7, #1]
 8018eee:	fb03 fe0e 	mul.w	lr, r3, lr
 8018ef2:	fb0c ee0b 	mla	lr, ip, fp, lr
 8018ef6:	f892 b001 	ldrb.w	fp, [r2, #1]
 8018efa:	fb01 ee0b 	mla	lr, r1, fp, lr
 8018efe:	f890 b001 	ldrb.w	fp, [r0, #1]
 8018f02:	fb09 ee0b 	mla	lr, r9, fp, lr
 8018f06:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8018f0a:	f808 ec05 	strb.w	lr, [r8, #-5]
 8018f0e:	78b6      	ldrb	r6, [r6, #2]
 8018f10:	78bf      	ldrb	r7, [r7, #2]
 8018f12:	4373      	muls	r3, r6
 8018f14:	7896      	ldrb	r6, [r2, #2]
 8018f16:	7882      	ldrb	r2, [r0, #2]
 8018f18:	fb0c 3307 	mla	r3, ip, r7, r3
 8018f1c:	fb01 3306 	mla	r3, r1, r6, r3
 8018f20:	fb09 3902 	mla	r9, r9, r2, r3
 8018f24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8018f26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8018f28:	441c      	add	r4, r3
 8018f2a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8018f2c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018f30:	4413      	add	r3, r2
 8018f32:	f808 9c04 	strb.w	r9, [r8, #-4]
 8018f36:	9318      	str	r3, [sp, #96]	; 0x60
 8018f38:	e70d      	b.n	8018d56 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8018f3a:	b151      	cbz	r1, 8018f52 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 8018f3c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018f40:	4638      	mov	r0, r7
 8018f42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f46:	442a      	add	r2, r5
 8018f48:	463e      	mov	r6, r7
 8018f4a:	e7a3      	b.n	8018e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018f4c:	4638      	mov	r0, r7
 8018f4e:	463a      	mov	r2, r7
 8018f50:	e7a0      	b.n	8018e94 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8018f52:	4638      	mov	r0, r7
 8018f54:	463a      	mov	r2, r7
 8018f56:	e7f7      	b.n	8018f48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8018f58:	b00d      	add	sp, #52	; 0x34
 8018f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 8018f5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f62:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8018f66:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8018f6a:	2d00      	cmp	r5, #0
 8018f6c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8018f70:	fb05 700c 	mla	r0, r5, ip, r7
 8018f74:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8018f78:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 8018f7c:	eb02 0800 	add.w	r8, r2, r0
 8018f80:	f2c0 8118 	blt.w	80191b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8018f84:	45a9      	cmp	r9, r5
 8018f86:	f340 8115 	ble.w	80191b4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 8018f8a:	2f00      	cmp	r7, #0
 8018f8c:	f2c0 8110 	blt.w	80191b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8018f90:	45bc      	cmp	ip, r7
 8018f92:	f340 810d 	ble.w	80191b0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 8018f96:	5c12      	ldrb	r2, [r2, r0]
 8018f98:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018f9c:	1c7a      	adds	r2, r7, #1
 8018f9e:	f100 810c 	bmi.w	80191ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8018fa2:	4594      	cmp	ip, r2
 8018fa4:	f340 8109 	ble.w	80191ba <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8018fa8:	2c00      	cmp	r4, #0
 8018faa:	f000 8108 	beq.w	80191be <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 8018fae:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018fb2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018fb6:	3501      	adds	r5, #1
 8018fb8:	f100 8105 	bmi.w	80191c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8018fbc:	45a9      	cmp	r9, r5
 8018fbe:	f340 8102 	ble.w	80191c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8018fc2:	f1be 0f00 	cmp.w	lr, #0
 8018fc6:	f000 8101 	beq.w	80191cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 8018fca:	2f00      	cmp	r7, #0
 8018fcc:	f2c0 80f9 	blt.w	80191c2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8018fd0:	45bc      	cmp	ip, r7
 8018fd2:	f340 80f6 	ble.w	80191c2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8018fd6:	f818 200c 	ldrb.w	r2, [r8, ip]
 8018fda:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8018fde:	3701      	adds	r7, #1
 8018fe0:	f100 80f7 	bmi.w	80191d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8018fe4:	45bc      	cmp	ip, r7
 8018fe6:	f340 80f4 	ble.w	80191d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8018fea:	2c00      	cmp	r4, #0
 8018fec:	f000 80f3 	beq.w	80191d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8018ff0:	44c4      	add	ip, r8
 8018ff2:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8018ff6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8018ffa:	fa1f fc84 	uxth.w	ip, r4
 8018ffe:	fa1f f48e 	uxth.w	r4, lr
 8019002:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019006:	fb04 fe0c 	mul.w	lr, r4, ip
 801900a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801900e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019012:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019016:	ebac 070e 	sub.w	r7, ip, lr
 801901a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801901e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019022:	b2a4      	uxth	r4, r4
 8019024:	b2bf      	uxth	r7, r7
 8019026:	1b1b      	subs	r3, r3, r4
 8019028:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801902c:	fb07 fc0a 	mul.w	ip, r7, sl
 8019030:	b29b      	uxth	r3, r3
 8019032:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019036:	9300      	str	r3, [sp, #0]
 8019038:	fb04 cc09 	mla	ip, r4, r9, ip
 801903c:	fb0e cc08 	mla	ip, lr, r8, ip
 8019040:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019044:	9301      	str	r3, [sp, #4]
 8019046:	2b00      	cmp	r3, #0
 8019048:	f000 80af 	beq.w	80191aa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801904c:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019050:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019054:	fb0b fc0c 	mul.w	ip, fp, ip
 8019058:	fb0b f606 	mul.w	r6, fp, r6
 801905c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019060:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019064:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019068:	44dc      	add	ip, fp
 801906a:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801906e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019072:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019076:	fb0a fb0b 	mul.w	fp, sl, fp
 801907a:	fb0a fa00 	mul.w	sl, sl, r0
 801907e:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019082:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019086:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801908a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801908e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019092:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019096:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801909a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801909e:	0a36      	lsrs	r6, r6, #8
 80190a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80190a4:	44dc      	add	ip, fp
 80190a6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80190aa:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80190ae:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80190b2:	fb09 fb0b 	mul.w	fp, r9, fp
 80190b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80190ba:	fb09 f905 	mul.w	r9, r9, r5
 80190be:	ea4f 201b 	mov.w	r0, fp, lsr #8
 80190c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80190c6:	f509 7580 	add.w	r5, r9, #256	; 0x100
 80190ca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80190ce:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80190d2:	fb0c fc07 	mul.w	ip, ip, r7
 80190d6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 80190da:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 80190de:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80190e2:	4458      	add	r0, fp
 80190e4:	fb08 f505 	mul.w	r5, r8, r5
 80190e8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80190ec:	fb08 f802 	mul.w	r8, r8, r2
 80190f0:	0a00      	lsrs	r0, r0, #8
 80190f2:	0a2a      	lsrs	r2, r5, #8
 80190f4:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 80190f8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80190fc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019100:	4415      	add	r5, r2
 8019102:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019106:	0a2d      	lsrs	r5, r5, #8
 8019108:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801910c:	9a00      	ldr	r2, [sp, #0]
 801910e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019112:	fb03 cc02 	mla	ip, r3, r2, ip
 8019116:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801911a:	9b01      	ldr	r3, [sp, #4]
 801911c:	fb05 c50e 	mla	r5, r5, lr, ip
 8019120:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019124:	fb00 5004 	mla	r0, r0, r4, r5
 8019128:	0a00      	lsrs	r0, r0, #8
 801912a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801912e:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019132:	4378      	muls	r0, r7
 8019134:	fb02 0006 	mla	r0, r2, r6, r0
 8019138:	fb0e 0e08 	mla	lr, lr, r8, r0
 801913c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019140:	fb04 e000 	mla	r0, r4, r0, lr
 8019144:	0a00      	lsrs	r0, r0, #8
 8019146:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801914a:	4328      	orrs	r0, r5
 801914c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019150:	b2ad      	uxth	r5, r5
 8019152:	b2c4      	uxtb	r4, r0
 8019154:	436b      	muls	r3, r5
 8019156:	fb14 f405 	smulbb	r4, r4, r5
 801915a:	1c5a      	adds	r2, r3, #1
 801915c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019160:	780b      	ldrb	r3, [r1, #0]
 8019162:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019166:	b2d2      	uxtb	r2, r2
 8019168:	fb03 4302 	mla	r3, r3, r2, r4
 801916c:	b29b      	uxth	r3, r3
 801916e:	1c5c      	adds	r4, r3, #1
 8019170:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019174:	784c      	ldrb	r4, [r1, #1]
 8019176:	fb14 f402 	smulbb	r4, r4, r2
 801917a:	121b      	asrs	r3, r3, #8
 801917c:	700b      	strb	r3, [r1, #0]
 801917e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8019182:	fb03 4305 	mla	r3, r3, r5, r4
 8019186:	b29b      	uxth	r3, r3
 8019188:	1c5c      	adds	r4, r3, #1
 801918a:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801918e:	0c04      	lsrs	r4, r0, #16
 8019190:	7888      	ldrb	r0, [r1, #2]
 8019192:	121b      	asrs	r3, r3, #8
 8019194:	fb10 f002 	smulbb	r0, r0, r2
 8019198:	704b      	strb	r3, [r1, #1]
 801919a:	fb04 0005 	mla	r0, r4, r5, r0
 801919e:	b280      	uxth	r0, r0
 80191a0:	1c43      	adds	r3, r0, #1
 80191a2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80191a6:	1200      	asrs	r0, r0, #8
 80191a8:	7088      	strb	r0, [r1, #2]
 80191aa:	b003      	add	sp, #12
 80191ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191b0:	2600      	movs	r6, #0
 80191b2:	e6f3      	b.n	8018f9c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 80191b4:	2000      	movs	r0, #0
 80191b6:	4606      	mov	r6, r0
 80191b8:	e6fd      	b.n	8018fb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80191ba:	2000      	movs	r0, #0
 80191bc:	e6fb      	b.n	8018fb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80191be:	4620      	mov	r0, r4
 80191c0:	e6f9      	b.n	8018fb6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 80191c2:	2500      	movs	r5, #0
 80191c4:	e70b      	b.n	8018fde <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 80191c6:	2200      	movs	r2, #0
 80191c8:	4615      	mov	r5, r2
 80191ca:	e716      	b.n	8018ffa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80191cc:	4672      	mov	r2, lr
 80191ce:	4675      	mov	r5, lr
 80191d0:	e713      	b.n	8018ffa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80191d2:	2200      	movs	r2, #0
 80191d4:	e711      	b.n	8018ffa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 80191d6:	4622      	mov	r2, r4
 80191d8:	e70f      	b.n	8018ffa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

080191da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80191da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191de:	b09f      	sub	sp, #124	; 0x7c
 80191e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80191e2:	9309      	str	r3, [sp, #36]	; 0x24
 80191e4:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80191e6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 80191ea:	901d      	str	r0, [sp, #116]	; 0x74
 80191ec:	931c      	str	r3, [sp, #112]	; 0x70
 80191ee:	6850      	ldr	r0, [r2, #4]
 80191f0:	9119      	str	r1, [sp, #100]	; 0x64
 80191f2:	6812      	ldr	r2, [r2, #0]
 80191f4:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80191f6:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 80191fa:	fb00 1303 	mla	r3, r0, r3, r1
 80191fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019202:	18d3      	adds	r3, r2, r3
 8019204:	930c      	str	r3, [sp, #48]	; 0x30
 8019206:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	9312      	str	r3, [sp, #72]	; 0x48
 801920c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801920e:	685e      	ldr	r6, [r3, #4]
 8019210:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019214:	3604      	adds	r6, #4
 8019216:	930d      	str	r3, [sp, #52]	; 0x34
 8019218:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801921a:	2b00      	cmp	r3, #0
 801921c:	dc03      	bgt.n	8019226 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801921e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019220:	2b00      	cmp	r3, #0
 8019222:	f340 8378 	ble.w	8019916 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019226:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019228:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801922c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019230:	1e48      	subs	r0, r1, #1
 8019232:	1e57      	subs	r7, r2, #1
 8019234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019236:	2b00      	cmp	r3, #0
 8019238:	f340 818c 	ble.w	8019554 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801923c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801923e:	142b      	asrs	r3, r5, #16
 8019240:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019244:	d406      	bmi.n	8019254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019246:	4584      	cmp	ip, r0
 8019248:	da04      	bge.n	8019254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801924a:	2b00      	cmp	r3, #0
 801924c:	db02      	blt.n	8019254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801924e:	42bb      	cmp	r3, r7
 8019250:	f2c0 8181 	blt.w	8019556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019254:	f11c 0c01 	adds.w	ip, ip, #1
 8019258:	f100 816f 	bmi.w	801953a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801925c:	4561      	cmp	r1, ip
 801925e:	f2c0 816c 	blt.w	801953a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019262:	3301      	adds	r3, #1
 8019264:	f100 8169 	bmi.w	801953a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019268:	429a      	cmp	r2, r3
 801926a:	f2c0 8166 	blt.w	801953a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801926e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019270:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019272:	931a      	str	r3, [sp, #104]	; 0x68
 8019274:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019276:	2b00      	cmp	r3, #0
 8019278:	f340 818c 	ble.w	8019594 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801927c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801927e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019282:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019286:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801928a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801928c:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019290:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019292:	141b      	asrs	r3, r3, #16
 8019294:	f100 81d0 	bmi.w	8019638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019298:	f100 38ff 	add.w	r8, r0, #4294967295
 801929c:	4543      	cmp	r3, r8
 801929e:	f280 81cb 	bge.w	8019638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80192a2:	f1bc 0f00 	cmp.w	ip, #0
 80192a6:	f2c0 81c7 	blt.w	8019638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80192aa:	f10e 38ff 	add.w	r8, lr, #4294967295
 80192ae:	45c4      	cmp	ip, r8
 80192b0:	f280 81c2 	bge.w	8019638 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80192b4:	b200      	sxth	r0, r0
 80192b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80192b8:	fb0c 3300 	mla	r3, ip, r0, r3
 80192bc:	eb04 0803 	add.w	r8, r4, r3
 80192c0:	5ce3      	ldrb	r3, [r4, r3]
 80192c2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80192c6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80192ca:	2a00      	cmp	r2, #0
 80192cc:	f000 81a9 	beq.w	8019622 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 80192d0:	f898 c001 	ldrb.w	ip, [r8, #1]
 80192d4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 80192d8:	940e      	str	r4, [sp, #56]	; 0x38
 80192da:	0e24      	lsrs	r4, r4, #24
 80192dc:	9415      	str	r4, [sp, #84]	; 0x54
 80192de:	b179      	cbz	r1, 8019300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80192e0:	eb08 0c00 	add.w	ip, r8, r0
 80192e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 80192e8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80192ec:	900a      	str	r0, [sp, #40]	; 0x28
 80192ee:	0e00      	lsrs	r0, r0, #24
 80192f0:	9013      	str	r0, [sp, #76]	; 0x4c
 80192f2:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80192f6:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 80192fa:	900f      	str	r0, [sp, #60]	; 0x3c
 80192fc:	0e00      	lsrs	r0, r0, #24
 80192fe:	9016      	str	r0, [sp, #88]	; 0x58
 8019300:	b292      	uxth	r2, r2
 8019302:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019304:	b289      	uxth	r1, r1
 8019306:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019308:	fb02 f901 	mul.w	r9, r2, r1
 801930c:	0112      	lsls	r2, r2, #4
 801930e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019312:	eba2 0809 	sub.w	r8, r2, r9
 8019316:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801931a:	b289      	uxth	r1, r1
 801931c:	fa1f f888 	uxth.w	r8, r8
 8019320:	1a52      	subs	r2, r2, r1
 8019322:	fb08 f000 	mul.w	r0, r8, r0
 8019326:	b292      	uxth	r2, r2
 8019328:	fb02 000e 	mla	r0, r2, lr, r0
 801932c:	fb01 0004 	mla	r0, r1, r4, r0
 8019330:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019332:	fb09 0004 	mla	r0, r9, r4, r0
 8019336:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801933a:	2800      	cmp	r0, #0
 801933c:	f000 80f2 	beq.w	8019524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019340:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019344:	d01b      	beq.n	801937e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8019346:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801934a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801934e:	fb0e fa0a 	mul.w	sl, lr, sl
 8019352:	fb0e fe03 	mul.w	lr, lr, r3
 8019356:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801935a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801935e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019362:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019366:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801936a:	4453      	add	r3, sl
 801936c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019370:	0a1b      	lsrs	r3, r3, #8
 8019372:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019376:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801937a:	ea43 030c 	orr.w	r3, r3, ip
 801937e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019380:	2cff      	cmp	r4, #255	; 0xff
 8019382:	d021      	beq.n	80193c8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019384:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019386:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801938a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801938c:	fb04 fb0b 	mul.w	fp, r4, fp
 8019390:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019392:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019396:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019398:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801939c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80193a0:	fb04 fa0a 	mul.w	sl, r4, sl
 80193a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80193a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80193ac:	44de      	add	lr, fp
 80193ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80193b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80193b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80193ba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80193be:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80193c2:	ea4e 040a 	orr.w	r4, lr, sl
 80193c6:	940e      	str	r4, [sp, #56]	; 0x38
 80193c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193ca:	2cff      	cmp	r4, #255	; 0xff
 80193cc:	d021      	beq.n	8019412 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 80193ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80193d0:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 80193d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193d6:	fb04 fb0b 	mul.w	fp, r4, fp
 80193da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80193dc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80193e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80193e2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80193e6:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80193ea:	fb04 fa0a 	mul.w	sl, r4, sl
 80193ee:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80193f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80193f6:	44de      	add	lr, fp
 80193f8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80193fc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019400:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019404:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019408:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801940c:	ea4e 040a 	orr.w	r4, lr, sl
 8019410:	940a      	str	r4, [sp, #40]	; 0x28
 8019412:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019414:	2cff      	cmp	r4, #255	; 0xff
 8019416:	d021      	beq.n	801945c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8019418:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801941a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801941e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019420:	fb04 fb0b 	mul.w	fp, r4, fp
 8019424:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019426:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801942a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801942c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019430:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019434:	fb04 fa0a 	mul.w	sl, r4, sl
 8019438:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801943c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019440:	44de      	add	lr, fp
 8019442:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019446:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801944a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801944e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019452:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019456:	ea4e 040a 	orr.w	r4, lr, sl
 801945a:	940f      	str	r4, [sp, #60]	; 0x3c
 801945c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801945e:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019466:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801946a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801946c:	fb08 fc0c 	mul.w	ip, r8, ip
 8019470:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019474:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019478:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801947a:	fb01 cc0e 	mla	ip, r1, lr, ip
 801947e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019482:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019484:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019488:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801948c:	fb08 f80e 	mul.w	r8, r8, lr
 8019490:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019494:	fb02 8303 	mla	r3, r2, r3, r8
 8019498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801949a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801949e:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80194a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80194a4:	fb01 330a 	mla	r3, r1, sl, r3
 80194a8:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 80194ac:	fb09 3901 	mla	r9, r9, r1, r3
 80194b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80194b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80194b4:	4343      	muls	r3, r0
 80194b6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80194ba:	1c58      	adds	r0, r3, #1
 80194bc:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80194c0:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 80194c4:	ea4c 0c09 	orr.w	ip, ip, r9
 80194c8:	783b      	ldrb	r3, [r7, #0]
 80194ca:	fa5f f28c 	uxtb.w	r2, ip
 80194ce:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 80194d2:	fb12 f201 	smulbb	r2, r2, r1
 80194d6:	b2c0      	uxtb	r0, r0
 80194d8:	fb03 2300 	mla	r3, r3, r0, r2
 80194dc:	b29b      	uxth	r3, r3
 80194de:	1c5a      	adds	r2, r3, #1
 80194e0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80194e4:	787a      	ldrb	r2, [r7, #1]
 80194e6:	fb12 f200 	smulbb	r2, r2, r0
 80194ea:	121b      	asrs	r3, r3, #8
 80194ec:	703b      	strb	r3, [r7, #0]
 80194ee:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80194f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80194f6:	fb03 2301 	mla	r3, r3, r1, r2
 80194fa:	b29b      	uxth	r3, r3
 80194fc:	1c5a      	adds	r2, r3, #1
 80194fe:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019502:	121b      	asrs	r3, r3, #8
 8019504:	707b      	strb	r3, [r7, #1]
 8019506:	78bb      	ldrb	r3, [r7, #2]
 8019508:	fb13 f000 	smulbb	r0, r3, r0
 801950c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019510:	fa1f fc8c 	uxth.w	ip, ip
 8019514:	f10c 0301 	add.w	r3, ip, #1
 8019518:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801951c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019520:	f887 c002 	strb.w	ip, [r7, #2]
 8019524:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019526:	3703      	adds	r7, #3
 8019528:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801952a:	441a      	add	r2, r3
 801952c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801952e:	441d      	add	r5, r3
 8019530:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019532:	9229      	str	r2, [sp, #164]	; 0xa4
 8019534:	3b01      	subs	r3, #1
 8019536:	931a      	str	r3, [sp, #104]	; 0x68
 8019538:	e69c      	b.n	8019274 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801953a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801953c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801953e:	441c      	add	r4, r3
 8019540:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019542:	441d      	add	r5, r3
 8019544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019546:	9429      	str	r4, [sp, #164]	; 0xa4
 8019548:	3b01      	subs	r3, #1
 801954a:	9309      	str	r3, [sp, #36]	; 0x24
 801954c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801954e:	3303      	adds	r3, #3
 8019550:	930c      	str	r3, [sp, #48]	; 0x30
 8019552:	e66f      	b.n	8019234 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019554:	d026      	beq.n	80195a4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8019556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019558:	982b      	ldr	r0, [sp, #172]	; 0xac
 801955a:	3b01      	subs	r3, #1
 801955c:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801955e:	fb00 4003 	mla	r0, r0, r3, r4
 8019562:	1400      	asrs	r0, r0, #16
 8019564:	f53f ae83 	bmi.w	801926e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019568:	3901      	subs	r1, #1
 801956a:	4288      	cmp	r0, r1
 801956c:	f6bf ae7f 	bge.w	801926e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019570:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8019572:	fb01 5303 	mla	r3, r1, r3, r5
 8019576:	141b      	asrs	r3, r3, #16
 8019578:	f53f ae79 	bmi.w	801926e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801957c:	3a01      	subs	r2, #1
 801957e:	4293      	cmp	r3, r2
 8019580:	f6bf ae75 	bge.w	801926e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019584:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019586:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801958a:	f103 0e03 	add.w	lr, r3, #3
 801958e:	f1bb 0f00 	cmp.w	fp, #0
 8019592:	dc71      	bgt.n	8019678 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8019594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019596:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801959a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801959c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80195a0:	4423      	add	r3, r4
 80195a2:	930c      	str	r3, [sp, #48]	; 0x30
 80195a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	f340 81b5 	ble.w	8019916 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 80195ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80195b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80195b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80195b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80195ba:	eef0 6a62 	vmov.f32	s13, s5
 80195be:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80195c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80195c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195ca:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 80195ce:	eef0 6a43 	vmov.f32	s13, s6
 80195d2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80195d6:	ee16 5a90 	vmov	r5, s13
 80195da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80195de:	ee61 7a27 	vmul.f32	s15, s2, s15
 80195e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80195e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80195ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80195ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80195f2:	ee12 2a90 	vmov	r2, s5
 80195f6:	eef0 2a47 	vmov.f32	s5, s14
 80195fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80195fe:	ee13 2a10 	vmov	r2, s6
 8019602:	932b      	str	r3, [sp, #172]	; 0xac
 8019604:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019606:	eeb0 3a67 	vmov.f32	s6, s15
 801960a:	fb92 f3f3 	sdiv	r3, r2, r3
 801960e:	932c      	str	r3, [sp, #176]	; 0xb0
 8019610:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019612:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019614:	3b01      	subs	r3, #1
 8019616:	9319      	str	r3, [sp, #100]	; 0x64
 8019618:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801961a:	bf08      	it	eq
 801961c:	4613      	moveq	r3, r2
 801961e:	9309      	str	r3, [sp, #36]	; 0x24
 8019620:	e5fa      	b.n	8019218 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8019622:	2900      	cmp	r1, #0
 8019624:	f43f ae6c 	beq.w	8019300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019628:	f818 0000 	ldrb.w	r0, [r8, r0]
 801962c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019630:	900a      	str	r0, [sp, #40]	; 0x28
 8019632:	0e00      	lsrs	r0, r0, #24
 8019634:	9013      	str	r0, [sp, #76]	; 0x4c
 8019636:	e663      	b.n	8019300 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019638:	f113 0801 	adds.w	r8, r3, #1
 801963c:	f53f af72 	bmi.w	8019524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019640:	4540      	cmp	r0, r8
 8019642:	f6ff af6f 	blt.w	8019524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019646:	f11c 0801 	adds.w	r8, ip, #1
 801964a:	f53f af6b 	bmi.w	8019524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801964e:	45c6      	cmp	lr, r8
 8019650:	f6ff af68 	blt.w	8019524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019654:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8019656:	b200      	sxth	r0, r0
 8019658:	9302      	str	r3, [sp, #8]
 801965a:	fa0f f38e 	sxth.w	r3, lr
 801965e:	9000      	str	r0, [sp, #0]
 8019660:	9301      	str	r3, [sp, #4]
 8019662:	4633      	mov	r3, r6
 8019664:	981d      	ldr	r0, [sp, #116]	; 0x74
 8019666:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801966a:	e9cd c203 	strd	ip, r2, [sp, #12]
 801966e:	4639      	mov	r1, r7
 8019670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019672:	f7ff fc74 	bl	8018f5e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 8019676:	e755      	b.n	8019524 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019678:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801967a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801967e:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019680:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019684:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019686:	1427      	asrs	r7, r4, #16
 8019688:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801968a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801968e:	142b      	asrs	r3, r5, #16
 8019690:	fb01 7303 	mla	r3, r1, r3, r7
 8019694:	18e7      	adds	r7, r4, r3
 8019696:	5ce3      	ldrb	r3, [r4, r3]
 8019698:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801969c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80196a0:	2a00      	cmp	r2, #0
 80196a2:	f000 812e 	beq.w	8019902 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 80196a6:	f897 8001 	ldrb.w	r8, [r7, #1]
 80196aa:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 80196ae:	9410      	str	r4, [sp, #64]	; 0x40
 80196b0:	0e24      	lsrs	r4, r4, #24
 80196b2:	9417      	str	r4, [sp, #92]	; 0x5c
 80196b4:	b170      	cbz	r0, 80196d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 80196b6:	eb07 0801 	add.w	r8, r7, r1
 80196ba:	5c79      	ldrb	r1, [r7, r1]
 80196bc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80196c0:	910b      	str	r1, [sp, #44]	; 0x2c
 80196c2:	0e09      	lsrs	r1, r1, #24
 80196c4:	9114      	str	r1, [sp, #80]	; 0x50
 80196c6:	f898 1001 	ldrb.w	r1, [r8, #1]
 80196ca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80196ce:	9111      	str	r1, [sp, #68]	; 0x44
 80196d0:	0e09      	lsrs	r1, r1, #24
 80196d2:	9118      	str	r1, [sp, #96]	; 0x60
 80196d4:	b292      	uxth	r2, r2
 80196d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80196d8:	b280      	uxth	r0, r0
 80196da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80196dc:	fb02 f900 	mul.w	r9, r2, r0
 80196e0:	0112      	lsls	r2, r2, #4
 80196e2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80196e6:	eba2 0809 	sub.w	r8, r2, r9
 80196ea:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80196ee:	b280      	uxth	r0, r0
 80196f0:	fa1f f888 	uxth.w	r8, r8
 80196f4:	1a12      	subs	r2, r2, r0
 80196f6:	fb08 f101 	mul.w	r1, r8, r1
 80196fa:	b292      	uxth	r2, r2
 80196fc:	fb02 110c 	mla	r1, r2, ip, r1
 8019700:	fb00 1104 	mla	r1, r0, r4, r1
 8019704:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8019706:	fb09 1104 	mla	r1, r9, r4, r1
 801970a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801970e:	2900      	cmp	r1, #0
 8019710:	f000 80ec 	beq.w	80198ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8019714:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8019718:	d019      	beq.n	801974e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801971a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801971e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019722:	fb0c fa0a 	mul.w	sl, ip, sl
 8019726:	fb0c fc03 	mul.w	ip, ip, r3
 801972a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801972e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019732:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 8019736:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801973a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801973e:	4453      	add	r3, sl
 8019740:	0a3f      	lsrs	r7, r7, #8
 8019742:	0a1b      	lsrs	r3, r3, #8
 8019744:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8019748:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801974c:	433b      	orrs	r3, r7
 801974e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019750:	2cff      	cmp	r4, #255	; 0xff
 8019752:	d020      	beq.n	8019796 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 8019754:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019756:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801975a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801975c:	4367      	muls	r7, r4
 801975e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019760:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8019764:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019768:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801976a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801976e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019772:	fb04 fa0a 	mul.w	sl, r4, sl
 8019776:	44bc      	add	ip, r7
 8019778:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801977c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019780:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019784:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019788:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801978c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019790:	ea4c 040a 	orr.w	r4, ip, sl
 8019794:	9410      	str	r4, [sp, #64]	; 0x40
 8019796:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8019798:	2cff      	cmp	r4, #255	; 0xff
 801979a:	d020      	beq.n	80197de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801979c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801979e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80197a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80197a4:	4367      	muls	r7, r4
 80197a6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80197a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80197ac:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80197b0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80197b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80197b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80197ba:	fb04 fa0a 	mul.w	sl, r4, sl
 80197be:	44bc      	add	ip, r7
 80197c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80197c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80197c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80197cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80197d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80197d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80197d8:	ea4c 040a 	orr.w	r4, ip, sl
 80197dc:	940b      	str	r4, [sp, #44]	; 0x2c
 80197de:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80197e0:	2cff      	cmp	r4, #255	; 0xff
 80197e2:	d020      	beq.n	8019826 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80197e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80197e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 80197ea:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80197ec:	4367      	muls	r7, r4
 80197ee:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80197f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80197f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 80197f8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80197fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80197fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019802:	fb04 fa0a 	mul.w	sl, r4, sl
 8019806:	44bc      	add	ip, r7
 8019808:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801980c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019810:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019814:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019818:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801981c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019820:	ea4c 040a 	orr.w	r4, ip, sl
 8019824:	9411      	str	r4, [sp, #68]	; 0x44
 8019826:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019828:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801982c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019830:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 8019834:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019836:	fb08 f707 	mul.w	r7, r8, r7
 801983a:	fb02 770c 	mla	r7, r2, ip, r7
 801983e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019842:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8019844:	fb00 770c 	mla	r7, r0, ip, r7
 8019848:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801984c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801984e:	fb09 770c 	mla	r7, r9, ip, r7
 8019852:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 8019856:	fb08 f80c 	mul.w	r8, r8, ip
 801985a:	0a3f      	lsrs	r7, r7, #8
 801985c:	fb02 8303 	mla	r3, r2, r3, r8
 8019860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019862:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8019866:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801986a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801986c:	fb00 330a 	mla	r3, r0, sl, r3
 8019870:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8019874:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019876:	fb09 3c0c 	mla	ip, r9, ip, r3
 801987a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801987c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019880:	434b      	muls	r3, r1
 8019882:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019886:	1c59      	adds	r1, r3, #1
 8019888:	ea47 070c 	orr.w	r7, r7, ip
 801988c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8019890:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8019894:	b2fa      	uxtb	r2, r7
 8019896:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801989a:	fb12 f200 	smulbb	r2, r2, r0
 801989e:	b2c9      	uxtb	r1, r1
 80198a0:	fb03 2301 	mla	r3, r3, r1, r2
 80198a4:	b29b      	uxth	r3, r3
 80198a6:	1c5a      	adds	r2, r3, #1
 80198a8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80198ac:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 80198b0:	fb12 f201 	smulbb	r2, r2, r1
 80198b4:	121b      	asrs	r3, r3, #8
 80198b6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 80198ba:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80198be:	0c3f      	lsrs	r7, r7, #16
 80198c0:	fb03 2300 	mla	r3, r3, r0, r2
 80198c4:	b29b      	uxth	r3, r3
 80198c6:	1c5a      	adds	r2, r3, #1
 80198c8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80198cc:	121b      	asrs	r3, r3, #8
 80198ce:	f80e 3c02 	strb.w	r3, [lr, #-2]
 80198d2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80198d6:	fb13 f101 	smulbb	r1, r3, r1
 80198da:	fb07 1700 	mla	r7, r7, r0, r1
 80198de:	b2bf      	uxth	r7, r7
 80198e0:	1c7b      	adds	r3, r7, #1
 80198e2:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 80198e6:	123f      	asrs	r7, r7, #8
 80198e8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 80198ec:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80198ee:	f10e 0e03 	add.w	lr, lr, #3
 80198f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80198f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80198f8:	441a      	add	r2, r3
 80198fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80198fc:	9229      	str	r2, [sp, #164]	; 0xa4
 80198fe:	441d      	add	r5, r3
 8019900:	e645      	b.n	801958e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8019902:	2800      	cmp	r0, #0
 8019904:	f43f aee6 	beq.w	80196d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019908:	5c79      	ldrb	r1, [r7, r1]
 801990a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801990e:	910b      	str	r1, [sp, #44]	; 0x2c
 8019910:	0e09      	lsrs	r1, r1, #24
 8019912:	9114      	str	r1, [sp, #80]	; 0x50
 8019914:	e6de      	b.n	80196d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8019916:	b01f      	add	sp, #124	; 0x7c
 8019918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801991c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801991c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019920:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8019924:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8019928:	2d00      	cmp	r5, #0
 801992a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801992e:	fb05 700e 	mla	r0, r5, lr, r7
 8019932:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 8019936:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801993a:	eb02 0800 	add.w	r8, r2, r0
 801993e:	f2c0 8105 	blt.w	8019b4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8019942:	45a9      	cmp	r9, r5
 8019944:	f340 8102 	ble.w	8019b4c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8019948:	2f00      	cmp	r7, #0
 801994a:	f2c0 80fd 	blt.w	8019b48 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801994e:	45be      	cmp	lr, r7
 8019950:	f340 80fa 	ble.w	8019b48 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8019954:	5c12      	ldrb	r2, [r2, r0]
 8019956:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801995a:	1c7a      	adds	r2, r7, #1
 801995c:	f100 80f9 	bmi.w	8019b52 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8019960:	4596      	cmp	lr, r2
 8019962:	f340 80f6 	ble.w	8019b52 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8019966:	2c00      	cmp	r4, #0
 8019968:	f000 80f5 	beq.w	8019b56 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801996c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019970:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019974:	3501      	adds	r5, #1
 8019976:	f100 80f2 	bmi.w	8019b5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801997a:	45a9      	cmp	r9, r5
 801997c:	f340 80ef 	ble.w	8019b5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8019980:	f1bc 0f00 	cmp.w	ip, #0
 8019984:	f000 80ee 	beq.w	8019b64 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8019988:	2f00      	cmp	r7, #0
 801998a:	f2c0 80e6 	blt.w	8019b5a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801998e:	45be      	cmp	lr, r7
 8019990:	f340 80e3 	ble.w	8019b5a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8019994:	f818 200e 	ldrb.w	r2, [r8, lr]
 8019998:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801999c:	3701      	adds	r7, #1
 801999e:	f100 80e4 	bmi.w	8019b6a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80199a2:	45be      	cmp	lr, r7
 80199a4:	f340 80e1 	ble.w	8019b6a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 80199a8:	2c00      	cmp	r4, #0
 80199aa:	f000 80e0 	beq.w	8019b6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 80199ae:	44c6      	add	lr, r8
 80199b0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80199b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80199b8:	b2a3      	uxth	r3, r4
 80199ba:	fa1f fc8c 	uxth.w	ip, ip
 80199be:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 80199c2:	fb0c fe03 	mul.w	lr, ip, r3
 80199c6:	011b      	lsls	r3, r3, #4
 80199c8:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 80199cc:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 80199d0:	eba3 070e 	sub.w	r7, r3, lr
 80199d4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80199d8:	ea4f 6915 	mov.w	r9, r5, lsr #24
 80199dc:	fa1f f48c 	uxth.w	r4, ip
 80199e0:	b2bf      	uxth	r7, r7
 80199e2:	1b1b      	subs	r3, r3, r4
 80199e4:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80199e8:	fb07 fc0a 	mul.w	ip, r7, sl
 80199ec:	b29b      	uxth	r3, r3
 80199ee:	fb03 cc0b 	mla	ip, r3, fp, ip
 80199f2:	9300      	str	r3, [sp, #0]
 80199f4:	fb04 cc09 	mla	ip, r4, r9, ip
 80199f8:	fb0e cc08 	mla	ip, lr, r8, ip
 80199fc:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019a00:	9301      	str	r3, [sp, #4]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	f000 809d 	beq.w	8019b42 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8019a08:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019a0c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019a10:	fb0b fc0c 	mul.w	ip, fp, ip
 8019a14:	fb0b f606 	mul.w	r6, fp, r6
 8019a18:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019a1c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019a20:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019a24:	44dc      	add	ip, fp
 8019a26:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8019a2a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019a2e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a32:	fb0a fb0b 	mul.w	fp, sl, fp
 8019a36:	fb0a fa00 	mul.w	sl, sl, r0
 8019a3a:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019a3e:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019a42:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019a46:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019a4a:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019a4e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a52:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019a56:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a5a:	0a36      	lsrs	r6, r6, #8
 8019a5c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019a60:	44dc      	add	ip, fp
 8019a62:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019a66:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019a6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019a6e:	fb09 fb0b 	mul.w	fp, r9, fp
 8019a72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019a76:	fb09 f905 	mul.w	r9, r9, r5
 8019a7a:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019a7e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019a82:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019a86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019a8a:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019a8e:	fb0c fc07 	mul.w	ip, ip, r7
 8019a92:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019a96:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019a9a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019a9e:	4458      	add	r0, fp
 8019aa0:	fb08 f505 	mul.w	r5, r8, r5
 8019aa4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019aa8:	fb08 f802 	mul.w	r8, r8, r2
 8019aac:	0a00      	lsrs	r0, r0, #8
 8019aae:	0a2a      	lsrs	r2, r5, #8
 8019ab0:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019ab4:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019ab8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019abc:	4415      	add	r5, r2
 8019abe:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019ac2:	0a2d      	lsrs	r5, r5, #8
 8019ac4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019ac8:	9a00      	ldr	r2, [sp, #0]
 8019aca:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019ace:	fb03 cc02 	mla	ip, r3, r2, ip
 8019ad2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019ad6:	9b01      	ldr	r3, [sp, #4]
 8019ad8:	fb05 c50e 	mla	r5, r5, lr, ip
 8019adc:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019ae0:	43db      	mvns	r3, r3
 8019ae2:	fb00 5004 	mla	r0, r0, r4, r5
 8019ae6:	b2db      	uxtb	r3, r3
 8019ae8:	0a00      	lsrs	r0, r0, #8
 8019aea:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8019aee:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019af2:	4378      	muls	r0, r7
 8019af4:	fb02 0006 	mla	r0, r2, r6, r0
 8019af8:	780a      	ldrb	r2, [r1, #0]
 8019afa:	fb0e 0e08 	mla	lr, lr, r8, r0
 8019afe:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019b02:	fb04 e000 	mla	r0, r4, r0, lr
 8019b06:	fb02 f403 	mul.w	r4, r2, r3
 8019b0a:	0a00      	lsrs	r0, r0, #8
 8019b0c:	1c62      	adds	r2, r4, #1
 8019b0e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019b12:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019b16:	4328      	orrs	r0, r5
 8019b18:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8019b1c:	700a      	strb	r2, [r1, #0]
 8019b1e:	784a      	ldrb	r2, [r1, #1]
 8019b20:	435a      	muls	r2, r3
 8019b22:	1c54      	adds	r4, r2, #1
 8019b24:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8019b28:	0a02      	lsrs	r2, r0, #8
 8019b2a:	0c00      	lsrs	r0, r0, #16
 8019b2c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019b30:	704a      	strb	r2, [r1, #1]
 8019b32:	788a      	ldrb	r2, [r1, #2]
 8019b34:	4353      	muls	r3, r2
 8019b36:	1c5a      	adds	r2, r3, #1
 8019b38:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019b3c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019b40:	7088      	strb	r0, [r1, #2]
 8019b42:	b003      	add	sp, #12
 8019b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b48:	2600      	movs	r6, #0
 8019b4a:	e706      	b.n	801995a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8019b4c:	2000      	movs	r0, #0
 8019b4e:	4606      	mov	r6, r0
 8019b50:	e710      	b.n	8019974 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019b52:	2000      	movs	r0, #0
 8019b54:	e70e      	b.n	8019974 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019b56:	4620      	mov	r0, r4
 8019b58:	e70c      	b.n	8019974 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8019b5a:	2500      	movs	r5, #0
 8019b5c:	e71e      	b.n	801999c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8019b5e:	2200      	movs	r2, #0
 8019b60:	4615      	mov	r5, r2
 8019b62:	e729      	b.n	80199b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019b64:	4662      	mov	r2, ip
 8019b66:	4665      	mov	r5, ip
 8019b68:	e726      	b.n	80199b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	e724      	b.n	80199b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8019b6e:	4622      	mov	r2, r4
 8019b70:	e722      	b.n	80199b8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08019b72 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019b72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b76:	b09b      	sub	sp, #108	; 0x6c
 8019b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019b7c:	9218      	str	r2, [sp, #96]	; 0x60
 8019b7e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019b80:	9019      	str	r0, [sp, #100]	; 0x64
 8019b82:	9116      	str	r1, [sp, #88]	; 0x58
 8019b84:	6850      	ldr	r0, [r2, #4]
 8019b86:	9307      	str	r3, [sp, #28]
 8019b88:	6812      	ldr	r2, [r2, #0]
 8019b8a:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8019b8c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8019b90:	fb00 1303 	mla	r3, r0, r3, r1
 8019b94:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b98:	18d3      	adds	r3, r2, r3
 8019b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8019b9c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8019ba2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019ba4:	685e      	ldr	r6, [r3, #4]
 8019ba6:	3604      	adds	r6, #4
 8019ba8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019baa:	2b00      	cmp	r3, #0
 8019bac:	dc03      	bgt.n	8019bb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8019bae:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	f340 834f 	ble.w	801a254 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8019bb6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019bb8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019bbc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019bc0:	1e48      	subs	r0, r1, #1
 8019bc2:	1e57      	subs	r7, r2, #1
 8019bc4:	9b07      	ldr	r3, [sp, #28]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	f340 8178 	ble.w	8019ebc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019bcc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019bce:	142b      	asrs	r3, r5, #16
 8019bd0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019bd4:	d406      	bmi.n	8019be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019bd6:	4584      	cmp	ip, r0
 8019bd8:	da04      	bge.n	8019be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	db02      	blt.n	8019be4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019bde:	42bb      	cmp	r3, r7
 8019be0:	f2c0 816d 	blt.w	8019ebe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8019be4:	f11c 0c01 	adds.w	ip, ip, #1
 8019be8:	f100 815b 	bmi.w	8019ea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019bec:	4561      	cmp	r1, ip
 8019bee:	f2c0 8158 	blt.w	8019ea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019bf2:	3301      	adds	r3, #1
 8019bf4:	f100 8155 	bmi.w	8019ea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019bf8:	429a      	cmp	r2, r3
 8019bfa:	f2c0 8152 	blt.w	8019ea2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8019bfe:	9b07      	ldr	r3, [sp, #28]
 8019c00:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019c02:	9317      	str	r3, [sp, #92]	; 0x5c
 8019c04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	f340 8178 	ble.w	8019efc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8019c0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019c0e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019c12:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019c16:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019c1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019c1c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8019c20:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019c22:	141b      	asrs	r3, r3, #16
 8019c24:	f100 81ba 	bmi.w	8019f9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019c28:	f101 38ff 	add.w	r8, r1, #4294967295
 8019c2c:	4543      	cmp	r3, r8
 8019c2e:	f280 81b5 	bge.w	8019f9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019c32:	f1bc 0f00 	cmp.w	ip, #0
 8019c36:	f2c0 81b1 	blt.w	8019f9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019c3a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019c3e:	45c4      	cmp	ip, r8
 8019c40:	f280 81ac 	bge.w	8019f9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8019c44:	b209      	sxth	r1, r1
 8019c46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019c48:	fb0c 3301 	mla	r3, ip, r1, r3
 8019c4c:	eb04 0803 	add.w	r8, r4, r3
 8019c50:	5ce3      	ldrb	r3, [r4, r3]
 8019c52:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019c56:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019c5a:	2a00      	cmp	r2, #0
 8019c5c:	f000 8193 	beq.w	8019f86 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8019c60:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019c64:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019c68:	940b      	str	r4, [sp, #44]	; 0x2c
 8019c6a:	0e24      	lsrs	r4, r4, #24
 8019c6c:	9412      	str	r4, [sp, #72]	; 0x48
 8019c6e:	b178      	cbz	r0, 8019c90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019c70:	eb08 0c01 	add.w	ip, r8, r1
 8019c74:	f818 1001 	ldrb.w	r1, [r8, r1]
 8019c78:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019c7c:	9108      	str	r1, [sp, #32]
 8019c7e:	0e09      	lsrs	r1, r1, #24
 8019c80:	9110      	str	r1, [sp, #64]	; 0x40
 8019c82:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8019c86:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019c8a:	910c      	str	r1, [sp, #48]	; 0x30
 8019c8c:	0e09      	lsrs	r1, r1, #24
 8019c8e:	9113      	str	r1, [sp, #76]	; 0x4c
 8019c90:	b292      	uxth	r2, r2
 8019c92:	9912      	ldr	r1, [sp, #72]	; 0x48
 8019c94:	b280      	uxth	r0, r0
 8019c96:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019c98:	fb02 f900 	mul.w	r9, r2, r0
 8019c9c:	0112      	lsls	r2, r2, #4
 8019c9e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8019ca2:	eba2 0809 	sub.w	r8, r2, r9
 8019ca6:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019caa:	b280      	uxth	r0, r0
 8019cac:	fa1f f888 	uxth.w	r8, r8
 8019cb0:	1a12      	subs	r2, r2, r0
 8019cb2:	fb08 f101 	mul.w	r1, r8, r1
 8019cb6:	b292      	uxth	r2, r2
 8019cb8:	fb02 110e 	mla	r1, r2, lr, r1
 8019cbc:	fb00 1104 	mla	r1, r0, r4, r1
 8019cc0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019cc2:	fb09 1104 	mla	r1, r9, r4, r1
 8019cc6:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8019cca:	2900      	cmp	r1, #0
 8019ccc:	f000 80de 	beq.w	8019e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019cd0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019cd4:	d01b      	beq.n	8019d0e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8019cd6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019cda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019cde:	fb0e fa0a 	mul.w	sl, lr, sl
 8019ce2:	fb0e fe03 	mul.w	lr, lr, r3
 8019ce6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019cea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019cee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019cf2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019cf6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019cfa:	4453      	add	r3, sl
 8019cfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d00:	0a1b      	lsrs	r3, r3, #8
 8019d02:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019d06:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019d0a:	ea43 030c 	orr.w	r3, r3, ip
 8019d0e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019d10:	2cff      	cmp	r4, #255	; 0xff
 8019d12:	d021      	beq.n	8019d58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8019d14:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019d16:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019d1a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019d1c:	fb04 fb0b 	mul.w	fp, r4, fp
 8019d20:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019d22:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019d26:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019d28:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019d2c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019d30:	fb04 fa0a 	mul.w	sl, r4, sl
 8019d34:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d38:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d3c:	44de      	add	lr, fp
 8019d3e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d42:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d46:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d4a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d4e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d52:	ea4e 040a 	orr.w	r4, lr, sl
 8019d56:	940b      	str	r4, [sp, #44]	; 0x2c
 8019d58:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d5a:	2cff      	cmp	r4, #255	; 0xff
 8019d5c:	d021      	beq.n	8019da2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8019d5e:	9c08      	ldr	r4, [sp, #32]
 8019d60:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019d64:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d66:	fb04 fb0b 	mul.w	fp, r4, fp
 8019d6a:	9c08      	ldr	r4, [sp, #32]
 8019d6c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019d70:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8019d72:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019d76:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019d7a:	fb04 fa0a 	mul.w	sl, r4, sl
 8019d7e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019d86:	44de      	add	lr, fp
 8019d88:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019d8c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019d90:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019d94:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019d98:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019d9c:	ea4e 040a 	orr.w	r4, lr, sl
 8019da0:	9408      	str	r4, [sp, #32]
 8019da2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019da4:	2cff      	cmp	r4, #255	; 0xff
 8019da6:	d021      	beq.n	8019dec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019da8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019daa:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019dae:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019db0:	fb04 fb0b 	mul.w	fp, r4, fp
 8019db4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019db6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019dba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019dbc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019dc0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019dc4:	fb04 fa0a 	mul.w	sl, r4, sl
 8019dc8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019dcc:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019dd0:	44de      	add	lr, fp
 8019dd2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019dd6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019dda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019dde:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019de2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019de6:	ea4e 040a 	orr.w	r4, lr, sl
 8019dea:	940c      	str	r4, [sp, #48]	; 0x30
 8019dec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019dee:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019df2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019df6:	43c9      	mvns	r1, r1
 8019df8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019dfc:	9c08      	ldr	r4, [sp, #32]
 8019dfe:	b2c9      	uxtb	r1, r1
 8019e00:	fb08 fc0c 	mul.w	ip, r8, ip
 8019e04:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019e08:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019e0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019e0e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8019e12:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019e16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019e18:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019e1c:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019e20:	fb08 f80e 	mul.w	r8, r8, lr
 8019e24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019e28:	fb02 8303 	mla	r3, r2, r3, r8
 8019e2c:	9a08      	ldr	r2, [sp, #32]
 8019e2e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019e32:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019e36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019e38:	fb00 330a 	mla	r3, r0, sl, r3
 8019e3c:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 8019e40:	fb09 3900 	mla	r9, r9, r0, r3
 8019e44:	783b      	ldrb	r3, [r7, #0]
 8019e46:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019e4a:	fb03 f201 	mul.w	r2, r3, r1
 8019e4e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019e52:	1c53      	adds	r3, r2, #1
 8019e54:	ea4c 0c09 	orr.w	ip, ip, r9
 8019e58:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019e5c:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 8019e60:	703b      	strb	r3, [r7, #0]
 8019e62:	787b      	ldrb	r3, [r7, #1]
 8019e64:	434b      	muls	r3, r1
 8019e66:	1c5a      	adds	r2, r3, #1
 8019e68:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019e6c:	ea4f 231c 	mov.w	r3, ip, lsr #8
 8019e70:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019e74:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019e78:	707b      	strb	r3, [r7, #1]
 8019e7a:	78bb      	ldrb	r3, [r7, #2]
 8019e7c:	4359      	muls	r1, r3
 8019e7e:	1c4b      	adds	r3, r1, #1
 8019e80:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8019e84:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8019e88:	f887 c002 	strb.w	ip, [r7, #2]
 8019e8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019e8e:	3703      	adds	r7, #3
 8019e90:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8019e92:	441a      	add	r2, r3
 8019e94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019e96:	441d      	add	r5, r3
 8019e98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019e9a:	9225      	str	r2, [sp, #148]	; 0x94
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019ea0:	e6b0      	b.n	8019c04 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8019ea2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8019ea4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019ea6:	441c      	add	r4, r3
 8019ea8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019eaa:	441d      	add	r5, r3
 8019eac:	9b07      	ldr	r3, [sp, #28]
 8019eae:	9425      	str	r4, [sp, #148]	; 0x94
 8019eb0:	3b01      	subs	r3, #1
 8019eb2:	9307      	str	r3, [sp, #28]
 8019eb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eb6:	3303      	adds	r3, #3
 8019eb8:	930a      	str	r3, [sp, #40]	; 0x28
 8019eba:	e683      	b.n	8019bc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8019ebc:	d026      	beq.n	8019f0c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8019ebe:	9b07      	ldr	r3, [sp, #28]
 8019ec0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8019ec2:	3b01      	subs	r3, #1
 8019ec4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019ec6:	fb00 4003 	mla	r0, r0, r3, r4
 8019eca:	1400      	asrs	r0, r0, #16
 8019ecc:	f53f ae97 	bmi.w	8019bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019ed0:	3901      	subs	r1, #1
 8019ed2:	4288      	cmp	r0, r1
 8019ed4:	f6bf ae93 	bge.w	8019bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019ed8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8019eda:	fb01 5303 	mla	r3, r1, r3, r5
 8019ede:	141b      	asrs	r3, r3, #16
 8019ee0:	f53f ae8d 	bmi.w	8019bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019ee4:	3a01      	subs	r2, #1
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	f6bf ae89 	bge.w	8019bfe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019eee:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8019ef2:	f103 0e03 	add.w	lr, r3, #3
 8019ef6:	f1bb 0f00 	cmp.w	fp, #0
 8019efa:	dc6d      	bgt.n	8019fd8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 8019efc:	9b07      	ldr	r3, [sp, #28]
 8019efe:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019f08:	4423      	add	r3, r4
 8019f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8019f0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019f0e:	2b00      	cmp	r3, #0
 8019f10:	f340 81a0 	ble.w	801a254 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8019f14:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019f18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f1a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019f1e:	eeb0 6a62 	vmov.f32	s12, s5
 8019f22:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019f26:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019f2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f2e:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 8019f32:	eeb0 6a43 	vmov.f32	s12, s6
 8019f36:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019f3a:	ee16 5a10 	vmov	r5, s12
 8019f3e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019f42:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019f46:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019f4a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019f4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019f52:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019f56:	ee12 2a90 	vmov	r2, s5
 8019f5a:	eef0 2a47 	vmov.f32	s5, s14
 8019f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f62:	ee13 2a10 	vmov	r2, s6
 8019f66:	9327      	str	r3, [sp, #156]	; 0x9c
 8019f68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f6a:	eeb0 3a67 	vmov.f32	s6, s15
 8019f6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8019f72:	9328      	str	r3, [sp, #160]	; 0xa0
 8019f74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8019f76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019f78:	3b01      	subs	r3, #1
 8019f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8019f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8019f7e:	bf08      	it	eq
 8019f80:	4613      	moveq	r3, r2
 8019f82:	9307      	str	r3, [sp, #28]
 8019f84:	e610      	b.n	8019ba8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019f86:	2800      	cmp	r0, #0
 8019f88:	f43f ae82 	beq.w	8019c90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019f8c:	f818 1001 	ldrb.w	r1, [r8, r1]
 8019f90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8019f94:	9108      	str	r1, [sp, #32]
 8019f96:	0e09      	lsrs	r1, r1, #24
 8019f98:	9110      	str	r1, [sp, #64]	; 0x40
 8019f9a:	e679      	b.n	8019c90 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8019f9c:	f113 0801 	adds.w	r8, r3, #1
 8019fa0:	f53f af74 	bmi.w	8019e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019fa4:	4541      	cmp	r1, r8
 8019fa6:	f6ff af71 	blt.w	8019e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019faa:	f11c 0801 	adds.w	r8, ip, #1
 8019fae:	f53f af6d 	bmi.w	8019e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019fb2:	45c6      	cmp	lr, r8
 8019fb4:	f6ff af6a 	blt.w	8019e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019fb8:	b209      	sxth	r1, r1
 8019fba:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8019fbe:	fa0f f38e 	sxth.w	r3, lr
 8019fc2:	9100      	str	r1, [sp, #0]
 8019fc4:	4639      	mov	r1, r7
 8019fc6:	9301      	str	r3, [sp, #4]
 8019fc8:	4633      	mov	r3, r6
 8019fca:	e9cd 2004 	strd	r2, r0, [sp, #16]
 8019fce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019fd0:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019fd2:	f7ff fca3 	bl	801991c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8019fd6:	e759      	b.n	8019e8c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8019fd8:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8019fda:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8019fde:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8019fe0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019fe4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019fe6:	1427      	asrs	r7, r4, #16
 8019fe8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019fea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019fee:	142b      	asrs	r3, r5, #16
 8019ff0:	fb01 7303 	mla	r3, r1, r3, r7
 8019ff4:	18e7      	adds	r7, r4, r3
 8019ff6:	5ce3      	ldrb	r3, [r4, r3]
 8019ff8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019ffc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a000:	2a00      	cmp	r2, #0
 801a002:	f000 811d 	beq.w	801a240 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801a006:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a00a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a00e:	940d      	str	r4, [sp, #52]	; 0x34
 801a010:	0e24      	lsrs	r4, r4, #24
 801a012:	9414      	str	r4, [sp, #80]	; 0x50
 801a014:	b170      	cbz	r0, 801a034 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a016:	eb07 0801 	add.w	r8, r7, r1
 801a01a:	5c79      	ldrb	r1, [r7, r1]
 801a01c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a020:	9109      	str	r1, [sp, #36]	; 0x24
 801a022:	0e09      	lsrs	r1, r1, #24
 801a024:	9111      	str	r1, [sp, #68]	; 0x44
 801a026:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a02a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a02e:	910e      	str	r1, [sp, #56]	; 0x38
 801a030:	0e09      	lsrs	r1, r1, #24
 801a032:	9115      	str	r1, [sp, #84]	; 0x54
 801a034:	b292      	uxth	r2, r2
 801a036:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a038:	b280      	uxth	r0, r0
 801a03a:	fb02 f900 	mul.w	r9, r2, r0
 801a03e:	0112      	lsls	r2, r2, #4
 801a040:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a044:	eba2 0809 	sub.w	r8, r2, r9
 801a048:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801a04c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a04e:	b280      	uxth	r0, r0
 801a050:	fa1f f888 	uxth.w	r8, r8
 801a054:	1a09      	subs	r1, r1, r0
 801a056:	fb08 f202 	mul.w	r2, r8, r2
 801a05a:	b289      	uxth	r1, r1
 801a05c:	fb01 220c 	mla	r2, r1, ip, r2
 801a060:	fb00 2204 	mla	r2, r0, r4, r2
 801a064:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a066:	fb09 2204 	mla	r2, r9, r4, r2
 801a06a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801a06e:	2a00      	cmp	r2, #0
 801a070:	f000 80db 	beq.w	801a22a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801a074:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a078:	d019      	beq.n	801a0ae <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801a07a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a07e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a082:	fb0c fa0a 	mul.w	sl, ip, sl
 801a086:	fb0c fc03 	mul.w	ip, ip, r3
 801a08a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a08e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a092:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a096:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a09a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a09e:	4453      	add	r3, sl
 801a0a0:	0a3f      	lsrs	r7, r7, #8
 801a0a2:	0a1b      	lsrs	r3, r3, #8
 801a0a4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a0a8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a0ac:	433b      	orrs	r3, r7
 801a0ae:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a0b0:	2cff      	cmp	r4, #255	; 0xff
 801a0b2:	d020      	beq.n	801a0f6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801a0b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a0b6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a0ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a0bc:	4367      	muls	r7, r4
 801a0be:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a0c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a0c4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a0c8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a0ca:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a0ce:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a0d2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a0d6:	44bc      	add	ip, r7
 801a0d8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a0dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a0e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a0e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a0e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a0ec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a0f0:	ea4c 040a 	orr.w	r4, ip, sl
 801a0f4:	940d      	str	r4, [sp, #52]	; 0x34
 801a0f6:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a0f8:	2cff      	cmp	r4, #255	; 0xff
 801a0fa:	d020      	beq.n	801a13e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801a0fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a0fe:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a102:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a104:	4367      	muls	r7, r4
 801a106:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a108:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a10c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a110:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a112:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a116:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a11a:	fb04 fa0a 	mul.w	sl, r4, sl
 801a11e:	44bc      	add	ip, r7
 801a120:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a124:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a128:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a12c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a130:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a134:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a138:	ea4c 040a 	orr.w	r4, ip, sl
 801a13c:	9409      	str	r4, [sp, #36]	; 0x24
 801a13e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a140:	2cff      	cmp	r4, #255	; 0xff
 801a142:	d020      	beq.n	801a186 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801a144:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a146:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a14a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a14c:	4367      	muls	r7, r4
 801a14e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a150:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a154:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a158:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801a15a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a15e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a162:	fb04 fa0a 	mul.w	sl, r4, sl
 801a166:	44bc      	add	ip, r7
 801a168:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a16c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a170:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a174:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a178:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a17c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a180:	ea4c 040a 	orr.w	r4, ip, sl
 801a184:	940e      	str	r4, [sp, #56]	; 0x38
 801a186:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a188:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a18c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a190:	43d2      	mvns	r2, r2
 801a192:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a196:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801a198:	b2d2      	uxtb	r2, r2
 801a19a:	fb08 f707 	mul.w	r7, r8, r7
 801a19e:	fb01 770c 	mla	r7, r1, ip, r7
 801a1a2:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a1a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801a1a8:	fb00 770c 	mla	r7, r0, ip, r7
 801a1ac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a1b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801a1b2:	fb09 770c 	mla	r7, r9, ip, r7
 801a1b6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a1ba:	fb08 f80c 	mul.w	r8, r8, ip
 801a1be:	0a3f      	lsrs	r7, r7, #8
 801a1c0:	fb01 8303 	mla	r3, r1, r3, r8
 801a1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a1c6:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a1ca:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801a1ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a1d0:	fb00 330a 	mla	r3, r0, sl, r3
 801a1d4:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801a1d8:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a1dc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a1e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1e4:	fb03 f102 	mul.w	r1, r3, r2
 801a1e8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a1ec:	1c4b      	adds	r3, r1, #1
 801a1ee:	ea47 070c 	orr.w	r7, r7, ip
 801a1f2:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a1f6:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801a1fa:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a1fe:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801a202:	4353      	muls	r3, r2
 801a204:	1c59      	adds	r1, r3, #1
 801a206:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a20a:	0a3b      	lsrs	r3, r7, #8
 801a20c:	0c3f      	lsrs	r7, r7, #16
 801a20e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a212:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a216:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a21a:	435a      	muls	r2, r3
 801a21c:	1c53      	adds	r3, r2, #1
 801a21e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801a222:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801a226:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a22a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a22c:	f10e 0e03 	add.w	lr, lr, #3
 801a230:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a232:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a236:	441a      	add	r2, r3
 801a238:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a23a:	9225      	str	r2, [sp, #148]	; 0x94
 801a23c:	441d      	add	r5, r3
 801a23e:	e65a      	b.n	8019ef6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801a240:	2800      	cmp	r0, #0
 801a242:	f43f aef7 	beq.w	801a034 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a246:	5c79      	ldrb	r1, [r7, r1]
 801a248:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a24c:	9109      	str	r1, [sp, #36]	; 0x24
 801a24e:	0e09      	lsrs	r1, r1, #24
 801a250:	9111      	str	r1, [sp, #68]	; 0x44
 801a252:	e6ef      	b.n	801a034 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801a254:	b01b      	add	sp, #108	; 0x6c
 801a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a25a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801a25a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a25e:	b08d      	sub	sp, #52	; 0x34
 801a260:	468b      	mov	fp, r1
 801a262:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801a266:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801a26a:	fb0c 5703 	mla	r7, ip, r3, r5
 801a26e:	f1bc 0f00 	cmp.w	ip, #0
 801a272:	910b      	str	r1, [sp, #44]	; 0x2c
 801a274:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a278:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801a27c:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801a280:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801a284:	eb02 0607 	add.w	r6, r2, r7
 801a288:	f89b 4000 	ldrb.w	r4, [fp]
 801a28c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801a290:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801a294:	f2c0 80c1 	blt.w	801a41a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801a298:	45e6      	cmp	lr, ip
 801a29a:	f340 80be 	ble.w	801a41a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801a29e:	2d00      	cmp	r5, #0
 801a2a0:	f2c0 80b7 	blt.w	801a412 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801a2a4:	42ab      	cmp	r3, r5
 801a2a6:	f340 80b4 	ble.w	801a412 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801a2aa:	5dd2      	ldrb	r2, [r2, r7]
 801a2ac:	9205      	str	r2, [sp, #20]
 801a2ae:	7872      	ldrb	r2, [r6, #1]
 801a2b0:	9206      	str	r2, [sp, #24]
 801a2b2:	78b2      	ldrb	r2, [r6, #2]
 801a2b4:	9207      	str	r2, [sp, #28]
 801a2b6:	1c6a      	adds	r2, r5, #1
 801a2b8:	f100 80b6 	bmi.w	801a428 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a2bc:	4293      	cmp	r3, r2
 801a2be:	f340 80b3 	ble.w	801a428 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a2c2:	f1b8 0f00 	cmp.w	r8, #0
 801a2c6:	f000 80af 	beq.w	801a428 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801a2ca:	78f2      	ldrb	r2, [r6, #3]
 801a2cc:	9201      	str	r2, [sp, #4]
 801a2ce:	7932      	ldrb	r2, [r6, #4]
 801a2d0:	9202      	str	r2, [sp, #8]
 801a2d2:	7972      	ldrb	r2, [r6, #5]
 801a2d4:	9203      	str	r2, [sp, #12]
 801a2d6:	f11c 0c01 	adds.w	ip, ip, #1
 801a2da:	f100 80ad 	bmi.w	801a438 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a2de:	45e6      	cmp	lr, ip
 801a2e0:	f340 80aa 	ble.w	801a438 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a2e4:	f1ba 0f00 	cmp.w	sl, #0
 801a2e8:	f000 80a6 	beq.w	801a438 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801a2ec:	2d00      	cmp	r5, #0
 801a2ee:	f2c0 809f 	blt.w	801a430 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801a2f2:	42ab      	cmp	r3, r5
 801a2f4:	f340 809c 	ble.w	801a430 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801a2f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a2fc:	f816 9002 	ldrb.w	r9, [r6, r2]
 801a300:	2203      	movs	r2, #3
 801a302:	fb03 6c02 	mla	ip, r3, r2, r6
 801a306:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801a30a:	f89c e002 	ldrb.w	lr, [ip, #2]
 801a30e:	9704      	str	r7, [sp, #16]
 801a310:	3501      	adds	r5, #1
 801a312:	f100 8098 	bmi.w	801a446 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a316:	42ab      	cmp	r3, r5
 801a318:	f340 8095 	ble.w	801a446 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a31c:	f1b8 0f00 	cmp.w	r8, #0
 801a320:	f000 8091 	beq.w	801a446 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801a324:	f04f 0c03 	mov.w	ip, #3
 801a328:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801a32c:	5cb5      	ldrb	r5, [r6, r2]
 801a32e:	fb03 620c 	mla	r2, r3, ip, r6
 801a332:	fb03 630c 	mla	r3, r3, ip, r6
 801a336:	7912      	ldrb	r2, [r2, #4]
 801a338:	795e      	ldrb	r6, [r3, #5]
 801a33a:	fa1f f388 	uxth.w	r3, r8
 801a33e:	fa1f fc8a 	uxth.w	ip, sl
 801a342:	fb03 f70c 	mul.w	r7, r3, ip
 801a346:	011b      	lsls	r3, r3, #4
 801a348:	9708      	str	r7, [sp, #32]
 801a34a:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801a34e:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801a352:	1bdb      	subs	r3, r3, r7
 801a354:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801a358:	fa1f fc8c 	uxth.w	ip, ip
 801a35c:	b29b      	uxth	r3, r3
 801a35e:	9709      	str	r7, [sp, #36]	; 0x24
 801a360:	ebaa 0a0c 	sub.w	sl, sl, ip
 801a364:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a366:	930a      	str	r3, [sp, #40]	; 0x28
 801a368:	fa1f fa8a 	uxth.w	sl, sl
 801a36c:	ea6f 0807 	mvn.w	r8, r7
 801a370:	9f01      	ldr	r7, [sp, #4]
 801a372:	435f      	muls	r7, r3
 801a374:	9b05      	ldr	r3, [sp, #20]
 801a376:	fa5f f888 	uxtb.w	r8, r8
 801a37a:	fb0a 7703 	mla	r7, sl, r3, r7
 801a37e:	9b08      	ldr	r3, [sp, #32]
 801a380:	fb14 f408 	smulbb	r4, r4, r8
 801a384:	fb0c 7709 	mla	r7, ip, r9, r7
 801a388:	fb10 f008 	smulbb	r0, r0, r8
 801a38c:	fb11 f108 	smulbb	r1, r1, r8
 801a390:	fb03 7705 	mla	r7, r3, r5, r7
 801a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a396:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801a39a:	fb07 4703 	mla	r7, r7, r3, r4
 801a39e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3a0:	b2bf      	uxth	r7, r7
 801a3a2:	1c7c      	adds	r4, r7, #1
 801a3a4:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801a3a8:	1224      	asrs	r4, r4, #8
 801a3aa:	f88b 4000 	strb.w	r4, [fp]
 801a3ae:	9c02      	ldr	r4, [sp, #8]
 801a3b0:	435c      	muls	r4, r3
 801a3b2:	9b06      	ldr	r3, [sp, #24]
 801a3b4:	fb0a 4403 	mla	r4, sl, r3, r4
 801a3b8:	9b04      	ldr	r3, [sp, #16]
 801a3ba:	fb0c 4403 	mla	r4, ip, r3, r4
 801a3be:	9b08      	ldr	r3, [sp, #32]
 801a3c0:	fb03 4402 	mla	r4, r3, r2, r4
 801a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3c8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a3cc:	fb04 0403 	mla	r4, r4, r3, r0
 801a3d0:	9b03      	ldr	r3, [sp, #12]
 801a3d2:	435a      	muls	r2, r3
 801a3d4:	b2a4      	uxth	r4, r4
 801a3d6:	4613      	mov	r3, r2
 801a3d8:	9a07      	ldr	r2, [sp, #28]
 801a3da:	1c60      	adds	r0, r4, #1
 801a3dc:	fb0a 3a02 	mla	sl, sl, r2, r3
 801a3e0:	9b08      	ldr	r3, [sp, #32]
 801a3e2:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801a3e6:	fb0c ac0e 	mla	ip, ip, lr, sl
 801a3ea:	1224      	asrs	r4, r4, #8
 801a3ec:	fb03 c606 	mla	r6, r3, r6, ip
 801a3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3f2:	f88b 4001 	strb.w	r4, [fp, #1]
 801a3f6:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a3fa:	fb06 1103 	mla	r1, r6, r3, r1
 801a3fe:	b289      	uxth	r1, r1
 801a400:	1c4e      	adds	r6, r1, #1
 801a402:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801a406:	1209      	asrs	r1, r1, #8
 801a408:	f88b 1002 	strb.w	r1, [fp, #2]
 801a40c:	b00d      	add	sp, #52	; 0x34
 801a40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a412:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a416:	9405      	str	r4, [sp, #20]
 801a418:	e74d      	b.n	801a2b6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801a41a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a41e:	9401      	str	r4, [sp, #4]
 801a420:	9405      	str	r4, [sp, #20]
 801a422:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801a426:	e756      	b.n	801a2d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801a428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a42c:	9401      	str	r4, [sp, #4]
 801a42e:	e752      	b.n	801a2d6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801a430:	468e      	mov	lr, r1
 801a432:	9004      	str	r0, [sp, #16]
 801a434:	46a1      	mov	r9, r4
 801a436:	e76b      	b.n	801a310 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801a438:	460e      	mov	r6, r1
 801a43a:	4602      	mov	r2, r0
 801a43c:	4625      	mov	r5, r4
 801a43e:	468e      	mov	lr, r1
 801a440:	9004      	str	r0, [sp, #16]
 801a442:	46a1      	mov	r9, r4
 801a444:	e779      	b.n	801a33a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801a446:	460e      	mov	r6, r1
 801a448:	4602      	mov	r2, r0
 801a44a:	4625      	mov	r5, r4
 801a44c:	e775      	b.n	801a33a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801a44e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a44e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a452:	b09f      	sub	sp, #124	; 0x7c
 801a454:	920e      	str	r2, [sp, #56]	; 0x38
 801a456:	9307      	str	r3, [sp, #28]
 801a458:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a45a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801a45e:	901d      	str	r0, [sp, #116]	; 0x74
 801a460:	930c      	str	r3, [sp, #48]	; 0x30
 801a462:	6850      	ldr	r0, [r2, #4]
 801a464:	910b      	str	r1, [sp, #44]	; 0x2c
 801a466:	6812      	ldr	r2, [r2, #0]
 801a468:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801a46c:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801a470:	fb00 1303 	mla	r3, r0, r3, r1
 801a474:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a478:	18d3      	adds	r3, r2, r3
 801a47a:	9308      	str	r3, [sp, #32]
 801a47c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	930a      	str	r3, [sp, #40]	; 0x28
 801a482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a484:	43db      	mvns	r3, r3
 801a486:	b2db      	uxtb	r3, r3
 801a488:	9309      	str	r3, [sp, #36]	; 0x24
 801a48a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	dc03      	bgt.n	801a498 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801a490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a492:	2b00      	cmp	r3, #0
 801a494:	f340 81f5 	ble.w	801a882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801a498:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a49a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a49e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a4a2:	1e48      	subs	r0, r1, #1
 801a4a4:	1e54      	subs	r4, r2, #1
 801a4a6:	9b07      	ldr	r3, [sp, #28]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	f340 80d5 	ble.w	801a658 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801a4ae:	ea5f 452a 	movs.w	r5, sl, asr #16
 801a4b2:	ea4f 4328 	mov.w	r3, r8, asr #16
 801a4b6:	d406      	bmi.n	801a4c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a4b8:	4285      	cmp	r5, r0
 801a4ba:	da04      	bge.n	801a4c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	db02      	blt.n	801a4c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801a4c0:	42a3      	cmp	r3, r4
 801a4c2:	f2c0 80ca 	blt.w	801a65a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801a4c6:	3501      	adds	r5, #1
 801a4c8:	f100 80bb 	bmi.w	801a642 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a4cc:	42a9      	cmp	r1, r5
 801a4ce:	f2c0 80b8 	blt.w	801a642 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a4d2:	3301      	adds	r3, #1
 801a4d4:	f100 80b5 	bmi.w	801a642 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	f2c0 80b2 	blt.w	801a642 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801a4de:	9b07      	ldr	r3, [sp, #28]
 801a4e0:	9d08      	ldr	r5, [sp, #32]
 801a4e2:	930d      	str	r3, [sp, #52]	; 0x34
 801a4e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	f340 80d6 	ble.w	801a698 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801a4ec:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801a4ee:	ea4f 4428 	mov.w	r4, r8, asr #16
 801a4f2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a4f4:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801a4f8:	68c6      	ldr	r6, [r0, #12]
 801a4fa:	ea5f 402a 	movs.w	r0, sl, asr #16
 801a4fe:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801a502:	689b      	ldr	r3, [r3, #8]
 801a504:	f100 810f 	bmi.w	801a726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a508:	1e5f      	subs	r7, r3, #1
 801a50a:	42b8      	cmp	r0, r7
 801a50c:	f280 810b 	bge.w	801a726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a510:	2c00      	cmp	r4, #0
 801a512:	f2c0 8108 	blt.w	801a726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a516:	1e77      	subs	r7, r6, #1
 801a518:	42bc      	cmp	r4, r7
 801a51a:	f280 8104 	bge.w	801a726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801a51e:	b21b      	sxth	r3, r3
 801a520:	fb04 0003 	mla	r0, r4, r3, r0
 801a524:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801a526:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a52a:	1826      	adds	r6, r4, r0
 801a52c:	5c24      	ldrb	r4, [r4, r0]
 801a52e:	78b7      	ldrb	r7, [r6, #2]
 801a530:	7870      	ldrb	r0, [r6, #1]
 801a532:	970f      	str	r7, [sp, #60]	; 0x3c
 801a534:	7977      	ldrb	r7, [r6, #5]
 801a536:	f896 e003 	ldrb.w	lr, [r6, #3]
 801a53a:	f896 c004 	ldrb.w	ip, [r6, #4]
 801a53e:	9710      	str	r7, [sp, #64]	; 0x40
 801a540:	b1c9      	cbz	r1, 801a576 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801a542:	f04f 0b03 	mov.w	fp, #3
 801a546:	f06f 0904 	mvn.w	r9, #4
 801a54a:	3605      	adds	r6, #5
 801a54c:	fb13 930b 	smlabb	r3, r3, fp, r9
 801a550:	eb06 0b03 	add.w	fp, r6, r3
 801a554:	5cf3      	ldrb	r3, [r6, r3]
 801a556:	9311      	str	r3, [sp, #68]	; 0x44
 801a558:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801a55c:	9313      	str	r3, [sp, #76]	; 0x4c
 801a55e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801a562:	9315      	str	r3, [sp, #84]	; 0x54
 801a564:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801a568:	9312      	str	r3, [sp, #72]	; 0x48
 801a56a:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801a56e:	9314      	str	r3, [sp, #80]	; 0x50
 801a570:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801a574:	9316      	str	r3, [sp, #88]	; 0x58
 801a576:	b292      	uxth	r2, r2
 801a578:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801a57a:	b289      	uxth	r1, r1
 801a57c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801a580:	fb02 f601 	mul.w	r6, r2, r1
 801a584:	0112      	lsls	r2, r2, #4
 801a586:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801a58a:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801a58e:	1b92      	subs	r2, r2, r6
 801a590:	b289      	uxth	r1, r1
 801a592:	b292      	uxth	r2, r2
 801a594:	eba9 0901 	sub.w	r9, r9, r1
 801a598:	fb02 fe0e 	mul.w	lr, r2, lr
 801a59c:	fa1f f989 	uxth.w	r9, r9
 801a5a0:	fb02 fc0c 	mul.w	ip, r2, ip
 801a5a4:	fb09 e404 	mla	r4, r9, r4, lr
 801a5a8:	f895 e000 	ldrb.w	lr, [r5]
 801a5ac:	fb09 c000 	mla	r0, r9, r0, ip
 801a5b0:	fb01 4407 	mla	r4, r1, r7, r4
 801a5b4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801a5b6:	fb06 4407 	mla	r4, r6, r7, r4
 801a5ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a5bc:	fb1e fe07 	smulbb	lr, lr, r7
 801a5c0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a5c4:	fb04 e403 	mla	r4, r4, r3, lr
 801a5c8:	b2a4      	uxth	r4, r4
 801a5ca:	f104 0e01 	add.w	lr, r4, #1
 801a5ce:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801a5d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a5d4:	fb01 0004 	mla	r0, r1, r4, r0
 801a5d8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a5da:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801a5de:	fb06 0004 	mla	r0, r6, r4, r0
 801a5e2:	786c      	ldrb	r4, [r5, #1]
 801a5e4:	f885 e000 	strb.w	lr, [r5]
 801a5e8:	fb14 f407 	smulbb	r4, r4, r7
 801a5ec:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a5f0:	fb00 4003 	mla	r0, r0, r3, r4
 801a5f4:	b280      	uxth	r0, r0
 801a5f6:	1c44      	adds	r4, r0, #1
 801a5f8:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801a5fc:	1200      	asrs	r0, r0, #8
 801a5fe:	7068      	strb	r0, [r5, #1]
 801a600:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a602:	4342      	muls	r2, r0
 801a604:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a606:	fb09 2200 	mla	r2, r9, r0, r2
 801a60a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801a60c:	fb01 2100 	mla	r1, r1, r0, r2
 801a610:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a612:	fb06 1602 	mla	r6, r6, r2, r1
 801a616:	78a9      	ldrb	r1, [r5, #2]
 801a618:	fb11 f107 	smulbb	r1, r1, r7
 801a61c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801a620:	fb06 1303 	mla	r3, r6, r3, r1
 801a624:	b29b      	uxth	r3, r3
 801a626:	1c5e      	adds	r6, r3, #1
 801a628:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801a62c:	121b      	asrs	r3, r3, #8
 801a62e:	70ab      	strb	r3, [r5, #2]
 801a630:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a632:	3503      	adds	r5, #3
 801a634:	449a      	add	sl, r3
 801a636:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a638:	4498      	add	r8, r3
 801a63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a63c:	3b01      	subs	r3, #1
 801a63e:	930d      	str	r3, [sp, #52]	; 0x34
 801a640:	e750      	b.n	801a4e4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801a642:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a644:	449a      	add	sl, r3
 801a646:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a648:	4498      	add	r8, r3
 801a64a:	9b07      	ldr	r3, [sp, #28]
 801a64c:	3b01      	subs	r3, #1
 801a64e:	9307      	str	r3, [sp, #28]
 801a650:	9b08      	ldr	r3, [sp, #32]
 801a652:	3303      	adds	r3, #3
 801a654:	9308      	str	r3, [sp, #32]
 801a656:	e726      	b.n	801a4a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801a658:	d026      	beq.n	801a6a8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801a65a:	9b07      	ldr	r3, [sp, #28]
 801a65c:	982b      	ldr	r0, [sp, #172]	; 0xac
 801a65e:	3b01      	subs	r3, #1
 801a660:	fb00 a003 	mla	r0, r0, r3, sl
 801a664:	1400      	asrs	r0, r0, #16
 801a666:	f53f af3a 	bmi.w	801a4de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a66a:	3901      	subs	r1, #1
 801a66c:	4288      	cmp	r0, r1
 801a66e:	f6bf af36 	bge.w	801a4de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a672:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801a674:	fb01 8303 	mla	r3, r1, r3, r8
 801a678:	141b      	asrs	r3, r3, #16
 801a67a:	f53f af30 	bmi.w	801a4de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a67e:	3a01      	subs	r2, #1
 801a680:	4293      	cmp	r3, r2
 801a682:	f6bf af2c 	bge.w	801a4de <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801a686:	9b08      	ldr	r3, [sp, #32]
 801a688:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a68c:	1cdd      	adds	r5, r3, #3
 801a68e:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801a692:	f1bc 0f00 	cmp.w	ip, #0
 801a696:	dc5f      	bgt.n	801a758 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801a698:	9b07      	ldr	r3, [sp, #28]
 801a69a:	9a08      	ldr	r2, [sp, #32]
 801a69c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a6a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a6a4:	441a      	add	r2, r3
 801a6a6:	9208      	str	r2, [sp, #32]
 801a6a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	f340 80e9 	ble.w	801a882 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801a6b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a6b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a6b6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a6ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a6be:	eef0 6a62 	vmov.f32	s13, s5
 801a6c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a6c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a6ca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6ce:	ee16 aa90 	vmov	sl, s13
 801a6d2:	eef0 6a43 	vmov.f32	s13, s6
 801a6d6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a6da:	ee16 8a90 	vmov	r8, s13
 801a6de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a6e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a6e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a6ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a6ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a6f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a6f6:	ee12 2a90 	vmov	r2, s5
 801a6fa:	eef0 2a47 	vmov.f32	s5, s14
 801a6fe:	fb92 f3f3 	sdiv	r3, r2, r3
 801a702:	ee13 2a10 	vmov	r2, s6
 801a706:	932b      	str	r3, [sp, #172]	; 0xac
 801a708:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a70a:	eeb0 3a67 	vmov.f32	s6, s15
 801a70e:	fb92 f3f3 	sdiv	r3, r2, r3
 801a712:	932c      	str	r3, [sp, #176]	; 0xb0
 801a714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a718:	3b01      	subs	r3, #1
 801a71a:	930b      	str	r3, [sp, #44]	; 0x2c
 801a71c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a71e:	bf08      	it	eq
 801a720:	4613      	moveq	r3, r2
 801a722:	9307      	str	r3, [sp, #28]
 801a724:	e6b1      	b.n	801a48a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801a726:	1c47      	adds	r7, r0, #1
 801a728:	d482      	bmi.n	801a630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a72a:	42bb      	cmp	r3, r7
 801a72c:	db80      	blt.n	801a630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a72e:	1c67      	adds	r7, r4, #1
 801a730:	f53f af7e 	bmi.w	801a630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a734:	42be      	cmp	r6, r7
 801a736:	f6ff af7b 	blt.w	801a630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a73a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801a73c:	b236      	sxth	r6, r6
 801a73e:	9001      	str	r0, [sp, #4]
 801a740:	b21b      	sxth	r3, r3
 801a742:	9600      	str	r6, [sp, #0]
 801a744:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a746:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801a74a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801a74e:	4629      	mov	r1, r5
 801a750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a752:	f7ff fd82 	bl	801a25a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801a756:	e76b      	b.n	801a630 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801a758:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801a75a:	ea4f 402a 	mov.w	r0, sl, asr #16
 801a75e:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801a762:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801a766:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801a76a:	ea4f 4128 	mov.w	r1, r8, asr #16
 801a76e:	fb07 0101 	mla	r1, r7, r1, r0
 801a772:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a774:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a778:	1844      	adds	r4, r0, r1
 801a77a:	5c40      	ldrb	r0, [r0, r1]
 801a77c:	78a6      	ldrb	r6, [r4, #2]
 801a77e:	7861      	ldrb	r1, [r4, #1]
 801a780:	960f      	str	r6, [sp, #60]	; 0x3c
 801a782:	78e6      	ldrb	r6, [r4, #3]
 801a784:	910d      	str	r1, [sp, #52]	; 0x34
 801a786:	9610      	str	r6, [sp, #64]	; 0x40
 801a788:	f894 9004 	ldrb.w	r9, [r4, #4]
 801a78c:	f894 b005 	ldrb.w	fp, [r4, #5]
 801a790:	b192      	cbz	r2, 801a7b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801a792:	f06f 0604 	mvn.w	r6, #4
 801a796:	2103      	movs	r1, #3
 801a798:	3405      	adds	r4, #5
 801a79a:	fb17 6701 	smlabb	r7, r7, r1, r6
 801a79e:	19e6      	adds	r6, r4, r7
 801a7a0:	5de4      	ldrb	r4, [r4, r7]
 801a7a2:	9417      	str	r4, [sp, #92]	; 0x5c
 801a7a4:	7874      	ldrb	r4, [r6, #1]
 801a7a6:	9419      	str	r4, [sp, #100]	; 0x64
 801a7a8:	78b4      	ldrb	r4, [r6, #2]
 801a7aa:	941b      	str	r4, [sp, #108]	; 0x6c
 801a7ac:	78f4      	ldrb	r4, [r6, #3]
 801a7ae:	9418      	str	r4, [sp, #96]	; 0x60
 801a7b0:	7934      	ldrb	r4, [r6, #4]
 801a7b2:	941a      	str	r4, [sp, #104]	; 0x68
 801a7b4:	7974      	ldrb	r4, [r6, #5]
 801a7b6:	941c      	str	r4, [sp, #112]	; 0x70
 801a7b8:	b29b      	uxth	r3, r3
 801a7ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a7bc:	b292      	uxth	r2, r2
 801a7be:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a7c0:	3503      	adds	r5, #3
 801a7c2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a7c6:	fb03 f402 	mul.w	r4, r3, r2
 801a7ca:	011b      	lsls	r3, r3, #4
 801a7cc:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801a7d0:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801a7d4:	1b1b      	subs	r3, r3, r4
 801a7d6:	b292      	uxth	r2, r2
 801a7d8:	b29b      	uxth	r3, r3
 801a7da:	1ab6      	subs	r6, r6, r2
 801a7dc:	435f      	muls	r7, r3
 801a7de:	b2b6      	uxth	r6, r6
 801a7e0:	fb03 f909 	mul.w	r9, r3, r9
 801a7e4:	fb03 fb0b 	mul.w	fp, r3, fp
 801a7e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a7ea:	fb06 7000 	mla	r0, r6, r0, r7
 801a7ee:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a7f0:	fb06 bb03 	mla	fp, r6, r3, fp
 801a7f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a7f6:	fb02 0007 	mla	r0, r2, r7, r0
 801a7fa:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801a7fc:	fb02 bb03 	mla	fp, r2, r3, fp
 801a800:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a802:	fb04 0007 	mla	r0, r4, r7, r0
 801a806:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801a80a:	fb17 f701 	smulbb	r7, r7, r1
 801a80e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801a812:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a814:	fb00 700e 	mla	r0, r0, lr, r7
 801a818:	fb06 9101 	mla	r1, r6, r1, r9
 801a81c:	b280      	uxth	r0, r0
 801a81e:	1c47      	adds	r7, r0, #1
 801a820:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801a824:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801a826:	1200      	asrs	r0, r0, #8
 801a828:	f805 0c06 	strb.w	r0, [r5, #-6]
 801a82c:	9819      	ldr	r0, [sp, #100]	; 0x64
 801a82e:	fb02 1100 	mla	r1, r2, r0, r1
 801a832:	981a      	ldr	r0, [sp, #104]	; 0x68
 801a834:	fb04 1100 	mla	r1, r4, r0, r1
 801a838:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801a83c:	fb04 b403 	mla	r4, r4, r3, fp
 801a840:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801a844:	fb10 f007 	smulbb	r0, r0, r7
 801a848:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a84c:	fb13 f307 	smulbb	r3, r3, r7
 801a850:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a854:	fb01 010e 	mla	r1, r1, lr, r0
 801a858:	fb04 340e 	mla	r4, r4, lr, r3
 801a85c:	b289      	uxth	r1, r1
 801a85e:	b2a4      	uxth	r4, r4
 801a860:	1c48      	adds	r0, r1, #1
 801a862:	1c63      	adds	r3, r4, #1
 801a864:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801a868:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801a86c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a86e:	1209      	asrs	r1, r1, #8
 801a870:	1224      	asrs	r4, r4, #8
 801a872:	449a      	add	sl, r3
 801a874:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a876:	f805 1c05 	strb.w	r1, [r5, #-5]
 801a87a:	f805 4c04 	strb.w	r4, [r5, #-4]
 801a87e:	4498      	add	r8, r3
 801a880:	e707      	b.n	801a692 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801a882:	b01f      	add	sp, #124	; 0x7c
 801a884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a888 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801a888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a88c:	b087      	sub	sp, #28
 801a88e:	780d      	ldrb	r5, [r1, #0]
 801a890:	784c      	ldrb	r4, [r1, #1]
 801a892:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801a896:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801a89a:	9004      	str	r0, [sp, #16]
 801a89c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801a8a0:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801a8a4:	9005      	str	r0, [sp, #20]
 801a8a6:	fb06 bc03 	mla	ip, r6, r3, fp
 801a8aa:	2e00      	cmp	r6, #0
 801a8ac:	7888      	ldrb	r0, [r1, #2]
 801a8ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a8b2:	eb02 090c 	add.w	r9, r2, ip
 801a8b6:	f2c0 8084 	blt.w	801a9c2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801a8ba:	42b7      	cmp	r7, r6
 801a8bc:	f340 8081 	ble.w	801a9c2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801a8c0:	f1bb 0f00 	cmp.w	fp, #0
 801a8c4:	db79      	blt.n	801a9ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801a8c6:	455b      	cmp	r3, fp
 801a8c8:	dd77      	ble.n	801a9ba <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801a8ca:	f812 200c 	ldrb.w	r2, [r2, ip]
 801a8ce:	9201      	str	r2, [sp, #4]
 801a8d0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801a8d4:	9202      	str	r2, [sp, #8]
 801a8d6:	f899 2002 	ldrb.w	r2, [r9, #2]
 801a8da:	9203      	str	r2, [sp, #12]
 801a8dc:	f11b 0201 	adds.w	r2, fp, #1
 801a8e0:	d476      	bmi.n	801a9d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801a8e2:	4293      	cmp	r3, r2
 801a8e4:	dd74      	ble.n	801a9d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801a8e6:	9a04      	ldr	r2, [sp, #16]
 801a8e8:	2a00      	cmp	r2, #0
 801a8ea:	d071      	beq.n	801a9d0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801a8ec:	f899 8003 	ldrb.w	r8, [r9, #3]
 801a8f0:	f899 c004 	ldrb.w	ip, [r9, #4]
 801a8f4:	f899 a005 	ldrb.w	sl, [r9, #5]
 801a8f8:	3601      	adds	r6, #1
 801a8fa:	d471      	bmi.n	801a9e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801a8fc:	42b7      	cmp	r7, r6
 801a8fe:	dd6f      	ble.n	801a9e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801a900:	9a05      	ldr	r2, [sp, #20]
 801a902:	2a00      	cmp	r2, #0
 801a904:	d06c      	beq.n	801a9e0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801a906:	f1bb 0f00 	cmp.w	fp, #0
 801a90a:	db65      	blt.n	801a9d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801a90c:	455b      	cmp	r3, fp
 801a90e:	dd63      	ble.n	801a9d8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801a910:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801a914:	f819 e002 	ldrb.w	lr, [r9, r2]
 801a918:	2203      	movs	r2, #3
 801a91a:	fb03 9602 	mla	r6, r3, r2, r9
 801a91e:	7877      	ldrb	r7, [r6, #1]
 801a920:	78b6      	ldrb	r6, [r6, #2]
 801a922:	f11b 0b01 	adds.w	fp, fp, #1
 801a926:	d40c      	bmi.n	801a942 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801a928:	455b      	cmp	r3, fp
 801a92a:	dd0a      	ble.n	801a942 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801a92c:	9a04      	ldr	r2, [sp, #16]
 801a92e:	b142      	cbz	r2, 801a942 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801a930:	2203      	movs	r2, #3
 801a932:	fb13 2002 	smlabb	r0, r3, r2, r2
 801a936:	f819 5000 	ldrb.w	r5, [r9, r0]
 801a93a:	fb03 9002 	mla	r0, r3, r2, r9
 801a93e:	7904      	ldrb	r4, [r0, #4]
 801a940:	7940      	ldrb	r0, [r0, #5]
 801a942:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801a946:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801a94a:	fb03 fb02 	mul.w	fp, r3, r2
 801a94e:	011b      	lsls	r3, r3, #4
 801a950:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801a954:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801a958:	eba3 030b 	sub.w	r3, r3, fp
 801a95c:	b292      	uxth	r2, r2
 801a95e:	b29b      	uxth	r3, r3
 801a960:	eba9 0902 	sub.w	r9, r9, r2
 801a964:	9304      	str	r3, [sp, #16]
 801a966:	fa1f f989 	uxth.w	r9, r9
 801a96a:	fb03 f808 	mul.w	r8, r3, r8
 801a96e:	9b01      	ldr	r3, [sp, #4]
 801a970:	fb09 8803 	mla	r8, r9, r3, r8
 801a974:	9b04      	ldr	r3, [sp, #16]
 801a976:	fb03 fc0c 	mul.w	ip, r3, ip
 801a97a:	9b02      	ldr	r3, [sp, #8]
 801a97c:	fb02 880e 	mla	r8, r2, lr, r8
 801a980:	fb09 cc03 	mla	ip, r9, r3, ip
 801a984:	9b04      	ldr	r3, [sp, #16]
 801a986:	fb0b 8805 	mla	r8, fp, r5, r8
 801a98a:	fb02 c707 	mla	r7, r2, r7, ip
 801a98e:	fb03 f30a 	mul.w	r3, r3, sl
 801a992:	ea4f 2828 	mov.w	r8, r8, asr #8
 801a996:	fb0b 7404 	mla	r4, fp, r4, r7
 801a99a:	f881 8000 	strb.w	r8, [r1]
 801a99e:	1224      	asrs	r4, r4, #8
 801a9a0:	704c      	strb	r4, [r1, #1]
 801a9a2:	9c03      	ldr	r4, [sp, #12]
 801a9a4:	fb09 3904 	mla	r9, r9, r4, r3
 801a9a8:	fb02 9206 	mla	r2, r2, r6, r9
 801a9ac:	fb0b 2000 	mla	r0, fp, r0, r2
 801a9b0:	1200      	asrs	r0, r0, #8
 801a9b2:	7088      	strb	r0, [r1, #2]
 801a9b4:	b007      	add	sp, #28
 801a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ba:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801a9be:	9501      	str	r5, [sp, #4]
 801a9c0:	e78c      	b.n	801a8dc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801a9c2:	4682      	mov	sl, r0
 801a9c4:	46a4      	mov	ip, r4
 801a9c6:	46a8      	mov	r8, r5
 801a9c8:	9501      	str	r5, [sp, #4]
 801a9ca:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801a9ce:	e793      	b.n	801a8f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801a9d0:	4682      	mov	sl, r0
 801a9d2:	46a4      	mov	ip, r4
 801a9d4:	46a8      	mov	r8, r5
 801a9d6:	e78f      	b.n	801a8f8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801a9d8:	4606      	mov	r6, r0
 801a9da:	4627      	mov	r7, r4
 801a9dc:	46ae      	mov	lr, r5
 801a9de:	e7a0      	b.n	801a922 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801a9e0:	4606      	mov	r6, r0
 801a9e2:	4627      	mov	r7, r4
 801a9e4:	46ae      	mov	lr, r5
 801a9e6:	e7ac      	b.n	801a942 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801a9e8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9ec:	b09b      	sub	sp, #108	; 0x6c
 801a9ee:	920b      	str	r2, [sp, #44]	; 0x2c
 801a9f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a9f2:	9019      	str	r0, [sp, #100]	; 0x64
 801a9f4:	9109      	str	r1, [sp, #36]	; 0x24
 801a9f6:	6850      	ldr	r0, [r2, #4]
 801a9f8:	9306      	str	r3, [sp, #24]
 801a9fa:	6812      	ldr	r2, [r2, #0]
 801a9fc:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801aa00:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801aa04:	fb00 1303 	mla	r3, r0, r3, r1
 801aa08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aa0c:	18d3      	adds	r3, r2, r3
 801aa0e:	9307      	str	r3, [sp, #28]
 801aa10:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	9308      	str	r3, [sp, #32]
 801aa16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	dc03      	bgt.n	801aa24 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801aa1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	f340 81ab 	ble.w	801ad7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801aa24:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aa26:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aa2a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aa2e:	1e48      	subs	r0, r1, #1
 801aa30:	1e55      	subs	r5, r2, #1
 801aa32:	9b06      	ldr	r3, [sp, #24]
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	f340 80b1 	ble.w	801ab9c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801aa3a:	ea5f 462b 	movs.w	r6, fp, asr #16
 801aa3e:	ea4f 4324 	mov.w	r3, r4, asr #16
 801aa42:	d406      	bmi.n	801aa52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801aa44:	4286      	cmp	r6, r0
 801aa46:	da04      	bge.n	801aa52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801aa48:	2b00      	cmp	r3, #0
 801aa4a:	db02      	blt.n	801aa52 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801aa4c:	42ab      	cmp	r3, r5
 801aa4e:	f2c0 80a6 	blt.w	801ab9e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801aa52:	3601      	adds	r6, #1
 801aa54:	f100 8097 	bmi.w	801ab86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801aa58:	42b1      	cmp	r1, r6
 801aa5a:	f2c0 8094 	blt.w	801ab86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801aa5e:	3301      	adds	r3, #1
 801aa60:	f100 8091 	bmi.w	801ab86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801aa64:	429a      	cmp	r2, r3
 801aa66:	f2c0 808e 	blt.w	801ab86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801aa6a:	9b06      	ldr	r3, [sp, #24]
 801aa6c:	9e07      	ldr	r6, [sp, #28]
 801aa6e:	930a      	str	r3, [sp, #40]	; 0x28
 801aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	f340 80b0 	ble.w	801abd8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801aa78:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801aa7a:	1425      	asrs	r5, r4, #16
 801aa7c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aa7e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801aa82:	68c7      	ldr	r7, [r0, #12]
 801aa84:	ea5f 402b 	movs.w	r0, fp, asr #16
 801aa88:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801aa8c:	689b      	ldr	r3, [r3, #8]
 801aa8e:	f100 80ea 	bmi.w	801ac66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801aa92:	f103 3cff 	add.w	ip, r3, #4294967295
 801aa96:	4560      	cmp	r0, ip
 801aa98:	f280 80e5 	bge.w	801ac66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801aa9c:	2d00      	cmp	r5, #0
 801aa9e:	f2c0 80e2 	blt.w	801ac66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801aaa2:	f107 3cff 	add.w	ip, r7, #4294967295
 801aaa6:	4565      	cmp	r5, ip
 801aaa8:	f280 80dd 	bge.w	801ac66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801aaac:	b21b      	sxth	r3, r3
 801aaae:	fb05 0003 	mla	r0, r5, r3, r0
 801aab2:	9d08      	ldr	r5, [sp, #32]
 801aab4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aab8:	182f      	adds	r7, r5, r0
 801aaba:	5c2d      	ldrb	r5, [r5, r0]
 801aabc:	7878      	ldrb	r0, [r7, #1]
 801aabe:	f897 e002 	ldrb.w	lr, [r7, #2]
 801aac2:	900c      	str	r0, [sp, #48]	; 0x30
 801aac4:	f897 9003 	ldrb.w	r9, [r7, #3]
 801aac8:	f897 8004 	ldrb.w	r8, [r7, #4]
 801aacc:	f897 a005 	ldrb.w	sl, [r7, #5]
 801aad0:	b1c9      	cbz	r1, 801ab06 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801aad2:	f04f 0c03 	mov.w	ip, #3
 801aad6:	f06f 0004 	mvn.w	r0, #4
 801aada:	3705      	adds	r7, #5
 801aadc:	fb13 030c 	smlabb	r3, r3, ip, r0
 801aae0:	eb07 0c03 	add.w	ip, r7, r3
 801aae4:	5cfb      	ldrb	r3, [r7, r3]
 801aae6:	930d      	str	r3, [sp, #52]	; 0x34
 801aae8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801aaec:	930f      	str	r3, [sp, #60]	; 0x3c
 801aaee:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801aaf2:	9311      	str	r3, [sp, #68]	; 0x44
 801aaf4:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801aaf8:	930e      	str	r3, [sp, #56]	; 0x38
 801aafa:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801aafe:	9310      	str	r3, [sp, #64]	; 0x40
 801ab00:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801ab04:	9312      	str	r3, [sp, #72]	; 0x48
 801ab06:	b292      	uxth	r2, r2
 801ab08:	980c      	ldr	r0, [sp, #48]	; 0x30
 801ab0a:	b289      	uxth	r1, r1
 801ab0c:	fb02 f301 	mul.w	r3, r2, r1
 801ab10:	0112      	lsls	r2, r2, #4
 801ab12:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ab16:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801ab1a:	1ad2      	subs	r2, r2, r3
 801ab1c:	b289      	uxth	r1, r1
 801ab1e:	b292      	uxth	r2, r2
 801ab20:	1a7f      	subs	r7, r7, r1
 801ab22:	fb02 f909 	mul.w	r9, r2, r9
 801ab26:	b2bf      	uxth	r7, r7
 801ab28:	fb02 f808 	mul.w	r8, r2, r8
 801ab2c:	fb02 fa0a 	mul.w	sl, r2, sl
 801ab30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ab32:	fb07 9905 	mla	r9, r7, r5, r9
 801ab36:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ab38:	fb07 8800 	mla	r8, r7, r0, r8
 801ab3c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ab3e:	fb07 aa0e 	mla	sl, r7, lr, sl
 801ab42:	fb01 9905 	mla	r9, r1, r5, r9
 801ab46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ab48:	fb01 8800 	mla	r8, r1, r0, r8
 801ab4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801ab4e:	fb01 a102 	mla	r1, r1, r2, sl
 801ab52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ab54:	fb03 9905 	mla	r9, r3, r5, r9
 801ab58:	fb03 8800 	mla	r8, r3, r0, r8
 801ab5c:	fb03 1302 	mla	r3, r3, r2, r1
 801ab60:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ab64:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ab68:	121b      	asrs	r3, r3, #8
 801ab6a:	f886 9000 	strb.w	r9, [r6]
 801ab6e:	f886 8001 	strb.w	r8, [r6, #1]
 801ab72:	70b3      	strb	r3, [r6, #2]
 801ab74:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ab76:	3603      	adds	r6, #3
 801ab78:	449b      	add	fp, r3
 801ab7a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ab7c:	441c      	add	r4, r3
 801ab7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ab80:	3b01      	subs	r3, #1
 801ab82:	930a      	str	r3, [sp, #40]	; 0x28
 801ab84:	e774      	b.n	801aa70 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801ab86:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ab88:	449b      	add	fp, r3
 801ab8a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ab8c:	441c      	add	r4, r3
 801ab8e:	9b06      	ldr	r3, [sp, #24]
 801ab90:	3b01      	subs	r3, #1
 801ab92:	9306      	str	r3, [sp, #24]
 801ab94:	9b07      	ldr	r3, [sp, #28]
 801ab96:	3303      	adds	r3, #3
 801ab98:	9307      	str	r3, [sp, #28]
 801ab9a:	e74a      	b.n	801aa32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ab9c:	d024      	beq.n	801abe8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ab9e:	9b06      	ldr	r3, [sp, #24]
 801aba0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801aba2:	3b01      	subs	r3, #1
 801aba4:	fb00 b003 	mla	r0, r0, r3, fp
 801aba8:	1400      	asrs	r0, r0, #16
 801abaa:	f53f af5e 	bmi.w	801aa6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801abae:	3901      	subs	r1, #1
 801abb0:	4288      	cmp	r0, r1
 801abb2:	f6bf af5a 	bge.w	801aa6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801abb6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801abb8:	fb01 4303 	mla	r3, r1, r3, r4
 801abbc:	141b      	asrs	r3, r3, #16
 801abbe:	f53f af54 	bmi.w	801aa6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801abc2:	3a01      	subs	r2, #1
 801abc4:	4293      	cmp	r3, r2
 801abc6:	f6bf af50 	bge.w	801aa6a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801abca:	9b07      	ldr	r3, [sp, #28]
 801abcc:	f8dd e018 	ldr.w	lr, [sp, #24]
 801abd0:	1cde      	adds	r6, r3, #3
 801abd2:	f1be 0f00 	cmp.w	lr, #0
 801abd6:	dc5f      	bgt.n	801ac98 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801abd8:	9b06      	ldr	r3, [sp, #24]
 801abda:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801abde:	9b07      	ldr	r3, [sp, #28]
 801abe0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801abe4:	4423      	add	r3, r4
 801abe6:	9307      	str	r3, [sp, #28]
 801abe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801abea:	2b00      	cmp	r3, #0
 801abec:	f340 80c5 	ble.w	801ad7a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801abf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801abf4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801abf6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801abfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801abfe:	eef0 6a62 	vmov.f32	s13, s5
 801ac02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac06:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ac0a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ac0e:	ee16 ba90 	vmov	fp, s13
 801ac12:	eef0 6a43 	vmov.f32	s13, s6
 801ac16:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ac1a:	ee16 4a90 	vmov	r4, s13
 801ac1e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ac22:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ac26:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ac2a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ac2e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ac32:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ac36:	ee12 2a90 	vmov	r2, s5
 801ac3a:	eef0 2a47 	vmov.f32	s5, s14
 801ac3e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac42:	ee13 2a10 	vmov	r2, s6
 801ac46:	9327      	str	r3, [sp, #156]	; 0x9c
 801ac48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ac4a:	eeb0 3a67 	vmov.f32	s6, s15
 801ac4e:	fb92 f3f3 	sdiv	r3, r2, r3
 801ac52:	9328      	str	r3, [sp, #160]	; 0xa0
 801ac54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac56:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ac58:	3b01      	subs	r3, #1
 801ac5a:	9309      	str	r3, [sp, #36]	; 0x24
 801ac5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ac5e:	bf08      	it	eq
 801ac60:	4613      	moveq	r3, r2
 801ac62:	9306      	str	r3, [sp, #24]
 801ac64:	e6d7      	b.n	801aa16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ac66:	f110 0c01 	adds.w	ip, r0, #1
 801ac6a:	d483      	bmi.n	801ab74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ac6c:	4563      	cmp	r3, ip
 801ac6e:	db81      	blt.n	801ab74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ac70:	f115 0c01 	adds.w	ip, r5, #1
 801ac74:	f53f af7e 	bmi.w	801ab74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ac78:	4567      	cmp	r7, ip
 801ac7a:	f6ff af7b 	blt.w	801ab74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ac7e:	b23f      	sxth	r7, r7
 801ac80:	b21b      	sxth	r3, r3
 801ac82:	9700      	str	r7, [sp, #0]
 801ac84:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801ac88:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801ac8c:	9a08      	ldr	r2, [sp, #32]
 801ac8e:	4631      	mov	r1, r6
 801ac90:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ac92:	f7ff fdf9 	bl	801a888 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ac96:	e76d      	b.n	801ab74 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ac98:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ac9a:	ea4f 402b 	mov.w	r0, fp, asr #16
 801ac9e:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801aca2:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801aca6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801acaa:	1421      	asrs	r1, r4, #16
 801acac:	930a      	str	r3, [sp, #40]	; 0x28
 801acae:	fb0c 0101 	mla	r1, ip, r1, r0
 801acb2:	9808      	ldr	r0, [sp, #32]
 801acb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801acb8:	1845      	adds	r5, r0, r1
 801acba:	5c40      	ldrb	r0, [r0, r1]
 801acbc:	796f      	ldrb	r7, [r5, #5]
 801acbe:	7869      	ldrb	r1, [r5, #1]
 801acc0:	f895 8002 	ldrb.w	r8, [r5, #2]
 801acc4:	f895 a003 	ldrb.w	sl, [r5, #3]
 801acc8:	f895 9004 	ldrb.w	r9, [r5, #4]
 801accc:	970c      	str	r7, [sp, #48]	; 0x30
 801acce:	b1a2      	cbz	r2, 801acfa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801acd0:	2703      	movs	r7, #3
 801acd2:	f06f 0304 	mvn.w	r3, #4
 801acd6:	3505      	adds	r5, #5
 801acd8:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801acdc:	eb05 070c 	add.w	r7, r5, ip
 801ace0:	f815 500c 	ldrb.w	r5, [r5, ip]
 801ace4:	9513      	str	r5, [sp, #76]	; 0x4c
 801ace6:	787d      	ldrb	r5, [r7, #1]
 801ace8:	9515      	str	r5, [sp, #84]	; 0x54
 801acea:	78bd      	ldrb	r5, [r7, #2]
 801acec:	9517      	str	r5, [sp, #92]	; 0x5c
 801acee:	78fd      	ldrb	r5, [r7, #3]
 801acf0:	9514      	str	r5, [sp, #80]	; 0x50
 801acf2:	793d      	ldrb	r5, [r7, #4]
 801acf4:	9516      	str	r5, [sp, #88]	; 0x58
 801acf6:	797d      	ldrb	r5, [r7, #5]
 801acf8:	9518      	str	r5, [sp, #96]	; 0x60
 801acfa:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801acfe:	b292      	uxth	r2, r2
 801ad00:	3603      	adds	r6, #3
 801ad02:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ad06:	fb03 f502 	mul.w	r5, r3, r2
 801ad0a:	011b      	lsls	r3, r3, #4
 801ad0c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801ad10:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801ad14:	1b5b      	subs	r3, r3, r5
 801ad16:	b292      	uxth	r2, r2
 801ad18:	b29b      	uxth	r3, r3
 801ad1a:	1abf      	subs	r7, r7, r2
 801ad1c:	fb03 f909 	mul.w	r9, r3, r9
 801ad20:	b2bf      	uxth	r7, r7
 801ad22:	fb03 fa0a 	mul.w	sl, r3, sl
 801ad26:	fb07 9901 	mla	r9, r7, r1, r9
 801ad2a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801ad2c:	fb07 aa00 	mla	sl, r7, r0, sl
 801ad30:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801ad32:	fb02 9901 	mla	r9, r2, r1, r9
 801ad36:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ad38:	fb02 aa00 	mla	sl, r2, r0, sl
 801ad3c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801ad3e:	fb05 9901 	mla	r9, r5, r1, r9
 801ad42:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ad44:	fb05 aa00 	mla	sl, r5, r0, sl
 801ad48:	434b      	muls	r3, r1
 801ad4a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801ad4c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ad50:	fb07 3308 	mla	r3, r7, r8, r3
 801ad54:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ad58:	f806 ac06 	strb.w	sl, [r6, #-6]
 801ad5c:	fb02 3201 	mla	r2, r2, r1, r3
 801ad60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801ad62:	f806 9c05 	strb.w	r9, [r6, #-5]
 801ad66:	fb05 2503 	mla	r5, r5, r3, r2
 801ad6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ad6c:	122d      	asrs	r5, r5, #8
 801ad6e:	449b      	add	fp, r3
 801ad70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ad72:	f806 5c04 	strb.w	r5, [r6, #-4]
 801ad76:	441c      	add	r4, r3
 801ad78:	e72b      	b.n	801abd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ad7a:	b01b      	add	sp, #108	; 0x6c
 801ad7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad84:	b087      	sub	sp, #28
 801ad86:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801ad8a:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801ad8e:	fb05 7003 	mla	r0, r5, r3, r7
 801ad92:	2d00      	cmp	r5, #0
 801ad94:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ad98:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801ad9c:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801ada0:	f2c0 811f 	blt.w	801afe2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801ada4:	45a8      	cmp	r8, r5
 801ada6:	f340 811c 	ble.w	801afe2 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801adaa:	2f00      	cmp	r7, #0
 801adac:	f2c0 8117 	blt.w	801afde <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801adb0:	42bb      	cmp	r3, r7
 801adb2:	f340 8114 	ble.w	801afde <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801adb6:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801adba:	1c7a      	adds	r2, r7, #1
 801adbc:	f100 8114 	bmi.w	801afe8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801adc0:	4293      	cmp	r3, r2
 801adc2:	f340 8111 	ble.w	801afe8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801adc6:	2c00      	cmp	r4, #0
 801adc8:	f000 8110 	beq.w	801afec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801adcc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801add0:	3501      	adds	r5, #1
 801add2:	f100 810f 	bmi.w	801aff4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801add6:	45a8      	cmp	r8, r5
 801add8:	f340 810c 	ble.w	801aff4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801addc:	f1be 0f00 	cmp.w	lr, #0
 801ade0:	f000 810b 	beq.w	801affa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801ade4:	2f00      	cmp	r7, #0
 801ade6:	f2c0 8103 	blt.w	801aff0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801adea:	42bb      	cmp	r3, r7
 801adec:	f340 8100 	ble.w	801aff0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801adf0:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801adf4:	3701      	adds	r7, #1
 801adf6:	f100 8103 	bmi.w	801b000 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801adfa:	42bb      	cmp	r3, r7
 801adfc:	f340 8100 	ble.w	801b000 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801ae00:	2c00      	cmp	r4, #0
 801ae02:	f000 80ff 	beq.w	801b004 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801ae06:	3301      	adds	r3, #1
 801ae08:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ae0c:	fa1f fc84 	uxth.w	ip, r4
 801ae10:	fa1f fe8e 	uxth.w	lr, lr
 801ae14:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801ae18:	fb0c f90e 	mul.w	r9, ip, lr
 801ae1c:	0e13      	lsrs	r3, r2, #24
 801ae1e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801ae22:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801ae26:	9302      	str	r3, [sp, #8]
 801ae28:	ebac 0709 	sub.w	r7, ip, r9
 801ae2c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801ae30:	fa1f f48e 	uxth.w	r4, lr
 801ae34:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801ae38:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801ae3c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801ae40:	fb0a fe0e 	mul.w	lr, sl, lr
 801ae44:	1b1b      	subs	r3, r3, r4
 801ae46:	fb0a f606 	mul.w	r6, sl, r6
 801ae4a:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801ae4e:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801ae52:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801ae56:	b29b      	uxth	r3, r3
 801ae58:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ae5c:	b2bf      	uxth	r7, r7
 801ae5e:	9301      	str	r3, [sp, #4]
 801ae60:	44e6      	add	lr, ip
 801ae62:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801ae66:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ae6a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801ae6e:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801ae72:	9303      	str	r3, [sp, #12]
 801ae74:	0a33      	lsrs	r3, r6, #8
 801ae76:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801ae7a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801ae7e:	9304      	str	r3, [sp, #16]
 801ae80:	fb0b f606 	mul.w	r6, fp, r6
 801ae84:	fb0b f000 	mul.w	r0, fp, r0
 801ae88:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801ae8c:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801ae90:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ae94:	44b6      	add	lr, r6
 801ae96:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801ae9a:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801ae9e:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801aea2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801aea6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801aeaa:	fb08 f606 	mul.w	r6, r8, r6
 801aeae:	0a03      	lsrs	r3, r0, #8
 801aeb0:	fb08 f505 	mul.w	r5, r8, r5
 801aeb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801aeb8:	0a30      	lsrs	r0, r6, #8
 801aeba:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801aebe:	9305      	str	r3, [sp, #20]
 801aec0:	0e13      	lsrs	r3, r2, #24
 801aec2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801aec6:	fb0e fe07 	mul.w	lr, lr, r7
 801aeca:	4430      	add	r0, r6
 801aecc:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801aed0:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801aed4:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801aed8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801aedc:	0a00      	lsrs	r0, r0, #8
 801aede:	435e      	muls	r6, r3
 801aee0:	0a2d      	lsrs	r5, r5, #8
 801aee2:	435a      	muls	r2, r3
 801aee4:	9b03      	ldr	r3, [sp, #12]
 801aee6:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801aeea:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801aeee:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801aef2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aef6:	44b4      	add	ip, r6
 801aef8:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801aefc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801af00:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801af04:	9e01      	ldr	r6, [sp, #4]
 801af06:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801af0a:	fb03 ee06 	mla	lr, r3, r6, lr
 801af0e:	9b04      	ldr	r3, [sp, #16]
 801af10:	0a12      	lsrs	r2, r2, #8
 801af12:	fb0c ee09 	mla	lr, ip, r9, lr
 801af16:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801af1a:	9b05      	ldr	r3, [sp, #20]
 801af1c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801af20:	fb00 ee04 	mla	lr, r0, r4, lr
 801af24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af28:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801af2c:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801af30:	9b01      	ldr	r3, [sp, #4]
 801af32:	fb07 fe0e 	mul.w	lr, r7, lr
 801af36:	fb07 f70b 	mul.w	r7, r7, fp
 801af3a:	fb03 ee06 	mla	lr, r3, r6, lr
 801af3e:	fb03 730a 	mla	r3, r3, sl, r7
 801af42:	fb09 e202 	mla	r2, r9, r2, lr
 801af46:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801af4a:	fb04 2e0e 	mla	lr, r4, lr, r2
 801af4e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801af52:	fb04 3408 	mla	r4, r4, r8, r3
 801af56:	9b02      	ldr	r3, [sp, #8]
 801af58:	b292      	uxth	r2, r2
 801af5a:	fb09 4903 	mla	r9, r9, r3, r4
 801af5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801af62:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801af66:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801af6a:	fb09 f902 	mul.w	r9, r9, r2
 801af6e:	ea40 0e0e 	orr.w	lr, r0, lr
 801af72:	f109 0301 	add.w	r3, r9, #1
 801af76:	fa5f f08e 	uxtb.w	r0, lr
 801af7a:	fb10 f002 	smulbb	r0, r0, r2
 801af7e:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801af82:	780b      	ldrb	r3, [r1, #0]
 801af84:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801af88:	fa5f f989 	uxtb.w	r9, r9
 801af8c:	fb03 0309 	mla	r3, r3, r9, r0
 801af90:	b29b      	uxth	r3, r3
 801af92:	1c58      	adds	r0, r3, #1
 801af94:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801af98:	7848      	ldrb	r0, [r1, #1]
 801af9a:	fb10 f009 	smulbb	r0, r0, r9
 801af9e:	121b      	asrs	r3, r3, #8
 801afa0:	700b      	strb	r3, [r1, #0]
 801afa2:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801afa6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801afaa:	fb03 0302 	mla	r3, r3, r2, r0
 801afae:	b29b      	uxth	r3, r3
 801afb0:	1c58      	adds	r0, r3, #1
 801afb2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801afb6:	121b      	asrs	r3, r3, #8
 801afb8:	704b      	strb	r3, [r1, #1]
 801afba:	788b      	ldrb	r3, [r1, #2]
 801afbc:	fb13 f909 	smulbb	r9, r3, r9
 801afc0:	fb0e 9e02 	mla	lr, lr, r2, r9
 801afc4:	fa1f fe8e 	uxth.w	lr, lr
 801afc8:	f10e 0301 	add.w	r3, lr, #1
 801afcc:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801afd0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801afd4:	f881 e002 	strb.w	lr, [r1, #2]
 801afd8:	b007      	add	sp, #28
 801afda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afde:	2600      	movs	r6, #0
 801afe0:	e6eb      	b.n	801adba <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801afe2:	2000      	movs	r0, #0
 801afe4:	4606      	mov	r6, r0
 801afe6:	e6f3      	b.n	801add0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801afe8:	2000      	movs	r0, #0
 801afea:	e6f1      	b.n	801add0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801afec:	4620      	mov	r0, r4
 801afee:	e6ef      	b.n	801add0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801aff0:	2500      	movs	r5, #0
 801aff2:	e6ff      	b.n	801adf4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801aff4:	2200      	movs	r2, #0
 801aff6:	4615      	mov	r5, r2
 801aff8:	e708      	b.n	801ae0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801affa:	4672      	mov	r2, lr
 801affc:	4675      	mov	r5, lr
 801affe:	e705      	b.n	801ae0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b000:	2200      	movs	r2, #0
 801b002:	e703      	b.n	801ae0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801b004:	4622      	mov	r2, r4
 801b006:	e701      	b.n	801ae0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801b008 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b00c:	b09d      	sub	sp, #116	; 0x74
 801b00e:	9219      	str	r2, [sp, #100]	; 0x64
 801b010:	9307      	str	r3, [sp, #28]
 801b012:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801b014:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801b018:	901b      	str	r0, [sp, #108]	; 0x6c
 801b01a:	931a      	str	r3, [sp, #104]	; 0x68
 801b01c:	6850      	ldr	r0, [r2, #4]
 801b01e:	9117      	str	r1, [sp, #92]	; 0x5c
 801b020:	6812      	ldr	r2, [r2, #0]
 801b022:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801b026:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801b02a:	fb00 1303 	mla	r3, r0, r3, r1
 801b02e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b032:	18d3      	adds	r3, r2, r3
 801b034:	930a      	str	r3, [sp, #40]	; 0x28
 801b036:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	9310      	str	r3, [sp, #64]	; 0x40
 801b03c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801b040:	930b      	str	r3, [sp, #44]	; 0x2c
 801b042:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b044:	2b00      	cmp	r3, #0
 801b046:	dc03      	bgt.n	801b050 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b04a:	2b00      	cmp	r3, #0
 801b04c:	f340 8368 	ble.w	801b720 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b050:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b052:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b056:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b05a:	1e48      	subs	r0, r1, #1
 801b05c:	1e57      	subs	r7, r2, #1
 801b05e:	9b07      	ldr	r3, [sp, #28]
 801b060:	2b00      	cmp	r3, #0
 801b062:	f340 8187 	ble.w	801b374 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801b066:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b06a:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b06e:	d406      	bmi.n	801b07e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b070:	4584      	cmp	ip, r0
 801b072:	da04      	bge.n	801b07e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b074:	2b00      	cmp	r3, #0
 801b076:	db02      	blt.n	801b07e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b078:	42bb      	cmp	r3, r7
 801b07a:	f2c0 817c 	blt.w	801b376 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801b07e:	f11c 0c01 	adds.w	ip, ip, #1
 801b082:	f100 816c 	bmi.w	801b35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b086:	4561      	cmp	r1, ip
 801b088:	f2c0 8169 	blt.w	801b35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b08c:	3301      	adds	r3, #1
 801b08e:	f100 8166 	bmi.w	801b35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b092:	429a      	cmp	r2, r3
 801b094:	f2c0 8163 	blt.w	801b35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801b098:	9b07      	ldr	r3, [sp, #28]
 801b09a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801b09c:	9318      	str	r3, [sp, #96]	; 0x60
 801b09e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	f340 8186 	ble.w	801b3b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801b0a6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b0a8:	142a      	asrs	r2, r5, #16
 801b0aa:	ea4f 4026 	mov.w	r0, r6, asr #16
 801b0ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b0b2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801b0b6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801b0ba:	f100 81cb 	bmi.w	801b454 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b0be:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b0c2:	4542      	cmp	r2, r8
 801b0c4:	f280 81c6 	bge.w	801b454 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b0c8:	2800      	cmp	r0, #0
 801b0ca:	f2c0 81c3 	blt.w	801b454 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b0ce:	f103 38ff 	add.w	r8, r3, #4294967295
 801b0d2:	4540      	cmp	r0, r8
 801b0d4:	f280 81be 	bge.w	801b454 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801b0d8:	fa0f f38e 	sxth.w	r3, lr
 801b0dc:	fb00 2203 	mla	r2, r0, r3, r2
 801b0e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b0e2:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801b0e6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801b0ea:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801b0ee:	2900      	cmp	r1, #0
 801b0f0:	f000 81a6 	beq.w	801b440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801b0f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b0f8:	900c      	str	r0, [sp, #48]	; 0x30
 801b0fa:	0e00      	lsrs	r0, r0, #24
 801b0fc:	9013      	str	r0, [sp, #76]	; 0x4c
 801b0fe:	f1bc 0f00 	cmp.w	ip, #0
 801b102:	d00f      	beq.n	801b124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b104:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801b108:	3b01      	subs	r3, #1
 801b10a:	009b      	lsls	r3, r3, #2
 801b10c:	3304      	adds	r3, #4
 801b10e:	eb08 0003 	add.w	r0, r8, r3
 801b112:	f858 3003 	ldr.w	r3, [r8, r3]
 801b116:	9308      	str	r3, [sp, #32]
 801b118:	0e1b      	lsrs	r3, r3, #24
 801b11a:	9311      	str	r3, [sp, #68]	; 0x44
 801b11c:	6843      	ldr	r3, [r0, #4]
 801b11e:	930d      	str	r3, [sp, #52]	; 0x34
 801b120:	0e1b      	lsrs	r3, r3, #24
 801b122:	9314      	str	r3, [sp, #80]	; 0x50
 801b124:	b289      	uxth	r1, r1
 801b126:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b128:	fa1f fc8c 	uxth.w	ip, ip
 801b12c:	0108      	lsls	r0, r1, #4
 801b12e:	fb01 f90c 	mul.w	r9, r1, ip
 801b132:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801b136:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801b13a:	eba0 0809 	sub.w	r8, r0, r9
 801b13e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b140:	fa1f f18c 	uxth.w	r1, ip
 801b144:	fa1f f888 	uxth.w	r8, r8
 801b148:	1a5b      	subs	r3, r3, r1
 801b14a:	fb08 f000 	mul.w	r0, r8, r0
 801b14e:	b29b      	uxth	r3, r3
 801b150:	fb03 000e 	mla	r0, r3, lr, r0
 801b154:	fb01 0004 	mla	r0, r1, r4, r0
 801b158:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b15a:	fb09 0004 	mla	r0, r9, r4, r0
 801b15e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b162:	2800      	cmp	r0, #0
 801b164:	f000 80f2 	beq.w	801b34c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b168:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801b16c:	d01b      	beq.n	801b1a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b16e:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801b172:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b176:	fb0e fa0a 	mul.w	sl, lr, sl
 801b17a:	fb0e fe02 	mul.w	lr, lr, r2
 801b17e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801b182:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b186:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801b18a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b18e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b192:	4452      	add	r2, sl
 801b194:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b198:	0a12      	lsrs	r2, r2, #8
 801b19a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b19e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801b1a2:	ea42 020c 	orr.w	r2, r2, ip
 801b1a6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1a8:	2cff      	cmp	r4, #255	; 0xff
 801b1aa:	d021      	beq.n	801b1f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801b1ac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b1ae:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b1b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1b4:	fb04 fb0b 	mul.w	fp, r4, fp
 801b1b8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b1ba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b1be:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b1c0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b1c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b1c8:	fb04 fa0a 	mul.w	sl, r4, sl
 801b1cc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b1d0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b1d4:	44de      	add	lr, fp
 801b1d6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b1da:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b1de:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b1e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b1e6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b1ea:	ea4e 040a 	orr.w	r4, lr, sl
 801b1ee:	940c      	str	r4, [sp, #48]	; 0x30
 801b1f0:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b1f2:	2cff      	cmp	r4, #255	; 0xff
 801b1f4:	d021      	beq.n	801b23a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801b1f6:	9c08      	ldr	r4, [sp, #32]
 801b1f8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b1fc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b1fe:	fb04 fb0b 	mul.w	fp, r4, fp
 801b202:	9c08      	ldr	r4, [sp, #32]
 801b204:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b208:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801b20a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b20e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b212:	fb04 fa0a 	mul.w	sl, r4, sl
 801b216:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b21a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b21e:	44de      	add	lr, fp
 801b220:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b224:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b228:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b22c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b230:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b234:	ea4e 040a 	orr.w	r4, lr, sl
 801b238:	9408      	str	r4, [sp, #32]
 801b23a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b23c:	2cff      	cmp	r4, #255	; 0xff
 801b23e:	d021      	beq.n	801b284 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b240:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b242:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801b246:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b248:	fb04 fb0b 	mul.w	fp, r4, fp
 801b24c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b24e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b252:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b254:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b258:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801b25c:	fb04 fa0a 	mul.w	sl, r4, sl
 801b260:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b264:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801b268:	44de      	add	lr, fp
 801b26a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b26e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b272:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b276:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b27a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b27e:	ea4e 040a 	orr.w	r4, lr, sl
 801b282:	940d      	str	r4, [sp, #52]	; 0x34
 801b284:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b286:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801b28a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b28e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b292:	9c08      	ldr	r4, [sp, #32]
 801b294:	fb08 fc0c 	mul.w	ip, r8, ip
 801b298:	fb03 cc0e 	mla	ip, r3, lr, ip
 801b29c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b2a0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b2a2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b2a6:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801b2aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b2ac:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b2b0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801b2b4:	fb08 f80e 	mul.w	r8, r8, lr
 801b2b8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b2bc:	fb03 8202 	mla	r2, r3, r2, r8
 801b2c0:	9b08      	ldr	r3, [sp, #32]
 801b2c2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b2c6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801b2ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2cc:	fb01 220a 	mla	r2, r1, sl, r2
 801b2d0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801b2d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2d6:	fb09 2901 	mla	r9, r9, r1, r2
 801b2da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b2dc:	4343      	muls	r3, r0
 801b2de:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b2e2:	1c58      	adds	r0, r3, #1
 801b2e4:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801b2e8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b2ec:	783b      	ldrb	r3, [r7, #0]
 801b2ee:	ea4c 0c09 	orr.w	ip, ip, r9
 801b2f2:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b2f6:	fa5f f28c 	uxtb.w	r2, ip
 801b2fa:	b2c0      	uxtb	r0, r0
 801b2fc:	fb12 f201 	smulbb	r2, r2, r1
 801b300:	fb03 2300 	mla	r3, r3, r0, r2
 801b304:	b29b      	uxth	r3, r3
 801b306:	1c5a      	adds	r2, r3, #1
 801b308:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b30c:	787a      	ldrb	r2, [r7, #1]
 801b30e:	fb12 f200 	smulbb	r2, r2, r0
 801b312:	121b      	asrs	r3, r3, #8
 801b314:	703b      	strb	r3, [r7, #0]
 801b316:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b31a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b31e:	fb03 2301 	mla	r3, r3, r1, r2
 801b322:	b29b      	uxth	r3, r3
 801b324:	1c5a      	adds	r2, r3, #1
 801b326:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b32a:	121b      	asrs	r3, r3, #8
 801b32c:	707b      	strb	r3, [r7, #1]
 801b32e:	78bb      	ldrb	r3, [r7, #2]
 801b330:	fb13 f000 	smulbb	r0, r3, r0
 801b334:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b338:	fa1f fc8c 	uxth.w	ip, ip
 801b33c:	f10c 0301 	add.w	r3, ip, #1
 801b340:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b344:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b348:	f887 c002 	strb.w	ip, [r7, #2]
 801b34c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b34e:	3703      	adds	r7, #3
 801b350:	441d      	add	r5, r3
 801b352:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b354:	441e      	add	r6, r3
 801b356:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b358:	3b01      	subs	r3, #1
 801b35a:	9318      	str	r3, [sp, #96]	; 0x60
 801b35c:	e69f      	b.n	801b09e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b35e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b360:	441d      	add	r5, r3
 801b362:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b364:	441e      	add	r6, r3
 801b366:	9b07      	ldr	r3, [sp, #28]
 801b368:	3b01      	subs	r3, #1
 801b36a:	9307      	str	r3, [sp, #28]
 801b36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b36e:	3303      	adds	r3, #3
 801b370:	930a      	str	r3, [sp, #40]	; 0x28
 801b372:	e674      	b.n	801b05e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b374:	d025      	beq.n	801b3c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801b376:	9b07      	ldr	r3, [sp, #28]
 801b378:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801b37a:	3b01      	subs	r3, #1
 801b37c:	fb00 5003 	mla	r0, r0, r3, r5
 801b380:	1400      	asrs	r0, r0, #16
 801b382:	f53f ae89 	bmi.w	801b098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b386:	3901      	subs	r1, #1
 801b388:	4288      	cmp	r0, r1
 801b38a:	f6bf ae85 	bge.w	801b098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b38e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801b390:	fb01 6303 	mla	r3, r1, r3, r6
 801b394:	141b      	asrs	r3, r3, #16
 801b396:	f53f ae7f 	bmi.w	801b098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b39a:	3a01      	subs	r2, #1
 801b39c:	4293      	cmp	r3, r2
 801b39e:	f6bf ae7b 	bge.w	801b098 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b3a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3a4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b3a8:	f103 0e03 	add.w	lr, r3, #3
 801b3ac:	f1bb 0f00 	cmp.w	fp, #0
 801b3b0:	dc6e      	bgt.n	801b490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801b3b2:	9b07      	ldr	r3, [sp, #28]
 801b3b4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b3be:	4423      	add	r3, r4
 801b3c0:	930a      	str	r3, [sp, #40]	; 0x28
 801b3c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	f340 81ab 	ble.w	801b720 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801b3ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b3ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b3d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b3d4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b3d8:	eef0 6a62 	vmov.f32	s13, s5
 801b3dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b3e0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b3e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b3e8:	ee16 5a90 	vmov	r5, s13
 801b3ec:	eef0 6a43 	vmov.f32	s13, s6
 801b3f0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b3f4:	ee16 6a90 	vmov	r6, s13
 801b3f8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b3fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b400:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b404:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b408:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b40c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b410:	ee12 2a90 	vmov	r2, s5
 801b414:	eef0 2a47 	vmov.f32	s5, s14
 801b418:	fb92 f3f3 	sdiv	r3, r2, r3
 801b41c:	ee13 2a10 	vmov	r2, s6
 801b420:	9329      	str	r3, [sp, #164]	; 0xa4
 801b422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b424:	eeb0 3a67 	vmov.f32	s6, s15
 801b428:	fb92 f3f3 	sdiv	r3, r2, r3
 801b42c:	932a      	str	r3, [sp, #168]	; 0xa8
 801b42e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b430:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801b432:	3b01      	subs	r3, #1
 801b434:	9317      	str	r3, [sp, #92]	; 0x5c
 801b436:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b438:	bf08      	it	eq
 801b43a:	4613      	moveq	r3, r2
 801b43c:	9307      	str	r3, [sp, #28]
 801b43e:	e600      	b.n	801b042 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b440:	f1bc 0f00 	cmp.w	ip, #0
 801b444:	f43f ae6e 	beq.w	801b124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b448:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801b44c:	9308      	str	r3, [sp, #32]
 801b44e:	0e1b      	lsrs	r3, r3, #24
 801b450:	9311      	str	r3, [sp, #68]	; 0x44
 801b452:	e667      	b.n	801b124 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801b454:	f112 0801 	adds.w	r8, r2, #1
 801b458:	f53f af78 	bmi.w	801b34c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b45c:	45c6      	cmp	lr, r8
 801b45e:	f6ff af75 	blt.w	801b34c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b462:	f110 0801 	adds.w	r8, r0, #1
 801b466:	f53f af71 	bmi.w	801b34c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b46a:	4543      	cmp	r3, r8
 801b46c:	f6ff af6e 	blt.w	801b34c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b470:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801b472:	b21b      	sxth	r3, r3
 801b474:	9201      	str	r2, [sp, #4]
 801b476:	9300      	str	r3, [sp, #0]
 801b478:	fa0f f38e 	sxth.w	r3, lr
 801b47c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b482:	e9cd c404 	strd	ip, r4, [sp, #16]
 801b486:	4639      	mov	r1, r7
 801b488:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b48a:	f7ff fc79 	bl	801ad80 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801b48e:	e75d      	b.n	801b34c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801b490:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801b492:	142f      	asrs	r7, r5, #16
 801b494:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801b496:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b49a:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801b49e:	1433      	asrs	r3, r6, #16
 801b4a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b4a4:	fb02 7303 	mla	r3, r2, r3, r7
 801b4a8:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801b4ac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801b4b0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b4b4:	2900      	cmp	r1, #0
 801b4b6:	f000 812a 	beq.w	801b70e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801b4ba:	687c      	ldr	r4, [r7, #4]
 801b4bc:	940e      	str	r4, [sp, #56]	; 0x38
 801b4be:	0e24      	lsrs	r4, r4, #24
 801b4c0:	9415      	str	r4, [sp, #84]	; 0x54
 801b4c2:	b178      	cbz	r0, 801b4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b4c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801b4c8:	3a01      	subs	r2, #1
 801b4ca:	0092      	lsls	r2, r2, #2
 801b4cc:	3204      	adds	r2, #4
 801b4ce:	eb07 0802 	add.w	r8, r7, r2
 801b4d2:	58ba      	ldr	r2, [r7, r2]
 801b4d4:	9209      	str	r2, [sp, #36]	; 0x24
 801b4d6:	0e12      	lsrs	r2, r2, #24
 801b4d8:	9212      	str	r2, [sp, #72]	; 0x48
 801b4da:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801b4de:	920f      	str	r2, [sp, #60]	; 0x3c
 801b4e0:	0e12      	lsrs	r2, r2, #24
 801b4e2:	9216      	str	r2, [sp, #88]	; 0x58
 801b4e4:	b289      	uxth	r1, r1
 801b4e6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b4e8:	b280      	uxth	r0, r0
 801b4ea:	fb01 f900 	mul.w	r9, r1, r0
 801b4ee:	0109      	lsls	r1, r1, #4
 801b4f0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b4f4:	eba1 0809 	sub.w	r8, r1, r9
 801b4f8:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801b4fc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b4fe:	b280      	uxth	r0, r0
 801b500:	fa1f f888 	uxth.w	r8, r8
 801b504:	1a12      	subs	r2, r2, r0
 801b506:	fb08 f101 	mul.w	r1, r8, r1
 801b50a:	b292      	uxth	r2, r2
 801b50c:	fb02 110c 	mla	r1, r2, ip, r1
 801b510:	fb00 1104 	mla	r1, r0, r4, r1
 801b514:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b516:	fb09 1104 	mla	r1, r9, r4, r1
 801b51a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b51e:	2900      	cmp	r1, #0
 801b520:	f000 80ec 	beq.w	801b6fc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801b524:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801b528:	d019      	beq.n	801b55e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801b52a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801b52e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b532:	fb0c fa0a 	mul.w	sl, ip, sl
 801b536:	fb0c fc03 	mul.w	ip, ip, r3
 801b53a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b53e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801b542:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801b546:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b54a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b54e:	4453      	add	r3, sl
 801b550:	0a3f      	lsrs	r7, r7, #8
 801b552:	0a1b      	lsrs	r3, r3, #8
 801b554:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801b558:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801b55c:	433b      	orrs	r3, r7
 801b55e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b560:	2cff      	cmp	r4, #255	; 0xff
 801b562:	d020      	beq.n	801b5a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801b564:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b566:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b56a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b56c:	4367      	muls	r7, r4
 801b56e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b570:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b574:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b578:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801b57a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b57e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b582:	fb04 fa0a 	mul.w	sl, r4, sl
 801b586:	44bc      	add	ip, r7
 801b588:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b58c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b590:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b594:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b598:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b59c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b5a0:	ea4c 040a 	orr.w	r4, ip, sl
 801b5a4:	940e      	str	r4, [sp, #56]	; 0x38
 801b5a6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b5a8:	2cff      	cmp	r4, #255	; 0xff
 801b5aa:	d020      	beq.n	801b5ee <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801b5ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b5ae:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b5b2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b5b4:	4367      	muls	r7, r4
 801b5b6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b5b8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b5bc:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b5c0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b5c2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b5c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b5ca:	fb04 fa0a 	mul.w	sl, r4, sl
 801b5ce:	44bc      	add	ip, r7
 801b5d0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b5d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b5d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b5dc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b5e0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b5e4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b5e8:	ea4c 040a 	orr.w	r4, ip, sl
 801b5ec:	9409      	str	r4, [sp, #36]	; 0x24
 801b5ee:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b5f0:	2cff      	cmp	r4, #255	; 0xff
 801b5f2:	d020      	beq.n	801b636 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801b5f4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b5f6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b5fa:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b5fc:	4367      	muls	r7, r4
 801b5fe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b600:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b604:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801b608:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801b60a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801b60e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b612:	fb04 fa0a 	mul.w	sl, r4, sl
 801b616:	44bc      	add	ip, r7
 801b618:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801b61c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b620:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b624:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b628:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b62c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801b630:	ea4c 040a 	orr.w	r4, ip, sl
 801b634:	940f      	str	r4, [sp, #60]	; 0x3c
 801b636:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b638:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801b63c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801b640:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801b644:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801b646:	fb08 f707 	mul.w	r7, r8, r7
 801b64a:	fb02 770c 	mla	r7, r2, ip, r7
 801b64e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b652:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801b654:	fb00 770c 	mla	r7, r0, ip, r7
 801b658:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801b65c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801b65e:	fb09 770c 	mla	r7, r9, ip, r7
 801b662:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801b666:	fb08 f80c 	mul.w	r8, r8, ip
 801b66a:	0a3f      	lsrs	r7, r7, #8
 801b66c:	fb02 8303 	mla	r3, r2, r3, r8
 801b670:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b672:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801b676:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801b67a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b67c:	fb00 330a 	mla	r3, r0, sl, r3
 801b680:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801b684:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801b686:	fb09 3c0c 	mla	ip, r9, ip, r3
 801b68a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b68c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b690:	434b      	muls	r3, r1
 801b692:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801b696:	1c59      	adds	r1, r3, #1
 801b698:	ea47 070c 	orr.w	r7, r7, ip
 801b69c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801b6a0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801b6a4:	b2fa      	uxtb	r2, r7
 801b6a6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801b6aa:	fb12 f200 	smulbb	r2, r2, r0
 801b6ae:	b2c9      	uxtb	r1, r1
 801b6b0:	fb03 2301 	mla	r3, r3, r1, r2
 801b6b4:	b29b      	uxth	r3, r3
 801b6b6:	1c5a      	adds	r2, r3, #1
 801b6b8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b6bc:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801b6c0:	fb12 f201 	smulbb	r2, r2, r1
 801b6c4:	121b      	asrs	r3, r3, #8
 801b6c6:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801b6ca:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801b6ce:	0c3f      	lsrs	r7, r7, #16
 801b6d0:	fb03 2300 	mla	r3, r3, r0, r2
 801b6d4:	b29b      	uxth	r3, r3
 801b6d6:	1c5a      	adds	r2, r3, #1
 801b6d8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b6dc:	121b      	asrs	r3, r3, #8
 801b6de:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801b6e2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801b6e6:	fb13 f101 	smulbb	r1, r3, r1
 801b6ea:	fb07 1700 	mla	r7, r7, r0, r1
 801b6ee:	b2bf      	uxth	r7, r7
 801b6f0:	1c79      	adds	r1, r7, #1
 801b6f2:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801b6f6:	123f      	asrs	r7, r7, #8
 801b6f8:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801b6fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801b6fe:	f10e 0e03 	add.w	lr, lr, #3
 801b702:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b706:	441d      	add	r5, r3
 801b708:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b70a:	441e      	add	r6, r3
 801b70c:	e64e      	b.n	801b3ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801b70e:	2800      	cmp	r0, #0
 801b710:	f43f aee8 	beq.w	801b4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b714:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801b718:	9209      	str	r2, [sp, #36]	; 0x24
 801b71a:	0e12      	lsrs	r2, r2, #24
 801b71c:	9212      	str	r2, [sp, #72]	; 0x48
 801b71e:	e6e1      	b.n	801b4e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801b720:	b01d      	add	sp, #116	; 0x74
 801b722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b726 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801b726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b72a:	b087      	sub	sp, #28
 801b72c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b730:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b734:	fb05 7003 	mla	r0, r5, r3, r7
 801b738:	2d00      	cmp	r5, #0
 801b73a:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b73e:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b742:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b746:	f2c0 810a 	blt.w	801b95e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801b74a:	45a8      	cmp	r8, r5
 801b74c:	f340 8107 	ble.w	801b95e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801b750:	2f00      	cmp	r7, #0
 801b752:	f2c0 8102 	blt.w	801b95a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801b756:	42bb      	cmp	r3, r7
 801b758:	f340 80ff 	ble.w	801b95a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801b75c:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b760:	1c7a      	adds	r2, r7, #1
 801b762:	f100 80ff 	bmi.w	801b964 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801b766:	4293      	cmp	r3, r2
 801b768:	f340 80fc 	ble.w	801b964 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801b76c:	2c00      	cmp	r4, #0
 801b76e:	f000 80fb 	beq.w	801b968 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801b772:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b776:	3501      	adds	r5, #1
 801b778:	f100 80fa 	bmi.w	801b970 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801b77c:	45a8      	cmp	r8, r5
 801b77e:	f340 80f7 	ble.w	801b970 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801b782:	f1be 0f00 	cmp.w	lr, #0
 801b786:	f000 80f6 	beq.w	801b976 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801b78a:	2f00      	cmp	r7, #0
 801b78c:	f2c0 80ee 	blt.w	801b96c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801b790:	42bb      	cmp	r3, r7
 801b792:	f340 80eb 	ble.w	801b96c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801b796:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801b79a:	3701      	adds	r7, #1
 801b79c:	f100 80ee 	bmi.w	801b97c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801b7a0:	42bb      	cmp	r3, r7
 801b7a2:	f340 80eb 	ble.w	801b97c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801b7a6:	2c00      	cmp	r4, #0
 801b7a8:	f000 80ea 	beq.w	801b980 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801b7ac:	3301      	adds	r3, #1
 801b7ae:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b7b2:	fa1f fc84 	uxth.w	ip, r4
 801b7b6:	fa1f fe8e 	uxth.w	lr, lr
 801b7ba:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b7be:	fb0c f90e 	mul.w	r9, ip, lr
 801b7c2:	0e13      	lsrs	r3, r2, #24
 801b7c4:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b7c8:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801b7cc:	9302      	str	r3, [sp, #8]
 801b7ce:	ebac 0709 	sub.w	r7, ip, r9
 801b7d2:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801b7d6:	fa1f f48e 	uxth.w	r4, lr
 801b7da:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801b7de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b7e2:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801b7e6:	fb0a fe0e 	mul.w	lr, sl, lr
 801b7ea:	1b1b      	subs	r3, r3, r4
 801b7ec:	fb0a f606 	mul.w	r6, sl, r6
 801b7f0:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801b7f4:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b7f8:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b7fc:	b29b      	uxth	r3, r3
 801b7fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b802:	b2bf      	uxth	r7, r7
 801b804:	9301      	str	r3, [sp, #4]
 801b806:	44e6      	add	lr, ip
 801b808:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b80c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b810:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b814:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801b818:	9303      	str	r3, [sp, #12]
 801b81a:	0a33      	lsrs	r3, r6, #8
 801b81c:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801b820:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b824:	9304      	str	r3, [sp, #16]
 801b826:	fb0b f606 	mul.w	r6, fp, r6
 801b82a:	fb0b f000 	mul.w	r0, fp, r0
 801b82e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801b832:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b836:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b83a:	44b6      	add	lr, r6
 801b83c:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801b840:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801b844:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801b848:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b84c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b850:	fb08 f606 	mul.w	r6, r8, r6
 801b854:	0a03      	lsrs	r3, r0, #8
 801b856:	fb08 f505 	mul.w	r5, r8, r5
 801b85a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b85e:	0a30      	lsrs	r0, r6, #8
 801b860:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b864:	9305      	str	r3, [sp, #20]
 801b866:	0e13      	lsrs	r3, r2, #24
 801b868:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b86c:	fb0e fe07 	mul.w	lr, lr, r7
 801b870:	4430      	add	r0, r6
 801b872:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801b876:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b87a:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801b87e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b882:	0a00      	lsrs	r0, r0, #8
 801b884:	435e      	muls	r6, r3
 801b886:	0a2d      	lsrs	r5, r5, #8
 801b888:	435a      	muls	r2, r3
 801b88a:	9b03      	ldr	r3, [sp, #12]
 801b88c:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b890:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b894:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b898:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b89c:	44b4      	add	ip, r6
 801b89e:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801b8a2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b8a6:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b8aa:	9e01      	ldr	r6, [sp, #4]
 801b8ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b8b0:	fb03 ee06 	mla	lr, r3, r6, lr
 801b8b4:	9b04      	ldr	r3, [sp, #16]
 801b8b6:	0a12      	lsrs	r2, r2, #8
 801b8b8:	fb0c ee09 	mla	lr, ip, r9, lr
 801b8bc:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801b8c0:	9b05      	ldr	r3, [sp, #20]
 801b8c2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b8c6:	fb00 ee04 	mla	lr, r0, r4, lr
 801b8ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8ce:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801b8d2:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801b8d6:	9b01      	ldr	r3, [sp, #4]
 801b8d8:	fb07 fe0e 	mul.w	lr, r7, lr
 801b8dc:	fb07 f70b 	mul.w	r7, r7, fp
 801b8e0:	fb03 ee06 	mla	lr, r3, r6, lr
 801b8e4:	fb03 730a 	mla	r3, r3, sl, r7
 801b8e8:	fb09 e202 	mla	r2, r9, r2, lr
 801b8ec:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b8f0:	fb04 2e0e 	mla	lr, r4, lr, r2
 801b8f4:	fb04 3408 	mla	r4, r4, r8, r3
 801b8f8:	9b02      	ldr	r3, [sp, #8]
 801b8fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8fe:	fb09 4903 	mla	r9, r9, r3, r4
 801b902:	780b      	ldrb	r3, [r1, #0]
 801b904:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b908:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801b90c:	ea40 0e0e 	orr.w	lr, r0, lr
 801b910:	fa5f f989 	uxtb.w	r9, r9
 801b914:	fb03 f209 	mul.w	r2, r3, r9
 801b918:	1c53      	adds	r3, r2, #1
 801b91a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b91e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801b922:	700b      	strb	r3, [r1, #0]
 801b924:	784b      	ldrb	r3, [r1, #1]
 801b926:	fb03 f309 	mul.w	r3, r3, r9
 801b92a:	1c5a      	adds	r2, r3, #1
 801b92c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b930:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801b934:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801b938:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b93c:	704b      	strb	r3, [r1, #1]
 801b93e:	788b      	ldrb	r3, [r1, #2]
 801b940:	fb03 f909 	mul.w	r9, r3, r9
 801b944:	f109 0301 	add.w	r3, r9, #1
 801b948:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801b94c:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801b950:	f881 e002 	strb.w	lr, [r1, #2]
 801b954:	b007      	add	sp, #28
 801b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b95a:	2600      	movs	r6, #0
 801b95c:	e700      	b.n	801b760 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801b95e:	2000      	movs	r0, #0
 801b960:	4606      	mov	r6, r0
 801b962:	e708      	b.n	801b776 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801b964:	2000      	movs	r0, #0
 801b966:	e706      	b.n	801b776 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801b968:	4620      	mov	r0, r4
 801b96a:	e704      	b.n	801b776 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801b96c:	2500      	movs	r5, #0
 801b96e:	e714      	b.n	801b79a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801b970:	2200      	movs	r2, #0
 801b972:	4615      	mov	r5, r2
 801b974:	e71d      	b.n	801b7b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801b976:	4672      	mov	r2, lr
 801b978:	4675      	mov	r5, lr
 801b97a:	e71a      	b.n	801b7b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801b97c:	2200      	movs	r2, #0
 801b97e:	e718      	b.n	801b7b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801b980:	4622      	mov	r2, r4
 801b982:	e716      	b.n	801b7b2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801b984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b988:	b099      	sub	sp, #100	; 0x64
 801b98a:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801b98e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801b990:	9017      	str	r0, [sp, #92]	; 0x5c
 801b992:	9306      	str	r3, [sp, #24]
 801b994:	6850      	ldr	r0, [r2, #4]
 801b996:	6812      	ldr	r2, [r2, #0]
 801b998:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801b99c:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801b9a0:	fb00 1303 	mla	r3, r0, r3, r1
 801b9a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b9a8:	18d3      	adds	r3, r2, r3
 801b9aa:	9309      	str	r3, [sp, #36]	; 0x24
 801b9ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	930e      	str	r3, [sp, #56]	; 0x38
 801b9b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	dc03      	bgt.n	801b9c0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b9b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b9ba:	2b00      	cmp	r3, #0
 801b9bc:	f340 8360 	ble.w	801c080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801b9c0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b9c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b9ca:	1e48      	subs	r0, r1, #1
 801b9cc:	1e57      	subs	r7, r2, #1
 801b9ce:	9b06      	ldr	r3, [sp, #24]
 801b9d0:	2b00      	cmp	r3, #0
 801b9d2:	f340 817b 	ble.w	801bccc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801b9d6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801b9da:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b9de:	d406      	bmi.n	801b9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b9e0:	4584      	cmp	ip, r0
 801b9e2:	da04      	bge.n	801b9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	db02      	blt.n	801b9ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b9e8:	42bb      	cmp	r3, r7
 801b9ea:	f2c0 8170 	blt.w	801bcce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b9ee:	f11c 0c01 	adds.w	ip, ip, #1
 801b9f2:	f100 8160 	bmi.w	801bcb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801b9f6:	4561      	cmp	r1, ip
 801b9f8:	f2c0 815d 	blt.w	801bcb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801b9fc:	3301      	adds	r3, #1
 801b9fe:	f100 815a 	bmi.w	801bcb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ba02:	429a      	cmp	r2, r3
 801ba04:	f2c0 8157 	blt.w	801bcb6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801ba08:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ba0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801ba0e:	f1b8 0f00 	cmp.w	r8, #0
 801ba12:	f340 8179 	ble.w	801bd08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ba16:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801ba18:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801ba1c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ba1e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801ba22:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801ba26:	142a      	asrs	r2, r5, #16
 801ba28:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ba2c:	689b      	ldr	r3, [r3, #8]
 801ba2e:	f100 81be 	bmi.w	801bdae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ba32:	f103 39ff 	add.w	r9, r3, #4294967295
 801ba36:	454a      	cmp	r2, r9
 801ba38:	f280 81b9 	bge.w	801bdae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ba3c:	f1bc 0f00 	cmp.w	ip, #0
 801ba40:	f2c0 81b5 	blt.w	801bdae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ba44:	f10e 39ff 	add.w	r9, lr, #4294967295
 801ba48:	45cc      	cmp	ip, r9
 801ba4a:	f280 81b0 	bge.w	801bdae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801ba4e:	b21b      	sxth	r3, r3
 801ba50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ba52:	fb0c 2203 	mla	r2, ip, r3, r2
 801ba56:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801ba5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ba5e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801ba62:	2900      	cmp	r1, #0
 801ba64:	f000 8197 	beq.w	801bd96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ba68:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ba6c:	940a      	str	r4, [sp, #40]	; 0x28
 801ba6e:	0e24      	lsrs	r4, r4, #24
 801ba70:	9411      	str	r4, [sp, #68]	; 0x44
 801ba72:	b180      	cbz	r0, 801ba96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ba74:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801ba78:	3b01      	subs	r3, #1
 801ba7a:	009b      	lsls	r3, r3, #2
 801ba7c:	3304      	adds	r3, #4
 801ba7e:	eb09 0c03 	add.w	ip, r9, r3
 801ba82:	f859 3003 	ldr.w	r3, [r9, r3]
 801ba86:	9307      	str	r3, [sp, #28]
 801ba88:	0e1b      	lsrs	r3, r3, #24
 801ba8a:	930f      	str	r3, [sp, #60]	; 0x3c
 801ba8c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ba90:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba92:	0e1b      	lsrs	r3, r3, #24
 801ba94:	9312      	str	r3, [sp, #72]	; 0x48
 801ba96:	b289      	uxth	r1, r1
 801ba98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba9a:	b280      	uxth	r0, r0
 801ba9c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ba9e:	fb01 fa00 	mul.w	sl, r1, r0
 801baa2:	0109      	lsls	r1, r1, #4
 801baa4:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801baa8:	eba1 090a 	sub.w	r9, r1, sl
 801baac:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801bab0:	b280      	uxth	r0, r0
 801bab2:	fa1f f989 	uxth.w	r9, r9
 801bab6:	1a09      	subs	r1, r1, r0
 801bab8:	fb09 f303 	mul.w	r3, r9, r3
 801babc:	b289      	uxth	r1, r1
 801babe:	fb01 330e 	mla	r3, r1, lr, r3
 801bac2:	fb00 3304 	mla	r3, r0, r4, r3
 801bac6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bac8:	fb0a 3304 	mla	r3, sl, r4, r3
 801bacc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f000 80e8 	beq.w	801bca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bad6:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801bada:	d01b      	beq.n	801bb14 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801badc:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801bae0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bae4:	fb0e fb0b 	mul.w	fp, lr, fp
 801bae8:	fb0e fe02 	mul.w	lr, lr, r2
 801baec:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801baf0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801baf4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801baf8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bafc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bb00:	445a      	add	r2, fp
 801bb02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb06:	0a12      	lsrs	r2, r2, #8
 801bb08:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bb0c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bb10:	ea42 020c 	orr.w	r2, r2, ip
 801bb14:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb16:	2cff      	cmp	r4, #255	; 0xff
 801bb18:	d021      	beq.n	801bb5e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801bb1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bb1c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bb20:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb22:	fb04 fc0c 	mul.w	ip, r4, ip
 801bb26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bb28:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bb2c:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bb30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb32:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bb36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb3a:	fb04 fb0b 	mul.w	fp, r4, fp
 801bb3e:	44e6      	add	lr, ip
 801bb40:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801bb44:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb48:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bb4c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb50:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bb54:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bb58:	ea4e 040b 	orr.w	r4, lr, fp
 801bb5c:	940a      	str	r4, [sp, #40]	; 0x28
 801bb5e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bb60:	2cff      	cmp	r4, #255	; 0xff
 801bb62:	d021      	beq.n	801bba8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801bb64:	9c07      	ldr	r4, [sp, #28]
 801bb66:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bb6a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bb6c:	fb04 fc0c 	mul.w	ip, r4, ip
 801bb70:	9c07      	ldr	r4, [sp, #28]
 801bb72:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bb76:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bb7a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801bb7c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bb80:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb84:	fb04 fb0b 	mul.w	fp, r4, fp
 801bb88:	44e6      	add	lr, ip
 801bb8a:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801bb8e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bb92:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bb96:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bb9a:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bb9e:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bba2:	ea4e 040b 	orr.w	r4, lr, fp
 801bba6:	9407      	str	r4, [sp, #28]
 801bba8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bbaa:	2cff      	cmp	r4, #255	; 0xff
 801bbac:	d021      	beq.n	801bbf2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801bbae:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bbb0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bbb4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bbb6:	fb04 fc0c 	mul.w	ip, r4, ip
 801bbba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bbbc:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bbc0:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801bbc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bbc6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bbca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbce:	fb04 fb0b 	mul.w	fp, r4, fp
 801bbd2:	44e6      	add	lr, ip
 801bbd4:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801bbd8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bbdc:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801bbe0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbe4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801bbe8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801bbec:	ea4e 040b 	orr.w	r4, lr, fp
 801bbf0:	940b      	str	r4, [sp, #44]	; 0x2c
 801bbf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bbf4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801bbf8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bbfc:	2bff      	cmp	r3, #255	; 0xff
 801bbfe:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bc02:	9c07      	ldr	r4, [sp, #28]
 801bc04:	fb09 fc0c 	mul.w	ip, r9, ip
 801bc08:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bc0c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bc10:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801bc12:	fb00 cc0e 	mla	ip, r0, lr, ip
 801bc16:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bc1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801bc1c:	fb0a cc0e 	mla	ip, sl, lr, ip
 801bc20:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bc24:	fb09 f90e 	mul.w	r9, r9, lr
 801bc28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc2c:	fb01 9202 	mla	r2, r1, r2, r9
 801bc30:	9907      	ldr	r1, [sp, #28]
 801bc32:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bc36:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801bc3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bc3c:	fb00 220b 	mla	r2, r0, fp, r2
 801bc40:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801bc44:	fb0a 2a00 	mla	sl, sl, r0, r2
 801bc48:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bc50:	ea4c 0c0a 	orr.w	ip, ip, sl
 801bc54:	fa5f f08c 	uxtb.w	r0, ip
 801bc58:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801bc5c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bc60:	f000 80a2 	beq.w	801bda8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801bc64:	43db      	mvns	r3, r3
 801bc66:	783a      	ldrb	r2, [r7, #0]
 801bc68:	f897 a002 	ldrb.w	sl, [r7, #2]
 801bc6c:	b2db      	uxtb	r3, r3
 801bc6e:	fb02 fe03 	mul.w	lr, r2, r3
 801bc72:	fb0a fa03 	mul.w	sl, sl, r3
 801bc76:	f10e 0201 	add.w	r2, lr, #1
 801bc7a:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801bc7e:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bc82:	703a      	strb	r2, [r7, #0]
 801bc84:	787a      	ldrb	r2, [r7, #1]
 801bc86:	fb02 f003 	mul.w	r0, r2, r3
 801bc8a:	f10a 0301 	add.w	r3, sl, #1
 801bc8e:	1c42      	adds	r2, r0, #1
 801bc90:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801bc94:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801bc98:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801bc9c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801bca0:	707a      	strb	r2, [r7, #1]
 801bca2:	f887 c002 	strb.w	ip, [r7, #2]
 801bca6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bca8:	3703      	adds	r7, #3
 801bcaa:	f108 38ff 	add.w	r8, r8, #4294967295
 801bcae:	441d      	add	r5, r3
 801bcb0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bcb2:	441e      	add	r6, r3
 801bcb4:	e6ab      	b.n	801ba0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801bcb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801bcb8:	441d      	add	r5, r3
 801bcba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bcbc:	441e      	add	r6, r3
 801bcbe:	9b06      	ldr	r3, [sp, #24]
 801bcc0:	3b01      	subs	r3, #1
 801bcc2:	9306      	str	r3, [sp, #24]
 801bcc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcc6:	3303      	adds	r3, #3
 801bcc8:	9309      	str	r3, [sp, #36]	; 0x24
 801bcca:	e680      	b.n	801b9ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801bccc:	d024      	beq.n	801bd18 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801bcce:	9b06      	ldr	r3, [sp, #24]
 801bcd0:	9825      	ldr	r0, [sp, #148]	; 0x94
 801bcd2:	3b01      	subs	r3, #1
 801bcd4:	fb00 5003 	mla	r0, r0, r3, r5
 801bcd8:	1400      	asrs	r0, r0, #16
 801bcda:	f53f ae95 	bmi.w	801ba08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bcde:	3901      	subs	r1, #1
 801bce0:	4288      	cmp	r0, r1
 801bce2:	f6bf ae91 	bge.w	801ba08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bce6:	9926      	ldr	r1, [sp, #152]	; 0x98
 801bce8:	fb01 6303 	mla	r3, r1, r3, r6
 801bcec:	141b      	asrs	r3, r3, #16
 801bcee:	f53f ae8b 	bmi.w	801ba08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bcf2:	3a01      	subs	r2, #1
 801bcf4:	4293      	cmp	r3, r2
 801bcf6:	f6bf ae87 	bge.w	801ba08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bcfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcfc:	f8dd b018 	ldr.w	fp, [sp, #24]
 801bd00:	1cdf      	adds	r7, r3, #3
 801bd02:	f1bb 0f00 	cmp.w	fp, #0
 801bd06:	dc6e      	bgt.n	801bde6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801bd08:	9b06      	ldr	r3, [sp, #24]
 801bd0a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd10:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bd14:	4423      	add	r3, r4
 801bd16:	9309      	str	r3, [sp, #36]	; 0x24
 801bd18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	f340 81b0 	ble.w	801c080 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801bd20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bd24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd26:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bd2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bd2e:	eef0 6a62 	vmov.f32	s13, s5
 801bd32:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bd36:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bd3a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd3e:	ee16 5a90 	vmov	r5, s13
 801bd42:	eef0 6a43 	vmov.f32	s13, s6
 801bd46:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bd4a:	ee16 6a90 	vmov	r6, s13
 801bd4e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bd52:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bd56:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bd5a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bd5e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bd62:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bd66:	ee12 2a90 	vmov	r2, s5
 801bd6a:	eef0 2a47 	vmov.f32	s5, s14
 801bd6e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd72:	ee13 2a10 	vmov	r2, s6
 801bd76:	9325      	str	r3, [sp, #148]	; 0x94
 801bd78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd7a:	eeb0 3a67 	vmov.f32	s6, s15
 801bd7e:	fb92 f3f3 	sdiv	r3, r2, r3
 801bd82:	9326      	str	r3, [sp, #152]	; 0x98
 801bd84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bd86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bd88:	3b01      	subs	r3, #1
 801bd8a:	9315      	str	r3, [sp, #84]	; 0x54
 801bd8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bd8e:	bf08      	it	eq
 801bd90:	4613      	moveq	r3, r2
 801bd92:	9306      	str	r3, [sp, #24]
 801bd94:	e60d      	b.n	801b9b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801bd96:	2800      	cmp	r0, #0
 801bd98:	f43f ae7d 	beq.w	801ba96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801bd9c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801bda0:	9307      	str	r3, [sp, #28]
 801bda2:	0e1b      	lsrs	r3, r3, #24
 801bda4:	930f      	str	r3, [sp, #60]	; 0x3c
 801bda6:	e676      	b.n	801ba96 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801bda8:	7038      	strb	r0, [r7, #0]
 801bdaa:	7079      	strb	r1, [r7, #1]
 801bdac:	e779      	b.n	801bca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801bdae:	f112 0901 	adds.w	r9, r2, #1
 801bdb2:	f53f af78 	bmi.w	801bca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bdb6:	454b      	cmp	r3, r9
 801bdb8:	f6ff af75 	blt.w	801bca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bdbc:	f11c 0901 	adds.w	r9, ip, #1
 801bdc0:	f53f af71 	bmi.w	801bca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bdc4:	45ce      	cmp	lr, r9
 801bdc6:	f6ff af6e 	blt.w	801bca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bdca:	b21b      	sxth	r3, r3
 801bdcc:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801bdd0:	fa0f f28e 	sxth.w	r2, lr
 801bdd4:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801bdd8:	9200      	str	r2, [sp, #0]
 801bdda:	4639      	mov	r1, r7
 801bddc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bdde:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801bde0:	f7ff fca1 	bl	801b726 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801bde4:	e75f      	b.n	801bca6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bde6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bde8:	1429      	asrs	r1, r5, #16
 801bdea:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bdec:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801bdf0:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801bdf4:	1433      	asrs	r3, r6, #16
 801bdf6:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801bdfa:	fb0c 1303 	mla	r3, ip, r3, r1
 801bdfe:	990e      	ldr	r1, [sp, #56]	; 0x38
 801be00:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801be04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801be08:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801be0c:	2a00      	cmp	r2, #0
 801be0e:	f000 8129 	beq.w	801c064 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801be12:	684c      	ldr	r4, [r1, #4]
 801be14:	940c      	str	r4, [sp, #48]	; 0x30
 801be16:	0e24      	lsrs	r4, r4, #24
 801be18:	9413      	str	r4, [sp, #76]	; 0x4c
 801be1a:	b198      	cbz	r0, 801be44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801be1c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801be20:	f10c 3cff 	add.w	ip, ip, #4294967295
 801be24:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801be28:	f10c 0c04 	add.w	ip, ip, #4
 801be2c:	eb01 080c 	add.w	r8, r1, ip
 801be30:	f851 100c 	ldr.w	r1, [r1, ip]
 801be34:	9108      	str	r1, [sp, #32]
 801be36:	0e09      	lsrs	r1, r1, #24
 801be38:	9110      	str	r1, [sp, #64]	; 0x40
 801be3a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801be3e:	910d      	str	r1, [sp, #52]	; 0x34
 801be40:	0e09      	lsrs	r1, r1, #24
 801be42:	9114      	str	r1, [sp, #80]	; 0x50
 801be44:	b292      	uxth	r2, r2
 801be46:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801be48:	b280      	uxth	r0, r0
 801be4a:	fb02 f900 	mul.w	r9, r2, r0
 801be4e:	0112      	lsls	r2, r2, #4
 801be50:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801be54:	eba2 0809 	sub.w	r8, r2, r9
 801be58:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801be5c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801be5e:	b280      	uxth	r0, r0
 801be60:	fa1f f888 	uxth.w	r8, r8
 801be64:	1a09      	subs	r1, r1, r0
 801be66:	fb08 f202 	mul.w	r2, r8, r2
 801be6a:	b289      	uxth	r1, r1
 801be6c:	fb01 220e 	mla	r2, r1, lr, r2
 801be70:	fb00 2204 	mla	r2, r0, r4, r2
 801be74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801be76:	fb09 2204 	mla	r2, r9, r4, r2
 801be7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801be7e:	2a00      	cmp	r2, #0
 801be80:	f000 80e8 	beq.w	801c054 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801be84:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801be88:	d01b      	beq.n	801bec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801be8a:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801be8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801be92:	fb0e fa0a 	mul.w	sl, lr, sl
 801be96:	fb0e fe03 	mul.w	lr, lr, r3
 801be9a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801be9e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bea2:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801bea6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801beaa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801beae:	4453      	add	r3, sl
 801beb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801beb4:	0a1b      	lsrs	r3, r3, #8
 801beb6:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801beba:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bebe:	ea43 030c 	orr.w	r3, r3, ip
 801bec2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bec4:	2cff      	cmp	r4, #255	; 0xff
 801bec6:	d021      	beq.n	801bf0c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801bec8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801beca:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bece:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bed0:	fb04 fc0c 	mul.w	ip, r4, ip
 801bed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bed6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801beda:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bede:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bee0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bee4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bee8:	fb04 fa0a 	mul.w	sl, r4, sl
 801beec:	44e6      	add	lr, ip
 801beee:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bef2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bef6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801befa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801befe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf02:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf06:	ea4e 040a 	orr.w	r4, lr, sl
 801bf0a:	940c      	str	r4, [sp, #48]	; 0x30
 801bf0c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801bf0e:	2cff      	cmp	r4, #255	; 0xff
 801bf10:	d021      	beq.n	801bf56 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801bf12:	9c08      	ldr	r4, [sp, #32]
 801bf14:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bf18:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801bf1a:	fb04 fc0c 	mul.w	ip, r4, ip
 801bf1e:	9c08      	ldr	r4, [sp, #32]
 801bf20:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bf24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801bf26:	fb04 fa0e 	mul.w	sl, r4, lr
 801bf2a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bf2e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bf32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf36:	44e6      	add	lr, ip
 801bf38:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bf3c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf40:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf44:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf48:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf4c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf50:	ea4e 040a 	orr.w	r4, lr, sl
 801bf54:	9408      	str	r4, [sp, #32]
 801bf56:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf58:	2cff      	cmp	r4, #255	; 0xff
 801bf5a:	d021      	beq.n	801bfa0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801bf5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf5e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bf62:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf64:	fb04 fc0c 	mul.w	ip, r4, ip
 801bf68:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bf6a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801bf6e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bf72:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bf74:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801bf78:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf7c:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf80:	44e6      	add	lr, ip
 801bf82:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bf86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf8a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bf92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bf9a:	ea4e 040a 	orr.w	r4, lr, sl
 801bf9e:	940d      	str	r4, [sp, #52]	; 0x34
 801bfa0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bfa2:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801bfa6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bfaa:	2aff      	cmp	r2, #255	; 0xff
 801bfac:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bfb0:	9c08      	ldr	r4, [sp, #32]
 801bfb2:	fb08 fc0c 	mul.w	ip, r8, ip
 801bfb6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bfba:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bfbe:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bfc0:	fb00 cc0e 	mla	ip, r0, lr, ip
 801bfc4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bfc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bfca:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bfce:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bfd2:	fb08 f80e 	mul.w	r8, r8, lr
 801bfd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bfda:	fb01 8303 	mla	r3, r1, r3, r8
 801bfde:	9908      	ldr	r1, [sp, #32]
 801bfe0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bfe4:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801bfe8:	990d      	ldr	r1, [sp, #52]	; 0x34
 801bfea:	fb00 330a 	mla	r3, r0, sl, r3
 801bfee:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801bff2:	fb09 3e0e 	mla	lr, r9, lr, r3
 801bff6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bffa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801bffe:	ea4c 0c0e 	orr.w	ip, ip, lr
 801c002:	fa5f f08c 	uxtb.w	r0, ip
 801c006:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c00a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c00e:	d032      	beq.n	801c076 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801c010:	43d2      	mvns	r2, r2
 801c012:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801c016:	b2d2      	uxtb	r2, r2
 801c018:	fb0e fe02 	mul.w	lr, lr, r2
 801c01c:	f10e 0301 	add.w	r3, lr, #1
 801c020:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801c024:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801c028:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801c02c:	4350      	muls	r0, r2
 801c02e:	f807 3c03 	strb.w	r3, [r7, #-3]
 801c032:	1c43      	adds	r3, r0, #1
 801c034:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c038:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c03c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801c040:	4353      	muls	r3, r2
 801c042:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c046:	1c5a      	adds	r2, r3, #1
 801c048:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c04c:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801c050:	f807 cc01 	strb.w	ip, [r7, #-1]
 801c054:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c056:	3703      	adds	r7, #3
 801c058:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c05c:	441d      	add	r5, r3
 801c05e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c060:	441e      	add	r6, r3
 801c062:	e64e      	b.n	801bd02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801c064:	2800      	cmp	r0, #0
 801c066:	f43f aeed 	beq.w	801be44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c06a:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801c06e:	9108      	str	r1, [sp, #32]
 801c070:	0e09      	lsrs	r1, r1, #24
 801c072:	9110      	str	r1, [sp, #64]	; 0x40
 801c074:	e6e6      	b.n	801be44 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c076:	f807 0c03 	strb.w	r0, [r7, #-3]
 801c07a:	f807 1c02 	strb.w	r1, [r7, #-2]
 801c07e:	e7e7      	b.n	801c050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801c080:	b019      	add	sp, #100	; 0x64
 801c082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801c088 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c08c:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801c090:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c094:	2c00      	cmp	r4, #0
 801c096:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c09a:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801c09e:	fb00 4e03 	mla	lr, r0, r3, r4
 801c0a2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801c0a6:	f2c0 80b8 	blt.w	801c21a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c0aa:	45a1      	cmp	r9, r4
 801c0ac:	f340 80b5 	ble.w	801c21a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c0b0:	2800      	cmp	r0, #0
 801c0b2:	f2c0 80b2 	blt.w	801c21a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c0b6:	4580      	cmp	r8, r0
 801c0b8:	f340 80af 	ble.w	801c21a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801c0bc:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801c0c0:	f01e 0f01 	tst.w	lr, #1
 801c0c4:	5d56      	ldrb	r6, [r2, r5]
 801c0c6:	bf0c      	ite	eq
 801c0c8:	f006 060f 	andeq.w	r6, r6, #15
 801c0cc:	1136      	asrne	r6, r6, #4
 801c0ce:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c0d2:	b2f6      	uxtb	r6, r6
 801c0d4:	f114 0a01 	adds.w	sl, r4, #1
 801c0d8:	f100 80a1 	bmi.w	801c21e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c0dc:	45d1      	cmp	r9, sl
 801c0de:	f340 809e 	ble.w	801c21e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c0e2:	2800      	cmp	r0, #0
 801c0e4:	f2c0 809b 	blt.w	801c21e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c0e8:	4580      	cmp	r8, r0
 801c0ea:	f340 8098 	ble.w	801c21e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801c0ee:	2f00      	cmp	r7, #0
 801c0f0:	f000 8097 	beq.w	801c222 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801c0f4:	f10e 0b01 	add.w	fp, lr, #1
 801c0f8:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801c0fc:	f01b 0f01 	tst.w	fp, #1
 801c100:	5d55      	ldrb	r5, [r2, r5]
 801c102:	bf0c      	ite	eq
 801c104:	f005 050f 	andeq.w	r5, r5, #15
 801c108:	112d      	asrne	r5, r5, #4
 801c10a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801c10e:	b2ed      	uxtb	r5, r5
 801c110:	f1bc 0f00 	cmp.w	ip, #0
 801c114:	f000 8089 	beq.w	801c22a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801c118:	2c00      	cmp	r4, #0
 801c11a:	f100 0001 	add.w	r0, r0, #1
 801c11e:	f2c0 8082 	blt.w	801c226 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c122:	45a1      	cmp	r9, r4
 801c124:	dd7f      	ble.n	801c226 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c126:	2800      	cmp	r0, #0
 801c128:	db7d      	blt.n	801c226 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c12a:	4580      	cmp	r8, r0
 801c12c:	dd7b      	ble.n	801c226 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801c12e:	eb03 0b0e 	add.w	fp, r3, lr
 801c132:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801c136:	f01b 0f01 	tst.w	fp, #1
 801c13a:	5d14      	ldrb	r4, [r2, r4]
 801c13c:	bf0c      	ite	eq
 801c13e:	f004 040f 	andeq.w	r4, r4, #15
 801c142:	1124      	asrne	r4, r4, #4
 801c144:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c148:	b2e4      	uxtb	r4, r4
 801c14a:	f1ba 0f00 	cmp.w	sl, #0
 801c14e:	db6f      	blt.n	801c230 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c150:	45d1      	cmp	r9, sl
 801c152:	dd6d      	ble.n	801c230 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c154:	2800      	cmp	r0, #0
 801c156:	db6b      	blt.n	801c230 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c158:	4580      	cmp	r8, r0
 801c15a:	dd69      	ble.n	801c230 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801c15c:	2f00      	cmp	r7, #0
 801c15e:	d069      	beq.n	801c234 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801c160:	3301      	adds	r3, #1
 801c162:	449e      	add	lr, r3
 801c164:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c168:	f01e 0f01 	tst.w	lr, #1
 801c16c:	5cd0      	ldrb	r0, [r2, r3]
 801c16e:	bf0c      	ite	eq
 801c170:	f000 000f 	andeq.w	r0, r0, #15
 801c174:	1100      	asrne	r0, r0, #4
 801c176:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c17a:	b2c3      	uxtb	r3, r0
 801c17c:	b2ba      	uxth	r2, r7
 801c17e:	fa1f fc8c 	uxth.w	ip, ip
 801c182:	fb02 f00c 	mul.w	r0, r2, ip
 801c186:	0112      	lsls	r2, r2, #4
 801c188:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801c18c:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801c190:	1a12      	subs	r2, r2, r0
 801c192:	fa1f fc8c 	uxth.w	ip, ip
 801c196:	b292      	uxth	r2, r2
 801c198:	eba7 070c 	sub.w	r7, r7, ip
 801c19c:	436a      	muls	r2, r5
 801c19e:	b2bf      	uxth	r7, r7
 801c1a0:	fb06 2207 	mla	r2, r6, r7, r2
 801c1a4:	fb0c 2404 	mla	r4, ip, r4, r2
 801c1a8:	fb00 4303 	mla	r3, r0, r3, r4
 801c1ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c1b0:	b38b      	cbz	r3, 801c216 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801c1b2:	4a21      	ldr	r2, [pc, #132]	; (801c238 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801c1b4:	6814      	ldr	r4, [r2, #0]
 801c1b6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801c1ba:	b2e5      	uxtb	r5, r4
 801c1bc:	4353      	muls	r3, r2
 801c1be:	1c5a      	adds	r2, r3, #1
 801c1c0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c1c4:	1212      	asrs	r2, r2, #8
 801c1c6:	b290      	uxth	r0, r2
 801c1c8:	43d2      	mvns	r2, r2
 801c1ca:	fb15 f500 	smulbb	r5, r5, r0
 801c1ce:	b2d3      	uxtb	r3, r2
 801c1d0:	780a      	ldrb	r2, [r1, #0]
 801c1d2:	fb02 5203 	mla	r2, r2, r3, r5
 801c1d6:	b292      	uxth	r2, r2
 801c1d8:	1c55      	adds	r5, r2, #1
 801c1da:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c1de:	784d      	ldrb	r5, [r1, #1]
 801c1e0:	fb15 f503 	smulbb	r5, r5, r3
 801c1e4:	1212      	asrs	r2, r2, #8
 801c1e6:	700a      	strb	r2, [r1, #0]
 801c1e8:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801c1ec:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801c1f0:	fb02 5200 	mla	r2, r2, r0, r5
 801c1f4:	b292      	uxth	r2, r2
 801c1f6:	1c55      	adds	r5, r2, #1
 801c1f8:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801c1fc:	1212      	asrs	r2, r2, #8
 801c1fe:	704a      	strb	r2, [r1, #1]
 801c200:	788a      	ldrb	r2, [r1, #2]
 801c202:	fb12 f303 	smulbb	r3, r2, r3
 801c206:	fb04 3300 	mla	r3, r4, r0, r3
 801c20a:	b29b      	uxth	r3, r3
 801c20c:	1c5a      	adds	r2, r3, #1
 801c20e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c212:	121b      	asrs	r3, r3, #8
 801c214:	708b      	strb	r3, [r1, #2]
 801c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c21a:	2600      	movs	r6, #0
 801c21c:	e75a      	b.n	801c0d4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801c21e:	2500      	movs	r5, #0
 801c220:	e776      	b.n	801c110 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801c222:	463d      	mov	r5, r7
 801c224:	e774      	b.n	801c110 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801c226:	2400      	movs	r4, #0
 801c228:	e78f      	b.n	801c14a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801c22a:	4663      	mov	r3, ip
 801c22c:	4664      	mov	r4, ip
 801c22e:	e7a5      	b.n	801c17c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c230:	2300      	movs	r3, #0
 801c232:	e7a3      	b.n	801c17c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c234:	463b      	mov	r3, r7
 801c236:	e7a1      	b.n	801c17c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801c238:	2401aa44 	.word	0x2401aa44

0801c23c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c240:	b097      	sub	sp, #92	; 0x5c
 801c242:	9214      	str	r2, [sp, #80]	; 0x50
 801c244:	9309      	str	r3, [sp, #36]	; 0x24
 801c246:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801c248:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801c24c:	9015      	str	r0, [sp, #84]	; 0x54
 801c24e:	910c      	str	r1, [sp, #48]	; 0x30
 801c250:	6850      	ldr	r0, [r2, #4]
 801c252:	930e      	str	r3, [sp, #56]	; 0x38
 801c254:	6812      	ldr	r2, [r2, #0]
 801c256:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801c25a:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801c25e:	fb00 1303 	mla	r3, r0, r3, r1
 801c262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c266:	eb02 0a03 	add.w	sl, r2, r3
 801c26a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c26c:	689b      	ldr	r3, [r3, #8]
 801c26e:	3301      	adds	r3, #1
 801c270:	f023 0301 	bic.w	r3, r3, #1
 801c274:	930f      	str	r3, [sp, #60]	; 0x3c
 801c276:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c278:	681f      	ldr	r7, [r3, #0]
 801c27a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c27c:	2b00      	cmp	r3, #0
 801c27e:	dc03      	bgt.n	801c288 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c282:	2b00      	cmp	r3, #0
 801c284:	f340 8247 	ble.w	801c716 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801c288:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c28a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c28e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c292:	1e48      	subs	r0, r1, #1
 801c294:	f102 3cff 	add.w	ip, r2, #4294967295
 801c298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	f340 80e5 	ble.w	801c46a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801c2a0:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801c2a4:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c2a8:	d406      	bmi.n	801c2b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2aa:	4586      	cmp	lr, r0
 801c2ac:	da04      	bge.n	801c2b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	db02      	blt.n	801c2b8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801c2b2:	4563      	cmp	r3, ip
 801c2b4:	f2c0 80da 	blt.w	801c46c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801c2b8:	f11e 0e01 	adds.w	lr, lr, #1
 801c2bc:	f100 80cb 	bmi.w	801c456 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c2c0:	4571      	cmp	r1, lr
 801c2c2:	f2c0 80c8 	blt.w	801c456 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c2c6:	3301      	adds	r3, #1
 801c2c8:	f100 80c5 	bmi.w	801c456 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c2cc:	429a      	cmp	r2, r3
 801c2ce:	f2c0 80c2 	blt.w	801c456 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801c2d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2d4:	46d0      	mov	r8, sl
 801c2d6:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c2da:	930d      	str	r3, [sp, #52]	; 0x34
 801c2dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	f340 80e3 	ble.w	801c4aa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801c2e4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801c2e6:	1430      	asrs	r0, r6, #16
 801c2e8:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c2ec:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c2f0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801c2f4:	142b      	asrs	r3, r5, #16
 801c2f6:	f100 812e 	bmi.w	801c556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c2fa:	f10c 3bff 	add.w	fp, ip, #4294967295
 801c2fe:	455b      	cmp	r3, fp
 801c300:	f280 8129 	bge.w	801c556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c304:	2800      	cmp	r0, #0
 801c306:	f2c0 8126 	blt.w	801c556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c30a:	f10e 3bff 	add.w	fp, lr, #4294967295
 801c30e:	4558      	cmp	r0, fp
 801c310:	f280 8121 	bge.w	801c556 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c314:	fb00 3309 	mla	r3, r0, r9, r3
 801c318:	0858      	lsrs	r0, r3, #1
 801c31a:	07dc      	lsls	r4, r3, #31
 801c31c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801c320:	bf54      	ite	pl
 801c322:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c326:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c32a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c32e:	fa5f fc8c 	uxtb.w	ip, ip
 801c332:	2a00      	cmp	r2, #0
 801c334:	f000 80fe 	beq.w	801c534 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801c338:	1c58      	adds	r0, r3, #1
 801c33a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801c33e:	07c0      	lsls	r0, r0, #31
 801c340:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801c344:	bf54      	ite	pl
 801c346:	f00e 0e0f 	andpl.w	lr, lr, #15
 801c34a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801c34e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801c352:	fa5f f08e 	uxtb.w	r0, lr
 801c356:	9010      	str	r0, [sp, #64]	; 0x40
 801c358:	b1d9      	cbz	r1, 801c392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c35a:	444b      	add	r3, r9
 801c35c:	0858      	lsrs	r0, r3, #1
 801c35e:	07dc      	lsls	r4, r3, #31
 801c360:	f103 0301 	add.w	r3, r3, #1
 801c364:	5c38      	ldrb	r0, [r7, r0]
 801c366:	bf54      	ite	pl
 801c368:	f000 000f 	andpl.w	r0, r0, #15
 801c36c:	1100      	asrmi	r0, r0, #4
 801c36e:	07dc      	lsls	r4, r3, #31
 801c370:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c374:	b2c0      	uxtb	r0, r0
 801c376:	900a      	str	r0, [sp, #40]	; 0x28
 801c378:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801c37c:	f817 e000 	ldrb.w	lr, [r7, r0]
 801c380:	bf54      	ite	pl
 801c382:	f00e 030f 	andpl.w	r3, lr, #15
 801c386:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801c38a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c38e:	b2db      	uxtb	r3, r3
 801c390:	9311      	str	r3, [sp, #68]	; 0x44
 801c392:	b292      	uxth	r2, r2
 801c394:	b289      	uxth	r1, r1
 801c396:	0113      	lsls	r3, r2, #4
 801c398:	fb02 f001 	mul.w	r0, r2, r1
 801c39c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c39e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c3a2:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801c3a6:	1a1b      	subs	r3, r3, r0
 801c3a8:	b289      	uxth	r1, r1
 801c3aa:	b29b      	uxth	r3, r3
 801c3ac:	ebae 0e01 	sub.w	lr, lr, r1
 801c3b0:	4353      	muls	r3, r2
 801c3b2:	fa1f fe8e 	uxth.w	lr, lr
 801c3b6:	fb0c 320e 	mla	r2, ip, lr, r3
 801c3ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3bc:	fb01 2203 	mla	r2, r1, r3, r2
 801c3c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c3c2:	fb00 2203 	mla	r2, r0, r3, r2
 801c3c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c3ca:	2a00      	cmp	r2, #0
 801c3cc:	d039      	beq.n	801c442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c3ce:	4bc7      	ldr	r3, [pc, #796]	; (801c6ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801c3d0:	6819      	ldr	r1, [r3, #0]
 801c3d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c3d4:	fa5f fc81 	uxtb.w	ip, r1
 801c3d8:	435a      	muls	r2, r3
 801c3da:	1c53      	adds	r3, r2, #1
 801c3dc:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c3e0:	1212      	asrs	r2, r2, #8
 801c3e2:	b290      	uxth	r0, r2
 801c3e4:	43d2      	mvns	r2, r2
 801c3e6:	fb1c fc00 	smulbb	ip, ip, r0
 801c3ea:	b2d3      	uxtb	r3, r2
 801c3ec:	f898 2000 	ldrb.w	r2, [r8]
 801c3f0:	fb02 c203 	mla	r2, r2, r3, ip
 801c3f4:	b292      	uxth	r2, r2
 801c3f6:	f102 0c01 	add.w	ip, r2, #1
 801c3fa:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c3fe:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c402:	fb1c fc03 	smulbb	ip, ip, r3
 801c406:	1212      	asrs	r2, r2, #8
 801c408:	f888 2000 	strb.w	r2, [r8]
 801c40c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801c410:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801c414:	fb02 c200 	mla	r2, r2, r0, ip
 801c418:	b292      	uxth	r2, r2
 801c41a:	f102 0c01 	add.w	ip, r2, #1
 801c41e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801c422:	1212      	asrs	r2, r2, #8
 801c424:	f888 2001 	strb.w	r2, [r8, #1]
 801c428:	f898 2002 	ldrb.w	r2, [r8, #2]
 801c42c:	fb12 f303 	smulbb	r3, r2, r3
 801c430:	fb01 3300 	mla	r3, r1, r0, r3
 801c434:	b29b      	uxth	r3, r3
 801c436:	1c5a      	adds	r2, r3, #1
 801c438:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c43c:	121b      	asrs	r3, r3, #8
 801c43e:	f888 3002 	strb.w	r3, [r8, #2]
 801c442:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c444:	f108 0803 	add.w	r8, r8, #3
 801c448:	441d      	add	r5, r3
 801c44a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c44c:	441e      	add	r6, r3
 801c44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c450:	3b01      	subs	r3, #1
 801c452:	930d      	str	r3, [sp, #52]	; 0x34
 801c454:	e742      	b.n	801c2dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c456:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c458:	f10a 0a03 	add.w	sl, sl, #3
 801c45c:	441d      	add	r5, r3
 801c45e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c460:	441e      	add	r6, r3
 801c462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c464:	3b01      	subs	r3, #1
 801c466:	9309      	str	r3, [sp, #36]	; 0x24
 801c468:	e716      	b.n	801c298 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801c46a:	d024      	beq.n	801c4b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c46e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801c470:	3b01      	subs	r3, #1
 801c472:	fb00 5003 	mla	r0, r0, r3, r5
 801c476:	1400      	asrs	r0, r0, #16
 801c478:	f53f af2b 	bmi.w	801c2d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c47c:	3901      	subs	r1, #1
 801c47e:	4288      	cmp	r0, r1
 801c480:	f6bf af27 	bge.w	801c2d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c484:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c486:	fb01 6303 	mla	r3, r1, r3, r6
 801c48a:	141b      	asrs	r3, r3, #16
 801c48c:	f53f af21 	bmi.w	801c2d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c490:	3a01      	subs	r2, #1
 801c492:	4293      	cmp	r3, r2
 801c494:	f6bf af1d 	bge.w	801c2d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c498:	f10a 0e03 	add.w	lr, sl, #3
 801c49c:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801c4a0:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801c4a4:	f1b8 0f00 	cmp.w	r8, #0
 801c4a8:	dc76      	bgt.n	801c598 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801c4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4ac:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c4b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c4b4:	44a2      	add	sl, r4
 801c4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	f340 812c 	ble.w	801c716 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801c4be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c4c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c4c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c4c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c4cc:	eef0 6a62 	vmov.f32	s13, s5
 801c4d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c4d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c4d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4dc:	ee16 5a90 	vmov	r5, s13
 801c4e0:	eef0 6a43 	vmov.f32	s13, s6
 801c4e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c4e8:	ee16 6a90 	vmov	r6, s13
 801c4ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c4f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c4f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c4f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c4fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c500:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c504:	ee12 2a90 	vmov	r2, s5
 801c508:	eef0 2a47 	vmov.f32	s5, s14
 801c50c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c510:	ee13 2a10 	vmov	r2, s6
 801c514:	9323      	str	r3, [sp, #140]	; 0x8c
 801c516:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c518:	eeb0 3a67 	vmov.f32	s6, s15
 801c51c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c520:	9324      	str	r3, [sp, #144]	; 0x90
 801c522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c524:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c526:	3b01      	subs	r3, #1
 801c528:	930c      	str	r3, [sp, #48]	; 0x30
 801c52a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c52c:	bf08      	it	eq
 801c52e:	4613      	moveq	r3, r2
 801c530:	9309      	str	r3, [sp, #36]	; 0x24
 801c532:	e6a2      	b.n	801c27a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c534:	2900      	cmp	r1, #0
 801c536:	f43f af2c 	beq.w	801c392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c53a:	eb09 0003 	add.w	r0, r9, r3
 801c53e:	0843      	lsrs	r3, r0, #1
 801c540:	07c0      	lsls	r0, r0, #31
 801c542:	5cfb      	ldrb	r3, [r7, r3]
 801c544:	bf54      	ite	pl
 801c546:	f003 030f 	andpl.w	r3, r3, #15
 801c54a:	111b      	asrmi	r3, r3, #4
 801c54c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801c550:	b2db      	uxtb	r3, r3
 801c552:	930a      	str	r3, [sp, #40]	; 0x28
 801c554:	e71d      	b.n	801c392 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801c556:	f113 0b01 	adds.w	fp, r3, #1
 801c55a:	f53f af72 	bmi.w	801c442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c55e:	45dc      	cmp	ip, fp
 801c560:	f6ff af6f 	blt.w	801c442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c564:	f110 0b01 	adds.w	fp, r0, #1
 801c568:	f53f af6b 	bmi.w	801c442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c56c:	45de      	cmp	lr, fp
 801c56e:	f6ff af68 	blt.w	801c442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c572:	9302      	str	r3, [sp, #8]
 801c574:	fa0f f38e 	sxth.w	r3, lr
 801c578:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c57a:	9301      	str	r3, [sp, #4]
 801c57c:	fa0f f38c 	sxth.w	r3, ip
 801c580:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801c584:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c588:	9300      	str	r3, [sp, #0]
 801c58a:	463a      	mov	r2, r7
 801c58c:	464b      	mov	r3, r9
 801c58e:	4641      	mov	r1, r8
 801c590:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c592:	f7ff fd79 	bl	801c088 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801c596:	e754      	b.n	801c442 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801c598:	142a      	asrs	r2, r5, #16
 801c59a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c59e:	1433      	asrs	r3, r6, #16
 801c5a0:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c5a4:	fb09 2303 	mla	r3, r9, r3, r2
 801c5a8:	085a      	lsrs	r2, r3, #1
 801c5aa:	07dc      	lsls	r4, r3, #31
 801c5ac:	5cba      	ldrb	r2, [r7, r2]
 801c5ae:	bf54      	ite	pl
 801c5b0:	f002 020f 	andpl.w	r2, r2, #15
 801c5b4:	1112      	asrmi	r2, r2, #4
 801c5b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c5ba:	b2d2      	uxtb	r2, r2
 801c5bc:	2900      	cmp	r1, #0
 801c5be:	f000 8097 	beq.w	801c6f0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801c5c2:	f103 0b01 	add.w	fp, r3, #1
 801c5c6:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801c5ca:	f01b 0f01 	tst.w	fp, #1
 801c5ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c5d2:	bf0c      	ite	eq
 801c5d4:	f00c 0c0f 	andeq.w	ip, ip, #15
 801c5d8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801c5dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c5e0:	fa5f f48c 	uxtb.w	r4, ip
 801c5e4:	9412      	str	r4, [sp, #72]	; 0x48
 801c5e6:	b300      	cbz	r0, 801c62a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c5e8:	444b      	add	r3, r9
 801c5ea:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c5ee:	07dc      	lsls	r4, r3, #31
 801c5f0:	f103 0301 	add.w	r3, r3, #1
 801c5f4:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c5f8:	bf54      	ite	pl
 801c5fa:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c5fe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c602:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c606:	fa5f f48c 	uxtb.w	r4, ip
 801c60a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c60e:	940b      	str	r4, [sp, #44]	; 0x2c
 801c610:	07dc      	lsls	r4, r3, #31
 801c612:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c616:	bf54      	ite	pl
 801c618:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c61c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c620:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c624:	fa5f f38c 	uxtb.w	r3, ip
 801c628:	9313      	str	r3, [sp, #76]	; 0x4c
 801c62a:	b289      	uxth	r1, r1
 801c62c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c62e:	b280      	uxth	r0, r0
 801c630:	fb01 f300 	mul.w	r3, r1, r0
 801c634:	0109      	lsls	r1, r1, #4
 801c636:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801c63a:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801c63e:	1ac9      	subs	r1, r1, r3
 801c640:	b280      	uxth	r0, r0
 801c642:	b289      	uxth	r1, r1
 801c644:	ebac 0c00 	sub.w	ip, ip, r0
 801c648:	4361      	muls	r1, r4
 801c64a:	fa1f fc8c 	uxth.w	ip, ip
 801c64e:	fb02 120c 	mla	r2, r2, ip, r1
 801c652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c654:	fb00 2001 	mla	r0, r0, r1, r2
 801c658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c65a:	fb03 0302 	mla	r3, r3, r2, r0
 801c65e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c662:	2b00      	cmp	r3, #0
 801c664:	d039      	beq.n	801c6da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c666:	4a21      	ldr	r2, [pc, #132]	; (801c6ec <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801c668:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801c66c:	6810      	ldr	r0, [r2, #0]
 801c66e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c670:	fa5f fc80 	uxtb.w	ip, r0
 801c674:	4353      	muls	r3, r2
 801c676:	1c5a      	adds	r2, r3, #1
 801c678:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c67c:	121b      	asrs	r3, r3, #8
 801c67e:	b29a      	uxth	r2, r3
 801c680:	43db      	mvns	r3, r3
 801c682:	fb1c fc02 	smulbb	ip, ip, r2
 801c686:	b2db      	uxtb	r3, r3
 801c688:	fb01 c103 	mla	r1, r1, r3, ip
 801c68c:	b289      	uxth	r1, r1
 801c68e:	f101 0c01 	add.w	ip, r1, #1
 801c692:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801c696:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801c69a:	fb1c fc03 	smulbb	ip, ip, r3
 801c69e:	1209      	asrs	r1, r1, #8
 801c6a0:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801c6a4:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801c6a8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801c6ac:	fb01 c102 	mla	r1, r1, r2, ip
 801c6b0:	b289      	uxth	r1, r1
 801c6b2:	f101 0c01 	add.w	ip, r1, #1
 801c6b6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801c6ba:	1209      	asrs	r1, r1, #8
 801c6bc:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801c6c0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801c6c4:	fb11 f303 	smulbb	r3, r1, r3
 801c6c8:	fb00 3002 	mla	r0, r0, r2, r3
 801c6cc:	b280      	uxth	r0, r0
 801c6ce:	1c42      	adds	r2, r0, #1
 801c6d0:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801c6d4:	1200      	asrs	r0, r0, #8
 801c6d6:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801c6da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801c6dc:	f10e 0e03 	add.w	lr, lr, #3
 801c6e0:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6e4:	441d      	add	r5, r3
 801c6e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c6e8:	441e      	add	r6, r3
 801c6ea:	e6db      	b.n	801c4a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c6ec:	2401aa44 	.word	0x2401aa44
 801c6f0:	2800      	cmp	r0, #0
 801c6f2:	d09a      	beq.n	801c62a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c6f4:	444b      	add	r3, r9
 801c6f6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801c6fa:	07db      	lsls	r3, r3, #31
 801c6fc:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801c700:	bf54      	ite	pl
 801c702:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c706:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c70a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c70e:	fa5f f38c 	uxtb.w	r3, ip
 801c712:	930b      	str	r3, [sp, #44]	; 0x2c
 801c714:	e789      	b.n	801c62a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801c716:	b017      	add	sp, #92	; 0x5c
 801c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c71c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801c71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c720:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801c724:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c728:	2d00      	cmp	r5, #0
 801c72a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801c72e:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801c732:	fb04 5e03 	mla	lr, r4, r3, r5
 801c736:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801c73a:	f2c0 80b1 	blt.w	801c8a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c73e:	45a9      	cmp	r9, r5
 801c740:	f340 80ae 	ble.w	801c8a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c744:	2c00      	cmp	r4, #0
 801c746:	f2c0 80ab 	blt.w	801c8a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c74a:	45a0      	cmp	r8, r4
 801c74c:	f340 80a8 	ble.w	801c8a0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801c750:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801c754:	f01e 0f01 	tst.w	lr, #1
 801c758:	5d97      	ldrb	r7, [r2, r6]
 801c75a:	bf0c      	ite	eq
 801c75c:	f007 070f 	andeq.w	r7, r7, #15
 801c760:	113f      	asrne	r7, r7, #4
 801c762:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801c766:	b2ff      	uxtb	r7, r7
 801c768:	f115 0a01 	adds.w	sl, r5, #1
 801c76c:	f100 809a 	bmi.w	801c8a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c770:	45d1      	cmp	r9, sl
 801c772:	f340 8097 	ble.w	801c8a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c776:	2c00      	cmp	r4, #0
 801c778:	f2c0 8094 	blt.w	801c8a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c77c:	45a0      	cmp	r8, r4
 801c77e:	f340 8091 	ble.w	801c8a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801c782:	2800      	cmp	r0, #0
 801c784:	f000 8090 	beq.w	801c8a8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801c788:	f10e 0b01 	add.w	fp, lr, #1
 801c78c:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801c790:	f01b 0f01 	tst.w	fp, #1
 801c794:	5d96      	ldrb	r6, [r2, r6]
 801c796:	bf0c      	ite	eq
 801c798:	f006 060f 	andeq.w	r6, r6, #15
 801c79c:	1136      	asrne	r6, r6, #4
 801c79e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801c7a2:	b2f6      	uxtb	r6, r6
 801c7a4:	f1bc 0f00 	cmp.w	ip, #0
 801c7a8:	f000 8082 	beq.w	801c8b0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801c7ac:	2d00      	cmp	r5, #0
 801c7ae:	f104 0401 	add.w	r4, r4, #1
 801c7b2:	db7b      	blt.n	801c8ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801c7b4:	45a9      	cmp	r9, r5
 801c7b6:	dd79      	ble.n	801c8ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801c7b8:	2c00      	cmp	r4, #0
 801c7ba:	db77      	blt.n	801c8ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801c7bc:	45a0      	cmp	r8, r4
 801c7be:	dd75      	ble.n	801c8ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801c7c0:	eb03 0b0e 	add.w	fp, r3, lr
 801c7c4:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801c7c8:	f01b 0f01 	tst.w	fp, #1
 801c7cc:	5d55      	ldrb	r5, [r2, r5]
 801c7ce:	bf0c      	ite	eq
 801c7d0:	f005 050f 	andeq.w	r5, r5, #15
 801c7d4:	112d      	asrne	r5, r5, #4
 801c7d6:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801c7da:	b2ed      	uxtb	r5, r5
 801c7dc:	f1ba 0f00 	cmp.w	sl, #0
 801c7e0:	db69      	blt.n	801c8b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801c7e2:	45d1      	cmp	r9, sl
 801c7e4:	dd67      	ble.n	801c8b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801c7e6:	2c00      	cmp	r4, #0
 801c7e8:	db65      	blt.n	801c8b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801c7ea:	45a0      	cmp	r8, r4
 801c7ec:	dd63      	ble.n	801c8b6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801c7ee:	2800      	cmp	r0, #0
 801c7f0:	d063      	beq.n	801c8ba <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801c7f2:	3301      	adds	r3, #1
 801c7f4:	449e      	add	lr, r3
 801c7f6:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801c7fa:	f01e 0f01 	tst.w	lr, #1
 801c7fe:	5cd4      	ldrb	r4, [r2, r3]
 801c800:	bf0c      	ite	eq
 801c802:	f004 040f 	andeq.w	r4, r4, #15
 801c806:	1124      	asrne	r4, r4, #4
 801c808:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801c80c:	b2e3      	uxtb	r3, r4
 801c80e:	b282      	uxth	r2, r0
 801c810:	fa1f fc8c 	uxth.w	ip, ip
 801c814:	fb02 f40c 	mul.w	r4, r2, ip
 801c818:	0112      	lsls	r2, r2, #4
 801c81a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801c81e:	fa1f f08c 	uxth.w	r0, ip
 801c822:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801c826:	1b12      	subs	r2, r2, r4
 801c828:	ebac 0c00 	sub.w	ip, ip, r0
 801c82c:	b292      	uxth	r2, r2
 801c82e:	fa1f fc8c 	uxth.w	ip, ip
 801c832:	4372      	muls	r2, r6
 801c834:	fb07 220c 	mla	r2, r7, ip, r2
 801c838:	fb00 2005 	mla	r0, r0, r5, r2
 801c83c:	fb04 0303 	mla	r3, r4, r3, r0
 801c840:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c844:	b353      	cbz	r3, 801c89c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801c846:	4a1e      	ldr	r2, [pc, #120]	; (801c8c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801c848:	7808      	ldrb	r0, [r1, #0]
 801c84a:	6814      	ldr	r4, [r2, #0]
 801c84c:	b29a      	uxth	r2, r3
 801c84e:	43db      	mvns	r3, r3
 801c850:	b2e5      	uxtb	r5, r4
 801c852:	b2db      	uxtb	r3, r3
 801c854:	fb15 f502 	smulbb	r5, r5, r2
 801c858:	fb00 5003 	mla	r0, r0, r3, r5
 801c85c:	b280      	uxth	r0, r0
 801c85e:	1c45      	adds	r5, r0, #1
 801c860:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801c864:	784d      	ldrb	r5, [r1, #1]
 801c866:	fb15 f503 	smulbb	r5, r5, r3
 801c86a:	1200      	asrs	r0, r0, #8
 801c86c:	7008      	strb	r0, [r1, #0]
 801c86e:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801c872:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801c876:	fb00 5002 	mla	r0, r0, r2, r5
 801c87a:	b280      	uxth	r0, r0
 801c87c:	1c45      	adds	r5, r0, #1
 801c87e:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801c882:	1200      	asrs	r0, r0, #8
 801c884:	7048      	strb	r0, [r1, #1]
 801c886:	7888      	ldrb	r0, [r1, #2]
 801c888:	fb10 f303 	smulbb	r3, r0, r3
 801c88c:	fb04 3202 	mla	r2, r4, r2, r3
 801c890:	b292      	uxth	r2, r2
 801c892:	1c53      	adds	r3, r2, #1
 801c894:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c898:	1212      	asrs	r2, r2, #8
 801c89a:	708a      	strb	r2, [r1, #2]
 801c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a0:	2700      	movs	r7, #0
 801c8a2:	e761      	b.n	801c768 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801c8a4:	2600      	movs	r6, #0
 801c8a6:	e77d      	b.n	801c7a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801c8a8:	4606      	mov	r6, r0
 801c8aa:	e77b      	b.n	801c7a4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801c8ac:	2500      	movs	r5, #0
 801c8ae:	e795      	b.n	801c7dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801c8b0:	4663      	mov	r3, ip
 801c8b2:	4665      	mov	r5, ip
 801c8b4:	e7ab      	b.n	801c80e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801c8b6:	2300      	movs	r3, #0
 801c8b8:	e7a9      	b.n	801c80e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801c8ba:	4603      	mov	r3, r0
 801c8bc:	e7a7      	b.n	801c80e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801c8be:	bf00      	nop
 801c8c0:	2401aa44 	.word	0x2401aa44

0801c8c4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8c8:	b093      	sub	sp, #76	; 0x4c
 801c8ca:	461c      	mov	r4, r3
 801c8cc:	920c      	str	r2, [sp, #48]	; 0x30
 801c8ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c8d0:	9011      	str	r0, [sp, #68]	; 0x44
 801c8d2:	9107      	str	r1, [sp, #28]
 801c8d4:	6850      	ldr	r0, [r2, #4]
 801c8d6:	6812      	ldr	r2, [r2, #0]
 801c8d8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801c8dc:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801c8e0:	fb00 1303 	mla	r3, r0, r3, r1
 801c8e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c8e8:	eb02 0b03 	add.w	fp, r2, r3
 801c8ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c8ee:	689b      	ldr	r3, [r3, #8]
 801c8f0:	3301      	adds	r3, #1
 801c8f2:	f023 0301 	bic.w	r3, r3, #1
 801c8f6:	9309      	str	r3, [sp, #36]	; 0x24
 801c8f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c8fa:	f8d3 8000 	ldr.w	r8, [r3]
 801c8fe:	9b07      	ldr	r3, [sp, #28]
 801c900:	2b00      	cmp	r3, #0
 801c902:	dc03      	bgt.n	801c90c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801c904:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c906:	2b00      	cmp	r3, #0
 801c908:	f340 822b 	ble.w	801cd62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c90c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c90e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c912:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c916:	1e48      	subs	r0, r1, #1
 801c918:	1e57      	subs	r7, r2, #1
 801c91a:	2c00      	cmp	r4, #0
 801c91c:	f340 80d7 	ble.w	801cace <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801c920:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c924:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c928:	d406      	bmi.n	801c938 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c92a:	4584      	cmp	ip, r0
 801c92c:	da04      	bge.n	801c938 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c92e:	2b00      	cmp	r3, #0
 801c930:	db02      	blt.n	801c938 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801c932:	42bb      	cmp	r3, r7
 801c934:	f2c0 80cc 	blt.w	801cad0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c938:	f11c 0c01 	adds.w	ip, ip, #1
 801c93c:	f100 80bf 	bmi.w	801cabe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c940:	4561      	cmp	r1, ip
 801c942:	f2c0 80bc 	blt.w	801cabe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c946:	3301      	adds	r3, #1
 801c948:	f100 80b9 	bmi.w	801cabe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c94c:	429a      	cmp	r2, r3
 801c94e:	f2c0 80b6 	blt.w	801cabe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c952:	46a2      	mov	sl, r4
 801c954:	465f      	mov	r7, fp
 801c956:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801c95a:	f1ba 0f00 	cmp.w	sl, #0
 801c95e:	f340 80d4 	ble.w	801cb0a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801c962:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801c966:	1430      	asrs	r0, r6, #16
 801c968:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801c96c:	9308      	str	r3, [sp, #32]
 801c96e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c970:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801c974:	142b      	asrs	r3, r5, #16
 801c976:	f100 8124 	bmi.w	801cbc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c97a:	f10c 32ff 	add.w	r2, ip, #4294967295
 801c97e:	4293      	cmp	r3, r2
 801c980:	f280 811f 	bge.w	801cbc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c984:	2800      	cmp	r0, #0
 801c986:	f2c0 811c 	blt.w	801cbc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c98a:	f10e 32ff 	add.w	r2, lr, #4294967295
 801c98e:	4290      	cmp	r0, r2
 801c990:	f280 8117 	bge.w	801cbc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801c994:	fb00 3309 	mla	r3, r0, r9, r3
 801c998:	0858      	lsrs	r0, r3, #1
 801c99a:	07da      	lsls	r2, r3, #31
 801c99c:	9a08      	ldr	r2, [sp, #32]
 801c99e:	f818 c000 	ldrb.w	ip, [r8, r0]
 801c9a2:	bf54      	ite	pl
 801c9a4:	f00c 0c0f 	andpl.w	ip, ip, #15
 801c9a8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801c9ac:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801c9b0:	fa5f fc8c 	uxtb.w	ip, ip
 801c9b4:	2a00      	cmp	r2, #0
 801c9b6:	f000 80ed 	beq.w	801cb94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801c9ba:	1c58      	adds	r0, r3, #1
 801c9bc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801c9c0:	07c0      	lsls	r0, r0, #31
 801c9c2:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801c9c6:	bf54      	ite	pl
 801c9c8:	f00e 0e0f 	andpl.w	lr, lr, #15
 801c9cc:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801c9d0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801c9d4:	fa5f fe8e 	uxtb.w	lr, lr
 801c9d8:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801c9dc:	b1c9      	cbz	r1, 801ca12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801c9de:	444b      	add	r3, r9
 801c9e0:	0858      	lsrs	r0, r3, #1
 801c9e2:	07da      	lsls	r2, r3, #31
 801c9e4:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c9e8:	bf54      	ite	pl
 801c9ea:	f000 000f 	andpl.w	r0, r0, #15
 801c9ee:	1100      	asrmi	r0, r0, #4
 801c9f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801c9f4:	b2c0      	uxtb	r0, r0
 801c9f6:	900a      	str	r0, [sp, #40]	; 0x28
 801c9f8:	1c58      	adds	r0, r3, #1
 801c9fa:	0843      	lsrs	r3, r0, #1
 801c9fc:	07c2      	lsls	r2, r0, #31
 801c9fe:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ca02:	bf54      	ite	pl
 801ca04:	f003 030f 	andpl.w	r3, r3, #15
 801ca08:	111b      	asrmi	r3, r3, #4
 801ca0a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ca0e:	b2db      	uxtb	r3, r3
 801ca10:	930e      	str	r3, [sp, #56]	; 0x38
 801ca12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ca16:	b289      	uxth	r1, r1
 801ca18:	fb02 f301 	mul.w	r3, r2, r1
 801ca1c:	0112      	lsls	r2, r2, #4
 801ca1e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ca22:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801ca26:	1ad2      	subs	r2, r2, r3
 801ca28:	b289      	uxth	r1, r1
 801ca2a:	b292      	uxth	r2, r2
 801ca2c:	1a40      	subs	r0, r0, r1
 801ca2e:	fa1f fe80 	uxth.w	lr, r0
 801ca32:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ca34:	4342      	muls	r2, r0
 801ca36:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ca3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ca3c:	fb01 c102 	mla	r1, r1, r2, ip
 801ca40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca42:	fb03 1302 	mla	r3, r3, r2, r1
 801ca46:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ca4a:	b383      	cbz	r3, 801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ca4c:	4ac6      	ldr	r2, [pc, #792]	; (801cd68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ca4e:	2bff      	cmp	r3, #255	; 0xff
 801ca50:	6812      	ldr	r2, [r2, #0]
 801ca52:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801ca56:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ca5a:	b2d2      	uxtb	r2, r2
 801ca5c:	f000 80ac 	beq.w	801cbb8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ca60:	b299      	uxth	r1, r3
 801ca62:	43db      	mvns	r3, r3
 801ca64:	f897 c000 	ldrb.w	ip, [r7]
 801ca68:	fb12 f201 	smulbb	r2, r2, r1
 801ca6c:	b2db      	uxtb	r3, r3
 801ca6e:	fb10 f001 	smulbb	r0, r0, r1
 801ca72:	fb0c 2203 	mla	r2, ip, r3, r2
 801ca76:	fb1e f101 	smulbb	r1, lr, r1
 801ca7a:	b292      	uxth	r2, r2
 801ca7c:	f102 0c01 	add.w	ip, r2, #1
 801ca80:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ca84:	1212      	asrs	r2, r2, #8
 801ca86:	703a      	strb	r2, [r7, #0]
 801ca88:	787a      	ldrb	r2, [r7, #1]
 801ca8a:	fb02 0003 	mla	r0, r2, r3, r0
 801ca8e:	b280      	uxth	r0, r0
 801ca90:	1c42      	adds	r2, r0, #1
 801ca92:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ca96:	78ba      	ldrb	r2, [r7, #2]
 801ca98:	fb02 1303 	mla	r3, r2, r3, r1
 801ca9c:	1200      	asrs	r0, r0, #8
 801ca9e:	b29b      	uxth	r3, r3
 801caa0:	7078      	strb	r0, [r7, #1]
 801caa2:	f103 0e01 	add.w	lr, r3, #1
 801caa6:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801caaa:	121b      	asrs	r3, r3, #8
 801caac:	70bb      	strb	r3, [r7, #2]
 801caae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cab0:	3703      	adds	r7, #3
 801cab2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cab6:	441d      	add	r5, r3
 801cab8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801caba:	441e      	add	r6, r3
 801cabc:	e74d      	b.n	801c95a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cabe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cac0:	3c01      	subs	r4, #1
 801cac2:	f10b 0b03 	add.w	fp, fp, #3
 801cac6:	441d      	add	r5, r3
 801cac8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801caca:	441e      	add	r6, r3
 801cacc:	e725      	b.n	801c91a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801cace:	d021      	beq.n	801cb14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801cad0:	1e63      	subs	r3, r4, #1
 801cad2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801cad4:	fb00 5003 	mla	r0, r0, r3, r5
 801cad8:	1400      	asrs	r0, r0, #16
 801cada:	f53f af3a 	bmi.w	801c952 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cade:	3901      	subs	r1, #1
 801cae0:	4288      	cmp	r0, r1
 801cae2:	f6bf af36 	bge.w	801c952 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cae6:	9920      	ldr	r1, [sp, #128]	; 0x80
 801cae8:	fb01 6303 	mla	r3, r1, r3, r6
 801caec:	141b      	asrs	r3, r3, #16
 801caee:	f53f af30 	bmi.w	801c952 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801caf2:	3a01      	subs	r2, #1
 801caf4:	4293      	cmp	r3, r2
 801caf6:	f6bf af2c 	bge.w	801c952 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801cafa:	f10b 0c03 	add.w	ip, fp, #3
 801cafe:	46a6      	mov	lr, r4
 801cb00:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cb04:	f1be 0f00 	cmp.w	lr, #0
 801cb08:	dc79      	bgt.n	801cbfe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801cb0a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801cb0e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cb12:	44a3      	add	fp, r4
 801cb14:	9b07      	ldr	r3, [sp, #28]
 801cb16:	2b00      	cmp	r3, #0
 801cb18:	f340 8123 	ble.w	801cd62 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801cb1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cb20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb22:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cb26:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cb2a:	eef0 6a62 	vmov.f32	s13, s5
 801cb2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cb32:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cb36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb3a:	ee16 5a90 	vmov	r5, s13
 801cb3e:	eef0 6a43 	vmov.f32	s13, s6
 801cb42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cb46:	ee16 6a90 	vmov	r6, s13
 801cb4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cb4e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cb52:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cb56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cb5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cb5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cb62:	ee12 2a90 	vmov	r2, s5
 801cb66:	eef0 2a47 	vmov.f32	s5, s14
 801cb6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb6e:	ee13 2a10 	vmov	r2, s6
 801cb72:	931f      	str	r3, [sp, #124]	; 0x7c
 801cb74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb76:	eeb0 3a67 	vmov.f32	s6, s15
 801cb7a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cb7e:	9320      	str	r3, [sp, #128]	; 0x80
 801cb80:	9b07      	ldr	r3, [sp, #28]
 801cb82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cb84:	3b01      	subs	r3, #1
 801cb86:	9307      	str	r3, [sp, #28]
 801cb88:	bf08      	it	eq
 801cb8a:	4614      	moveq	r4, r2
 801cb8c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb8e:	bf18      	it	ne
 801cb90:	461c      	movne	r4, r3
 801cb92:	e6b4      	b.n	801c8fe <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801cb94:	2900      	cmp	r1, #0
 801cb96:	f43f af3c 	beq.w	801ca12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cb9a:	eb09 0003 	add.w	r0, r9, r3
 801cb9e:	0843      	lsrs	r3, r0, #1
 801cba0:	07c0      	lsls	r0, r0, #31
 801cba2:	f818 3003 	ldrb.w	r3, [r8, r3]
 801cba6:	bf54      	ite	pl
 801cba8:	f003 030f 	andpl.w	r3, r3, #15
 801cbac:	111b      	asrmi	r3, r3, #4
 801cbae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cbb2:	b2db      	uxtb	r3, r3
 801cbb4:	930a      	str	r3, [sp, #40]	; 0x28
 801cbb6:	e72c      	b.n	801ca12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801cbb8:	703a      	strb	r2, [r7, #0]
 801cbba:	7078      	strb	r0, [r7, #1]
 801cbbc:	f887 e002 	strb.w	lr, [r7, #2]
 801cbc0:	e775      	b.n	801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cbc2:	1c5a      	adds	r2, r3, #1
 801cbc4:	f53f af73 	bmi.w	801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cbc8:	4594      	cmp	ip, r2
 801cbca:	f6ff af70 	blt.w	801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cbce:	1c42      	adds	r2, r0, #1
 801cbd0:	f53f af6d 	bmi.w	801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cbd4:	4596      	cmp	lr, r2
 801cbd6:	f6ff af6a 	blt.w	801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cbda:	9302      	str	r3, [sp, #8]
 801cbdc:	fa0f f38e 	sxth.w	r3, lr
 801cbe0:	9a08      	ldr	r2, [sp, #32]
 801cbe2:	9301      	str	r3, [sp, #4]
 801cbe4:	fa0f f38c 	sxth.w	r3, ip
 801cbe8:	9105      	str	r1, [sp, #20]
 801cbea:	4639      	mov	r1, r7
 801cbec:	9300      	str	r3, [sp, #0]
 801cbee:	464b      	mov	r3, r9
 801cbf0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801cbf4:	4642      	mov	r2, r8
 801cbf6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cbf8:	f7ff fd90 	bl	801c71c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801cbfc:	e757      	b.n	801caae <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cbfe:	142a      	asrs	r2, r5, #16
 801cc00:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cc04:	1433      	asrs	r3, r6, #16
 801cc06:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801cc0a:	fb09 2303 	mla	r3, r9, r3, r2
 801cc0e:	085a      	lsrs	r2, r3, #1
 801cc10:	07d9      	lsls	r1, r3, #31
 801cc12:	f818 2002 	ldrb.w	r2, [r8, r2]
 801cc16:	bf54      	ite	pl
 801cc18:	f002 020f 	andpl.w	r2, r2, #15
 801cc1c:	1112      	asrmi	r2, r2, #4
 801cc1e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cc22:	b2d2      	uxtb	r2, r2
 801cc24:	2800      	cmp	r0, #0
 801cc26:	f000 8085 	beq.w	801cd34 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801cc2a:	f103 0a01 	add.w	sl, r3, #1
 801cc2e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801cc32:	f01a 0f01 	tst.w	sl, #1
 801cc36:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cc3a:	bf0c      	ite	eq
 801cc3c:	f001 010f 	andeq.w	r1, r1, #15
 801cc40:	1109      	asrne	r1, r1, #4
 801cc42:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cc46:	b2c9      	uxtb	r1, r1
 801cc48:	910f      	str	r1, [sp, #60]	; 0x3c
 801cc4a:	b1df      	cbz	r7, 801cc84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cc4c:	444b      	add	r3, r9
 801cc4e:	0859      	lsrs	r1, r3, #1
 801cc50:	f013 0f01 	tst.w	r3, #1
 801cc54:	f103 0301 	add.w	r3, r3, #1
 801cc58:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cc5c:	bf0c      	ite	eq
 801cc5e:	f001 010f 	andeq.w	r1, r1, #15
 801cc62:	1109      	asrne	r1, r1, #4
 801cc64:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cc68:	b2c9      	uxtb	r1, r1
 801cc6a:	910b      	str	r1, [sp, #44]	; 0x2c
 801cc6c:	0859      	lsrs	r1, r3, #1
 801cc6e:	07db      	lsls	r3, r3, #31
 801cc70:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cc74:	bf54      	ite	pl
 801cc76:	f001 010f 	andpl.w	r1, r1, #15
 801cc7a:	1109      	asrmi	r1, r1, #4
 801cc7c:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cc80:	b2c9      	uxtb	r1, r1
 801cc82:	9110      	str	r1, [sp, #64]	; 0x40
 801cc84:	b280      	uxth	r0, r0
 801cc86:	b2bf      	uxth	r7, r7
 801cc88:	fb00 f307 	mul.w	r3, r0, r7
 801cc8c:	0100      	lsls	r0, r0, #4
 801cc8e:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801cc92:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801cc96:	1ac0      	subs	r0, r0, r3
 801cc98:	b2bf      	uxth	r7, r7
 801cc9a:	b280      	uxth	r0, r0
 801cc9c:	1bc9      	subs	r1, r1, r7
 801cc9e:	fa1f fa81 	uxth.w	sl, r1
 801cca2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cca4:	4348      	muls	r0, r1
 801cca6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cca8:	fb02 020a 	mla	r2, r2, sl, r0
 801ccac:	fb07 2701 	mla	r7, r7, r1, r2
 801ccb0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801ccb2:	fb03 7302 	mla	r3, r3, r2, r7
 801ccb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ccba:	b393      	cbz	r3, 801cd22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ccbc:	4a2a      	ldr	r2, [pc, #168]	; (801cd68 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ccbe:	2bff      	cmp	r3, #255	; 0xff
 801ccc0:	6811      	ldr	r1, [r2, #0]
 801ccc2:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801ccc6:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801ccca:	b2c9      	uxtb	r1, r1
 801cccc:	d042      	beq.n	801cd54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801ccce:	b298      	uxth	r0, r3
 801ccd0:	43db      	mvns	r3, r3
 801ccd2:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801ccd6:	fb11 f100 	smulbb	r1, r1, r0
 801ccda:	b2db      	uxtb	r3, r3
 801ccdc:	fb17 f700 	smulbb	r7, r7, r0
 801cce0:	fb02 1103 	mla	r1, r2, r3, r1
 801cce4:	fb1a f000 	smulbb	r0, sl, r0
 801cce8:	b289      	uxth	r1, r1
 801ccea:	1c4a      	adds	r2, r1, #1
 801ccec:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ccf0:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801ccf4:	fb02 7703 	mla	r7, r2, r3, r7
 801ccf8:	1209      	asrs	r1, r1, #8
 801ccfa:	b2bf      	uxth	r7, r7
 801ccfc:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801cd00:	1c7a      	adds	r2, r7, #1
 801cd02:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801cd06:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801cd0a:	fb02 0303 	mla	r3, r2, r3, r0
 801cd0e:	123f      	asrs	r7, r7, #8
 801cd10:	b29b      	uxth	r3, r3
 801cd12:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801cd16:	1c5a      	adds	r2, r3, #1
 801cd18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cd1c:	121b      	asrs	r3, r3, #8
 801cd1e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801cd22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd24:	f10c 0c03 	add.w	ip, ip, #3
 801cd28:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cd2c:	441d      	add	r5, r3
 801cd2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cd30:	441e      	add	r6, r3
 801cd32:	e6e7      	b.n	801cb04 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801cd34:	2f00      	cmp	r7, #0
 801cd36:	d0a5      	beq.n	801cc84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cd38:	444b      	add	r3, r9
 801cd3a:	0859      	lsrs	r1, r3, #1
 801cd3c:	07db      	lsls	r3, r3, #31
 801cd3e:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cd42:	bf54      	ite	pl
 801cd44:	f001 010f 	andpl.w	r1, r1, #15
 801cd48:	1109      	asrmi	r1, r1, #4
 801cd4a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801cd4e:	b2c9      	uxtb	r1, r1
 801cd50:	910b      	str	r1, [sp, #44]	; 0x2c
 801cd52:	e797      	b.n	801cc84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cd54:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801cd58:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801cd5c:	f80c ac01 	strb.w	sl, [ip, #-1]
 801cd60:	e7df      	b.n	801cd22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801cd62:	b013      	add	sp, #76	; 0x4c
 801cd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd68:	2401aa44 	.word	0x2401aa44

0801cd6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801cd6c:	b530      	push	{r4, r5, lr}
 801cd6e:	b29d      	uxth	r5, r3
 801cd70:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 801cd74:	780c      	ldrb	r4, [r1, #0]
 801cd76:	b298      	uxth	r0, r3
 801cd78:	7813      	ldrb	r3, [r2, #0]
 801cd7a:	fb14 f405 	smulbb	r4, r4, r5
 801cd7e:	fb13 f300 	smulbb	r3, r3, r0
 801cd82:	441c      	add	r4, r3
 801cd84:	b2a4      	uxth	r4, r4
 801cd86:	1c63      	adds	r3, r4, #1
 801cd88:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801cd8c:	7853      	ldrb	r3, [r2, #1]
 801cd8e:	fb13 f300 	smulbb	r3, r3, r0
 801cd92:	1224      	asrs	r4, r4, #8
 801cd94:	7014      	strb	r4, [r2, #0]
 801cd96:	784c      	ldrb	r4, [r1, #1]
 801cd98:	fb14 f405 	smulbb	r4, r4, r5
 801cd9c:	441c      	add	r4, r3
 801cd9e:	b2a4      	uxth	r4, r4
 801cda0:	1c63      	adds	r3, r4, #1
 801cda2:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801cda6:	1224      	asrs	r4, r4, #8
 801cda8:	7054      	strb	r4, [r2, #1]
 801cdaa:	788b      	ldrb	r3, [r1, #2]
 801cdac:	7891      	ldrb	r1, [r2, #2]
 801cdae:	fb13 f305 	smulbb	r3, r3, r5
 801cdb2:	fb11 f000 	smulbb	r0, r1, r0
 801cdb6:	4403      	add	r3, r0
 801cdb8:	b29b      	uxth	r3, r3
 801cdba:	1c59      	adds	r1, r3, #1
 801cdbc:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801cdc0:	121b      	asrs	r3, r3, #8
 801cdc2:	7093      	strb	r3, [r2, #2]
 801cdc4:	bd30      	pop	{r4, r5, pc}
	...

0801cdc8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdcc:	461c      	mov	r4, r3
 801cdce:	b08b      	sub	sp, #44	; 0x2c
 801cdd0:	460e      	mov	r6, r1
 801cdd2:	4615      	mov	r5, r2
 801cdd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cdd6:	4682      	mov	sl, r0
 801cdd8:	6861      	ldr	r1, [r4, #4]
 801cdda:	aa06      	add	r2, sp, #24
 801cddc:	6820      	ldr	r0, [r4, #0]
 801cdde:	2702      	movs	r7, #2
 801cde0:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
 801cde4:	3504      	adds	r5, #4
 801cde6:	c203      	stmia	r2!, {r0, r1}
 801cde8:	6818      	ldr	r0, [r3, #0]
 801cdea:	aa08      	add	r2, sp, #32
 801cdec:	6859      	ldr	r1, [r3, #4]
 801cdee:	c203      	stmia	r2!, {r0, r1}
 801cdf0:	a806      	add	r0, sp, #24
 801cdf2:	f7f4 f99d 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cdf6:	4621      	mov	r1, r4
 801cdf8:	a808      	add	r0, sp, #32
 801cdfa:	f7f4 f9c1 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cdfe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ce02:	f9bd b026 	ldrsh.w	fp, [sp, #38]	; 0x26
 801ce06:	f002 0301 	and.w	r3, r2, #1
 801ce0a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801ce0e:	9302      	str	r3, [sp, #8]
 801ce10:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ce14:	f003 0101 	and.w	r1, r3, #1
 801ce18:	9101      	str	r1, [sp, #4]
 801ce1a:	9801      	ldr	r0, [sp, #4]
 801ce1c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 801ce20:	4403      	add	r3, r0
 801ce22:	fb01 2303 	mla	r3, r1, r3, r2
 801ce26:	fb93 f3f7 	sdiv	r3, r3, r7
 801ce2a:	441e      	add	r6, r3
 801ce2c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ce30:	441a      	add	r2, r3
 801ce32:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801ce36:	4419      	add	r1, r3
 801ce38:	4b70      	ldr	r3, [pc, #448]	; (801cffc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801ce3a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ce3e:	6818      	ldr	r0, [r3, #0]
 801ce40:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
 801ce44:	6803      	ldr	r3, [r0, #0]
 801ce46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce48:	4798      	blx	r3
 801ce4a:	4a6d      	ldr	r2, [pc, #436]	; (801d000 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801ce4c:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ce50:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ce54:	8813      	ldrh	r3, [r2, #0]
 801ce56:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801ce5a:	fb03 1404 	mla	r4, r3, r4, r1
 801ce5e:	4611      	mov	r1, r2
 801ce60:	fb0b f303 	mul.w	r3, fp, r3
 801ce64:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ce6c:	4404      	add	r4, r0
 801ce6e:	4423      	add	r3, r4
 801ce70:	d073      	beq.n	801cf5a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801ce72:	9705      	str	r7, [sp, #20]
 801ce74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801ce78:	9b03      	ldr	r3, [sp, #12]
 801ce7a:	429c      	cmp	r4, r3
 801ce7c:	f080 80b5 	bcs.w	801cfea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801ce80:	9b02      	ldr	r3, [sp, #8]
 801ce82:	b35b      	cbz	r3, 801cedc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801ce84:	7831      	ldrb	r1, [r6, #0]
 801ce86:	4622      	mov	r2, r4
 801ce88:	1c77      	adds	r7, r6, #1
 801ce8a:	3403      	adds	r4, #3
 801ce8c:	f001 010f 	and.w	r1, r1, #15
 801ce90:	f108 3bff 	add.w	fp, r8, #4294967295
 801ce94:	464b      	mov	r3, r9
 801ce96:	4650      	mov	r0, sl
 801ce98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ce9c:	4429      	add	r1, r5
 801ce9e:	f7ff ff65 	bl	801cd6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801cea2:	f1bb 0f01 	cmp.w	fp, #1
 801cea6:	dd1c      	ble.n	801cee2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801cea8:	7839      	ldrb	r1, [r7, #0]
 801ceaa:	4622      	mov	r2, r4
 801ceac:	464b      	mov	r3, r9
 801ceae:	4650      	mov	r0, sl
 801ceb0:	0909      	lsrs	r1, r1, #4
 801ceb2:	f1ab 0b02 	sub.w	fp, fp, #2
 801ceb6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ceba:	4429      	add	r1, r5
 801cebc:	f7ff ff56 	bl	801cd6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801cec0:	f817 1b01 	ldrb.w	r1, [r7], #1
 801cec4:	1ce2      	adds	r2, r4, #3
 801cec6:	464b      	mov	r3, r9
 801cec8:	f001 010f 	and.w	r1, r1, #15
 801cecc:	4650      	mov	r0, sl
 801cece:	3406      	adds	r4, #6
 801ced0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ced4:	4429      	add	r1, r5
 801ced6:	f7ff ff49 	bl	801cd6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801ceda:	e7e2      	b.n	801cea2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801cedc:	4637      	mov	r7, r6
 801cede:	46c3      	mov	fp, r8
 801cee0:	e7df      	b.n	801cea2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801cee2:	d10a      	bne.n	801cefa <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801cee4:	7839      	ldrb	r1, [r7, #0]
 801cee6:	4622      	mov	r2, r4
 801cee8:	3403      	adds	r4, #3
 801ceea:	464b      	mov	r3, r9
 801ceec:	0909      	lsrs	r1, r1, #4
 801ceee:	4650      	mov	r0, sl
 801cef0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cef4:	4429      	add	r1, r5
 801cef6:	f7ff ff39 	bl	801cd6c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801cefa:	9b04      	ldr	r3, [sp, #16]
 801cefc:	9a01      	ldr	r2, [sp, #4]
 801cefe:	881b      	ldrh	r3, [r3, #0]
 801cf00:	eba3 0308 	sub.w	r3, r3, r8
 801cf04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cf08:	441c      	add	r4, r3
 801cf0a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801cf0e:	4413      	add	r3, r2
 801cf10:	9a05      	ldr	r2, [sp, #20]
 801cf12:	fb93 f3f2 	sdiv	r3, r3, r2
 801cf16:	441e      	add	r6, r3
 801cf18:	e7ae      	b.n	801ce78 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801cf1a:	4632      	mov	r2, r6
 801cf1c:	46c4      	mov	ip, r8
 801cf1e:	e037      	b.n	801cf90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801cf20:	d10e      	bne.n	801cf40 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801cf22:	7812      	ldrb	r2, [r2, #0]
 801cf24:	3003      	adds	r0, #3
 801cf26:	0912      	lsrs	r2, r2, #4
 801cf28:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf2c:	18ac      	adds	r4, r5, r2
 801cf2e:	5caa      	ldrb	r2, [r5, r2]
 801cf30:	f800 2c03 	strb.w	r2, [r0, #-3]
 801cf34:	7862      	ldrb	r2, [r4, #1]
 801cf36:	f800 2c02 	strb.w	r2, [r0, #-2]
 801cf3a:	78a2      	ldrb	r2, [r4, #2]
 801cf3c:	f800 2c01 	strb.w	r2, [r0, #-1]
 801cf40:	880c      	ldrh	r4, [r1, #0]
 801cf42:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801cf46:	eba4 0408 	sub.w	r4, r4, r8
 801cf4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf4e:	4404      	add	r4, r0
 801cf50:	9801      	ldr	r0, [sp, #4]
 801cf52:	4402      	add	r2, r0
 801cf54:	fb92 f2f7 	sdiv	r2, r2, r7
 801cf58:	4416      	add	r6, r2
 801cf5a:	429c      	cmp	r4, r3
 801cf5c:	d245      	bcs.n	801cfea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801cf5e:	9a02      	ldr	r2, [sp, #8]
 801cf60:	2a00      	cmp	r2, #0
 801cf62:	d0da      	beq.n	801cf1a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801cf64:	7830      	ldrb	r0, [r6, #0]
 801cf66:	1c72      	adds	r2, r6, #1
 801cf68:	3403      	adds	r4, #3
 801cf6a:	f000 000f 	and.w	r0, r0, #15
 801cf6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cf72:	eb05 0c00 	add.w	ip, r5, r0
 801cf76:	5c28      	ldrb	r0, [r5, r0]
 801cf78:	f804 0c03 	strb.w	r0, [r4, #-3]
 801cf7c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801cf80:	f804 0c02 	strb.w	r0, [r4, #-2]
 801cf84:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801cf88:	f108 3cff 	add.w	ip, r8, #4294967295
 801cf8c:	f804 0c01 	strb.w	r0, [r4, #-1]
 801cf90:	f1bc 0f01 	cmp.w	ip, #1
 801cf94:	4620      	mov	r0, r4
 801cf96:	f104 0406 	add.w	r4, r4, #6
 801cf9a:	ddc1      	ble.n	801cf20 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801cf9c:	7810      	ldrb	r0, [r2, #0]
 801cf9e:	f1ac 0c02 	sub.w	ip, ip, #2
 801cfa2:	0900      	lsrs	r0, r0, #4
 801cfa4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cfa8:	eb05 0e00 	add.w	lr, r5, r0
 801cfac:	5c28      	ldrb	r0, [r5, r0]
 801cfae:	f804 0c06 	strb.w	r0, [r4, #-6]
 801cfb2:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801cfb6:	f804 0c05 	strb.w	r0, [r4, #-5]
 801cfba:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801cfbe:	f804 0c04 	strb.w	r0, [r4, #-4]
 801cfc2:	f812 0b01 	ldrb.w	r0, [r2], #1
 801cfc6:	f000 000f 	and.w	r0, r0, #15
 801cfca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cfce:	eb05 0e00 	add.w	lr, r5, r0
 801cfd2:	5c28      	ldrb	r0, [r5, r0]
 801cfd4:	f804 0c03 	strb.w	r0, [r4, #-3]
 801cfd8:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801cfdc:	f804 0c02 	strb.w	r0, [r4, #-2]
 801cfe0:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801cfe4:	f804 0c01 	strb.w	r0, [r4, #-1]
 801cfe8:	e7d2      	b.n	801cf90 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801cfea:	4b04      	ldr	r3, [pc, #16]	; (801cffc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801cfec:	6818      	ldr	r0, [r3, #0]
 801cfee:	6803      	ldr	r3, [r0, #0]
 801cff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cff2:	4798      	blx	r3
 801cff4:	b00b      	add	sp, #44	; 0x2c
 801cff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cffa:	bf00      	nop
 801cffc:	2401aa3c 	.word	0x2401aa3c
 801d000:	2401aa36 	.word	0x2401aa36

0801d004 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801d004:	b530      	push	{r4, r5, lr}
 801d006:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801d00a:	780d      	ldrb	r5, [r1, #0]
 801d00c:	28ff      	cmp	r0, #255	; 0xff
 801d00e:	d107      	bne.n	801d020 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801d010:	2bff      	cmp	r3, #255	; 0xff
 801d012:	d105      	bne.n	801d020 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801d014:	7015      	strb	r5, [r2, #0]
 801d016:	784b      	ldrb	r3, [r1, #1]
 801d018:	7053      	strb	r3, [r2, #1]
 801d01a:	788b      	ldrb	r3, [r1, #2]
 801d01c:	7093      	strb	r3, [r2, #2]
 801d01e:	bd30      	pop	{r4, r5, pc}
 801d020:	fb10 f003 	smulbb	r0, r0, r3
 801d024:	b283      	uxth	r3, r0
 801d026:	1c58      	adds	r0, r3, #1
 801d028:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d02c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d030:	b284      	uxth	r4, r0
 801d032:	43c0      	mvns	r0, r0
 801d034:	fb15 f504 	smulbb	r5, r5, r4
 801d038:	b2c3      	uxtb	r3, r0
 801d03a:	7810      	ldrb	r0, [r2, #0]
 801d03c:	fb00 5003 	mla	r0, r0, r3, r5
 801d040:	b280      	uxth	r0, r0
 801d042:	1c45      	adds	r5, r0, #1
 801d044:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d048:	7855      	ldrb	r5, [r2, #1]
 801d04a:	fb15 f503 	smulbb	r5, r5, r3
 801d04e:	1200      	asrs	r0, r0, #8
 801d050:	7010      	strb	r0, [r2, #0]
 801d052:	7848      	ldrb	r0, [r1, #1]
 801d054:	fb00 5004 	mla	r0, r0, r4, r5
 801d058:	b280      	uxth	r0, r0
 801d05a:	1c45      	adds	r5, r0, #1
 801d05c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d060:	1200      	asrs	r0, r0, #8
 801d062:	7050      	strb	r0, [r2, #1]
 801d064:	7888      	ldrb	r0, [r1, #2]
 801d066:	7891      	ldrb	r1, [r2, #2]
 801d068:	fb11 f303 	smulbb	r3, r1, r3
 801d06c:	fb00 3304 	mla	r3, r0, r4, r3
 801d070:	b29b      	uxth	r3, r3
 801d072:	1c59      	adds	r1, r3, #1
 801d074:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801d078:	121b      	asrs	r3, r3, #8
 801d07a:	e7cf      	b.n	801d01c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801d07c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801d07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d080:	461d      	mov	r5, r3
 801d082:	b08f      	sub	sp, #60	; 0x3c
 801d084:	460c      	mov	r4, r1
 801d086:	4616      	mov	r6, r2
 801d088:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d08a:	4680      	mov	r8, r0
 801d08c:	6869      	ldr	r1, [r5, #4]
 801d08e:	aa0a      	add	r2, sp, #40	; 0x28
 801d090:	6828      	ldr	r0, [r5, #0]
 801d092:	3604      	adds	r6, #4
 801d094:	f89d 9064 	ldrb.w	r9, [sp, #100]	; 0x64
 801d098:	4f57      	ldr	r7, [pc, #348]	; (801d1f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801d09a:	c203      	stmia	r2!, {r0, r1}
 801d09c:	6818      	ldr	r0, [r3, #0]
 801d09e:	aa0c      	add	r2, sp, #48	; 0x30
 801d0a0:	6859      	ldr	r1, [r3, #4]
 801d0a2:	c203      	stmia	r2!, {r0, r1}
 801d0a4:	a80a      	add	r0, sp, #40	; 0x28
 801d0a6:	f7f4 f843 	bl	8011130 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d0aa:	4629      	mov	r1, r5
 801d0ac:	a80c      	add	r0, sp, #48	; 0x30
 801d0ae:	2502      	movs	r5, #2
 801d0b0:	f7f4 f866 	bl	8011180 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d0b4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801d0b8:	f9bd a036 	ldrsh.w	sl, [sp, #54]	; 0x36
 801d0bc:	f002 0301 	and.w	r3, r2, #1
 801d0c0:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 801d0c4:	9304      	str	r3, [sp, #16]
 801d0c6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d0ca:	f003 0101 	and.w	r1, r3, #1
 801d0ce:	9103      	str	r1, [sp, #12]
 801d0d0:	9803      	ldr	r0, [sp, #12]
 801d0d2:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	; 0x32
 801d0d6:	4403      	add	r3, r0
 801d0d8:	6838      	ldr	r0, [r7, #0]
 801d0da:	fb01 2303 	mla	r3, r1, r3, r2
 801d0de:	fb93 f3f5 	sdiv	r3, r3, r5
 801d0e2:	18e5      	adds	r5, r4, r3
 801d0e4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801d0e8:	441a      	add	r2, r3
 801d0ea:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801d0ee:	4419      	add	r1, r3
 801d0f0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801d0f4:	f8ad 1032 	strh.w	r1, [sp, #50]	; 0x32
 801d0f8:	6803      	ldr	r3, [r0, #0]
 801d0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0fc:	4798      	blx	r3
 801d0fe:	4a3f      	ldr	r2, [pc, #252]	; (801d1fc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801d100:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 801d104:	8813      	ldrh	r3, [r2, #0]
 801d106:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801d10a:	9207      	str	r2, [sp, #28]
 801d10c:	fb03 1404 	mla	r4, r3, r4, r1
 801d110:	fb0a f303 	mul.w	r3, sl, r3
 801d114:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d118:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d11c:	4404      	add	r4, r0
 801d11e:	18e3      	adds	r3, r4, r3
 801d120:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801d124:	9b05      	ldr	r3, [sp, #20]
 801d126:	429c      	cmp	r4, r3
 801d128:	d25d      	bcs.n	801d1e6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801d12a:	9b04      	ldr	r3, [sp, #16]
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d037      	beq.n	801d1a0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801d130:	782b      	ldrb	r3, [r5, #0]
 801d132:	1c6f      	adds	r7, r5, #1
 801d134:	f003 030f 	and.w	r3, r3, #15
 801d138:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d13c:	9309      	str	r3, [sp, #36]	; 0x24
 801d13e:	0e1b      	lsrs	r3, r3, #24
 801d140:	d006      	beq.n	801d150 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801d142:	9300      	str	r3, [sp, #0]
 801d144:	4622      	mov	r2, r4
 801d146:	464b      	mov	r3, r9
 801d148:	a909      	add	r1, sp, #36	; 0x24
 801d14a:	4640      	mov	r0, r8
 801d14c:	f7ff ff5a 	bl	801d004 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d150:	3403      	adds	r4, #3
 801d152:	f10b 3aff 	add.w	sl, fp, #4294967295
 801d156:	f1ba 0f01 	cmp.w	sl, #1
 801d15a:	dd24      	ble.n	801d1a6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801d15c:	783b      	ldrb	r3, [r7, #0]
 801d15e:	091b      	lsrs	r3, r3, #4
 801d160:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d164:	9308      	str	r3, [sp, #32]
 801d166:	0e1b      	lsrs	r3, r3, #24
 801d168:	d006      	beq.n	801d178 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801d16a:	9300      	str	r3, [sp, #0]
 801d16c:	4622      	mov	r2, r4
 801d16e:	464b      	mov	r3, r9
 801d170:	a908      	add	r1, sp, #32
 801d172:	4640      	mov	r0, r8
 801d174:	f7ff ff46 	bl	801d004 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d178:	f817 3b01 	ldrb.w	r3, [r7], #1
 801d17c:	f003 030f 	and.w	r3, r3, #15
 801d180:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d184:	9309      	str	r3, [sp, #36]	; 0x24
 801d186:	0e1b      	lsrs	r3, r3, #24
 801d188:	d006      	beq.n	801d198 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801d18a:	9300      	str	r3, [sp, #0]
 801d18c:	1ce2      	adds	r2, r4, #3
 801d18e:	464b      	mov	r3, r9
 801d190:	a909      	add	r1, sp, #36	; 0x24
 801d192:	4640      	mov	r0, r8
 801d194:	f7ff ff36 	bl	801d004 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d198:	3406      	adds	r4, #6
 801d19a:	f1aa 0a02 	sub.w	sl, sl, #2
 801d19e:	e7da      	b.n	801d156 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801d1a0:	462f      	mov	r7, r5
 801d1a2:	46da      	mov	sl, fp
 801d1a4:	e7d7      	b.n	801d156 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801d1a6:	d10e      	bne.n	801d1c6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801d1a8:	783b      	ldrb	r3, [r7, #0]
 801d1aa:	091b      	lsrs	r3, r3, #4
 801d1ac:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d1b0:	9309      	str	r3, [sp, #36]	; 0x24
 801d1b2:	0e1b      	lsrs	r3, r3, #24
 801d1b4:	d006      	beq.n	801d1c4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801d1b6:	9300      	str	r3, [sp, #0]
 801d1b8:	4622      	mov	r2, r4
 801d1ba:	464b      	mov	r3, r9
 801d1bc:	a909      	add	r1, sp, #36	; 0x24
 801d1be:	4640      	mov	r0, r8
 801d1c0:	f7ff ff20 	bl	801d004 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801d1c4:	3403      	adds	r4, #3
 801d1c6:	9b07      	ldr	r3, [sp, #28]
 801d1c8:	9a03      	ldr	r2, [sp, #12]
 801d1ca:	881b      	ldrh	r3, [r3, #0]
 801d1cc:	eba3 030b 	sub.w	r3, r3, fp
 801d1d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d1d4:	441c      	add	r4, r3
 801d1d6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 801d1da:	4413      	add	r3, r2
 801d1dc:	2202      	movs	r2, #2
 801d1de:	fb93 f3f2 	sdiv	r3, r3, r2
 801d1e2:	441d      	add	r5, r3
 801d1e4:	e79e      	b.n	801d124 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801d1e6:	9b06      	ldr	r3, [sp, #24]
 801d1e8:	6818      	ldr	r0, [r3, #0]
 801d1ea:	6803      	ldr	r3, [r0, #0]
 801d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d1ee:	4798      	blx	r3
 801d1f0:	b00f      	add	sp, #60	; 0x3c
 801d1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1f6:	bf00      	nop
 801d1f8:	2401aa3c 	.word	0x2401aa3c
 801d1fc:	2401aa36 	.word	0x2401aa36

0801d200 <CRC_Lock>:
 801d200:	4a20      	ldr	r2, [pc, #128]	; (801d284 <CRC_Lock+0x84>)
 801d202:	b530      	push	{r4, r5, lr}
 801d204:	6813      	ldr	r3, [r2, #0]
 801d206:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d20a:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d20e:	f023 0301 	bic.w	r3, r3, #1
 801d212:	6013      	str	r3, [r2, #0]
 801d214:	4b1c      	ldr	r3, [pc, #112]	; (801d288 <CRC_Lock+0x88>)
 801d216:	681a      	ldr	r2, [r3, #0]
 801d218:	4022      	ands	r2, r4
 801d21a:	42aa      	cmp	r2, r5
 801d21c:	d005      	beq.n	801d22a <CRC_Lock+0x2a>
 801d21e:	681b      	ldr	r3, [r3, #0]
 801d220:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d224:	4023      	ands	r3, r4
 801d226:	4293      	cmp	r3, r2
 801d228:	d124      	bne.n	801d274 <CRC_Lock+0x74>
 801d22a:	4b18      	ldr	r3, [pc, #96]	; (801d28c <CRC_Lock+0x8c>)
 801d22c:	681b      	ldr	r3, [r3, #0]
 801d22e:	bb0b      	cbnz	r3, 801d274 <CRC_Lock+0x74>
 801d230:	4b17      	ldr	r3, [pc, #92]	; (801d290 <CRC_Lock+0x90>)
 801d232:	681a      	ldr	r2, [r3, #0]
 801d234:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d238:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d23c:	d00d      	beq.n	801d25a <CRC_Lock+0x5a>
 801d23e:	681a      	ldr	r2, [r3, #0]
 801d240:	f240 4483 	movw	r4, #1155	; 0x483
 801d244:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d248:	42a2      	cmp	r2, r4
 801d24a:	d006      	beq.n	801d25a <CRC_Lock+0x5a>
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	f240 4285 	movw	r2, #1157	; 0x485
 801d252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d256:	4293      	cmp	r3, r2
 801d258:	d10c      	bne.n	801d274 <CRC_Lock+0x74>
 801d25a:	4b0e      	ldr	r3, [pc, #56]	; (801d294 <CRC_Lock+0x94>)
 801d25c:	2201      	movs	r2, #1
 801d25e:	601a      	str	r2, [r3, #0]
 801d260:	681a      	ldr	r2, [r3, #0]
 801d262:	2a00      	cmp	r2, #0
 801d264:	d1fc      	bne.n	801d260 <CRC_Lock+0x60>
 801d266:	4b0c      	ldr	r3, [pc, #48]	; (801d298 <CRC_Lock+0x98>)
 801d268:	6018      	str	r0, [r3, #0]
 801d26a:	6818      	ldr	r0, [r3, #0]
 801d26c:	1a43      	subs	r3, r0, r1
 801d26e:	4258      	negs	r0, r3
 801d270:	4158      	adcs	r0, r3
 801d272:	bd30      	pop	{r4, r5, pc}
 801d274:	4b09      	ldr	r3, [pc, #36]	; (801d29c <CRC_Lock+0x9c>)
 801d276:	2201      	movs	r2, #1
 801d278:	601a      	str	r2, [r3, #0]
 801d27a:	681a      	ldr	r2, [r3, #0]
 801d27c:	2a00      	cmp	r2, #0
 801d27e:	d1fc      	bne.n	801d27a <CRC_Lock+0x7a>
 801d280:	4b07      	ldr	r3, [pc, #28]	; (801d2a0 <CRC_Lock+0xa0>)
 801d282:	e7f1      	b.n	801d268 <CRC_Lock+0x68>
 801d284:	e0002000 	.word	0xe0002000
 801d288:	e000ed00 	.word	0xe000ed00
 801d28c:	e0042000 	.word	0xe0042000
 801d290:	5c001000 	.word	0x5c001000
 801d294:	58024c08 	.word	0x58024c08
 801d298:	58024c00 	.word	0x58024c00
 801d29c:	40023008 	.word	0x40023008
 801d2a0:	40023000 	.word	0x40023000

0801d2a4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d2a4:	6101      	str	r1, [r0, #16]
 801d2a6:	4770      	bx	lr

0801d2a8 <_ZN8touchgfx8Gestures4tickEv>:
 801d2a8:	7b83      	ldrb	r3, [r0, #14]
 801d2aa:	b14b      	cbz	r3, 801d2c0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d2ac:	8903      	ldrh	r3, [r0, #8]
 801d2ae:	3301      	adds	r3, #1
 801d2b0:	b29b      	uxth	r3, r3
 801d2b2:	2b07      	cmp	r3, #7
 801d2b4:	8103      	strh	r3, [r0, #8]
 801d2b6:	bf81      	itttt	hi
 801d2b8:	2300      	movhi	r3, #0
 801d2ba:	8143      	strhhi	r3, [r0, #10]
 801d2bc:	8183      	strhhi	r3, [r0, #12]
 801d2be:	7383      	strbhi	r3, [r0, #14]
 801d2c0:	4770      	bx	lr
	...

0801d2c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d2c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d2c8:	4698      	mov	r8, r3
 801d2ca:	8883      	ldrh	r3, [r0, #4]
 801d2cc:	4604      	mov	r4, r0
 801d2ce:	4617      	mov	r7, r2
 801d2d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d2d4:	eba8 0303 	sub.w	r3, r8, r3
 801d2d8:	4a19      	ldr	r2, [pc, #100]	; (801d340 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801d2da:	460e      	mov	r6, r1
 801d2dc:	b21b      	sxth	r3, r3
 801d2de:	88c1      	ldrh	r1, [r0, #6]
 801d2e0:	9200      	str	r2, [sp, #0]
 801d2e2:	2000      	movs	r0, #0
 801d2e4:	2b00      	cmp	r3, #0
 801d2e6:	8aa2      	ldrh	r2, [r4, #20]
 801d2e8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d2ec:	bfb8      	it	lt
 801d2ee:	425b      	neglt	r3, r3
 801d2f0:	f88d 0004 	strb.w	r0, [sp, #4]
 801d2f4:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d2f8:	b21b      	sxth	r3, r3
 801d2fa:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d2fe:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d302:	4293      	cmp	r3, r2
 801d304:	dc07      	bgt.n	801d316 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801d306:	1a69      	subs	r1, r5, r1
 801d308:	b209      	sxth	r1, r1
 801d30a:	2900      	cmp	r1, #0
 801d30c:	bfb8      	it	lt
 801d30e:	4249      	neglt	r1, r1
 801d310:	b209      	sxth	r1, r1
 801d312:	428a      	cmp	r2, r1
 801d314:	da10      	bge.n	801d338 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801d316:	6920      	ldr	r0, [r4, #16]
 801d318:	4669      	mov	r1, sp
 801d31a:	eba8 0606 	sub.w	r6, r8, r6
 801d31e:	1bef      	subs	r7, r5, r7
 801d320:	6803      	ldr	r3, [r0, #0]
 801d322:	685b      	ldr	r3, [r3, #4]
 801d324:	4798      	blx	r3
 801d326:	2300      	movs	r3, #0
 801d328:	2001      	movs	r0, #1
 801d32a:	8166      	strh	r6, [r4, #10]
 801d32c:	8123      	strh	r3, [r4, #8]
 801d32e:	81a7      	strh	r7, [r4, #12]
 801d330:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d334:	80e5      	strh	r5, [r4, #6]
 801d336:	73a0      	strb	r0, [r4, #14]
 801d338:	b004      	add	sp, #16
 801d33a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d33e:	bf00      	nop
 801d340:	0801fe30 	.word	0x0801fe30

0801d344 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d344:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d346:	461e      	mov	r6, r3
 801d348:	1e4b      	subs	r3, r1, #1
 801d34a:	b085      	sub	sp, #20
 801d34c:	4604      	mov	r4, r0
 801d34e:	2b01      	cmp	r3, #1
 801d350:	460d      	mov	r5, r1
 801d352:	4617      	mov	r7, r2
 801d354:	d84b      	bhi.n	801d3ee <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d356:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d35a:	1cd3      	adds	r3, r2, #3
 801d35c:	b29b      	uxth	r3, r3
 801d35e:	2b06      	cmp	r3, #6
 801d360:	d916      	bls.n	801d390 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d362:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d404 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d366:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d36a:	f8cd c004 	str.w	ip, [sp, #4]
 801d36e:	f04f 0c00 	mov.w	ip, #0
 801d372:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d376:	6900      	ldr	r0, [r0, #16]
 801d378:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d37c:	a901      	add	r1, sp, #4
 801d37e:	f88d c008 	strb.w	ip, [sp, #8]
 801d382:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d386:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d38a:	6803      	ldr	r3, [r0, #0]
 801d38c:	689b      	ldr	r3, [r3, #8]
 801d38e:	4798      	blx	r3
 801d390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d394:	1cd3      	adds	r3, r2, #3
 801d396:	b29b      	uxth	r3, r3
 801d398:	2b06      	cmp	r3, #6
 801d39a:	d916      	bls.n	801d3ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d39c:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d404 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d3a0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d3a4:	f8cd c004 	str.w	ip, [sp, #4]
 801d3a8:	f04f 0c01 	mov.w	ip, #1
 801d3ac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d3b0:	6920      	ldr	r0, [r4, #16]
 801d3b2:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d3b6:	a901      	add	r1, sp, #4
 801d3b8:	f88d c008 	strb.w	ip, [sp, #8]
 801d3bc:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d3c0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d3c4:	6803      	ldr	r3, [r0, #0]
 801d3c6:	689b      	ldr	r3, [r3, #8]
 801d3c8:	4798      	blx	r3
 801d3ca:	4b0d      	ldr	r3, [pc, #52]	; (801d400 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d3cc:	a901      	add	r1, sp, #4
 801d3ce:	6920      	ldr	r0, [r4, #16]
 801d3d0:	9301      	str	r3, [sp, #4]
 801d3d2:	2300      	movs	r3, #0
 801d3d4:	f88d 5008 	strb.w	r5, [sp, #8]
 801d3d8:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d3dc:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d3e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d3e4:	6803      	ldr	r3, [r0, #0]
 801d3e6:	681b      	ldr	r3, [r3, #0]
 801d3e8:	4798      	blx	r3
 801d3ea:	b005      	add	sp, #20
 801d3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3ee:	2900      	cmp	r1, #0
 801d3f0:	d1eb      	bne.n	801d3ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d3f2:	80a2      	strh	r2, [r4, #4]
 801d3f4:	80c6      	strh	r6, [r0, #6]
 801d3f6:	60a1      	str	r1, [r4, #8]
 801d3f8:	81a1      	strh	r1, [r4, #12]
 801d3fa:	73a1      	strb	r1, [r4, #14]
 801d3fc:	e7e5      	b.n	801d3ca <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d3fe:	bf00      	nop
 801d400:	0801fe1c 	.word	0x0801fe1c
 801d404:	0801fe44 	.word	0x0801fe44

0801d408 <__aeabi_atexit>:
 801d408:	460b      	mov	r3, r1
 801d40a:	4601      	mov	r1, r0
 801d40c:	4618      	mov	r0, r3
 801d40e:	f000 b90f 	b.w	801d630 <__cxa_atexit>

0801d412 <_ZdlPvj>:
 801d412:	f000 b812 	b.w	801d43a <_ZdlPv>

0801d416 <__cxa_guard_acquire>:
 801d416:	6803      	ldr	r3, [r0, #0]
 801d418:	07db      	lsls	r3, r3, #31
 801d41a:	d406      	bmi.n	801d42a <__cxa_guard_acquire+0x14>
 801d41c:	7843      	ldrb	r3, [r0, #1]
 801d41e:	b103      	cbz	r3, 801d422 <__cxa_guard_acquire+0xc>
 801d420:	deff      	udf	#255	; 0xff
 801d422:	2301      	movs	r3, #1
 801d424:	7043      	strb	r3, [r0, #1]
 801d426:	4618      	mov	r0, r3
 801d428:	4770      	bx	lr
 801d42a:	2000      	movs	r0, #0
 801d42c:	4770      	bx	lr

0801d42e <__cxa_guard_release>:
 801d42e:	2301      	movs	r3, #1
 801d430:	6003      	str	r3, [r0, #0]
 801d432:	4770      	bx	lr

0801d434 <__cxa_pure_virtual>:
 801d434:	b508      	push	{r3, lr}
 801d436:	f000 f80f 	bl	801d458 <_ZSt9terminatev>

0801d43a <_ZdlPv>:
 801d43a:	f000 b845 	b.w	801d4c8 <free>

0801d43e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d43e:	b508      	push	{r3, lr}
 801d440:	4780      	blx	r0
 801d442:	f000 f80e 	bl	801d462 <abort>
	...

0801d448 <_ZSt13get_terminatev>:
 801d448:	4b02      	ldr	r3, [pc, #8]	; (801d454 <_ZSt13get_terminatev+0xc>)
 801d44a:	6818      	ldr	r0, [r3, #0]
 801d44c:	f3bf 8f5b 	dmb	ish
 801d450:	4770      	bx	lr
 801d452:	bf00      	nop
 801d454:	2400007c 	.word	0x2400007c

0801d458 <_ZSt9terminatev>:
 801d458:	b508      	push	{r3, lr}
 801d45a:	f7ff fff5 	bl	801d448 <_ZSt13get_terminatev>
 801d45e:	f7ff ffee 	bl	801d43e <_ZN10__cxxabiv111__terminateEPFvvE>

0801d462 <abort>:
 801d462:	b508      	push	{r3, lr}
 801d464:	2006      	movs	r0, #6
 801d466:	f000 fa39 	bl	801d8dc <raise>
 801d46a:	2001      	movs	r0, #1
 801d46c:	f7e3 fe94 	bl	8001198 <_exit>

0801d470 <__assert_func>:
 801d470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d472:	4614      	mov	r4, r2
 801d474:	461a      	mov	r2, r3
 801d476:	4b09      	ldr	r3, [pc, #36]	; (801d49c <__assert_func+0x2c>)
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	4605      	mov	r5, r0
 801d47c:	68d8      	ldr	r0, [r3, #12]
 801d47e:	b14c      	cbz	r4, 801d494 <__assert_func+0x24>
 801d480:	4b07      	ldr	r3, [pc, #28]	; (801d4a0 <__assert_func+0x30>)
 801d482:	9100      	str	r1, [sp, #0]
 801d484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d488:	4906      	ldr	r1, [pc, #24]	; (801d4a4 <__assert_func+0x34>)
 801d48a:	462b      	mov	r3, r5
 801d48c:	f000 f982 	bl	801d794 <fiprintf>
 801d490:	f7ff ffe7 	bl	801d462 <abort>
 801d494:	4b04      	ldr	r3, [pc, #16]	; (801d4a8 <__assert_func+0x38>)
 801d496:	461c      	mov	r4, r3
 801d498:	e7f3      	b.n	801d482 <__assert_func+0x12>
 801d49a:	bf00      	nop
 801d49c:	240000d8 	.word	0x240000d8
 801d4a0:	080200b4 	.word	0x080200b4
 801d4a4:	080200c1 	.word	0x080200c1
 801d4a8:	080200ef 	.word	0x080200ef

0801d4ac <atexit>:
 801d4ac:	2300      	movs	r3, #0
 801d4ae:	4601      	mov	r1, r0
 801d4b0:	461a      	mov	r2, r3
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f000 bb16 	b.w	801dae4 <__register_exitproc>

0801d4b8 <malloc>:
 801d4b8:	4b02      	ldr	r3, [pc, #8]	; (801d4c4 <malloc+0xc>)
 801d4ba:	4601      	mov	r1, r0
 801d4bc:	6818      	ldr	r0, [r3, #0]
 801d4be:	f000 b82b 	b.w	801d518 <_malloc_r>
 801d4c2:	bf00      	nop
 801d4c4:	240000d8 	.word	0x240000d8

0801d4c8 <free>:
 801d4c8:	4b02      	ldr	r3, [pc, #8]	; (801d4d4 <free+0xc>)
 801d4ca:	4601      	mov	r1, r0
 801d4cc:	6818      	ldr	r0, [r3, #0]
 801d4ce:	f000 bb67 	b.w	801dba0 <_free_r>
 801d4d2:	bf00      	nop
 801d4d4:	240000d8 	.word	0x240000d8

0801d4d8 <sbrk_aligned>:
 801d4d8:	b570      	push	{r4, r5, r6, lr}
 801d4da:	4e0e      	ldr	r6, [pc, #56]	; (801d514 <sbrk_aligned+0x3c>)
 801d4dc:	460c      	mov	r4, r1
 801d4de:	6831      	ldr	r1, [r6, #0]
 801d4e0:	4605      	mov	r5, r0
 801d4e2:	b911      	cbnz	r1, 801d4ea <sbrk_aligned+0x12>
 801d4e4:	f000 faa0 	bl	801da28 <_sbrk_r>
 801d4e8:	6030      	str	r0, [r6, #0]
 801d4ea:	4621      	mov	r1, r4
 801d4ec:	4628      	mov	r0, r5
 801d4ee:	f000 fa9b 	bl	801da28 <_sbrk_r>
 801d4f2:	1c43      	adds	r3, r0, #1
 801d4f4:	d00a      	beq.n	801d50c <sbrk_aligned+0x34>
 801d4f6:	1cc4      	adds	r4, r0, #3
 801d4f8:	f024 0403 	bic.w	r4, r4, #3
 801d4fc:	42a0      	cmp	r0, r4
 801d4fe:	d007      	beq.n	801d510 <sbrk_aligned+0x38>
 801d500:	1a21      	subs	r1, r4, r0
 801d502:	4628      	mov	r0, r5
 801d504:	f000 fa90 	bl	801da28 <_sbrk_r>
 801d508:	3001      	adds	r0, #1
 801d50a:	d101      	bne.n	801d510 <sbrk_aligned+0x38>
 801d50c:	f04f 34ff 	mov.w	r4, #4294967295
 801d510:	4620      	mov	r0, r4
 801d512:	bd70      	pop	{r4, r5, r6, pc}
 801d514:	2401b36c 	.word	0x2401b36c

0801d518 <_malloc_r>:
 801d518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d51c:	1ccd      	adds	r5, r1, #3
 801d51e:	f025 0503 	bic.w	r5, r5, #3
 801d522:	3508      	adds	r5, #8
 801d524:	2d0c      	cmp	r5, #12
 801d526:	bf38      	it	cc
 801d528:	250c      	movcc	r5, #12
 801d52a:	2d00      	cmp	r5, #0
 801d52c:	4607      	mov	r7, r0
 801d52e:	db01      	blt.n	801d534 <_malloc_r+0x1c>
 801d530:	42a9      	cmp	r1, r5
 801d532:	d905      	bls.n	801d540 <_malloc_r+0x28>
 801d534:	230c      	movs	r3, #12
 801d536:	603b      	str	r3, [r7, #0]
 801d538:	2600      	movs	r6, #0
 801d53a:	4630      	mov	r0, r6
 801d53c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d540:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d614 <_malloc_r+0xfc>
 801d544:	f000 f868 	bl	801d618 <__malloc_lock>
 801d548:	f8d8 3000 	ldr.w	r3, [r8]
 801d54c:	461c      	mov	r4, r3
 801d54e:	bb5c      	cbnz	r4, 801d5a8 <_malloc_r+0x90>
 801d550:	4629      	mov	r1, r5
 801d552:	4638      	mov	r0, r7
 801d554:	f7ff ffc0 	bl	801d4d8 <sbrk_aligned>
 801d558:	1c43      	adds	r3, r0, #1
 801d55a:	4604      	mov	r4, r0
 801d55c:	d155      	bne.n	801d60a <_malloc_r+0xf2>
 801d55e:	f8d8 4000 	ldr.w	r4, [r8]
 801d562:	4626      	mov	r6, r4
 801d564:	2e00      	cmp	r6, #0
 801d566:	d145      	bne.n	801d5f4 <_malloc_r+0xdc>
 801d568:	2c00      	cmp	r4, #0
 801d56a:	d048      	beq.n	801d5fe <_malloc_r+0xe6>
 801d56c:	6823      	ldr	r3, [r4, #0]
 801d56e:	4631      	mov	r1, r6
 801d570:	4638      	mov	r0, r7
 801d572:	eb04 0903 	add.w	r9, r4, r3
 801d576:	f000 fa57 	bl	801da28 <_sbrk_r>
 801d57a:	4581      	cmp	r9, r0
 801d57c:	d13f      	bne.n	801d5fe <_malloc_r+0xe6>
 801d57e:	6821      	ldr	r1, [r4, #0]
 801d580:	1a6d      	subs	r5, r5, r1
 801d582:	4629      	mov	r1, r5
 801d584:	4638      	mov	r0, r7
 801d586:	f7ff ffa7 	bl	801d4d8 <sbrk_aligned>
 801d58a:	3001      	adds	r0, #1
 801d58c:	d037      	beq.n	801d5fe <_malloc_r+0xe6>
 801d58e:	6823      	ldr	r3, [r4, #0]
 801d590:	442b      	add	r3, r5
 801d592:	6023      	str	r3, [r4, #0]
 801d594:	f8d8 3000 	ldr.w	r3, [r8]
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d038      	beq.n	801d60e <_malloc_r+0xf6>
 801d59c:	685a      	ldr	r2, [r3, #4]
 801d59e:	42a2      	cmp	r2, r4
 801d5a0:	d12b      	bne.n	801d5fa <_malloc_r+0xe2>
 801d5a2:	2200      	movs	r2, #0
 801d5a4:	605a      	str	r2, [r3, #4]
 801d5a6:	e00f      	b.n	801d5c8 <_malloc_r+0xb0>
 801d5a8:	6822      	ldr	r2, [r4, #0]
 801d5aa:	1b52      	subs	r2, r2, r5
 801d5ac:	d41f      	bmi.n	801d5ee <_malloc_r+0xd6>
 801d5ae:	2a0b      	cmp	r2, #11
 801d5b0:	d917      	bls.n	801d5e2 <_malloc_r+0xca>
 801d5b2:	1961      	adds	r1, r4, r5
 801d5b4:	42a3      	cmp	r3, r4
 801d5b6:	6025      	str	r5, [r4, #0]
 801d5b8:	bf18      	it	ne
 801d5ba:	6059      	strne	r1, [r3, #4]
 801d5bc:	6863      	ldr	r3, [r4, #4]
 801d5be:	bf08      	it	eq
 801d5c0:	f8c8 1000 	streq.w	r1, [r8]
 801d5c4:	5162      	str	r2, [r4, r5]
 801d5c6:	604b      	str	r3, [r1, #4]
 801d5c8:	4638      	mov	r0, r7
 801d5ca:	f104 060b 	add.w	r6, r4, #11
 801d5ce:	f000 f829 	bl	801d624 <__malloc_unlock>
 801d5d2:	f026 0607 	bic.w	r6, r6, #7
 801d5d6:	1d23      	adds	r3, r4, #4
 801d5d8:	1af2      	subs	r2, r6, r3
 801d5da:	d0ae      	beq.n	801d53a <_malloc_r+0x22>
 801d5dc:	1b9b      	subs	r3, r3, r6
 801d5de:	50a3      	str	r3, [r4, r2]
 801d5e0:	e7ab      	b.n	801d53a <_malloc_r+0x22>
 801d5e2:	42a3      	cmp	r3, r4
 801d5e4:	6862      	ldr	r2, [r4, #4]
 801d5e6:	d1dd      	bne.n	801d5a4 <_malloc_r+0x8c>
 801d5e8:	f8c8 2000 	str.w	r2, [r8]
 801d5ec:	e7ec      	b.n	801d5c8 <_malloc_r+0xb0>
 801d5ee:	4623      	mov	r3, r4
 801d5f0:	6864      	ldr	r4, [r4, #4]
 801d5f2:	e7ac      	b.n	801d54e <_malloc_r+0x36>
 801d5f4:	4634      	mov	r4, r6
 801d5f6:	6876      	ldr	r6, [r6, #4]
 801d5f8:	e7b4      	b.n	801d564 <_malloc_r+0x4c>
 801d5fa:	4613      	mov	r3, r2
 801d5fc:	e7cc      	b.n	801d598 <_malloc_r+0x80>
 801d5fe:	230c      	movs	r3, #12
 801d600:	603b      	str	r3, [r7, #0]
 801d602:	4638      	mov	r0, r7
 801d604:	f000 f80e 	bl	801d624 <__malloc_unlock>
 801d608:	e797      	b.n	801d53a <_malloc_r+0x22>
 801d60a:	6025      	str	r5, [r4, #0]
 801d60c:	e7dc      	b.n	801d5c8 <_malloc_r+0xb0>
 801d60e:	605b      	str	r3, [r3, #4]
 801d610:	deff      	udf	#255	; 0xff
 801d612:	bf00      	nop
 801d614:	2401b368 	.word	0x2401b368

0801d618 <__malloc_lock>:
 801d618:	4801      	ldr	r0, [pc, #4]	; (801d620 <__malloc_lock+0x8>)
 801d61a:	f000 ba52 	b.w	801dac2 <__retarget_lock_acquire_recursive>
 801d61e:	bf00      	nop
 801d620:	2401b4b1 	.word	0x2401b4b1

0801d624 <__malloc_unlock>:
 801d624:	4801      	ldr	r0, [pc, #4]	; (801d62c <__malloc_unlock+0x8>)
 801d626:	f000 ba4d 	b.w	801dac4 <__retarget_lock_release_recursive>
 801d62a:	bf00      	nop
 801d62c:	2401b4b1 	.word	0x2401b4b1

0801d630 <__cxa_atexit>:
 801d630:	b510      	push	{r4, lr}
 801d632:	4c05      	ldr	r4, [pc, #20]	; (801d648 <__cxa_atexit+0x18>)
 801d634:	4613      	mov	r3, r2
 801d636:	b12c      	cbz	r4, 801d644 <__cxa_atexit+0x14>
 801d638:	460a      	mov	r2, r1
 801d63a:	4601      	mov	r1, r0
 801d63c:	2002      	movs	r0, #2
 801d63e:	f000 fa51 	bl	801dae4 <__register_exitproc>
 801d642:	bd10      	pop	{r4, pc}
 801d644:	4620      	mov	r0, r4
 801d646:	e7fc      	b.n	801d642 <__cxa_atexit+0x12>
 801d648:	0801dae5 	.word	0x0801dae5

0801d64c <std>:
 801d64c:	2300      	movs	r3, #0
 801d64e:	b510      	push	{r4, lr}
 801d650:	4604      	mov	r4, r0
 801d652:	e9c0 3300 	strd	r3, r3, [r0]
 801d656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d65a:	6083      	str	r3, [r0, #8]
 801d65c:	8181      	strh	r1, [r0, #12]
 801d65e:	6643      	str	r3, [r0, #100]	; 0x64
 801d660:	81c2      	strh	r2, [r0, #14]
 801d662:	6183      	str	r3, [r0, #24]
 801d664:	4619      	mov	r1, r3
 801d666:	2208      	movs	r2, #8
 801d668:	305c      	adds	r0, #92	; 0x5c
 801d66a:	f000 f906 	bl	801d87a <memset>
 801d66e:	4b0d      	ldr	r3, [pc, #52]	; (801d6a4 <std+0x58>)
 801d670:	6263      	str	r3, [r4, #36]	; 0x24
 801d672:	4b0d      	ldr	r3, [pc, #52]	; (801d6a8 <std+0x5c>)
 801d674:	62a3      	str	r3, [r4, #40]	; 0x28
 801d676:	4b0d      	ldr	r3, [pc, #52]	; (801d6ac <std+0x60>)
 801d678:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d67a:	4b0d      	ldr	r3, [pc, #52]	; (801d6b0 <std+0x64>)
 801d67c:	6323      	str	r3, [r4, #48]	; 0x30
 801d67e:	4b0d      	ldr	r3, [pc, #52]	; (801d6b4 <std+0x68>)
 801d680:	6224      	str	r4, [r4, #32]
 801d682:	429c      	cmp	r4, r3
 801d684:	d006      	beq.n	801d694 <std+0x48>
 801d686:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d68a:	4294      	cmp	r4, r2
 801d68c:	d002      	beq.n	801d694 <std+0x48>
 801d68e:	33d0      	adds	r3, #208	; 0xd0
 801d690:	429c      	cmp	r4, r3
 801d692:	d105      	bne.n	801d6a0 <std+0x54>
 801d694:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d69c:	f000 ba10 	b.w	801dac0 <__retarget_lock_init_recursive>
 801d6a0:	bd10      	pop	{r4, pc}
 801d6a2:	bf00      	nop
 801d6a4:	0801d7f5 	.word	0x0801d7f5
 801d6a8:	0801d817 	.word	0x0801d817
 801d6ac:	0801d84f 	.word	0x0801d84f
 801d6b0:	0801d873 	.word	0x0801d873
 801d6b4:	2401b370 	.word	0x2401b370

0801d6b8 <stdio_exit_handler>:
 801d6b8:	4a02      	ldr	r2, [pc, #8]	; (801d6c4 <stdio_exit_handler+0xc>)
 801d6ba:	4903      	ldr	r1, [pc, #12]	; (801d6c8 <stdio_exit_handler+0x10>)
 801d6bc:	4803      	ldr	r0, [pc, #12]	; (801d6cc <stdio_exit_handler+0x14>)
 801d6be:	f000 b87b 	b.w	801d7b8 <_fwalk_sglue>
 801d6c2:	bf00      	nop
 801d6c4:	24000080 	.word	0x24000080
 801d6c8:	0801e2ed 	.word	0x0801e2ed
 801d6cc:	2400008c 	.word	0x2400008c

0801d6d0 <cleanup_stdio>:
 801d6d0:	6841      	ldr	r1, [r0, #4]
 801d6d2:	4b0c      	ldr	r3, [pc, #48]	; (801d704 <cleanup_stdio+0x34>)
 801d6d4:	4299      	cmp	r1, r3
 801d6d6:	b510      	push	{r4, lr}
 801d6d8:	4604      	mov	r4, r0
 801d6da:	d001      	beq.n	801d6e0 <cleanup_stdio+0x10>
 801d6dc:	f000 fe06 	bl	801e2ec <_fflush_r>
 801d6e0:	68a1      	ldr	r1, [r4, #8]
 801d6e2:	4b09      	ldr	r3, [pc, #36]	; (801d708 <cleanup_stdio+0x38>)
 801d6e4:	4299      	cmp	r1, r3
 801d6e6:	d002      	beq.n	801d6ee <cleanup_stdio+0x1e>
 801d6e8:	4620      	mov	r0, r4
 801d6ea:	f000 fdff 	bl	801e2ec <_fflush_r>
 801d6ee:	68e1      	ldr	r1, [r4, #12]
 801d6f0:	4b06      	ldr	r3, [pc, #24]	; (801d70c <cleanup_stdio+0x3c>)
 801d6f2:	4299      	cmp	r1, r3
 801d6f4:	d004      	beq.n	801d700 <cleanup_stdio+0x30>
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6fc:	f000 bdf6 	b.w	801e2ec <_fflush_r>
 801d700:	bd10      	pop	{r4, pc}
 801d702:	bf00      	nop
 801d704:	2401b370 	.word	0x2401b370
 801d708:	2401b3d8 	.word	0x2401b3d8
 801d70c:	2401b440 	.word	0x2401b440

0801d710 <global_stdio_init.part.0>:
 801d710:	b510      	push	{r4, lr}
 801d712:	4b0b      	ldr	r3, [pc, #44]	; (801d740 <global_stdio_init.part.0+0x30>)
 801d714:	4c0b      	ldr	r4, [pc, #44]	; (801d744 <global_stdio_init.part.0+0x34>)
 801d716:	4a0c      	ldr	r2, [pc, #48]	; (801d748 <global_stdio_init.part.0+0x38>)
 801d718:	601a      	str	r2, [r3, #0]
 801d71a:	4620      	mov	r0, r4
 801d71c:	2200      	movs	r2, #0
 801d71e:	2104      	movs	r1, #4
 801d720:	f7ff ff94 	bl	801d64c <std>
 801d724:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d728:	2201      	movs	r2, #1
 801d72a:	2109      	movs	r1, #9
 801d72c:	f7ff ff8e 	bl	801d64c <std>
 801d730:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d734:	2202      	movs	r2, #2
 801d736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d73a:	2112      	movs	r1, #18
 801d73c:	f7ff bf86 	b.w	801d64c <std>
 801d740:	2401b4a8 	.word	0x2401b4a8
 801d744:	2401b370 	.word	0x2401b370
 801d748:	0801d6b9 	.word	0x0801d6b9

0801d74c <__sfp_lock_acquire>:
 801d74c:	4801      	ldr	r0, [pc, #4]	; (801d754 <__sfp_lock_acquire+0x8>)
 801d74e:	f000 b9b8 	b.w	801dac2 <__retarget_lock_acquire_recursive>
 801d752:	bf00      	nop
 801d754:	2401b4b2 	.word	0x2401b4b2

0801d758 <__sfp_lock_release>:
 801d758:	4801      	ldr	r0, [pc, #4]	; (801d760 <__sfp_lock_release+0x8>)
 801d75a:	f000 b9b3 	b.w	801dac4 <__retarget_lock_release_recursive>
 801d75e:	bf00      	nop
 801d760:	2401b4b2 	.word	0x2401b4b2

0801d764 <__sinit>:
 801d764:	b510      	push	{r4, lr}
 801d766:	4604      	mov	r4, r0
 801d768:	f7ff fff0 	bl	801d74c <__sfp_lock_acquire>
 801d76c:	6a23      	ldr	r3, [r4, #32]
 801d76e:	b11b      	cbz	r3, 801d778 <__sinit+0x14>
 801d770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d774:	f7ff bff0 	b.w	801d758 <__sfp_lock_release>
 801d778:	4b04      	ldr	r3, [pc, #16]	; (801d78c <__sinit+0x28>)
 801d77a:	6223      	str	r3, [r4, #32]
 801d77c:	4b04      	ldr	r3, [pc, #16]	; (801d790 <__sinit+0x2c>)
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	2b00      	cmp	r3, #0
 801d782:	d1f5      	bne.n	801d770 <__sinit+0xc>
 801d784:	f7ff ffc4 	bl	801d710 <global_stdio_init.part.0>
 801d788:	e7f2      	b.n	801d770 <__sinit+0xc>
 801d78a:	bf00      	nop
 801d78c:	0801d6d1 	.word	0x0801d6d1
 801d790:	2401b4a8 	.word	0x2401b4a8

0801d794 <fiprintf>:
 801d794:	b40e      	push	{r1, r2, r3}
 801d796:	b503      	push	{r0, r1, lr}
 801d798:	4601      	mov	r1, r0
 801d79a:	ab03      	add	r3, sp, #12
 801d79c:	4805      	ldr	r0, [pc, #20]	; (801d7b4 <fiprintf+0x20>)
 801d79e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7a2:	6800      	ldr	r0, [r0, #0]
 801d7a4:	9301      	str	r3, [sp, #4]
 801d7a6:	f000 fa71 	bl	801dc8c <_vfiprintf_r>
 801d7aa:	b002      	add	sp, #8
 801d7ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801d7b0:	b003      	add	sp, #12
 801d7b2:	4770      	bx	lr
 801d7b4:	240000d8 	.word	0x240000d8

0801d7b8 <_fwalk_sglue>:
 801d7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7bc:	4607      	mov	r7, r0
 801d7be:	4688      	mov	r8, r1
 801d7c0:	4614      	mov	r4, r2
 801d7c2:	2600      	movs	r6, #0
 801d7c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d7c8:	f1b9 0901 	subs.w	r9, r9, #1
 801d7cc:	d505      	bpl.n	801d7da <_fwalk_sglue+0x22>
 801d7ce:	6824      	ldr	r4, [r4, #0]
 801d7d0:	2c00      	cmp	r4, #0
 801d7d2:	d1f7      	bne.n	801d7c4 <_fwalk_sglue+0xc>
 801d7d4:	4630      	mov	r0, r6
 801d7d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7da:	89ab      	ldrh	r3, [r5, #12]
 801d7dc:	2b01      	cmp	r3, #1
 801d7de:	d907      	bls.n	801d7f0 <_fwalk_sglue+0x38>
 801d7e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d7e4:	3301      	adds	r3, #1
 801d7e6:	d003      	beq.n	801d7f0 <_fwalk_sglue+0x38>
 801d7e8:	4629      	mov	r1, r5
 801d7ea:	4638      	mov	r0, r7
 801d7ec:	47c0      	blx	r8
 801d7ee:	4306      	orrs	r6, r0
 801d7f0:	3568      	adds	r5, #104	; 0x68
 801d7f2:	e7e9      	b.n	801d7c8 <_fwalk_sglue+0x10>

0801d7f4 <__sread>:
 801d7f4:	b510      	push	{r4, lr}
 801d7f6:	460c      	mov	r4, r1
 801d7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7fc:	f000 f8ee 	bl	801d9dc <_read_r>
 801d800:	2800      	cmp	r0, #0
 801d802:	bfab      	itete	ge
 801d804:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d806:	89a3      	ldrhlt	r3, [r4, #12]
 801d808:	181b      	addge	r3, r3, r0
 801d80a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d80e:	bfac      	ite	ge
 801d810:	6563      	strge	r3, [r4, #84]	; 0x54
 801d812:	81a3      	strhlt	r3, [r4, #12]
 801d814:	bd10      	pop	{r4, pc}

0801d816 <__swrite>:
 801d816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d81a:	461f      	mov	r7, r3
 801d81c:	898b      	ldrh	r3, [r1, #12]
 801d81e:	05db      	lsls	r3, r3, #23
 801d820:	4605      	mov	r5, r0
 801d822:	460c      	mov	r4, r1
 801d824:	4616      	mov	r6, r2
 801d826:	d505      	bpl.n	801d834 <__swrite+0x1e>
 801d828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d82c:	2302      	movs	r3, #2
 801d82e:	2200      	movs	r2, #0
 801d830:	f000 f8c2 	bl	801d9b8 <_lseek_r>
 801d834:	89a3      	ldrh	r3, [r4, #12]
 801d836:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d83a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d83e:	81a3      	strh	r3, [r4, #12]
 801d840:	4632      	mov	r2, r6
 801d842:	463b      	mov	r3, r7
 801d844:	4628      	mov	r0, r5
 801d846:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d84a:	f000 b8fd 	b.w	801da48 <_write_r>

0801d84e <__sseek>:
 801d84e:	b510      	push	{r4, lr}
 801d850:	460c      	mov	r4, r1
 801d852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d856:	f000 f8af 	bl	801d9b8 <_lseek_r>
 801d85a:	1c43      	adds	r3, r0, #1
 801d85c:	89a3      	ldrh	r3, [r4, #12]
 801d85e:	bf15      	itete	ne
 801d860:	6560      	strne	r0, [r4, #84]	; 0x54
 801d862:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d866:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d86a:	81a3      	strheq	r3, [r4, #12]
 801d86c:	bf18      	it	ne
 801d86e:	81a3      	strhne	r3, [r4, #12]
 801d870:	bd10      	pop	{r4, pc}

0801d872 <__sclose>:
 801d872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d876:	f000 b839 	b.w	801d8ec <_close_r>

0801d87a <memset>:
 801d87a:	4402      	add	r2, r0
 801d87c:	4603      	mov	r3, r0
 801d87e:	4293      	cmp	r3, r2
 801d880:	d100      	bne.n	801d884 <memset+0xa>
 801d882:	4770      	bx	lr
 801d884:	f803 1b01 	strb.w	r1, [r3], #1
 801d888:	e7f9      	b.n	801d87e <memset+0x4>

0801d88a <_raise_r>:
 801d88a:	291f      	cmp	r1, #31
 801d88c:	b538      	push	{r3, r4, r5, lr}
 801d88e:	4604      	mov	r4, r0
 801d890:	460d      	mov	r5, r1
 801d892:	d904      	bls.n	801d89e <_raise_r+0x14>
 801d894:	2316      	movs	r3, #22
 801d896:	6003      	str	r3, [r0, #0]
 801d898:	f04f 30ff 	mov.w	r0, #4294967295
 801d89c:	bd38      	pop	{r3, r4, r5, pc}
 801d89e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d8a0:	b112      	cbz	r2, 801d8a8 <_raise_r+0x1e>
 801d8a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d8a6:	b94b      	cbnz	r3, 801d8bc <_raise_r+0x32>
 801d8a8:	4620      	mov	r0, r4
 801d8aa:	f000 f8bb 	bl	801da24 <_getpid_r>
 801d8ae:	462a      	mov	r2, r5
 801d8b0:	4601      	mov	r1, r0
 801d8b2:	4620      	mov	r0, r4
 801d8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d8b8:	f000 b8a2 	b.w	801da00 <_kill_r>
 801d8bc:	2b01      	cmp	r3, #1
 801d8be:	d00a      	beq.n	801d8d6 <_raise_r+0x4c>
 801d8c0:	1c59      	adds	r1, r3, #1
 801d8c2:	d103      	bne.n	801d8cc <_raise_r+0x42>
 801d8c4:	2316      	movs	r3, #22
 801d8c6:	6003      	str	r3, [r0, #0]
 801d8c8:	2001      	movs	r0, #1
 801d8ca:	e7e7      	b.n	801d89c <_raise_r+0x12>
 801d8cc:	2400      	movs	r4, #0
 801d8ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d8d2:	4628      	mov	r0, r5
 801d8d4:	4798      	blx	r3
 801d8d6:	2000      	movs	r0, #0
 801d8d8:	e7e0      	b.n	801d89c <_raise_r+0x12>
	...

0801d8dc <raise>:
 801d8dc:	4b02      	ldr	r3, [pc, #8]	; (801d8e8 <raise+0xc>)
 801d8de:	4601      	mov	r1, r0
 801d8e0:	6818      	ldr	r0, [r3, #0]
 801d8e2:	f7ff bfd2 	b.w	801d88a <_raise_r>
 801d8e6:	bf00      	nop
 801d8e8:	240000d8 	.word	0x240000d8

0801d8ec <_close_r>:
 801d8ec:	b538      	push	{r3, r4, r5, lr}
 801d8ee:	4d06      	ldr	r5, [pc, #24]	; (801d908 <_close_r+0x1c>)
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	4604      	mov	r4, r0
 801d8f4:	4608      	mov	r0, r1
 801d8f6:	602b      	str	r3, [r5, #0]
 801d8f8:	f7e3 fc91 	bl	800121e <_close>
 801d8fc:	1c43      	adds	r3, r0, #1
 801d8fe:	d102      	bne.n	801d906 <_close_r+0x1a>
 801d900:	682b      	ldr	r3, [r5, #0]
 801d902:	b103      	cbz	r3, 801d906 <_close_r+0x1a>
 801d904:	6023      	str	r3, [r4, #0]
 801d906:	bd38      	pop	{r3, r4, r5, pc}
 801d908:	2401b4ac 	.word	0x2401b4ac

0801d90c <_reclaim_reent>:
 801d90c:	4b29      	ldr	r3, [pc, #164]	; (801d9b4 <_reclaim_reent+0xa8>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	4283      	cmp	r3, r0
 801d912:	b570      	push	{r4, r5, r6, lr}
 801d914:	4604      	mov	r4, r0
 801d916:	d04b      	beq.n	801d9b0 <_reclaim_reent+0xa4>
 801d918:	69c3      	ldr	r3, [r0, #28]
 801d91a:	b143      	cbz	r3, 801d92e <_reclaim_reent+0x22>
 801d91c:	68db      	ldr	r3, [r3, #12]
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d144      	bne.n	801d9ac <_reclaim_reent+0xa0>
 801d922:	69e3      	ldr	r3, [r4, #28]
 801d924:	6819      	ldr	r1, [r3, #0]
 801d926:	b111      	cbz	r1, 801d92e <_reclaim_reent+0x22>
 801d928:	4620      	mov	r0, r4
 801d92a:	f000 f939 	bl	801dba0 <_free_r>
 801d92e:	6961      	ldr	r1, [r4, #20]
 801d930:	b111      	cbz	r1, 801d938 <_reclaim_reent+0x2c>
 801d932:	4620      	mov	r0, r4
 801d934:	f000 f934 	bl	801dba0 <_free_r>
 801d938:	69e1      	ldr	r1, [r4, #28]
 801d93a:	b111      	cbz	r1, 801d942 <_reclaim_reent+0x36>
 801d93c:	4620      	mov	r0, r4
 801d93e:	f000 f92f 	bl	801dba0 <_free_r>
 801d942:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d944:	b111      	cbz	r1, 801d94c <_reclaim_reent+0x40>
 801d946:	4620      	mov	r0, r4
 801d948:	f000 f92a 	bl	801dba0 <_free_r>
 801d94c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d94e:	b111      	cbz	r1, 801d956 <_reclaim_reent+0x4a>
 801d950:	4620      	mov	r0, r4
 801d952:	f000 f925 	bl	801dba0 <_free_r>
 801d956:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d958:	b111      	cbz	r1, 801d960 <_reclaim_reent+0x54>
 801d95a:	4620      	mov	r0, r4
 801d95c:	f000 f920 	bl	801dba0 <_free_r>
 801d960:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d962:	b111      	cbz	r1, 801d96a <_reclaim_reent+0x5e>
 801d964:	4620      	mov	r0, r4
 801d966:	f000 f91b 	bl	801dba0 <_free_r>
 801d96a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801d96c:	b111      	cbz	r1, 801d974 <_reclaim_reent+0x68>
 801d96e:	4620      	mov	r0, r4
 801d970:	f000 f916 	bl	801dba0 <_free_r>
 801d974:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d976:	b111      	cbz	r1, 801d97e <_reclaim_reent+0x72>
 801d978:	4620      	mov	r0, r4
 801d97a:	f000 f911 	bl	801dba0 <_free_r>
 801d97e:	6a23      	ldr	r3, [r4, #32]
 801d980:	b1b3      	cbz	r3, 801d9b0 <_reclaim_reent+0xa4>
 801d982:	4620      	mov	r0, r4
 801d984:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d988:	4718      	bx	r3
 801d98a:	5949      	ldr	r1, [r1, r5]
 801d98c:	b941      	cbnz	r1, 801d9a0 <_reclaim_reent+0x94>
 801d98e:	3504      	adds	r5, #4
 801d990:	69e3      	ldr	r3, [r4, #28]
 801d992:	2d80      	cmp	r5, #128	; 0x80
 801d994:	68d9      	ldr	r1, [r3, #12]
 801d996:	d1f8      	bne.n	801d98a <_reclaim_reent+0x7e>
 801d998:	4620      	mov	r0, r4
 801d99a:	f000 f901 	bl	801dba0 <_free_r>
 801d99e:	e7c0      	b.n	801d922 <_reclaim_reent+0x16>
 801d9a0:	680e      	ldr	r6, [r1, #0]
 801d9a2:	4620      	mov	r0, r4
 801d9a4:	f000 f8fc 	bl	801dba0 <_free_r>
 801d9a8:	4631      	mov	r1, r6
 801d9aa:	e7ef      	b.n	801d98c <_reclaim_reent+0x80>
 801d9ac:	2500      	movs	r5, #0
 801d9ae:	e7ef      	b.n	801d990 <_reclaim_reent+0x84>
 801d9b0:	bd70      	pop	{r4, r5, r6, pc}
 801d9b2:	bf00      	nop
 801d9b4:	240000d8 	.word	0x240000d8

0801d9b8 <_lseek_r>:
 801d9b8:	b538      	push	{r3, r4, r5, lr}
 801d9ba:	4d07      	ldr	r5, [pc, #28]	; (801d9d8 <_lseek_r+0x20>)
 801d9bc:	4604      	mov	r4, r0
 801d9be:	4608      	mov	r0, r1
 801d9c0:	4611      	mov	r1, r2
 801d9c2:	2200      	movs	r2, #0
 801d9c4:	602a      	str	r2, [r5, #0]
 801d9c6:	461a      	mov	r2, r3
 801d9c8:	f7e3 fc50 	bl	800126c <_lseek>
 801d9cc:	1c43      	adds	r3, r0, #1
 801d9ce:	d102      	bne.n	801d9d6 <_lseek_r+0x1e>
 801d9d0:	682b      	ldr	r3, [r5, #0]
 801d9d2:	b103      	cbz	r3, 801d9d6 <_lseek_r+0x1e>
 801d9d4:	6023      	str	r3, [r4, #0]
 801d9d6:	bd38      	pop	{r3, r4, r5, pc}
 801d9d8:	2401b4ac 	.word	0x2401b4ac

0801d9dc <_read_r>:
 801d9dc:	b538      	push	{r3, r4, r5, lr}
 801d9de:	4d07      	ldr	r5, [pc, #28]	; (801d9fc <_read_r+0x20>)
 801d9e0:	4604      	mov	r4, r0
 801d9e2:	4608      	mov	r0, r1
 801d9e4:	4611      	mov	r1, r2
 801d9e6:	2200      	movs	r2, #0
 801d9e8:	602a      	str	r2, [r5, #0]
 801d9ea:	461a      	mov	r2, r3
 801d9ec:	f7e3 fbde 	bl	80011ac <_read>
 801d9f0:	1c43      	adds	r3, r0, #1
 801d9f2:	d102      	bne.n	801d9fa <_read_r+0x1e>
 801d9f4:	682b      	ldr	r3, [r5, #0]
 801d9f6:	b103      	cbz	r3, 801d9fa <_read_r+0x1e>
 801d9f8:	6023      	str	r3, [r4, #0]
 801d9fa:	bd38      	pop	{r3, r4, r5, pc}
 801d9fc:	2401b4ac 	.word	0x2401b4ac

0801da00 <_kill_r>:
 801da00:	b538      	push	{r3, r4, r5, lr}
 801da02:	4d07      	ldr	r5, [pc, #28]	; (801da20 <_kill_r+0x20>)
 801da04:	2300      	movs	r3, #0
 801da06:	4604      	mov	r4, r0
 801da08:	4608      	mov	r0, r1
 801da0a:	4611      	mov	r1, r2
 801da0c:	602b      	str	r3, [r5, #0]
 801da0e:	f7e3 fbb3 	bl	8001178 <_kill>
 801da12:	1c43      	adds	r3, r0, #1
 801da14:	d102      	bne.n	801da1c <_kill_r+0x1c>
 801da16:	682b      	ldr	r3, [r5, #0]
 801da18:	b103      	cbz	r3, 801da1c <_kill_r+0x1c>
 801da1a:	6023      	str	r3, [r4, #0]
 801da1c:	bd38      	pop	{r3, r4, r5, pc}
 801da1e:	bf00      	nop
 801da20:	2401b4ac 	.word	0x2401b4ac

0801da24 <_getpid_r>:
 801da24:	f7e3 bba0 	b.w	8001168 <_getpid>

0801da28 <_sbrk_r>:
 801da28:	b538      	push	{r3, r4, r5, lr}
 801da2a:	4d06      	ldr	r5, [pc, #24]	; (801da44 <_sbrk_r+0x1c>)
 801da2c:	2300      	movs	r3, #0
 801da2e:	4604      	mov	r4, r0
 801da30:	4608      	mov	r0, r1
 801da32:	602b      	str	r3, [r5, #0]
 801da34:	f7e3 fc28 	bl	8001288 <_sbrk>
 801da38:	1c43      	adds	r3, r0, #1
 801da3a:	d102      	bne.n	801da42 <_sbrk_r+0x1a>
 801da3c:	682b      	ldr	r3, [r5, #0]
 801da3e:	b103      	cbz	r3, 801da42 <_sbrk_r+0x1a>
 801da40:	6023      	str	r3, [r4, #0]
 801da42:	bd38      	pop	{r3, r4, r5, pc}
 801da44:	2401b4ac 	.word	0x2401b4ac

0801da48 <_write_r>:
 801da48:	b538      	push	{r3, r4, r5, lr}
 801da4a:	4d07      	ldr	r5, [pc, #28]	; (801da68 <_write_r+0x20>)
 801da4c:	4604      	mov	r4, r0
 801da4e:	4608      	mov	r0, r1
 801da50:	4611      	mov	r1, r2
 801da52:	2200      	movs	r2, #0
 801da54:	602a      	str	r2, [r5, #0]
 801da56:	461a      	mov	r2, r3
 801da58:	f7e3 fbc5 	bl	80011e6 <_write>
 801da5c:	1c43      	adds	r3, r0, #1
 801da5e:	d102      	bne.n	801da66 <_write_r+0x1e>
 801da60:	682b      	ldr	r3, [r5, #0]
 801da62:	b103      	cbz	r3, 801da66 <_write_r+0x1e>
 801da64:	6023      	str	r3, [r4, #0]
 801da66:	bd38      	pop	{r3, r4, r5, pc}
 801da68:	2401b4ac 	.word	0x2401b4ac

0801da6c <__errno>:
 801da6c:	4b01      	ldr	r3, [pc, #4]	; (801da74 <__errno+0x8>)
 801da6e:	6818      	ldr	r0, [r3, #0]
 801da70:	4770      	bx	lr
 801da72:	bf00      	nop
 801da74:	240000d8 	.word	0x240000d8

0801da78 <__libc_init_array>:
 801da78:	b570      	push	{r4, r5, r6, lr}
 801da7a:	4d0d      	ldr	r5, [pc, #52]	; (801dab0 <__libc_init_array+0x38>)
 801da7c:	4c0d      	ldr	r4, [pc, #52]	; (801dab4 <__libc_init_array+0x3c>)
 801da7e:	1b64      	subs	r4, r4, r5
 801da80:	10a4      	asrs	r4, r4, #2
 801da82:	2600      	movs	r6, #0
 801da84:	42a6      	cmp	r6, r4
 801da86:	d109      	bne.n	801da9c <__libc_init_array+0x24>
 801da88:	4d0b      	ldr	r5, [pc, #44]	; (801dab8 <__libc_init_array+0x40>)
 801da8a:	4c0c      	ldr	r4, [pc, #48]	; (801dabc <__libc_init_array+0x44>)
 801da8c:	f000 fd70 	bl	801e570 <_init>
 801da90:	1b64      	subs	r4, r4, r5
 801da92:	10a4      	asrs	r4, r4, #2
 801da94:	2600      	movs	r6, #0
 801da96:	42a6      	cmp	r6, r4
 801da98:	d105      	bne.n	801daa6 <__libc_init_array+0x2e>
 801da9a:	bd70      	pop	{r4, r5, r6, pc}
 801da9c:	f855 3b04 	ldr.w	r3, [r5], #4
 801daa0:	4798      	blx	r3
 801daa2:	3601      	adds	r6, #1
 801daa4:	e7ee      	b.n	801da84 <__libc_init_array+0xc>
 801daa6:	f855 3b04 	ldr.w	r3, [r5], #4
 801daaa:	4798      	blx	r3
 801daac:	3601      	adds	r6, #1
 801daae:	e7f2      	b.n	801da96 <__libc_init_array+0x1e>
 801dab0:	08091df4 	.word	0x08091df4
 801dab4:	08091df4 	.word	0x08091df4
 801dab8:	08091df4 	.word	0x08091df4
 801dabc:	08091e08 	.word	0x08091e08

0801dac0 <__retarget_lock_init_recursive>:
 801dac0:	4770      	bx	lr

0801dac2 <__retarget_lock_acquire_recursive>:
 801dac2:	4770      	bx	lr

0801dac4 <__retarget_lock_release_recursive>:
 801dac4:	4770      	bx	lr

0801dac6 <memcpy>:
 801dac6:	440a      	add	r2, r1
 801dac8:	4291      	cmp	r1, r2
 801daca:	f100 33ff 	add.w	r3, r0, #4294967295
 801dace:	d100      	bne.n	801dad2 <memcpy+0xc>
 801dad0:	4770      	bx	lr
 801dad2:	b510      	push	{r4, lr}
 801dad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dadc:	4291      	cmp	r1, r2
 801dade:	d1f9      	bne.n	801dad4 <memcpy+0xe>
 801dae0:	bd10      	pop	{r4, pc}
	...

0801dae4 <__register_exitproc>:
 801dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dae8:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801db9c <__register_exitproc+0xb8>
 801daec:	4606      	mov	r6, r0
 801daee:	f8d8 0000 	ldr.w	r0, [r8]
 801daf2:	461f      	mov	r7, r3
 801daf4:	460d      	mov	r5, r1
 801daf6:	4691      	mov	r9, r2
 801daf8:	f7ff ffe3 	bl	801dac2 <__retarget_lock_acquire_recursive>
 801dafc:	4b23      	ldr	r3, [pc, #140]	; (801db8c <__register_exitproc+0xa8>)
 801dafe:	681c      	ldr	r4, [r3, #0]
 801db00:	b934      	cbnz	r4, 801db10 <__register_exitproc+0x2c>
 801db02:	4c23      	ldr	r4, [pc, #140]	; (801db90 <__register_exitproc+0xac>)
 801db04:	601c      	str	r4, [r3, #0]
 801db06:	4b23      	ldr	r3, [pc, #140]	; (801db94 <__register_exitproc+0xb0>)
 801db08:	b113      	cbz	r3, 801db10 <__register_exitproc+0x2c>
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801db10:	6863      	ldr	r3, [r4, #4]
 801db12:	2b1f      	cmp	r3, #31
 801db14:	dd07      	ble.n	801db26 <__register_exitproc+0x42>
 801db16:	f8d8 0000 	ldr.w	r0, [r8]
 801db1a:	f7ff ffd3 	bl	801dac4 <__retarget_lock_release_recursive>
 801db1e:	f04f 30ff 	mov.w	r0, #4294967295
 801db22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801db26:	b32e      	cbz	r6, 801db74 <__register_exitproc+0x90>
 801db28:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801db2c:	b968      	cbnz	r0, 801db4a <__register_exitproc+0x66>
 801db2e:	4b1a      	ldr	r3, [pc, #104]	; (801db98 <__register_exitproc+0xb4>)
 801db30:	2b00      	cmp	r3, #0
 801db32:	d0f0      	beq.n	801db16 <__register_exitproc+0x32>
 801db34:	f44f 7084 	mov.w	r0, #264	; 0x108
 801db38:	f7ff fcbe 	bl	801d4b8 <malloc>
 801db3c:	2800      	cmp	r0, #0
 801db3e:	d0ea      	beq.n	801db16 <__register_exitproc+0x32>
 801db40:	2300      	movs	r3, #0
 801db42:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801db46:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801db4a:	6863      	ldr	r3, [r4, #4]
 801db4c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801db50:	2201      	movs	r2, #1
 801db52:	409a      	lsls	r2, r3
 801db54:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801db58:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801db5c:	4313      	orrs	r3, r2
 801db5e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801db62:	2e02      	cmp	r6, #2
 801db64:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801db68:	bf02      	ittt	eq
 801db6a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801db6e:	4313      	orreq	r3, r2
 801db70:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801db74:	6863      	ldr	r3, [r4, #4]
 801db76:	f8d8 0000 	ldr.w	r0, [r8]
 801db7a:	1c5a      	adds	r2, r3, #1
 801db7c:	3302      	adds	r3, #2
 801db7e:	6062      	str	r2, [r4, #4]
 801db80:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801db84:	f7ff ff9e 	bl	801dac4 <__retarget_lock_release_recursive>
 801db88:	2000      	movs	r0, #0
 801db8a:	e7ca      	b.n	801db22 <__register_exitproc+0x3e>
 801db8c:	2401b540 	.word	0x2401b540
 801db90:	2401b4b4 	.word	0x2401b4b4
 801db94:	080200f0 	.word	0x080200f0
 801db98:	0801d4b9 	.word	0x0801d4b9
 801db9c:	240000dc 	.word	0x240000dc

0801dba0 <_free_r>:
 801dba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dba2:	2900      	cmp	r1, #0
 801dba4:	d044      	beq.n	801dc30 <_free_r+0x90>
 801dba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dbaa:	9001      	str	r0, [sp, #4]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	f1a1 0404 	sub.w	r4, r1, #4
 801dbb2:	bfb8      	it	lt
 801dbb4:	18e4      	addlt	r4, r4, r3
 801dbb6:	f7ff fd2f 	bl	801d618 <__malloc_lock>
 801dbba:	4a1e      	ldr	r2, [pc, #120]	; (801dc34 <_free_r+0x94>)
 801dbbc:	9801      	ldr	r0, [sp, #4]
 801dbbe:	6813      	ldr	r3, [r2, #0]
 801dbc0:	b933      	cbnz	r3, 801dbd0 <_free_r+0x30>
 801dbc2:	6063      	str	r3, [r4, #4]
 801dbc4:	6014      	str	r4, [r2, #0]
 801dbc6:	b003      	add	sp, #12
 801dbc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dbcc:	f7ff bd2a 	b.w	801d624 <__malloc_unlock>
 801dbd0:	42a3      	cmp	r3, r4
 801dbd2:	d908      	bls.n	801dbe6 <_free_r+0x46>
 801dbd4:	6825      	ldr	r5, [r4, #0]
 801dbd6:	1961      	adds	r1, r4, r5
 801dbd8:	428b      	cmp	r3, r1
 801dbda:	bf01      	itttt	eq
 801dbdc:	6819      	ldreq	r1, [r3, #0]
 801dbde:	685b      	ldreq	r3, [r3, #4]
 801dbe0:	1949      	addeq	r1, r1, r5
 801dbe2:	6021      	streq	r1, [r4, #0]
 801dbe4:	e7ed      	b.n	801dbc2 <_free_r+0x22>
 801dbe6:	461a      	mov	r2, r3
 801dbe8:	685b      	ldr	r3, [r3, #4]
 801dbea:	b10b      	cbz	r3, 801dbf0 <_free_r+0x50>
 801dbec:	42a3      	cmp	r3, r4
 801dbee:	d9fa      	bls.n	801dbe6 <_free_r+0x46>
 801dbf0:	6811      	ldr	r1, [r2, #0]
 801dbf2:	1855      	adds	r5, r2, r1
 801dbf4:	42a5      	cmp	r5, r4
 801dbf6:	d10b      	bne.n	801dc10 <_free_r+0x70>
 801dbf8:	6824      	ldr	r4, [r4, #0]
 801dbfa:	4421      	add	r1, r4
 801dbfc:	1854      	adds	r4, r2, r1
 801dbfe:	42a3      	cmp	r3, r4
 801dc00:	6011      	str	r1, [r2, #0]
 801dc02:	d1e0      	bne.n	801dbc6 <_free_r+0x26>
 801dc04:	681c      	ldr	r4, [r3, #0]
 801dc06:	685b      	ldr	r3, [r3, #4]
 801dc08:	6053      	str	r3, [r2, #4]
 801dc0a:	440c      	add	r4, r1
 801dc0c:	6014      	str	r4, [r2, #0]
 801dc0e:	e7da      	b.n	801dbc6 <_free_r+0x26>
 801dc10:	d902      	bls.n	801dc18 <_free_r+0x78>
 801dc12:	230c      	movs	r3, #12
 801dc14:	6003      	str	r3, [r0, #0]
 801dc16:	e7d6      	b.n	801dbc6 <_free_r+0x26>
 801dc18:	6825      	ldr	r5, [r4, #0]
 801dc1a:	1961      	adds	r1, r4, r5
 801dc1c:	428b      	cmp	r3, r1
 801dc1e:	bf04      	itt	eq
 801dc20:	6819      	ldreq	r1, [r3, #0]
 801dc22:	685b      	ldreq	r3, [r3, #4]
 801dc24:	6063      	str	r3, [r4, #4]
 801dc26:	bf04      	itt	eq
 801dc28:	1949      	addeq	r1, r1, r5
 801dc2a:	6021      	streq	r1, [r4, #0]
 801dc2c:	6054      	str	r4, [r2, #4]
 801dc2e:	e7ca      	b.n	801dbc6 <_free_r+0x26>
 801dc30:	b003      	add	sp, #12
 801dc32:	bd30      	pop	{r4, r5, pc}
 801dc34:	2401b368 	.word	0x2401b368

0801dc38 <__sfputc_r>:
 801dc38:	6893      	ldr	r3, [r2, #8]
 801dc3a:	3b01      	subs	r3, #1
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	b410      	push	{r4}
 801dc40:	6093      	str	r3, [r2, #8]
 801dc42:	da08      	bge.n	801dc56 <__sfputc_r+0x1e>
 801dc44:	6994      	ldr	r4, [r2, #24]
 801dc46:	42a3      	cmp	r3, r4
 801dc48:	db01      	blt.n	801dc4e <__sfputc_r+0x16>
 801dc4a:	290a      	cmp	r1, #10
 801dc4c:	d103      	bne.n	801dc56 <__sfputc_r+0x1e>
 801dc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc52:	f000 bb73 	b.w	801e33c <__swbuf_r>
 801dc56:	6813      	ldr	r3, [r2, #0]
 801dc58:	1c58      	adds	r0, r3, #1
 801dc5a:	6010      	str	r0, [r2, #0]
 801dc5c:	7019      	strb	r1, [r3, #0]
 801dc5e:	4608      	mov	r0, r1
 801dc60:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc64:	4770      	bx	lr

0801dc66 <__sfputs_r>:
 801dc66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc68:	4606      	mov	r6, r0
 801dc6a:	460f      	mov	r7, r1
 801dc6c:	4614      	mov	r4, r2
 801dc6e:	18d5      	adds	r5, r2, r3
 801dc70:	42ac      	cmp	r4, r5
 801dc72:	d101      	bne.n	801dc78 <__sfputs_r+0x12>
 801dc74:	2000      	movs	r0, #0
 801dc76:	e007      	b.n	801dc88 <__sfputs_r+0x22>
 801dc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc7c:	463a      	mov	r2, r7
 801dc7e:	4630      	mov	r0, r6
 801dc80:	f7ff ffda 	bl	801dc38 <__sfputc_r>
 801dc84:	1c43      	adds	r3, r0, #1
 801dc86:	d1f3      	bne.n	801dc70 <__sfputs_r+0xa>
 801dc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dc8c <_vfiprintf_r>:
 801dc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc90:	460d      	mov	r5, r1
 801dc92:	b09d      	sub	sp, #116	; 0x74
 801dc94:	4614      	mov	r4, r2
 801dc96:	4698      	mov	r8, r3
 801dc98:	4606      	mov	r6, r0
 801dc9a:	b118      	cbz	r0, 801dca4 <_vfiprintf_r+0x18>
 801dc9c:	6a03      	ldr	r3, [r0, #32]
 801dc9e:	b90b      	cbnz	r3, 801dca4 <_vfiprintf_r+0x18>
 801dca0:	f7ff fd60 	bl	801d764 <__sinit>
 801dca4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dca6:	07d9      	lsls	r1, r3, #31
 801dca8:	d405      	bmi.n	801dcb6 <_vfiprintf_r+0x2a>
 801dcaa:	89ab      	ldrh	r3, [r5, #12]
 801dcac:	059a      	lsls	r2, r3, #22
 801dcae:	d402      	bmi.n	801dcb6 <_vfiprintf_r+0x2a>
 801dcb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dcb2:	f7ff ff06 	bl	801dac2 <__retarget_lock_acquire_recursive>
 801dcb6:	89ab      	ldrh	r3, [r5, #12]
 801dcb8:	071b      	lsls	r3, r3, #28
 801dcba:	d501      	bpl.n	801dcc0 <_vfiprintf_r+0x34>
 801dcbc:	692b      	ldr	r3, [r5, #16]
 801dcbe:	b99b      	cbnz	r3, 801dce8 <_vfiprintf_r+0x5c>
 801dcc0:	4629      	mov	r1, r5
 801dcc2:	4630      	mov	r0, r6
 801dcc4:	f000 fb78 	bl	801e3b8 <__swsetup_r>
 801dcc8:	b170      	cbz	r0, 801dce8 <_vfiprintf_r+0x5c>
 801dcca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dccc:	07dc      	lsls	r4, r3, #31
 801dcce:	d504      	bpl.n	801dcda <_vfiprintf_r+0x4e>
 801dcd0:	f04f 30ff 	mov.w	r0, #4294967295
 801dcd4:	b01d      	add	sp, #116	; 0x74
 801dcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcda:	89ab      	ldrh	r3, [r5, #12]
 801dcdc:	0598      	lsls	r0, r3, #22
 801dcde:	d4f7      	bmi.n	801dcd0 <_vfiprintf_r+0x44>
 801dce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dce2:	f7ff feef 	bl	801dac4 <__retarget_lock_release_recursive>
 801dce6:	e7f3      	b.n	801dcd0 <_vfiprintf_r+0x44>
 801dce8:	2300      	movs	r3, #0
 801dcea:	9309      	str	r3, [sp, #36]	; 0x24
 801dcec:	2320      	movs	r3, #32
 801dcee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dcf2:	f8cd 800c 	str.w	r8, [sp, #12]
 801dcf6:	2330      	movs	r3, #48	; 0x30
 801dcf8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801deac <_vfiprintf_r+0x220>
 801dcfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dd00:	f04f 0901 	mov.w	r9, #1
 801dd04:	4623      	mov	r3, r4
 801dd06:	469a      	mov	sl, r3
 801dd08:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dd0c:	b10a      	cbz	r2, 801dd12 <_vfiprintf_r+0x86>
 801dd0e:	2a25      	cmp	r2, #37	; 0x25
 801dd10:	d1f9      	bne.n	801dd06 <_vfiprintf_r+0x7a>
 801dd12:	ebba 0b04 	subs.w	fp, sl, r4
 801dd16:	d00b      	beq.n	801dd30 <_vfiprintf_r+0xa4>
 801dd18:	465b      	mov	r3, fp
 801dd1a:	4622      	mov	r2, r4
 801dd1c:	4629      	mov	r1, r5
 801dd1e:	4630      	mov	r0, r6
 801dd20:	f7ff ffa1 	bl	801dc66 <__sfputs_r>
 801dd24:	3001      	adds	r0, #1
 801dd26:	f000 80a9 	beq.w	801de7c <_vfiprintf_r+0x1f0>
 801dd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dd2c:	445a      	add	r2, fp
 801dd2e:	9209      	str	r2, [sp, #36]	; 0x24
 801dd30:	f89a 3000 	ldrb.w	r3, [sl]
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	f000 80a1 	beq.w	801de7c <_vfiprintf_r+0x1f0>
 801dd3a:	2300      	movs	r3, #0
 801dd3c:	f04f 32ff 	mov.w	r2, #4294967295
 801dd40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dd44:	f10a 0a01 	add.w	sl, sl, #1
 801dd48:	9304      	str	r3, [sp, #16]
 801dd4a:	9307      	str	r3, [sp, #28]
 801dd4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dd50:	931a      	str	r3, [sp, #104]	; 0x68
 801dd52:	4654      	mov	r4, sl
 801dd54:	2205      	movs	r2, #5
 801dd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dd5a:	4854      	ldr	r0, [pc, #336]	; (801deac <_vfiprintf_r+0x220>)
 801dd5c:	f7e2 fac8 	bl	80002f0 <memchr>
 801dd60:	9a04      	ldr	r2, [sp, #16]
 801dd62:	b9d8      	cbnz	r0, 801dd9c <_vfiprintf_r+0x110>
 801dd64:	06d1      	lsls	r1, r2, #27
 801dd66:	bf44      	itt	mi
 801dd68:	2320      	movmi	r3, #32
 801dd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd6e:	0713      	lsls	r3, r2, #28
 801dd70:	bf44      	itt	mi
 801dd72:	232b      	movmi	r3, #43	; 0x2b
 801dd74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dd78:	f89a 3000 	ldrb.w	r3, [sl]
 801dd7c:	2b2a      	cmp	r3, #42	; 0x2a
 801dd7e:	d015      	beq.n	801ddac <_vfiprintf_r+0x120>
 801dd80:	9a07      	ldr	r2, [sp, #28]
 801dd82:	4654      	mov	r4, sl
 801dd84:	2000      	movs	r0, #0
 801dd86:	f04f 0c0a 	mov.w	ip, #10
 801dd8a:	4621      	mov	r1, r4
 801dd8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dd90:	3b30      	subs	r3, #48	; 0x30
 801dd92:	2b09      	cmp	r3, #9
 801dd94:	d94d      	bls.n	801de32 <_vfiprintf_r+0x1a6>
 801dd96:	b1b0      	cbz	r0, 801ddc6 <_vfiprintf_r+0x13a>
 801dd98:	9207      	str	r2, [sp, #28]
 801dd9a:	e014      	b.n	801ddc6 <_vfiprintf_r+0x13a>
 801dd9c:	eba0 0308 	sub.w	r3, r0, r8
 801dda0:	fa09 f303 	lsl.w	r3, r9, r3
 801dda4:	4313      	orrs	r3, r2
 801dda6:	9304      	str	r3, [sp, #16]
 801dda8:	46a2      	mov	sl, r4
 801ddaa:	e7d2      	b.n	801dd52 <_vfiprintf_r+0xc6>
 801ddac:	9b03      	ldr	r3, [sp, #12]
 801ddae:	1d19      	adds	r1, r3, #4
 801ddb0:	681b      	ldr	r3, [r3, #0]
 801ddb2:	9103      	str	r1, [sp, #12]
 801ddb4:	2b00      	cmp	r3, #0
 801ddb6:	bfbb      	ittet	lt
 801ddb8:	425b      	neglt	r3, r3
 801ddba:	f042 0202 	orrlt.w	r2, r2, #2
 801ddbe:	9307      	strge	r3, [sp, #28]
 801ddc0:	9307      	strlt	r3, [sp, #28]
 801ddc2:	bfb8      	it	lt
 801ddc4:	9204      	strlt	r2, [sp, #16]
 801ddc6:	7823      	ldrb	r3, [r4, #0]
 801ddc8:	2b2e      	cmp	r3, #46	; 0x2e
 801ddca:	d10c      	bne.n	801dde6 <_vfiprintf_r+0x15a>
 801ddcc:	7863      	ldrb	r3, [r4, #1]
 801ddce:	2b2a      	cmp	r3, #42	; 0x2a
 801ddd0:	d134      	bne.n	801de3c <_vfiprintf_r+0x1b0>
 801ddd2:	9b03      	ldr	r3, [sp, #12]
 801ddd4:	1d1a      	adds	r2, r3, #4
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	9203      	str	r2, [sp, #12]
 801ddda:	2b00      	cmp	r3, #0
 801dddc:	bfb8      	it	lt
 801ddde:	f04f 33ff 	movlt.w	r3, #4294967295
 801dde2:	3402      	adds	r4, #2
 801dde4:	9305      	str	r3, [sp, #20]
 801dde6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801debc <_vfiprintf_r+0x230>
 801ddea:	7821      	ldrb	r1, [r4, #0]
 801ddec:	2203      	movs	r2, #3
 801ddee:	4650      	mov	r0, sl
 801ddf0:	f7e2 fa7e 	bl	80002f0 <memchr>
 801ddf4:	b138      	cbz	r0, 801de06 <_vfiprintf_r+0x17a>
 801ddf6:	9b04      	ldr	r3, [sp, #16]
 801ddf8:	eba0 000a 	sub.w	r0, r0, sl
 801ddfc:	2240      	movs	r2, #64	; 0x40
 801ddfe:	4082      	lsls	r2, r0
 801de00:	4313      	orrs	r3, r2
 801de02:	3401      	adds	r4, #1
 801de04:	9304      	str	r3, [sp, #16]
 801de06:	f814 1b01 	ldrb.w	r1, [r4], #1
 801de0a:	4829      	ldr	r0, [pc, #164]	; (801deb0 <_vfiprintf_r+0x224>)
 801de0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801de10:	2206      	movs	r2, #6
 801de12:	f7e2 fa6d 	bl	80002f0 <memchr>
 801de16:	2800      	cmp	r0, #0
 801de18:	d03f      	beq.n	801de9a <_vfiprintf_r+0x20e>
 801de1a:	4b26      	ldr	r3, [pc, #152]	; (801deb4 <_vfiprintf_r+0x228>)
 801de1c:	bb1b      	cbnz	r3, 801de66 <_vfiprintf_r+0x1da>
 801de1e:	9b03      	ldr	r3, [sp, #12]
 801de20:	3307      	adds	r3, #7
 801de22:	f023 0307 	bic.w	r3, r3, #7
 801de26:	3308      	adds	r3, #8
 801de28:	9303      	str	r3, [sp, #12]
 801de2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de2c:	443b      	add	r3, r7
 801de2e:	9309      	str	r3, [sp, #36]	; 0x24
 801de30:	e768      	b.n	801dd04 <_vfiprintf_r+0x78>
 801de32:	fb0c 3202 	mla	r2, ip, r2, r3
 801de36:	460c      	mov	r4, r1
 801de38:	2001      	movs	r0, #1
 801de3a:	e7a6      	b.n	801dd8a <_vfiprintf_r+0xfe>
 801de3c:	2300      	movs	r3, #0
 801de3e:	3401      	adds	r4, #1
 801de40:	9305      	str	r3, [sp, #20]
 801de42:	4619      	mov	r1, r3
 801de44:	f04f 0c0a 	mov.w	ip, #10
 801de48:	4620      	mov	r0, r4
 801de4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801de4e:	3a30      	subs	r2, #48	; 0x30
 801de50:	2a09      	cmp	r2, #9
 801de52:	d903      	bls.n	801de5c <_vfiprintf_r+0x1d0>
 801de54:	2b00      	cmp	r3, #0
 801de56:	d0c6      	beq.n	801dde6 <_vfiprintf_r+0x15a>
 801de58:	9105      	str	r1, [sp, #20]
 801de5a:	e7c4      	b.n	801dde6 <_vfiprintf_r+0x15a>
 801de5c:	fb0c 2101 	mla	r1, ip, r1, r2
 801de60:	4604      	mov	r4, r0
 801de62:	2301      	movs	r3, #1
 801de64:	e7f0      	b.n	801de48 <_vfiprintf_r+0x1bc>
 801de66:	ab03      	add	r3, sp, #12
 801de68:	9300      	str	r3, [sp, #0]
 801de6a:	462a      	mov	r2, r5
 801de6c:	4b12      	ldr	r3, [pc, #72]	; (801deb8 <_vfiprintf_r+0x22c>)
 801de6e:	a904      	add	r1, sp, #16
 801de70:	4630      	mov	r0, r6
 801de72:	f3af 8000 	nop.w
 801de76:	4607      	mov	r7, r0
 801de78:	1c78      	adds	r0, r7, #1
 801de7a:	d1d6      	bne.n	801de2a <_vfiprintf_r+0x19e>
 801de7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801de7e:	07d9      	lsls	r1, r3, #31
 801de80:	d405      	bmi.n	801de8e <_vfiprintf_r+0x202>
 801de82:	89ab      	ldrh	r3, [r5, #12]
 801de84:	059a      	lsls	r2, r3, #22
 801de86:	d402      	bmi.n	801de8e <_vfiprintf_r+0x202>
 801de88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801de8a:	f7ff fe1b 	bl	801dac4 <__retarget_lock_release_recursive>
 801de8e:	89ab      	ldrh	r3, [r5, #12]
 801de90:	065b      	lsls	r3, r3, #25
 801de92:	f53f af1d 	bmi.w	801dcd0 <_vfiprintf_r+0x44>
 801de96:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de98:	e71c      	b.n	801dcd4 <_vfiprintf_r+0x48>
 801de9a:	ab03      	add	r3, sp, #12
 801de9c:	9300      	str	r3, [sp, #0]
 801de9e:	462a      	mov	r2, r5
 801dea0:	4b05      	ldr	r3, [pc, #20]	; (801deb8 <_vfiprintf_r+0x22c>)
 801dea2:	a904      	add	r1, sp, #16
 801dea4:	4630      	mov	r0, r6
 801dea6:	f000 f879 	bl	801df9c <_printf_i>
 801deaa:	e7e4      	b.n	801de76 <_vfiprintf_r+0x1ea>
 801deac:	080200f4 	.word	0x080200f4
 801deb0:	080200fe 	.word	0x080200fe
 801deb4:	00000000 	.word	0x00000000
 801deb8:	0801dc67 	.word	0x0801dc67
 801debc:	080200fa 	.word	0x080200fa

0801dec0 <_printf_common>:
 801dec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dec4:	4616      	mov	r6, r2
 801dec6:	4699      	mov	r9, r3
 801dec8:	688a      	ldr	r2, [r1, #8]
 801deca:	690b      	ldr	r3, [r1, #16]
 801decc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ded0:	4293      	cmp	r3, r2
 801ded2:	bfb8      	it	lt
 801ded4:	4613      	movlt	r3, r2
 801ded6:	6033      	str	r3, [r6, #0]
 801ded8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dedc:	4607      	mov	r7, r0
 801dede:	460c      	mov	r4, r1
 801dee0:	b10a      	cbz	r2, 801dee6 <_printf_common+0x26>
 801dee2:	3301      	adds	r3, #1
 801dee4:	6033      	str	r3, [r6, #0]
 801dee6:	6823      	ldr	r3, [r4, #0]
 801dee8:	0699      	lsls	r1, r3, #26
 801deea:	bf42      	ittt	mi
 801deec:	6833      	ldrmi	r3, [r6, #0]
 801deee:	3302      	addmi	r3, #2
 801def0:	6033      	strmi	r3, [r6, #0]
 801def2:	6825      	ldr	r5, [r4, #0]
 801def4:	f015 0506 	ands.w	r5, r5, #6
 801def8:	d106      	bne.n	801df08 <_printf_common+0x48>
 801defa:	f104 0a19 	add.w	sl, r4, #25
 801defe:	68e3      	ldr	r3, [r4, #12]
 801df00:	6832      	ldr	r2, [r6, #0]
 801df02:	1a9b      	subs	r3, r3, r2
 801df04:	42ab      	cmp	r3, r5
 801df06:	dc26      	bgt.n	801df56 <_printf_common+0x96>
 801df08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801df0c:	1e13      	subs	r3, r2, #0
 801df0e:	6822      	ldr	r2, [r4, #0]
 801df10:	bf18      	it	ne
 801df12:	2301      	movne	r3, #1
 801df14:	0692      	lsls	r2, r2, #26
 801df16:	d42b      	bmi.n	801df70 <_printf_common+0xb0>
 801df18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801df1c:	4649      	mov	r1, r9
 801df1e:	4638      	mov	r0, r7
 801df20:	47c0      	blx	r8
 801df22:	3001      	adds	r0, #1
 801df24:	d01e      	beq.n	801df64 <_printf_common+0xa4>
 801df26:	6823      	ldr	r3, [r4, #0]
 801df28:	6922      	ldr	r2, [r4, #16]
 801df2a:	f003 0306 	and.w	r3, r3, #6
 801df2e:	2b04      	cmp	r3, #4
 801df30:	bf02      	ittt	eq
 801df32:	68e5      	ldreq	r5, [r4, #12]
 801df34:	6833      	ldreq	r3, [r6, #0]
 801df36:	1aed      	subeq	r5, r5, r3
 801df38:	68a3      	ldr	r3, [r4, #8]
 801df3a:	bf0c      	ite	eq
 801df3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801df40:	2500      	movne	r5, #0
 801df42:	4293      	cmp	r3, r2
 801df44:	bfc4      	itt	gt
 801df46:	1a9b      	subgt	r3, r3, r2
 801df48:	18ed      	addgt	r5, r5, r3
 801df4a:	2600      	movs	r6, #0
 801df4c:	341a      	adds	r4, #26
 801df4e:	42b5      	cmp	r5, r6
 801df50:	d11a      	bne.n	801df88 <_printf_common+0xc8>
 801df52:	2000      	movs	r0, #0
 801df54:	e008      	b.n	801df68 <_printf_common+0xa8>
 801df56:	2301      	movs	r3, #1
 801df58:	4652      	mov	r2, sl
 801df5a:	4649      	mov	r1, r9
 801df5c:	4638      	mov	r0, r7
 801df5e:	47c0      	blx	r8
 801df60:	3001      	adds	r0, #1
 801df62:	d103      	bne.n	801df6c <_printf_common+0xac>
 801df64:	f04f 30ff 	mov.w	r0, #4294967295
 801df68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df6c:	3501      	adds	r5, #1
 801df6e:	e7c6      	b.n	801defe <_printf_common+0x3e>
 801df70:	18e1      	adds	r1, r4, r3
 801df72:	1c5a      	adds	r2, r3, #1
 801df74:	2030      	movs	r0, #48	; 0x30
 801df76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801df7a:	4422      	add	r2, r4
 801df7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801df80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801df84:	3302      	adds	r3, #2
 801df86:	e7c7      	b.n	801df18 <_printf_common+0x58>
 801df88:	2301      	movs	r3, #1
 801df8a:	4622      	mov	r2, r4
 801df8c:	4649      	mov	r1, r9
 801df8e:	4638      	mov	r0, r7
 801df90:	47c0      	blx	r8
 801df92:	3001      	adds	r0, #1
 801df94:	d0e6      	beq.n	801df64 <_printf_common+0xa4>
 801df96:	3601      	adds	r6, #1
 801df98:	e7d9      	b.n	801df4e <_printf_common+0x8e>
	...

0801df9c <_printf_i>:
 801df9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dfa0:	7e0f      	ldrb	r7, [r1, #24]
 801dfa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dfa4:	2f78      	cmp	r7, #120	; 0x78
 801dfa6:	4691      	mov	r9, r2
 801dfa8:	4680      	mov	r8, r0
 801dfaa:	460c      	mov	r4, r1
 801dfac:	469a      	mov	sl, r3
 801dfae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dfb2:	d807      	bhi.n	801dfc4 <_printf_i+0x28>
 801dfb4:	2f62      	cmp	r7, #98	; 0x62
 801dfb6:	d80a      	bhi.n	801dfce <_printf_i+0x32>
 801dfb8:	2f00      	cmp	r7, #0
 801dfba:	f000 80d4 	beq.w	801e166 <_printf_i+0x1ca>
 801dfbe:	2f58      	cmp	r7, #88	; 0x58
 801dfc0:	f000 80c0 	beq.w	801e144 <_printf_i+0x1a8>
 801dfc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dfc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dfcc:	e03a      	b.n	801e044 <_printf_i+0xa8>
 801dfce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dfd2:	2b15      	cmp	r3, #21
 801dfd4:	d8f6      	bhi.n	801dfc4 <_printf_i+0x28>
 801dfd6:	a101      	add	r1, pc, #4	; (adr r1, 801dfdc <_printf_i+0x40>)
 801dfd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dfdc:	0801e035 	.word	0x0801e035
 801dfe0:	0801e049 	.word	0x0801e049
 801dfe4:	0801dfc5 	.word	0x0801dfc5
 801dfe8:	0801dfc5 	.word	0x0801dfc5
 801dfec:	0801dfc5 	.word	0x0801dfc5
 801dff0:	0801dfc5 	.word	0x0801dfc5
 801dff4:	0801e049 	.word	0x0801e049
 801dff8:	0801dfc5 	.word	0x0801dfc5
 801dffc:	0801dfc5 	.word	0x0801dfc5
 801e000:	0801dfc5 	.word	0x0801dfc5
 801e004:	0801dfc5 	.word	0x0801dfc5
 801e008:	0801e14d 	.word	0x0801e14d
 801e00c:	0801e075 	.word	0x0801e075
 801e010:	0801e107 	.word	0x0801e107
 801e014:	0801dfc5 	.word	0x0801dfc5
 801e018:	0801dfc5 	.word	0x0801dfc5
 801e01c:	0801e16f 	.word	0x0801e16f
 801e020:	0801dfc5 	.word	0x0801dfc5
 801e024:	0801e075 	.word	0x0801e075
 801e028:	0801dfc5 	.word	0x0801dfc5
 801e02c:	0801dfc5 	.word	0x0801dfc5
 801e030:	0801e10f 	.word	0x0801e10f
 801e034:	682b      	ldr	r3, [r5, #0]
 801e036:	1d1a      	adds	r2, r3, #4
 801e038:	681b      	ldr	r3, [r3, #0]
 801e03a:	602a      	str	r2, [r5, #0]
 801e03c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e040:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e044:	2301      	movs	r3, #1
 801e046:	e09f      	b.n	801e188 <_printf_i+0x1ec>
 801e048:	6820      	ldr	r0, [r4, #0]
 801e04a:	682b      	ldr	r3, [r5, #0]
 801e04c:	0607      	lsls	r7, r0, #24
 801e04e:	f103 0104 	add.w	r1, r3, #4
 801e052:	6029      	str	r1, [r5, #0]
 801e054:	d501      	bpl.n	801e05a <_printf_i+0xbe>
 801e056:	681e      	ldr	r6, [r3, #0]
 801e058:	e003      	b.n	801e062 <_printf_i+0xc6>
 801e05a:	0646      	lsls	r6, r0, #25
 801e05c:	d5fb      	bpl.n	801e056 <_printf_i+0xba>
 801e05e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e062:	2e00      	cmp	r6, #0
 801e064:	da03      	bge.n	801e06e <_printf_i+0xd2>
 801e066:	232d      	movs	r3, #45	; 0x2d
 801e068:	4276      	negs	r6, r6
 801e06a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e06e:	485a      	ldr	r0, [pc, #360]	; (801e1d8 <_printf_i+0x23c>)
 801e070:	230a      	movs	r3, #10
 801e072:	e012      	b.n	801e09a <_printf_i+0xfe>
 801e074:	682b      	ldr	r3, [r5, #0]
 801e076:	6820      	ldr	r0, [r4, #0]
 801e078:	1d19      	adds	r1, r3, #4
 801e07a:	6029      	str	r1, [r5, #0]
 801e07c:	0605      	lsls	r5, r0, #24
 801e07e:	d501      	bpl.n	801e084 <_printf_i+0xe8>
 801e080:	681e      	ldr	r6, [r3, #0]
 801e082:	e002      	b.n	801e08a <_printf_i+0xee>
 801e084:	0641      	lsls	r1, r0, #25
 801e086:	d5fb      	bpl.n	801e080 <_printf_i+0xe4>
 801e088:	881e      	ldrh	r6, [r3, #0]
 801e08a:	4853      	ldr	r0, [pc, #332]	; (801e1d8 <_printf_i+0x23c>)
 801e08c:	2f6f      	cmp	r7, #111	; 0x6f
 801e08e:	bf0c      	ite	eq
 801e090:	2308      	moveq	r3, #8
 801e092:	230a      	movne	r3, #10
 801e094:	2100      	movs	r1, #0
 801e096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e09a:	6865      	ldr	r5, [r4, #4]
 801e09c:	60a5      	str	r5, [r4, #8]
 801e09e:	2d00      	cmp	r5, #0
 801e0a0:	bfa2      	ittt	ge
 801e0a2:	6821      	ldrge	r1, [r4, #0]
 801e0a4:	f021 0104 	bicge.w	r1, r1, #4
 801e0a8:	6021      	strge	r1, [r4, #0]
 801e0aa:	b90e      	cbnz	r6, 801e0b0 <_printf_i+0x114>
 801e0ac:	2d00      	cmp	r5, #0
 801e0ae:	d04b      	beq.n	801e148 <_printf_i+0x1ac>
 801e0b0:	4615      	mov	r5, r2
 801e0b2:	fbb6 f1f3 	udiv	r1, r6, r3
 801e0b6:	fb03 6711 	mls	r7, r3, r1, r6
 801e0ba:	5dc7      	ldrb	r7, [r0, r7]
 801e0bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e0c0:	4637      	mov	r7, r6
 801e0c2:	42bb      	cmp	r3, r7
 801e0c4:	460e      	mov	r6, r1
 801e0c6:	d9f4      	bls.n	801e0b2 <_printf_i+0x116>
 801e0c8:	2b08      	cmp	r3, #8
 801e0ca:	d10b      	bne.n	801e0e4 <_printf_i+0x148>
 801e0cc:	6823      	ldr	r3, [r4, #0]
 801e0ce:	07de      	lsls	r6, r3, #31
 801e0d0:	d508      	bpl.n	801e0e4 <_printf_i+0x148>
 801e0d2:	6923      	ldr	r3, [r4, #16]
 801e0d4:	6861      	ldr	r1, [r4, #4]
 801e0d6:	4299      	cmp	r1, r3
 801e0d8:	bfde      	ittt	le
 801e0da:	2330      	movle	r3, #48	; 0x30
 801e0dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e0e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e0e4:	1b52      	subs	r2, r2, r5
 801e0e6:	6122      	str	r2, [r4, #16]
 801e0e8:	f8cd a000 	str.w	sl, [sp]
 801e0ec:	464b      	mov	r3, r9
 801e0ee:	aa03      	add	r2, sp, #12
 801e0f0:	4621      	mov	r1, r4
 801e0f2:	4640      	mov	r0, r8
 801e0f4:	f7ff fee4 	bl	801dec0 <_printf_common>
 801e0f8:	3001      	adds	r0, #1
 801e0fa:	d14a      	bne.n	801e192 <_printf_i+0x1f6>
 801e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 801e100:	b004      	add	sp, #16
 801e102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e106:	6823      	ldr	r3, [r4, #0]
 801e108:	f043 0320 	orr.w	r3, r3, #32
 801e10c:	6023      	str	r3, [r4, #0]
 801e10e:	4833      	ldr	r0, [pc, #204]	; (801e1dc <_printf_i+0x240>)
 801e110:	2778      	movs	r7, #120	; 0x78
 801e112:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e116:	6823      	ldr	r3, [r4, #0]
 801e118:	6829      	ldr	r1, [r5, #0]
 801e11a:	061f      	lsls	r7, r3, #24
 801e11c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e120:	d402      	bmi.n	801e128 <_printf_i+0x18c>
 801e122:	065f      	lsls	r7, r3, #25
 801e124:	bf48      	it	mi
 801e126:	b2b6      	uxthmi	r6, r6
 801e128:	07df      	lsls	r7, r3, #31
 801e12a:	bf48      	it	mi
 801e12c:	f043 0320 	orrmi.w	r3, r3, #32
 801e130:	6029      	str	r1, [r5, #0]
 801e132:	bf48      	it	mi
 801e134:	6023      	strmi	r3, [r4, #0]
 801e136:	b91e      	cbnz	r6, 801e140 <_printf_i+0x1a4>
 801e138:	6823      	ldr	r3, [r4, #0]
 801e13a:	f023 0320 	bic.w	r3, r3, #32
 801e13e:	6023      	str	r3, [r4, #0]
 801e140:	2310      	movs	r3, #16
 801e142:	e7a7      	b.n	801e094 <_printf_i+0xf8>
 801e144:	4824      	ldr	r0, [pc, #144]	; (801e1d8 <_printf_i+0x23c>)
 801e146:	e7e4      	b.n	801e112 <_printf_i+0x176>
 801e148:	4615      	mov	r5, r2
 801e14a:	e7bd      	b.n	801e0c8 <_printf_i+0x12c>
 801e14c:	682b      	ldr	r3, [r5, #0]
 801e14e:	6826      	ldr	r6, [r4, #0]
 801e150:	6961      	ldr	r1, [r4, #20]
 801e152:	1d18      	adds	r0, r3, #4
 801e154:	6028      	str	r0, [r5, #0]
 801e156:	0635      	lsls	r5, r6, #24
 801e158:	681b      	ldr	r3, [r3, #0]
 801e15a:	d501      	bpl.n	801e160 <_printf_i+0x1c4>
 801e15c:	6019      	str	r1, [r3, #0]
 801e15e:	e002      	b.n	801e166 <_printf_i+0x1ca>
 801e160:	0670      	lsls	r0, r6, #25
 801e162:	d5fb      	bpl.n	801e15c <_printf_i+0x1c0>
 801e164:	8019      	strh	r1, [r3, #0]
 801e166:	2300      	movs	r3, #0
 801e168:	6123      	str	r3, [r4, #16]
 801e16a:	4615      	mov	r5, r2
 801e16c:	e7bc      	b.n	801e0e8 <_printf_i+0x14c>
 801e16e:	682b      	ldr	r3, [r5, #0]
 801e170:	1d1a      	adds	r2, r3, #4
 801e172:	602a      	str	r2, [r5, #0]
 801e174:	681d      	ldr	r5, [r3, #0]
 801e176:	6862      	ldr	r2, [r4, #4]
 801e178:	2100      	movs	r1, #0
 801e17a:	4628      	mov	r0, r5
 801e17c:	f7e2 f8b8 	bl	80002f0 <memchr>
 801e180:	b108      	cbz	r0, 801e186 <_printf_i+0x1ea>
 801e182:	1b40      	subs	r0, r0, r5
 801e184:	6060      	str	r0, [r4, #4]
 801e186:	6863      	ldr	r3, [r4, #4]
 801e188:	6123      	str	r3, [r4, #16]
 801e18a:	2300      	movs	r3, #0
 801e18c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e190:	e7aa      	b.n	801e0e8 <_printf_i+0x14c>
 801e192:	6923      	ldr	r3, [r4, #16]
 801e194:	462a      	mov	r2, r5
 801e196:	4649      	mov	r1, r9
 801e198:	4640      	mov	r0, r8
 801e19a:	47d0      	blx	sl
 801e19c:	3001      	adds	r0, #1
 801e19e:	d0ad      	beq.n	801e0fc <_printf_i+0x160>
 801e1a0:	6823      	ldr	r3, [r4, #0]
 801e1a2:	079b      	lsls	r3, r3, #30
 801e1a4:	d413      	bmi.n	801e1ce <_printf_i+0x232>
 801e1a6:	68e0      	ldr	r0, [r4, #12]
 801e1a8:	9b03      	ldr	r3, [sp, #12]
 801e1aa:	4298      	cmp	r0, r3
 801e1ac:	bfb8      	it	lt
 801e1ae:	4618      	movlt	r0, r3
 801e1b0:	e7a6      	b.n	801e100 <_printf_i+0x164>
 801e1b2:	2301      	movs	r3, #1
 801e1b4:	4632      	mov	r2, r6
 801e1b6:	4649      	mov	r1, r9
 801e1b8:	4640      	mov	r0, r8
 801e1ba:	47d0      	blx	sl
 801e1bc:	3001      	adds	r0, #1
 801e1be:	d09d      	beq.n	801e0fc <_printf_i+0x160>
 801e1c0:	3501      	adds	r5, #1
 801e1c2:	68e3      	ldr	r3, [r4, #12]
 801e1c4:	9903      	ldr	r1, [sp, #12]
 801e1c6:	1a5b      	subs	r3, r3, r1
 801e1c8:	42ab      	cmp	r3, r5
 801e1ca:	dcf2      	bgt.n	801e1b2 <_printf_i+0x216>
 801e1cc:	e7eb      	b.n	801e1a6 <_printf_i+0x20a>
 801e1ce:	2500      	movs	r5, #0
 801e1d0:	f104 0619 	add.w	r6, r4, #25
 801e1d4:	e7f5      	b.n	801e1c2 <_printf_i+0x226>
 801e1d6:	bf00      	nop
 801e1d8:	08020105 	.word	0x08020105
 801e1dc:	08020116 	.word	0x08020116

0801e1e0 <__sflush_r>:
 801e1e0:	898a      	ldrh	r2, [r1, #12]
 801e1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e1e6:	4605      	mov	r5, r0
 801e1e8:	0710      	lsls	r0, r2, #28
 801e1ea:	460c      	mov	r4, r1
 801e1ec:	d458      	bmi.n	801e2a0 <__sflush_r+0xc0>
 801e1ee:	684b      	ldr	r3, [r1, #4]
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	dc05      	bgt.n	801e200 <__sflush_r+0x20>
 801e1f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	dc02      	bgt.n	801e200 <__sflush_r+0x20>
 801e1fa:	2000      	movs	r0, #0
 801e1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e202:	2e00      	cmp	r6, #0
 801e204:	d0f9      	beq.n	801e1fa <__sflush_r+0x1a>
 801e206:	2300      	movs	r3, #0
 801e208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e20c:	682f      	ldr	r7, [r5, #0]
 801e20e:	6a21      	ldr	r1, [r4, #32]
 801e210:	602b      	str	r3, [r5, #0]
 801e212:	d032      	beq.n	801e27a <__sflush_r+0x9a>
 801e214:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e216:	89a3      	ldrh	r3, [r4, #12]
 801e218:	075a      	lsls	r2, r3, #29
 801e21a:	d505      	bpl.n	801e228 <__sflush_r+0x48>
 801e21c:	6863      	ldr	r3, [r4, #4]
 801e21e:	1ac0      	subs	r0, r0, r3
 801e220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e222:	b10b      	cbz	r3, 801e228 <__sflush_r+0x48>
 801e224:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e226:	1ac0      	subs	r0, r0, r3
 801e228:	2300      	movs	r3, #0
 801e22a:	4602      	mov	r2, r0
 801e22c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e22e:	6a21      	ldr	r1, [r4, #32]
 801e230:	4628      	mov	r0, r5
 801e232:	47b0      	blx	r6
 801e234:	1c43      	adds	r3, r0, #1
 801e236:	89a3      	ldrh	r3, [r4, #12]
 801e238:	d106      	bne.n	801e248 <__sflush_r+0x68>
 801e23a:	6829      	ldr	r1, [r5, #0]
 801e23c:	291d      	cmp	r1, #29
 801e23e:	d82b      	bhi.n	801e298 <__sflush_r+0xb8>
 801e240:	4a29      	ldr	r2, [pc, #164]	; (801e2e8 <__sflush_r+0x108>)
 801e242:	410a      	asrs	r2, r1
 801e244:	07d6      	lsls	r6, r2, #31
 801e246:	d427      	bmi.n	801e298 <__sflush_r+0xb8>
 801e248:	2200      	movs	r2, #0
 801e24a:	6062      	str	r2, [r4, #4]
 801e24c:	04d9      	lsls	r1, r3, #19
 801e24e:	6922      	ldr	r2, [r4, #16]
 801e250:	6022      	str	r2, [r4, #0]
 801e252:	d504      	bpl.n	801e25e <__sflush_r+0x7e>
 801e254:	1c42      	adds	r2, r0, #1
 801e256:	d101      	bne.n	801e25c <__sflush_r+0x7c>
 801e258:	682b      	ldr	r3, [r5, #0]
 801e25a:	b903      	cbnz	r3, 801e25e <__sflush_r+0x7e>
 801e25c:	6560      	str	r0, [r4, #84]	; 0x54
 801e25e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e260:	602f      	str	r7, [r5, #0]
 801e262:	2900      	cmp	r1, #0
 801e264:	d0c9      	beq.n	801e1fa <__sflush_r+0x1a>
 801e266:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e26a:	4299      	cmp	r1, r3
 801e26c:	d002      	beq.n	801e274 <__sflush_r+0x94>
 801e26e:	4628      	mov	r0, r5
 801e270:	f7ff fc96 	bl	801dba0 <_free_r>
 801e274:	2000      	movs	r0, #0
 801e276:	6360      	str	r0, [r4, #52]	; 0x34
 801e278:	e7c0      	b.n	801e1fc <__sflush_r+0x1c>
 801e27a:	2301      	movs	r3, #1
 801e27c:	4628      	mov	r0, r5
 801e27e:	47b0      	blx	r6
 801e280:	1c41      	adds	r1, r0, #1
 801e282:	d1c8      	bne.n	801e216 <__sflush_r+0x36>
 801e284:	682b      	ldr	r3, [r5, #0]
 801e286:	2b00      	cmp	r3, #0
 801e288:	d0c5      	beq.n	801e216 <__sflush_r+0x36>
 801e28a:	2b1d      	cmp	r3, #29
 801e28c:	d001      	beq.n	801e292 <__sflush_r+0xb2>
 801e28e:	2b16      	cmp	r3, #22
 801e290:	d101      	bne.n	801e296 <__sflush_r+0xb6>
 801e292:	602f      	str	r7, [r5, #0]
 801e294:	e7b1      	b.n	801e1fa <__sflush_r+0x1a>
 801e296:	89a3      	ldrh	r3, [r4, #12]
 801e298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e29c:	81a3      	strh	r3, [r4, #12]
 801e29e:	e7ad      	b.n	801e1fc <__sflush_r+0x1c>
 801e2a0:	690f      	ldr	r7, [r1, #16]
 801e2a2:	2f00      	cmp	r7, #0
 801e2a4:	d0a9      	beq.n	801e1fa <__sflush_r+0x1a>
 801e2a6:	0793      	lsls	r3, r2, #30
 801e2a8:	680e      	ldr	r6, [r1, #0]
 801e2aa:	bf08      	it	eq
 801e2ac:	694b      	ldreq	r3, [r1, #20]
 801e2ae:	600f      	str	r7, [r1, #0]
 801e2b0:	bf18      	it	ne
 801e2b2:	2300      	movne	r3, #0
 801e2b4:	eba6 0807 	sub.w	r8, r6, r7
 801e2b8:	608b      	str	r3, [r1, #8]
 801e2ba:	f1b8 0f00 	cmp.w	r8, #0
 801e2be:	dd9c      	ble.n	801e1fa <__sflush_r+0x1a>
 801e2c0:	6a21      	ldr	r1, [r4, #32]
 801e2c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e2c4:	4643      	mov	r3, r8
 801e2c6:	463a      	mov	r2, r7
 801e2c8:	4628      	mov	r0, r5
 801e2ca:	47b0      	blx	r6
 801e2cc:	2800      	cmp	r0, #0
 801e2ce:	dc06      	bgt.n	801e2de <__sflush_r+0xfe>
 801e2d0:	89a3      	ldrh	r3, [r4, #12]
 801e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e2d6:	81a3      	strh	r3, [r4, #12]
 801e2d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e2dc:	e78e      	b.n	801e1fc <__sflush_r+0x1c>
 801e2de:	4407      	add	r7, r0
 801e2e0:	eba8 0800 	sub.w	r8, r8, r0
 801e2e4:	e7e9      	b.n	801e2ba <__sflush_r+0xda>
 801e2e6:	bf00      	nop
 801e2e8:	dfbffffe 	.word	0xdfbffffe

0801e2ec <_fflush_r>:
 801e2ec:	b538      	push	{r3, r4, r5, lr}
 801e2ee:	690b      	ldr	r3, [r1, #16]
 801e2f0:	4605      	mov	r5, r0
 801e2f2:	460c      	mov	r4, r1
 801e2f4:	b913      	cbnz	r3, 801e2fc <_fflush_r+0x10>
 801e2f6:	2500      	movs	r5, #0
 801e2f8:	4628      	mov	r0, r5
 801e2fa:	bd38      	pop	{r3, r4, r5, pc}
 801e2fc:	b118      	cbz	r0, 801e306 <_fflush_r+0x1a>
 801e2fe:	6a03      	ldr	r3, [r0, #32]
 801e300:	b90b      	cbnz	r3, 801e306 <_fflush_r+0x1a>
 801e302:	f7ff fa2f 	bl	801d764 <__sinit>
 801e306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	d0f3      	beq.n	801e2f6 <_fflush_r+0xa>
 801e30e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e310:	07d0      	lsls	r0, r2, #31
 801e312:	d404      	bmi.n	801e31e <_fflush_r+0x32>
 801e314:	0599      	lsls	r1, r3, #22
 801e316:	d402      	bmi.n	801e31e <_fflush_r+0x32>
 801e318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e31a:	f7ff fbd2 	bl	801dac2 <__retarget_lock_acquire_recursive>
 801e31e:	4628      	mov	r0, r5
 801e320:	4621      	mov	r1, r4
 801e322:	f7ff ff5d 	bl	801e1e0 <__sflush_r>
 801e326:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e328:	07da      	lsls	r2, r3, #31
 801e32a:	4605      	mov	r5, r0
 801e32c:	d4e4      	bmi.n	801e2f8 <_fflush_r+0xc>
 801e32e:	89a3      	ldrh	r3, [r4, #12]
 801e330:	059b      	lsls	r3, r3, #22
 801e332:	d4e1      	bmi.n	801e2f8 <_fflush_r+0xc>
 801e334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e336:	f7ff fbc5 	bl	801dac4 <__retarget_lock_release_recursive>
 801e33a:	e7dd      	b.n	801e2f8 <_fflush_r+0xc>

0801e33c <__swbuf_r>:
 801e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e33e:	460e      	mov	r6, r1
 801e340:	4614      	mov	r4, r2
 801e342:	4605      	mov	r5, r0
 801e344:	b118      	cbz	r0, 801e34e <__swbuf_r+0x12>
 801e346:	6a03      	ldr	r3, [r0, #32]
 801e348:	b90b      	cbnz	r3, 801e34e <__swbuf_r+0x12>
 801e34a:	f7ff fa0b 	bl	801d764 <__sinit>
 801e34e:	69a3      	ldr	r3, [r4, #24]
 801e350:	60a3      	str	r3, [r4, #8]
 801e352:	89a3      	ldrh	r3, [r4, #12]
 801e354:	071a      	lsls	r2, r3, #28
 801e356:	d525      	bpl.n	801e3a4 <__swbuf_r+0x68>
 801e358:	6923      	ldr	r3, [r4, #16]
 801e35a:	b31b      	cbz	r3, 801e3a4 <__swbuf_r+0x68>
 801e35c:	6823      	ldr	r3, [r4, #0]
 801e35e:	6922      	ldr	r2, [r4, #16]
 801e360:	1a98      	subs	r0, r3, r2
 801e362:	6963      	ldr	r3, [r4, #20]
 801e364:	b2f6      	uxtb	r6, r6
 801e366:	4283      	cmp	r3, r0
 801e368:	4637      	mov	r7, r6
 801e36a:	dc04      	bgt.n	801e376 <__swbuf_r+0x3a>
 801e36c:	4621      	mov	r1, r4
 801e36e:	4628      	mov	r0, r5
 801e370:	f7ff ffbc 	bl	801e2ec <_fflush_r>
 801e374:	b9e0      	cbnz	r0, 801e3b0 <__swbuf_r+0x74>
 801e376:	68a3      	ldr	r3, [r4, #8]
 801e378:	3b01      	subs	r3, #1
 801e37a:	60a3      	str	r3, [r4, #8]
 801e37c:	6823      	ldr	r3, [r4, #0]
 801e37e:	1c5a      	adds	r2, r3, #1
 801e380:	6022      	str	r2, [r4, #0]
 801e382:	701e      	strb	r6, [r3, #0]
 801e384:	6962      	ldr	r2, [r4, #20]
 801e386:	1c43      	adds	r3, r0, #1
 801e388:	429a      	cmp	r2, r3
 801e38a:	d004      	beq.n	801e396 <__swbuf_r+0x5a>
 801e38c:	89a3      	ldrh	r3, [r4, #12]
 801e38e:	07db      	lsls	r3, r3, #31
 801e390:	d506      	bpl.n	801e3a0 <__swbuf_r+0x64>
 801e392:	2e0a      	cmp	r6, #10
 801e394:	d104      	bne.n	801e3a0 <__swbuf_r+0x64>
 801e396:	4621      	mov	r1, r4
 801e398:	4628      	mov	r0, r5
 801e39a:	f7ff ffa7 	bl	801e2ec <_fflush_r>
 801e39e:	b938      	cbnz	r0, 801e3b0 <__swbuf_r+0x74>
 801e3a0:	4638      	mov	r0, r7
 801e3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e3a4:	4621      	mov	r1, r4
 801e3a6:	4628      	mov	r0, r5
 801e3a8:	f000 f806 	bl	801e3b8 <__swsetup_r>
 801e3ac:	2800      	cmp	r0, #0
 801e3ae:	d0d5      	beq.n	801e35c <__swbuf_r+0x20>
 801e3b0:	f04f 37ff 	mov.w	r7, #4294967295
 801e3b4:	e7f4      	b.n	801e3a0 <__swbuf_r+0x64>
	...

0801e3b8 <__swsetup_r>:
 801e3b8:	b538      	push	{r3, r4, r5, lr}
 801e3ba:	4b2a      	ldr	r3, [pc, #168]	; (801e464 <__swsetup_r+0xac>)
 801e3bc:	4605      	mov	r5, r0
 801e3be:	6818      	ldr	r0, [r3, #0]
 801e3c0:	460c      	mov	r4, r1
 801e3c2:	b118      	cbz	r0, 801e3cc <__swsetup_r+0x14>
 801e3c4:	6a03      	ldr	r3, [r0, #32]
 801e3c6:	b90b      	cbnz	r3, 801e3cc <__swsetup_r+0x14>
 801e3c8:	f7ff f9cc 	bl	801d764 <__sinit>
 801e3cc:	89a3      	ldrh	r3, [r4, #12]
 801e3ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e3d2:	0718      	lsls	r0, r3, #28
 801e3d4:	d422      	bmi.n	801e41c <__swsetup_r+0x64>
 801e3d6:	06d9      	lsls	r1, r3, #27
 801e3d8:	d407      	bmi.n	801e3ea <__swsetup_r+0x32>
 801e3da:	2309      	movs	r3, #9
 801e3dc:	602b      	str	r3, [r5, #0]
 801e3de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e3e2:	81a3      	strh	r3, [r4, #12]
 801e3e4:	f04f 30ff 	mov.w	r0, #4294967295
 801e3e8:	e034      	b.n	801e454 <__swsetup_r+0x9c>
 801e3ea:	0758      	lsls	r0, r3, #29
 801e3ec:	d512      	bpl.n	801e414 <__swsetup_r+0x5c>
 801e3ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e3f0:	b141      	cbz	r1, 801e404 <__swsetup_r+0x4c>
 801e3f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e3f6:	4299      	cmp	r1, r3
 801e3f8:	d002      	beq.n	801e400 <__swsetup_r+0x48>
 801e3fa:	4628      	mov	r0, r5
 801e3fc:	f7ff fbd0 	bl	801dba0 <_free_r>
 801e400:	2300      	movs	r3, #0
 801e402:	6363      	str	r3, [r4, #52]	; 0x34
 801e404:	89a3      	ldrh	r3, [r4, #12]
 801e406:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e40a:	81a3      	strh	r3, [r4, #12]
 801e40c:	2300      	movs	r3, #0
 801e40e:	6063      	str	r3, [r4, #4]
 801e410:	6923      	ldr	r3, [r4, #16]
 801e412:	6023      	str	r3, [r4, #0]
 801e414:	89a3      	ldrh	r3, [r4, #12]
 801e416:	f043 0308 	orr.w	r3, r3, #8
 801e41a:	81a3      	strh	r3, [r4, #12]
 801e41c:	6923      	ldr	r3, [r4, #16]
 801e41e:	b94b      	cbnz	r3, 801e434 <__swsetup_r+0x7c>
 801e420:	89a3      	ldrh	r3, [r4, #12]
 801e422:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e42a:	d003      	beq.n	801e434 <__swsetup_r+0x7c>
 801e42c:	4621      	mov	r1, r4
 801e42e:	4628      	mov	r0, r5
 801e430:	f000 f840 	bl	801e4b4 <__smakebuf_r>
 801e434:	89a0      	ldrh	r0, [r4, #12]
 801e436:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e43a:	f010 0301 	ands.w	r3, r0, #1
 801e43e:	d00a      	beq.n	801e456 <__swsetup_r+0x9e>
 801e440:	2300      	movs	r3, #0
 801e442:	60a3      	str	r3, [r4, #8]
 801e444:	6963      	ldr	r3, [r4, #20]
 801e446:	425b      	negs	r3, r3
 801e448:	61a3      	str	r3, [r4, #24]
 801e44a:	6923      	ldr	r3, [r4, #16]
 801e44c:	b943      	cbnz	r3, 801e460 <__swsetup_r+0xa8>
 801e44e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e452:	d1c4      	bne.n	801e3de <__swsetup_r+0x26>
 801e454:	bd38      	pop	{r3, r4, r5, pc}
 801e456:	0781      	lsls	r1, r0, #30
 801e458:	bf58      	it	pl
 801e45a:	6963      	ldrpl	r3, [r4, #20]
 801e45c:	60a3      	str	r3, [r4, #8]
 801e45e:	e7f4      	b.n	801e44a <__swsetup_r+0x92>
 801e460:	2000      	movs	r0, #0
 801e462:	e7f7      	b.n	801e454 <__swsetup_r+0x9c>
 801e464:	240000d8 	.word	0x240000d8

0801e468 <__swhatbuf_r>:
 801e468:	b570      	push	{r4, r5, r6, lr}
 801e46a:	460c      	mov	r4, r1
 801e46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e470:	2900      	cmp	r1, #0
 801e472:	b096      	sub	sp, #88	; 0x58
 801e474:	4615      	mov	r5, r2
 801e476:	461e      	mov	r6, r3
 801e478:	da0d      	bge.n	801e496 <__swhatbuf_r+0x2e>
 801e47a:	89a3      	ldrh	r3, [r4, #12]
 801e47c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e480:	f04f 0100 	mov.w	r1, #0
 801e484:	bf0c      	ite	eq
 801e486:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e48a:	2340      	movne	r3, #64	; 0x40
 801e48c:	2000      	movs	r0, #0
 801e48e:	6031      	str	r1, [r6, #0]
 801e490:	602b      	str	r3, [r5, #0]
 801e492:	b016      	add	sp, #88	; 0x58
 801e494:	bd70      	pop	{r4, r5, r6, pc}
 801e496:	466a      	mov	r2, sp
 801e498:	f000 f848 	bl	801e52c <_fstat_r>
 801e49c:	2800      	cmp	r0, #0
 801e49e:	dbec      	blt.n	801e47a <__swhatbuf_r+0x12>
 801e4a0:	9901      	ldr	r1, [sp, #4]
 801e4a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e4a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e4aa:	4259      	negs	r1, r3
 801e4ac:	4159      	adcs	r1, r3
 801e4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e4b2:	e7eb      	b.n	801e48c <__swhatbuf_r+0x24>

0801e4b4 <__smakebuf_r>:
 801e4b4:	898b      	ldrh	r3, [r1, #12]
 801e4b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e4b8:	079d      	lsls	r5, r3, #30
 801e4ba:	4606      	mov	r6, r0
 801e4bc:	460c      	mov	r4, r1
 801e4be:	d507      	bpl.n	801e4d0 <__smakebuf_r+0x1c>
 801e4c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e4c4:	6023      	str	r3, [r4, #0]
 801e4c6:	6123      	str	r3, [r4, #16]
 801e4c8:	2301      	movs	r3, #1
 801e4ca:	6163      	str	r3, [r4, #20]
 801e4cc:	b002      	add	sp, #8
 801e4ce:	bd70      	pop	{r4, r5, r6, pc}
 801e4d0:	ab01      	add	r3, sp, #4
 801e4d2:	466a      	mov	r2, sp
 801e4d4:	f7ff ffc8 	bl	801e468 <__swhatbuf_r>
 801e4d8:	9900      	ldr	r1, [sp, #0]
 801e4da:	4605      	mov	r5, r0
 801e4dc:	4630      	mov	r0, r6
 801e4de:	f7ff f81b 	bl	801d518 <_malloc_r>
 801e4e2:	b948      	cbnz	r0, 801e4f8 <__smakebuf_r+0x44>
 801e4e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4e8:	059a      	lsls	r2, r3, #22
 801e4ea:	d4ef      	bmi.n	801e4cc <__smakebuf_r+0x18>
 801e4ec:	f023 0303 	bic.w	r3, r3, #3
 801e4f0:	f043 0302 	orr.w	r3, r3, #2
 801e4f4:	81a3      	strh	r3, [r4, #12]
 801e4f6:	e7e3      	b.n	801e4c0 <__smakebuf_r+0xc>
 801e4f8:	89a3      	ldrh	r3, [r4, #12]
 801e4fa:	6020      	str	r0, [r4, #0]
 801e4fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e500:	81a3      	strh	r3, [r4, #12]
 801e502:	9b00      	ldr	r3, [sp, #0]
 801e504:	6163      	str	r3, [r4, #20]
 801e506:	9b01      	ldr	r3, [sp, #4]
 801e508:	6120      	str	r0, [r4, #16]
 801e50a:	b15b      	cbz	r3, 801e524 <__smakebuf_r+0x70>
 801e50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e510:	4630      	mov	r0, r6
 801e512:	f000 f81d 	bl	801e550 <_isatty_r>
 801e516:	b128      	cbz	r0, 801e524 <__smakebuf_r+0x70>
 801e518:	89a3      	ldrh	r3, [r4, #12]
 801e51a:	f023 0303 	bic.w	r3, r3, #3
 801e51e:	f043 0301 	orr.w	r3, r3, #1
 801e522:	81a3      	strh	r3, [r4, #12]
 801e524:	89a3      	ldrh	r3, [r4, #12]
 801e526:	431d      	orrs	r5, r3
 801e528:	81a5      	strh	r5, [r4, #12]
 801e52a:	e7cf      	b.n	801e4cc <__smakebuf_r+0x18>

0801e52c <_fstat_r>:
 801e52c:	b538      	push	{r3, r4, r5, lr}
 801e52e:	4d07      	ldr	r5, [pc, #28]	; (801e54c <_fstat_r+0x20>)
 801e530:	2300      	movs	r3, #0
 801e532:	4604      	mov	r4, r0
 801e534:	4608      	mov	r0, r1
 801e536:	4611      	mov	r1, r2
 801e538:	602b      	str	r3, [r5, #0]
 801e53a:	f7e2 fe7c 	bl	8001236 <_fstat>
 801e53e:	1c43      	adds	r3, r0, #1
 801e540:	d102      	bne.n	801e548 <_fstat_r+0x1c>
 801e542:	682b      	ldr	r3, [r5, #0]
 801e544:	b103      	cbz	r3, 801e548 <_fstat_r+0x1c>
 801e546:	6023      	str	r3, [r4, #0]
 801e548:	bd38      	pop	{r3, r4, r5, pc}
 801e54a:	bf00      	nop
 801e54c:	2401b4ac 	.word	0x2401b4ac

0801e550 <_isatty_r>:
 801e550:	b538      	push	{r3, r4, r5, lr}
 801e552:	4d06      	ldr	r5, [pc, #24]	; (801e56c <_isatty_r+0x1c>)
 801e554:	2300      	movs	r3, #0
 801e556:	4604      	mov	r4, r0
 801e558:	4608      	mov	r0, r1
 801e55a:	602b      	str	r3, [r5, #0]
 801e55c:	f7e2 fe7b 	bl	8001256 <_isatty>
 801e560:	1c43      	adds	r3, r0, #1
 801e562:	d102      	bne.n	801e56a <_isatty_r+0x1a>
 801e564:	682b      	ldr	r3, [r5, #0]
 801e566:	b103      	cbz	r3, 801e56a <_isatty_r+0x1a>
 801e568:	6023      	str	r3, [r4, #0]
 801e56a:	bd38      	pop	{r3, r4, r5, pc}
 801e56c:	2401b4ac 	.word	0x2401b4ac

0801e570 <_init>:
 801e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e572:	bf00      	nop
 801e574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e576:	bc08      	pop	{r3}
 801e578:	469e      	mov	lr, r3
 801e57a:	4770      	bx	lr

0801e57c <_fini>:
 801e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e57e:	bf00      	nop
 801e580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e582:	bc08      	pop	{r3}
 801e584:	469e      	mov	lr, r3
 801e586:	4770      	bx	lr
